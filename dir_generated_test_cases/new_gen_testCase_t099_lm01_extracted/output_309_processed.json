{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..9fa7849 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -18,6 +18,43 @@ from astropy.modeling.core import ModelDefinitionError\n sh1 = models.Shift(1, name='shift1')\n sh2 = models.Shift(2, name='sh2')\n scl1 = models.Scale(1, name='scl1')\n+import numpy as np\n+import pytest\n+from numpy.testing import assert_allclose\n+from astropy.modeling import models, separable\n+from astropy.modeling.separable import separability_matrix\n+from astropy.modeling.models import custom_model\n+from astropy.modeling.mappings import Mapping\n+from astropy.modeling.core import ModelDefinitionError\n+\n+# Additional test cases for the issue that was reported\n+\n+def test_separability_matrix_for_nested_models():\n+    # Create simple compound model as per example\n+    cm_simple = models.Linear1D(10) & models.Linear1D(5)\n+    expected_simple = np.array([[True, False], [False, True]])\n+    assert_allclose(separability_matrix(cm_simple), expected_simple)\n+\n+    # Create a more complex compound model\n+    cm_complex = models.Pix2Sky_TAN() & models.Linear1D(10) & models.Linear1D(5)\n+    expected_complex = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    assert_allclose(separability_matrix(cm_complex), expected_complex)\n+\n+    # Test the nested compound model issue\n+    cm_nested = models.Pix2Sky_TAN() & cm_simple\n+    expected_nested = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    assert_allclose(separability_matrix(cm_nested), expected_nested)\n+\n scl2 = models.Scale(2, name='scl2')\n map1 = Mapping((0, 1, 0, 1), name='map1')\n map2 = Mapping((0, 0, 1), name='map2')\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..0f790c5 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,11 +1,35 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Test writing and reading a table with header_rows specified for RST format\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n \n-from .common import assert_almost_equal, assert_equal\n-\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n \n def assert_equal_splitlines(arg1, arg2):\n     assert_equal(arg1.splitlines(), arg2.splitlines())\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..e1c846c 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -42,8 +42,21 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert table2.meta[\"comments\"][0].startswith(\"WT -- hardness\")\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n+import pytest\n \n-def test_roundtrip(tmp_path):\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip(tmp_path, lowercase):\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..6aeb397 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,50 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+import pytest\n+\n+def test_nddata_mask_propagation_v53():\n+    \"\"\"\n+    Test NDDataRef mask propagation when one of the operands does not have a mask.\n+    This test is based on an issue reported for version 5.3 where handling an\n+    operand without a mask using np.bitwise_or would fail.\n+    \"\"\"\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)   # No mask\n+    nref_mask = NDDataRef(array, mask=mask)  # With mask\n+\n+    # Case: no mask * no mask -> expect no mask\n+    assert nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask is None\n+\n+    # Case: no mask * no mask -> expect no mask\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # Case: mask * no mask -> expect the original mask\n+    np.testing.assert_equal(\n+        nref_mask.multiply(1., handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # Case: mask * mask -> expect the original mask\n+    np.testing.assert_equal(\n+        nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # Case: mask * no mask -> expect the original mask\n+    np.testing.assert_equal(\n+        nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+    \n+    # Additional Check for Bitwise Logic\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_mask, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..133dc66 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -300,6 +300,27 @@ class TestTableFunctions(FitsTestCase):\n         hdul.close()\n         a.close()\n \n+    def test_exponent_d_replacement(self):\n+        \"\"\"\n+        Test that the 'D' exponent replacement is correctly handled in ASCII tables.\n+        Create a FITS file containing a column with 'D' format and verify\n+        that the exponent separator is 'D' in the file.\n+        \"\"\"\n+        # Create data with a column in 'D' format (double precision floating point)\n+        r1 = np.array([123.456, 789.012])\n+        c1 = fits.Column(name='double_col', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+        # Write to temp file\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+        # Reading the temp file to verify if 'D' is correctly replaced\n+        with open(self.temp('test_d_exponent.fits'), 'r') as f:\n+            content = f.read()\n+            assert '1.23456000000000000D+02' in content\n+            assert '7.89012000000000000D+02' in content\n+\n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n+            \n     def test_endianness(self):\n         x = np.ndarray((1,), dtype=object)\n         channelsIn = np.array([3], dtype='uint8')\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..a2ac35b 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,8 +1092,14 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n-\n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permission(self):\n+        \"\"\"\n+        By default, the FILE_UPLOAD_PERMISSIONS setting should be set to 0o644\n+        as the default value, and this should be reflected in the\n+        file_permissions_mode attribute of django.core.files.storage.default_storage.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..26e3c81 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -376,7 +376,57 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 2)\n \n-    def test_order_by_exists(self):\n+    def test_order_by_multiline_sql(self):\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN num_employees > 1000\n+                     THEN num_chairs\n+                     ELSE 0 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN num_chairs > 1\n+                     THEN 1\n+                     ELSE 0 END\n+            ''', []).asc()\n+        )\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [self.example_inc, self.gmbh, self.foobar_ltd],\n+                )\n+\n+    def test_order_by_with_similar_multiline_sql(self):\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN num_employees > 1000\n+                     THEN num_chairs\n+                     ELSE 0 END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN num_employees > 500\n+                     THEN num_chairs\n+                     ELSE 0 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN num_employees > 200\n+                     THEN num_chairs\n+                     ELSE 0 END\n+            ''', []).asc()\n+        )\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    sorted([self.example_inc, self.gmbh, self.foobar_ltd],\n+                           key=lambda x: (x.num_employees > 200, x.num_employees > 500, x.num_employees > 1000))\n+                )\n         mary = Employee.objects.create(firstname='Mary', lastname='Mustermann', salary=20)\n         mustermanns_by_seniority = Employee.objects.filter(lastname='Mustermann').order_by(\n             # Order by whether the employee is the CEO of a company\n",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..0ecd5fb 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -514,6 +514,41 @@ class MigrateTests(MigrationTestBase):\n             out.getvalue()\n         )\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_respects_ddl_transaction_support(self):\n+        \"\"\"\n+        sqlmigrate should only wrap its output in BEGIN/COMMIT\n+        if the database supports transactional DDL and\n+        migration is atomic.\n+        \"\"\"\n+        # Prepare the output collector\n+        out = io.StringIO()\n+        \n+        # Mock can_rollback_ddl to False - simulates no transactional DDL support\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+            output = out.getvalue().lower()\n+            queries = [q.strip() for q in output.splitlines()]\n+            start_transaction_sql = connection.ops.start_transaction_sql().lower()\n+            end_transaction_sql = connection.ops.end_transaction_sql().lower()\n+            if start_transaction_sql:\n+                self.assertNotIn(start_transaction_sql, queries)\n+            self.assertNotIn(end_transaction_sql, queries)\n+        \n+        # Clear the output for the next scenario\n+        out = io.StringIO()\n+        \n+        # Mock can_rollback_ddl to True - simulates transactional DDL support\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', True):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+            output = out.getvalue().lower()\n+            queries = [q.strip() for q in output.splitlines()]\n+            start_transaction_sql = connection.ops.start_transaction_sql().lower()\n+            end_transaction_sql = connection.ops.end_transaction_sql().lower()\n+            if start_transaction_sql:\n+                self.assertIn(start_transaction_sql, queries)\n+            self.assertIn(end_transaction_sql, queries)\n+\n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_plan_app_label_no_migrations(self):\n         out = io.StringIO()\n",
  "django__django-11049": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..67adafc 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',  # Username with a trailing newline\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..41ba6c8 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,20 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        # Test with explicit memoryview content\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+        \n+        # Test setting memoryview content via property\n+        r = HttpResponse()\n+        r.content = memoryview(b'content via property')\n+        self.assertEqual(r.content, b'content via property')\n+\n+        # Test with empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..b96f0ee 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -464,6 +466,32 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        \"\"\"Test that deleting an instance with no dependencies sets its PK to None.\"\"\"\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_with_dependency(self):\n+        \"\"\"Test that deleting an instance with a dependency retains its PK since it cannot be fast-deleted.\"\"\"\n+        a = Avatar.objects.create(desc='a')\n+        u = User.objects.create(avatar=a)\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(u))  # Ensure it cannot be fast-deleted\n+        u.delete()\n+        self.assertIsNotNone(u.pk)  # PK should not be None after delete\n+\n+    def test_delete_instance_set_pk_none_with_custom_model(self):\n+        \"\"\"Test that deleting a custom model instance with no dependencies sets its PK to None.\"\"\"\n+        instance = M.objects.create(name=\"Test Model\")\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(instance))\n+        instance.delete()\n+        self.assertIsNone(instance.pk)\n+\n     def test_fast_delete_qs(self):\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..356c035 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,8 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n+from django.db import IntegrityError\n+from django.test.utils import captured_stdout\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n@@ -140,7 +143,41 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Test case to verify handling of existing proxy model permissions.\n+        Validates that the migration logs a message when conflicting permissions exist.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxy information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_duplicate_permission_integration_error(self):\n+        \"\"\"\n+        Test case to simulate a scenario where duplicate permissions could be created.\n+        Validates that an IntegrityError is raised during migration.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(UserProxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_userproxy',\n+            name='Can add user proxy',\n+        )\n+\n+        # Attempting to apply the migration logic (which should try to add the same permission again)\n+        with self.assertRaises(IntegrityError):\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..2bfe4ef 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -11,6 +11,7 @@ import weakref\n import zipfile\n from importlib import import_module\n from pathlib import Path\n+import sys\n from unittest import mock, skip, skipIf\n \n from django.apps.registry import Apps\n@@ -22,7 +23,18 @@ from django.utils.autoreload import WatchmanUnavailable\n from .utils import on_macos_with_hfs\n \n \n-class TestIterModulesAndFiles(SimpleTestCase):\n+class TestManagePyReloader(SimpleTestCase):\n+    def test_manage_py_is_tracked(self):\n+        \"\"\"\n+        Test that changes to manage.py are tracked by the autoreloader.\n+        \"\"\"\n+        # Mocking the sys.modules to include a fake __main__ representing manage.py\n+        main_module = types.ModuleType('__main__')\n+        manage_py_path = Path('/path/to/manage.py')\n+        main_module.__file__ = str(manage_py_path)\n+        with mock.patch.dict(sys.modules, {'__main__': main_module}):\n+            # Ensure that autoreloader recognizes changes in manage.py\n+            self.assertFileFound(manage_py_path)\n     def import_and_cleanup(self, name):\n         import_module(name)\n         self.addCleanup(lambda: sys.path_importer_cache.clear())\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..6064207 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -18,6 +18,8 @@ from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n from django.utils.functional import SimpleLazyObject\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n",
  "django__django-11742": "",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..c42fda4 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -246,11 +246,35 @@ class WriterTests(SimpleTestCase):\n             [list, tuple, dict, set, frozenset],\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n-\n-    def test_serialize_lazy_objects(self):\n-        pattern = re.compile(r'^foo$')\n-        lazy_pattern = SimpleLazyObject(lambda: pattern)\n-        self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n+    def test_serialize_enum_translation(self):\n+        from django.utils.translation import activate, deactivate\n+        from django.utils.translation import gettext_lazy as _\n+        \n+        class StatusTranslatedEnum(enum.Enum):\n+            GOOD = _('Good')  # Translated value\n+            BAD = _('Bad')\n+\n+        # Serializing should use the name, not the translated value\n+        field = models.CharField(\n+            default=StatusTranslatedEnum.GOOD,\n+            choices=[(m.value, m) for m in StatusTranslatedEnum],\n+        )\n+\n+        # Activate a non-default language translation for testing, for example, French.\n+        activate('fr')\n+        \n+        try:\n+            serialized_field = MigrationWriter.serialize(field)[0]\n+            self.assertEqual(\n+                serialized_field,\n+                \"models.CharField(choices=[(\"\n+                \"'Good', migrations.test_writer.StatusTranslatedEnum['GOOD']), \"\n+                \"('Bad', migrations.test_writer.StatusTranslatedEnum['BAD'])], \"\n+                \"default=migrations.test_writer.StatusTranslatedEnum['GOOD'])\"\n+            )\n+        finally:\n+            # Make sure to deactivate translations after the test.\n+            deactivate()\n \n     def test_serialize_enums(self):\n         class TextEnum(enum.Enum):\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..73528f6 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -312,7 +313,25 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_year_threshold(self, mocked_datetime):\n+        # Set a base date for testing\n+        base_date = datetime(2023, 11, 6, 8, 49, 37)\n+        mocked_datetime.utcnow.return_value = base_date\n+\n+        # Test cases around the 50-year threshold\n+        tests = (\n+            ('Friday, 31-Dec-72 08:49:37 GMT', datetime(1972, 12, 31, 8, 49, 37)),\n+            ('Friday, 01-Jan-73 08:49:37 GMT', datetime(1973, 1, 1, 8, 49, 37)),\n+            ('Tuesday, 02-Jan-74 08:49:37 GMT', datetime(2074, 1, 2, 8, 49, 37)),  # Future year, should adjust\n+            ('Wednesday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+            ('Thursday, 01-Jan-00 08:49:37 GMT', datetime(2000, 1, 1, 8, 49, 37)), \n+        )\n+\n+        for rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..872c934 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -121,7 +121,17 @@ class ChoicesTests(SimpleTestCase):\n         self.assertIn('FR', YearInSchool)\n         self.assertNotIn('XX', YearInSchool)\n \n-    def test_textchoices_blank_value(self):\n+    def test_enum_str_behavior(self):\n+        class TestOptions(models.TextChoices):\n+            OPTION_A = 'A', _(\"Option A\")\n+            OPTION_B = 'B', _(\"Option B\")\n+\n+        class TestModel(models.Model):\n+            option = models.CharField(max_length=1, choices=TestOptions.choices)\n+\n+        test_instance = TestModel(option=TestOptions.OPTION_A)\n+        self.assertIsInstance(test_instance.option, str)\n+        self.assertEqual(test_instance.option, 'A')\n         class BlankStr(models.TextChoices):\n             EMPTY = '', '(Empty)'\n             ONE = 'ONE', 'One'\n@@ -130,6 +140,12 @@ class ChoicesTests(SimpleTestCase):\n         self.assertEqual(BlankStr.values, ['', 'ONE'])\n         self.assertEqual(BlankStr.names, ['EMPTY', 'ONE'])\n \n+    def test_str(self):\n+        for test in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in test:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(test[member.name]), str(member.value))\n+\n     def test_invalid_definition(self):\n         msg = \"'str' object cannot be interpreted as an integer\"\n         with self.assertRaisesMessage(TypeError, msg):\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..c6e998d 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -186,8 +186,20 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsNone(WhizIterEmpty(c=None).c)         # Blank value\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n+from django.test import TestCase\n+from django.db import models\n+\n+\n+class OverrideGetFieldDisplayTests(TestCase):\n+    def test_overriding_get_field_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(_(\"foo\"), choices=[(1, 'foo'), (2, 'bar')])\n+            \n+            def get_foo_bar_display(self):\n+                return \"something\"\n \n-class GetChoicesTests(SimpleTestCase):\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 7b8648d..57a7190 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -73,7 +73,20 @@ class SimplifiedURLTests(SimpleTestCase):\n         self.assertEqual(match.url_name, 'inner-extra')\n         self.assertEqual(match.route, 'included_urls/extra/<extra>/')\n \n-    def test_path_lookup_with_empty_string_inclusion(self):\n+    def test_module_view_with_optional_format_parameter(self):\n+        # Test cases where the format parameter is provided\n+        for format in ['html', 'json', 'xml']:\n+            url = f'/module/{format}/'\n+            with self.subTest(url=url):\n+                match = resolve(url)\n+                self.assertEqual(match.func, views.modules)\n+                self.assertEqual(match.kwargs['format'], format)\n+        \n+        # Test case where the format parameter is omitted\n+        url = '/module/'\n+        match = resolve(url)\n+        self.assertEqual(match.func, views.modules)\n+        self.assertNotIn('format', match.kwargs)\n         match = resolve('/more/99/')\n         self.assertEqual(match.url_name, 'inner-more')\n         self.assertEqual(match.route, r'^more/(?P<extra>\\w+)/$')\n",
  "django__django-12284": "",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..089d769 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,7 +76,26 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_sublanguage_with_base_language_available(self):\n+        \"\"\"Test that translation.E004 is not raised when a sublanguage has a base language available.\"\"\"\n+        valid_sublanguage_cases = [\n+            'de-at',  # Austrian German, with 'de' available\n+            'fr-CA',  # Canadian French, with 'fr' available\n+            'ca-ES-valencia',  # Valencian Catalan, with 'ca' available\n+            'es-419',  # Latin American Spanish, with 'es' available\n+        ]\n+        for tag in valid_sublanguage_cases:\n+            with self.subTest(tag=tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..017185d 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +6,8 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TransactionTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -18,7 +20,53 @@ def get_connection_copy():\n     return test_connection\n \n \n-class TestDbSignatureTests(SimpleTestCase):\n+class TestDeserializeDbFromString(TransactionTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref_id, obj_ref.id)\n+        self.assertEqual(obj_ref.obj_id, obj.id)\n+\n+    def test_foreign_key_constraint_handled(self):\n+        # Test deserialization with foreign key reference order.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": 2}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj_ref\": 2, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        # Should raise no errors even if order in data is unexpected.\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=2)\n+        obj_ref = ObjectReference.objects.get(pk=2)\n+        self.assertEqual(obj.obj_ref_id, obj_ref.id)\n+        self.assertEqual(obj_ref.obj_id, obj.id)\n     def test_default_name(self):\n         # A test db name isn't set.\n         prod_name = 'hodor'\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..e71bea7 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -128,6 +128,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_ambiguous_relationship_model_with_no_through_fields(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='AmbiguousThroughModel')\n+\n+        class AmbiguousThroughModel(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('members')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \",\n+                \"'invalid_models_tests.Group.members', but it has more than one \",\n+                \"foreign key from 'Group', which is ambiguous. You must \",\n+                \"specify which foreign key Django should use via the \",\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousThroughModel\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_ambiguous_relationship_model(self):\n \n         class Person(models.Model):\n@@ -159,6 +188,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_ambiguous_relationship_model_with_no_through_fields(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='AmbiguousThroughModel')\n+\n+        class AmbiguousThroughModel(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('members')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \",\n+                \"'invalid_models_tests.Group.members', but it has more than one \",\n+                \"foreign key from 'Group', which is ambiguous. You must \",\n+                \"specify which foreign key Django should use via the \",\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousThroughModel\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..0a0d0e0 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1751,6 +1751,34 @@ class OperationTests(OperationTestBase):\n         self.assertIndexNotExists(\"test_alinto_pony\", [\"pink\", \"weight\"])\n         # And deconstruction\n         definition = operation.deconstruct()\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_unique_together_conflict(self):\n+        app_label = 'test_index_unique_conflict'\n+        table_name = '%s_pony' % app_label\n+        # Set up the initial model state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together to the same fields\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Attempt to remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Ensure the unique constraint still exists and the index has been removed\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         self.assertEqual(definition[0], \"AlterIndexTogether\")\n         self.assertEqual(definition[1], [])\n         self.assertEqual(definition[2], {'name': \"Pony\", 'index_together': {(\"pink\", \"weight\")}})\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..6321318 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,26 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_zero_deletions_with_foreign_keys(self):\n+        \"\"\"\n+        Test that deleting objects with foreign keys returns a consistent \n+        result format when no objects are deleted.\n+        \"\"\"\n+        origin = Origin.objects.create()\n+        # No Referrer objects created, so none to delete\n+        deleted, deleted_objs = Referrer.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {})\n+\n+    def test_zero_deletions_without_foreign_keys(self):\n+        \"\"\"\n+        Test that deleting objects without foreign keys returns a consistent \n+        result format when no objects are deleted.\n+        \"\"\"\n+        # Assuming BlockLibrary is a simple model with no foreign keys\n+        deleted, deleted_objs = BlockLibrary.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.BlockLibrary': 0})\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..ff387dc 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,63 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+TEST_STATIC_ROOT = Path(__file__).parent / 'project' / 'static'\n+\n+@override_settings(\n+    STATIC_URL='/static/',\n+    STATIC_ROOT=TEST_STATIC_ROOT,\n+    STATICFILES_DIRS=[TEST_STATIC_ROOT],\n+    STATICFILES_FINDERS=[\n+        'django.contrib.staticfiles.finders.FileSystemFinder',\n+    ],\n+)\n+@modify_settings(INSTALLED_APPS={'append': 'django.contrib.staticfiles'})\n+class TestASGIStaticFilesHandler(SimpleTestCase):\n+    async_request_factory = AsyncRequestFactory()\n+\n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..6dd2202 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -198,7 +198,21 @@ class TestUtilsText(SimpleTestCase):\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n         )\n-        for value, output, is_unicode in items:\n+        \n+        # Tests related to the specific issue\n+        issue_related_items = (\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\t whitespace-in-value \\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore-in-value', False),\n+            ('__strip__underscore-value___', 'strip-underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+        )\n+        \n+        for value, output, is_unicode in issue_related_items:\n+            self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n         # interning the result may be useful, e.g. when fed to Path.\n         self.assertEqual(sys.intern(text.slugify('a')), 'a')\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..2292b73 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -46,6 +46,26 @@ class SiteEachContextTest(TestCase):\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n     def test_available_apps(self):\n+        self._test_app_list_contains_model_class()\n+\n+    def _test_app_list_contains_model_class(self):\n+        \"\"\"\n+        Test to ensure that the model class is included in the app_list context.\n+        \"\"\"\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n+\n+        # Ensure the Article model object is in the context\n+        admin_views = apps[0]\n+        article = admin_views['models'][0]\n+        self.assertEqual(article['object_name'], 'Article')\n+        self.assertEqual(article['model'], Article)\n+\n+        # Ensure the User model object is in the context\n+        auth = apps[1]\n+        user = auth['models'][0]\n+        self.assertEqual(user['object_name'], 'User')\n+        self.assertEqual(user['model'], User)\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..19e767f 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,28 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_email_change(self):\n+        \"\"\"Updating the user's email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                # Change email to invalidate the token\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                # Token should now be invalid\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..5b5ddfb 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..eef598f 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,22 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from unittest import mock\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from unittest import mock\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from unittest import mock\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n@@ -38,6 +42,29 @@ SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n class AdminScriptTestCase(SimpleTestCase):\n+    def test_program_name_with_custom_argv(self):\n+        \"\"\"\n+        When a custom argv is provided to execute_from_command_line,\n+        the prog_name should be derived from argv[0] and not sys.argv[0].\n+        \"\"\"\n+        custom_argv = ['custom-django-admin', 'runserver']\n+        expected_usage = 'usage: custom-django-admin runserver'\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['wrong-prog'] + custom_argv[1:]):\n+                execute_from_command_line(custom_argv)\n+        self.assertIn(expected_usage, out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_fallback_to_sys_argv(self):\n+        \"\"\"\n+        If no argv is provided, execute_from_command_line should fall back to sys.argv.\n+        \"\"\"\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['sys-django-admin', 'runserver']):\n+                execute_from_command_line()\n+        self.assertIn('usage: sys-django-admin runserver', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n     def setUp(self):\n         tmpdir = tempfile.TemporaryDirectory()\n         self.addCleanup(tmpdir.cleanup)\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..f90a02c 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -44,9 +45,49 @@ class ShellCommandTestCase(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, \"Couldn't import bpython interface.\"):\n             call_command('shell', interface='bpython')\n \n-    # [1] Patch select to prevent tests failing when when the test suite is run\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     # in parallel mode. The tests are run in a subprocess and the subprocess's\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..a9c85f8 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1071,9 +1071,25 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n         self.assertNotContains(response, 'Add another Model with both - name')\n \n+    def test_verbose_name_default_for_inline(self):\n+        class VerboseNameInlineOnly(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Inline Single Child'\n \n-@override_settings(ROOT_URLCONF='admin_inlines.urls')\n-class SeleniumTests(AdminSeleniumTestCase):\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            VerboseNameInlineOnly,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        \n+        # Model with only verbose name, expecting verbose_name to be used as verbose_name_plural.\n+        self.assertContains(response, '<h2>Inline Single Child</h2>')\n+        self.assertContains(response, 'Add another Inline Single Child')\n+        self.assertNotContains(response, '<h2>Verbose Name Profiles</h2>')\n \n     available_apps = ['admin_inlines'] + AdminSeleniumTestCase.available_apps\n \n",
  "django__django-13757": "",
  "django__django-13768": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex ad86558..3fd10fa 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -208,6 +208,8 @@ class Signal:\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n+                logger = logging.getLogger('django.dispatch')\n+                logger.exception('Error calling %s in Signal.send_robust()', receiver)\n                 responses.append((receiver, err))\n             else:\n                 responses.append((receiver, response))\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..d8bca42 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,8 +282,25 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n-class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n-    def test_modelchoicefield(self):\n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+\n+class ModelChoiceFieldErrorMessagesTestCase(TestCase):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Test case for invalid choice message with value placeholder\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        # This should assert that the invalid value \"invalid\" appears in the error message.\n+        self.assertFormErrors(\n+            [f'\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +324,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..5e88fc1 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -60,6 +60,14 @@ class Second(models.Model):\n # Protect against repetition of #1839, #2415 and #2536.\n class Third(models.Model):\n     name = models.CharField(max_length=20)\n+\n+\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n@@ -70,6 +78,14 @@ class Parent(models.Model):\n \n class Child(models.Model):\n     name = models.CharField(max_length=20)\n+\n+\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n     parent = models.ForeignKey(Parent, models.CASCADE)\n \n \n@@ -85,6 +101,14 @@ class ToFieldChild(models.Model):\n class Category(models.Model):\n     name = models.CharField(max_length=20)\n \n+\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n     def __str__(self):\n         return self.name\n \n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..c1b9780 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,9 +1,27 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n+from django.test import TestCase\n \n \n class QTests(SimpleTestCase):\n-    def test_combine_and_empty(self):\n+    def test_combine_dict_keys_and_empty(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+    def test_combine_dict_keys_or_empty(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+    def test_combine_dict_keys_self_or(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | q, q)\n+\n+    def test_combine_dict_keys_self_and(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & q, q)\n         q = Q(x=1)\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n",
  "django__django-14017": "",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..62c1ee0 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1146,9 +1146,33 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import resolve, path, reverse\n+from django.test import SimpleTestCase, override_settings\n+from django.http import HttpRequest\n+import urlpatterns_reverse.views as views\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n+    def test_partial_function_repr(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = functools.partial(views.empty_view, template_name=template_name)\n+                resolved = resolve(f'/{name}/')\n+                expected_repr = (\n+                    f\"ResolverMatch(func=functools.partial({views.empty_view!r}, \"\n+                    f\"template_name='{template_name}'), args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\"\n+                )\n+                self.assertEqual(repr(resolved), expected_repr)\n+\n     def test_noncallable_view(self):\n         # View is not a callable (explicit import; arbitrary Python object)\n         with self.assertRaisesMessage(TypeError, 'view must be a callable'):\n",
  "django__django-14238": "diff --git a/tests/model_fields/test_autofield.py b/tests/model_fields/test_autofield.py\nindex bfbf1e8..a00c239 100644\n--- a/tests/model_fields/test_autofield.py\n+++ b/tests/model_fields/test_autofield.py\n@@ -22,6 +22,21 @@ class SmallAutoFieldTests(SmallIntegerFieldTests):\n     rel_db_type_class = models.SmallIntegerField\n \n \n+class TestAutoFieldSubclassing(SimpleTestCase):\n+    \n+    def test_subclassing_bigautofield(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        self.assertTrue(issubclass(MyBigAutoField, models.AutoField))\n+    \n+    def test_subclassing_smallautofield(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        self.assertTrue(issubclass(MySmallAutoField, models.AutoField))\n+\n+\n class AutoFieldInheritanceTests(SimpleTestCase):\n \n     def test_isinstance_of_autofield(self):\n@@ -32,4 +47,4 @@ class AutoFieldInheritanceTests(SimpleTestCase):\n     def test_issubclass_of_autofield(self):\n         for field in (models.BigAutoField, models.SmallAutoField):\n             with self.subTest(field.__name__):\n-                self.assertTrue(issubclass(field, models.AutoField))\n+                self.assertTrue(issubclass(field, models.AutoField))\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..be2cf2d 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2168,16 +2168,23 @@ class StartApp(AdminScriptTestCase):\n                     \"sure the name is a valid identifier.\".format(bad_name)\n                 )\n                 self.assertFalse(os.path.exists(testproject_dir))\n-\n-    def test_importable_name(self):\n+    def test_trailing_slashes_in_app_directory_name(self):\n         \"\"\"\n-        startapp validates that app name doesn't clash with existing Python\n-        modules.\n+        Ensure django-admin startapp can handle directories with trailing slashes.\n         \"\"\"\n-        bad_name = 'os'\n-        args = ['startapp', bad_name]\n-        testproject_dir = os.path.join(self.test_dir, bad_name)\n-\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2')\n+        os.makedirs(app_dir, exist_ok=True)\n+        # Single trailing slash\n+        _, err_single = self.run_django_admin(['startapp', 'app', app_dir + '/'])\n+        self.assertNoOutput(err_single)\n+        self.assertTrue(os.path.exists(os.path.join(app_dir, 'apps.py')))\n+        \n+        # Double trailing slashes\n+        app_dir_double = os.path.join(self.test_dir, 'apps', 'app3')\n+        os.makedirs(app_dir_double, exist_ok=True)\n+        _, err_double = self.run_django_admin(['startapp', 'app', app_dir_double + '//'])\n+        self.assertNoOutput(err_double)\n+        self.assertTrue(os.path.exists(os.path.join(app_dir_double, 'apps.py')))\n         out, err = self.run_django_admin(args)\n         self.assertOutput(\n             err,\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..4f14013 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,33 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_read_only_password_hash_widget_no_for_attribute(self):\n+        \"\"\"Test that the label for ReadOnlyPasswordHashWidget does not have a 'for' attribute.\"\"\"\n+        class ReadOnlyForm(Form):\n+            password_hash = ReadOnlyPasswordHashField()\n+\n+        form = ReadOnlyForm()\n+        widget = form['password_hash'].field.widget\n+\n+        # Check that the widget's id_for_label is None (since it's not an input)\n+        self.assertIsNone(widget.id_for_label('id'))\n+\n+        # Check that the label_tag is properly formed without a 'for' attribute\n+        self.assertEqual(form['password_hash'].label_tag(), '<label>Password hash:</label>')\n+\n+    def test_read_only_password_hash_field_rendering(self):\n+        \"\"\"Test that the ReadOnlyPasswordHashField renders correctly.\"\"\"\n+        class ReadOnlyForm(Form):\n+            password_hash = ReadOnlyPasswordHashField()\n+\n+        form = ReadOnlyForm(initial={'password_hash': 'examplehash'})\n+\n+        # Render the form as HTML and check if it contains the expected display\n+        rendered = form.as_p()\n+        self.assertIn('examplehash', rendered)\n+        self.assertIn('<label>Password hash:</label>', rendered)\n+        self.assertNotIn('<input', rendered)  # Should not contain input elements\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..da2f9f5 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,31 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_missing_import_in_migration_issue(self):\n+        \"\"\"\n+        Test to ensure migrations include necessary imports for 'models'.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        app_label = 'app'\n+        model_name = 'MyModel'\n+        from django.db import migrations\n+        migration_writer = migrations.writer.MigrationWriter(migrations.Migration('0001_initial', app_label))\n+        \n+        serialized = migration_writer.serialize(MyModel)\n+        self.assertIn(\"'from django.db import models'\", serialized)\n+        self.assertIn(\"'app.models.MyField'\", serialized)\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..24dea73 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,7 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertEqual(str(formset.non_form_errors()), '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>')\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +358,7 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(str(formset.non_form_errors()), '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>')\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +982,7 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(str(formset.non_form_errors()), '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>')\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..cddb4cc 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -31,7 +31,15 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n-    def test_get_on_intermediate_model(self):\n+    def test_through_fields_hashable(self):\n+        # Get the reverse M2M field 'events_invited' on Person and PersonChild\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+\n+        # Verify that through_fields have been correctly set and are hashable\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n         queryset = Membership.objects.get(person=self.jane, group=self.rock)\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..589cb8b 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -293,6 +293,55 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+    def test_serialize_custom_extra_fields(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                # Override to include an extra field, such as 'notes'.\n+                return super().serialize_result(obj, to_field_name) | {'notes': getattr(obj, 'notes', '')}\n+\n+        # Create objects with and without the 'notes' attribute.\n+        Question.objects.create(question='Primary Question', notes='Important')\n+        Question.objects.create(question='Secondary Question')\n+\n+        request = self.factory.get(self.url, {'term': 'Question', **self.opts})\n+        request.user = self.superuser\n+        response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+\n+        # Validate output with custom notes field.\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'notes': getattr(q, 'notes', '')}\n+                for q in Question.objects.order_by('-question')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n+    def test_serialize_extra_field_posted_date(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {**super().serialize_result(obj, to_field_name), 'posted': str(getattr(obj, 'posted', ''))}\n+\n+        # Entries with posted dates\n+        Question.objects.create(question='First Question', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Second Question', posted=datetime.date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'Question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+\n+        # Verify custom serialize that includes posted date\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-14787": "",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..ad253db 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,16 +1,65 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n \n from .models import Article, Author, Book, Category, Writer\n \n+class CustomSelect(forms.Select):\n+    show_fields = {\n+        1: ['first_name', 'last_name'],\n+        2: ['email', 'phone_number'],\n+    }\n+    \n+    allowed_values = [1, 2]\n+\n+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+        context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+        if not value:\n+            return context\n+\n+        # Check if value is hashable; should not raise error after fix.\n+        try:\n+            is_in_show_fields = value in self.show_fields\n+            hashable = True\n+        except TypeError:\n+            hashable = False\n+\n+        if hashable and is_in_show_fields:\n+            context['attrs']['data-fields'] = json.dumps(self.show_fields[value])\n+        return context\n+\n \n class ModelChoiceFieldTests(TestCase):\n+    def test_model_choice_iterator_value_hashable_in_dict(self):\n+        # Assign some test categories\n+        category1 = Category(name='Category 1')\n+        category2 = Category(name='Category 2')\n+\n+        value1 = ModelChoiceIteratorValue(category1.pk, category1)\n+        value2 = ModelChoiceIteratorValue(category2.pk, category2)\n+\n+        # Wrap in a dict to test hashability\n+        show_fields = {\n+            value1: ['first_name', 'last_name'],\n+            value2: ['email', 'phone_number'],\n+        }\n+\n+        self.assertIn(value1, show_fields)\n+        self.assertIn(value2, show_fields)\n+\n+    def test_create_option_custom_select(self):\n+        widget = CustomSelect()\n+        option = widget.create_option('name', ModelChoiceIteratorValue(1, None), 'Label', False, 0)\n+        self.assertIn('data-fields', option['attrs'])\n+        json_data = json.loads(option['attrs']['data-fields'])\n+        self.assertEqual(json_data, ['first_name', 'last_name'])\n     @classmethod\n     def setUpTestData(cls):\n         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n",
  "django__django-14999": "",
  "django__django-15061": "",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..1fcbce5 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -90,6 +90,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://inv-.alid-.com',\n             'http://inv-.-alid.com',\n             '[a',\n+            # Test for ValueError related issue - should raise ValidationError now\n+            '////]@N.AN',\n+            '#@A.bO',\n             'http://[a',\n             # Non-string.\n             23,\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..6fca985 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -11,7 +11,7 @@ from django.db.models.expressions import RawSQL\n from django.db.models.functions import (\n     Coalesce, ExtractYear, Floor, Length, Lower, Trim,\n )\n-from django.test import TestCase, skipUnlessDBFeature\n+from django.test import TestCase, skipUnlessDBFeature, skipIfDBFeature\n from django.test.utils import register_lookup\n \n from .models import (\n@@ -442,7 +442,20 @@ class NonAggregateAnnotationTestCase(TestCase):\n         with self.assertRaisesMessage(FieldDoesNotExist, \"Book has no field named 'other_rating'\"):\n             book = qs.defer('other_rating').get(other_rating=4)\n \n-    def test_mti_annotations(self):\n+    @skipIfDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_expressionwrapper_negated_empty_in(self):\n+        \"\"\"\n+        Test ExpressionWrapper with negated Q object containing an empty __in lookup.\n+        \"\"\"\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        # Ensure the queryset length matches the total book count\n+        self.assertEqual(len(books), Book.objects.count())\n+        # Since all IDs are not in an empty list, expect all to be True\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_full_expression_annotation(self):\n         \"\"\"\n         Fields on an inherited model can be referenced by an\n         annotated field.\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..f9d90fd 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,7 +1,9 @@\n+\n import json\n import random\n \n from django.conf import settings\n+from django.utils.safestring import SafeData, mark_safe\n from django.contrib.messages import constants\n from django.contrib.messages.storage.base import Message\n from django.contrib.messages.storage.cookie import (\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..db2aff3 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -5,6 +5,8 @@ from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n \n+from pathlib import Path\n+\n ROOT = Path(__file__).parent.absolute()\n EXTRA_TEMPLATES_DIR = ROOT / \"templates_extra\"\n \n@@ -39,7 +41,29 @@ class TemplateReloadTests(SimpleTestCase):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n         mock_reset.assert_not_called()\n \n-    def test_watch_for_template_changes(self):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_template_dirs_with_base_dir(self, mock_reset):\n+        base_dir_in_templates = {\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            'DIRS': [ROOT],  # Simulate adding BASE_DIR to TEMPLATES DIRS\n+        }\n+        \n+        with override_settings(TEMPLATES=[base_dir_in_templates]):\n+            reset_result = autoreload.template_changed(None, Path(__file__))\n+            self.assertTrue(reset_result)\n+            mock_reset.assert_called_once()\n+\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_template_dirs_without_base_dir(self, mock_reset):\n+        no_base_dir = {\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            'DIRS': [],  # Remove BASE_DIR from TEMPLATES DIRS\n+        }\n+        \n+        with override_settings(TEMPLATES=[no_base_dir]):\n+            reset_result = autoreload.template_changed(None, Path(__file__))\n+            self.assertIsNone(reset_result)\n+            mock_reset.assert_not_called()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n@@ -88,7 +112,29 @@ class TemplateReloadTests(SimpleTestCase):\n @require_jinja2\n @override_settings(INSTALLED_APPS=['template_tests'])\n class Jinja2TemplateReloadTests(SimpleTestCase):\n-    def test_watch_for_template_changes(self):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_template_dirs_with_base_dir(self, mock_reset):\n+        base_dir_in_templates = {\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            'DIRS': [ROOT],  # Simulate adding BASE_DIR to TEMPLATES DIRS\n+        }\n+        \n+        with override_settings(TEMPLATES=[base_dir_in_templates]):\n+            reset_result = autoreload.template_changed(None, Path(__file__))\n+            self.assertTrue(reset_result)\n+            mock_reset.assert_called_once()\n+\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_template_dirs_without_base_dir(self, mock_reset):\n+        no_base_dir = {\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            'DIRS': [],  # Remove BASE_DIR from TEMPLATES DIRS\n+        }\n+        \n+        with override_settings(TEMPLATES=[no_base_dir]):\n+            reset_result = autoreload.template_changed(None, Path(__file__))\n+            self.assertIsNone(reset_result)\n+            mock_reset.assert_not_called()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n",
  "django__django-15400": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\nindex f0097c4..3e65768 100644\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -304,8 +304,27 @@ class SimpleLazyObjectTestCase(LazyObjectTestCase):\n     # tested in the parent testcase also apply to SimpleLazyObject.\n     def lazy_wrap(self, wrapped_object):\n         return SimpleLazyObject(lambda: wrapped_object)\n-\n-    def test_repr(self):\n+    \n+    def test_radd_unevaluated(self):\n+        # Test __radd__ behavior when SimpleLazyObject is unevaluated\n+        obj = self.lazy_wrap(5)\n+        self.assertEqual(10 + obj, 15)\n+\n+    def test_radd_with_string(self):\n+        # Test __radd__ behavior when involved in string addition\n+        obj = self.lazy_wrap(\"world\")\n+        self.assertEqual(\"hello \" + obj, \"hello world\")\n+    \n+    def test_radd_with_list(self):\n+        # Test __radd__ behavior when involved in list addition\n+        obj = self.lazy_wrap([3, 4, 5])\n+        self.assertEqual([1, 2] + obj, [1, 2, 3, 4, 5])\n+\n+    def test_radd_evaluated(self):\n+        # Ensure SimpleLazyObject is evaluated and __radd__ works\n+        obj = self.lazy_wrap(2)\n+        _ = obj + 0  # trigger evaluation\n+        self.assertEqual(3 + obj, 5)\n         # First, for an unevaluated SimpleLazyObject\n         obj = self.lazy_wrap(42)\n         # __repr__ contains __repr__ of setup function and does not evaluate\n",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..b486ca8 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,24 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"Test that an empty string for 'If-Modified-Since' header is handled correctly.\"\"\"\n+        # Expecting False since the empty string should mean no modification date given\n+        self.assertFalse(was_modified_since(\"\", 1))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"Test invalid date string should not raise an exception.\"\"\"\n+        # Use a completely invalid date string\n+        self.assertTrue(was_modified_since(\"Invalid-Date\", 1))\n+\n+    def test_was_modified_since_valid_and_empty_string(self):\n+        \"\"\"Test a valid date string and an empty string.\"\"\"\n+        valid_header = http_date(1343416141)\n+        # Use valid header to check false when the timestamps match\n+        self.assertFalse(was_modified_since(valid_header, 1343416141))\n+        # Ensure empty string still returns False\n+        self.assertFalse(was_modified_since(\"\", 1343416141))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..38fd40e 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,6 +1,10 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n+from django.core.management.base import BaseCommand\n+from argparse import ArgumentDefaultsHelpFormatter\n+from django.core.management import CommandParser\n \n from admin_scripts.tests import AdminScriptTestCase\n \n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..cb48b96 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -217,7 +220,33 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"encoder\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"encoder\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        # Test using the default DjangoJSONEncoder\n+        result = json_script({\"key\": \"value\"})\n+        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(result, expected)\n+\n+    def test_json_script_with_id_and_custom_encoder(self):\n+        class SimpleEncoder(json.JSONEncoder):\n+            def encode(self, o):\n+                if isinstance(o, dict):\n+                    return json.JSONEncoder.encode(self, o)\n+                return super().encode(o)\n+\n+        self.assertHTMLEqual(\n+            json_script({}, element_id=\"my_id\", encoder=SimpleEncoder),\n+            '<script id=\"my_id\" type=\"application/json\">{}</script>'.format(json.dumps({}, indent=None)),\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..ed6b798 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -205,5 +205,27 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             \"check_framework.template_test_apps.different_tags_app\",\n         ]\n     )\n-    def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\"\n+        ]\n+    )\n+    def test_same_library_in_templates_options(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\"my_tags\", \"someapp.templatetags.my_tags\"),\n+                self.get_settings(\"my_tags\", \"someapp.templatetags.my_tags\"),\n+            ]\n+        ):\n+            error_message = Error(\n+                E003.msg.format(\n+                    \"'my_tags'\",\n+                    \"'someapp.templatetags.my_tags', 'someapp.templatetags.my_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [error_message],\n+            )\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..66cbeee 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -156,7 +156,20 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n+    \n+    def test_parameters_order_before_dbname(self):\n+        # Verify that additional parameters are passed before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM some_table;\"]),\n+            ([\"psql\", \"-c\", \"SELECT * FROM some_table;\", \"dbname\"], None),\n+        )\n \n+    def test_parameters_order_with_no_dbname(self):\n+        # Test command where dbname is not specified and additional parameters should still work.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"postgres\"], None),  # default dbname 'postgres' is used.\n+        )\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n@@ -183,4 +196,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..8c6d005 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1904,9 +1904,16 @@ class DeprecationTests(SimpleTestCase):\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n-        ), self.assertRaisesMessage(\n+        ):\n+            # Ensure no deprecation warning when rendering a management form.\n+            ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+            formset = ChoiceFormSet()\n+            with self.assertLogs('django', level='WARNING') as cm:\n+                str(formset.management_form)\n+            self.assertFalse(any('RemovedInDjango50Warning' in message for message in cm.output))\n+        with self.assertRaisesMessage(\n             RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..f02e129 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -178,8 +178,17 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n+    def test_empty_permitted_ignored_empty_form_explicit_true(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        # empty_form should not consider empty_permitted\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n \n-    def test_formset_validation(self):\n+    def test_empty_permitted_ignored_empty_form_explicit_false(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        # empty_form should not consider empty_permitted\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n         formset = self.make_choiceformset([(\"Calexico\", \"\")])\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..2c3456f 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,6 +161,15 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n+    def test_empty(self):\n+        # Test for empty string input\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        \n+        # Test for None input\n+        # Assuming the desired behavior is to return \"None\" as a string,\n+        # although this could vary based on implementation needs\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n     def test_decimal_subclass(self):\n         class EuroDecimal(Decimal):\n             \"\"\"\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..fe35069 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,8 @@\n+\n import datetime\n import re\n-from unittest import mock\n+import urllib.parse\n+from django.urls import reverse\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm,\n",
  "django__django-16255": "",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..3e14220 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -6,6 +7,8 @@ from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n@@ -33,7 +36,37 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..5bc3f8c 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,6 +1,8 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n+from django.template.defaultfilters import escape\n \n from ..utils import setup\n \n@@ -26,7 +28,14 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ a|join:b }}{% endautoescape %}'})\n+    def test_join_autoescape_off_behavior(self):\n+        output = self.engine.render_to_string(\n+            \"join_autoescape_off\",\n+            {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"b\": \"<br/>\"}\n+        )\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +87,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..131ee76 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -728,7 +728,47 @@ class BulkCreateTests(TestCase):\n     def test_update_conflicts_unique_two_fields_unique_no_unique_fields(self):\n         self._test_update_conflicts_unique_two_fields([])\n \n-    def _test_update_conflicts(self, unique_fields):\n+    def _test_update_conflicts_returning_ids(self):\n+        UpsertConflict.objects.bulk_create(\n+            [\n+                UpsertConflict(number=1, rank=1, name=\"John\"),\n+                UpsertConflict(number=2, rank=2, name=\"Mary\"),\n+                UpsertConflict(number=3, rank=3, name=\"Hannah\"),\n+            ]\n+        )\n+        self.assertEqual(UpsertConflict.objects.count(), 3)\n+\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=4, name=\"Steve\"),\n+            UpsertConflict(number=2, rank=2, name=\"Olivia\"),\n+            UpsertConflict(number=3, rank=1, name=\"Hannah\"),\n+        ]\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=[\"number\"],\n+        )\n+        self.assertEqual(len(results), 3)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+\n+        self.assertEqual(UpsertConflict.objects.count(), 3)\n+\n+        UpsertConflict.objects.bulk_create(\n+            conflicting_objects + [UpsertConflict(number=4, rank=4, name=\"Mark\")],\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=[\"number\"],\n+        )\n+        self.assertEqual(UpsertConflict.objects.count(), 4)\n+\n+    @skipUnlessDBFeature(\n+        \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n+    )\n+    def test_update_conflicts_returning_ids(self):\n+        self._test_update_conflicts_returning_ids()\n         UpsertConflict.objects.bulk_create(\n             [\n                 UpsertConflict(number=1, rank=1, name=\"John\"),\n@@ -816,4 +856,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..d3f58d2 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1120,6 +1120,19 @@ def test_range_slider(orientation):\n     assert_allclose(slider.val, [0.1, 0.34])\n \n \n+def test_range_slider_initialization():\n+    fig, ax = plt.subplots()\n+    slider = widgets.RangeSlider(ax=ax, label='', valmin=0.0, valmax=1.0, valinit=[0.0, 0.0])\n+    \n+    # Check if the initialized values are as expected\n+    assert_allclose(slider.val, (0.0, 0.0))\n+\n+    slider.set_val((0.1, 0.9))\n+    assert_allclose(slider.val, (0.1, 0.9))\n+    \n+    slider.set_val((0.0, 1.0))\n+    assert_allclose(slider.val, (0.0, 1.0))\n+    \n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n     \"\"\"\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..4210498 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -489,8 +489,29 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n     else:\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+import pytest\n \n-def test_keymaps():\n+# Original Test Patch\n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+# New Test to cover the issue\n+def test_get_backend_does_not_clear_figs_created_with_rc_context():\n+    # Create a figure inside rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+        \n+    # Call get_backend and check if the figure still exists\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    assert before == after, f'Figures were cleared:\\nBefore: {before}\\nAfter: {after}'\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..09e4339 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,6 +21,16 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_3d_axes(fig_test, fig_ref):\n+    # Create a 3D subplot and make it invisible\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter([1], [1], [1])\n+    ax_test.set_visible(False)\n+    \n+    # Create a reference subplot with no content\n+    fig_ref.add_subplot(projection='3d')\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..2840d55 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -783,7 +783,15 @@ def test_get_set_draggable():\n     assert not legend.get_draggable()\n \n \n-def test_alpha_handles():\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='Test Line')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n     x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n     legend = plt.legend()\n     for lh in legend.legendHandles:\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..ed9946b 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -246,7 +246,60 @@ def test_fonttype(fonttype):\n \n def test_linedash():\n     \"\"\"Test that dashed lines do not break PS output\"\"\"\n+    import io\n+    import matplotlib.pyplot as plt\n+    from matplotlib.figure import Figure\n+\n+    fig, ax = plt.subplots()\n+\n+    ax.plot([0, 1], linestyle=\"--\")\n+\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format=\"ps\")\n+\n+    assert buf.tell() > 0\n+\n+\n+def test_empty_line():\n+    # Smoke-test for issue with multiline text containing empty lines\n+\n+    # Create a figure with Figure class as in the issue description\n+    figure = Figure()\n+    # Test with multiline text with empty line\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\")\n+    \n+    buf = io.BytesIO()\n+    # Test EPS and PS formats to ensure no errors\n+    figure.savefig(buf, format='eps')\n+    buf.seek(0)\n+    figure.savefig(buf, format='ps')\n+    buf.seek(0)\n+    \n+    assert buf.tell() > 0  # Ensure something is written to buffer\n+\n+def test_no_text_issue_with_various_backends():\n+    # Verify the issue does not affect other backends\n+    backends = ['svg', 'pdf', 'png']\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\")\n+\n+    for backend in backends:\n+        buf = io.BytesIO()\n+        figure.savefig(buf, format=backend)\n+        buf.seek(0)\n+        assert buf.tell() > 0  # Ensure something is written to buffer\n+\n+def test_annotate_with_empty_line():\n+    # Test annotation with empty lines in text\n     fig, ax = plt.subplots()\n+    ax.annotate(text='\\nLower label\\n', xy=(0.5, 0.5))\n+\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    buf.seek(0)\n+    fig.savefig(buf, format='ps')\n+    buf.seek(0)\n+    assert buf.tell() > 0  # Ensure something is written to buffer\n \n     ax.plot([0, 1], linestyle=\"--\")\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..4cc27f7 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -647,7 +647,23 @@ def test_compressed1():\n     for ax in axs.flat:\n         pc = ax.imshow(np.random.randn(20, 20))\n \n-    fig.colorbar(pc, ax=axs)\n+import pytest\n+import warnings\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@pytest.mark.parametrize('constrained_layout, warning_expected', [\n+    (True, True),\n+    (False, False),\n+    ({}, True),\n+    ({'rect': None}, True)\n+])\n+def test_set_constrained_layout_with_warning(constrained_layout, warning_expected):\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained_layout)\n+    with warnings.catch_warnings(record=True) as w:\n+        plt.subplots_adjust(wspace=0)\n+    warning_issued = any(issubclass(warning.category, UserWarning) for warning in w)\n+    assert warning_issued == warning_expected\n     fig.draw_without_rendering()\n \n     pos = axs[0, 0].get_position()\n@@ -655,4 +671,4 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..ca5873c 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,4 +1,6 @@\n+\n from io import BytesIO\n+import pickletools\n import ast\n import pickle\n \n@@ -106,7 +108,25 @@ def test_complete(fig_test, fig_ref):\n     plt.close(loaded)\n \n \n-def _pickle_load_subprocess():\n+def test_figure_with_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Check if we can pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure \"FigureCanvasAgg\" is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    loaded = pickle.loads(pkl)\n+    assert loaded is not None  # Ensure the figure is loaded properly\n     import os\n     import pickle\n \n",
  "matplotlib__matplotlib-25332": "",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..97be746 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,53 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+def test_issue_mplcursor_matplotlib_compatibility():\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+    import numpy as np\n+\n+    # Create a simple scatter plot\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    scatter = ax.scatter(x, y1)\n+\n+    # Activate mplcursors\n+    cursor = mplcursors.cursor(scatter)\n+\n+    # Simulate clicking on a few data points\n+    for i in range(5):  # Click on 5 data points\n+        cursor.event(MouseEvent('button_press_event', fig.canvas, x[i], y1[i]))\n+        cursor.event(MouseEvent('button_release_event', fig.canvas, x[i], y1[i]))\n+\n+    # If the test passes, no exception should occur, especially no NoneType errors\n+    plt.close(fig)\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_issue_mplcursor_matplotlib_compatibility():\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+    import numpy as np\n+\n+    # Create a simple scatter plot\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    scatter = ax.scatter(x, y1)\n+\n+    # Activate mplcursors\n+    cursor = mplcursors.cursor(scatter)\n+\n+    # Simulate clicking on a few data points\n+    for i in range(5):  # Click on 5 data points\n+        cursor.event(MouseEvent('button_press_event', fig.canvas, x[i], y1[i]))\n+        cursor.event(MouseEvent('button_release_event', fig.canvas, x[i], y1[i]))\n+\n+    # If the test passes, no exception should occur, especially no NoneType errors\n+    plt.close(fig)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..ce2af0f 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,17 +1,32 @@\n \n+\n import numpy as np\n import pandas as pd\n \n import pytest\n from numpy.testing import assert_array_equal, assert_array_almost_equal\n \n+from pandas.testing import assert_frame_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n \n class TestPolyFit:\n \n-    @pytest.fixture\n+    def test_missing_data(self, df):\n+\n+        # Prepare dataframe with missing data\n+        groupby = GroupBy([\"group\"])\n+        df_with_nan = df.copy()\n+        df_with_nan.iloc[5:10, df_with_nan.columns.get_loc(\"x\")] = np.nan  # Introduce NaN in 'x'\n+        df_with_nan.iloc[5:10, df_with_nan.columns.get_loc(\"y\")] = np.nan  # Introduce NaN in 'y'\n+\n+        # Test PolyFit with missing data\n+        res_with_nan = PolyFit()(df_with_nan[[\"x\", \"y\"]], groupby, \"x\", {})\n+        res_without_nan = PolyFit()(df_with_nan[[\"x\", \"y\"]].dropna(), groupby, \"x\", {})\n+\n+        # Verify that results are consistent whether NaN are present or not\n+        assert_frame_equal(res_with_nan, res_without_nan)\n     def df(self, rng):\n \n         n = 100\n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..9268148 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -96,12 +96,44 @@ class TestContinuous:\n         s = Continuous()._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_color_with_boolean(self):\n+        # Ensures color mapping works with boolean values\n+        x = pd.Series([True, False, True])\n+        cmap = color_palette(\"coolwarm\", as_cmap=True)\n+        s = Continuous(\"coolwarm\")._setup(x, Color())\n+        expected_colors = cmap([1, 0, 1])[:, :3]  # True maps to 1, False maps to 0\n+        assert_array_equal(s(x), expected_colors)\n+\n+    def test_color_with_mixed_boolean_integers(self):\n+        # Checks color mapping with mixed boolean and integer values\n+        x = pd.Series([True, 1, False, 0])\n+        cmap = color_palette(\"coolwarm\", as_cmap=True)\n+        s = Continuous(\"coolwarm\")._setup(x, Color())\n+        expected_colors = cmap([1, 1, 0, 0])[:, :3]  # Map True/1 to 1 and False/0 to 0\n+        assert_array_equal(s(x), expected_colors)\n+\n     def test_color_named_values(self, x):\n \n         cmap = color_palette(\"viridis\", as_cmap=True)\n         s = Continuous(\"viridis\")._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_color_with_boolean(self):\n+        # Ensures color mapping works with boolean values\n+        x = pd.Series([True, False, True])\n+        cmap = color_palette(\"coolwarm\", as_cmap=True)\n+        s = Continuous(\"coolwarm\")._setup(x, Color())\n+        expected_colors = cmap([1, 0, 1])[:, :3]  # True maps to 1, False maps to 0\n+        assert_array_equal(s(x), expected_colors)\n+\n+    def test_color_with_mixed_boolean_integers(self):\n+        # Checks color mapping with mixed boolean and integer values\n+        x = pd.Series([True, 1, False, 0])\n+        cmap = color_palette(\"coolwarm\", as_cmap=True)\n+        s = Continuous(\"coolwarm\")._setup(x, Color())\n+        expected_colors = cmap([1, 1, 0, 0])[:, :3]  # Map True/1 to 1 and False/0 to 0\n+        assert_array_equal(s(x), expected_colors)\n+\n     def test_color_tuple_values(self, x):\n \n         cmap = color_palette(\"blend:b,g\", as_cmap=True)\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..751ac56 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,16 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import RequestException, DecodeError as RequestsDecodeError, Timeout as RequestsTimeout\n+from requests.packages.urllib3.exceptions import DecodeError, TimeoutError\n+import pytest\n+\n+def httpbin(path):\n+    \"\"\"Helper function to create httpbin URLs\"\"\"\n+    return f'http://httpbin.org/{path}'\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1655,7 +1665,29 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n-def test_vendor_aliases():\n+def test_decode_error_wrapping():\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def send(self, *args, **kwargs):\n+            raise DecodeError(\"Mocked DecodeError\")\n+\n+    s = requests.Session()\n+    s.mount(\"http://\", MockHTTPAdapter())\n+\n+    with pytest.raises(RequestsDecodeError) as excinfo:\n+        s.get(httpbin(\"get\"))\n+    assert \"Mocked DecodeError\" in str(excinfo.value)\n+\n+def test_timeout_error_wrapping():\n+    class MockTimeoutAdapter(HTTPAdapter):\n+        def send(self, *args, **kwargs):\n+            raise TimeoutError(\"Mocked TimeoutError\")\n+\n+    s = requests.Session()\n+    s.mount(\"http://\", MockTimeoutAdapter())\n+\n+    with pytest.raises(RequestsTimeout) as excinfo:\n+        s.get(httpbin(\"get\"), timeout=1)\n+    assert \"Mocked TimeoutError\" in str(excinfo.value)\n     from requests.packages import urllib3\n     from requests.packages import chardet\n \n@@ -1663,4 +1695,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..c2adf0c 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,8 +743,40 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    def test_multiple_hooks_via_init(self):\n+        \"\"\"Test registering multiple hooks using a list in the hooks argument of Request.\"\"\"\n \n-    def test_session_persistent_cookies(self):\n+        def add_foo_header(request):\n+            if not request.get('headers'):\n+                request['headers'] = {}\n+            request['headers'].update({'X-Foo': 'foo'})\n+            return request\n+\n+        def add_bar_header(request):\n+            if not request.get('headers'):\n+                request['headers'] = {}\n+            request['headers'].update({'X-Bar': 'bar'})\n+            return request\n+\n+        def assert_headers_contain(headers, name, value):\n+            assert headers.get(name) == value\n+\n+        hooks = {'args': [add_foo_header, add_bar_header]}\n+\n+        # Create a request with multiple hooks\n+        r = requests.models.Request(hooks=hooks)\n+\n+        assert isinstance(r.hooks['args'], list)  # Ensure hooks are registered as a list\n+        for hook in r.hooks['args']:\n+            assert callable(hook)  # Ensure all hooks are callable\n+\n+        # Simulate passing a request through hooks\n+        request_args = {}\n+        for hook in r.hooks['args']:\n+            request_args = hook(request_args)\n+\n+        assert_headers_contain(request_args['headers'], 'X-Foo', 'foo')\n+        assert_headers_contain(request_args['headers'], 'X-Bar', 'bar')\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..4d6906a 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -93,6 +93,16 @@ class TestFixme(CheckerTestCase):\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n+    \n+    @set_config(notes=[\"???\"])\n+    def test_punctuation_only_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n \n     def test_issue_2321_should_trigger(self) -> None:\n         code = \"# TODO this should not trigger a fixme\"\n@@ -119,4 +129,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..65f1288 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -69,6 +69,7 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n         Run([str(EMPTY_MODULE), \"--unknown-option=yes\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: unknown-option=yes\" in output.out\n+    assert \"Traceback\" not in output.out     # Ensure no traceback is printed\n \n \n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n@@ -77,6 +78,7 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.out     # Ensure no traceback is printed\n \n \n def test_unknown_confidence(capsys: CaptureFixture) -> None:\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..d53d5ed 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,25 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_path_with_recursive(self):\n+        \"\"\"Tests that ignore-paths works correctly with recursive option. GitHub issue #6964\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..be16048 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,58 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_module_with_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for issue where linting fails if a module contains a sub-module with the same name.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the directory structure.\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Run pylint and ensure it does not fail with parse-error.\n+        linter.check([\"a\"])\n+        assert not linter.stats.by_msg.get(\"parse-error\", 0)\n+\n+def test_no_name_in_module_error(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for issue where linting fails on 'No name in module' related to sub-modules.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the directory structure.\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        # Run pylint on both the module and the file that imports from it\n+        linter.check([\"r\", \"a\"])\n+        # Ensure that no errors related to module 'a' missing 'b' occur.\n+        assert not linter.stats.by_msg.get(\"no-name-in-module\", 0)\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_module_with_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for issue where linting fails if a module contains a sub-module with the same name.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the directory structure.\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Run pylint and ensure it does not fail with parse-error.\n+        linter.check([\"a\"])\n+        assert not linter.stats.by_msg.get(\"parse-error\", 0)\n+\n+def test_no_name_in_module_error(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for issue where linting fails on 'No name in module' related to sub-modules.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the directory structure.\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        # Run pylint on both the module and the file that imports from it\n+        linter.check([\"r\", \"a\"])\n+        # Ensure that no errors related to module 'a' missing 'b' occur.\n+        assert not linter.stats.by_msg.get(\"no-name-in-module\", 0)\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..52bcc25 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -9,6 +10,7 @@ from __future__ import annotations\n import sys\n import warnings\n from contextlib import redirect_stdout\n+from _pytest.recwarn import WarningsRecorder\n from io import StringIO\n from json import dumps\n from typing import TYPE_CHECKING\n@@ -113,6 +115,24 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    \"\"\"Test handling of custom braces in message templates.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    # Setting a template using custom braces\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    \n+    linter.open()\n+    linter.set_current_module(\"module_with_custom_template\")\n+\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E1101\", line=2, args=(3, 4))\n+    \n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n+\n+\n def test_deprecation_set_output(recwarn):\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..5dc38cb 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -277,9 +277,68 @@ class TestImportPath:\n         assert str(root1) == sys.path[-1]\n         assert str(root1) not in sys.path[:-1]\n \n-    def test_invalid_path(self, tmp_path: Path) -> None:\n-        with pytest.raises(ImportError):\n-            import_path(tmp_path / \"invalid.py\", root=tmp_path)\n+import sys\n+import pytest\n+import importlib\n+from pytest import Pytester\n+\n+def test_doctest_and_normal_imports_with_importlib(pytester: Pytester) -> None:\n+    \"\"\"Regression test for importlib import-mode to ensure modules are not\n+    imported multiple times.\"\"\"\n+    pytester.makepyfile(\n+        **{\n+            \"pmxbot/commands.py\": \"from . import logging\",\n+            \"pmxbot/logging.py\": \"\",\n+            \"tests/__init__.py\": \"\",\n+            \"tests/test_commands.py\": \"\"\"\n+                import importlib\n+                from pmxbot import logging\n+\n+                class TestCommands:\n+                    def test_boo(self):\n+                        assert importlib.import_module('pmxbot.logging') is logging\n+                \"\"\",\n+        }\n+    )\n+    pytester.makeini(\n+        \"\"\"\n+        [pytest]\n+        addopts =\n+            --doctest-modules\n+            --import-mode importlib\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_subprocess()\n+    result.stdout.fnmatch_lines(\"*1 passed*\")\n+\n+\n+def test_module_import_once(pytester: Pytester) -> None:\n+    \"\"\"Ensure the module is not imported more than once and references in sys.modules are consistent.\"\"\"\n+    pytester.makepyfile(\n+        **{\n+            \"example_pkg/module_a.py\": \"var = 'original'\",\n+            \"tests/__init__.py\": \"\",\n+            \"tests/test_imports.py\": \"\"\"\n+                import importlib\n+                from example_pkg import module_a\n+\n+                def test_single_import():\n+                    module = importlib.import_module('example_pkg.module_a')\n+                    assert module is module_a\n+                    assert sys.modules['example_pkg.module_a'] is module\n+                    assert sys.modules['example_pkg.module_a'].var == 'original'\n+                \"\"\",\n+        }\n+    )\n+    pytester.makeini(\n+        \"\"\"\n+        [pytest]\n+        addopts =\n+            --import-mode importlib\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_subprocess()\n+    result.stdout.fnmatch_lines(\"*1 passed*\")\n \n     @pytest.fixture\n     def simple_module(self, tmp_path: Path) -> Path:\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\nindex 82f0458..453e65b 100644\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -289,8 +289,29 @@ def test_log_cli_default_level(testdir):\n     # make sure that that we get a '0' exit code for the testsuite\n     assert result.ret == 0\n \n+def test_log_format_includes_module_name(testdir):\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n \n-def test_log_cli_default_level_multiple_tests(testdir, request):\n+        def test_logging():\n+            logger = logging.getLogger(\"test_module\")\n+            logger.setLevel(logging.DEBUG)\n+            stream = logging.StreamHandler()\n+            formatter = logging.Formatter(\"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\")\n+            stream.setFormatter(formatter)\n+            logger.addHandler(stream)\n+\n+            logger.debug(\"Test debug message\")\n+        \"\"\"\n+    )\n+    \n+    result = testdir.runpytest(\"-s\")\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"DEBUG    test_module:test_logging:* Test debug message\",\n+        ]\n+    )\n     \"\"\"Ensure we reset the first newline added by the live logger between tests\"\"\"\n     filename = request.node.name + \".py\"\n     testdir.makepyfile(\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..353b464 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -301,6 +301,27 @@ def callequal(left, right, verbose=False):\n \n \n class TestAssert_reprcompare:\n+    def test_bytes_diff_empty_and_nonempty(self):\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+            \"?  ++\",\n+        ]\n+    \n+    def test_bytes_diff_empty_and_single_byte(self):\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+            \"?  +\",\n+        ]\n     def test_different_types(self):\n         assert callequal([0, 1], \"foo\") is None\n \n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..68c99f9 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,3 +1,4 @@\n+\n import os\n from xml.dom import minidom\n \n@@ -7,6 +8,8 @@ import pytest\n from _pytest.junitxml import LogXML\n from _pytest.reports import BaseReport\n \n+import platform\n+from datetime import datetime\n \n def runandparse(testdir, *args):\n     resultpath = testdir.tmpdir.join(\"junit.xml\")\n@@ -139,6 +142,39 @@ class TestPython:\n         node = dom.find_first_by_tag(\"testsuite\")\n         node.assert_attr(name=\"pytest\", errors=1, failures=2, skipped=1, tests=5)\n \n+    def test_hostname_in_xml(self, testdir):\n+        # Create a simple test file\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        # Run pytest and parse the XML\n+        result, dom = runandparse(testdir)\n+        # Locate the <testsuite> node\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        # Assert that the 'hostname' matches the current system hostname\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        # Create a simple test file\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        # Record the start time\n+        start_time = datetime.now()\n+        # Run pytest and parse the XML\n+        result, dom = runandparse(testdir)\n+        # Locate the <testsuite> node\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        # Parse and verify the 'timestamp'\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp <= datetime.now()\n+\n     def test_timing_function(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..af67b80 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -144,6 +144,43 @@ def test_repr_on_newstyle():\n     assert saferepr(Function())\n \n \n+def test_broken_getattribute():\n+    \"\"\"Test saferepr() with broken __getattribute__.\"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Error in getattribute\")\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Error in repr\")\n+\n+    try:\n+        result = saferepr(SomeClass())\n+        assert result.startswith(\n+            \"<[RuntimeError('Error in repr') raised in repr()] SomeClass object at 0x\"\n+        )\n+    except Exception:\n+        pytest.fail(\"saferepr raised an unexpected exception\")\n+\n+def test_broken_repr_in_repr_instance():\n+    \"\"\"Test SafeRepr().repr_instance with broken __repr__.\"\"\"\n+    class SomeClass:\n+        def __repr__(self):\n+            raise RuntimeError(\"Error in repr\")\n+\n+    safe_repr = SafeRepr(240)\n+    try:\n+        result = safe_repr.repr_instance(SomeClass(), 0)\n+        assert result.startswith(\n+            \"<[RuntimeError('Error in repr') raised in repr()] SomeClass object at 0x\"\n+        )\n+    except Exception:\n+        pytest.fail(\"SafeRepr.repr_instance raised an unexpected exception\")\n+\n+\n+import pytest\n+from _pytest._io.saferepr import saferepr\n+from _pytest._io.saferepr import SafeRepr\n+\n def test_unicode():\n     val = \"\u00a3\u20ac\"\n     reprval = \"'\u00a3\u20ac'\"\n@@ -153,4 +190,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_nodes.py b/testing/test_nodes.py\nindex 899e436..b05595e 100644\n--- a/testing/test_nodes.py\n+++ b/testing/test_nodes.py\n@@ -47,6 +47,31 @@ def test__check_initialpaths_for_relpath():\n     class FakeSession:\n         _initialpaths = [cwd]\n \n+\n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n     assert nodes._check_initialpaths_for_relpath(FakeSession, cwd) == \"\"\n \n     sub = cwd.join(\"file\")\n@@ -54,7 +79,32 @@ def test__check_initialpaths_for_relpath():\n     class FakeSession:\n         _initialpaths = [cwd]\n \n+\n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n     assert nodes._check_initialpaths_for_relpath(FakeSession, sub) == \"file\"\n \n     outside = py.path.local(\"/outside\")\n-    assert nodes._check_initialpaths_for_relpath(FakeSession, outside) is None\n+    assert nodes._check_initialpaths_for_relpath(FakeSession, outside) is None\n",
  "pytest-dev__pytest-7373": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..cdce0cf 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -397,7 +398,32 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n-    def test_dynamic_xfail_no_run(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir):\n+        # New test case for dynamically adding an xfail marker during test execution that fails\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir):\n+        # New test case for dynamically adding an xfail marker with strict=True that passes\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-8365": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..fd896b2 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,7 +574,35 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n-def test_ridgecv_store_cv_values():\n+from sklearn.linear_model import RidgeClassifierCV\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    # Generate some sample data\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    y = rng.randint(0, 2, size=n_samples)  # Binary targets\n+\n+    # Define alphas\n+    alphas = [0.1, 1.0, 10.0]\n+    n_alphas = len(alphas)\n+\n+    # Create RidgeClassifierCV with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(x, y)\n+\n+    # Check the shape of cv_values_\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Test with multi-dimensional y\n+    y_multidim = np.vstack([y, y]).T  # Creating multidimensional target\n+    r.fit(x, y_multidim)\n+\n+    # Check the shape of cv_values_ for multi-dimensional y\n+    assert r.cv_values_.shape == (n_samples, y_multidim.shape[1], n_alphas)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..5f433be 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,40 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+import pytest\n+import numpy as np\n+from sklearn.preprocessing import OneHotEncoder\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_one_hot_encoder_handle_unknown_longer_strings():\n+    X_train = np.array(['short', 'medium', 'looooooong']).reshape((-1, 1))\n+    X_test = np.array(['longerthancategory', 'short']).reshape((-1, 1))\n+    \n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X_train)\n+    X_test_passed = X_test.copy()\n+    # The expected result should be all zeros for first row (unknown) and only the second \n+    # column should be one for the 'short' category in the second row.\n+    expected = np.array([[0., 0., 0.], \n+                         [1., 0., 0.]])\n+    assert_array_equal(oh.transform(X_test_passed).toarray(), expected)\n+    # Ensure that we do not change the original X_test when transforming\n+    assert_array_equal(X_test, X_test_passed)\n+\n+def test_one_hot_encoder_with_empty_unknown_category():\n+    X_train = np.array(['a', 'b', 'c']).reshape((-1, 1))\n+    X_test = np.array(['d', '']).reshape((-1, 1))\n+\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X_train)\n+    X_test_passed = X_test.copy()\n+    # As 'd' and '' are unknown categories, their one-hot representation should be all zeros\n+    expected = np.array([[0., 0., 0.], \n+                         [0., 0., 0.]])\n+    assert_array_equal(oh.transform(X_test_passed).toarray(), expected)\n+    assert_array_equal(X_test, X_test_passed)\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..5a73595 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,14 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict when n_init > 1\n+    rng = np.random.RandomState(0)\n+    X = rng.randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..eae116b 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -70,8 +71,16 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n-\n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_indeterminacy():\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=42)\n+    \n+    transformed_X1 = kpca.fit_transform(X)\n+    transformed_X2 = kpca.fit_transform(X)\n+    \n+    # Check if the output has sign indeterminacy but is otherwise equal\n+    assert_allclose(np.abs(transformed_X1), np.abs(transformed_X2))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..4f14096 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,6 +1057,34 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n+def test_pipeline_len():\n+    from sklearn.svm import SVC\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.pipeline import Pipeline\n+\n+    # Test a pipeline with two steps\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    assert len(pipe) == 2\n+\n+    # Test an empty pipeline\n+    pipe_empty = Pipeline([])\n+    assert len(pipe_empty) == 0\n+\n+    # Test a pipeline with one step, with 'passthrough'\n+    pipe_one_step = Pipeline([('anova', 'passthrough')])\n+    assert len(pipe_one_step) == 1\n+\n+    # Test a pipeline with multiple transformers\n+    pipe_multiple = Pipeline([('step1', anova_filter), ('step2', 'passthrough'), ('svc', clf)])\n+    assert len(pipe_multiple) == 3\n+\n+    # Test a pipeline with a single classifier\n+    pipe_single_clf = Pipeline([('svc', clf)])\n+    assert len(pipe_single_clf) == 1\n+\n \n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n@@ -1070,4 +1098,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..f4289c2 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..76211a5 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -195,6 +195,17 @@ def test_mutual_info_options():\n                            random_state=0)\n \n         assert_array_equal(mi_1, mi_2)\n+\n+        # Test cases for discrete_features as boolean mask\n+        mi_5 = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        mi_6 = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        assert_array_equal(mi_5, mi_6)\n+\n+        # Test cases expecting exceptions\n+        assert_raises(ValueError, mutual_info, X, y, discrete_features='manual')\n+        assert_raises(ValueError, mutual_info, X_csr, y, discrete_features=[True, False, True])\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False, True, False])\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..8ff816b 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,9 +1,12 @@\n+\n import re\n from pprint import PrettyPrinter\n \n import numpy as np\n \n from sklearn.utils._pprint import _EstimatorPrettyPrinter\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn import set_config\n from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n@@ -208,6 +211,17 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n     assert imputer.__repr__() == expected\n \n     # Defaults to np.NaN, trying with float('NaN')\n+\n+def test_logistic_regression_cv_repr_with_array():\n+    \"\"\"Test that LogisticRegressionCV does not raise an error when using\n+    an array for 'Cs' parameter with print_changed_only=True.\"\"\"\n+    set_config(print_changed_only=True)\n+    try:\n+        repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    except ValueError:\n+        pytest.fail(\"ValueError was raised unexpectedly\")\n+    finally:\n+        set_config(print_changed_only=False)\n     imputer = SimpleImputer(missing_values=float('NaN'))\n     expected = \"\"\"SimpleImputer()\"\"\"\n     assert imputer.__repr__() == expected\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..797755b 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -14,6 +15,8 @@ from sklearn.ensemble import RandomForestClassifier\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n from sklearn.model_selection import GridSearchCV\n from sklearn import datasets\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.model_selection import cross_val_score, train_test_split\n from sklearn.datasets import make_multilabel_classification\n from sklearn.svm import SVC\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..0f1ee8c 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,30 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+import numpy as np\n+from sklearn.utils._testing import assert_warns_message\n+\n+def test_parameters_conversions_in_grid_search():\n+    # Test if GridSearchCV works with integer inputs that could cause TypeErrors\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.model_selection import GridSearchCV\n+    from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+    from sklearn.neighbors import KNeighborsClassifier\n+\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+    params = {'nca__tol': [0.1, 0.5, 1],  # 1 was causing type issues\n+              'nca__n_components': np.arange(1, 10)}  # np.int64 issues\n+\n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n \n-def test_transformation_dimensions():\n+    # The following fit should work without errors\n+    gs.fit(X, y)\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..1104fd1 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,35 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue with sparse data and empty support vectors\n+    from scipy import sparse  # Ensure scipy is imported\n+    import numpy as np  # Ensure numpy is imported\n+    from sklearn import svm  # Ensure sklearn svm is imported\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+\n+    # Ensure the support vectors and dual coefficients are empty\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+    # Additional scenario: Check with different kernel and verify no error\n+    model_rbf = svm.SVR(kernel='rbf', gamma=1e-3)\n+    model_rbf.fit(X_train, y_train)\n+    assert model_rbf.support_.size >= 0\n+\n+    # Additional scenario: Using higher `C` value should not cause errors\n+    model_high_c = svm.SVR(kernel='linear', C=1e3)\n+    model_high_c.fit(X_train, y_train)\n+    assert model_high_c.support_.size >= 0\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..7efa5e1 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,19 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+import pytest\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr_correction(RepeatedCV):\n+    # Test that the __repr__ method returns the expected format\n+    n_splits = 3\n+    n_repeats = 5\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    expected_repr = f\"{RepeatedCV.__name__}(n_repeats={n_repeats}, n_splits={n_splits}, random_state=None)\"\n+    assert repr(repeated_cv) == expected_repr\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..55f55b7 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -151,6 +151,16 @@ def test_affinity_propagation_predict_non_convergence():\n     y = assert_warns(ConvergenceWarning, af.predict, to_predict)\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n+def test_affinity_propagation_non_convergence_clusters():\n+    # Test non-convergence resulting in empty cluster centers and -1 labels\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    # Check if cluster centers indices is empty\n+    assert_array_equal(np.array([], dtype=np.int), af.cluster_centers_indices_)\n+    # Check if all labels are -1\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n \n def test_equal_similarities_and_preferences():\n     # Unequal distances\n",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..19ac2b1 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,4 +1,11 @@\n+\n import warnings\n+import pytest\n+import numpy as np\n+from sklearn import set_config\n+from sklearn.datasets import make_classification\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n import numpy as np\n import pickle\n import copy\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..49ad16a 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2128,4 +2128,53 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+\n+\n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False, False, False]), [False, False, False, False]],\n+    ids=[\"list\", \"array_bool\", \"list_bool\"],\n+)\n+def test_empty_categorical_transformer_in_pandas_output(empty_selection):\n+    \"\"\"Test that ColumnTransformer handles an empty selection with pandas output.\"\"\"\n+    \n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame(\n+        data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]], columns=[\"a\", \"b\", \"c\", \"d\"]\n+    )\n+    y = np.array([0, 1])\n+    numerical_features = [\"a\", \"b\", \"c\"]\n+    \n+    model_preprocessing = (\n+        \"preprocessing\",\n+        ColumnTransformer(\n+            [\n+                (\"categorical\", \"passthrough\", empty_selection),\n+                (\n+                    \"numerical\",\n+                    Pipeline(\n+                        [\n+                            (\"scaler\", RobustScaler()),\n+                            (\"imputer\", SimpleImputer(strategy=\"median\")),\n+                        ]\n+                    ),\n+                    numerical_features,\n+                ),\n+            ],\n+            remainder=\"drop\",\n+        ),\n+    )\n+    \n+    pipeline = Pipeline([model_preprocessing, (\"classifier\", None)]).set_output(transform=\"pandas\")\n+\n+    # We should be able to fit the pipeline without errors\n+    pipeline.fit(X, y)\n+\n+    # After fitting, when transforming, we want to verify the output columns\n+    result = pipeline.named_steps['preprocessing'].transform(X)\n+    \n+    # Expecting only the numerical steps ('numerical__a', 'numerical__b', 'numerical__c')\n+    expected_columns = [\"numerical__a\", \"numerical__b\", \"numerical__c\"]\n+    assert_array_equal(result.columns, expected_columns)\n",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..9fd71c8 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,43 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+import restructuredtext\n+from sphinx.testing.util import assert_node\n+from sphinx.domains.std import StandardDomain\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, ('index',\n+                          ['desc', (['desc_signature', (['desc_name', '-j'],\n+                                                        ['desc_addname', '[=N]'])],\n+                                    ['desc_content', ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, ('index',\n+                          ['desc', (['desc_signature', (['desc_name', '[enable'],\n+                                                        ['desc_addname', '=]PATTERN'])],\n+                                    ['desc_content', ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+def test_cmd_option_complex_pattern(app):\n+    text = \".. option:: --config=[PATH=]/default.conf\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, ('index',\n+                          ['desc', (['desc_signature', (['desc_name', '--config'],\n+                                                        ['desc_addname', '=[PATH=]/default.conf'])],\n+                                    ['desc_content', ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--config', '--config', 'cmdoption', 'index', 'cmdoption-arg-config', 1) in objects\n+\n+# End of additional tests\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..3a91497 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,8 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..dece3ba 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -10,6 +11,7 @@\n \n import sys\n from numbers import Integral\n+from struct import Struct\n from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar,\n                     Union)\n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..775581d 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,36 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_use_param_false(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+    def test_other_parameters_with_use_param_true(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..3ecc9f4 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -350,6 +350,12 @@ def test_args():\n            # enclosing brackets needed on 0\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n+    # Additional test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([0, 2, 1])  # Apply second cycle after the first one\n+    assert Permutation([[0, 1], [1, 2], [0, 2]]) == Permutation([2, 0, 1])  # Chain of non-disjoint cycles\n+    assert Permutation([[0, 2, 3], [2, 3], [0, 1]]) == Permutation([3, 2, 0, 1])  # Overlapping cycles\n+    assert Permutation([[1, 3], [1, 2, 3]]) == Permutation([0, 3, 1, 2])  # Overlapping and non-disjoint\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..5659a77 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,8 +1,29 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n+from sympy import Matrix\n \n def test_sparse_matrix():\n+    # Verify hstack and vstack with 0 x n matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n+\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n+\n+    # Add cases for various dimensions including non-zero dimensions\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n     def sparse_eye(n):\n         return SparseMatrix.eye(n)\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..a01e574 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -100,6 +100,23 @@ def test_core_symbol():\n         check(c)\n \n \n+def test_pickle_float_expression():\n+    import pickle\n+    from sympy import symbols, Float\n+\n+    x = symbols(\"x\")\n+\n+    # Expression containing Float\n+    expr = x + Float(1.0)\n+    \n+    # Simulate pickling in Python 2\n+    pickled_data = pickle.dumps(expr, 2)\n+\n+    # Unpickle in Python 3\n+    unpickled_expr = pickle.loads(pickled_data)\n+\n+    assert expr == unpickled_expr\n+\n def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..042e6dc 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -278,8 +278,22 @@ def test_coth_series():\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n-\n-def test_csch():\n+def test_coth_log_tan_substitution_issue():\n+    from sympy import Symbol, coth, log, tan, I, pi\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Test the specific integral values from the issue description:\n+    for i in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        try:\n+            result = e.subs(x, i)\n+            print(f'coth(log(tan({i}))) = {result}')  # Print result to examine correctness\n+        except Exception as ex:\n+            print(f'Error for x = {i}: {ex}')\n+            raise AssertionError(f\"Substitution failed for x = {i}\") from ex\n+    \n+    # The same test as the original patch to ensure it still works:\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..9f2712b 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,28 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    # Define the identity matrix M of size 6x6\n+    M = Matrix.eye(6)\n+\n+    # Define a matrix V with 2 columns of all 2's\n+    V = 2 * Matrix.ones(6, 2)\n+\n+    # Perform the column insertion at the 3rd index (0-based)\n+    result = M.col_insert(3, V)\n+\n+    # Explicitly constructed expected outcome for comparison\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+\n+    # Assert that the result matches the expected outcome\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..9a624d3 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,34 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+from sympy import SeqFormula, SeqPer, SeqAdd, SeqMul, symbols, latex\n+import sympy as sp\n \n def test_latex_sequences():\n+    # Create symbols needed for sequence formulas\n+    a, n = symbols('a n')\n+    \n+    # Test case for sequences without infinity\n+    test_seq1 = SeqFormula(n**2, (n, 0, sp.oo))\n+    assert latex(test_seq1) == r'[0, 1, 4, 9, \\ldots]'\n+    \n+    # Test case for a finite sequence\n+    test_seq2 = SeqFormula(n**2, (n, 0, 3))\n+    assert latex(test_seq2) == r'[0, 1, 4, 9]'\n+    \n+    # Test case for periodic sequence\n+    test_seq3 = SeqPer((1, 2), (n, 0, sp.oo))\n+    assert latex(test_seq3) == r'[1, 2, 1, 2, \\ldots]'\n+    \n+    # Test case for finite periodic sequence\n+    test_seq4 = SeqPer((1, 2), (n, 0, 3))\n+    assert latex(test_seq4) == r'[1, 2, 1, 2]'\n+    \n+    # Mixed sequence with SeqAdd\n+    assert latex(SeqAdd(test_seq1, test_seq3)) == r'[1, 3, 5, 11, \\ldots]'\n+    \n+    # Mixed sequence with SeqMul\n+    assert latex(SeqMul(test_seq1, test_seq3)) == r'[0, 2, 4, 18, \\ldots]'\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..3d2f2ee 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -155,6 +156,18 @@ def test_Greedy_postprocess():\n \n \n def test_Domain_preprocess():\n+    from sympy.polys.polytools import Poly\n+    from sympy.abc import x, y, z\n+    # Additional test cases for issue\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]\n+    assert Domain.preprocess('CC[y,z]') == CC[y, z]\n+\n+    # Test Poly creation with the specified domain\n+    poly_rr_yz = Poly(1.2*x*y*z, x, domain='RR[y,z]')\n+    assert str(poly_rr_yz) == \"Poly(1.2*y*z*x, x, domain='RR[y,z]')\"\n+\n+    poly_cc_yz = Poly(1.2*x*y*z, x, domain='CC[y,z]')\n+    assert str(poly_cc_yz) == \"Poly(1.2*y*z*x, x, domain='CC[y,z]')\"\n     assert Domain.preprocess(ZZ) == ZZ\n     assert Domain.preprocess(QQ) == QQ\n     assert Domain.preprocess(EX) == EX\n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..703baff 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -306,6 +307,25 @@ def test_latex_functions():\n                  fold_func_brackets=True) == \\\n         r\"\\sin^{-1} {x^{2}}\"\n \n+    # Test case for acsc with inv_trig_style=\"full\"\n+    assert latex(acsc(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+    # Test case for asec with inv_trig_style=\"full\"\n+    assert latex(asec(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n+    # Test the power style for acsc\n+    assert latex(acsc(x), inv_trig_style=\"power\") == \\\n+        r\"\\csc^{-1}{\\left (x \\right )}\"\n+    # Test the power style for asec\n+    assert latex(asec(x), inv_trig_style=\"power\") == \\\n+        r\"\\sec^{-1}{\\left (x \\right )}\"\n+    # Test with fold_func_brackets for acsc\n+    assert latex(acsc(x**2), inv_trig_style=\"full\", fold_func_brackets=True) == \\\n+        r\"\\operatorname{arccsc} {x^{2}}\"\n+    # Test with fold_func_brackets for asec\n+    assert latex(asec(x**2), inv_trig_style=\"full\", fold_func_brackets=True) == \\\n+        r\"\\operatorname{arcsec} {x^{2}}\"\n+\n     assert latex(factorial(k)) == r\"k!\"\n     assert latex(factorial(-k)) == r\"\\left(- k\\right)!\"\n \n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..fbbd238 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,10 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import pprint, pretty\n+from sympy.matrices.expressions.matexpr import MatrixSymbol, MatAdd\n+from sympy.abc import n, a\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n@@ -6122,7 +6126,31 @@ def test_MatrixSymbol_printing():\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n \n-def test_degree_printing():\n+def test_issue_14814_matadd_pretty_printing():\n+    # issue #14814\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    assert pretty(x + y) == \"x + y*\"\n+\n+    # Negative numbers and variables in pretty printing\n+    a = MatrixSymbol('a', n, n)\n+    assert pretty(-a*x + -2*y*y) == \"-a*x - 2*y*y*\"\n+\n+    # More negative and positive combinations\n+    b = MatrixSymbol('b', n, n)\n+    assert pretty(-x - y + b) == \"-x - y* + b\"\n+    assert pretty(x + a - b) == \"x + a - b\"\n+\n+    # Zero cases\n+    assert pretty(0*x + 0*y) == \"0\"\n+    assert pretty(x - x + y - y) == \"0\"\n+\n+    # Positive/Negative variables and constants\n+    assert pretty(x + 2) == \"x + 2\"\n+    assert pretty(x - 2) == \"x - 2\"\n+\n+    # Ensure that edge cases with operations are handled properly\n+    assert pretty(MatAdd(*(-x, x, y))) == \"-x + x + y*\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..5b5a812 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -737,8 +737,27 @@ def test_python_keywords():\n     f = lambdify(python_if, expr)\n     assert f(4.0) == 2.0\n \n-\n-def test_lambdify_docstring():\n+def test_curly_matrix_symbol_issue():\n+    import sympy\n+    \n+    # Recreate the issue scenario\n+    curlyx = sympy.symbols(\"{x}\")\n+    curlyv = sympy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # These should work without syntax errors if the issue is fixed\n+    try:\n+        curlyVectorId = sympy.lambdify(curlyv, curlyv)\n+        result = curlyVectorId([[1], [1]])\n+        assert result == [[1], [1]], \"Unexpected result: {}\".format(result)\n+    except SyntaxError:\n+        assert False, \"SyntaxError raised when using curly braces in MatrixSymbol name.\"\n+\n+    try:\n+        curlyVectorIdDummified = sympy.lambdify(curlyv, curlyv, dummify=True)\n+        result = curlyVectorIdDummified([[1], [1]])\n+        assert result == [[1], [1]], \"Unexpected result (dummified): {}\".format(result)\n+    except SyntaxError:\n+        assert False, \"SyntaxError raised with dummify=True when using curly braces in MatrixSymbol name.\"\n     func = lambdify((w, x, y, z), w + x + y + z)\n     ref = (\n         \"Created with lambdify. Signature:\\n\\n\"\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..dc4528e 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,16 +1,32 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n x, y, z = symbols('x,y,z')\n f = Function('f')\n \n-\n-def test_Integer():\n+def test_Max_Min():\n+    # Original test case\n+    assert mcode(Max(x, y, z)*Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+    \n+    # Test cases for specific issue with Max\n+    # Single argument Max\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"  # This is valid in Mathematica, ordering can be any\n+\n+    # Additional test cases\n+    assert mcode(Max(3, x, 4)) == \"Max[3, x, 4]\"\n+    assert mcode(Max(x, y, 1, z, 0)) == \"Max[x, y, 1, z, 0]\"\n+    assert mcode(Max(x)) == \"x\"\n+\n+    # Nested Max and Min\n+    assert mcode(Max(Max(x, 2), Min(y, 3))) == \"Max[Max[x, 2], Min[y, 3]]\"\n+    assert mcode(Min(Max(x, y), 2)) == \"Min[Max[x, y], 2]\"\n     assert mcode(Integer(67)) == \"67\"\n     assert mcode(Integer(-1)) == \"-1\"\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..46faa4c 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,15 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_matrix_expression_indexed_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Test the fix for the issue where the LaTeX output was not correct for indexed matrix expressions\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..0f123ec 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Symbol, sqrt, Derivative, S\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n@@ -20,8 +21,23 @@ def test_idiff():\n     assert True in [sol.diff(x, 3).equals(explicit) for sol in solve(circ, y)]\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n-\n-def test_intersection():\n+def test_idiff_issue():\n+    from sympy import Eq, exp, Function\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+    \n+    # Original test case provided in the issue\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x) == (x + 1) * exp(x - y)/(y + 1)\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+\n+    # Additional test cases\n+    assert idiff(y*exp(y) - x*exp(x), y, x) == (x + 1)*exp(x - y)/(y + 1)\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x) + 2*y, [f(x), y], x) == (x + 1)*exp(x - f(x))/(f(x) + 1)\n+\n+    # Testing with higher derivatives\n+    assert idiff(x**2 + y**2 - 1, y, x, 2) == -1\n+    assert idiff(x**2 - f(x)**2, f(x), x, 2) == -Derivative(f(x), (x, 2))\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..b36e86f 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -581,8 +581,27 @@ def test_ccode_cse():\n         '}\\n'\n     )\n     assert source == expected\n-\n-def test_empty_f_code():\n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen\n+    from sympy import MatrixSymbol\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    # Generate C code with unused array argument\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..319c9cd 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -15,6 +16,23 @@ from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n np = import_module('numpy')\n+from sympy import symbols\n+from sympy.utilities.pytest import raises\n+\n+def test_issue_17006():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+\n+    assert (f(ma) == mr).all()\n+\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"M\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n \n def test_numpy_piecewise_regression():\n     \"\"\"\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..c94fc3b 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n+from sympy import sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -25,6 +27,16 @@ def test_point():\n     assert p1 not in p2\n     assert p2.y == y2\n     assert (p3 + p4) == p4\n+    # New test cases for the issue\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert point1 + point2 * sympify(2.0) == Point(2, 2)\n+    assert point1 + sympify(2.0) * point2 == Point(2, 2)\n+    # New test cases for 3D points\n+    point1 = Point3D(0, 0, 0)\n+    point2 = Point3D(1, 1, 1)\n+    assert point1 + point2 * sympify(2.0) == Point3D(2, 2, 2)\n+    assert point1 + sympify(2.0) * point2 == Point3D(2, 2, 2)\n     assert (p2 - p1) == Point(y1 - x1, y2 - x2)\n     assert p4*5 == Point(5, 5)\n     assert -p2 == Point(-y1, -y2)\n@@ -139,6 +151,16 @@ def test_point3D():\n     assert p1 not in p2\n     assert p2.y == y2\n     assert (p3 + p4) == p4\n+    # New test cases for the issue\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert point1 + point2 * sympify(2.0) == Point(2, 2)\n+    assert point1 + sympify(2.0) * point2 == Point(2, 2)\n+    # New test cases for 3D points\n+    point1 = Point3D(0, 0, 0)\n+    point2 = Point3D(1, 1, 1)\n+    assert point1 + point2 * sympify(2.0) == Point3D(2, 2, 2)\n+    assert point1 + sympify(2.0) * point2 == Point3D(2, 2, 2)\n     assert (p2 - p1) == Point3D(y1 - x1, y2 - x2, y3 - x3)\n     assert p4*5 == Point3D(5, 5, 5)\n     assert -p2 == Point3D(-y1, -y2, -y3)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..9db177d 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,45 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, Symbol\n+import pytest\n+\n+class TestSymbolEquality:\n+\n+    def test_custom_repr_does_not_trigger_eval(self):\n+        x = Symbol('x')\n+\n+        # Case 1: repr returning 'x.y' should not trigger eval of 'x.y'\n+        class C1:\n+            def __repr__(self):\n+                return 'x.y'\n+        \n+        # Should not raise AttributeError\n+        assert (x == C1()) is False\n+        assert (x != C1()) is True\n+\n+    def test_correct_equality_behavior(self):\n+        x = Symbol('x')\n+\n+        # Case 2: repr returning 'x' should not compare as equal to Symbol('x')\n+        class C2:\n+            def __repr__(self):\n+                return 'x'\n+\n+        # Should not incorrectly compare equal\n+        assert (x == C2()) is False\n+        assert (x != C2()) is True\n+\n+        # Case 3: Explicit comparison with strings\n+        assert (x == 'x') is False\n+        assert (x != 'x') is True\n+\n+        # Case 4: Comparison with various data types in a list\n+        v = ['d', 'e', 'fg']\n+        sympy_v = [Symbol('d'), Symbol('e'), Symbol('fg')]\n+        assert v != sympy_v\n+        assert sympy_v == [Symbol('d'), Symbol('e'), Symbol('fg')]\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1941,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..93ee675 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,6 +553,16 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_issue_18186():\n+    from sympy import symbols\n+    x, y = symbols('x y', integer=True)\n+\n+    # This is to check if diophantine works similarly for both symbol orders\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+           set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+           set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n \n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..a2e0d62 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..f8ae794 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,31 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_with_one_element_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+    # Regular Matrix creation\n+    M = Matrix([[1, 2], [3, 4]])\n+    # Converting single matrix to BlockDiagMatrix and back to Matrix\n+    try:\n+        D = BlockDiagMatrix(M)\n+        B = Matrix(D)  # This should not raise an error\n+    except Exception as e:\n+        assert False, f\"Conversion from BlockDiagMatrix with one element to Matrix failed: {e}\"\n+\n+def test_BlockDiagMatrix_with_two_elements_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+    # Regular Matrix creation\n+    M = Matrix([[1, 2], [3, 4]])\n+    # Converting two matrices to BlockDiagMatrix and back to Matrix\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    assert B == Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..68ccc13 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -66,7 +67,30 @@ def test_Identity_index():\n     raises(IndexError, lambda: I[3, 3])\n \n \n-def test_block_index():\n+def test_issue_wrong_matrix_element_fetched():\n+    # Test for symbolic indices and ensure correct behavior.\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+\n+    # Similar nested block matrix check\n+    A1 = MatrixSymbol('A1', n, n)\n+    A2 = MatrixSymbol('A2', n, n)\n+    C_nested = BlockMatrix([[A1], [A2]])\n+    assert C_nested[i, i] == MatrixElement(C_nested, i, i)\n+\n+    # Edge case: Larger block matrix\n+    D = BlockMatrix([[A1, A2], [A2, A1]])\n+    assert D[i, i] == MatrixElement(D, i, i)\n+\n+    # Ensure tests work on empty sub-matrices\n+    E = BlockMatrix([[]])\n+    assert E.shape == (0, 0)\n+\n+    # Check non-symbolic indices for correctness\n+    assert C[0, 0] == A[0, 0]  # Known element should resolve correctly when specific\n     I = Identity(3)\n     Z = ZeroMatrix(3, 3)\n     B = BlockMatrix([[I, I], [I, I]])\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..f50cd3b 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -316,8 +316,33 @@ def test_sign():\n     d = p - q\n     assert sign(d).func is sign or sign(d) == 0\n \n-\n-def test_as_real_imag():\n+    x = Symbol('x')\n+    # Test case for rewriting sign as Abs\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x / Abs(x), True))\n+    \n+    y = Symbol('y', zero=True)\n+    # Ensure that sign(0) can still rewrite correctly based on the decision made\n+    assert sign(y).rewrite(Abs) == 0\n+\n+    z = Symbol('z', real=True)\n+    # For real numbers, sign should rewrite using Abs correctly\n+    assert sign(z).rewrite(Abs) == Piecewise((0, Eq(z, 0)), (z / Abs(z), True))\n+    \n+    a = 0\n+    # Check the rewriting for an explicit zero value\n+    assert sign(a).rewrite(Abs) == 0\n+\n+    k = Symbol('k', positive=True)\n+    # Positive number should return 1 when rewritten\n+    assert sign(k).rewrite(Abs) == 1\n+\n+    w = Symbol('w', nonpositive=True)\n+    # Nonpositive should use a conditional piecewise logic for rewriting\n+    assert sign(w).rewrite(Abs) == Piecewise((0, Eq(w, 0)), (-1, w < 0), (1, w > 0))\n+        \n+    j = Symbol('j', imaginary=True)\n+    # For imaginary numbers, handle separately if needed\n+    assert sign(I * j).rewrite(Abs) == I * j / Abs(j)\n     n = pi**1000\n     # the special code for working out the real\n     # and complex parts of a power with Integer exponent\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..c218d61 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,6 +470,8 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n+from sympy import S\n \n def test_partitions():\n     ans = [[{}], [(0, {})]]\n@@ -513,6 +515,31 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n+def test_partitions_independence():\n+    # Check if two partitions generated are independent copies.\n+    p1 = list(partitions(6, k=2))\n+    p2 = list(partitions(6, k=2))\n+    for i, j in zip(p1, p2):\n+        assert i is not j, \"Partitions should not be the same object\"\n+        assert i == j, \"Values of partitions should be the same\"\n+\n+    # Check if modifying one partition does not affect others in the list\n+    part_list = list(partitions(6, k=2))\n+    copy_first_part = part_list[0].copy()\n+    part_list[0][1] = 7  # Modify the first partition\n+    assert part_list[0][1] == 7\n+    part_list = list(partitions(6, k=2))\n+    assert part_list[0] == copy_first_part, \"Original partition should remain unchanged\"\n+\n+    # Check if modifying the returned dictionary affects the next partition\n+    p_iter = partitions(6, k=2)\n+    first_part = next(p_iter)\n+    second_part = next(p_iter)\n+    first_part[2] = 0  # Modify the first partition\n+    assert 2 in first_part and first_part[2] == 0\n+    second_part_copy = second_part.copy()\n+    # Check that the second partition is unaffected by changes to the first\n+    assert second_part_copy == {1: 2, 2: 2}, \"Subsequent partitions should not be affected\"\n \n def test_binary_partitions():\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..8648671 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,6 +254,8 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n+from sympy import S, oo, zoo, power\n+\n def test_zero():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -266,8 +268,10 @@ def test_zero():\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n-\n-def test_pow_as_base_exp():\n+def test_issue_19572():\n+    # Verify that 0**-oo returns zoo as expected\n+    assert 0**-oo == zoo\n+    assert power(0, -oo) == zoo\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..1e6d5ec 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,21 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import pytest\n+from sympy import Symbol\n+from sympy.testing.pytest import raises\n+\n+def test_symbol_dict_attribute():\n+    \"\"\"Test for presence of __dict__ in Symbol instances.\"\"\"\n+    s = Symbol('s')\n+\n+    # Check if the __dict__ attribute raises an AttributeError (expected behavior)\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+    # Checking if the __slots__ is defined correctly\n+    assert s.__slots__ == ('name',)\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..6375177 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n                    atan, atan2, nan, Symbol, re, im, sign)\n from sympy.abc import w, x, y, z\n@@ -160,8 +161,17 @@ def test_sign():\n     x = Symbol('x', complex=True)\n     assert refine(sign(x), Q.zero(x)) == 0\n \n-\n-def test_func_args():\n+def test_issue_with_complex_arguments():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x')\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo)).doit()\n+    \n+    # Test if refine can properly handle the condition Q.positive(a)\n+    assert refine(J, Q.positive(a)) == 1/(a**2 + 1)\n+    \n+    # Check refine on Abs and arg individually to ensure correct behavior\n+    assert refine(Abs(a), Q.positive(a)) == a\n+    assert refine(arg(a), Q.positive(a)) == 0\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/functions/elementary/tests/test_piecewise.py b/sympy/functions/elementary/tests/test_piecewise.py\nindex 400b22e..6ecde76 100644\n--- a/sympy/functions/elementary/tests/test_piecewise.py\n+++ b/sympy/functions/elementary/tests/test_piecewise.py\n@@ -5,6 +5,8 @@ from sympy import (\n     cos, sin, exp, Abs, Ne, Not, Symbol, S, sqrt, Sum, Tuple, zoo, Float,\n     DiracDelta, Heaviside, Add, Mul, factorial, Ge, Contains)\n from sympy.core.expr import unchanged\n+from sympy.functions.elementary.trigonometric import sinh\n+from sympy import exp, symbols\n from sympy.functions.elementary.piecewise import Undefined, ExprCondPair\n from sympy.printing import srepr\n from sympy.testing.pytest import raises, slow\n@@ -14,6 +16,42 @@ a, b, c, d, x, y = symbols('a:d, x, y')\n z = symbols('z', nonzero=True)\n \n \n+def test_issue_21373():\n+    from sympy.core.cache import clear_cache\n+\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+\n+    clear_cache()\n+    expr1 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr1.subs({1: 1.0}) is not None\n+\n+    clear_cache()\n+    expr2 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr2.subs({1: 1.0}) is not None\n+\n+    # Different trig functions\n+    expr3 = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr3.subs({1: 1.0}) is not None\n+\n+    expr4 = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr4.subs({1: 1.0}) is not None\n+\n+    # Without division\n+    expr5 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr5.subs({1: 1.0}) is not None\n+\n+    # Other unary functions\n+    expr6 = exp(log(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr6.subs({1: 1.0}) is not None\n+\n+    expr7 = exp(sin(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr7.subs({1: 1.0}) is not None\n+\n+    # Alternate setups\n+    z_r_non_real = symbols('z_r_non_real')\n+    expr8 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r_non_real))\n+    assert expr8.subs({1: 1.0}) is not None\n+\n def test_piecewise1():\n \n     # Test canonicalization\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..1588c9a 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -34,7 +36,10 @@ def test_Symbol_kind():\n     assert comm_x.kind is NumberKind\n     assert noncomm_x.kind is UndefinedKind\n \n-def test_Integral_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..289d751 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -140,6 +140,17 @@ def test_monomials():\n     assert set(itermonomials([i, j, k], [0, 2, 0])) == {1, j, j**2}\n     assert set(itermonomials([i, j, k], [2, 0, 0])) == {i, 1, i**2}\n     assert set(itermonomials([i, j, k], [1, 1, 1])) == {1, k, j, j*k, i*k, i, i*j, i*j*k}\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([i, j, k], 2, 2)) == \\\n+            {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n+    assert set(itermonomials([i, j, k], 3, 2)) == \\\n+            {j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j,\n+                   j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i,\n+                   k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2,\n+                   k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i,\n+                   i*j*k, k*i\n+            }\n     assert set(itermonomials([i, j, k], [2, 2, 2])) == \\\n             {1, k, i**2*k**2, j*k, j**2, i, i*k, j*k**2, i*j**2*k**2,\n                     i**2*j, i**2*j**2, k**2, j**2*k, i*j**2*k,\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..8e7a99c 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,6 +50,18 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n+    # Additional test cases for infinite solutions detection\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))  # Univariate with two variables\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], (x, y)))  # Univariate with two variables\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x*y - 1], (x, y)))  # Multivariate polynomial with infinite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x, y], (x, y)))  # Solution is whole plane, infinite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y**2 - 1], x, y))  # Infinite solutions for y, no restrictions on x\n+\n \n def test_solve_biquadratic():\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..8966472 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n@@ -440,7 +442,13 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Used to give an error with evaluate(False)\n+    with evaluate(False):\n+        Point2D(Integer(1), Integer(2))\n+    # Check that it works properly without error\n+    pt = Point2D(Integer(1), Integer(2), evaluate=False)\n+    assert pt == Point2D(1, 2)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..4bcbc36 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,6 +347,24 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n+def test_cse_matrix_symbol_indexing():\n+    from sympy import MatrixSymbol, cse\n+    from sympy.codegen.rewriting import create_expand_pow_optimization\n+    from sympy.symbols import symbols\n+\n+    A = MatrixSymbol('A', 4, 4)\n+    B = MatrixSymbol('B', 4, 4)\n+\n+    # Expression with MatrixSymbol indexing\n+    expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0]\n+    cse_subs, cse_reduced = cse(expr)\n+    assert len(cse_subs) > 0  # Ensure replacements are identified\n+\n+    # Expression involving same indexed MatrixSymbols\n+    expr2 = A[0, 0] * A[0, 1] + A[0, 0] * A[0, 1] * A[1, 2]\n+    cse_subs2, cse_reduced2 = cse(expr2)\n+    assert len(cse_subs2) > 0  # Ensure subexpressions are factored out\n+\n def test_cse_MatrixExpr():\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..1ae7b3b 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,8 +38,13 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n-\n-def test_issue_18361():\n+def test_empty_array_initialization():\n+    # Test case for verifying that an empty Array can be initialized\n+    for ArrayType in array_types:\n+        empty_array = ArrayType([])\n+        assert isinstance(empty_array, ArrayType)\n+        assert empty_array.shape == (0,)\n+        assert list(empty_array) == []\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n     C = Array([(x + x**2)/(x*sin(y)**2 + x*cos(y)**2), 2*sin(x)*cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..c5df64c 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,25 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_lambdify_tuple_single_element():\n+    # Test that lambdify correctly generates code for tuples with a single element\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    code_single = inspect.getsource(f_single)\n+    assert 'return (1,)' in code_single\n+\n+def test_lambdify_tuple_multiple_elements():\n+    # Test tuples with multiple elements to ensure correct code generation\n+    f_multi = lambdify([], (1, 2))\n+    assert f_multi() == (1, 2)\n+    code_multi = inspect.getsource(f_multi)\n+    assert 'return (1, 2)' in code_multi\n+    \n+def test_lambdify_with_mpmath():\n+    # Example of lambdifying with mpmath module\n+    from sympy import sin\n+    f = lambdify(x, sin(x), 'mpmath')\n+    assert round(f(1), 10) == round(0.8414709848078965, 10)\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..2e12553 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..d0fa532 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -31,8 +31,30 @@ def test_tensor_product_dagger():\n     assert Dagger(TensorProduct(mat1, mat2)) == \\\n         TensorProduct(Dagger(mat1), Dagger(mat2))\n \n-\n-def test_tensor_product_abstract():\n+from sympy import symbols\n+from sympy.physics.quantum import TensorProduct as TP\n+\n+def test_tensor_product_resolved_issue():\n+    A, B, C, U, V = symbols('A B C U V', commutative=False)\n+    \n+    # Existing issue test cases to ensure the fix resolves them\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+    \n+    # Additional test cases for more coverage\n+    assert TP(3*U, V).expand(tensorproduct=True) == \\\n+        3 * TP(U, V)\n+    assert TP(U + V, 3*U + 4*V).expand(tensorproduct=True) == \\\n+        3 * TP(U, U) + 4 * TP(U, V) + 3 * TP(V, U) + 4 * TP(V, V)\n+    assert TP(U - V, U - V).expand(tensorproduct=True) == \\\n+        TP(U, U) - TP(U, V) - TP(V, U) + TP(V, V)\n+    \n+    # Test for zero-containing tensor products\n+    assert TP(U - U, U + V).expand(tensorproduct=True) == 0\n \n     assert TP(x*A, 2*B) == x*2*TP(A, B)\n     assert TP(A, B) != TP(B, A)\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..df67ef6 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -561,8 +562,29 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, velocity, acceleration, time, meter, second\n+    from sympy.physics.units.systems.si import SI\n+\n+    # Define quantities and set their dimensional and scale factors.\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    # Expression involving equivalent dimensions in addition\n+    expr1 = a1*t1 + v1\n \n-def test_prefixed_property():\n+    # Assert no ValueError is raised and correct scale factor and dimension is returned\n+    scale_factor, dimension = SI._collect_factor_and_dimension(expr1)\n+    assert dimension == velocity\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..bab3398 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, milli, W, V\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -15,7 +16,11 @@ def test_prefix_operations():\n     k = PREFIXES['k']\n     M = PREFIXES['M']\n \n-    dodeca = Prefix('dodeca', 'dd', 1, base=12)\n+    # Test cases for milli prefix issue\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+    assert milli * V == V / 1000\n+    assert V * milli == V / 1000\n \n     assert m * k == 1\n     assert k * k == M\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..bd8814a 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -1,5 +1,7 @@\n from operator import attrgetter\n \n+from .models import Parent, Child\n+\n from django.core.exceptions import FieldError, ValidationError\n from django.db import connection, models\n from django.test import SimpleTestCase, TestCase\n@@ -205,7 +207,24 @@ class ModelInheritanceTests(TestCase):\n         self.assertEqual(A.attr.called, (A, 'attr'))\n \n \n-class ModelInheritanceDataTests(TestCase):\n+class ModelInheritanceTests(TestCase):\n+    def test_inherited_ordering_pk_desc(self):\n+        # This test verifies that the ordering by '-pk' in parent model's Meta class is respected.\n+        p1 = Parent.objects.create(first_name='Joe', email='joe@email.com')\n+        p2 = Parent.objects.create(first_name='Jon', email='jon@email.com')\n+        c1 = Child.objects.create(first_name='Jill', email='jill@email.com')\n+        c2 = Child.objects.create(first_name='Jack', email='jack@email.com')\n+\n+        # Parent objects should be ordered by '-pk'\n+        qs_parent = Parent.objects.all()\n+        self.assertSequenceEqual(qs_parent, [p2, p1])\n+        \n+        # Child objects should be ordered by '-pk', inherited from Parent\n+        qs_child = Child.objects.all()\n+        self.assertSequenceEqual(qs_child, [c2, c1])\n+\n+        expected_order_by_sql = 'ORDER BY \"tests_model_inheritance_parent\".\"id\" DESC'\n+        self.assertIn(expected_order_by_sql, str(qs_child.query))\n     @classmethod\n     def setUpTestData(cls):\n         cls.restaurant = Restaurant.objects.create(\n",
  "django__django-13033": "",
  "django__django-13265": "",
  "django__django-14534": "",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..f832388 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,10 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.colors import LogNorm, Normalize\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -658,6 +662,32 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n+def test_colorbar_norm_update():\n+    # Prepare a test matrix\n+    z = 10**np.random.normal(1, 1, size=(50, 50))\n+    \n+    # Create plot\n+    fig, ax = plt.subplots()\n+    pcm = ax.imshow(z, cmap='gray')\n+    \n+    # Add a colorbar\n+    cbar = fig.colorbar(pcm, ax=ax)\n+    \n+    # Verify the initial colorbar scale is linear\n+    assert cbar.ax.yaxis.get_scale() == 'linear'\n+  \n+    # Change the norm of the mappable to LogNorm\n+    pcm.set_norm(LogNorm())\n+    \n+    # Redraw and assert the colorbar changes correctly to log scale\n+    fig.canvas.draw()\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+    \n+    # Verify the vmin and vmax are updated to match LogNorm's default behavior\n+    assert pcm.norm.vmin == z.min()\n+    assert pcm.norm.vmax == z.max()\n+\n+\n def test_colorbar_get_ticks_2():\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..8729cf8 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,45 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a custom transformer returning pandas output.\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.utils._set_output import set_config\n+    from numpy.testing import assert_array_equal\n+    \n+    # Create some sample data\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Define the custom transformer\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None, **kwargs):\n+            return self\n+\n+        def transform(self, X, y=None):\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame()\n+\n+        def get_feature_names_out(self, input_features=None):\n+            return [\"aggregated_value\"]\n+\n+    # Make a feature union and test it with pandas output\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    \n+    # Testing with default output configuration\n+    set_config(transform_output=\"pandas\")\n+    transformed = union.fit_transform(data)\n+    \n+    # Check if the output is as expected\n+    expected_index = pd.Index(index.date)  # Expected index should be the daily aggregation\n+    expected_values = pd.Series([240] * len(expected_index), name='aggregated_value')  # Sum of each day is 240\n+    expected_result = pd.DataFrame(expected_values, index=expected_index)\n+\n+    # Verify the result\n+    pd.testing.assert_frame_equal(transformed, expected_result)\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..983e6ec 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -131,9 +131,36 @@ def test_decorators(app):\n         '',\n     ]\n \n-\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_slots_attribute(app):\n+def test_annotation_only_in_superclass(app):\n+    # Setting options for autodoc\n+    options = {\"members\": None, \"inherited-members\": True}\n+    # Performing autodoc on the Derived class\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    \n+    # Asserting that the annotation-only member attr1 is documented\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'class', 'target.slots.Bar', options)\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..13b2c51 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,6 +358,19 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n+def test_issue_reduction_with_sin_cos_rational():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == cos(S(1)/50)\n+\n+    # Verifying that acos does not simplify further without a numerical value\n+    r = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    acos_result = acos(r)\n+    assert isinstance(acos_result.simplify(), acos)  # It should remain in acos form\n+\n \n def test_exptrigsimp():\n     def valid(a, b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..2e618de 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4863,7 +4863,26 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert upretty(expr) == ucode_str\n \n \n-def test_units():\n+def test_issue_alignment_in_sum():\n+    from sympy.abc import x\n+    from sympy import Sum, oo, pprint\n+\n+    # Expression to test the alignment\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    result = pprint(expr, use_unicode=True, wrap_line=False)\n+    expected_output = '''\n+  \u221e    \n+ ___   \n+ \u2572     \n+  \u2572   x\n+  \u2571   + 3\n+ \u2571     \n+ \u203e\u203e\u203e   \n+x = 1    \n+'''\n+\n+    # Assert that the pretty printing of expr aligns x and + 3 correctly\n+    assert result == expected_output\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "",
  "django__django-11797": "",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..de2f110 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,7 +546,27 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_sql_validity(self):\n+        from django.db import connection\n+        from models import App  # Import the App model if it's not imported already.\n+\n+        # Create some entries in the App model for testing.\n+        App.objects.create(name=\"Test App 1\")\n+        App.objects.create(name=\"Test App 2\")\n+\n+        # Create Subquery instance and check SQL.\n+        apps_subquery = Subquery(App.objects.all())\n+        compiler = apps_subquery.query.get_compiler(connection=connection)\n+        sql, _ = apps_subquery.as_sql(compiler, connection)\n+\n+        # Ensure Subquery generates valid SQL.\n+        self.assertTrue(sql.startswith('(SELECT '), \"Subquery SQL should start with '(SELECT '\")\n+        self.assertTrue(sql.endswith(')'), \"Subquery SQL should end with ')'\")\n+\n+        # Test after explicitly setting subquery = True\n+        apps_subquery.query.subquery = True\n+        sql_with_subquery, _ = apps_subquery.as_sql(compiler, connection)\n+        self.assertEqual(sql_with_subquery, sql, \"SQL should be same when subquery is set to True.\")\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..d7de8ca 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,7 +153,16 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_multilevel_filtered_relation_with_select_related(self):\n+        with self.assertNumQueries(3):\n+            pool_styles = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\")\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertTrue(pool_styles)\n+            for ps in pool_styles:\n+                self.assertEqual(ps.tournament_pool.tournament, ps.pool.tournament)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +173,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..cdcc4fd 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -12,6 +13,8 @@ import pytest\n from PIL import Image\n \n import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+import pickle\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..cec63a7 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1623,7 +1624,18 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_map_with_hue(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\",\"sepal_width\"], x_vars=[\"petal_length\",\"petal_width\"])\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            successful = True\n+        except Exception as e:\n+            successful = False\n+            print(f\"Test failed with exception: {e}\")\n+        \n+        assert successful, \"PairGrid mapping failed when using hue in map function.\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..1cee3f8 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -340,6 +340,25 @@ def test_excinfo_repr():\n \n \n def test_excinfo_str():\n+    # Ensure str(excinfo) outputs properly for exceptions caught using pytest.raises.\n+    import pytest\n+    \n+    # Normal exception catch case\n+    try:\n+        raise LookupError(\"A\\nB\\nC\")\n+    except LookupError as e:\n+        expected_message = str(e)\n+\n+    # pytest.raises context\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+\n+    # Test if str(excinfo.value) matches the expected_message\n+    assert str(excinfo.value) == expected_message\n+\n+    # Test if str(excinfo) doesn't match expected_message but has the default representation format\n+    assert str(excinfo) != expected_message\n+    assert \"<ExceptionInfo \" in str(excinfo)\n     excinfo = pytest.raises(ValueError, h)\n     s = str(excinfo)\n     assert s.startswith(__file__[:-9])  # pyc file and $py.class\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..0b0a8fd 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Test using the new one-character shortcut\n+        result_short = testdir.runpytest(\"-c\")\n+        result_short.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Test using the new one-character shortcut\n+        result_short = testdir.runpytest(\"-c\")\n+        result_short.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..916e129 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -83,6 +83,17 @@ def complex_func(arg1, arg2, arg3=None, *args, **kwargs):\n     pass\n \n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n def missing_attr(c,\n                  a,  # type: str\n                  b=None  # type: Optional[str]\n@@ -98,4 +109,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..610ffa6 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -84,7 +84,23 @@ def test_Identity():\n     assert In.inverse() == In\n     assert In.conjugate() == In\n \n-def test_Identity_doit():\n+def test_Identity_sum_elements():\n+    from sympy import MatrixSymbol, Identity, Sum, symbols\n+    \n+    n = symbols('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+\n+    # Test case: Validate that the total sum of all elements of the identity matrix is 'n'\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n, f\"Expected the total sum to be {n}, but got {total_sum}\"\n+\n+    # Additional test cases with specific values for n\n+    for specific_n in [1, 2, 3, 4, 5]:\n+        In = Identity(specific_n)\n+        total_sum = Sum(Sum(In[i, j], (i, 0, specific_n-1)), (j, 0, specific_n-1)).doit()\n+        expected_sum = specific_n\n+        assert total_sum == expected_sum, f\"For n={specific_n}, expected the sum to be {expected_sum}, but got {total_sum}\"\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": ""
}