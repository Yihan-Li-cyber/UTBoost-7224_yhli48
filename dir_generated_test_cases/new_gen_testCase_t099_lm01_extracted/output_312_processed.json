{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..99d078d 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,35 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+def test_issue_separable_matrix_nested_compound_model():\n+    # Import necessary functions\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    import numpy as np\n+\n+    # Create models as specified in the issue\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    \n+    # Case 1: Nested CompoundModel\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    expected_result = np.array([[ True,  True, False, False],\n+                                [ True,  True, False, False],\n+                                [False, False,  True,  True],\n+                                [False, False,  True,  True]])\n+    result = separability_matrix(nested_cm)\n+    assert_allclose(result, expected_result), \"Failed separability test for nested compound model.\"\n+    \n+    # Case 2: Normal CompoundModel for baseline comparison\n+    compound = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+    expected_baseline_result = np.array([[ True,  True, False, False],\n+                                         [ True,  True, False, False],\n+                                         [False, False,  True, False],\n+                                         [False, False, False,  True]])\n+    baseline_result = separability_matrix(compound)\n+    assert_allclose(baseline_result, expected_baseline_result), \"Baseline separability test failed.\"\n+\n+    # Verifying correct separability when the model is fixed\n+    assert not np.array_equal(result, baseline_result), \"Nested model separability matrix should differ from normal compound model.\"\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..d3789c5 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,55 @@\n+\n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing a table with header_rows in RST format\"\"\"\n+    tbl = QTable({\n+        'wave': [350, 950] * u.nm,\n+        'response': np.array([0.7, 1.2], dtype=np.float32),\n+        'ints': np.array([1, 2], dtype=np.int8)\n+    })\n+\n+    expected_lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"======= ======== ====\",\n+        \"  350.0      0.7    1\",\n+        \"  950.0      1.2    2\",\n+        \"======= ======== ====\"\n+    ]\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    assert out.getvalue().splitlines() == expected_lines\n+\n+def test_read_and_write_rst_round_trip_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified in RST format\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\"\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..c44b8d5 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,33 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+import numpy as np\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+from astropy.utils.exceptions import AstropyUserWarning\n \n-def test_read_example():\n+\n+@pytest.mark.parametrize(\"command_case\", [\"upper\", \"lower\"])\n+def test_mixed_case_qdp(tmp_path, command_case):\n+    command = \"READ SERR 1 2\" if command_case == \"upper\" else \"read serr 1 2\"\n+    example_qdp = f\"\"\"\n+    ! Example QDP file with {command_case} case command\n+    {command}\n+    ! Table description\n+    1 0.5 1 0.5\n+    2 0.3 2 0.3\n+    NO NO NO NO\n+    \"\"\"\n+    path = str(tmp_path / \"test_case.qdp\")\n+    \n+    with open(path, \"w\") as fp:\n+        fp.write(example_qdp)\n+        \n+    table = _read_table_qdp(path, names=[\"Col1\", \"Col2\", \"Col3\", \"Col4\"], table_id=0)\n+    \n+    assert len(table) == 2\n+    assert np.allclose(table['Col1'], [1, 2])\n+    assert np.allclose(table['Col2'], [0.5, 0.3])\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..9c3295a 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,6 +28,52 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # Check the combination of masks and no masks\n+    other_array = np.array([[1, 1, 1], [0, 0, 0], [1, 1, 1]])\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(other_array, mask=other_mask)\n+    combined_mask = np.bitwise_or(mask, other_mask)\n+\n+    # multiply two masked arrays\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        combined_mask,\n+    )\n+\n # Test with Data covers:\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..cef0eba 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -300,6 +300,22 @@ class TestTableFunctions(FitsTestCase):\n         hdul.close()\n         a.close()\n \n+    def test_column_exponents_replacement(self):\n+        # Test for correct handling of exponent separator replacement\n+        # within the 'D' formatted columns.\n+        r1 = np.array([11.0, 12.0])\n+        c2 = fits.Column(name='Dformat', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c2])\n+\n+        # Write to a temporary file\n+        hdu.writeto(self.temp('test_column_exponents_replacement.fits'), overwrite=True)\n+\n+        # Read back the file to ensure that 'D' replacements are verified\n+        with open(self.temp('test_column_exponents_replacement.fits')) as f:\n+            content = f.read()\n+            assert '1.1000000000000000D+01' in content\n+            assert '1.2000000000000000D+01' in content\n+\n     def test_endianness(self):\n         x = np.ndarray((1,), dtype=object)\n         channelsIn = np.array([3], dtype='uint8')\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..542c78b 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,14 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        If FILE_UPLOAD_PERMISSIONS is not set, the default value should be 0o644.\n+        \"\"\"\n+        # Reset to default settings where FILE_UPLOAD_PERMISSIONS is None\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..a1bb1d7 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,8 +237,25 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\n'\n+            'trailingnewline\\n',\n         ]\n+\n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = ['user\\n', 'name\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        invalid_usernames = ['user\\n', 'name\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +275,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..597cf98 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,7 +356,20 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n-    def test_non_string_content(self):\n+    def test_memoryview_content(self):\n+        # This tests the HttpResponse using a memoryview directly as parameter\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+        \n+        # Test with larger memoryview content\n+        large_content = b'a' * 1024  # 1KB of data\n+        r = HttpResponse(memoryview(large_content))\n+        self.assertEqual(r.content, large_content)\n+\n+        # Test setting memoryview content via property\n+        r = HttpResponse()\n+        r.content = memoryview(b'another view')\n+        self.assertEqual(r.content, b'another view')\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n         self.assertEqual(r.content, b'12345')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..0d70ed3 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,4 +1,5 @@\n-from math import ceil\n+\n+from django.db.models.deletion import Collector\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n@@ -464,7 +465,25 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_model_with_no_dependencies(self):\n+        class IndependentModel(models.Model):\n+            name = models.CharField(max_length=255)\n+\n+        # Create an instance of the model\n+        instance = IndependentModel.objects.create(name=\"Test\")\n+        # Verify the instance has a primary key before deletion\n+        self.assertIsNotNone(instance.pk)\n+        instance.delete()\n+        # Verify the instance primary key is set to None after deletion\n+        self.assertIsNone(instance.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..2d86ce5 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,8 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n+from django.db import IntegrityError\n+from django.test.utils import captured_stdout\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n@@ -140,6 +143,39 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Test that migration handles existing permissions correctly.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        permission, created = Permission.objects.get_or_create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            defaults={\"name\": \"Can add proxy\"}\n+        )\n+        # If permission already exists, there should be no IntegrityError\n+        self.assertFalse(created)\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_permission_integrity_error_handling(self):\n+        \"\"\"\n+        Simulate a duplicate IntegrityError during the migration process.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        with self.assertRaises(IntegrityError):\n+            Permission.objects.create(\n+                content_type=proxy_model_content_type,\n+                codename='add_proxy',\n+                name='Duplicate add proxy',\n+            )\n+        \n     def test_user_keeps_same_permissions_after_migrating_backward(self):\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..910f3b5 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -9,6 +9,7 @@ import time\n import types\n import weakref\n import zipfile\n+import sys\n from importlib import import_module\n from pathlib import Path\n from unittest import mock, skip, skipIf\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..7075094 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -152,6 +152,24 @@ class TestCommonRoots(SimpleTestCase):\n         results = autoreload.common_roots(paths)\n         self.assertCountEqual(results, [Path('/first/'), Path('/root/first/')])\n \n+    def test_empty_path(self):\n+        # Test if an empty path is handled gracefully.\n+        self.assertEqual(autoreload.iter_modules_and_files((), frozenset([\"\"])), frozenset())\n+\n+    def test_non_existent_file(self):\n+        # Test for a non-existent path to ensure the function handles it without crashing.\n+        self.assertEqual(\n+            autoreload.iter_modules_and_files((), frozenset([\"non_existent_file.py\"])),\n+            frozenset(),\n+        )\n+\n+    def test_special_characters_in_path(self):\n+        # Test paths with special characters to ensure they do not cause issues.\n+        special_char_path = \"special_char_!@#$%^&*()_+.py\"\n+        self.assertEqual(\n+            autoreload.iter_modules_and_files((), frozenset([special_char_path])),\n+            frozenset(),\n+        )\n \n class TestSysPathDirectories(SimpleTestCase):\n     def setUp(self):\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..2f15978 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -6,6 +6,29 @@ import sys\n import tempfile\n import threading\n from io import StringIO\n+from django.http import Http404\n+from django.urls import path\n+from django.test import override_settings\n+from django.urls.converters import StringConverter\n+\n+class CustomConverter(StringConverter):\n+    def to_python(self, value):\n+        if value == 'invalid':\n+            raise Http404(\"Custom converter failed\")\n+        return value\n+\n+@override_settings(ROOT_URLCONF=__name__, DEBUG=True)\n+class CustomPathConverterTests(SimpleTestCase):\n+    def setUp(self):\n+        self.client = self.client_class()\n+\n+    def test_converter_raises_404(self):\n+        # Test that when converter raises Http404, the response shows technical 404 message if DEBUG=True\n+        with mock.patch.dict('sys.modules', {'django.urls.converters.CustomConverter': CustomConverter}):\n+            for urlpattern in [path('test/<custom:value>/', lambda request, value: None)]:\n+                with mock.patch('django.urls.get_resolver', return_value=urlpattern):\n+                    response = self.client.get('/test/invalid/')\n+                    self.assertContains(response, 'Custom converter failed', status_code=404)\n from pathlib import Path\n from unittest import mock\n \n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..86f3157 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -334,8 +334,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    @unittest.skipUnless(connection.vendor == 'mysql',\n-                         \"Test valid only for MySQL\")\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n     def test_too_long_char_field_under_mysql(self):\n         from django.db.backends.mysql.validation import DatabaseValidation\n \n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..2946a84 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -253,6 +253,25 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n     def test_serialize_enums(self):\n+        # This test ensures that the enum serialization uses the enum name\n+        # rather than the value, which is essential for avoiding issues with\n+        # translations in default migrations.\n+        #\n+        # For example, if the current logic uses the actual value, texts using\n+        # translations would break if the translation changes the default value.\n+\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        # Prepare a field with a default value using Enum member\n+        field = models.CharField(default=TranslatedEnum.GOOD, max_length=128)\n+\n+        # Serialize the field into a migration\n+        serialized_string = MigrationWriter.serialize(field)[0]\n+\n+        # Confirm that the serialized default uses the enum name\n+        self.assertIn(\"default=tests.migrations.test_writer.TranslatedEnum['GOOD']\", serialized_string)\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..53521eb 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -311,8 +312,29 @@ class HttpDateProcessingTests(unittest.TestCase):\n     def test_http_date(self):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n-\n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mocked_current_year(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        current_year_2030 = datetime(2030, 1, 1)\n+        current_year_2070 = datetime(2070, 1, 1)\n+\n+        test_cases = [\n+            # Dates that should shift to be within 50 years from the current mocked date.\n+            (current_year_2030, 'Sunday, 01-Jan-80 00:00:00 GMT', datetime(1980, 1, 1, 0, 0, 0)),\n+            (current_year_2030, 'Tuesday, 01-Jan-30 00:00:00 GMT', datetime(2030, 1, 1, 0, 0, 0)),\n+            (current_year_2030, 'Tuesday, 31-Dec-79 23:59:59 GMT', datetime(2079, 12, 31, 23, 59, 59)),\n+            (current_year_2070, 'Tuesday, 01-Jan-50 00:00:00 GMT', datetime(2050, 1, 1, 0, 0, 0)),\n+            (current_year_2070, 'Monday, 31-Dec-49 23:59:59 GMT', datetime(2049, 12, 31, 23, 59, 59)),\n+        ]\n+\n+        for mocked_now, date_str, expected_datetime in test_cases:\n+            with self.subTest(date_str=date_str):\n+                mocked_datetime.utcnow.return_value = mocked_now\n+                parsed_timestamp = parse_http_date(date_str)\n+                parsed_date = datetime.utcfromtimestamp(parsed_timestamp)\n+                self.assertEqual(parsed_date, expected_datetime)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..b47ddd2 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -39,6 +39,37 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n+from django.test import TestCase\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_str(self):\n+        for test in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in test:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(test[member.name]), str(member.value))\n+\n \n class ChoicesTests(SimpleTestCase):\n     def test_integerchoices(self):\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..df47aed 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -186,8 +186,38 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsNone(WhizIterEmpty(c=None).c)         # Blank value\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n+from django.test import SimpleTestCase\n+from django.db import models\n \n-class GetChoicesTests(SimpleTestCase):\n+class OverriddenGetFieldDisplayTests(SimpleTestCase):\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+            \n+            def get_foo_bar_display(self):\n+                return 'something'\n+        \n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_overriding_FIELD_display_with_subclass(self):\n+        class BaseFooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+        \n+        class SubFooBar(BaseFooBar):\n+            def get_foo_bar_display(self):\n+                return 'overridden'\n+\n+        f = SubFooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'overridden')\n+        \n+    def test_default_get_FIELD_display_behavior(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+        \n+        f = FooBar(foo_bar=1)\n+        # Default behavior should give the choice display\n+        self.assertEqual(models.Model.get_foo_bar_display(f), 'foo')\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..9f7c3a6 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -12,6 +12,7 @@ urlpatterns = [\n     path('included_urls/', include('urlpatterns.included_urls')),\n     re_path(r'^regex/(?P<pk>[0-9]+)/$', views.empty_view, name='regex'),\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.empty_view, name='modules'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+]\n",
  "django__django-12284": "",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..e602c41 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,7 +76,33 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    def test_valid_base_language_fallback(self):\n+        with override_settings(\n+            USE_I18N=True,\n+            LANGUAGES=[\n+                ('de', 'German'),\n+                ('es', 'Spanish'),\n+            ],\n+            LANGUAGE_CODE='de-AT'\n+        ):\n+            # No error should be raised for 'de-AT' as 'de' is available.\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with override_settings(\n+            USE_I18N=True,\n+            LANGUAGES=[\n+                ('de', 'German'),\n+                ('es', 'Spanish'),\n+            ],\n+            LANGUAGE_CODE='fr-FR'\n+        ):\n+            # An error should be raised for 'fr-FR' as 'fr' is not available.\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(\n+                    'You have provided a value for the LANGUAGE_CODE setting that is not in the LANGUAGES setting.',\n+                    id='translation.E004'\n+                ),\n+            ])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..333885d 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -172,8 +172,30 @@ class UtilsTests(SimpleTestCase):\n \n         display_value = display_for_field(None, models.DecimalField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n-\n-        display_value = display_for_field(None, models.FloatField(), self.empty_value)\n+        from django.contrib.postgres.fields import JSONField\n+        import json\n+\n+        # Verifying that JSONField displays correctly when readonly\n+        def test_json_field_readonly_display(self):\n+            tests = [\n+                # Valid JSON that should be displayed identical\n+                ({'foo': 'bar'}, '{\"foo\": \"bar\"}'),\n+                (['a', 'b'], '[\"a\", \"b\"]'),\n+                ('foo', '\"foo\"'),\n+\n+                # Invalid JSON that should remain unchanged\n+                ({('foo', 'bar'): 'baz'}, \"{('foo', 'bar'): 'baz'}\"),\n+\n+                # Additional cases\n+                (123, '123'),  # int\n+                (None, self.empty_value),  # NoneType\n+            ]\n+            for value, expected_display in tests:\n+                with self.subTest(value=value):\n+                    self.assertEqual(\n+                        display_for_field(value, JSONField(), self.empty_value),\n+                        expected_display,\n+                    )\n         self.assertEqual(display_value, self.empty_value)\n \n     def test_number_formats_display_for_field(self):\n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..3498eca 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -18,7 +20,28 @@ def get_connection_copy():\n     return test_connection\n \n \n-class TestDbSignatureTests(SimpleTestCase):\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_foreign_key_constraints(self):\n+        # Test to ensure deserialization respects foreign key constraints.\n+        data = \"\"\"[\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=1)\n+        obj_ref = ObjectReference.objects.get(pk=1)\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n     def test_default_name(self):\n         # A test db name isn't set.\n         prod_name = 'hodor'\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..7d5ee4b 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -128,6 +128,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_ambiguous_relationship_more_than_two_foreign_keys(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through=\"AmbiguousRelationship\")\n+\n+        class AmbiguousRelationship(models.Model):\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+            third_person = models.ForeignKey(Person, models.CASCADE, related_name='third')\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.field', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_ambiguous_relationship_model(self):\n \n         class Person(models.Model):\n",
  "django__django-12700": "",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..a3aea71 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -45,16 +45,204 @@ class MigrationTestBase(TransactionTestCase):\n \n     def assertColumnNotExists(self, table, column, using='default'):\n         self.assertNotIn(column, [c.name for c in self.get_table_description(table, using=using)])\n-\n+from django.db import migrations, models, connection\n+from django.test import TransactionTestCase\n+from django.test.utils import skipUnlessDBFeature\n+from django.db.utils import ConnectionHandler\n+\n+class TestMigrations(TransactionTestCase):\n+    available_apps = [\"your_app\"]\n+\n+    def set_up_test_model(self, app_label, unique_together=False):\n+        \"\"\"Set up a basic model state with optional unique_together.\"\"\"\n+        project_state = self.clone_test_model(\n+            app_label,\n+            migrations.CreateModel(\n+                \"Pony\",\n+                [\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"pink\", models.IntegerField()),\n+                    (\"weight\", models.IntegerField()),\n+                ],\n+                options={\n+                    \"unique_together\": {(\"pink\", \"weight\")} if unique_together else set(),\n+                },\n+            ),\n+        )\n+        return project_state\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together_conflict(self):\n+        app_label = 'test_app'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def _get_column_allows_null(self, table, column, using):\n         return [c.null_ok for c in self.get_table_description(table, using=using) if c.name == column][0]\n-\n+from django.db import migrations, models, connection\n+from django.test import TransactionTestCase\n+from django.test.utils import skipUnlessDBFeature\n+from django.db.utils import ConnectionHandler\n+\n+class TestMigrations(TransactionTestCase):\n+    available_apps = [\"your_app\"]\n+\n+    def set_up_test_model(self, app_label, unique_together=False):\n+        \"\"\"Set up a basic model state with optional unique_together.\"\"\"\n+        project_state = self.clone_test_model(\n+            app_label,\n+            migrations.CreateModel(\n+                \"Pony\",\n+                [\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"pink\", models.IntegerField()),\n+                    (\"weight\", models.IntegerField()),\n+                ],\n+                options={\n+                    \"unique_together\": {(\"pink\", \"weight\")} if unique_together else set(),\n+                },\n+            ),\n+        )\n+        return project_state\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together_conflict(self):\n+        app_label = 'test_app'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertColumnNull(self, table, column, using='default'):\n         self.assertTrue(self._get_column_allows_null(table, column, using))\n-\n+from django.db import migrations, models, connection\n+from django.test import TransactionTestCase\n+from django.test.utils import skipUnlessDBFeature\n+from django.db.utils import ConnectionHandler\n+\n+class TestMigrations(TransactionTestCase):\n+    available_apps = [\"your_app\"]\n+\n+    def set_up_test_model(self, app_label, unique_together=False):\n+        \"\"\"Set up a basic model state with optional unique_together.\"\"\"\n+        project_state = self.clone_test_model(\n+            app_label,\n+            migrations.CreateModel(\n+                \"Pony\",\n+                [\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"pink\", models.IntegerField()),\n+                    (\"weight\", models.IntegerField()),\n+                ],\n+                options={\n+                    \"unique_together\": {(\"pink\", \"weight\")} if unique_together else set(),\n+                },\n+            ),\n+        )\n+        return project_state\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together_conflict(self):\n+        app_label = 'test_app'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertColumnNotNull(self, table, column, using='default'):\n         self.assertFalse(self._get_column_allows_null(table, column, using))\n-\n+from django.db import migrations, models, connection\n+from django.test import TransactionTestCase\n+from django.test.utils import skipUnlessDBFeature\n+from django.db.utils import ConnectionHandler\n+\n+class TestMigrations(TransactionTestCase):\n+    available_apps = [\"your_app\"]\n+\n+    def set_up_test_model(self, app_label, unique_together=False):\n+        \"\"\"Set up a basic model state with optional unique_together.\"\"\"\n+        project_state = self.clone_test_model(\n+            app_label,\n+            migrations.CreateModel(\n+                \"Pony\",\n+                [\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"pink\", models.IntegerField()),\n+                    (\"weight\", models.IntegerField()),\n+                ],\n+                options={\n+                    \"unique_together\": {(\"pink\", \"weight\")} if unique_together else set(),\n+                },\n+            ),\n+        )\n+        return project_state\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together_conflict(self):\n+        app_label = 'test_app'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertIndexExists(self, table, columns, value=True, using='default', index_type=None):\n         with connections[using].cursor() as cursor:\n             self.assertEqual(\n@@ -65,10 +253,104 @@ class MigrationTestBase(TransactionTestCase):\n                     if c['columns'] == list(columns) and (index_type is None or c['type'] == index_type)\n                 ),\n             )\n-\n+from django.db import migrations, models, connection\n+from django.test import TransactionTestCase\n+from django.test.utils import skipUnlessDBFeature\n+from django.db.utils import ConnectionHandler\n+\n+class TestMigrations(TransactionTestCase):\n+    available_apps = [\"your_app\"]\n+\n+    def set_up_test_model(self, app_label, unique_together=False):\n+        \"\"\"Set up a basic model state with optional unique_together.\"\"\"\n+        project_state = self.clone_test_model(\n+            app_label,\n+            migrations.CreateModel(\n+                \"Pony\",\n+                [\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"pink\", models.IntegerField()),\n+                    (\"weight\", models.IntegerField()),\n+                ],\n+                options={\n+                    \"unique_together\": {(\"pink\", \"weight\")} if unique_together else set(),\n+                },\n+            ),\n+        )\n+        return project_state\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together_conflict(self):\n+        app_label = 'test_app'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertIndexNotExists(self, table, columns):\n         return self.assertIndexExists(table, columns, False)\n-\n+from django.db import migrations, models, connection\n+from django.test import TransactionTestCase\n+from django.test.utils import skipUnlessDBFeature\n+from django.db.utils import ConnectionHandler\n+\n+class TestMigrations(TransactionTestCase):\n+    available_apps = [\"your_app\"]\n+\n+    def set_up_test_model(self, app_label, unique_together=False):\n+        \"\"\"Set up a basic model state with optional unique_together.\"\"\"\n+        project_state = self.clone_test_model(\n+            app_label,\n+            migrations.CreateModel(\n+                \"Pony\",\n+                [\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"pink\", models.IntegerField()),\n+                    (\"weight\", models.IntegerField()),\n+                ],\n+                options={\n+                    \"unique_together\": {(\"pink\", \"weight\")} if unique_together else set(),\n+                },\n+            ),\n+        )\n+        return project_state\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together_conflict(self):\n+        app_label = 'test_app'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertConstraintExists(self, table, name, value=True, using='default'):\n         with connections[using].cursor() as cursor:\n             constraints = connections[using].introspection.get_constraints(cursor, table).items()\n@@ -76,10 +358,104 @@ class MigrationTestBase(TransactionTestCase):\n                 value,\n                 any(c['check'] for n, c in constraints if n == name),\n             )\n-\n+from django.db import migrations, models, connection\n+from django.test import TransactionTestCase\n+from django.test.utils import skipUnlessDBFeature\n+from django.db.utils import ConnectionHandler\n+\n+class TestMigrations(TransactionTestCase):\n+    available_apps = [\"your_app\"]\n+\n+    def set_up_test_model(self, app_label, unique_together=False):\n+        \"\"\"Set up a basic model state with optional unique_together.\"\"\"\n+        project_state = self.clone_test_model(\n+            app_label,\n+            migrations.CreateModel(\n+                \"Pony\",\n+                [\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"pink\", models.IntegerField()),\n+                    (\"weight\", models.IntegerField()),\n+                ],\n+                options={\n+                    \"unique_together\": {(\"pink\", \"weight\")} if unique_together else set(),\n+                },\n+            ),\n+        )\n+        return project_state\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together_conflict(self):\n+        app_label = 'test_app'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertConstraintNotExists(self, table, name):\n         return self.assertConstraintExists(table, name, False)\n-\n+from django.db import migrations, models, connection\n+from django.test import TransactionTestCase\n+from django.test.utils import skipUnlessDBFeature\n+from django.db.utils import ConnectionHandler\n+\n+class TestMigrations(TransactionTestCase):\n+    available_apps = [\"your_app\"]\n+\n+    def set_up_test_model(self, app_label, unique_together=False):\n+        \"\"\"Set up a basic model state with optional unique_together.\"\"\"\n+        project_state = self.clone_test_model(\n+            app_label,\n+            migrations.CreateModel(\n+                \"Pony\",\n+                [\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"pink\", models.IntegerField()),\n+                    (\"weight\", models.IntegerField()),\n+                ],\n+                options={\n+                    \"unique_together\": {(\"pink\", \"weight\")} if unique_together else set(),\n+                },\n+            ),\n+        )\n+        return project_state\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together_conflict(self):\n+        app_label = 'test_app'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertFKExists(self, table, columns, to, value=True, using='default'):\n         with connections[using].cursor() as cursor:\n             self.assertEqual(\n@@ -90,7 +466,54 @@ class MigrationTestBase(TransactionTestCase):\n                     if c['columns'] == list(columns)\n                 ),\n             )\n-\n+from django.db import migrations, models, connection\n+from django.test import TransactionTestCase\n+from django.test.utils import skipUnlessDBFeature\n+from django.db.utils import ConnectionHandler\n+\n+class TestMigrations(TransactionTestCase):\n+    available_apps = [\"your_app\"]\n+\n+    def set_up_test_model(self, app_label, unique_together=False):\n+        \"\"\"Set up a basic model state with optional unique_together.\"\"\"\n+        project_state = self.clone_test_model(\n+            app_label,\n+            migrations.CreateModel(\n+                \"Pony\",\n+                [\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"pink\", models.IntegerField()),\n+                    (\"weight\", models.IntegerField()),\n+                ],\n+                options={\n+                    \"unique_together\": {(\"pink\", \"weight\")} if unique_together else set(),\n+                },\n+            ),\n+        )\n+        return project_state\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together_conflict(self):\n+        app_label = 'test_app'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertFKNotExists(self, table, columns, to):\n         return self.assertFKExists(table, columns, to, False)\n \n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..3f185d8 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,32 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_zero_delete_with_foreign_keys(self):\n+        \"\"\"\n+        Test that when no objects are deleted, the returned structure\n+        for models with foreign keys is consistent.\n+        \"\"\"\n+        r = R.objects.create()\n+        hidden_user_with_foreign_key = HiddenUser.objects.create(r=r)\n+        hidden_user_with_foreign_key.delete()  # delete the sole hidden user\n+\n+        # Attempt to delete again - expecting 0 deletions\n+        deleted_count, deleted_objs = HiddenUser.objects.filter(pk=hidden_user_with_foreign_key.pk).delete()\n+        self.assertEqual(deleted_count, 0)\n+        self.assertEqual(deleted_objs, {'delete.HiddenUser': 0})\n+\n+    def test_zero_delete_without_foreign_keys(self):\n+        \"\"\"\n+        Test that when no objects are deleted, the returned structure\n+        for models without foreign keys is consistent.\n+        \"\"\"\n+        block_library = BlockLibrary.objects.create()  # Assuming BlockLibrary is without foreign keys\n+        block_library.delete()  # delete the sole block library item\n+        \n+        # Attempt to delete again - expecting 0 deletions\n+        deleted_count, deleted_objs = BlockLibrary.objects.filter(pk=block_library.pk).delete()\n+        self.assertEqual(deleted_count, 0)\n+        self.assertEqual(deleted_objs, {'delete.BlockLibrary': 0})\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..cde495b 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -76,10 +76,65 @@ class ASGITest(SimpleTestCase):\n         response_body = await communicator.receive_output()\n         self.assertEqual(response_body['type'], 'http.response.body')\n         self.assertEqual(response_body['body'], test_file_contents)\n-        # Allow response.close() to finish.\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n         await communicator.wait()\n \n-    async def test_headers(self):\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        await communicator.wait()\n+\n+    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.staticfiles'})\n+    @override_settings(\n+        STATIC_URL='/static/',\n+        STATIC_ROOT=TEST_STATIC_ROOT,\n+        STATICFILES_DIRS=[TEST_STATIC_ROOT],\n+        STATICFILES_FINDERS=[\n+            'django.contrib.staticfiles.finders.FileSystemFinder',\n+        ],\n+    )\n+    async def test_static_file_async_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        await communicator.wait()\n+\n+    async def test_missing_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/not-found.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], b'')\n+        await communicator.wait()\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n             application,\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..428914e 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,15 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Test cases related to the issue with slugify method stripping dashes and underscores\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\\\t whitespace-in-value \\\\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore_in-value', False),\n+            ('__strip__underscore-value___', 'strip__underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..d1b9a07 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -2,6 +2,9 @@ from django.contrib.contenttypes.fields import (\n     GenericForeignKey, GenericRelation,\n )\n from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n from django.core.checks import Error\n from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n@@ -33,6 +36,58 @@ class AbstractInheritanceTests(SimpleTestCase):\n         self.assertEqual(AbstractDescendant._meta.get_field('name').max_length, 50)\n         self.assertEqual(DerivedChild._meta.get_field('name').max_length, 50)\n         self.assertEqual(DerivedGrandChild._meta.get_field('name').max_length, 50)\n+    def test_abstract_inherited_fields_not_equal(self):\n+        \"\"\"Test that fields inherited from abstract models are not considered equal.\"\"\"\n+\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        # Retrieve the fields from each of the concrete derived models.\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Assert that fields from different derived models are not equal.\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Ensure that their ordering is consistent and correct.\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+    \n+    def test_abstract_inherited_fields_not_in_set(self):\n+        \"\"\"Test that sets of inherited fields do not deduplicate similar-looking fields.\"\"\"\n+        \n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        # Retrieve the fields from each of the concrete derived models.\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Put the fields in a set and ensure they are not deduplicated.\n+        fields_set = {inherit1_model_field, inherit2_model_field}\n+        self.assertEqual(len(fields_set), 2)\n \n     def test_multiple_inheritance_cannot_shadow_inherited_field(self):\n         class ParentA(models.Model):\n@@ -347,4 +402,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..d4b96ff 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,4 +1,6 @@\n+\n import datetime\n+from collections import namedtuple\n import pickle\n import unittest\n import uuid\n@@ -884,6 +886,34 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_single_value(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_no_match(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=1, maximum=50),\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_range_lookup_namedtuple_reverse(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['maximum', 'minimum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(maximum=100, minimum=51),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..52a5133 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -43,10 +44,51 @@ class ShellCommandTestCase(SimpleTestCase):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import bpython interface.\"):\n             call_command('shell', interface='bpython')\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n \n     # [1] Patch select to prevent tests failing when when the test suite is run\n     # in parallel mode. The tests are run in a subprocess and the subprocess's\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..70ec7dc 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -595,6 +595,22 @@ class TestQuerying(TestCase):\n             [self.objs[4]],\n         )\n \n+    def test_isnull_key_transformed(self):\n+        # This test verifies that KeyTransform with __isnull=True does not incorrectly match JSON null.\n+        # We expect objects where the key 'j' doesn't exist, not those where 'j' exists but is null.\n+\n+        # Objects where 'j' key is absent should match (objs 0, 1, 2, 3, 5).\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+\n+        # Objects where 'j' key exists and is not null should match obj 4.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=False),\n+            [self.objs[4]],\n+        )\n+\n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n",
  "django__django-13768": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex ad86558..6392250 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -208,6 +208,12 @@ class Signal:\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n+                logger = logging.getLogger('django.dispatch')\n+                logger.error(\n+                    'Error calling %s in Signal.send_robust()',\n+                    receiver,\n+                    exc_info=err\n+                )\n                 responses.append((receiver, err))\n             else:\n                 responses.append((receiver, response))\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..1acced0 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -298,7 +298,14 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n-        # ModelMultipleChoiceField\n+        # Additional test for ModelChoiceField to check value in invalid_choice error message.\n+        f_invalid_value = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f_invalid_value.clean, 'invalid')\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': '%(value)s IS INVALID CHOICE',\n@@ -307,4 +314,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..db18038 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -12,6 +13,9 @@ from .models import (\n     ToFieldChild,\n )\n \n+from django.db import models, transaction\n+from .models import ParentStringPrimaryKey, ChildStringPrimaryKeyParent\n+\n \n class ManyToOneTests(TestCase):\n     @classmethod\n@@ -549,7 +553,35 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        # Initializing parent without specifying the primary key and setting it later\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_set_primary_key_before_assignment(self):\n+        # Initializing related unsaved instance with the primary key before assignment \n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='alice')\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            parent.save()\n+            child.save()\n+            self.assertTrue(ChildStringPrimaryKeyParent.objects.filter(parent=parent).exists())\n+\n+    def test_set_primary_key_after_assignment_fails(self):\n+        # Initializing parent and attempting to set primary key after assignment\n+        with self.assertRaises(IntegrityError):\n+            with transaction.atomic():\n+                parent = ParentStringPrimaryKey()\n+                child = ChildStringPrimaryKeyParent(parent=parent)\n+                parent.name = 'bob'\n+                parent.save()\n+                child.save()\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..aed51ef 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,6 @@\n+\n from django.db.models import F, Q\n+from unittest import TestCase\n from django.test import SimpleTestCase\n \n \n",
  "django__django-14017": "",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..58ed351 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1128,7 +1128,26 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n \n-    def test_resolver_match_on_request(self):\n+    from functools import partial\n+    from django.urls import resolve\n+    from urlpatterns_reverse import views\n+\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = partial(views.empty_view, template_name=template_name)\n+                expected_func_repr = f\"{views.empty_view.__module__}.{views.empty_view.__name__}\"\n+                self.assertEqual(\n+                    repr(resolve(f'/{name}/')),\n+                    f\"ResolverMatch(func={expected_func_repr}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\",\n+                )\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..af97a09 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,5 +1,11 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n+class MyBigAutoField(models.BigAutoField):\n+    pass\n+\n+class MySmallAutoField(models.SmallAutoField):\n+    pass\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n \n",
  "django__django-14382": "",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..3634a3c 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -14,6 +14,7 @@ from django.core import mail\n from django.core.exceptions import ValidationError\n from django.core.mail import EmailMultiAlternatives\n from django.forms.fields import CharField, Field, IntegerField\n+from django.forms import forms\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n@@ -1020,7 +1021,20 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_hash_widget_label(self):\n+        \"\"\"\n+        Test that ReadOnlyPasswordHashWidget label does not contain\n+        a 'for' attribute because there is no labelable element.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        # Verify that the widget's id_for_label method returns None.\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        # Verify the generated label_tag does not include a 'for' attribute.\n+        expected_label = '<label>Hash field:</label>'\n+        self.assertEqual(bound_field.label_tag(), expected_label)\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..fa532a7 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,9 +655,34 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_serialize_type_model(self):\n+        # Test serialization of the models.Model type to ensure it includes the necessary import\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set()),\n+        )\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Test case for verifying that migration serialization does not miss import statements.\n+        \"\"\"\n+        MyField = models.TextField(primary_key=True)\n+        class MyMixin:\n+            pass\n+        class MyModel(MyMixin, models.Model):\n+            name = MyField\n+\n+        # Simulate what Django would generate for a migration\n+        writer = MigrationWriter(MyModel)\n+        serialized = writer.serialize()[0]\n+\n+        # Check that the serialization includes the correct import for models\n+        self.assertIn('from django.db import models', serialized)\n+\n     def test_simple_migration(self):\n         \"\"\"\n         Tests serializing a simple migration.\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..b7d0df7 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,9 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('<ul class=\"errorlist nonform\">', str(formset.non_form_errors()))\n+        self.assertIn('<li>Please submit at most 1 form.</li>', str(formset.non_form_errors()))\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +360,9 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('<ul class=\"errorlist nonform\">', str(formset.non_form_errors()))\n+        self.assertIn('<li>Please submit at least 3 forms.</li>', str(formset.non_form_errors()))\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +986,9 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('<ul class=\"errorlist nonform\">', str(formset.non_form_errors()))\n+        self.assertIn('<li>You may only specify a drink once.</li>', str(formset.non_form_errors()))\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "",
  "django__django-14752": "",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..5093408 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5082,9 +5082,41 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n \n     def test_user_password_change_limited_queryset(self):\n         su = User.objects.filter(is_superuser=True)[0]\n+        # Test the admin2 site's password change not found case\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test readonly foreign key links for the provided admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+\n+        url = reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        response = self.client.get(url)\n+        self.assertContains(response, f'href=\"/{admin_site}/admin_views/chapter/{chapter.pk}/change/\"')\n+        self.assertContains(response, f'href=\"/{admin_site}/admin_views/language/{language.pk}/change/\"')\n+        self.assertContains(response, f'href=\"/{admin_site}/auth/user/{self.superuser.pk}/change/\"')\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"Test readonly foreign key links for the default admin site.\"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"Test readonly foreign key links for the custom admin site.\"\"\"\n+        self._test_readonly_foreignkey_links('custom_admin')\n+        self.assertEqual(response.status_code, 404)\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..494eb26 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -346,7 +347,20 @@ class ModelChoiceFieldTests(TestCase):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n \n-    def test_queryset_manager(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        # Test that value_1 can be hashed\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        # Test that different ModelChoiceIteratorValue instances have different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_iterator_value_hashability(self):\n+        value = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        try:\n+            hash_value = hash(value)\n+        except TypeError:\n+            self.fail(f\"ModelChoiceIteratorValue raised TypeError when hashing: {value}\")\n         f = forms.ModelChoiceField(Category.objects)\n         self.assertEqual(len(f.choices), 4)\n         self.assertEqual(list(f.choices), [\n",
  "django__django-14999": "",
  "django__django-15061": "",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..1d69737 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -91,6 +91,10 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://inv-.-alid.com',\n             '[a',\n             'http://[a',\n+            # URLField should raise ValidationError instead of ValueError.\n+            '////]@N.AN',\n+            '#@A.bO',\n+            \n             # Non-string.\n             23,\n             # Hangs \"forever\" before fixing a catastrophic backtracking,\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..d8052db 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -197,7 +197,26 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n-    def test_empty_expression_annotation(self):\n+    def test_expression_with_not_empty_list(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(Q(pk__in=[self.b1.pk, self.b2.pk]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(any(book.selected for book in books if book.pk in (self.b1.pk, self.b2.pk)))\n+\n+    def test_not_expression_with_empty_list(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_not_expression_with_not_empty_list(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[self.b1.pk, self.b2.pk]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books if book.pk not in (self.b1.pk, self.b2.pk)))\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n         )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..37d19a7 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -8,6 +9,7 @@ from django.contrib.messages.storage.cookie import (\n     CookieStorage, MessageDecoder, MessageEncoder,\n )\n from django.test import SimpleTestCase, override_settings\n+from django.utils.safestring import SafeData, mark_safe\n from django.utils.crypto import get_random_string\n from django.utils.safestring import SafeData, mark_safe\n \n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..10fe676 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -2,6 +2,7 @@ from pathlib import Path\n from unittest import mock\n \n from django.template import autoreload\n+from pathlib import Path\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n \n@@ -35,7 +36,16 @@ class TemplateReloadTests(SimpleTestCase):\n         mock_reset.assert_called_once()\n \n     @mock.patch('django.template.autoreload.reset_loaders')\n-    def test_non_template_changed(self, mock_reset):\n+    def test_non_template_changed_in_base_dir(self, mock_reset):\n+        # Test when changes are made in the base directory, server should restart\n+        base_dir_path = Path(__file__).parent.parent  # Assuming this is the base directory\n+        self.assertTrue(autoreload.template_changed(None, base_dir_path))\n+        mock_reset.assert_not_called()\n+\n+        # Add a file within the base directory to simulate modification\n+        test_file_path = base_dir_path / 'test_file.py'\n+        self.assertFalse(autoreload.template_changed(None, test_file_path))\n+        mock_reset.assert_called_once()\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n         mock_reset.assert_not_called()\n \n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..f8a4b85 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -183,7 +184,41 @@ class StaticHelperTest(StaticTests):\n         self.assertEqual(static(\"//example.org\"), [])\n \n \n+from django.utils.http import parse_http_date_safe\n+\n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        An empty string for the If-Modified-Since header should not raise an exception\n+        and should return True to indicate the resource was modified.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_none(self):\n+        \"\"\"\n+        A None value for the If-Modified-Since header should return True.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=None, mtime=1))\n+\n+    def test_was_modified_since_valid_date(self):\n+        \"\"\"\n+        A valid date in the past should return False as the resource wasn't modified since.\n+        \"\"\"\n+        past_time = http_date(1343416141)\n+        self.assertFalse(was_modified_since(header=past_time, mtime=2000000000))\n+\n+    def test_was_modified_since_future_date(self):\n+        \"\"\"\n+        A valid date in the future should return True as the resource was modified.\n+        \"\"\"\n+        future_time = http_date(2000000000)\n+        self.assertTrue(was_modified_since(header=future_time, mtime=1343416141))\n+\n+    def test_was_modified_since_invalid_date_format(self):\n+        \"\"\"\n+        An invalid date format should return True, assuming resource was modified.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"invalid-date\", mtime=1343416141))\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..e769790 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -8,6 +9,7 @@ from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management.utils import (\n     find_command,\n     get_random_secret_key,\n@@ -411,7 +413,34 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_formatter_is_used(self):\n+        \"\"\"\n+        Test that the ArgumentDefaultsHelpFormatter is used as the parser's formatter class.\n+        \"\"\"\n+        epilog = \"Example usage:\\n\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter,\n+        )\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+\n+    def test_formatter_help_output(self):\n+        \"\"\"\n+        Test that the command's help output formats the epilog correctly.\n+        \"\"\"\n+        epilog = \"Example usage:\\n\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter,\n+        )\n+        with mock.patch('sys.stdout', new_callable=StringIO) as mock_stdout:\n+            parser.print_help()\n+            help_output = mock_stdout.getvalue()\n+        self.assertIn(epilog, help_output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..190100b 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,11 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -217,7 +220,35 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder_with_attributes(self):\n+        # Custom encoder that formats a datetime object\n+        class DateTimeEncoder(DjangoJSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.strftime('%Y-%m-%d %H:%M:%S')\n+                return super().default(obj)\n+\n+        now = datetime.now()\n+        expected_json = json.dumps({'now': now.strftime('%Y-%m-%d %H:%M:%S')}).translate(_json_script_escapes)\n+        self.assertHTMLEqual(\n+            json_script({'now': now}, encoder=DateTimeEncoder),\n+            f'<script type=\"application/json\">{expected_json}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_error_handling(self):\n+        class FaultyEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                raise ValueError(\"This is an encoding error.\")\n+\n+        with self.assertRaises(ValueError):\n+            json_script({}, encoder=FaultyEncoder)\n+\n+    def test_json_script_no_custom_encoder(self):\n+        # Test with default encoder to ensure backwards compatibility\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}, encoder=DjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..8c161f1 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -129,6 +129,45 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 },\n             },\n         }\n+    def test_no_duplicate_error_for_distinct_modules_in_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags_1\", \"unique_app_1.templatetags.unique_tags\"\n+                ),\n+                self.get_settings(\n+                    \"unique_tags_2\", \"unique_app_2.templatetags.unique_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [],\n+            )\n+\n+    def test_duplicate_error_for_same_library_name_in_different_apps(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"duplicate_tags\", \"dup_app_1.templatetags.duplicate_tags\"\n+                ),\n+                self.get_settings(\n+                    \"duplicate_tags\", \"dup_app_2.templatetags.duplicate_tags\"\n+                ),\n+            ]\n+        ):\n+            duplicate_error = Error(\n+                E003.msg.format(\n+                    \"'duplicate_tags'\",\n+                    \"'check_framework.template_test_apps.dup_app_1.templatetags.duplicate_tags', \"\n+                    \"'check_framework.template_test_apps.dup_app_2.templatetags.duplicate_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [duplicate_error],\n+            )\n \n     @override_settings(\n         INSTALLED_APPS=[\n@@ -157,6 +196,45 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 check_for_template_tags_with_the_same_name(None),\n                 [self.error_same_tags],\n             )\n+    def test_no_duplicate_error_for_distinct_modules_in_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags_1\", \"unique_app_1.templatetags.unique_tags\"\n+                ),\n+                self.get_settings(\n+                    \"unique_tags_2\", \"unique_app_2.templatetags.unique_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [],\n+            )\n+\n+    def test_duplicate_error_for_same_library_name_in_different_apps(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"duplicate_tags\", \"dup_app_1.templatetags.duplicate_tags\"\n+                ),\n+                self.get_settings(\n+                    \"duplicate_tags\", \"dup_app_2.templatetags.duplicate_tags\"\n+                ),\n+            ]\n+        ):\n+            duplicate_error = Error(\n+                E003.msg.format(\n+                    \"'duplicate_tags'\",\n+                    \"'check_framework.template_test_apps.dup_app_1.templatetags.duplicate_tags', \"\n+                    \"'check_framework.template_test_apps.dup_app_2.templatetags.duplicate_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [duplicate_error],\n+            )\n \n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n@@ -198,6 +276,45 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             ]\n         ):\n             self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+    def test_no_duplicate_error_for_distinct_modules_in_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags_1\", \"unique_app_1.templatetags.unique_tags\"\n+                ),\n+                self.get_settings(\n+                    \"unique_tags_2\", \"unique_app_2.templatetags.unique_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [],\n+            )\n+\n+    def test_duplicate_error_for_same_library_name_in_different_apps(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"duplicate_tags\", \"dup_app_1.templatetags.duplicate_tags\"\n+                ),\n+                self.get_settings(\n+                    \"duplicate_tags\", \"dup_app_2.templatetags.duplicate_tags\"\n+                ),\n+            ]\n+        ):\n+            duplicate_error = Error(\n+                E003.msg.format(\n+                    \"'duplicate_tags'\",\n+                    \"'check_framework.template_test_apps.dup_app_1.templatetags.duplicate_tags', \"\n+                    \"'check_framework.template_test_apps.dup_app_2.templatetags.duplicate_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [duplicate_error],\n+            )\n \n     @override_settings(\n         INSTALLED_APPS=[\n@@ -206,4 +323,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..89fca85 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,10 +395,26 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n-    def test_eq(self):\n+    def test_select_related_only_on_proxy_models(self):\n+        custom_model_instance = ProxyCustomModel.objects.create(name=\"Example\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom_model_instance)\n+\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+\n+        # Assert no crash or exceptions and correct retrieval\n+        retrieved_instance = qs.get(id=another_model_instance.id)\n+        self.assertEqual(retrieved_instance.custom.name, \"Example\")\n+\n+        # Clean up\n+        another_model_instance.delete()\n+        custom_model_instance.delete()\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from django.core.management import call_command\n+from .models import ProxyCustomModel, AnotherModel, MyPerson, Person, ProxyImprovement\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..28aa6f5 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,6 +151,12 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_correct_parameter_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n@@ -183,4 +189,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..169c9d9 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,12 +1901,25 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n-\n-        with isolate_lru_cache(get_default_renderer), self.settings(\n-            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n-        ), self.assertRaisesMessage(\n-            RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n-        ):\n-            ChoiceFormSet = formset_factory(Choice)\n-            formset = ChoiceFormSet()\n-            str(formset)\n+        from django.utils.deprecation import RemovedInDjango50Warning\n+        from django.test import TestCase, override_settings\n+        from django.forms import formset_factory, BaseFormSet\n+        from django.forms.renderers import get_default_renderer\n+        from django.test.utils import isolate_lru_cache\n+\n+        class ManagementFormDeprecationTest(TestCase):\n+\n+            def test_no_management_form_warning(self):\n+                \"\"\"\n+                Test that no deprecation warning is raised for management forms\n+                rendered with the new div template.\n+                \"\"\"\n+                with isolate_lru_cache(get_default_renderer), self.settings(\n+                    FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+                ):\n+                    ChoiceFormSet = formset_factory(\n+                        Choice, formset=BaseFormSet, extra=0\n+                    )\n+                    formset = ChoiceFormSet()\n+                    # This should not raise a deprecation warning\n+                    management_form_str = str(formset.management_form)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..055a395 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -179,6 +179,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n \n+    def test_empty_permitted_ignored_empty_form_true(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        # The empty_form's empty_permitted should still be True by default\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_ignored_empty_form_false(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        # The empty_form's empty_permitted should still be True by default\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n     def test_formset_validation(self):\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..9f461a6 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,13 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_none_input(self):\n+        # Test formatting None input to see if it returns 'None'\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_empty_string_input(self):\n+        # Test formatting an empty string to see if it returns an empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..f0c0f91 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -892,7 +893,28 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    from urllib.parse import urljoin\n+    from django.urls import reverse\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..e88f016 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,8 +507,34 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n-\n-# RemovedInDjango50Warning\n+from django.test import TestCase\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path, reverse\n+from datetime import datetime\n+\n+class TestCallableLastmodNoItems(TestCase):\n+    def setUp(self):\n+        class CallableLastmodNoItemsSitemap(Sitemap):\n+            location = \"/location/\"\n+    \n+            def items(self):\n+                return []\n+    \n+            def lastmod(self, obj):\n+                return obj.lastmod\n+\n+        self.sitemaps = {\"callable-lastmod\": CallableLastmodNoItemsSitemap}\n+\n+    def test_callable_lastmod_no_items(self):\n+        response = self.client.get(reverse('django.contrib.sitemaps.views.index', kwargs={'sitemaps': self.sitemaps}))\n+        self.assertEqual(response.status_code, 200)\n+        self.assertNotIn(\"Last-Modified\", response.headers)\n+        expected_content = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">'\n+            '\\n  <sitemap><loc>http://testserver/location/</loc></sitemap>\\n</sitemapindex>'\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..a195eab 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,9 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock\n+import threading\n import io\n import os\n import pickle\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..06c5c6f 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -5,7 +6,8 @@ from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n-from django.test import RequestFactory, TestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n@@ -16,7 +18,36 @@ from .tests import AdminViewBasicTestCase\n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n     request_factory = RequestFactory()\n \n-    def test_submit_row(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # Test that 'show_save_as_new' is False if the user doesn't have add permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Test that 'show_save_as_new' is True if the user has both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         \"\"\"\n         submit_row template tag should pass whole context.\n         \"\"\"\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..3fc6ebc 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,39 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def test_alter_alter_field_collapse(self):\n+        \"\"\"\n+        Multiple AlterField operations should collapse into the last one.\n+        \"\"\"\n+        operations = [\n+            AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, \"books\")\n+        self.assertEqual(len(optimized_operations), 1)\n+        self.assertIsInstance(optimized_operations[0], AlterField)\n+        self.assertEqual(optimized_operations[0].field.max_length, 128)\n+        self.assertEqual(optimized_operations[0].field.help_text, \"help\")\n+        self.assertEqual(optimized_operations[0].field.default, None)\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..17479b0 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -5,7 +6,16 @@ from django.utils.safestring import mark_safe\n from ..utils import setup\n \n \n+from django.template.defaultfilters import escape\n+\n class JoinTests(SimpleTestCase):\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off\", {\"some_list\": some_list, \"some_var\": some_var})\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n     @setup({\"join01\": '{{ a|join:\", \" }}'})\n     def test_join01(self):\n         output = self.engine.render_to_string(\"join01\", {\"a\": [\"alpha\", \"beta & me\"]})\n@@ -78,4 +88,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..c215fd0 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -561,6 +561,42 @@ class BulkCreateTests(TestCase):\n                 unique_fields=[\"relatedmodel\"],\n             )\n         # Many-to-many relationship.\n+\n+    @skipUnlessDBFeature(\"supports_update_conflicts\", \"can_return_rows_from_bulk_insert\")\n+    def test_bulk_create_return_ids_on_update_conflicts(self):\n+        # Initial data setup.\n+        UpsertConflict.objects.bulk_create(\n+            [\n+                UpsertConflict(number=1, rank=1, name=\"John\"),\n+                UpsertConflict(number=2, rank=2, name=\"Mary\"),\n+            ]\n+        )\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=3, name=\"Updated John\"),\n+            UpsertConflict(number=2, rank=4, name=\"Updated Mary\"),\n+        ]\n+        # Perform bulk_create with update conflicts.\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=[\"number\"],\n+        )\n+        # Check that all results have a non-None pk after the operation.\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        # Check the count remains 2 since they are updates.\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+        # Further verification.\n+        self.assertCountEqual(\n+            UpsertConflict.objects.values(\"number\", \"rank\", \"name\"),\n+            [\n+                {\"number\": 1, \"rank\": 3, \"name\": \"Updated John\"},\n+                {\"number\": 2, \"rank\": 4, \"name\": \"Updated Mary\"},\n+            ],\n+        )\n         with self.assertRaisesMessage(ValueError, msg):\n             RelatedModel.objects.bulk_create(\n                 [RelatedModel(country=self.data[0])],\n@@ -816,4 +852,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..50657bf 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1083,6 +1083,28 @@ def test_slider_reset():\n     slider = widgets.Slider(ax=ax, label='', valmin=0, valmax=1, valinit=.5)\n     slider.set_val(0.75)\n     slider.reset()\n+\n+    # Test for issue: cannot give init value for RangeSlider widget\n+    fig, ax = plt.subplots()\n+\n+    # Attempt to initialize RangeSlider with specific initial values\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Test Slider\", valmin=0.0, valmax=1.0,\n+        valinit=[0.2, 0.8]\n+    )\n+\n+    # Verify that the initial values are set correctly\n+    assert_allclose(slider.val, (0.2, 0.8))\n+\n+    # Also test edge cases\n+    slider.set_val((0.0, 1.0))\n+    assert_allclose(slider.val, (0.0, 1.0))\n+\n+    slider.set_val((0.5, 0.5))\n+    assert_allclose(slider.val, (0.5, 0.5))\n+\n+    slider.set_val((1.0, 0.0))\n+    assert_allclose(slider.val, (0.0, 1.0))\n     assert slider.val == 0.5\n \n \n@@ -1117,6 +1139,28 @@ def test_range_slider(orientation):\n     assert_allclose(slider.val, (0, 1))\n \n     slider.reset()\n+\n+    # Test for issue: cannot give init value for RangeSlider widget\n+    fig, ax = plt.subplots()\n+\n+    # Attempt to initialize RangeSlider with specific initial values\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Test Slider\", valmin=0.0, valmax=1.0,\n+        valinit=[0.2, 0.8]\n+    )\n+\n+    # Verify that the initial values are set correctly\n+    assert_allclose(slider.val, (0.2, 0.8))\n+\n+    # Also test edge cases\n+    slider.set_val((0.0, 1.0))\n+    assert_allclose(slider.val, (0.0, 1.0))\n+\n+    slider.set_val((0.5, 0.5))\n+    assert_allclose(slider.val, (0.5, 0.5))\n+\n+    slider.set_val((1.0, 0.0))\n+    assert_allclose(slider.val, (0.0, 1.0))\n     assert_allclose(slider.val, [0.1, 0.34])\n \n \n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..72b1354 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -495,8 +495,42 @@ def test_keymaps():\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n-\n-def test_rcparams_reset_after_fail():\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib._pylab_helpers import Gcf\n+\n+\n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+\n+def test_get_backend_does_not_clear_figures():\n+    # Test that calling get_backend does not clear figures from Gcf when they\n+    # are created within rc_context\n+\n+    # Uncomment the following lines to see if they affect the issue\n+    # fig1 = plt.figure()  # another figure created without rc_context\n+    # plt.ion()            # set interactive mode on\n+    \n+    with rc_context():\n+        fig2 = plt.figure()\n+        manager_id_before = list(Gcf.figs.keys())\n+    \n+    # Capture state of figures\n+    before_state = f'{id(Gcf)} {Gcf.figs!r}'\n+    \n+    # Call get_backend which was previously causing the issue\n+    get_backend()\n+    \n+    # Capture the new state of figures\n+    after_state = f'{id(Gcf)} {Gcf.figs!r}'\n+    \n+    # Test to ensure that the Gcf state has not changed\n+    assert before_state == after_state, f\"Figures were cleared!\\n{before_state}\\n{after_state}\"\n+    assert manager_id_before == list(Gcf.figs.keys()), \"Figure managers changed!\"\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..be82514 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,41 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+import pytest\n+import matplotlib.pyplot as plt\n+import matplotlib\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable_within_init(draggable):\n+    fig, ax = plt.subplots()\n+    line, = ax.plot([1, 2, 3], label='test_line')\n+    # Pass in the draggable parameter when creating the legend.\n+    leg = ax.legend(handles=[line], draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n+def test_legend_draggable_post_creation():\n+    fig, ax = plt.subplots()\n+    line, = ax.plot([1, 2, 3], label='test_line')\n+    leg = ax.legend(handles=[line])\n+    assert not leg.get_draggable()  # Default should be False\n+\n+    # Now make it draggable\n+    leg.set_draggable(True)\n+    assert leg.get_draggable() is True\n+\n+    # And then non-draggable\n+    leg.set_draggable(False)\n+    assert not leg.get_draggable()\n+\n+def test_legend_draggable_isolated():\n+    fig, ax = plt.subplots()\n+    line, = ax.plot([1, 2, 3], label='test_line')\n+    leg1 = ax.legend(handles=[line], draggable=True)\n+    assert leg1.get_draggable() is True\n+\n+    leg2 = ax.legend(handles=[line], draggable=False)\n+    assert leg2.get_draggable() is False\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..368a82f 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -255,6 +255,16 @@ def test_linedash():\n \n     assert buf.tell() > 0\n \n+import io\n+from matplotlib.figure import Figure\n+\n+def test_empty_line():\n+    # Smoke-test for gh#23954\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n \n def test_no_duplicate_definition():\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..8f418d3 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,25 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+\n+def test_constrained_layout_warning_suppressed():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import warnings\n+\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        \n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+        ax[0].plot(a, b)\n+        ax[1].plot(a, c)\n+        plt.subplots_adjust(wspace=0)\n+\n+        assert all(issubclass(warning.category, UserWarning) for warning in w) == False, \\\n+            \"Unexpected UserWarning present when constrained_layout is False\"\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..8c53af9 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5731,8 +5731,38 @@ def test_set_get_ticklabels():\n     ax[1].set_xticklabels(ax[0].get_xticklabels())\n     ax[1].set_yticklabels(ax[0].get_yticklabels())\n \n+import pytest\n+import matplotlib.pyplot as plt\n \n-@check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_with_valid_labels_and_kwargs():\n+    \"\"\"\n+    Test that when labels are provided along with valid kwargs, \n+    the method executes without errors.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1, 2]\n+    labels = ['a', 'b', 'c']\n+    ax.xaxis.set_ticks(ticks, labels=labels, color='red')\n+    # Check if the method runs without exception for valid kwargs with labels\n+\n+def test_set_ticks_without_kwargs():\n+    \"\"\"\n+    Test that when no kwargs are provided, the method executes without errors.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1, 2]\n+    ax.xaxis.set_ticks(ticks)\n+    # Check if the method runs without exception when no kwargs are passed\n+\n+def test_set_ticks_with_invalid_kwargs_and_labels():\n+    \"\"\"\n+    Test that an error is raised when invalid kwargs are provided along with labels.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1, 2]\n+    labels = ['a', 'b', 'c']\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, labels=labels, invalid_param=42)\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..bd271e0 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -105,8 +106,27 @@ def test_complete(fig_test, fig_ref):\n \n     plt.close(loaded)\n \n+import pickletools\n+\n+def test_pickle_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    \n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    loaded = pickle.loads(pkl)\n+    loaded.canvas.draw()\n \n-def _pickle_load_subprocess():\n+    fig.clf()\n+    plt.close(fig)\n     import os\n     import pickle\n \n",
  "matplotlib__matplotlib-25332": "",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..ab37023 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,65 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+def test_mplcursor_with_matplotlib_3_7_1():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors as mpl\n+    from matplotlib.testing.decorators import cleanup\n+\n+    @cleanup\n+    def run_test():\n+        # Generate sample data\n+        x = np.arange(1, 11)\n+        y1 = x\n+\n+        # Create a scatter plot\n+        fig, ax = plt.subplots()\n+        ax.scatter(x, y1)\n+\n+        # Activate mplcursors\n+        cursor = mpl.cursor()\n+\n+        # Simulate clicking on a data point\n+        fig.canvas.draw_idle()\n+        fake_event = type('test', (object,), {'xdata': 5, 'ydata': 5, 'inaxes': ax})()\n+        cursor._update(fake_event)\n+\n+        # Validate whether the error occurs\n+        assert cursor, \"mplcursors should be initialized without errors\"\n+\n+    run_test()\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_mplcursor_with_matplotlib_3_7_1():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors as mpl\n+    from matplotlib.testing.decorators import cleanup\n+\n+    @cleanup\n+    def run_test():\n+        # Generate sample data\n+        x = np.arange(1, 11)\n+        y1 = x\n+\n+        # Create a scatter plot\n+        fig, ax = plt.subplots()\n+        ax.scatter(x, y1)\n+\n+        # Activate mplcursors\n+        cursor = mpl.cursor()\n+\n+        # Simulate clicking on a data point\n+        fig.canvas.draw_idle()\n+        fake_event = type('test', (object,), {'xdata': 5, 'ydata': 5, 'inaxes': ax})()\n+        cursor._update(fake_event)\n+\n+        # Validate whether the error occurs\n+        assert cursor, \"mplcursors should be initialized without errors\"\n+\n+    run_test()\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..b0f4863 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -89,8 +89,22 @@ class TestContinuous:\n         # TODO param order?\n         s = Continuous((2, 3), (10, 100), \"log\")._setup(x, IntervalProperty())\n         assert_array_equal(s(x), [1, 2, 3])\n+    import pandas as pd\n+    from numpy.testing import assert_array_equal\n+    from seaborn._core.scales import Continuous\n+    from seaborn._core.properties import IntervalProperty, Color\n \n-    def test_color_defaults(self, x):\n+    def test_interval_with_bools(self):\n+        x = pd.Series([True, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 0])\n+\n+    def test_color_mapping_with_booleans(self):\n+        # Create boolean data mimicking the failing code\n+        x = pd.Series([True, False])\n+        s = Continuous()._setup(x, Color())\n+        expected_colors = [1.0, 0.0]  # Hypothetical expected output colors\n+        assert_array_equal(s(x), expected_colors)\n \n         cmap = color_palette(\"ch:\", as_cmap=True)\n         s = Continuous()._setup(x, Color())\n",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..be03301 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -851,7 +851,22 @@ class TestPairGrid:\n                 npt.assert_array_equal(x_in_k, x_out)\n                 npt.assert_array_equal(y_in_k, y_out)\n \n-    def test_map_nonsquare(self):\n+    def test_pairplot_column_multiindex(self):\n+        # Test case for pairplot with a MultiIndex DataFrame\n+        cols = pd.MultiIndex.from_arrays([[\"A\", \"B\"], [\"1\", \"2\"]])\n+        df = pd.DataFrame({\n+            (\"A\", \"1\"): np.random.rand(100),\n+            (\"A\", \"2\"): np.random.rand(100),\n+            (\"B\", \"1\"): np.random.rand(100),\n+            (\"B\", \"2\"): np.random.rand(100),\n+        })\n+        df.columns = cols\n+\n+        try:\n+            g = ag.pairplot(df)\n+            assert g.diag_vars == list(cols)\n+        except KeyError as e:\n+            pytest.fail(f\"pairplot raised KeyError: {e}\")\n \n         x_vars = [\"x\"]\n         y_vars = [\"y\", \"z\"]\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..cf03058 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,3 +1,4 @@\n+\n import json\n import os\n import textwrap\n@@ -19,6 +20,30 @@ def common_object_test(app):\n \n \n def test_config_from_pyfile():\n+    # Original test remains untouched\n+    pass\n+\n+def test_config_from_file_toml_binary_mode():\n+    \"\"\"Test that tomllib can be used with from_file by specifying binary mode.\"\"\"\n+    import os  # Add any required imports if missing\n+    import pytest  # Ensure pytest is imported\n+    import flask\n+    import tomllib\n+\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+\n+    # Assume 'config.toml' is a valid toml file in the 'static' directory\n+    with open(os.path.join(current_dir, \"static\", \"config.toml\"), \"wb\") as f:\n+        f.write(b'TEST_KEY = \"foo\"\\nSECRET_KEY = \"config\"')\n+\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.toml\"),\n+        tomllib.load,\n+        mode='rb'\n+    )\n+\n+    common_object_test(app)\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n     common_object_test(app)\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..dbbe660 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,35 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import requests\n+import pytest\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import DecodeError, Timeout\n+from requests.packages.urllib3.exceptions import DecodeError as Urllib3DecodeError\n+from requests.packages.urllib3.exceptions import TimeoutError as Urllib3TimeoutError\n+\n+def test_urllib3_decode_error():\n+    \"\"\"Test if DecodeError from urllib3 is wrapped properly.\"\"\"\n+    session = requests.Session()\n+    adapter = HTTPAdapter()\n+    session.mount('http://', adapter)\n+\n+    # Assuming a request that would initially trigger DecodeError\n+    with pytest.raises(DecodeError):\n+        adapter.send(requests.Request('GET', 'http://mockurl').prepare(), decode_content=True)\n+\n+def test_urllib3_timeout_error():\n+    \"\"\"Test if TimeoutError from urllib3 is wrapped properly.\"\"\"\n+    session = requests.Session()\n+    adapter = HTTPAdapter()\n+    session.mount('http://', adapter)\n+\n+    with pytest.raises(Timeout):\n+        adapter.send(\n+            requests.Request('GET', 'http://mockurl').prepare(),\n+            timeout=(0.05, 0.05)  # Using an unrealistically low timeout for testing\n+        )\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1692,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..86a4a41 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,8 +743,53 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    def test_register_multiple_hooks(self):\n+        \"\"\"Test registering multiple hooks using a list for a single event.\"\"\"\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'X-Foo': 'foo'})\n+            return args\n+\n+        def add_bar_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'X-Bar': 'bar'})\n+            return args\n+\n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h)\n+\n+        hooks = [add_foo_header, add_bar_header]\n+        \n+        # Test with Request().register_hook()\n+        r = requests.models.Request()\n+        r.register_hook('args', hooks)\n+        assert_hooks_are_callable(r.hooks)\n+\n+        # Test with Request(hooks={...})\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert_hooks_are_callable(r.hooks)\n+\n+    def test_register_single_hook_as_list(self):\n+        \"\"\"Test registering a single hook as a list.\"\"\"\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'X-Foo': 'foo'})\n+            return args\n+\n+        hooks = [add_foo_header]\n+        \n+        # Test with Request().register_hook()\n+        r = requests.models.Request()\n+        r.register_hook('args', hooks)\n+        assert callable(r.hooks['args'][0])\n \n-    def test_session_persistent_cookies(self):\n+        # Test with Request(hooks={...})\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert callable(r.hooks['args'][0])\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..bfb6922 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -89,6 +89,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_punctuation_only_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                # ???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_issue_2321_should_not_trigger(self) -> None:\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n@@ -119,4 +129,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..d2ab706 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -79,7 +79,13 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n+def test_unrecognized_option_no_traceback(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure no traceback is printed for an unrecognized short option.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([\"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: Q\" in output.err\n+    assert \"Traceback\" not in output.err\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..2424c61 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,33 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self) -> None:\n+        \"\"\"Test that `ignore-paths` is respected with `--recursive=y` option.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                ignore_directory = join(\"ignored_subdirectory\")\n+                with open(\"pyproject.toml\", \"w\") as toml_file:\n+                    toml_file.write(\n+                        '[tool.pylint.MASTER]\\nignore-paths = [\"^' + ignore_directory + '/.*$\"]\\n'\n+                    )\n+                try:\n+                    self._runtest(\n+                        [\n+                            \".\",\n+                            \"--recursive=y\",\n+                            f\"--ignore-paths=^{ignore_directory}/.*\"\n+                        ],\n+                        code=0,\n+                    )\n+                finally:\n+                    os.remove(\"pyproject.toml\")\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "",
  "pylint-dev__pylint-7993": "",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/acceptance_test.py b/testing/acceptance_test.py\nindex 0cc5057..e549ba9 100644\n--- a/testing/acceptance_test.py\n+++ b/testing/acceptance_test.py\n@@ -1306,6 +1306,8 @@ def test_no_brokenpipeerror_message(pytester: Pytester) -> None:\n     popen.stderr.close()\n \n \n+from typing import Iterator\n+\n def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n@@ -1314,4 +1316,4 @@ def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     \"\"\"\n     )\n     res = pytester.runpytest()\n-    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n+    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..9dce124 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -6,6 +7,35 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n+    logfmt_with_module = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record_with_module = logging.LogRecord(\n+        name=\"dummy.module\",\n+        level=logging.INFO,\n+        pathname=\"dummypath/utils.py\",\n+        lineno=10,\n+        msg=\"Test Message with Module\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    tw = py.io.TerminalWriter()\n+\n+    # Test with markup enabled\n+    tw.hasmarkup = True\n+    formatter_with_module = ColoredLevelFormatter(tw, logfmt_with_module)\n+    output_with_module = formatter_with_module.format(record_with_module)\n+    assert output_with_module == (\n+        \"INFO     dummy.module:utils.py:10 \\x1b[32mINFO    \\x1b[0m Test Message with Module\"\n+    )\n+\n+    # Test without markup\n+    tw.hasmarkup = False\n+    formatter_with_module = ColoredLevelFormatter(tw, logfmt_with_module)\n+    output_with_module = formatter_with_module.format(record_with_module)\n+    assert output_with_module == (\n+        \"INFO     dummy.module:utils.py:10 INFO     Test Message with Module\"\n+    )\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n     record = logging.LogRecord(\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..a71c6d7 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -383,6 +383,40 @@ class TestAssert_reprcompare:\n         assert expl[-1] == \"Use -v to get the full diff\"\n         expl = \"\\n\".join(callequal(left, right, verbose=True))\n         assert expl.endswith(textwrap.dedent(expected).strip())\n+    def test_bytes_diff_empty_right(self):\n+        \"\"\"Test bytes diff when the left is non-empty and right is empty.\"\"\"\n+        diff = callequal(b\"42\", b\"\")\n+        assert diff == [\n+            \"b'42' == b''\",\n+            \"Left contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b'42'\",\n+            \"?   ^^\",\n+            \"+ b''\",\n+        ]\n+\n+    def test_bytes_diff_empty_left(self):\n+        \"\"\"Test bytes diff when the left is empty and right is non-empty.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+            \"?   ^^\",\n+        ]\n+\n+    def test_bytes_diff_single_char(self):\n+        \"\"\"Test bytes diff when comparing single-character byte strings.\"\"\"\n+        diff = callequal(b\"1\", b\"2\")\n+        assert diff == [\n+            \"b'1' == b'2'\",\n+            \"At index 0 diff: 49 != 50\",\n+            \"Full diff:\",\n+            \"- b'1'\",\n+            \"+ b'2'\",\n+        ]\n \n     def test_list_different_lengths(self):\n         expl = callequal([0, 1], [0, 1, 2])\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..27b9b56 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,9 +1,12 @@\n+\n import os\n from xml.dom import minidom\n \n import py\n \n import pytest\n+import platform\n+from datetime import datetime\n from _pytest.junitxml import LogXML\n from _pytest.reports import BaseReport\n \n@@ -157,7 +160,29 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+        \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+        \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..de4add7 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -149,8 +149,50 @@ def test_unicode():\n     reprval = \"'\u00a3\u20ac'\"\n     assert saferepr(val) == reprval\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ and __repr__ methods (#7145)\n+    \"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Failed to get attribute\")\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Failed in repr\")\n+\n+    result = saferepr(SomeClass())\n+\n+    assert result.startswith(\n+        \"<[RuntimeError('Failed in repr') raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n+def test_broken_repr_only():\n+    \"\"\"Test saferepr with a class having only a broken __repr__ method.\"\"\"\n+\n+    class SomeClass:\n+        def __repr__(self):\n+            raise RuntimeError(\"Failed in repr\")\n+\n+    result = saferepr(SomeClass())\n+\n+    assert result.startswith(\n+        \"<[RuntimeError('Failed in repr') raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n+def test_normal_class():\n+    \"\"\"Test that saferepr works for normal cases.\"\"\"\n+\n+    class SomeClass:\n+        def __repr__(self):\n+            return \"SomeClass instance\"\n+\n+    assert saferepr(SomeClass()) == \"SomeClass instance\"\n+\n \n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..299a974 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -76,6 +76,32 @@ def test_parseconfig(testdir) -> None:\n     config2 = testdir.parseconfig()\n     assert config2 is not config1\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n \n def test_testdir_runs_with_plugin(testdir) -> None:\n     testdir.makepyfile(\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..ff73cb9 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,7 @@\n import os\n import sys\n+import os\n+\n from unittest import mock\n \n import pytest\n@@ -36,7 +38,44 @@ class TestMark:\n         assert pytest.mark.foo(SomeClass) is SomeClass\n         assert pytest.mark.foo.with_args(SomeClass) is not SomeClass  # type: ignore[comparison-overlap] # noqa: F821\n \n-    def test_pytest_mark_name_starts_with_underscore(self):\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"Test that skipif conditions are correctly evaluated per context.\"\"\"\n+        \n+        # Create the first test module, where 'skip' is True\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        # Create the second test module, where 'skip' is False\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        # Determine file names from the generated paths\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+\n+        # Run the tests and check the outcome\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        \n+        # Should result in one test passed (the \"False\" condition) and one skipped (the \"True\" condition)\n+        reprec.assertoutcome(passed=1, skipped=1)\n         mark = Mark()\n         with pytest.raises(AttributeError):\n             mark._some_name\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..461bf61 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -152,6 +152,22 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+    @pytest.mark.parametrize('test_input,expected', [\n+        ([\"-rs\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+        ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+    ])\n+    def test_skip_location_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n \n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..1ff35d2 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -398,6 +399,37 @@ class TestXFail:\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n     def test_dynamic_xfail_no_run(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.fixture\n+            def setup_marker(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"Dynamically added xfail\"))\n+\n+            def test_dynamic(setup_marker):\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p, \"-rxX\")\n+        result.stdout.fnmatch_lines([\"*XFAIL*test_dynamic*\", \"*1 xfailed*\"])\n+\n+    def test_dynamic_xfail_strict(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.fixture\n+            def setup_marker(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"Dynamically added xfail\", strict=True))\n+\n+            def test_dynamic(setup_marker):\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p, \"-rxX\")\n+        result.stdout.fnmatch_lines(\n+            [\"*XPASS(strict)*test_dynamic*Dynamically added xfail*\"]\n+        )\n+        assert result.ret == 1\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-8365": "",
  "scikit-learn__scikit-learn-10297": "",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..0dd342d 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -14,8 +14,9 @@ from sklearn.mixture.bayesian_mixture import _log_wishart_norm\n from sklearn.mixture import BayesianGaussianMixture\n \n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n-from sklearn.exceptions import ConvergenceWarning\n-from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n+from sklearn.exceptions import ConvergenceWarning, NotFittedError\n+from sklearn.utils.testing import assert_array_equal, assert_greater_equal, ignore_warnings\n+from sklearn.metrics.cluster import adjusted_rand_score\n \n \n COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..201af52 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,52 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+from sklearn.preprocessing import OneHotEncoder\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_ignore_unknown_with_different_string_lengths():\n+    train = np.array(['a', 'bb', 'ccc', 'dddd', 'eeeeee']).reshape((-1, 1))\n+    test = np.array(['fff', 'a']).reshape((-1, 1))\n+\n+    encoder = OneHotEncoder(handle_unknown='ignore')\n+    encoder.fit(train)\n+    result = encoder.transform(test).toarray()\n+\n+    expected_result = np.array([[0., 0., 0., 0., 0.],\n+                                [1., 0., 0., 0., 0.]])\n+\n+    assert_array_equal(result, expected_result)\n+\n+def test_one_hot_encoder_transform_handles_objects():\n+    train = np.array(['cat', 'dog', 'fish']).reshape((-1, 1))\n+    test = np.array(['dog', 'cat', 'unknown']).reshape((-1, 1))\n+\n+    encoder = OneHotEncoder(handle_unknown='ignore')\n+    encoder.fit(train)\n+    result = encoder.transform(test).toarray()\n+\n+    expected_result = np.array([[0., 1., 0.],\n+                                [1., 0., 0.],\n+                                [0., 0., 0.]])\n+\n+    assert_array_equal(result, expected_result)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..2c4d2ba 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..77f3b12 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -11,6 +12,8 @@ import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_array_equal\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..b64cabc 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -9,8 +10,21 @@ from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n \n-\n-# Ignore flake8 (lots of line too long issues)\n+import sklearn\n+from sklearn.linear_model import LogisticRegressionCV\n+\n+def test_print_changed_only_with_array_params():\n+    # Set configuration to print changed only\n+    sklearn.set_config(print_changed_only=True)\n+    \n+    # Create an instance of LogisticRegressionCV with a numpy array as parameter\n+    model = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    \n+    # Attempt to get the representation of the model which should not raise an error\n+    repr_model = repr(model)\n+    \n+    assert 'LogisticRegressionCV(' in repr_model\n+    assert 'Cs=array([0.1, 1.])' in repr_model  # Ensure the parameter is correctly displayed\n # flake8: noqa\n \n # Constructors excerpted to test pprinting\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..c90b19d 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,23 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+import numpy as np\n+import pytest\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+from sklearn.utils._testing import assert_raises\n+\n+@pytest.mark.parametrize('param, value', [('n_components', np.int32(3)),\n+                                          ('max_iter', np.int32(100)),\n+                                          ('tol', np.float32(0.0001))])\n+def test_parameters_valid_types(param, value):\n+    # check that no error is raised when parameters have numpy integer or\n+    # floating types.\n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n \n-def test_transformation_dimensions():\n+    X = np.random.random_sample((10, 3))\n+    y = np.random.randint(2, size=10)\n+\n+    nca.fit(X, y)\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..f09acf7 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,32 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_input_no_support_vectors():\n+    # Additional test to confirm robustness with different sparse data inputs\n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0, 0, 0, 0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    # Should complete without errors and accordingly attributes are empty or have expected values\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..a1134da 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,18 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=6, n_splits=2, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..079a481 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -162,6 +162,9 @@ def test_format_invariance(metric_name):\n         yield y, 'array of ints'\n         yield y.tolist(), 'list of ints'\n         yield [str(x) for x in y.tolist()], 'list of strs'\n+        yield [str(x) + \"-a\" for x in y.tolist()], 'list of strs with suffix'\n+        yield np.array([str(x) for x in y.tolist()], dtype=object), 'array of strs'\n+        yield np.array([str(x) + \"-a\" for x in y.tolist()], dtype=object), 'array of strs with suffix'\n         yield y - 1, 'including negative ints'\n         yield y + 1, 'strictly positive ints'\n \n",
  "scikit-learn__scikit-learn-25500": "",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 21b6a7e..1c634f8 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -737,7 +737,40 @@ def test_autodoc_type_aliases(app):\n     ]\n \n \n-@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases_for_variables_and_attributes(app):\n+    # Define aliases\n+    app.config.autodoc_type_aliases = {'String': 'example.MyString'}\n+    \n+    # Call do_autodoc for module `example`\n+    actual = do_autodoc(app, 'module', 'example', {\"members\": None, \"undoc-members\": None})\n+\n+    # Assert that the type alias is correctly applied to module variable `var` and attribute `MyString.var`\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: example',\n+        '',\n+        '',\n+        '.. py:data:: var',\n+        '   :module: example',\n+        '   :type: example.MyString',\n+        '',\n+        '   blah blah blah',\n+        '',\n+        '',\n+        '.. py:class:: MyString',\n+        '   :module: example',\n+        '',\n+        '   mystring',\n+        '',\n+        '',\n+        '   .. py:attribute:: MyString.var',\n+        '      :module: example',\n+        '      :type: example.MyString',\n+        '',\n+        '      blah blah blah',\n+        '',\n+    ]\n def test_autodoc_default_options(app):\n     # no settings\n     actual = do_autodoc(app, 'class', 'target.enums.EnumCls')\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..91ab9ad 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -78,7 +78,59 @@ def test_get_full_qualified_name():\n     domain = StandardDomain(env)\n \n     # normal references\n-    node = nodes.reference()\n+from sphinx.testing.util import SphinxTestApp\n+import sphinx\n+from sphinx import addnodes as nodes\n+from sphinx.testing.util import assert_node\n+from sphinx.domains.std import StandardDomain\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = app.env.get_doctree(app.srcdir / 'index')\n+    assert_node(doctree, (index,\n+                          [desc, ([desc_signature, ([desc_name, '-j'],\n+                                                    [desc_addname, '[=N]'])],\n+                                  [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = app.env.get_doctree(app.srcdir / 'index')\n+    assert_node(doctree, (index,\n+                          [desc, ([desc_signature, ([desc_name, '[enable'],\n+                                                    [desc_addname, '=]PATTERN'])],\n+                                  [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+def test_cmd_option_with_hyphen(app):\n+    text = \".. option:: --long-option=VALUE\"\n+    doctree = app.env.get_doctree(app.srcdir / 'index')\n+    assert_node(doctree, (index,\n+                          [desc, ([desc_signature, ([desc_name, '--long-option'],\n+                                                    [desc_addname, '=VALUE'])],\n+                                  [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--long-option', '--long-option', 'cmdoption', 'index', 'cmdoption-long-option', 1) in objects\n+\n+def test_cmd_option_with_slash(app):\n+    text = \".. option:: /option\"\n+    doctree = app.env.get_doctree(app.srcdir / 'index')\n+    assert_node(doctree, (index,\n+                          [desc, ([desc_signature, ([desc_name, '/option'])],\n+                                  [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('/option', '/option', 'cmdoption', 'index', 'cmdoption-option', 1) in objects\n+\n+def test_cmd_option_with_plus(app):\n+    text = \".. option:: +option\"\n+    doctree = app.env.get_doctree(app.srcdir / 'index')\n+    assert_node(doctree, (index,\n+                          [desc, ([desc_signature, ([desc_name, '+option'])],\n+                                  [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('+option', '+option', 'cmdoption', 'index', 'cmdoption-option', 1) in objects\n     assert domain.get_full_qualified_name(node) is None\n \n     # simple reference to options\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..4e1d1b7 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,8 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -44,6 +46,18 @@ def do_autodoc(app, objtype, name, options=None):\n \n     return bridge.result\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_module_with_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'example', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: example',\n+        '',\n+        'docsting of example module.',\n+        '',\n+    ]\n+\n \n def make_directive_bridge(env):\n     options = Options(\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..98bb479 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -115,7 +117,8 @@ def test_restify_type_ForwardRef():\n     assert restify(ForwardRef(\"myint\")) == \":class:`myint`\"\n \n \n-def test_restify_broken_type_hints():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..1cff425 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,41 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_napoleon_use_param(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other Parameters\n+----------------\n+y : float\n+\n+\"\"\"\n+\n+        # First we test with napoleon_use_param set to False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:Other Parameters: **y** (*float*)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param set to True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:param y:\n+:type y: float\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..da55ca9 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -61,6 +61,13 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/cpp/' in stuff\n \n \n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Ensure no module pages are generated when viewcode_enable_epub is False\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n @pytest.mark.sphinx(testroot='ext-viewcode-find')\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..3cacdd8 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -322,6 +322,16 @@ def test_mul():\n         assert h == h2\n \n \n+def test_permutation_non_disjoint_cycles():\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity case with repeating cycle.\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])  # Should apply left-to-right.\n+    assert Permutation([[0, 2], [0, 1]]) == Permutation([2, 0, 1])  # Non-overlapping permutations.\n+    assert Permutation([[0, 1], [0, 2], [2, 3]]) == Permutation([1, 2, 3, 0])  # Multiple overlapping.\n+    assert Permutation([[1, 2], [0, 1], [2, 3]]) == Permutation([1, 3, 0, 2])  # Completely overlapping.\n+    assert Permutation([[0, 1], [0, 2], [0, 3]]) == Permutation([1, 2, 3, 0])  # Like a single cycle.\n+    # Ensure list input for non-cycles behaves:\n+    assert Permutation([1, 0, 2]) == Permutation([1, 0, 2])  # Proper transformation for array input.\n+\n def test_args():\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..f31fbd0 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -448,6 +449,22 @@ def test_sparse_matrix():\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n \n+    # Test for hstack with 0 x n matrices\n+    sparse_matrices_0xn = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_0xn).shape == (0, 6)\n+\n+    # Test for vstack with n x 0 matrices\n+    sparse_matrices_nx0 = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_nx0).shape == (6, 0)\n+\n+    # Test for hstack with 1 x n matrices\n+    sparse_matrices_1xn = [SparseMatrix.zeros(1, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_1xn).shape == (1, 6)\n+\n+    # Test for vstack with n x 1 matrices (additional case to verify fix)\n+    sparse_matrices_nx1 = [SparseMatrix.zeros(n, 1) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_nx1).shape == (6, 1)\n+\n \n def test_transpose():\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..3048f09 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -81,8 +81,20 @@ def check(a, exclude=[], check_attr=True):\n \n #================== core =========================\n \n+import pickle\n+import sys\n+from sympy import Float, symbols, Add\n \n-def test_core_basic():\n+def test_pickle_float_cross_python():\n+    \"\"\"\n+    Emulates the cross-version compatibility test case for pickling and\n+    unpickling Sympy Float containing expressions.\n+    \"\"\"\n+    x = symbols(\"x\")\n+    expr = Add(x, Float(1.0))  # Python 3 equivalent of the problematic expression\n+    dumped = pickle.dumps(expr, protocol=2)\n+    loaded = pickle.loads(dumped)\n+    assert loaded == expr  # Ensure the loaded expression matches original\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n               # XXX: dynamically created types are not picklable\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..9ee265c 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -260,6 +260,19 @@ def test_coth():\n     assert coth(7*pi*I/6) == -sqrt(3)*I\n     assert coth(-5*pi*I/6) == -sqrt(3)*I\n \n+    from sympy import log, tan, Symbol\n+\n+    x = Symbol('x')\n+    # Specific substitutions for coth(log(tan(x)))\n+    # Verify that these substitutions do not raise an error now.\n+    assert coth(log(tan(2)))  # Tests with substitution x = 2\n+    assert coth(log(tan(3)))  # Tests with substitution x = 3\n+    assert coth(log(tan(5)))  # Tests with substitution x = 5\n+    assert coth(log(tan(6)))  # Tests with substitution x = 6\n+    assert coth(log(tan(8)))  # Tests with substitution x = 8\n+    assert coth(log(tan(9)))  # Tests with substitution x = 9\n+    assert coth(log(tan(11))) # Tests with substitution x = 11\n+\n     assert coth(pi*I/105) == -cot(pi/105)*I\n     assert coth(-pi*I/105) == cot(pi/105)*I\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..783afbb 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,20 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_col_insert_issue_13643():\n+    # Test for issue 13643\n+    M = Matrix.eye(6)\n+    V = 2 * Matrix.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..2b23b8a 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,54 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+from sympy import latex, SeqFormula, SeqPer, SeqAdd, SeqMul\n+from sympy.abc import a\n+from sympy import oo\n \n def test_latex_sequences():\n+\n+    # New test cases to ensure the correct rendering of square brackets\n+    s1 = SeqFormula(a**2, (0, oo))\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s1) == latex_str\n+\n+    s3 = SeqFormula(a**2, (0, 2))\n+    latex_str = r'[0, 1, 4]'\n+    assert latex(s3) == latex_str\n+\n+    s5 = SeqFormula(a**2, (-oo, 0))\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(s5) == latex_str\n+\n+    s2 = SeqPer((1, 2))\n+    latex_str = r'[1, 2, 1, 2, \\ldots]'\n+    assert latex(s2) == latex_str\n+\n+    s4 = SeqPer((1, 2), (0, 2))\n+    latex_str = r'[1, 2, 1]'\n+    assert latex(s4) == latex_str\n+\n+    s6 = SeqPer((1, 2), (-oo, 0))\n+    latex_str = r'[\\ldots, 2, 1, 2, 1]'\n+    assert latex(s6) == latex_str\n+\n+    latex_str = r'[1, 3, 5, 11, \\ldots]'\n+    assert latex(SeqAdd(s1, s2)) == latex_str\n+\n+    latex_str = r'[1, 3, 5]'\n+    assert latex(SeqAdd(s3, s4)) == latex_str\n+\n+    latex_str = r'[\\ldots, 11, 5, 3, 1]'\n+    assert latex(SeqAdd(s5, s6)) == latex_str\n+\n+    latex_str = r'[0, 2, 4, 18, \\ldots]'\n+    assert latex(SeqMul(s1, s2)) == latex_str\n+\n+    latex_str = r'[0, 2, 4]'\n+    assert latex(SeqMul(s3, s4)) == latex_str\n+\n+    latex_str = r'[\\ldots, 18, 4, 2, 0]'\n+    assert latex(SeqMul(s5, s6)) == latex_str\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..4147537 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, EX, RR, CC\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -174,6 +175,26 @@ def test_Domain_preprocess():\n \n     raises(OptionError, lambda: Domain.preprocess('Z[]'))\n \n+    # Original test cases for polynomial domains in RR and CC\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+    # Additional test cases for the multi-variable domains\n+    assert Domain.preprocess('R[x,y,z]') == RR[x, y, z]\n+    assert Domain.preprocess('C[x,y,z]') == CC[x, y, z]\n+    assert Domain.preprocess('RR[x,y,z]') == RR[x, y, z]\n+    assert Domain.preprocess('CC[x,y,z]') == CC[x, y, z]\n+\n+    # Test for OptionError with invalid domain specifications\n+    raises(OptionError, lambda: Domain.preprocess('RR<x,y,z>'))\n+    raises(OptionError, lambda: Domain.preprocess('CC<x,y,z>'))\n+\n     assert Domain.preprocess('Z[x]') == ZZ[x]\n     assert Domain.preprocess('Q[x]') == QQ[x]\n \n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..e616ba2 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -307,6 +308,25 @@ def test_latex_functions():\n         r\"\\sin^{-1} {x^{2}}\"\n \n     assert latex(factorial(k)) == r\"k!\"\n+\n+    # Test for acsc with full inverse trig function names\n+    assert latex(acsc(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+\n+    # Additional test for asec with full inverse trig function names\n+    from sympy import asec\n+    assert latex(asec(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n+\n+    # Test for other inverse trigonometric functions to ensure no regression\n+    assert latex(asin(x), inv_trig_style=\"full\") == \\\n+        r\"\\arcsin{\\left (x \\right )}\"\n+    assert latex(acos(x), inv_trig_style=\"full\") == \\\n+        r\"\\arccos{\\left (x \\right )}\"\n+    assert latex(atan(x), inv_trig_style=\"full\") == \\\n+        r\"\\arctan{\\left (x \\right )}\"\n+    assert latex(acot(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arccot}{\\left (x \\right )}\"\n     assert latex(factorial(-k)) == r\"\\left(- k\\right)!\"\n \n     assert latex(subfactorial(k)) == r\"!k\"\n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..1ec0b55 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6121,8 +6121,35 @@ def test_MatrixSymbol_printing():\n     assert pretty(A - B) == \"-B + A\"\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n+from sympy.core.symbol import Symbol\n+from sympy.matrices import MatrixSymbol\n+from sympy.printing import pretty\n \n-def test_degree_printing():\n+def test_MatrixSymbol_printing():\n+    # test cases for issue #14237\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    B = MatrixSymbol(\"B\", 3, 3)\n+    C = MatrixSymbol(\"C\", 3, 3)\n+\n+    assert pretty(-A*B*C) == \"-A*B*C\"\n+    assert pretty(A - B) == \"-B + A\"\n+    assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n+\n+    # issue #14814\n+    x = MatrixSymbol('x', 3, 3)\n+    y_star = MatrixSymbol('y*', 3, 3)\n+    a = Symbol('a')\n+\n+    # Verify the pretty printing does not raise the Sympify error\n+    assert pretty(x + y_star) == \"x + y*\"\n+    \n+    # Test cases with negative signs and multiplication\n+    assert pretty(-a*x + -2*y_star*y_star) == \"-a*x - 2*y**y*\"\n+\n+    # Additional Test Cases\n+    assert pretty(x - y_star) == \"x - y*\"\n+    assert pretty(-x - y_star) == \"-x - y*\"\n+    assert pretty(-x + y_star) == \"-x + y*\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..31fbf59 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,7 +728,26 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n-def test_python_keywords():\n+from sympy import MatrixSymbol, lambdify, symbols, SyntaxError\n+\n+def test_curly_matrix_symbol_lambdify():\n+    # Test involving MatrixSymbols with curly braces in their names\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    v = MatrixSymbol(\"v\", 2, 1)\n+    \n+    # These should work without errors\n+    lam1 = lambdify(curlyv, curlyv, dummify=False)\n+    assert lam1([[1], [2]]) == [[1], [2]]\n+    \n+    lam2 = lambdify(v, v, dummify=False)\n+    assert lam2([[3], [4]]) == [[3], [4]]\n+    \n+    # These should also work with dummify=True\n+    lam3 = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam3([[5], [6]]) == [[5], [6]]\n+\n+    # Additional test ensuring no syntax error\n+    assert lam3([[7], [8]]) == [[7], [8]]\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..4e3c8be 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,33 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex_printer():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    \n+    # This is the initial test provided\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+    \n+    # Additional tests for more coverage\n+    \n+    # Test with different indices\n+    p, q = symbols(\"p q\")\n+    assert latex((M*N)[p, q]) == r'\\sum_{i_{1}=0}^{k - 1} M_{p, i_{1}} N_{i_{1}, q}'\n+    \n+    # Test identity matrix multiplication\n+    I = MatrixSymbol(\"I\", k, k)  # Assuming `I` behaves like an identity matrix\n+    assert latex((M*I)[i, j]) == r'M_{i, j}'\n+    assert latex((I*N)[i, j]) == r'N_{i, j}'\n+    \n+    # Zero matrix case\n+    Z = MatrixSymbol(\"Z\", k, k)\n+    assert latex((M*Z)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} Z_{i_{1}, j}'\n+\n+# Retain existing tests\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..42c1adf 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -21,7 +22,23 @@ def test_idiff():\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n \n-def test_intersection():\n+def test_idiff_issue():\n+    # Ensure that idiff supports Eq and f(x) notation\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+\n+    # Test case where Eq is used\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x).simplify() == ((x + 1) * exp(x - y) / (y + 1)).simplify()\n+    \n+    # Test case where f(x) is used instead of y\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+\n+    # Additional test cases for idiff\n+    g = Function('g')\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..f8d5bfc 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -339,6 +339,29 @@ def test_intersection():\n \n     assert Intersection(S.Complexes, FiniteSet(S.ComplexInfinity)) == S.EmptySet\n \n+    # Test cases to verify the resolution of the issue\n+    x = Symbol('x')\n+\n+    # Intersection with same element ({1}, {1}, {x})\n+    result = Intersection({1}, {1}, {x})\n+    expected = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert result == expected, f'Expected {expected} but got {result}'\n+\n+    # Intersection with one duplicate element and one different ({1}, {x})\n+    result = Intersection({1}, {x})\n+    expected = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert result == expected, f'Expected {expected} but got {result}'\n+\n+    # Intersection with no common elements ({1}, {2}, {x})\n+    result = Intersection({1}, {2}, {x})\n+    expected = S.EmptySet\n+    assert result == expected, f'Expected {expected} but got {result}'\n+\n+    # Intersection of sets that include symbols ({x}, {x}, {1})\n+    result = Intersection({x}, {x}, {1})\n+    expected = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert result == expected, f'Expected {expected} but got {result}'\n+\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..56607f0 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,8 +1,33 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n )\n-from sympy import eye\n+from sympy import eye, Identity, MatrixSymbol\n+from sympy.utilities.pytest import raises\n+from sympy.external import import_module\n+\n+np = import_module('numpy')\n+\n+def test_issue_identity_matrix_lambdify():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    # Test with a fixed size matrix\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f_fixed = lambdify(M, M + Identity(2), modules='numpy')\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+    np.testing.assert_array_equal(f_fixed(ma), mr)\n+\n+    # Test with a symbolic size (unsupported case)\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n), modules='numpy'))\n+\n+    # Testing the printer directly\n+    p = NumPyPrinter()\n+    assert p.doprint(Identity(3)) == \"numpy.eye(3)\"\n from sympy.abc import x, i, j, a, b, c, d\n from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbrt, Sqrt\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..eed829a 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -801,6 +801,18 @@ def test_nc_simplify():\n     # commutative expressions should be returned without an error\n     assert nc_simplify(2*x**2) == 2*x**2\n \n+def test_issue_17137():\n+    x = Symbol('x')\n+    # Testing simplify with complex exponent\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(tan(x)**I) == tan(x)**I\n+\n+    # Testing more complex expressions with complex exponents\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    assert simplify(exp(x)**(1 + I)) == exp(x)**(1 + I)\n+    assert simplify(log(x)**I) == log(x)**I\n+\n def test_issue_15965():\n     A = Sum(z*x**y, (x, 1, a))\n     anew = z*Sum(x**y, (x, 1, a))\n@@ -814,4 +826,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..639c71b 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -93,6 +94,20 @@ def test_point():\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n+    # Test for commutative behavior with multiplication involving Point and scalar\n+    point1 = Point2D(0, 0)\n+    point2 = Point2D(1, 1)\n+\n+    assert point1 + point2 * S(2.0) == Point2D(2, 2)\n+    assert point1 + S(2.0) * point2 == Point2D(2, 2)\n+\n+    # Test for Point3D\n+    point3d_1 = Point3D(0, 0, 0)\n+    point3d_2 = Point3D(1, 1, 1)\n+\n+    assert point3d_1 + point3d_2 * S(2.0) == Point3D(2, 2, 2)\n+    assert point3d_1 + S(2.0) * point3d_2 == Point3D(2, 2, 2)\n+\n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n     # Point differences should be simplified\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..0042bf5 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,42 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, Symbol, sympify\n+from sympy.core.expr import Expr\n+from sympy.utilities.pytest import raises\n+\n+def test_non_string_equality():\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+def test_repr_based_equality_issue():\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    x = symbols('x')\n+    # The test is that this will raise AttributeError before the fix.\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+    # The test is that this wrongly compared equal before the fix.\n+    assert (x != D()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1938,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..57a03fe 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,25 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy.abc import x, y\n+    # Original test cases to verify the issue fix\n+    eq = y**4 + x**4 - 2**4 - 3**4\n+    expected_solutions = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(eq, syms=(x, y), permute=True) == expected_solutions\n+    assert diophantine(eq, syms=(y, x), permute=True) == expected_solutions\n+\n+    # Additional test case with different numbers\n+    eq2 = y**4 + x**4 - 1**4 - 4**4\n+    expected_solutions2 = {(1, 4), (4, 1), (-1, 4), (1, -4), (4, -1), (-4, 1), (-4, -1), (-1, -4)}\n+    assert diophantine(eq2, syms=(x, y), permute=True) == expected_solutions2\n+    assert diophantine(eq2, syms=(y, x), permute=True) == expected_solutions2\n+\n+    # Additional test to ensure no false negatives for non-existing solutions\n+    eq3 = y**4 + x**4 - 1**4 - 2**4\n+    expected_solutions3 = set()\n+    assert diophantine(eq3, syms=(x, y), permute=True) == expected_solutions3\n+    assert diophantine(eq3, syms=(y, x), permute=True) == expected_solutions3\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..03dd0ab 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,7 +67,7 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..af0d8c0 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,12 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_convert_blockdiagmatrix_to_matrix():\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..2c12028 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..464160e 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -200,7 +200,20 @@ def test_im():\n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n \n+from sympy import Symbol, sign, Abs, Piecewise, Eq, Function, nan, I, sqrt, S, DiracDelta, Heaviside, oo, cos, log, sin\n+\n def test_sign():\n+    # Tests for sign rewritten as Abs\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    f = Function('f')\n+\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+    assert sign(0).rewrite(Abs) == 0  # Ensure consistent treatment of zero\n+    assert sign(x*y).rewrite(Abs) == Piecewise((0, Eq(x*y, 0)), (x*y/Abs(x*y), True))\n+    assert sign(0*y).rewrite(Abs) == 0  # Even if y is complex, zero product is zero\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..006dcf2 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -500,6 +500,23 @@ def test_partitions():\n         {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}] == [\n         i.copy() for i in partitions(4) if all(k <= 3 for k in i)]\n \n+    # Test that partitions dictionaries are not the same object,\n+    # checking that the issue regarding reuse is resolved\n+    partitions_6_k2 = list(partitions(6, k=2))\n+    for i in range(1, len(partitions_6_k2)):\n+        assert partitions_6_k2[i] is not partitions_6_k2[i-1]\n+\n+    partitions_6_k3 = list(partitions(6, k=3))\n+    for i in range(1, len(partitions_6_k3)):\n+        assert partitions_6_k3[i] is not partitions_6_k3[i-1]\n+\n+    partitions_8_k4_m3 = [i for i in partitions(8, k=4, m=3) if all(k <= 4 for k in i)]\n+    for i in range(1, len(partitions_8_k4_m3)):\n+        assert partitions_8_k4_m3[i] is not partitions_8_k4_m3[i-1]\n+\n+    partitions_4_k3 = [i for i in partitions(4) if all(k <= 3 for k in i)]\n+    for i in range(1, len(partitions_4_k3)):\n+        assert partitions_4_k3[i] is not partitions_4_k3[i-1]\n \n     # Consistency check on output of _partitions and RGS_unrank.\n     # This provides a sanity test on both routines.  Also verifies that\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..adddd3e 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -255,6 +255,7 @@ def test_power_rewrite_exp():\n \n \n def test_zero():\n+    from sympy import oo, S\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n@@ -266,8 +267,13 @@ def test_zero():\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n+    # Test issue 19572\n+    assert 0**-oo == S.ComplexInfinity  # Tests that 0 raised to negative infinity results in ComplexInfinity/zoo\n+    assert pow(0, -oo) == S.ComplexInfinity  # Using the pow function\n+\n \n def test_pow_as_base_exp():\n+    from sympy import oo, S\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..a7fb8d0 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -8,6 +9,7 @@ from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     byte, kibibyte, mebibyte, gibibyte, tebibyte, pebibyte, exbibyte,\n     kilogram, gravitational_constant)\n \n+from sympy.physics.units import joule, kilogram, meter, second, minute\n from sympy.physics.units.definitions.dimension_definitions import (\n     Dimension, charge, length, time, temperature, pressure,\n     energy\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..01c8eee 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,27 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+import pytest\n+\n+def test_symbol_dict_absent_in_version_1_6():\n+    # Mimic the behavior of SymPy 1.6 where __dict__ attribute should not exist\n+    # We expect an AttributeError in this simulation\n+    s = Symbol('s')\n+    with pytest.raises(AttributeError):\n+        d = s.__dict__\n+\n+def test_symbol_dict_present_in_version_1_7():\n+    # Check current behavior for SymPy 1.7 and beyond where __dict__ attribute exists\n+    s = Symbol('s')\n+    assert hasattr(s, '__dict__')\n+    assert s.__dict__ == {}\n+\n+def test_symbol_slots():\n+    # Verify that the `__slots__` definition is consistent\n+    s = Symbol('s')\n+    assert s.__slots__ == ('name',)\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..1a4f6c9 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -160,6 +161,21 @@ def test_sign():\n     x = Symbol('x', complex=True)\n     assert refine(sign(x), Q.zero(x)) == 0\n \n+def test_refine_arg():\n+    x = Symbol('x', complex=True)\n+    assert refine(arg(x), Q.positive(x)) == 0\n+    assert refine(arg(x), Q.negative(x)) == pi\n+\n+def test_refine_integral_with_complex():\n+    a, x = symbols('a x', real=True)\n+    J = Integral(sin(x)*exp(-a*x), (x, 0, oo))\n+    result = Piecewise((1/(a**2 + 1), 2*Abs(arg(a)) < pi), (Integral(exp(-a*x)*sin(x), (x, 0, oo)), True))\n+    assert J.doit() == result\n+    refined_result = Piecewise((1/(a**2 + 1), True))\n+    assert refine(J.doit(), Q.positive(a)) == refined_result\n+    assert refine(Abs(a), Q.positive(a)) == a\n+    assert refine(arg(a), Q.positive(a)) == 0\n+\n \n def test_func_args():\n     class MyClass(Expr):\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..b4b480d 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,14 +1,40 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n     Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict,\n     Piecewise, oo, Mul, factor, nsimplify, zoo, Subs, RootOf,\n-    AccumBounds, Matrix, zeros, ZeroMatrix)\n+    AccumBounds, Matrix, zeros, ZeroMatrix, sinh, clear_cache)\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+def test_issue_21373():\n+    # Replicate the issue and test that it succeeds\n+    clear_cache()\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        result = expr.subs({1: 1.0})\n+    except Exception as e:\n+        result = e\n+    assert not isinstance(result, PolynomialError), f\"Unexpected error: {result}\"\n+\n+    # Test variations described in the issue\n+    clear_cache()\n+    expr = tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr.subs({1: 1.0})  # should not raise PolynomialError\n+\n+    clear_cache()\n+    expr = cosh(Piecewise((x_r, y_r > x_r), (y_r, True)))\n+    assert expr.subs({1: 1.0})  # should not raise PolynomialError\n+\n+    clear_cache()\n+    expr = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)))\n+    assert expr.subs({1: 1.0})  # should not raise PolynomialError\n \n-def test_subs():\n+    clear_cache()\n+    expr = exp(Piecewise((x_r, y_r > x_r), (y_r, True)))\n+    assert expr.subs({1: 1.0})  # should not raise PolynomialError\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..1588c9a 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -34,7 +36,10 @@ def test_Symbol_kind():\n     assert comm_x.kind is NumberKind\n     assert noncomm_x.kind is UndefinedKind\n \n-def test_Integral_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..c7bed3a 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -130,7 +130,13 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 1])) == {S.One, x, y, x*y, x**2, x**2*y}\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n-\n+    \n+    assert set(itermonomials([x, y, z], 3, 3)) == {x**3, y**3, z**3, x**2*y, x**2*z, y**2*x, y**2*z, z**2*x, z**2*y, x*y*z}\n+    assert set(itermonomials([x, y, z], 4, 3)) == {x**3, y**3, z**3, x**2*y, x**2*z, y**2*x, y**2*z, z**2*x, z**2*y, x*y*z, \n+                                                  x**4, y**4, z**4, x**3*y, x**3*z, y**3*x, y**3*z, z**3*x, z**3*y, \n+                                                  x**2*y**2, x**2*z**2, y**2*z**2, y**2*x**2, z**2*x**2, x*y**2*z, \n+                                                  x*y*z**2, y*z**2*x, y*z*x**2, z*x**2*y}\n+    \n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..8f89e7e 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,6 +50,19 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n+    # Additional test cases for the fix\n+    # Testing with single variable zero-dimensional system\n+    raises(NotImplementedError, lambda: solve_poly_system((x - 1,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((y - 1,), x, y))\n+    # Testing the case with both equations affecting only one variable\n+    raises(NotImplementedError, lambda: solve_poly_system((x - 1, y - 1), x, y))\n+    # Testing multi-equation system with known infinite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system((x - 1, x), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((y - 1, y), x, y))\n+    # Adding cases for single equation in two variables\n+    raises(NotImplementedError, lambda: solve_poly_system((x + y - 2,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((x**2 + y**2 - 4,), x, y))\n+\n \n def test_solve_biquadratic():\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..399dd60 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n@@ -440,7 +442,29 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        # Evaluate with Point\n+        p = Point(1, 2)\n+        assert p == Point2D(1, 2)\n+\n+    # Additional tests with Point2D and Point3D\n+    with evaluate(False):\n+        # Evaluate with Point2D\n+        p2d = Point2D(3, 4)\n+        assert p2d == Point(3, 4)\n+\n+        # Evaluate with Point3D\n+        p3d = Point3D(5, 6, 7)\n+        assert p3d == Point(5, 6, 7)\n+\n+    # Ensuring the original syntax works without evaluate(False)\n+    p_original = Point2D(Integer(1), Integer(2))\n+    assert p_original == Point(1, 2)\n+\n+    p3d_original = Point3D(Integer(8), Integer(9), Integer(10))\n+    assert p3d_original == Point(8, 9, 10)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..2b798f0 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -338,7 +338,27 @@ def test_cse_Indexed():\n     assert len(replacements) > 0\n \n \n+\n def test_cse_MatrixSymbol():\n+    # Case where common subexpression elimination should only extract common parts\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    result = cse(A[0,0]*A[0,1] + A[0,0]*A[0,1]*A[0,2])\n+    expected = ([(symbols('x0'), A[0, 0]*A[0, 1])], [symbols('x0')*A[0, 2] + symbols('x0')])\n+    assert result == expected\n+\n+    # Ensure no redundant copying in a simple case\n+    B = MatrixSymbol(\"B\", 2, 2)\n+    C = MatrixSymbol(\"C\", 2, 2)\n+    expr = B * C + B * C\n+    replacements, reduced_exprs = cse(expr)\n+    assert len(replacements) == 1\n+\n+    # Ensure no variables like x0, x1 are just copies of full matrices\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    B = MatrixSymbol(\"B\", 3, 3)\n+    expr = A * B\n+    replacements, reduced_exprs = cse(expr)\n+    assert all(len(sub_rhs.free_symbols) > 0 for _, sub_rhs in replacements)  # No full matrix copying\n     # MatrixSymbols have non-Basic args, so make sure that works\n     A = MatrixSymbol(\"A\", 3, 3)\n     assert cse(A) == ([], [A])\n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..8db6967 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,8 +1,11 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n from sympy.simplify import simplify\n from sympy.tensor.array import Array\n+from sympy.tensor.array.dense_ndim_array import MutableDenseNDimArray\n+from sympy.tensor.array.sparse_ndim_array import MutableSparseNDimArray\n from sympy.tensor.array.dense_ndim_array import (\n     ImmutableDenseNDimArray, MutableDenseNDimArray)\n from sympy.tensor.array.sparse_ndim_array import (\n@@ -38,7 +41,22 @@ def test_array_negative_indices():\n         assert test_array[-1, -1] == 10\n \n \n-def test_issue_18361():\n+def test_issue_17851():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n+\n+def test_issue_and_18715():\n+    mutable_array_types = [\n+        MutableDenseNDimArray,\n+        MutableSparseNDimArray\n+    ]\n+    for array_type in mutable_array_types:\n+        A = array_type([0, 1, 2])\n+        A[0] += 5\n+        assert A[0] == 5\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n     C = Array([(x + x**2)/(x*sin(y)**2 + x*cos(y)**2), 2*sin(x)*cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..d8c2355 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,15 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_single_element_tuple():\n+    f2b = lambdify([], (1,))\n+    assert f2b() == (1,)\n+    assert 'return (1,)' in inspect.getsource(f2b)\n+\n+def test_two_element_tuple():\n+    f2b = lambdify([], (1, 2))\n+    assert f2b() == (1, 2)\n+    assert 'return (1, 2)' in inspect.getsource(f2b)\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..4dde778 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy import exp\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 100 + exp(expr)\n+    factor, dimension = SI._collect_factor_and_dimension(exp_expr)\n+    assert dimension == Dimension(1)\n+    assert factor == 100 + E\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..6950770 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -46,7 +46,37 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n-def test_tensor_product_commutator():\n+def test_issue_tensor_product_expansion():\n+    from sympy import expand, Mul, Add\n+    from sympy.physics.quantum import Dagger\n+\n+    # Original test cases from the patch\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2 * A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A * B, A) + 2 * TP(A * B, B) + TP(A, A) + TP(A, B)\n+    \n+    # New test cases\n+    # 1. Test with a tensor product of zero element and another operator\n+    assert TP(0, A + B).expand(tensorproduct=True) == 0\n+\n+    # 2. Test with scalar and operator multiplication in tensor product\n+    assert TP(3 * A, 4 * B).expand(tensorproduct=True) == 12 * TP(A, B)\n+    \n+    # 3. Test nested tensor products\n+    nested_tp = TP(TP(A + B, B + C), A)\n+    expanded_nested_tp = TP(A, B, A) + TP(A, C, A) + TP(B, B, A) + TP(B, C, A)\n+    assert nested_tp.expand(tensorproduct=True) == expanded_nested_tp\n+    \n+    # 4. Test tensor product with dagger (Hermitian conjugate)\n+    assert Dagger(TP(A, B)).expand(tensorproduct=True) == TP(Dagger(A), Dagger(B))\n+\n+    # 5. Test tensor product with complex numbers\n+    complex_expansion = TP(1 + 2*I, A + B).expand(tensorproduct=True)\n+    expected_complex_expansion = TP(1, A) + TP(1, B) + TP(2*I, A) + TP(2*I, B)\n+    assert complex_expansion == expected_complex_expansion\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..3fa2144 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,7 +563,55 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_equivalent_dimension_with_scaling():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    # Test where scaling factor affects the outcome\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 3 * meter / second)\n+\n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, -9.8 * meter / second**2)\n+\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 2 * second)\n+\n+    expr2 = A2*T2 + V2\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr2)\n+\n+    # Test with exact zero scaling factor leading to zero net effect\n+    V3 = Quantity('V3')\n+    SI.set_quantity_dimension(V3, velocity)\n+    SI.set_quantity_scale_factor(V3, 0 * meter / second)\n+\n+    expr3 = A2*T2 + V3\n+    # should not throw ValueError even if one factor's scale is zero\n+    SI._collect_factor_and_dimension(expr3)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..6507362 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, V, kilo\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,28 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Test cases for milli prefix with various units\n+    # Test with watt\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000  # Commutative check\n+\n+    # Test with volt as another unit\n+    V = Quantity('volt')\n+    assert milli * V == V / 1000\n+    assert V * milli == V / 1000  # Commutative check\n+\n+    # Test with kilo prefix to ensure scalability with larger prefixes\n+    assert milli * W * kilo == W\n+    assert milli * kilo == 10**-3 * 10**3\n+\n+    # Ensure combining prefixes gives correct result\n+    assert milli * milli * W == W / 1000000\n+    assert (milli * milli).scale_factor == 10**-6\n+\n+    # For completeness, test no dimensionality conflicts\n+    length_milli = length * milli\n+    assert length_milli.dimension == length.dimension\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..1630917 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -185,7 +185,8 @@ class GrandParent(models.Model):\n \n \n class Parent(GrandParent):\n-    pass\n+    class Meta:\n+        ordering = ['-pk']\n \n \n class Child(Parent):\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..2d8fd5f 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,7 +343,52 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_order_by_f_expression(self):\n+    def test_order_by_self_referencing_fk(self):\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2')\n+        a1 = Article.objects.create(headline='Article 1', author=author_1)\n+        a2 = Article.objects.create(headline='Article 2', author=author_2)\n+\n+        # Create self-referencing authors\n+        author_1.editor = Author.objects.create(name='Editor 1', editor=author_1)\n+        author_1.save()\n+        author_2.editor = Author.objects.create(name='Editor 2', editor=author_2)\n+        author_2.save()\n+\n+        # Test ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_order_by_self_referencing_fk_alternate(self):\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2')\n+        a1 = Article.objects.create(headline='Article 1', author=author_1)\n+        a2 = Article.objects.create(headline='Article 2', author=author_2)\n+\n+        # Create self-referencing authors\n+        root_author_1 = Author.objects.create(name='Root Editor 1')\n+        root_author_2 = Author.objects.create(name='Root Editor 2')\n+        author_1.editor = root_author_1\n+        author_1.save()\n+        author_2.editor = root_author_2\n+        author_2.save()\n+\n+        # Test ordering by self-referential foreign key using a workaround\n+        queryset = Article.objects.filter(author__isnull=False).annotate(editor_id=F('author__editor_id'))\n+        self.assertQuerysetEqual(\n+            queryset.order_by('editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n                 \"Article 1\",\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..bd48791 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -658,6 +658,21 @@ Java</label></li>\n <input id=\"id_language_1\" name=\"language\" type=\"radio\" value=\"J\" required> Java</label></div>\"\"\"\n         )\n \n+    def test_checkbox_select_multiple_subwidget_custom_id(self):\n+        \"\"\"\n+        Test that CheckboxSelectMultiple subwidgets use custom IDs set by auto_id.\n+        \"\"\"\n+        class CustomForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = CustomForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n+\n     def test_form_with_iterable_boundfield(self):\n         class BeatleForm(Form):\n             name = ChoiceField(\n@@ -673,6 +688,21 @@ Java</label></li>\n <label><input type=\"radio\" name=\"name\" value=\"george\" required> George</label>\n <label><input type=\"radio\" name=\"name\" value=\"ringo\" required> Ringo</label>\"\"\"\n         )\n+\n+    def test_checkbox_select_multiple_subwidget_custom_id(self):\n+        \"\"\"\n+        Test that CheckboxSelectMultiple subwidgets use custom IDs set by auto_id.\n+        \"\"\"\n+        class CustomForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = CustomForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n         self.assertHTMLEqual(\n             '\\n'.join('<div>%s</div>' % bf for bf in f['name']),\n             \"\"\"<div><label><input type=\"radio\" name=\"name\" value=\"john\" required> John</label></div>\n@@ -714,6 +744,21 @@ Java</label></li>\n             'value=\"paul\" id=\"id_name_1\" required> Paul</label>'\n         )\n \n+    def test_checkbox_select_multiple_subwidget_custom_id(self):\n+        \"\"\"\n+        Test that CheckboxSelectMultiple subwidgets use custom IDs set by auto_id.\n+        \"\"\"\n+        class CustomForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = CustomForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n+\n     def test_iterable_boundfield_select(self):\n         class BeatleForm(Form):\n             name = ChoiceField(choices=[('john', 'John'), ('paul', 'Paul'), ('george', 'George'), ('ringo', 'Ringo')])\n@@ -2925,6 +2970,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n <input type=\"number\" name=\"age\" id=\"id_age\" required></td></tr>\"\"\"\n         )\n \n+    def test_checkbox_select_multiple_subwidget_custom_id(self):\n+        \"\"\"\n+        Test that CheckboxSelectMultiple subwidgets use custom IDs set by auto_id.\n+        \"\"\"\n+        class CustomForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = CustomForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n+\n     def test_label_has_required_css_class(self):\n         \"\"\"\n         #17922 - required_css_class is added to the label_tag() of required fields.\n@@ -2940,6 +3000,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             f['field'].label_tag(attrs={'class': 'foo'}),\n             '<label for=\"id_field\" class=\"foo required\">Field:</label>'\n         )\n+\n+    def test_checkbox_select_multiple_subwidget_custom_id(self):\n+        \"\"\"\n+        Test that CheckboxSelectMultiple subwidgets use custom IDs set by auto_id.\n+        \"\"\"\n+        class CustomForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = CustomForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n         self.assertHTMLEqual(f['field2'].label_tag(), '<label for=\"id_field2\">Field2:</label>')\n \n     def test_label_split_datetime_not_displayed(self):\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..e4f2b61 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,10 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+from matplotlib.colors import LogNorm, Normalize\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -658,6 +662,28 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n+def test_update_colorbar_after_norm_change():\n+    # Prepare the image data\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    # Create a plot and add a colorbar\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Initially the scale of the colorbar should be linear\n+    assert cb.ax.yaxis.get_scale() == 'linear'\n+\n+    # Change the norm of the mappable to LogNorm\n+    plot.set_norm(LogNorm(vmin=img.min(), vmax=img.max()))\n+    \n+    # Update the colorbar to reflect the new norm\n+    fig.canvas.draw()\n+\n+    # The scale of the colorbar should now be logarithmic\n+    assert cb.ax.yaxis.get_scale() == 'log'\n+\n+\n def test_colorbar_get_ticks_2():\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..ba257ac 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -258,5 +258,39 @@ def test_set_output_mro():\n \n     class C(A, B):\n         pass\n-\n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_pandas_transform_output():\n+    \"\"\"Test FeatureUnion with a custom transformer and 'pandas' output configuration.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion, make_union\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None, **fit_params):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None):\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index()\n+\n+    # Prepare some input data\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data={\"value\": 10, \"date\": index.date})\n+\n+    # Use FeatureUnion with MyTransformer\n+    union = make_union(MyTransformer())\n+\n+    # Set output to pandas\n+    union.set_output(transform=\"pandas\")\n+    \n+    # Perform fit_transform and check for expected DataFrame output\n+    result = union.fit_transform(data)\n+    \n+    # Verify that the resulting DataFrame has correct index and columns\n+    expected_dates = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"D\").date\n+    expected_sum_values = [10 * 24] * len(expected_dates)\n+\n+    assert list(result[\"date\"]) == list(expected_dates)\n+    assert list(result[\"value\"]) == expected_sum_values\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..f86e599 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,12 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+import sys\n+from sphinx.testing.fixtures import app\n+from sphinx.ext.autodoc import do_autodoc\n+from sphinx.testing.util import SphinxTestApp\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..a488f4f 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,27 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_alignment():\n+    from sympy.abc import x\n+    from sympy import Sum, pprint, oo\n \n-def test_units():\n+    # Create the expression Sum(x, (x, 1, oo)) + 3\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    # The expected pretty printed output in unicode\n+    expected = u(\"\"\"\\\n+  \u221e       \\n\\\n+ ___      \\n\\\n+ \u2572        \\n\\\n+  \u2572   x   \\n\\\n+  \u2571   \u2500 + 3\\n\\\n+ \u2571        \\n\\\n+ \u203e\u203e\u203e      \\n\\\n+x = 1     \\\n+\"\"\")\n+\n+    # Assert that the pretty printed output matches the expected output\n+    assert upretty(expr) == expected\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..4538c4b 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,34 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.iterables import multiset\n+from sympy import raises\n+\n def test_uniq():\n+    # Existing tests remain unchanged\n+    ...\n+    \n+    # Additional test cases to thoroughly verify the fix\n+    def modifying_list_inside_uniq_raises_error():\n+        # Basic test case provided in the original test patch\n+        f = [1]\n+        raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+        f = [[1]]\n+        raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+        \n+        # Additional tests for non-trivial cases and types\n+        f = [1, 2, 3, 4]\n+        raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+        \n+        f = list('THISTLE')\n+        # Simulate the original issue example\n+        raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+        \n+        f = [1, 2, 2, 3, 3]\n+        raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    modifying_list_inside_uniq_raises_error()\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..c49374d 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,6 +8,7 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-15320": "",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..2aedfdf 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,7 +153,15 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                ).select_related('tournament_pool')\n+            )\n+            # The assertion logic: checking if tournament associations are correctly retained.\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +172,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..0434140 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -15,6 +16,9 @@ import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n+import pickle\n+import platform\n+from matplotlib.figure import Figure\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..07fd0e8 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,8 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn import PairGrid\n+from seaborn._oldcore import categorical_order\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1626,15 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_hue_in_map(self):\n+        iris = sns.load_dataset(\"iris\")\n+        # This should not raise an error\n+        g = PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+        except Exception as e:\n+            pytest.fail(f\"PairGrid plot with hue failed due to: {e}\")\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..87baa85 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -347,6 +347,29 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n+\n+def test_str_on_pytest_raises():\n+    import pytest\n+\n+    # Original try-except block\n+    try:\n+        raise LookupError(\"A\\nB\\nC\")\n+    except LookupError as e:\n+        expected_output = str(e)\n+\n+    # Using pytest.raises\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    \n+    # Ensure the full message can be retrieved using excinfo.value\n+    assert str(excinfo.value) == expected_output\n+\n+    # str(excinfo) should give a brief description\n+    # Depending on the environment, this part of the test may need adjustment\n+    assert str(excinfo) != expected_output\n+    assert str(excinfo).startswith(\"<ExceptionInfo\")\n+    assert \"LookupError\" in str(excinfo)\n+\n def test_excinfo_for_later():\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 4808225..8342580 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -107,6 +107,7 @@ def pytest_addoption(parser):\n \n     group = parser.getgroup(\"collect\", \"collection\")\n     group.addoption(\n+        \"-C\",\n         \"--collectonly\",\n         \"--collect-only\",\n         action=\"store_true\",\n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..2a97ab1 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -94,8 +94,14 @@ def missing_attr(c,\n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n \n-    def __init__(self, x: int) -> None:\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..4cfc2db 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -80,6 +80,13 @@ def test_Identity():\n     assert A*Im == A\n     assert In*A == A\n \n+    # Test case to verify total sum of elements in identity matrix\n+    # The sum of all elements in an identity matrix of size n should be n\n+    assert Sum(In[i, j], (i, 0, n-1), (j, 0, n-1)).doit() == n\n+\n+    # Specific case where n = 3\n+    assert Sum(In[i, j], (i, 0, 2), (j, 0, 2)).doit() == 3\n+\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..0268d90 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -250,8 +250,14 @@ def test_parseable():\n     from sympy.parsing.latex import parse_latex\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n-\n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_latex_fraction_parsing():\n+    from sympy.parsing.latex import parse_latex\n+    # Expected result with correct parentheses in denominator\n+    expected_expr = ((a**3 + b)/c)/(1/(c**2))\n+    # Parse the problematic latex expression\n+    parsed_expr = parse_latex(r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\")\n+    # Assert that the parsed expression matches the expected one\n+    assert parsed_expr == expected_expr\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}