{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..bca49ff 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -135,7 +135,32 @@ def test_separable(compound_model, result):\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n \n-def test_custom_model_separable():\n+def test_nested_compound_model_separable():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+\n+    # Flat model - no nesting, should be separable as expected\n+    expected_matrix_flat = np.array([[ True, False],\n+                                     [False,  True]])\n+    assert_allclose(separability_matrix(cm), expected_matrix_flat)\n+\n+    # Complex model - flat\n+    complex_model_flat = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+    expected_matrix_complex_flat = np.array([[ True,  True, False, False],\n+                                             [ True,  True, False, False],\n+                                             [False, False,  True, False],\n+                                             [False, False, False,  True]])\n+    assert_allclose(separability_matrix(complex_model_flat), expected_matrix_complex_flat)\n+\n+    # Nested compound model\n+    nested_compound_model = m.Pix2Sky_TAN() & cm\n+    expected_matrix_nested = np.array([[ True,  True, False, False],\n+                                       [ True,  True, False, False],\n+                                       [False, False,  True,  True],\n+                                       [False, False,  True,  True]])\n+    assert_allclose(separability_matrix(nested_compound_model), expected_matrix_nested)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..f9eca53 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,10 +1,52 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n \n-from .common import assert_almost_equal, assert_equal\n+from astropy.table import QTable\n+import astropy.units as u\n+import numpy as np\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing RST table with header_rows for name and unit\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.ct})\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    expected_output = [\n+        \"===== ========\",\n+        \" wave response\",\n+        \"   nm       ct\",\n+        \"===== ========\",\n+        \"350.0     0.7\",\n+        \"950.0     1.2\",\n+        \"===== ========\",\n+    ]\n+    assert out.getvalue().splitlines() == expected_output\n \n \n def assert_equal_splitlines(arg1, arg2):\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..3b049bf 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -42,8 +42,65 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert table2.meta[\"comments\"][0].startswith(\"WT -- hardness\")\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n+import pytest\n+import numpy as np\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_case_insensitive_read(tmp_path, lowercase):\n+    # Example QDP content with case-insensitivity in mind\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    READ TERR 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n+\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"test_case.qdp\")\n \n-def test_roundtrip(tmp_path):\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+    with pytest.warns(AstropyUserWarning) as record:\n+        table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n+    assert np.any(\n+        [\n+            \"This file contains multiple command blocks\" in r.message.args[0]\n+            for r in record\n+        ]\n+    )\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..0873810 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,46 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..18de58c 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,29 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_exponent_D_replacement(self):\n+        \"\"\"Test that 'D' exponents are replaced with 'E' in ASCII output where expected.\"\"\"\n+        # Using a column with 'D' format\n+        r1 = np.array([1.23e4, 5.67e8, 9.01e2])\n+        c1 = fits.Column(name='expD', format='D', array=r1)\n+        c2 = fits.Column(name='norm', format='E', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1, c2])\n+        \n+        hdu.writeto(self.temp('exp_test.fits'), overwrite=True)\n+        \n+        with open(self.temp('exp_test.fits')) as f:\n+            content = f.read()\n+            # Ensure D exponents are replaced by E only where expected\n+            assert '1.23000000000000000E+04' in content\n+            assert '5.67000000000000000E+08' in content\n+            assert '9.01000000000000000E+02' in content\n+        \n+        with fits.open(self.temp('exp_test.fits')) as hdul:\n+            # Ensure data consistency in the binary representation\n+            hdu_data = hdu.data\n+            hdul_data = hdul[1].data\n+            assert comparerecords(hdu_data, hdul_data)\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..2cb942f 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,17 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        In the absence of a FILE_UPLOAD_PERMISSIONS setting, the default\n+        should be 0o644.\n+        \"\"\"\n+        from django.core.files.storage import default_storage\n+        from django.conf import settings\n+\n+        default_permissions = getattr(settings, 'FILE_UPLOAD_PERMISSIONS', 0o644)\n+        self.assertEqual(default_storage.file_permissions_mode, default_permissions)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..1cd5176 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -366,8 +366,51 @@ class BasicExpressionsTests(TestCase):\n             pk=F('company_ceo_set__num_employees')\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 1)\n-\n-    def test_ticket_18375_chained_filters(self):\n+    def test_order_by_multiline_rawsql_distinct_clauses(self):\n+        # Test for issue where multiline RawSQL clauses with identical last lines are incorrectly treated as duplicates\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN status = 'A'\n+                     THEN (date_a, date_b)\n+                     ELSE NULL END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN status = 'B'\n+                     THEN (date_c, date_d)\n+                     ELSE NULL END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN status = 'C'\n+                     THEN (date_e, date_f)\n+                     ELSE NULL END\n+            ''', []).asc(),\n+        )\n+        # Let's assume MyModel.objects.all() should return items in a specific order based on the customized SQL order\n+        expected_order = [self.obj1, self.obj2, self.obj3]\n+        self.assertSequenceEqual(MyModel.objects.all().order_by(*raw_order_by), expected_order)\n+\n+    def test_order_by_multiline_sql(self):\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN num_employees > 1000\n+                     THEN num_chairs\n+                     ELSE 0 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN num_chairs > 1\n+                     THEN 1\n+                     ELSE 0 END\n+            ''', []).asc()\n+        )\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [self.example_inc, self.gmbh, self.foobar_ltd],\n+                )\n         # F() expressions do not reuse joins from previous filter.\n         qs = Employee.objects.filter(\n             company_ceo_set__num_employees=F('pk')\n",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..c457593 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -65,8 +65,21 @@ class TestSerialization(SimpleTestCase):\n         self.assertEqual(instance.field, datetime.timedelta(days=1, hours=1))\n \n \n+from django.core import exceptions\n+\n class TestValidation(SimpleTestCase):\n \n+    def test_invalid_format_error_message(self):\n+        field = models.DurationField()\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean('14:00', None)\n+        self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+            \"'14:00' value has an invalid format. \"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n+\n     def test_invalid_string(self):\n         field = models.DurationField()\n         with self.assertRaises(exceptions.ValidationError) as cm:\n@@ -84,4 +97,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex fe3a5d1..28b2658 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -1,3 +1,4 @@\n+\n import re\n \n from django.core import validators\n@@ -7,7 +8,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,9 +18,9 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n     )\n-    flags = 0\n+    flags = 0\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..069230f 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,16 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        # Test handling memoryview in HttpResponse\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+        # Test setting content to memoryview after response creation\n+        r = HttpResponse()\n+        r.content = memoryview(b'updated content')\n+        self.assertEqual(r.content, b'updated content')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..15ff92d 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n@@ -464,7 +466,18 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a User instance\n+        user_instance = User.objects.create()\n+        # Ensure fast deletion is possible\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(user_instance))\n+\n+        # Perform the delete operation\n+        user_instance.delete()\n+\n+        # Assert that the primary key is now None\n+        self.assertIsNone(user_instance.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..9e32a72 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,8 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n+from django.db.utils import IntegrityError\n+from django.test.utils import captured_stdout\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n@@ -140,6 +143,48 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Verify that migrating proxy model permissions does not duplicate existing permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        # Create existing permissions\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+\n+        # Attempt to apply migration\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_migrate_raises_integrity_error_for_duplicate_permissions(self):\n+        \"\"\"\n+        Check if IntegrityError is raised when duplicate permissions exist for a proxy model.\n+        \"\"\"\n+        # Create a duplicate permission scenario\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+\n+        # Try to re-create the same Permission (which should fail)\n+        with self.assertRaises(IntegrityError):\n+            Permission.objects.create(\n+                content_type=proxy_model_content_type,\n+                codename='add_proxy',\n+                name='Can add proxy',\n+            )\n+\n     def test_user_keeps_same_permissions_after_migrating_backward(self):\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..c3cf7c5 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -3,6 +3,9 @@ import os\n import py_compile\n import shutil\n import sys\n+import os\n+import sys\n+import shutil\n import tempfile\n import threading\n import time\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..77c2509 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -140,9 +140,22 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         fake_main = types.ModuleType('__main__')\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n-\n-class TestCommonRoots(SimpleTestCase):\n-    def test_common_roots(self):\n+    def test_path_with_embedded_null_bytes_in_various_places(self):\n+        # Testing with null bytes in various parts of the path\n+        test_paths = [\n+            'normal_path.py',\n+            'nulled_\\x00_byte_file.py',\n+            'nulled_directory/\\x00file.py',\n+            '\\x00leading_null_byte.py',\n+            'trailing_null_byte.py\\x00',\n+            'di\\x00rectory/another\\x00file.py',\n+        ]\n+        for path in test_paths:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n         paths = (\n             Path('/first/second'),\n             Path('/first/second/third'),\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..981244e 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -6,6 +6,8 @@ import sys\n import tempfile\n import threading\n from io import StringIO\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from pathlib import Path\n from unittest import mock\n \n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..11bcd4f 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -211,8 +211,50 @@ class CharFieldTests(SimpleTestCase):\n             thing = models.CharField(max_length=100, blank=True, choices=Things())\n \n         self.assertEqual(ThingWithIterableChoices._meta.get_field('thing').check(), [])\n+    def test_choices_exceed_max_length(self):\n+        # Testing a simple case where the max length is too short for choices\n+        class Model(models.Model):\n+            field = models.CharField(max_length=2, choices=[\n+                ('ABC', 'Alphabet'),\n+                ('OK', 'Okay'),\n+            ])\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_grouped_choices_exceed_max_length(self):\n+        # Testing a case with grouped choices where max length is too short\n+        class Model(models.Model):\n+            group = models.CharField(max_length=3, choices=[\n+                ('Group1', [('ABCD', 'Too long'), ('OK', 'OK')]),\n+                ('Group2', [('XYZ', 'XYZ')]),\n+            ])\n \n-    def test_choices_containing_non_pairs(self):\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (4 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_no_error_when_max_length_fits_longest_choice(self):\n+        # Testing when max_length fits the longest choice\n+        class Model(models.Model):\n+            field = models.CharField(max_length=4, choices=[\n+                ('ABC', 'Alphabet'),\n+                ('OK', 'Okay'),\n+            ])\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n         class Model(models.Model):\n             field = models.CharField(max_length=10, choices=[(1, 2, 3), (1, 2, 3)])\n \n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..48b99aa 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,6 +247,25 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n+    def test_serialize_translated_enum(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            max_length=128,\n+            choices=[(m.value, m.name) for m in TranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', 'GOOD'), \"\n+            \"('Bad', 'BAD')], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..e3c4879 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,9 +1,11 @@\n+\n import unittest\n from datetime import datetime\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n+from unittest import mock\n from django.utils.http import (\n     base36_to_int, escape_leading_slashes, http_date, int_to_base36,\n     is_safe_url, is_same_domain, parse_etags, parse_http_date, quote_etag,\n@@ -312,7 +314,28 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mocked_time(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # January 1st, 2022\n+        mocked_datetime.utcnow.return_value = datetime(2022, 1, 1, 0, 0, 0)\n+\n+        cases = [\n+            ('Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            ('Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            ('Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            ('Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            ('Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+            ('Wednesday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            ('Friday, 31-Dec-50 08:49:37 GMT', datetime(2050, 12, 31, 8, 49, 37)),  # Additional test case\n+        ]\n+        \n+        for rfc850str, expected_date in cases:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..06e1f8a 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -109,8 +109,17 @@ class ChoicesTests(SimpleTestCase):\n         self.assertEqual(Gender.labels[0], '(Undeclared)')\n         self.assertEqual(Gender.values[0], None)\n         self.assertEqual(Gender.names[0], '__empty__')\n+    def test_textchoices_value_type_consistency(self):\n+        class MyChoice(models.TextChoices):\n+            FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+            SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n \n-    def test_textchoices_functional_api(self):\n+        class MyObject(models.Model):\n+            my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+        my_object = MyObject(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n         Medal = models.TextChoices('Medal', 'GOLD SILVER BRONZE')\n         self.assertEqual(Medal.labels, ['Gold', 'Silver', 'Bronze'])\n         self.assertEqual(Medal.values, ['GOLD', 'SILVER', 'BRONZE'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..52dbd15 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -187,7 +187,38 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n \n-class GetChoicesTests(SimpleTestCase):\n+class OverrideGetFieldDisplayTests(SimpleTestCase):\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_default_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n+        f = FooBar(foo_bar=2)\n+        self.assertEqual(f.get_foo_bar_display(), 'bar')\n+        f = FooBar(foo_bar=3)\n+        self.assertEqual(f.get_foo_bar_display(), '3')  # testing with an unknown choice\n+\n+    def test_inherited_model_override(self):\n+        class BaseModel(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        class DerivedModel(BaseModel):\n+            def get_foo_bar_display(self):\n+                return \"custom display\"\n+\n+        f = DerivedModel(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'custom display')\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..13e96dd 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -14,4 +14,5 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.modules, name='modules'),\n+]\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..fc3ed0a 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,6 @@\n+\n+import django\n+\n import pickle\n \n from django import forms\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..122dec1 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,7 +76,43 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_no_error_for_valid_base_language(self):\n+        tests = [\n+            # Base language available, should not raise E004.\n+            'de-at',\n+            'fr-CA',\n+            'ca-ES-valencia',\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+        ],\n+    )\n+    def test_error_for_missing_base_language(self):\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        with self.settings(LANGUAGE_CODE='it-IT'):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(msg, id='translation.E004'),\n+            ])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..8f50217 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -175,8 +175,18 @@ class UtilsTests(SimpleTestCase):\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n-\n-    def test_number_formats_display_for_field(self):\n+    def test_jsonfield_display_for_readonly(self):\n+        # Test that JSONField is correctly displayed as JSON when readonly\n+        tests = [\n+            ({'foo': 'bar'}, '{\"foo\": \"bar\"}'),\n+            (['foo', 'bar'], '[\"foo\", \"bar\"]'),\n+            ('foo', '\"foo\"'),\n+            (42, '42'),  # Non-JSON encodable\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..539a674 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,71 @@\n+\n+class TestDeserializeDbFromString(TestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_foreign_key_constraint(self):\n+        # Test deserialization with foreign key constraints causing an IntegrityError.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": 1}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        with self.assertRaises(IntegrityError):\n+            connection.creation.deserialize_db_from_string(data)\n+\n+    def test_successful_deserialization(self):\n+        # Successful deserialization with proper order\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 3,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 3,\n+                \"fields\": {\"obj\": 3}\n+            }\n+        ]\n+        \"\"\"\n+        with transaction.atomic():\n+            connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=3)\n+        obj_ref = ObjectReference.objects.get(pk=3)\n+        self.assertEqual(obj.obj_ref_id, obj_ref.pk)\n+        self.assertEqual(obj_ref.obj_id, obj.pk)\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +73,9 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TestCase\n+from django.db import transaction, IntegrityError\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..b583b7b 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,6 +159,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_correct_recursive_relationship_hint(self):\n+        class Category(models.Model):\n+            name = models.CharField(max_length=100)\n+\n+        class Product(models.Model):\n+            name = models.CharField(max_length=100)\n+            categories = models.ManyToManyField(\n+                'Category',\n+                through='ProductCategory'\n+            )\n+\n+        class ProductCategory(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+            category = models.ForeignKey(Category, models.CASCADE)\n+            extra_info = models.CharField(max_length=50)\n+\n+        field = Product._meta.get_field('categories')\n+        self.assertEqual(field.check(from_model=Product), [\n+            Error(\n+                \"The model is used as an intermediate model by 'invalid_models_tests.Product.categories', but it has more than one foreign key from 'Product', which is ambiguous. You must specify which foreign key Django should use via the through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"ProductCategory\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..55d79e8 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1241,6 +1241,48 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'tokens': [reporter_filter.cleansed_substitute, reporter_filter.cleansed_substitute],\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'outer_list': [\n+                {'inner_list': [{'password': 'secret'}]},\n+            ],\n+            'token': ['1234-5678', 'abcd-efgh'],\n+        }\n+        cleansed = {\n+            'outer_list': [\n+                {'inner_list': [{'password': reporter_filter.cleansed_substitute}]},\n+            ],\n+            'token': [reporter_filter.cleansed_substitute, reporter_filter.cleansed_substitute],\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+\n     def test_cleanse_setting_recurses_in_dictionary(self):\n         reporter_filter = SafeExceptionReporterFilter()\n         initial = {'login': 'cooper', 'password': 'secret'}\n@@ -1249,6 +1291,48 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n+    def test_cleanse_setting_recurses_in_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'tokens': [reporter_filter.cleansed_substitute, reporter_filter.cleansed_substitute],\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'outer_list': [\n+                {'inner_list': [{'password': 'secret'}]},\n+            ],\n+            'token': ['1234-5678', 'abcd-efgh'],\n+        }\n+        cleansed = {\n+            'outer_list': [\n+                {'inner_list': [{'password': reporter_filter.cleansed_substitute}]},\n+            ],\n+            'token': [reporter_filter.cleansed_substitute, reporter_filter.cleansed_substitute],\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+\n     def test_request_meta_filtering(self):\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n@@ -1257,6 +1341,48 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'tokens': [reporter_filter.cleansed_substitute, reporter_filter.cleansed_substitute],\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'outer_list': [\n+                {'inner_list': [{'password': 'secret'}]},\n+            ],\n+            'token': ['1234-5678', 'abcd-efgh'],\n+        }\n+        cleansed = {\n+            'outer_list': [\n+                {'inner_list': [{'password': reporter_filter.cleansed_substitute}]},\n+            ],\n+            'token': [reporter_filter.cleansed_substitute, reporter_filter.cleansed_substitute],\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+\n     def test_exception_report_uses_meta_filtering(self):\n         response = self.client.get('/raises500/', HTTP_SECRET_HEADER='super_secret')\n         self.assertNotIn(b'super_secret', response.content)\n@@ -1265,6 +1391,48 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             HTTP_SECRET_HEADER='super_secret',\n             HTTP_ACCEPT='application/json',\n         )\n+\n+    def test_cleanse_setting_recurses_in_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'tokens': [reporter_filter.cleansed_substitute, reporter_filter.cleansed_substitute],\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'outer_list': [\n+                {'inner_list': [{'password': 'secret'}]},\n+            ],\n+            'token': ['1234-5678', 'abcd-efgh'],\n+        }\n+        cleansed = {\n+            'outer_list': [\n+                {'inner_list': [{'password': reporter_filter.cleansed_substitute}]},\n+            ],\n+            'token': [reporter_filter.cleansed_substitute, reporter_filter.cleansed_substitute],\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n         self.assertNotIn(b'super_secret', response.content)\n \n \n",
  "django__django-12708": "",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..e12bf7b 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,31 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_zero_deletions_with_fk(self):\n+        \"\"\"\n+        Verifies that the result for QuerySet.delete returns a consistent output\n+        for models with foreign keys when zero objects are deleted.\n+        \"\"\"\n+        # Assuming HiddenUserProfile has a foreign key\n+        existed_objs = {\n+            HiddenUserProfile._meta.label: HiddenUserProfile.objects.count(),\n+        }\n+        deleted, deleted_objs = HiddenUserProfile.objects.filter(id__lt=0).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {model: 0 for model in existed_objs})\n+\n+    def test_zero_deletions_without_fk(self):\n+        \"\"\"\n+        Verifies that the result for QuerySet.delete returns a consistent output\n+        for models without foreign keys when zero objects are deleted.\n+        \"\"\"\n+        # Assuming M is a model without foreign keys\n+        existed_objs = {\n+            M._meta.label: M.objects.count(),\n+        }\n+        deleted, deleted_objs = M.objects.filter(id__lt=0).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {model: 0 for model in existed_objs})\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..83f3724 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,51 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_not_found(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct an HTTP request for a non-existent static file.\n+        scope = self.async_request_factory._base_scope(path='/static/non-existent.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+\n+        # Read the response.\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], b'')\n+\n+        # Ensure response.close() finishes.\n+        await communicator.wait()\n+\n+    async def test_static_file_modified_header(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct an HTTP request for a static file.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+\n+        # Get the file modification time\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        stat = file_path.stat()\n+\n+        # Read the response start.\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertIn(\n+            (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            response_start['headers']\n+        )\n+\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+\n+        # Ensure response.close() finishes.\n+        await communicator.wait()\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..7615fbb 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -203,7 +203,17 @@ class TestUtilsText(SimpleTestCase):\n         # interning the result may be useful, e.g. when fed to Path.\n         self.assertEqual(sys.intern(text.slugify('a')), 'a')\n \n-    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_slugify_strip_chars(self):\n+        # Additional test cases to verify slugify strips leading/trailing dashes and underscores\n+        items = (\n+            ('---strip-dashes---', 'strip-dashes', False),\n+            ('__strip-underscores__', 'strip-underscores', False),\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('--mix--dashes__and-underscores__', 'mix--dashes__and-underscores', False),\n+            ('---already-slugified-value---', 'already-slugified-value', False),\n+        )\n+        for value, output, is_unicode in items:\n+            self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n     def test_unescape_entities(self):\n         items = [\n             ('', ''),\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..315ec61 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2817,6 +2817,70 @@ class LimitChoicesToTests(TestCase):\n \n     def test_fields_for_model_applies_limit_choices_to(self):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n+\n+    @isolate_apps('model_forms')\n+    def test_duplicate_options_in_fk_formfield(self):\n+        # Create characters\n+        marley = Character.objects.create(username='Marley', last_action=timezone.now())\n+        threepwood = Character.objects.create(username='Threepwood', last_action=timezone.now())\n+\n+        # Create jokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+\n+        # Add relationships\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        # Create a form for CharacterDetails model and use it to test queryset\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n     def test_callable_called_each_time_form_is_instantiated(self):\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..870ab14 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -7,10 +7,41 @@ from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n from django.test import SimpleTestCase\n from django.test.utils import isolate_apps\n+from django.db import models\n \n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models should not be equal across different models.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +378,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..0c8117a 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,7 +45,30 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n-    def test_available_apps(self):\n+from django.urls import reverse\n+from django.test import RequestFactory, TestCase\n+from django.contrib.admin.sites import AdminSite\n+from django.contrib.auth.models import User\n+from myapp.models import Article\n+\n+class CustomAdminSiteTests(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.site = AdminSite()\n+\n+    def test_app_list_contains_model_class(self):\n+        request = self.factory.get(reverse('admin:index'))\n+        app_list = self.site.get_app_list(request)\n+\n+        # Check that the model class is included in the app_list for Article\n+        admin_views = next(app for app in app_list if app['app_label'] == 'admin_views')\n+        article_model = next(model for model in admin_views['models'] if model['object_name'] == 'Article')\n+        self.assertEqual(article_model['model'], Article)\n+\n+        # Check that the model class is included in the app_list for User\n+        auth = next(app for app in app_list if app['app_label'] == 'auth')\n+        user_model = next(model for model in auth['models'] if model['object_name'] == 'User')\n+        self.assertEqual(user_model['model'], User)\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..cd66fb6 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,7 +1,10 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n@@ -37,7 +40,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_invalidation_on_email_change(self):\n+        \"\"\"Ensure password reset tokens are invalidated after an email change.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertTrue(p0.check_token(user, tk1))\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertFalse(p0.check_token(user, tk1))\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..2559873 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -27,7 +27,9 @@ from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n from django.db import ConnectionHandler, connection\n-from django.db.migrations.recorder import MigrationRecorder\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.core.management import CommandError\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n@@ -1865,6 +1867,42 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('settings', 'alternate_settings'), ('traceback', False), \"\n             \"('verbosity', 1)]\" % option_b\n         )\n+    \n+    def test_program_name_from_custom_argv_no_prog_name(self):\n+        \"\"\"\n+        Test that using argv where the first argument is None uses 'python -m django' as the prog name,\n+        mimicking expected behavior when sys.argv is improperly set.\n+        \"\"\"\n+        args = ['help', 'startapp']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin startapp', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_when_explicitly_passed(self):\n+        \"\"\"\n+        Test that execute_from_command_line uses the prog name provided in argv\n+        explicitly instead of using the default sys.argv value.\n+        \"\"\"\n+        args = ['custom-admin', 'migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            execute_from_command_line(args)\n+        self.assertIn('usage: custom-admin migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_falls_back_to_sys_argv(self):\n+        \"\"\"\n+        Test the execution when sys.argv has a valid value and argv=None\n+        to ensure sys.argv is still used as a fallback.\n+        \"\"\"\n+        with captured_stdout() as out, captured_stderr() as err:\n+            execute_from_command_line(None)\n+        # This might depend on the entry point if running standalone test.\n+        # We're assuming 'django-admin' is common but would be sys.argv[0] in reality.\n+        common_prog_name = 'django-admin'\n+        self.assertIn(f'usage: {common_prog_name} help', out.getvalue() or '')\n+        self.assertEqual(err.getvalue(), '')\n \n \n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..1acd8f2 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -10,6 +11,48 @@ from django.test.utils import captured_stdin, captured_stdout\n \n class ShellCommandTestCase(SimpleTestCase):\n \n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     def test_command_option(self):\n         with self.assertLogs('test', 'INFO') as cm:\n             call_command(\n@@ -49,4 +92,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..848d850 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,7 +1013,28 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_default_verbose_name_plural(self):\n+        class VerboseNameInlineOnly(TabularInline):\n+            model = Profile\n+            verbose_name = 'Single child'\n+\n+        class NoVerboseName(TabularInline):\n+            model = VerboseNameProfile\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            VerboseNameInlineOnly,\n+            NoVerboseName,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        # Inline with only verbose_name specified, check if verbose_name_plural defaults to it.\n+        self.assertContains(response, '<h2>Single childs</h2>')\n+        # Inline with neither specified, defaults to model verbose_name_plural.\n+        self.assertContains(response, '<h2>Verbose name profiles</h2>')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..7a7b083 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -581,6 +581,11 @@ class TestQuerying(TestCase):\n         self.assertSequenceEqual(query, [('m',), (None,)])\n \n     def test_isnull_key(self):\n+        # key__isnull=True should only match objects that do not have the key or have key with a non-null value.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         # key__isnull=False works the same as has_key='key'.\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..7a16320 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -165,12 +165,29 @@ class DispatcherTests(SimpleTestCase):\n         def fails(val, **kwargs):\n             raise ValueError('this')\n         a_signal.connect(fails)\n-        result = a_signal.send_robust(sender=self, val=\"test\")\n+        import logging\n+        from django.dispatch import Signal\n+        from types import TracebackType\n+\n+        a_signal = Signal()\n+\n+        with self.assertLogs('django.dispatch', 'ERROR') as cm:\n+            result = a_signal.send_robust(sender=self, val=\"test\")\n         err = result[0][1]\n         self.assertIsInstance(err, ValueError)\n         self.assertEqual(err.args, ('this',))\n         self.assertTrue(hasattr(err, '__traceback__'))\n         self.assertIsInstance(err.__traceback__, TracebackType)\n+\n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(),\n+            f'Error calling {self.test_send_robust_fail.__name__}.<locals>.fails in Signal.send_robust() (this)',\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        _, exc_value, _ = log_record.exc_info\n+        self.assertIsInstance(exc_value, ValueError)\n+        self.assertEqual(str(exc_value), 'this')\n         a_signal.disconnect(fails)\n         self.assertTestIsClean(a_signal)\n \n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..55a6c6a 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,9 +281,22 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n-    def test_modelchoicefield(self):\n+    def test_modelchoicefield(self):        \n+        # Additional test to check the value is replaced in the invalid_choice error message\n+        f_with_value_placeholder = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={'invalid_choice': '\"%(value)s\" is not one of the available choices.'},\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'], \n+            f_with_value_placeholder.clean,\n+            'invalid',\n+        )\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +320,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..b77b54a 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,14 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+from django.db import models\n+\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..26ad2b0 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,7 +17,19 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n-    def test_combine_or_both_empty(self):\n+    def test_combine_or_with_dict_keys(self):\n+        empty_dict_keys_q = Q(x__in={}.keys())\n+        self.assertEqual(empty_dict_keys_q & Q(), empty_dict_keys_q)\n+        self.assertEqual(Q() & empty_dict_keys_q, empty_dict_keys_q)\n+        self.assertEqual(empty_dict_keys_q | Q(), empty_dict_keys_q)\n+        self.assertEqual(Q() | empty_dict_keys_q, empty_dict_keys_q)\n+\n+        # Test with non-empty dict_keys\n+        non_empty_dict_keys_q = Q(x__in={1: 'a', 2: 'b'}.keys())\n+        self.assertEqual(non_empty_dict_keys_q & Q(), non_empty_dict_keys_q)\n+        self.assertEqual(Q() & non_empty_dict_keys_q, non_empty_dict_keys_q)\n+        self.assertEqual(non_empty_dict_keys_q | Q(), non_empty_dict_keys_q)\n+        self.assertEqual(Q() | non_empty_dict_keys_q, non_empty_dict_keys_q)\n         self.assertEqual(Q() | Q(), Q())\n \n     def test_combine_not_q_object(self):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..62e8a33 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -36,6 +36,9 @@ from .models import (\n )\n \n \n+from django.db.models import Q\n+from django.db.models.expressions import Exists, OuterRef\n+\n class BasicExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n@@ -794,6 +797,26 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n+    def test_q_exists_operations_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        # Q() & Exists() should not raise a TypeError\n+        try:\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo))\n+            no_type_error = True\n+        except TypeError:\n+            no_type_error = False\n+        self.assertTrue(no_type_error, \"Q & Exists raised a TypeError\")\n+        \n+        # Exists() & Q() should not raise a TypeError\n+        try:\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30))\n+            no_type_error = True\n+        except TypeError:\n+            no_type_error = False\n+        self.assertTrue(no_type_error, \"Exists & Q raised a TypeError\")\n+\n     def test_boolean_expression_combined(self):\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..d9cac81 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1127,8 +1127,32 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[0], func)\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n-\n-    def test_resolver_match_on_request(self):\n+from functools import partial\n+from django.urls import resolve, path\n+from django.test import SimpleTestCase, override_settings\n+from . import views\n+\n+class ReprFunctoolsPartialTests(SimpleTestCase):\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        # Test cases for various partial function scenarios.\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = (\n+                    f\"functools.partial({views.empty_view!r}, \"\n+                    f\"template_name='{template_name}')\"\n+                )\n+                self.assertEqual(\n+                    repr(resolve(f'/{name}/')),\n+                    f\"ResolverMatch(func={func}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\",\n+                )\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..c4b2bf1 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -67,6 +68,26 @@ class TestDefaultPK(SimpleTestCase):\n                 pass\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -83,6 +104,26 @@ class TestDefaultPK(SimpleTestCase):\n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..5e1f063 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2196,6 +2196,15 @@ class StartApp(AdminScriptTestCase):\n                     \"CommandError: '%s' is not a valid app directory. Please \"\n                     \"make sure the directory is a valid identifier.\" % bad_target\n                 )\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test that starting an app with a directory name that has a trailing slash works correctly.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app_with_slash/')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app_with_trail', os.path.join('apps', 'app_with_slash', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n \n     def test_importable_target_name(self):\n         _, err = self.run_django_admin(['startapp', 'app', 'os'])\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..0f9b433 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,5 +1,6 @@\n import datetime\n import re\n+from django.forms import forms\n from unittest import mock\n \n from django.contrib.auth.forms import (\n@@ -1020,6 +1021,19 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_widget_label(self):\n+        \"\"\"\n+        Test that the ReadOnlyPasswordHashWidget's label does not have a 'for' attribute.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        # Check that the widget does not produce an id for label\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        # Ensure the label rendered does not have a 'for' attribute\n+        self.assertNotIn('for=', bound_field.label_tag())\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..68e66d0 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,29 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_serialize_missing_model_import(self):\n+        \"\"\"\n+        Test that 'models' import is added when custom migrations involve models.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        # Simulating migration writer behavior\n+        field = models.TextField()\n+        writer = MigrationWriter(None)\n+        serialized = writer.serialize(field)\n+\n+        self.assertIn(\"import models\", serialized[1], msg=\"Missing import statement for 'models'.\")\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..d7d7b7c 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,13 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n+        # Assert that non-form errors are returned correctly\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        # Assert that the 'nonform' CSS class is included in the error HTML\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +364,13 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n+        # Assert that non-form errors are returned correctly\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        # Assert that the 'nonform' CSS class is included in the error HTML\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +994,13 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n+        # Assert that non-form errors are returned correctly\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        # Assert that the 'nonform' CSS class is included in the error HTML\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..d6dc1d9 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -20,6 +20,13 @@ class M2mThroughTests(TestCase):\n         cls.rock = Group.objects.create(name='Rock')\n         cls.roll = Group.objects.create(name='Roll')\n \n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n+\n     def test_retrieve_intermediate_items(self):\n         Membership.objects.create(person=self.jim, group=self.rock)\n         Membership.objects.create(person=self.jane, group=self.rock)\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..83457c7 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -294,7 +294,75 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n-@override_settings(ROOT_URLCONF='admin_views.urls')\n+import datetime\n+import json\n+from django.urls import path\n+from django.test import TestCase\n+from django.utils.decorators import method_decorator\n+from django.contrib.auth import get_user_model\n+from django.views.decorators.csrf import csrf_exempt\n+from admin_views.models import Question\n+from ..views.autocomplete import AutocompleteJsonView\n+\n+User = get_user_model()\n+\n+class AutocompleteJsonViewTests(TestCase):\n+    @method_decorator(csrf_exempt)\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        self.client.login(username='super', password='secret')\n+        self.factory = RequestFactory()\n+        self.url = '/autocomplete/'\n+        self.opts = {}\n+        self.as_view_args = {\n+            \"admin_site\": None\n+        }\n+\n+    def test_autocomplete_json_view(self):\n+        \"\"\"Test autocomplete view with custom serialized result.\"\"\"\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        # Setup environment\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n+    def test_autocomplete_json_view_additional_field(self):\n+        \"\"\"Test if additional fields can be serialized.\"\"\"\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                result = super().serialize_result(obj, to_field_name)\n+                result['extra_field'] = 'extra_value'\n+                return result\n+\n+        Question.objects.create(question='Extra Field Test', posted=datetime.date(2023, 10, 1))\n+        request = self.factory.get(self.url, {'term': 'extra', **self.opts})\n+        request.user = self.superuser\n+        response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertTrue(any('extra_field' in item and item['extra_field'] == 'extra_value' for item in data['results']))\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n \n",
  "django__django-14787": "",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..84f952c 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +343,23 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    \n+    def test_model_choice_iterator_value_is_hashable(self):\n+        # Set up two different instances with the same primary key to test hashability.\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_clone = ModelChoiceIteratorValue(self.c1.pk, None)  # Simulating a clone with same pk\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Ensure that instances with the same pk hash the same.\n+        self.assertEqual(hash(value_1), hash(value_clone))\n+        # Ensure that instances with different pk hash differently.\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+        \n+        # Additionally test association with dictionary keys (hashability check).\n+        sample_dict = {value_1: \"first value\"}\n+        self.assertEqual(sample_dict[value_clone], \"first value\")\n+        with self.assertRaises(KeyError):\n+            _ = sample_dict[value_2]\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..275a44b 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,6 +154,14 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n+    def test_label_without_index_in_multivaluefield(self):\n+        class SampleForm(Form):\n+            datetime = SplitDateTimeField()\n+\n+        form = SampleForm()\n+        self.assertInHTML('<label for=\"id_datetime_0\">', form.as_table())\n+        self.assertInHTML('<input type=\"text\" name=\"datetime_0\" id=\"id_datetime_0\">', form.as_table())\n+\n     def test_form_as_table_data(self):\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..6d53faf 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -107,7 +107,19 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n                 with self.assertRaisesMessage(ValidationError, msg):\n                     f.clean(value)\n \n-    def test_urlfield_clean_required(self):\n+    def test_urlfield_clean_valueerror_issue(self):\n+        # Test cases specifically meant to trigger the original issue\n+        f = URLField()\n+        tests = [\n+            '////]@N.AN',  # Issue referenced test case\n+            '#@A.bO',     # Example from original test patch for empty hostname\n+        ]\n+        # Expected error message for invalid URL\n+        msg = \"'Enter a valid URL.'\"\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(value)\n         f = URLField()\n         msg = \"'This field is required.'\"\n         with self.assertRaisesMessage(ValidationError, msg):\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..9ce6e5b 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -442,6 +442,29 @@ class NonAggregateAnnotationTestCase(TestCase):\n         with self.assertRaisesMessage(FieldDoesNotExist, \"Book has no field named 'other_rating'\"):\n             book = qs.defer('other_rating').get(other_rating=4)\n \n+    def test_new_expressionwrapper_with_not_q(self):\n+        \"\"\"\n+        Tests that ExpressionWrapper with a negated Q object does not crash and provides\n+        correct SQL output, ensuring that the original issue described is properly solved.\n+        \"\"\"\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        )\n+        # Should return all books with 'selected' field set to True, since ~Q(pk__in=[]) is always True\n+        self.assertEqual(len(books), Book.objects.count())\n+        # Every book's 'selected' value should be True\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_new_expressionwrapper_with_aggregations(self):\n+        \"\"\"\n+        Verifies the handling of ExpressionWrapper with negated Q and aggregations.\n+        \"\"\"\n+        agg_qs = Book.objects.annotate(\n+            not_in_selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('not_in_selected'))\n+        # Should return a sum equal to the number of books as every book should have True\n+        self.assertEqual(agg_qs['not_in_selected__sum'], Book.objects.count())\n+\n     def test_mti_annotations(self):\n         \"\"\"\n         Fields on an inherited model can be referenced by an\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..75db35e 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -163,7 +164,30 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_correct_extra_tags_handling(self):\n+        \"\"\"\n+        Test that a message's extra_tags is serialized and deserialized properly,\n+        especially for cases where extra_tags is an empty string or None.\n+        \"\"\"\n+        storage = self.get_storage()\n+\n+        # Test with extra_tags as an empty string\n+        message_empty = Message(constants.DEBUG, \"A test message\", extra_tags=\"\")\n+        encoded_empty = storage._encode(message_empty)\n+        decoded_empty = storage._decode(encoded_empty)\n+        self.assertEqual(decoded_empty.extra_tags, \"\")\n+\n+        # Test with extra_tags as None\n+        message_none = Message(constants.DEBUG, \"A test message\", extra_tags=None)\n+        encoded_none = storage._encode(message_none)\n+        decoded_none = storage._decode(encoded_none)\n+        self.assertIsNone(decoded_none.extra_tags)\n+\n+        # Test with some non-empty extra_tags\n+        message_tags = Message(constants.DEBUG, \"A test message\", extra_tags=\"tag1 tag2\")\n+        encoded_tags = storage._encode(message_tags)\n+        decoded_tags = storage._decode(encoded_tags)\n+        self.assertEqual(decoded_tags.extra_tags, \"tag1 tag2\")\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..3168056 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,7 +1,8 @@\n from pathlib import Path\n from unittest import mock\n \n-from django.template import autoreload\n+from django.template import autoreload, engines\n+from pathlib import Path\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n \n@@ -59,7 +60,18 @@ class TemplateReloadTests(SimpleTestCase):\n             }\n         )\n \n-    @mock.patch('django.template.loaders.base.Loader.reset')\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [ROOT],  # Simulating adding BASE_DIR to DIRS\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    def test_template_changed_in_base_dir(self, mock_reset):\n+        # Simulate a file change within ROOT, which is equivalent to BASE_DIR\n+        file_path = ROOT / 'some_template_file.html'\n+        self.assertTrue(autoreload.template_changed(None, file_path))\n+        mock_reset.assert_called_once()\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..b2f9be8 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -183,7 +184,26 @@ class StaticHelperTest(StaticTests):\n         self.assertEqual(static(\"//example.org\"), [])\n \n \n+from django.http import Http404\n+\n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty string for the If-Modified-Since header does not raise an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_no_header(self):\n+        \"\"\"\n+        Test handling when there is no If-Modified-Since header, should default to modified.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=None, mtime=1))\n+\n+    def test_was_modified_since_invalid_header(self):\n+        \"\"\"\n+        Test handling when the header is invalid should not raise an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"invalid-date-string\", mtime=1))\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..d26fe22 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -8,6 +9,7 @@ from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management.utils import (\n     find_command,\n     get_random_secret_key,\n@@ -411,7 +413,34 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_formatter_class_usage(self):\n+        \"\"\"Test custom formatter class used in management command.\"\"\"\n+        epilog = \"Example usage:\\n  ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        command = BaseCommand()\n+        parser = command.create_parser(\n+            prog_name=\"manage.py\",\n+            subcommand=\"tzkt_import\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter,\n+        )\n+\n+        # Capture the help output\n+        with mock.patch('sys.stdout', new=StringIO()) as fake_out:\n+            parser.print_help()\n+            help_output = fake_out.getvalue()\n+\n+        expected_output = (\n+            \"usage: manage.py tzkt_import [-h] [--api API] [--version] [-v {0,1,2,3}] \"\n+            \"[--settings SETTINGS] [--pythonpath PYTHONPATH] [--traceback] [--no-color] \"\n+            \"[--force-color] [--skip-checks] blockchain target\\n\\n\"\n+            \"positional arguments:\\n\"\n+            \"  blockchain           Name of the blockchain to import into\\n\"\n+            \"  target               Id of the contract to import\\n\\n\"\n+            \"Example usage:\\n\"\n+            \"  ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+        )\n+\n+        self.assertIn(expected_output, help_output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..5bcf291 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,3 +1,4 @@\n+\n import os\n from datetime import datetime\n \n@@ -211,7 +212,36 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n+    def test_json_script_custom_encoder(self):\n+        from django.core.serializers.json import DjangoJSONEncoder\n+\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"encoding\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"encoding\"}</script>',\n+        )\n+\n+    def test_json_script_with_default_encoder(self):\n+        \"\"\"Test json_script function using the default encoder.\"\"\"\n+        data = {\"key\": \"value\"}\n+        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(json_script(data), expected)\n+\n+    def test_json_script_with_id_and_custom_encoder(self):\n+        \"\"\"Test json_script function with element_id and custom encoder.\"\"\"\n+        from django.core.serializers.json import DjangoJSONEncoder\n+\n+        class CustomEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"foo\": \"bar\"}'\n+\n+        expected = (\n+            '<script id=\"custom_id\" type=\"application/json\">{\"foo\": \"bar\"}</script>'\n+        )\n+        self.assertHTMLEqual(json_script({}, \"custom_id\", encoder=CustomEncoder), expected)\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n",
  "django__django-15790": "",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..fd805f7 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,9 +398,16 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_on_proxy_model(self):\n+        custom_instance = ProxyCustomModel.objects.create(name=\"Custom Name\")\n+        another_instance = AnotherModel.objects.create(custom=custom_instance)\n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n+        # Fetching with select_related and only should not raise an error.\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = list(qs)\n+\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(result[0].custom.name, \"Custom Name\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..93b8e22 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,7 +157,12 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n-    @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n+    def test_parameters_order_with_dbname(self):\n+        # Test that additional parameters are placed before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n \n@@ -183,4 +188,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..0626a5c 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,6 +1901,10 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.forms import formset_factory\n+        from django.forms.formsets import BaseFormSet\n+        import warnings\n+        from django.test import TestCase\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1913,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..ac71cf2 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -172,6 +172,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n         for i, form in enumerate(formset):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n+    \n+    def test_empty_permitted_ignored_empty_form_true(self):\n+        # Test that empty_permitted is ignored for formset.empty_form when set to True\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_ignored_empty_form_false(self):\n+        # Test that empty_permitted is ignored for formset.empty_form when set to False\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n \n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..6d072d4 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,6 +161,22 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n+    def test_empty_input(self):\n+        # Test empty string input\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+\n+        # Test None input\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+        # Test zero as an input\n+        self.assertEqual(nformat(0, \".\"), \"0\")\n+\n+    def test_null_values_handling(self):\n+        # Test where input is None and method should not raise an error\n+        self.assertEqual(nformat(None, \".\", decimal_pos=2), \"None\")\n+        self.assertEqual(nformat(None, \",\", grouping=2, thousand_sep=\",\"), \"None\")\n+        self.assertEqual(nformat(None, \",\", grouping=2, thousand_sep=\",\", force_grouping=True), \"None\")\n+\n     def test_decimal_subclass(self):\n         class EuroDecimal(Decimal):\n             \"\"\"\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..34ff6e3 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+from django.urls import reverse\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..19a992b 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,8 +507,24 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.test import TestCase, override_settings\n+from django.urls import path\n+from django.contrib.sitemaps import Sitemap\n+from datetime import datetime\n+\n+class CallableLastmodEmptyLastmodSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n \n-# RemovedInDjango50Warning\n+class TestCallableLastmodEmpty(TestCase):\n+    def test_empty_items_callable_lastmod(self):\n+        sitemap = CallableLastmodEmptyLastmodSitemap()\n+        self.assertIsNone(sitemap.get_latest_lastmod(), \"Expected None for empty items when lastmod is callable.\")\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..24d9def 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,6 +1,9 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n@@ -33,6 +36,40 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # Create a user with change permission only\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Create a user with add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..3ecc9ac 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,20 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def test_alter_alter_field(self):\n+        \"\"\"\n+        Ensure that multiple AlterField operations collapse into the final state.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, help_text=\"help\")),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, help_text=\"help\", default=None)),\n+            ],\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, help_text=\"help\", default=None)),\n+            ],\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..4897b5d 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -69,7 +70,16 @@ class FunctionTests(SimpleTestCase):\n     def test_autoescape_off(self):\n         self.assertEqual(\n             join([\"<a>\", \"<img>\", \"</a>\"], \"<br>\", autoescape=False),\n-            \"<a>&lt;br&gt;<img>&lt;br&gt;</a>\",\n+            \"<a><br><img><br></a>\",\n+        )\n+\n+    def test_join_with_unsafe_joiner_autoescape_off(self):\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(\n+            join(some_list, some_var, autoescape=False),\n+            expected_result\n         )\n \n     def test_noniterable_arg(self):\n@@ -78,4 +88,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..5030af3 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -729,7 +729,11 @@ class BulkCreateTests(TestCase):\n         self._test_update_conflicts_unique_two_fields([])\n \n     def _test_update_conflicts(self, unique_fields):\n-        UpsertConflict.objects.bulk_create(\n+        self.assertEqual(len(results), len(conflicting_objects) + 1)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        results = FieldsWithDbColumns.objects.bulk_create(\n             [\n                 UpsertConflict(number=1, rank=1, name=\"John\"),\n                 UpsertConflict(number=2, rank=2, name=\"Mary\"),\n@@ -743,7 +747,11 @@ class BulkCreateTests(TestCase):\n             UpsertConflict(number=2, rank=2, name=\"Olivia\"),\n             UpsertConflict(number=3, rank=1, name=\"Hannah\"),\n         ]\n-        UpsertConflict.objects.bulk_create(\n+        self.assertEqual(len(results), len(conflicting_objects) + 1)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        results = FieldsWithDbColumns.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n             update_fields=[\"name\", \"rank\"],\n@@ -759,7 +767,11 @@ class BulkCreateTests(TestCase):\n             ],\n         )\n \n-        UpsertConflict.objects.bulk_create(\n+        self.assertEqual(len(results), len(conflicting_objects) + 1)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        results = FieldsWithDbColumns.objects.bulk_create(\n             conflicting_objects + [UpsertConflict(number=4, rank=4, name=\"Mark\")],\n             update_conflicts=True,\n             update_fields=[\"name\", \"rank\"],\n@@ -791,7 +803,11 @@ class BulkCreateTests(TestCase):\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n     def test_update_conflicts_unique_fields_update_fields_db_column(self):\n-        FieldsWithDbColumns.objects.bulk_create(\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        results = FieldsWithDbColumns.objects.bulk_create(\n             [\n                 FieldsWithDbColumns(rank=1, name=\"a\"),\n                 FieldsWithDbColumns(rank=2, name=\"b\"),\n@@ -803,7 +819,11 @@ class BulkCreateTests(TestCase):\n             FieldsWithDbColumns(rank=1, name=\"c\"),\n             FieldsWithDbColumns(rank=2, name=\"d\"),\n         ]\n-        FieldsWithDbColumns.objects.bulk_create(\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        results = FieldsWithDbColumns.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n             unique_fields=[\"rank\"],\n@@ -816,4 +836,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..8e8eb54 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,7 +490,28 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n-def test_keymaps():\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_rc_context_with_get_backend():\n+    # This test ensures that calling `get_backend()` does not clear figures\n+    # from `Gcf.figs` when a figure is created in an `rc_context`.\n+    \n+    # Create a figure within an rc_context\n+    with plt.rc_context():\n+        fig2 = plt.figure()\n+    \n+    # Capture the state of figures before calling get_backend\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    # Call get_backend, which previously caused issues\n+    plt.get_backend()\n+    \n+    # Capture the state of figures after\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    # Verify that the figures state has not changed\n+    assert before == after, '\\n' + before + '\\n' + after\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..4b5ac1d 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -20,8 +20,15 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n-\n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_visibility(fig_test, fig_ref):\n+    # In fig_test, make axes invisible\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter([1], [1], [1])\n+    ax_test.set_visible(False)\n+    \n+    # In fig_ref, do not add any axes (should appear empty)\n+    fig_ref.subplots(nrows=0, ncols=0)\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..8cf7e64 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1786,7 +1786,30 @@ def test_text_3d(fig_test, fig_ref):\n     assert t3d.get_position_3d() == (0.5, 0.5, 1)\n \n \n-@check_figures_equal(extensions=[\"png\"])\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from mpl_toolkits.mplot3d import Axes3D\n+\n+def test_line3d_numeric_array_then_int():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    # Initial plot with numpy array inputs\n+    x_s_0 = np.array([0, 1])\n+    y_s_0 = np.array([0, 1])\n+    z_s_0 = np.array([0, 1])\n+    ax.plot(x_s_0, y_s_0, z_s_0)\n+    # Plot with integer inputs\n+    ax.plot([0, 1], [0, 1], [0, 1])\n+    fig.canvas.draw_idle()  # Should not raise AttributeError\n+\n+def test_line3d_int_inputs():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    # Plot with integer inputs directly\n+    ax.plot([2, 3], [2, 3], [2, 3])\n+    fig.canvas.draw_idle()  # Should not raise AttributeError\n+\n+# Ensuring original test is preserved\n def test_pathpatch_3d(fig_test, fig_ref):\n     ax = fig_ref.add_subplot(projection=\"3d\")\n     path = Path.unit_rectangle()\n",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..dd60084 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,49 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+import numpy as np\n+import itertools\n+import matplotlib.colors as colors\n+from matplotlib.font_manager import FontProperties\n+from matplotlib.patches import FancyBboxPatch\n+from matplotlib.ticker import FuncFormatter, FormatStrFormatter, NullFormatter\n+from matplotlib.legend_handler import HandlerTuple\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable_initial(draggable):\n+    # Test the draggable keyword during initialization\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() == draggable\n+\n+def test_toggle_draggable():\n+    # Test setting draggable after creation\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test')\n+    leg = ax.legend(draggable=False)\n+    assert not leg.get_draggable()\n+    leg.set_draggable(True)\n+    assert leg.get_draggable()\n+    leg.set_draggable(False)\n+    assert not leg.get_draggable()\n+\n+def test_legend_no_draggable_by_default():\n+    # Check that by default the legend is not draggable\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test')\n+    leg = ax.legend()\n+    assert not leg.get_draggable()\n+\n+def test_invalid_draggable_keyword():\n+    # Ensure passing invalid draggable values raises an error\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test')\n+    with pytest.raises(ValueError):\n+        ax.legend(draggable=\"not_a_boolean\")\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..716dce0 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -649,10 +649,30 @@ def test_compressed1():\n \n     fig.colorbar(pc, ax=axs)\n     fig.draw_without_rendering()\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import warnings\n \n+def test_no_warning_constrained_layout_false():\n+    \"\"\"\n+    Test that no UserWarning is emitted when constrained_layout=False\n+    and subplots_adjust is used.\n+    \"\"\"\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+        ax[0].plot(a, b)\n+        ax[1].plot(a, c)\n+        plt.subplots_adjust(wspace=0)\n+        # Check that no warnings were issued.\n+        assert not any(item.category == UserWarning for item in w)\n     pos = axs[0, 0].get_position()\n     np.testing.assert_allclose(pos.x0, 0.06195, atol=1e-3)\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..e9e8530 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -44,6 +44,24 @@ def test_resampled():\n     lsc = mcolors.LinearSegmentedColormap.from_list('lsc', colorlist)\n     lc = mcolors.ListedColormap(colorlist)\n     # Set some bad values for testing too\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_no_deprecation_warning(dtype):\n+    # Test to ensure that using the colormap with empty values and different\n+    # dtypes does not produce deprecation warnings related to uint8\n+\n+    cm = mcolors.ListedColormap(['red', 'green', 'blue'])\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+\n+        # Use the colormap with an empty array and check for deprecation warnings\n+        result = cm(np.empty((0,), dtype=dtype))\n+\n+        # Assert no deprecation warnings were raised\n+        assert not any(item.category == DeprecationWarning for item in w)\n+\n+    # Also check that using the colormap as expected yields the correct results\n+    assert_array_equal(result, cm(0))\n     for cmap in [lsc, lc]:\n         cmap.set_under('r')\n         cmap.set_over('g')\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..c1a55dd 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,4 +1,6 @@\n+\n from io import BytesIO\n+import pickletools\n import ast\n import pickle\n \n@@ -89,8 +91,31 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n-@mpl.style.context(\"default\")\n+def test_pickle_fig_with_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    \n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    \n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    \n+    # Serialize the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Check there's no reference to FigureCanvasAgg in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Deserialize the figure\n+    loaded_fig = pickle.loads(pkl)\n+    \n+    # Assert the figure is loaded correctly and the draggable property is maintained\n+    loaded_ax = loaded_fig.axes[0]\n+    loaded_leg = loaded_ax.get_legend()\n+    assert loaded_leg.get_draggable() is True\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..0151282 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -90,7 +90,41 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+import pickle\n+from io import BytesIO\n+\n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    # Create a figure and add subplots\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+\n+    # Plot data to subplots\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    \n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = BytesIO()\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        loaded = pickle.loads(pkl.getvalue())\n+        loaded.canvas.draw()  # Draw to confirm it renders without error\n+        plt.close(loaded)\n+        print(\"Test passed: Figure with aligned labels can be pickled and unpickled successfully.\")\n+    except Exception as e:\n+        print(f\"Test failed: {e}\")\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..01546fe 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -44,6 +45,21 @@ class TestPolyFit:\n         assert res.columns.to_list() == [\"x\", \"y\", \"group\"]\n \n         ngroups = df[\"group\"].nunique()\n+        \n+    def test_polyfit_with_missing_data(self, df):\n+        groupby = GroupBy([\"group\"])\n+        \n+        # Create a dataset with missing values\n+        missing_data_df = df.copy()\n+        missing_data_df.loc[5:10, \"x\"] = np.nan\n+        \n+        # Test PolyFit with missing data\n+        try:\n+            result = PolyFit()(missing_data_df[[\"x\", \"y\"]], groupby, \"x\", {})\n+            # Check if result contains no NaN values\n+            assert not result.isnull().any().any(), \"The result should not contain any NaN values.\"\n+        except Exception as e:\n+            pytest.fail(f\"PolyFit raised an exception with missing data: {e}\")\n         assert_array_equal(res.index, np.arange(ngroups * gridsize))\n \n         for _, part in res.groupby(\"group\"):\n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..569ad1f 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -81,6 +81,22 @@ class TestContinuous:\n     def test_interval_with_norm(self, x):\n \n         s = Continuous(norm=(3, 7))._setup(x, IntervalProperty())\n+\n+    def test_boolean_color_mapping(self):\n+        # Create a boolean series\n+        x = pd.Series([True, False])\n+        \n+        # Set up a scale with Continuous and Color and pass boolean data\n+        s = Continuous()._setup(x, Color())\n+        \n+        # Run the function and check for proper handling without exception\n+        try:\n+            result = s(x)\n+            # Check whether the result is of expected length and type\n+            assert len(result) == len(x)\n+            assert result.dtype == 'float'\n+        except Exception as e:\n+            self.fail(f\"Color mapping for boolean data raised an exception: {e}\")\n         assert_array_equal(s(x), [-.5, 0, 1.5])\n \n     def test_interval_with_range_norm_and_transform(self, x):\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..5a2cebb 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1662,5 +1662,38 @@ def test_vendor_aliases():\n     with pytest.raises(ImportError):\n         from requests.packages import webbrowser\n \n-if __name__ == '__main__':\n-    unittest.main()\n+import requests\n+from requests.exceptions import Timeout, RequestException\n+from requests.adapters import HTTPAdapter\n+from requests.packages.urllib3.exceptions import DecodeError, TimeoutError\n+import pytest\n+import unittest\n+\n+def test_urllib3_decode_error_handling():\n+    \"\"\"Test if DecodeError from urllib3 is correctly wrapped by requests\"\"\"\n+    # Simulate a scenario where DecodeError might be raised\n+    session = requests.Session()\n+    adapter = HTTPAdapter()\n+    session.mount(\"http://\", adapter)\n+    \n+    # Mocking a response to provoke a DecodeError\n+    with pytest.raises(RequestException):\n+        response = requests.models.Response()\n+        response.status_code = 200\n+        response._content_consumed = True\n+        response._content = b\"\"\n+        \n+        raise DecodeError(\"Mocked DecodeError\")\n+    \n+def test_urllib3_timeout_error_handling():\n+    \"\"\"Test if TimeoutError from urllib3 is correctly wrapped by requests\"\"\"\n+    # Using a real request would require integration testing. Instead,\n+    # we simulate the TimeoutError using a mock.\n+    \n+    session = requests.Session()\n+    adapter = HTTPAdapter()\n+    session.mount(\"http://\", adapter)\n+\n+    with pytest.raises(Timeout):\n+        raise TimeoutError(\"Mocked TimeoutError for proxy timeout\")\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..c63aaef 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,29 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_iter_content_bytes_without_encoding(self):\n+        \"\"\"\n+        Test that iter_content returns bytes when no encoding is specified\n+        and decode_unicode is True.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = None  # No encoding specified\n+        chunks = r.iter_content(decode_unicode=True)\n+        # Should return bytes since encoding is None\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n+\n+    def test_response_iter_content_str_with_encoding(self):\n+        \"\"\"\n+        Test that iter_content returns string chunks when encoding is specified\n+        and decode_unicode is True.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=True)\n+        # Should return str since encoding is specified\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..dd7231e 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -89,6 +89,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_entirely_punctuation_note_tag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_issue_2321_should_not_trigger(self) -> None:\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n@@ -119,4 +129,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..3552be3 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -56,6 +56,13 @@ reports = \"yes\"\n     check_configuration_file_reader(runner)\n \n \n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from _pytest.fixtures import CaptureFixture\n+\n+EMPTY_MODULE = \"\"  # Assuming EMPTY_MODULE is defined for testing purposes.\n+\n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n@@ -79,7 +86,14 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n+def test_unrecognized_option_traceback(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that no traceback is printed for an unrecognized option and a user-friendly message is shown.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([\"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err, \"The usage information should be shown.\"\n+    assert \"E0015: Unrecognized option found: Q\" in output.err, \"Unrecognized option error should be reported\"\n+    assert \"Traceback\" not in output.err, \"Traceback should not be printed for unrecognized options.\"\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..c6e2f19 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,17 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_module_with_file_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test handling for a module with a file of the same name.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the directory and files according to the issue description\n+        create_files([\"my_mod/my_mod.py\", \"my_mod/another.py\"])\n+        # Check the directory without an __init__.py\n+        linter.check([\"my_mod\"])\n+    # Assert no parse-error messages indicating the issue\n+    assert \"parse-error\" not in linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +952,15 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_module_with_file_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test handling for a module with a file of the same name.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the directory and files according to the issue description\n+        create_files([\"my_mod/my_mod.py\", \"my_mod/another.py\"])\n+        # Check the directory without an __init__.py\n+        linter.check([\"my_mod\"])\n+    # Assert no parse-error messages indicating the issue\n+    assert \"parse-error\" not in linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..b2c1f70 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,6 +114,24 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    \"\"\"Test custom braces in message template.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"module_test\")\n+\n+    # Add sample messages to be reported\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E0401\", line=2, args=(1, 2))\n+\n+    # Capturing output and asserting results\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n+\n+\n def test_deprecation_set_output(recwarn):\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..30d3198 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -297,6 +297,10 @@ class TestImportPath:\n         assert module.__name__ == \"_src.tests.mymod\"\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n+        \n+        # Additional test case to ensure single import instance\n+        module_twice = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module is module_twice, \"Expected a single import instance (using importlib) for the module\"\n \n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..45764c2 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -6,6 +7,49 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n+    logfmt_old = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+    logfmt_new = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    # Original format test\n+    record = logging.LogRecord(\n+        name=\"dummy\",\n+        level=logging.INFO,\n+        pathname=\"dummypath\",\n+        lineno=10,\n+        msg=\"Test Message\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter_old = ColoredLevelFormatter(tw, logfmt_old)\n+    output_old = formatter_old.format(record)\n+    assert output_old == (\n+        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+    )\n+\n+    tw.hasmarkup = False\n+    formatter_old = ColoredLevelFormatter(tw, logfmt_old)\n+    output_old = formatter_old.format(record)\n+    assert output_old == (\"dummypath                   10 INFO     Test Message\")\n+\n+    # New format test\n+    tw.hasmarkup = True\n+    formatter_new = ColoredLevelFormatter(tw, logfmt_new)\n+    output_new = formatter_new.format(record)\n+    assert output_new == (\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n+    )\n+\n+    tw.hasmarkup = False\n+    formatter_new = ColoredLevelFormatter(tw, logfmt_new)\n+    output_new = formatter_new.format(record)\n+    assert output_new == (\"INFO     dummy:dummypath:10 Test Message\")\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n     record = logging.LogRecord(\n",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..80c3c61 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,4 +1,7 @@\n+\n import os\n+import platform\n+from datetime import datetime\n from xml.dom import minidom\n \n import py\n@@ -139,7 +142,30 @@ class TestPython:\n         node = dom.find_first_by_tag(\"testsuite\")\n         node.assert_attr(name=\"pytest\", errors=1, failures=2, skipped=1, tests=5)\n \n-    def test_timing_function(self, testdir):\n+    \n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n         testdir.makepyfile(\n             \"\"\"\n             import time, pytest\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..7506a9c 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,20 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute_repro():\n+    \"\"\"Test saferepr on class with broken __getattribute__ and __repr__ to\n+    ensure no INTERNALERROR occurs, reproducing the original issue.\"\"\"\n+    \n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+        \n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    result = saferepr(SomeClass())\n+    assert result.startswith(\"<[RuntimeError() raised in repr()] SomeClass object at 0x\")\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +167,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..c351014 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -287,6 +287,34 @@ class TestInlineRunModulesCleanup:\n         testdir.inline_run(str(test_mod))\n         assert imported.data == 42\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test that failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    This is based on the original test patch.\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+        \n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    # Expect the first line of output to contain the correct absolute path to the test file\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n \n def test_assert_outcomes_after_pytest_error(testdir) -> None:\n     testdir.makepyfile(\"def test_foo(): assert True\")\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..903b7c8 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,8 @@\n import os\n import sys\n+# Import necessary modules for tests\n+import os\n+\n from unittest import mock\n \n import pytest\n@@ -41,8 +44,59 @@ class TestMark:\n         with pytest.raises(AttributeError):\n             mark._some_name\n \n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360\"\"\"\n+        import os\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n \n-def test_marked_class_run_twice(testdir):\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+    def test_combined_execution_with_globals_change(self, testdir):\n+        \"\"\"Test to ensure caching doesn't affect skipif when globals change.\"\"\"\n+        py_file = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            import sys\n+\n+            @pytest.mark.skipif(\"sys.version_info < (3,0)\")\n+            def test_python3():\n+                assert True\n+\n+            @pytest.mark.skipif(\"sys.version_info >= (3,0)\")\n+            def test_not_python3():\n+                assert True\n+        \"\"\"\n+        )\n+        reprec = testdir.inline_run(py_file)\n+        # Depending on the Python version this code is executed in,\n+        # one of these tests should run, the other should be skipped.\n+        expected_passed = 1 if sys.version_info >= (3, 0) else 0\n+        expected_skipped = 1 - expected_passed\n+        reprec.assertoutcome(passed=expected_passed, skipped=expected_skipped)\n     \"\"\"Test fails file is run twice that contains marked class.\n     See issue#683.\n     \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..b2c95bf 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -152,6 +152,34 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+import pytest\n+\n+class TestSkipWithRunXfail:\n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_location_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n \n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..5fef045 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -186,6 +187,32 @@ class TestXFail:\n         assert callreport.passed\n         assert callreport.wasxfail == \"this is an xfail\"\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # This test is based on the original test patch to verify the issue.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # This test checks that a strict xfail results in failure if the test passes.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_xfail_using_platform(self, testdir):\n         \"\"\"\n         Verify that platform can be used with xfail statements.\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..75beb35 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -21,6 +22,40 @@ from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n from _pytest.tmpdir import get_user\n from _pytest.tmpdir import TempdirFactory\n+from _pytest.monkeypatch import MonkeyPatch\n+import pytest\n+import getpass\n+\n+def test_tmp_path_factory_handles_invalid_dir_characters(tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch) -> None:\n+    # Mock the getpass.getuser to return a username with invalid characters for directory names\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    # Reset _basetemp and _given_basetemp as they are cached/set in parallel runs\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    \n+    # Get the base temp path\n+    p = tmp_path_factory.getbasetemp()\n+    # Verify that the base temp path is correctly modified to handle invalid characters\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+def test_tmpdir_factory_handles_domain_usernames(tmpdir_factory: TempdirFactory, monkeypatch: MonkeyPatch) -> None:\n+    # Mock the getpass.getuser to return a domain-style username\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"contoso\\\\john_doe\")\n+    # Reset _basetemp and _given_basetemp for consistency\n+    monkeypatch.setattr(tmpdir_factory, \"_tmppath_factory._basetemp\", None)\n+    monkeypatch.setattr(tmpdir_factory, \"_tmppath_factory._given_basetemp\", None)\n+\n+    # Create a temporary directory\n+    p = tmpdir_factory.mktemp(\"foobar\")\n+    # Verify that the directory was created correctly without illegal characters\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+def test_get_user_handles_exception(monkeypatch: MonkeyPatch) -> None:\n+    # Simulate ImportError or KeyError when calling getpass.getuser\n+    monkeypatch.setattr(getpass, \"getuser\", lambda: (_ for _ in ()).throw(ImportError))\n+\n+    # Verify get_user returns None when an exception occurs\n+    assert get_user() is None\n from _pytest.tmpdir import TempPathFactory\n \n \n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..5260c3b 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,29 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex 7097f7e..8808f43 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -1,3 +1,4 @@\n+\n # Author: Wei Xue <xuewei4d@gmail.com>\n #         Thierry Guillemot <thierry.guillemot.work@gmail.com>\n # License: BSD 3 clause\n@@ -10,6 +11,7 @@ import numpy as np\n from scipy import stats, linalg\n \n from sklearn.covariance import EmpiricalCovariance\n+from sklearn.utils.testing import assert_true\n from sklearn.datasets.samples_generator import make_spd_matrix\n from sklearn.externals.six.moves import cStringIO as StringIO\n from sklearn.metrics.cluster import adjusted_rand_score\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..29853f4 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -261,6 +261,7 @@ def test_one_hot_encoder_not_fitted():\n \n \n def test_one_hot_encoder_no_categorical_features():\n+    # Helper test to check for proper functioning of OneHotEncoder\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..5fe1262 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -588,7 +588,7 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n                             means_init=rand_data.means,\n                             precisions_init=rand_data.precisions[covar_type],\n                             covariance_type=covar_type,\n-                            max_iter=max_iter, tol=tol)\n+                            max_iter=max_iter, tol=tol, random_state=0, n_init=5)\n \n         # check if fit_predict(X) is equivalent to fit(X).predict(X)\n         f = copy.deepcopy(g)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..cbf965d 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -70,8 +71,19 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n-\n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_consistency():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    pca_opts = {'n_components': 7, 'kernel': 'rbf', 'random_state': rng}\n+    \n+    transformed_X = np.zeros((10, 7))\n+    for i in range(10):\n+        kpca = KernelPCA(**pca_opts)\n+        transformed_X[i, :] = kpca.fit_transform(X)\n+\n+    # Check if the transformed results are consistent after sign adjustment\n+    for i in range(1, 10):\n+        assert_allclose(np.abs(transformed_X[0, :]), np.abs(transformed_X[i, :]))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..bdfb22f 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -172,8 +172,37 @@ def test_mutual_info_classif_mixed():\n         # The MI should be the same\n         assert_equal(mi_nn[2], mi[2])\n \n+def test_mutual_info_discrete_features_handling():\n+    \"\"\" \n+    Test for checking the correct handling of discrete_features \n+    parameter when it is an array of indices or a boolean mask.\n+    \"\"\"\n+    X = np.array([[0, 1, 0],\n+                  [1, 0, 1],\n+                  [0, 0, 0],\n+                  [1, 1, 1],\n+                  [0, 0, 1]], dtype=float)\n+    y = np.array([1, 2, 1, 2, 1], dtype=float)\n+    X_csr = csr_matrix(X)\n+\n+    # Test cases for mutual_info_classif and mutual_info_regression\n+    for mutual_info in (mutual_info_classif, mutual_info_regression):\n+        # Test with an array of indices\n+        mi_1 = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        mi_2 = mutual_info(X_csr, y, discrete_features=[0, 2], random_state=0)\n+        \n+        # Test with a boolean mask\n+        mi_3 = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        mi_4 = mutual_info(X_csr, y, discrete_features=[True, False, True], random_state=0)\n+\n+        # Ensure results are consistent across dense and sparse representations\n+        assert_array_equal(mi_1, mi_2)\n+        assert_array_equal(mi_3, mi_4)\n \n-def test_mutual_info_options():\n+        # Test with invalid configurations that should raise an error\n+        assert_raises(ValueError, mutual_info, X, y, discrete_features='invalid')\n+        assert_raises(ValueError, mutual_info, X_csr, y, discrete_features=[True, True, False, True])\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[0, 3])\n     X = np.array([[0, 0, 0],\n                   [1, 1, 0],\n                   [2, 0, 1],\n@@ -197,4 +226,4 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..cb1f73e 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +217,16 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_with_array():\n+    # Test to ensure that LogisticRegressionCV correctly handles numpy array for Cs\n+    set_config(print_changed_only=True)\n+    # Instantiate LogisticRegressionCV with a numpy array\n+    model = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    # Check that we get a valid repr without errors\n+    repr_str = repr(model)\n+    assert \"Cs=array([0.1, 1. ])\" in repr_str  # Confirm that the Cs parameter is displayed correctly\n+    set_config(print_changed_only=False)  # Reset the config after the test\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..c54cddc 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,8 +1,11 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n import numpy as np\n \n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..2e67a22 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -119,7 +119,22 @@ def test_finite_differences():\n     np.testing.assert_almost_equal(rel_diff, 0., decimal=5)\n \n \n-def test_params_validation():\n+import numpy as np\n+import pytest\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+from sklearn.utils._testing import assert_raises\n+\n+@pytest.mark.parametrize('param, value', [\n+    ('n_components', np.int32(3)),\n+    ('max_iter', np.int32(100)),\n+    ('tol', np.float32(0.0001))\n+])\n+def test_parameters_valid_types(param, value):\n+    # Ensure no error is raised when parameters have numpy integer or floating types\n+    X = np.random.random_sample((4, 3))\n+    y = np.array([1, 1, 2, 2])\n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n+    nca.fit(X, y)\n     # Test that invalid parameters raise value error\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n@@ -129,7 +144,13 @@ def test_params_validation():\n     # TypeError\n     assert_raises(TypeError, NCA(max_iter='21').fit, X, y)\n     assert_raises(TypeError, NCA(verbose='true').fit, X, y)\n-    assert_raises(TypeError, NCA(tol=1).fit, X, y)\n+    # Checking if integer tolerance is now accepted\n+    integer_tol = np.int32(1)\n+    try:\n+        nca = NCA(tol=integer_tol).fit(X, y)\n+        print(\"No TypeError for tol set as integer.\")\n+    except TypeError as e:\n+        raise AssertionError(\"Test failed: TypeError was raised\") from e\n     assert_raises(TypeError, NCA(n_components='invalid').fit, X, y)\n     assert_raises(TypeError, NCA(warm_start=1).fit, X, y)\n \n",
  "scikit-learn__scikit-learn-14894": "",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..f875519 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -157,6 +157,35 @@ def test_format_invariance(metric_name):\n     y_true = [0, 0, 0, 0, 1, 1, 1, 1]\n     y_pred = [0, 1, 2, 3, 4, 5, 6, 7]\n \n+    # Additional test cases for mutual_info_score to check the fix\n+    def test_mutual_info_score_with_strings():\n+        from sklearn.metrics.cluster import mutual_info_score\n+        import numpy as np\n+        \n+        # Test with object arrays of strings\n+        x = np.random.choice(['a', 'b'], size=20).astype(object)\n+        try:\n+            score = mutual_info_score(x, x)\n+            print(\"Test passed, output:\", score)\n+        except ValueError as e:\n+            print(\"Test failed with ValueError:\", e)\n+        \n+        # Test with string arrays without object dtype\n+        x = np.random.choice(['a', 'b'], size=20)\n+        try:\n+            score = mutual_info_score(x, x)\n+            print(\"Test passed, output:\", score)\n+        except ValueError as e:\n+            print(\"Test failed with ValueError:\", e)\n+        \n+        # Ensure compatibility with lists of strings\n+        x = [str(i) for i in range(20)]\n+        score = mutual_info_score(x, x)\n+        print(\"Test passed, output:\", score)\n+\n+    # Call the additional test\n+    test_mutual_info_score_with_strings()\n+\n     def generate_formats(y):\n         y = np.array(y)\n         yield y, 'array of ints'\n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..435e347 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -668,7 +669,29 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_cv_with_pandas_output():\n+    \"\"\"Check that CalibratedClassifierCV works with transform_output set to pandas.\"\"\"\n+    # Initialize data\n+    X = np.arange(90).reshape(30, -1)\n+    y = np.arange(30) % 2\n+\n+    # Set the config to use pandas\n+    set_config(transform_output=\"pandas\")\n+\n+    # Initialize the model\n+    model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\n+\n+    # Fit the model\n+    model.fit(X, y)\n+\n+    # Predict\n+    predictions = model.predict(X)\n+\n+    # Assert that predictions is an ndarray\n+    assert isinstance(predictions, np.ndarray)\n+\n+    # Reset the output to default\n+    set_config(transform_output=None)\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..139af5b 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2120,12 +2120,38 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     # not define the method.\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False, False, False]), [False, False, False, False]],\n+    ids=[\"list\", \"bool_array\", \"bool_int_list\"],\n+)\n+def test_column_transformer_no_features(empty_selection):\n+    \"\"\"Check that ColumnTransformer handles transformers with no features gracefully.\n+\n+    This is a non-regression test for a bug where a transformer with no\n+    features would cause an error when set_output is \"pandas\".\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame([[1.0, 2.2, 3.3, 4.4], [3.0, 1.0, 2.1, 4.5]], columns=[\"a\", \"b\", \"c\", \"d\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\", \"c\", \"d\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\", \"numerical__c\", \"numerical__d\"])\n \n-    # The feature names are prefixed because verbose_feature_names_out=True is default\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\", \"c\", \"d\"])\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n     assert_array_equal(X_trans_df0.columns, expected_verbose_names)\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/roots/test-ext-autodoc/target/inheritance.py b/tests/roots/test-ext-autodoc/target/inheritance.py\nindex ac389bf..857bd2a 100644\n--- a/tests/roots/test-ext-autodoc/target/inheritance.py\n+++ b/tests/roots/test-ext-autodoc/target/inheritance.py\n@@ -12,6 +12,9 @@ class Base(object):\n \n \n class Derived(Base):\n+    def newmethod(self):\n+        \"\"\"Base method\"\"\"\n+    \n     def inheritedmeth(self):\n         # no docstring here\n-        pass\n+        pass\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..2984dfb 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,8 +1,23 @@\n+\n from __future__ import annotations\n \n from typing import overload\n+# Simulating the example from the issue text for test verification\n+\n+from typing import TYPE_CHECKING\n+\n+if TYPE_CHECKING:\n+    String = str\n+\n+#: blah blah blah\n+variable: String = \"test string\"\n+\n+\n+class MyString:\n+    \"\"\"mystring\"\"\"\n \n-myint = int\n+    #: blah blah blah\n+    var: String = \"another test string\"\n \n \n def sum(x: myint, y: myint) -> myint:\n@@ -22,4 +37,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..1952539 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,24 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+from sphinx import addnodes  # Ensure addnodes is available for doctree structures\n+\n+def test_cmd_option_with_bracket_pattern(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [index, addnodes.desc, (\n+            [addnodes.desc_signature, (\n+                [addnodes.desc_name, \"[enable\"],\n+                [addnodes.desc_addname, \"=]PATTERN\"]\n+            )],\n+            [addnodes.desc_content, ()]\n+        )]\n+    ))\n+    # Verify the object is stored correctly\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-enable', 1) in objects\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..495c69c 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,8 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,6 +47,44 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_non_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.non_empty_all', options)\n+    expected_members = [\n+        'foo',\n+        'bar',\n+    ]\n+    for member in expected_members:\n+        assert any(member in entry for entry in actual)\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_undocumented_members(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.undocumented', options)\n+    expected_members = [\n+        'foo',\n+        'bar',\n+        'baz',\n+    ]\n+    for member in expected_members:\n+        assert any(member in entry for entry in actual)\n+\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..d0e088f 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -46,7 +48,8 @@ def test_restify():\n     assert restify(Any) == \":obj:`Any`\"\n \n \n-def test_restify_type_hints_containers():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(List) == \":class:`List`\"\n     assert restify(Dict) == \":class:`Dict`\"\n     assert restify(List[int]) == \":class:`List`\\\\ [:class:`int`]\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..9e903c3 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1458,7 +1458,36 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+    def test_other_parameters_section_with_use_param_false(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+    Description of param2\n+\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_section_with_use_param_true(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+    Description of param2\n+\n+\"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..2df43b4 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -60,8 +60,23 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/c/' in stuff\n     assert 'http://foobar/cpp/' in stuff\n \n+import pytest\n+from pathlib import Path\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_default(app, status, warning):\n+    app.builder.build_all()\n+    assert not (Path(app.outdir) / '_modules/spam/mod1.xhtml').exists()\n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+    assert (Path(app.outdir) / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled_explicitly(app, status, warning):\n+    app.builder.build_all()\n+    assert not (Path(app.outdir) / '_modules/spam/mod1.xhtml').exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..5bdcec0 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -355,6 +355,25 @@ def test_args():\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n \n+def test_non_disjoint_cycles():\n+    # Test with non-disjoint cycles which should create the identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    \n+    # Test other non-disjoint cycles to verify order of operations\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])  # Should still resolve to identity\n+    assert Permutation([[0, 2], [1, 2], [0, 2]]) == Permutation([1, 0, 2])\n+\n+    # Mixed disjoint and non-disjoint cycles\n+    assert Permutation([[0, 1], [2, 3], [0, 1]]) == Permutation([0, 1, 2, 3])\n+    assert Permutation([[1, 2], [0, 2], [1, 0]]) == Permutation([2, 0, 1])\n+\n+    # Test with cycles that do not affect each other\n+    assert Permutation([[0, 1], [2, 3]]) == Permutation([1, 0, 3, 2])\n+\n+    # Verifying the behavior with empty cycle, should be identity\n+    assert Permutation([[]]) == Permutation([])\n+    assert Permutation([[], [0, 1]]) == Permutation([1, 0])\n+\n def test_Cycle():\n     assert str(Cycle()) == '()'\n     assert Cycle(Cycle(1,2)) == Cycle(1, 2)\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..0747a9c 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -107,6 +108,12 @@ def test_sparse_matrix():\n     A = SparseMatrix([[2, 1, 3], [4, 2, 4], [6, 12, 1]])\n     assert (A**3)[:] == [290, 262, 251, 448, 440, 368, 702, 954, 433]\n \n+    # make sure 0 x n matrices get stacked correctly for SparseMatrix\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n+\n     # test_creation\n     x = Symbol(\"x\")\n     a = SparseMatrix([[x, 0], [0, 0]])\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..3d27c20 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -81,8 +81,19 @@ def check(a, exclude=[], check_attr=True):\n \n #================== core =========================\n \n-\n-def test_core_basic():\n+def test_pickle_float_cross_version():\n+    import pickle\n+    from sympy import symbols\n+    from sympy.core.numbers import Float\n+    \n+    # Simulate pickling in Python 2 and unpickling in Python 3\n+    # Given \"x + 1.0\" expression test\n+    x = symbols(\"x\")\n+    expr = x + Float(1.0)  # use sympy Float\n+    pickled = pickle.dumps(expr, protocol=2)\n+    unpickled = pickle.loads(pickled)\n+    \n+    assert unpickled == expr\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n               # XXX: dynamically created types are not picklable\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..bd25601 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -261,6 +261,22 @@ def test_coth():\n     assert coth(-5*pi*I/6) == -sqrt(3)*I\n \n     assert coth(pi*I/105) == -cot(pi/105)*I\n+\n+def test_issue_coth_log_tan():\n+    from sympy import Symbol, coth, log, tan\n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+    assert expr.subs(x, 2) is not None\n+    assert expr.subs(x, 3) is not None\n+    assert expr.subs(x, 5) is not None\n+    assert expr.subs(x, 6) is not None\n+    assert expr.subs(x, 8) is not None\n+    assert expr.subs(x, 9) is not None\n+    assert expr.subs(x, 11) is not None\n+    assert expr.subs(x, 12) is not None\n+    assert expr.subs(x, 13) is not None\n+    assert expr.subs(x, 15) is not None\n+    assert expr.subs(x, 18) is not None\n     assert coth(-pi*I/105) == cot(pi/105)*I\n \n     assert coth(2 + 3*I) == coth(2 + 3*I)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..4388b54 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -187,6 +187,32 @@ def test_col_join():\n                    [0, 0, 1],\n                    [7, 7, 7]])\n \n+def test_issue_13643_col_insert():\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    expected_result = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected_result\n+\n+def test_col_insert_various():\n+    import sympy as sm\n+    # Alternate insertions\n+    M1 = sm.eye(3)\n+    V1 = sm.Matrix([[-1, -2, -3], [4, 5, 6], [7, 8, 9]])\n+    expected_M1 = sm.Matrix([\n+        [1, 0, -1, -2, -3, 0],\n+        [0, 1, 4, 5, 6, 0],\n+        [0, 0, 7, 8, 9, 1]\n+    ])\n+    assert M1.col_insert(2, V1) == expected_M1\n+\n def test_row_insert():\n     r4 = Matrix([[4, 4, 4]])\n     for i in range(-4, 5):\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..cdc39fa 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -622,10 +622,33 @@ def test_latex_sequences():\n \n     latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n     assert latex(s1) == latex_str\n-\n+    \n+    # Original case for sequence formula with symbols\n     latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n     assert latex(s2) == latex_str\n \n+    # Additional test cases to ensure brackets are not backslash-escaped\n+    s7 = SeqFormula(n**2, (0, oo))\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s7) == latex_str\n+\n+    s8 = SeqFormula(n**2, (0, 2))\n+    latex_str = r'[0, 1, 4]'\n+    assert latex(s8) == latex_str\n+\n+    s9 = SeqFormula(n**2 - 1, (-3, 0))\n+    latex_str = r'[-4, 0, 4, 8, 12]'\n+    assert latex(s9) == latex_str\n+\n+    s10 = SeqPer((2, 3), (0, oo))\n+    latex_str = r'[2, 3, 2, 3, \\ldots]'\n+    assert latex(s10) == latex_str\n+\n+    s11 = SeqPer((1, 2), (-oo, 0))\n+    latex_str = r'[\\ldots, 2, 1, 2, 1]'\n+    assert latex(s11) == latex_str\n+    assert latex(s2) == latex_str\n+\n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..9db6f77 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,13 @@\n+\n+def test_Poly_RR_domain():\n+    from sympy import Poly\n+    # Test with RR[y,z] without raising an exception\n+    p = Poly(1.2*x*y*z, x, domain='RR[y,z]')\n+    assert str(p) == \"Poly(1.2*y*z*x, x, domain='RR[y,z]')\"\n+    \n+    # Ensure error for unsupported domain structure\n+    raises(OptionError, lambda: Poly(1.2*x*y*z, x, domain='RR(x,y,z)'))\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +16,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, EX, RR, CC\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -172,7 +182,16 @@ def test_Domain_preprocess():\n     assert Domain.preprocess('FF(23)') == FF(23)\n     assert Domain.preprocess('GF(23)') == GF(23)\n \n-    raises(OptionError, lambda: Domain.preprocess('Z[]'))\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+    raises(OptionError, lambda: Domain.preprocess('RR[x,y,z]'))\n \n     assert Domain.preprocess('Z[x]') == ZZ[x]\n     assert Domain.preprocess('Q[x]') == QQ[x]\n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..55f93cc 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,4 +1,6 @@\n+\n from sympy import (\n+    asec, acsc,\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n     Interval, InverseCosineTransform, InverseFourierTransform,\n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..a591a8a 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,7 +6111,17 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n-def test_MatrixSymbol_printing():\n+def test_MatrixSymbols_with_special_characters():\n+    # Test the pretty printing of matrix symbols including special characters\n+    n = symbols('n')\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    assert pretty(x + y) == \"x + y*\"\n+\n+    # More complex expressions\n+    a = symbols('a')\n+    expr = -a*x + -2*y*y\n+    assert pretty(expr) == \"-a*x - 2*y**y*\"\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..f1c1414 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,6 +728,9 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n+import sympy as sy\n+from sympy.utilities.pytest import raises\n+\n def test_python_keywords():\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..1c99e7d 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,18 @@\n+\n+def test_Max():\n+    # Test specific case mentioned in the issue\n+    assert mcode(Max(x, 2)) == 'Max[x, 2]'\n+    # Additional tests for Max with different inputs\n+    assert mcode(Max(2, x)) == 'Max[2, x]'\n+    assert mcode(Max(x, y, 2)) == 'Max[x, y, 2]'\n+    # Ensure consistency with multiple arguments\n+    assert mcode(Max(x, y, z, 2, 3)) == 'Max[x, y, z, 2, 3]'\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..3028b27 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n@@ -1726,7 +1728,11 @@ def test_latex_UnevaluatedExpr():\n     assert latex(x*he) == r\"x \\frac{1}{x}\"\n \n \n-def test_MatrixElement_printing():\n+def test_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n     # test cases for issue #11821\n     A = MatrixSymbol(\"A\", 1, 3)\n     B = MatrixSymbol(\"B\", 1, 3)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..7fb3ad0 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Symbol, sqrt, Derivative, S\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n@@ -6,6 +7,30 @@ from sympy.utilities.pytest import raises\n \n \n def test_idiff():\n+    f = Function('f')\n+    g = Function('g')\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Additional test cases for comprehensive coverage\n+    # Case where input is an equation with Eq and y as dependent variable\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x) == (x + 1) * exp(x - y)/(y + 1)\n+\n+    # Test with multiple order derivative\n+    circ = x**2 + y**2 - 4\n+    ans = -3 * x * (x**2 + y**2) / y**5\n+    assert ans == idiff(circ, y, x, 3).simplify()\n+    \n+    # Test symbolic functions\n+    h = Function('h')\n+    assert idiff(h(x).diff(x) + y, y, x) == -h(x).diff(x).diff(x)\n+    \n+    # Test no solution case\n+    raises(ValueError, lambda: idiff(f(x)**2 - g(x)**2 + 1, [f(x), g(x)], x))\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..9b0eb8c 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -581,8 +581,36 @@ def test_ccode_cse():\n         '}\\n'\n     )\n     assert source == expected\n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\\\n',\n+        '#include <math.h>\\\\n',\n+        'double test(double *x) {\\\\n',\n+        '   double test_result;\\\\n',\n+        '   test_result = 1.0;\\\\n',\n+        '   return test_result;\\\\n',\n+        '}\\\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_unused_array_arg_cython():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in the final expression\n+    f = autowrap(expr, args=(x,), backend='cython')\n \n-def test_empty_f_code():\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..2cc2ce8 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,18 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, Eq, Symbol, S, FiniteSet\n \n-def test_issue_9623():\n+def test_intersection_removes_duplicates():\n+    x = Symbol('x')\n+    # Test case based on the issue description\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    assert Intersection({1}, {1}, {x}).doit() == S.EmptySet\n+    assert Intersection({1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {1}, {1}) == {1}  # Additional case with all identical sets\n+    assert Intersection(FiniteSet(1, 1, 1), FiniteSet(1, 1), FiniteSet(1)) == FiniteSet(1)\n+    # Testing ordering does not affect outcome\n+    assert Intersection({1}, {2}, {1, 2}) == {1}\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..55949f8 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -10,13 +11,28 @@ from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayPermuteDims, CodegenArrayElementwiseAdd)\n from sympy.printing.lambdarepr import NumPyPrinter\n \n-from sympy.utilities.pytest import warns_deprecated_sympy\n-from sympy.utilities.pytest import skip\n+from sympy.utilities.pytest import warns_deprecated_sympy, skip, raises\n+from sympy.matrices import MatrixSymbol, Identity\n from sympy.external import import_module\n \n np = import_module('numpy')\n+def test_identity_matrix_lambdify():\n+    if not np:\n+        skip(\"NumPy not installed.\")\n+\n+    n = symbols('n', integer=True)\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    a = np.array([[1, 2], [3, 4]])\n+\n+    # Testing static Identity matrix handling\n+    f_static = lambdify(A, A + Identity(2), 'numpy')\n+    result_static = f_static(a)\n+    expected_static = np.array([[2, 2], [3, 5]])\n+    assert (result_static == expected_static).all()\n \n-def test_numpy_piecewise_regression():\n+    # Testing dynamic (symbolic) Identity matrix handling\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n), 'numpy'))\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..672ea0b 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,14 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n-def test_issue_7971():\n+def test_issue_17137():\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify((cos(x) + sin(x))**I) == (cos(x) + sin(x))**I\n+    assert simplify(exp(x*I)) == exp(x*I)\n+    assert simplify(log(x)**I) == log(x)**I\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..b0a81e4 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -114,7 +115,16 @@ def test_point():\n     assert p.translate(y=1) == Point(1, 2)\n     assert p.translate(*p.args) == Point(2, 2)\n \n-    # Check invalid input for transform\n+    # Test multiplication order between Point and numbers\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    number = sympify(2.0)\n+\n+    # This should not raise an exception\n+    assert point1 + point2 * number == Point(2.0, 2.0)\n+\n+    # This should not raise an exception and result should be the same\n+    assert point1 + number * point2 == Point(2.0, 2.0)\n     raises(ValueError, lambda: p3.transform(p3))\n     raises(ValueError, lambda: p.transform(Matrix([[1, 0], [0, 1]])))\n \n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..fb95f7a 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,37 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import Symbol, symbols, sympify\n+from sympy.core.tests.test_sympify import raises\n+\n+def test_symbol_equality_with_objects():\n+    # Ensure no eval is triggered and comparison is safe\n+    x = Symbol('x')\n+\n+    # C's repr should not invoke eval\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    assert (x == C()) is False\n+    assert (x != C()) is True  # Should not raise\n+\n+    # Another case with C's repr returning 'x' (should not compare equal)\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (x == D()) is False\n+    assert (x != D()) is True  # Should be safe, no eval\n+\n+    # Ensure that direct comparison with potentially dangerous repr is false.\n+    class DangerousRepr:\n+        def __repr__(self):\n+            return '__import__(\"os\").system(\"ls\")'\n+\n+    assert (x == DangerousRepr()) is False\n+    assert (x != DangerousRepr()) is True  # No unintended eval executed\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1933,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..ac3f741 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String, Basic\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -67,6 +68,8 @@ def test_sizeof():\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n     assert all(atom == typename for atom in sz.atoms())\n+    # Additional test related to the issue\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..156beb2 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,25 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_blockdiagmatrix_single_element():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_blockdiagmatrix_multiple_elements():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    assert B == Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..d15a8c6 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -83,7 +84,17 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_symbolic_indexing_within_blockmatrix():\n+    from sympy import symbols, MatrixSymbol, BlockMatrix, MatrixElement\n+    from sympy.abc import i, n\n+\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+\n+    # Test that fetching C[i, 0] does not simplify to a specific sub-matrix element\n+    # This should remain a MatrixElement without simplification as per the issue\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..c9fc2c1 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -305,6 +305,22 @@ def test_sign():\n     # evaluate what can be evaluated\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n+    # Test for rewrite using Abs\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    f = Function('f')\n+\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(3).rewrite(Abs) == 1\n+    assert sign(-5).rewrite(Abs) == -1\n+    assert sign(I).rewrite(Abs) == I\n+    assert sign(-I).rewrite(Abs) == -I\n+    assert sign(2 + 3*I).rewrite(Abs) == (2 + 3*I)/Abs(2 + 3*I)\n+    assert sign(x + I*y).rewrite(Abs) == (x + I*y)/Abs(x + I*y)\n+\n     eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n     # if there is a fast way to know when and when you cannot prove an\n     # expression like this is zero then the equality to zero is ok\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..d78c8a9 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,42 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n def test_partitions():\n+    # Verify that calling list(partitions(...)) gives correct and distinct dictionaries\n+    def are_dicts_distinct(dicts):\n+        \"\"\" Helper function to check if all dictionaries in a list are distinct instances. \"\"\"\n+        return all(d1 is not d2 for i, d1 in enumerate(dicts) for d2 in dicts[i+1:])\n+\n+    # Test distinct dictionaries for n=6, k=2\n+    partitions_list = list(partitions(6, k=2))\n+    assert [p.copy() for p in partitions_list] == [\n+        {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    assert are_dicts_distinct(partitions_list), \"Dictionaries should be distinct instances\"\n+    \n+    # Test distinct dictionaries for n=6, k=3\n+    partitions_list = list(partitions(6, k=3))\n+    assert [p.copy() for p in partitions_list] == [\n+        {3: 2}, {1: 1, 2: 1, 3: 1}, {1: 3, 3: 1}, {2: 3}, {1: 2, 2: 2},\n+        {1: 4, 2: 1}, {1: 6}]\n+    assert are_dicts_distinct(partitions_list), \"Dictionaries should be distinct instances\"\n+\n+    # Test distinct dictionaries for n=3, m=2 with Sympy's symbolic integer (S(3))\n+    partitions_list = list(partitions(S(3), m=2))\n+    assert [p.copy() for p in partitions_list] == [\n+        {3: 1}, {1: 1, 2: 1}]\n+    assert are_dicts_distinct(partitions_list), \"Dictionaries should be distinct instances\"\n+\n+    # Test what happens when partitions are used in a trivial way\n+    trivial_partitions = list(p.copy() for p in partitions(4))\n+    unique_partitions = list(uniq(p.copy() for p in partitions(4)))\n+    assert trivial_partitions == [\n+        {4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n+    assert unique_partitions == [\n+        {4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n+    assert are_dicts_distinct(trivial_partitions), \"Dictionaries should be distinct instances\"\n+    assert are_dicts_distinct(unique_partitions), \"Dictionaries should be distinct instances\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..8f75e35 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -253,8 +253,12 @@ def test_power_rewrite_exp():\n     assert all((1/func(x)).rewrite(exp) == 1/(func(x).rewrite(exp)) for func in\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n+from sympy import S, oo, symbols, Pow\n \n def test_zero():\n+    # Test issue 19572\n+    assert 0 ** -oo == S.ComplexInfinity\n+    assert Pow(0, -oo) == S.ComplexInfinity\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..e923d27 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n-                                 volume, kilometer)\n+                                 volume, kilometer, joule)\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n@@ -46,7 +47,32 @@ def test_convert_to():\n     assert speed_of_light.convert_to(m) == speed_of_light\n \n \n-def test_Quantity_definition():\n+def test_issue_convert_to_combining_orthogonal_units():\n+    # Test case based on the provided issue:\n+    expr = joule * second\n+    \n+    # The issue expected return here should be joule*second (unchanged)\n+    conv = convert_to(expr, joule)\n+    assert conv == expr, f\"Expected {expr}, got {conv}\"\n+\n+    # Additional tests to check conversion to compatible units or scales\n+    assert convert_to(expr, joule * second) == joule * second\n+    assert convert_to(expr, kg * m**2 / s) == kg * m**2 / s\n+    assert convert_to(expr, minute) == joule * minute / 60\n+\n+    # A test for a logically incompatible unit request that should remain unchanged or throw an error/exception\n+    try:\n+        convert_to(expr, m)\n+        raise AssertionError(\"Expected a conversion failure or unchanged expression\")\n+    except Exception:\n+        pass\n+\n+    # Another incompatible conversion\n+    try:\n+        convert_to(expr, grams)\n+        raise AssertionError(\"Expected a conversion failure or unchanged expression\")\n+    except Exception:\n+        pass\n     q = Quantity(\"s10\", abbrev=\"sabbr\")\n     q.set_global_relative_scale_factor(10, second)\n     u = Quantity(\"u\", abbrev=\"dam\")\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..7a39458 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,18 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import sympy\n+from sympy import Symbol\n+import pytest\n+...\n+\n+def test_symbol_dict_and_slots():\n+    \"\"\"Test to check __dict__ and __slots__ behavior of Symbol.\"\"\"\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbols should not have __dict__ attribute\"\n+    assert hasattr(s, '__slots__'), \"Symbols should have __slots__ attribute\"\n+    assert s.__slots__ == ('name',), \"Symbol slots should be ('name',)\"\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..199d65c 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, sin, Integral, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -160,6 +161,17 @@ def test_sign():\n     x = Symbol('x', complex=True)\n     assert refine(sign(x), Q.zero(x)) == 0\n \n+def test_refine_complex_arguments():\n+    a = Symbol('a', complex=True)\n+    x = Symbol('x', real=True)\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    # Test refine on a specific Integral result with condition that a is positive\n+    assert refine(J.doit(), Q.positive(a)) == Piecewise((1/(a**2 + 1), 2*Abs(arg(a)) < pi), (Integral(exp(-a*x)*sin(x), (x, 0, oo)), True))\n+    \n+    # Further simplification tests based on the issue statement\n+    assert refine(abs(a), Q.positive(a)) == a\n+    assert refine(arg(a), Q.positive(a)) == 0\n+\n \n def test_func_args():\n     class MyClass(Expr):\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..82b5f2b 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -9,6 +10,34 @@ from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n def test_subs():\n+    # Test for issue with PolynomialError related to sinh, Piecewise, and exp\n+    from sympy import sinh, exp, Piecewise, clearsympy, raises, PolynomialError, cosh, tanh\n+\n+    clearsympy()\n+\n+    # Test case that was originally failing with PolynomialError\n+    x, y, z = symbols('x y z', real=True)\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    try:\n+        result = expr.subs({1: 1.0})\n+        assert result == expr.subs({1: 1.0}), \"Substitution succeeded\"\n+    except PolynomialError:\n+        pass  # Expected previously when issue was not fixed\n+\n+    # Additional tests for similar scenarios with cosh and tanh\n+    expr_cosh = exp(cosh(Piecewise((x, y > x), (y, True)) / z))\n+    try:\n+        result_cosh = expr_cosh.subs({1: 1.0})\n+        assert result_cosh == expr_cosh.subs({1: 1.0}), \"Substitution succeeded for cosh\"\n+    except PolynomialError:\n+        pass  # Catch and understand if raised\n+\n+    expr_tanh = exp(tanh(Piecewise((x, y > x), (y, True)) / z))\n+    try:\n+        result_tanh = expr_tanh.subs({1: 1.0})\n+        assert result_tanh == expr_tanh.subs({1: 1.0}), \"Substitution succeeded for tanh\"\n+    except PolynomialError:\n+        pass  # Catch and understand if raised\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..811beed 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -45,7 +47,15 @@ def test_Matrix_kind():\n         m = cls.zeros(3, 2)\n         assert m.kind is MatrixKind(NumberKind)\n \n-def test_MatMul_kind():\n+def test_Derivative_kind():\n+    from sympy import MatrixSymbol\n+    from sympy.core.kind import MatrixKind, NumberKind\n+    A = MatrixSymbol('A', 2, 2)\n+    comm_x = Symbol('x')\n+    # Test case to verify `Derivative` kind for a MatrixSymbol\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n+    # Simple Derivative that should default to NumberKind\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n     assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..2046f5d 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -109,6 +109,18 @@ def test_monomials():\n     assert set(itermonomials([x], [0])) == {S.One}\n     assert set(itermonomials([x], [1])) == {S.One, x}\n     assert set(itermonomials([x], [2])) == {S.One, x, x**2}\n+\n+    # Test cases for itermonomials with integer min_degrees and max_degrees\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    # Test integer min and max degrees equal to 3\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2, x2**3, x2**2*x3, x2*x3**2, x3**3}\n+\n+    # Test integer min_degree = 2 and max_degree = 3\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2, x2**3, x2**2*x3, x2*x3**2, x3**3, x2*x1, x3*x1, x3*x2, x1**2, x2**2, x3**2}\n+\n+    a, b = symbols('a b', commutative=False)\n+    # Test non-commutative integers min and max degrees\n+    assert set(itermonomials([a, b], 2, 2)) == {a**2, a*b, b*a, b**2}\n     assert set(itermonomials([x], [3])) == {S.One, x, x**2, x**3}\n \n     assert set(itermonomials([x], [3], [1])) == {x, x**3, x**2}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..eeac9f0 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,8 +50,11 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n-\n-def test_solve_biquadratic():\n+def test_issue_infinite_solution_detection():\n+    # Test for system (x - 1) with (x, y) should raise NotImplementedError\n+    raises(NotImplementedError, lambda: solve_poly_system((x - 1,), x, y))\n+    # Test for system (y - 1) with (x, y) should also raise NotImplementedError\n+    raises(NotImplementedError, lambda: solve_poly_system((y - 1,), x, y))\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n \n     f_1 = (x - 1)**2 + (y - 1)**2 - r**2\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7dcbdb9 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.core.sympify import sympify\n+from sympy.core.parameters import evaluate\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..681be66 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -346,8 +346,25 @@ def test_cse_MatrixSymbol():\n     n = symbols('n', integer=True)\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n-\n-def test_cse_MatrixExpr():\n+def test_cse_MatrixSymbol_indexing():\n+    from sympy import MatrixSymbol, cse, symbols, Matrix\n+    A = MatrixSymbol(\"A\", 4, 4)\n+    B = MatrixSymbol(\"B\", 4, 4)\n+    \n+    # Use the test matrices as described in the issue code example.\n+    t44 = lambda name: Matrix(4, 4, lambda i, j: symbols(f'{name}_{i}_{j}'))\n+    a = t44('A')\n+    b = t44('B')\n+    \n+    expr = a * b\n+    replaced_expr, simplified_expr = cse(expr)\n+\n+    # Assert that no redundant copies are created, thus the replacements should be empty\n+    assert not replaced_expr\n+\n+    # Verify that the simplified expression is equivalent (ignoring specific variable names)\n+    sym_expr = Matrix(4, 4, lambda i, j: simplified_expr[0][i, j].subs({x: a if str(x).startswith('A_') else b for x in simplified_expr[0].free_symbols}))\n+    assert expr.equals(sym_expr)\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..084c9bb 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,6 +38,12 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n+def test_empty_array_creation():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n \n def test_issue_18361():\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..8837220 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1174,8 +1174,23 @@ def test_scipy_polys():\n                     )\n \n \n-\n-def test_lambdify_inspect():\n+def test_lambdify_tuple_with_one_element():\n+    # Test with a tuple containing one element\n+    f = lambdify([], (1,))\n+    assert f() == (1,)\n+\n+    # Check the source code to see if the tuple is represented correctly with a comma\n+    source_code = inspect.getsource(f)\n+    assert \"return (1,)\" in source_code\n+\n+def test_lambdify_tuple_with_two_elements():\n+    # Test with a tuple containing two elements\n+    f = lambdify([], (1, 2))\n+    assert f() == (1, 2)\n+\n+    # Check source code to ensure it remains correct\n+    source_code = inspect.getsource(f)\n+    assert \"return (1, 2)\" in source_code\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..c95e048 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,7 +541,37 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy import exp\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+    \n+    # Define quantities\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    \n+    # Assign dimensions to quantities\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    \n+    # Set scale factors\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    \n+    # Test expression for dimensionlessness\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+    \n+    # Test corrected behavior for exponential expression\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..c79330a 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -31,6 +31,11 @@ def test_tensor_product_dagger():\n     assert Dagger(TensorProduct(mat1, mat2)) == \\\n         TensorProduct(Dagger(mat1), Dagger(mat2))\n \n+from sympy import symbols\n+from sympy.physics.quantum import TensorProduct as TP, Dagger, Operator, Commutator as Comm\n+\n+A, B, C = symbols('A B C', commutative=False)\n+x, y = symbols('x y')\n \n def test_tensor_product_abstract():\n \n@@ -46,6 +51,20 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+def test_tensor_product_expand():\n+    assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n+        TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C) \n+\n+    # Additional test cases based on issue description and original test patch\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2*B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(B, A) + 2 * TP(B, B) + TP(A, A) + TP(A, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..c371485 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,6 +563,50 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24211():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    # Original test case\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+    # Additional test case: Scaling with different factors\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 2 * meter / second)\n+\n+    expr2 = A1 * T1 + V2\n+    SI._collect_factor_and_dimension(expr2)  # should not throw ValueError\n+\n+    # Additional test case: Edge case when terms are the same\n+    expr3 = V1 + V1\n+    SI._collect_factor_and_dimension(expr3)  # should not throw ValueError and have dimension velocity\n+\n+    # Test case with negative scaling\n+    V3 = Quantity('V3')\n+    SI.set_quantity_dimension(V3, velocity)\n+    SI.set_quantity_scale_factor(V3, -1 * meter / second)\n+\n+    expr4 = V1 + V3\n+    result_factor, result_dim = SI._collect_factor_and_dimension(expr4)\n+    assert result_factor == 0  # Factors cancel out\n+    assert result_dim == SI.get_quantity_dimension(V1)  # Dimension should be velocity\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..916b484 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, V\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,12 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    assert m * W == W / 1000\n+    assert milli * W == W / 1000\n+    assert milli * V == V / 1000\n+    assert W * milli == W / 1000\n+    assert V * milli == V / 1000\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..4af962a 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -7,7 +7,7 @@ from django.test.utils import CaptureQueriesContext, isolate_apps\n \n from .models import (\n     Base, Chef, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n-    MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase,\n+    MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase, Child,\n     Supplier, Title, Worker,\n )\n \n",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..c0ffdb2 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -6,6 +6,20 @@ should be a list or tuple of field names. This tells Django how to order\n ``QuerySet`` results.\n \n If a field name in ``ordering`` starts with a hyphen, that field will be\n+class OneModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+    class Meta:\n+        ordering = (\"-id\",)\n+\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n ordered in descending order. Otherwise, it'll be ordered in ascending order.\n The special-case field name ``\"?\"`` specifies random order.\n \n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..23a392e 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2941,7 +2941,33 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<label for=\"id_field\" class=\"foo required\">Field:</label>'\n         )\n         self.assertHTMLEqual(f['field2'].label_tag(), '<label for=\"id_field2\">Field2:</label>')\n+    def test_boundwidget_id_resolution(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the specified ID in widget attributes.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+        \n+        # Create a form with a custom auto_id\n+        form = SomeForm(auto_id='custom_prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+\n+        # Ensure that the custom ID is used for each subwidget\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_prefix_field_1')\n+\n+        # Now with a custom id in widget.attrs\n+        form = SomeForm()\n+        form.fields['field'].widget.attrs['id'] = 'fixed_id'\n+        subwidgets = form['field'].subwidgets\n \n+        # Check if custom fixed id is respected\n+        self.assertEqual(subwidgets[0].id_for_label, 'fixed_id')\n+        self.assertEqual(subwidgets[1].id_for_label, 'fixed_id')\n+        \n     def test_label_split_datetime_not_displayed(self):\n         class EventForm(Form):\n             happened_at = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..0b82256 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,25 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+# Additional test case to verify that the migrate command respects the database parameter.\n+@override_settings(DATABASE_ROUTERS=[\"utils.tenant_db_router.TenantDatabaseRouter\"])\n+class MigrateCommandDatabaseParameterTest(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        # Simulate the middleware setting the local_state.subdomain\n+        from utils.tenant_db_router import local_state\n+        local_state.subdomain = \"tenant_1\"\n+\n+    def test_migrate_respects_database_parameter(self):\n+        # Redirect stdout to capture management command output\n+        out = StringIO()\n+        call_command('migrate', database='other', stdout=out)\n+        \n+        # Check if any incorrect access to the main database is attempted\n+        self.assertNotIn(\"read\", out.getvalue())\n+\n+        # Verify if the permissions are created in the 'other' database\n+        self.assertGreater(Permission.objects.using(\"other\").count(), 0)\n",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..459f306 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,31 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+def test_log_norm_issue_reproduction():\n+    img = 10 ** np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Initially, the norm should be linear\n+    assert isinstance(plot.norm, Normalize)\n+\n+    # Change to LogNorm and update the colorbar\n+    plot.set_norm(LogNorm())\n+    cb.update_normal(plot)\n+    fig.canvas.draw_idle()\n+\n+    # The colorbar should reflect the log scale now\n+    y_ticks = [tick.get_text() for tick in cb.ax.get_yticklabels()]\n+    assert all('$\\\\mathdefault{10^{' in t for t in y_ticks)\n+\n+    plt.close(fig)\n+\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm, Normalize\n+import numpy as np\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..a1fa295 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,38 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn import set_config\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Check with pandas output\n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    \n+    try:\n+        result = union.fit_transform(data)\n+        assert isinstance(result, pd.DataFrame), \"Expected output type to be pandas DataFrame\"\n+    except ValueError as e:\n+        pytest.fail(f\"FeatureUnion with pandas output failed with ValueError: {e}\")\n+\n+    # Check if the index of result matches with unique dates since grouping was done by date\n+    unique_dates = len(data[\"date\"].unique())\n+    assert result.shape[0] == unique_dates, (\n+        f\"Expected result with {unique_dates} rows, got {result.shape[0]}\"\n+    )\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..5a5d2c2 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -133,7 +133,51 @@ def test_decorators(app):\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_slots_attribute(app):\n+def test_annotation_only_inherited_attributes(app):\n+    # Test for attributes defined with only type annotations in the superclass\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only_inherited.Foo', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Foo()',\n+        '   :module: target.annotation_only_inherited',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Foo.attr1',\n+        '      :module: target.annotation_only_inherited',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+    ]\n+\n+    actual = do_autodoc(app, 'class', 'target.annotation_only_inherited.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_only_inherited',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_only_inherited',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_only_inherited',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'class', 'target.slots.Bar', options)\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..3984b2a 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,8 +358,24 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+\n+    # Tests for dot products\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+    # Additional test for direct sin/cos expression simplification\n+    expr = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    assert trigsimp(expr) == cos(S(1)/50 - S(1)/25)\n \n-def test_exptrigsimp():\n+    # Test acos simplification\n+    acos_expr = acos(expr)\n+    assert trigsimp(acos_expr) == acos(cos(S(1)/50 - S(1)/25))\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..7596cc2 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4587,6 +4587,21 @@ n  + n + x  + x + \u2500 + \u2500          \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e    \\n\\\n+ ___   \\n\\\n+ \u2572     \\n\\\n+  \u2572   x\\n\\\n+  \u2571    \\n\\\n+ \u2571     \\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  \\n\\\n+   + 3 \\\n+\"\"\")\n+    assert upretty(expr) == ucode_str\n+\n     expr = Sum(x, (x, 0, oo))\n     ascii_str = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..04b8fee 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,17 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    # Test when modifying the list during iteration\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..4437aca 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -5,6 +6,7 @@ from operator import attrgetter\n \n from django.core.exceptions import FieldError\n from django.db import connection\n+from django.db.models import Max\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n",
  "django__django-15320": "",
  "django__django-15819": "",
  "django__django-16408": "",
  "matplotlib__matplotlib-23476": "",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..bded58f 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn import PairGrid\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,24 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_map_hue_error_in_pairgrid(self):\n+        \"\"\"\n+        Test for issue where mapping a `hue` argument to PairGrid results in a KeyError.\n+        This addresses the specific issue where mapping a hue to sns.scatterplot in a \n+        PairGrid causes errors, by ensuring no such error occurs in the current seaborn release.\n+        \"\"\"\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+\n+        # Create a PairGrid without using hue in its constructor\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        \n+        # Map scatterplot with hue on PairGrid should not result in an error\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+        except Exception as e:\n+            pytest.fail(f\"Mapping hue in PairGrid raised an exception: {e}\")\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..405ecb9 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,7 +405,17 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n-    def test_pytest_collect_file_from_sister_dir(self, testdir):\n+    def test_shorthand_collect_only(self, testdir):\n+        # Test that the shorthand '-co' works equivalently to '--collect-only'\n+        sub1 = testdir.mkpydir(\"sub1\")\n+        test_py = sub1.join(\"test_example.py\")\n+        test_py.write(\"def test_example(): pass\")\n+        result_long = testdir.runpytest(\"--collect-only\")\n+        result_short = testdir.runpytest(\"--co\")\n+        assert result_long.ret == 0\n+        assert result_short.ret == 0\n+        # Check if both outputs contain the same tests\n+        assert result_long.stdout.str() == result_short.stdout.str()\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n         conf1 = testdir.makeconftest(\n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..916e129 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -83,6 +83,17 @@ def complex_func(arg1, arg2, arg3=None, *args, **kwargs):\n     pass\n \n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n def missing_attr(c,\n                  a,  # type: str\n                  b=None  # type: Optional[str]\n@@ -98,4 +109,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..06439e6 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,24 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n-\n-def test_Identity_doit():\n+def test_issue_identity_matrix_sum():\n+    from sympy import MatrixSymbol, Identity, symbols, Sum\n+    \n+    n = symbols('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+    \n+    # Verifying the identity matrix In is created correctly\n+    assert In[0, 0] == 1\n+    assert In[0, 1] == 0\n+    assert In[1, 0] == 0\n+    assert In[1, 1] == 1\n+    \n+    # Check if the sum of diagonal elements is 'n'\n+    assert Sum(In[i, i], (i, 0, n-1)).doit() == n\n+    \n+    # Check if the total sum of the elements is 'n'\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..a06add9 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,6 +251,38 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n+def test_issue_21537():\n+    from sympy.parsing.latex import parse_latex\n+    from sympy import Symbol, Pow, Add, Mul\n+\n+    # Defining symbols for the expression\n+    a = Symbol('a')\n+    b = Symbol('b')\n+    c = Symbol('c')\n+\n+    # Original problematic expression parsing\n+    parsed_expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    expected_expr = Mul(\n+        Mul(\n+            Add(Pow(a, 3), b), \n+            Pow(c, -1)\n+        ),\n+        Pow(Mul(Pow(c, 2), Pow(1, -1)), -1)\n+    )\n+\n+    # Assert the parsed expression matches the expected expression\n+    assert parsed_expr == expected_expr, f\"Expected: {expected_expr}, got: {parsed_expr}\"\n+\n+    # Add additional test cases if necessary:\n+    # Add cases which check expressions with similar structures to catch future edge cases \n+    additional_cases = [\n+        (r\"\\frac{\\frac{x+y}{z}}{\\frac{1}{z^2}}\", Mul(Mul(Add(Symbol('x'), Symbol('y')), Pow(Symbol('z'), -1)), Pow(Mul(Pow(Symbol('z'), 2), Pow(1, -1)), -1))),\n+        # Add more if needed\n+    ]\n+\n+    for latex_str, expected in additional_cases:\n+        assert parse_latex(latex_str) == expected, f\"Failed for {latex_str}\"\n+\n # These bad LaTeX strings should raise a LaTeXParsingError when parsed\n BAD_STRINGS = [\n     r\"(\",\n"
}