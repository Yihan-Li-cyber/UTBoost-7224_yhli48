{
  "astropy__astropy-12907": "",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..99f94f2 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,23 @@\n+\n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing a QTable with header_rows to RST format\"\"\"\n+    tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+    out = StringIO()\n+    try:\n+        tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    except TypeError as e:\n+        assert str(e) == \"RST.__init__() got an unexpected keyword argument 'header_rows'\", \"Incorrect error message for missing header_rows support\"\n+    else:\n+        raise AssertionError(\"Test should have raised TypeError for missing header_rows support\")\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+from astropy.table import QTable\n+import astropy.units as u\n+from io import StringIO\n \n from .common import assert_almost_equal, assert_equal\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..87d86cf 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,34 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+from astropy.io.ascii.qdp import _read_table_qdp\n+\n+def test_lowercase_commands(tmp_path):\n+    # Create a QDP file with lowercase commands\n+    lowercase_qdp_content = \"\"\"\n+    ! Test for lowercase command\n+    read terr 1\n+    read serr 2\n+    ! comment line\n+    1 0.5 1 0.5\n+    NO NO NO NO\n+    \"\"\"\n+\n+    # Write the content to a temporary file\n+    path = str(tmp_path / \"lowercase_test.qdp\")\n+\n+    with open(path, \"w\") as f:\n+        f.write(lowercase_qdp_content)\n \n-def test_read_example():\n+    # Attempt to read the QDP file as a table\n+    try:\n+        table = _read_table_qdp(path, names=[\"Col1\", \"Col2\"])\n+        assert table is not None, \"Table was not read successfully from lowercase QDP commands.\"\n+        assert \"Col1\" in table.colnames, \"Column names not read correctly.\"\n+        assert len(table) == 1, \"Data rows not read correctly.\"\n+    except ValueError as e:\n+        pytest.fail(f\"Lowercase QDP command test failed: {e}\")\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..e9e6f8c 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,47 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..84b8bec 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1102,6 +1102,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertIsNone(default_storage.file_permissions_mode)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n+    \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        FILE_UPLOAD_PERMISSIONS should default to 0o644 if not set in the settings.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n \n     def test_override_file_upload_directory_permissions(self):\n         \"\"\"\n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..4555d00 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -376,6 +376,39 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 2)\n \n+    def test_order_by_multiline_rawsql(self):\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN status IN ('pending', 'completed')\n+                     THEN updated_at\n+                     ELSE created_at END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN status IN ('accepted', 'verification')\n+                     THEN (accepted_datetime, preferred_datetime)\n+                     ELSE null END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN status NOT IN ('accepted', 'verification')\n+                     THEN (accepted_datetime, preferred_datetime, created_at)\n+                     ELSE null END\n+            ''', []).desc(),\n+        )\n+        for qs in (\n+            MyModel.objects.all(),\n+            MyModel.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                # Check if the order_by maintains all specified RawSQL without removing any\n+                ordered_objects = qs.order_by(*raw_order_by)\n+                # Here you should define what the expected sequence is\n+                # Example:\n+                self.assertQuerysetEqual(\n+                    ordered_objects,\n+                    [repr(obj) for obj in [obj1, obj2, obj3]],  # Replace with actual expected objects\n+                    ordered=False  # Assuming the ordering is tested\n+                )\n+\n     def test_order_by_exists(self):\n         mary = Employee.objects.create(firstname='Mary', lastname='Mustermann', salary=20)\n         mustermanns_by_seniority = Employee.objects.filter(lastname='Mustermann').order_by(\n",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..90a0436 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -65,6 +65,11 @@ class TestSerialization(SimpleTestCase):\n         self.assertEqual(instance.field, datetime.timedelta(days=1, hours=1))\n \n \n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.utils import duration\n+from django.test import SimpleTestCase\n+\n class TestValidation(SimpleTestCase):\n \n     def test_invalid_string(self):\n@@ -78,10 +83,27 @@ class TestValidation(SimpleTestCase):\n             \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n         )\n \n+    def test_correct_error_message_format(self):\n+        field = models.DurationField()\n+        with self.assertRaises(ValidationError) as cm:\n+            field.clean('14:00', None)  # Missing seconds, should raise validation error\n+        self.assertEqual(\n+            cm.exception.messages[0],\n+            \"'14:00' value has an invalid format. It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n+    \n+    def test_valid_string_formats(self):\n+        field = models.DurationField()\n+        try:\n+            field.clean('1:14:00', None)  # Should be valid\n+            field.clean('14:00:30', None)  # Should be valid\n+            field.clean('1 14:00:30.123456', None)  # Should be valid\n+        except ValidationError:\n+            self.fail(\"DurationField.clean() raised ValidationError unexpectedly!\")\n \n class TestFormField(SimpleTestCase):\n     # Tests for forms.DurationField are in the forms_tests app.\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..d43820a 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,24 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = [\n+            \"joe\\n\", \"Ren\u00e9\\n\", \"\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30\\n\", \"\u0623\u062d\u0645\u062f\\n\",\n+            \"en\\u2013dash\\n\"\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        invalid_usernames = ['glenn\\n', 'GLEnN\\n', 'jean-marc\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +275,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..fb0e99f 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,19 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        # Test with standard memoryview\n+        r = HttpResponse(memoryview(b\"My Content\"))\n+        self.assertEqual(r.content, b\"My Content\")\n+\n+        # Test with empty memoryview\n+        r = HttpResponse(memoryview(b\"\"))\n+        self.assertEqual(r.content, b\"\")\n+\n+        # Test with memoryview containing binary data\n+        r = HttpResponse(memoryview(b\"\\x00\\x01\\x02\"))\n+        self.assertEqual(r.content, b\"\\x00\\x01\\x02\")\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a4d2853 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..4c49b83 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.db.utils import IntegrityError\n \n from .models import Proxy, UserProxy\n \n@@ -140,7 +142,47 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+        \n+    def test_migration_fails_for_duplicate_permissions(self):\n+        \"\"\"\n+        Test that the migration fails with an IntegrityError when trying\n+        to create duplicate permissions for proxy models.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(UserProxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_userproxy',\n+            name='Can add user proxy',\n+        )\n+        with self.assertRaises(IntegrityError):\n+            Permission.objects.create(\n+                content_type=proxy_model_content_type,\n+                codename='add_userproxy',  # Duplicate codename\n+                name='Can add user proxy',\n+            )\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..10d2508 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -3,6 +3,8 @@ import os\n import py_compile\n import shutil\n import sys\n+import os\n+import sys\n import tempfile\n import threading\n import time\n@@ -19,8 +21,27 @@ from django.test.utils import extend_sys_path\n from django.utils import autoreload\n from django.utils.autoreload import WatchmanUnavailable\n \n+from django.utils.autoreload import is_django_main_module\n from .utils import on_macos_with_hfs\n \n+class TestDjangoMainModule(SimpleTestCase):\n+    def test_manage_py_file_is_tracked(self):\n+        \"\"\"\n+        Ensure that modifications in manage.py trigger the autoreloader.\n+        \"\"\"\n+        manage_py_path = Path(__file__).parent / 'manage.py'\n+\n+        # Simulate the manage.py module using `__main__`\n+        with mock.patch.object(sys, 'modules', {'__main__': mock.Mock(__file__=str(manage_py_path))}):\n+            self.assertTrue(is_django_main_module())\n+\n+        # Simulate manage.py modification\n+        with manage_py_path.open('w') as f:\n+            f.write('print(\"modification\")\\n')\n+\n+        # Check if the manage.py file is detected after modification\n+        self.assertFileFound(manage_py_path)\n+\n \n class TestIterModulesAndFiles(SimpleTestCase):\n     def import_and_cleanup(self, name):\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..2367a65 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1,5 +1,41 @@\n import importlib\n import inspect\n+class TestTechnical404InPathConverter(SimpleTestCase):\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that raising Http404 in a path converter's to_python method\n+        results in a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    @override_settings(DEBUG=True)\n+    def test_technical_404_contains_debug_information(self):\n+        \"\"\"\n+        Test that raising Http404 provides additional debug information\n+        when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404(\"Custom message\")):\n+            response = self.client.get('/path-post/1/')\n+            # Check for custom message as part of debug information\n+            self.assertContains(response, 'Custom message', status_code=404)\n+            # Check for presence of debug information in the response\n+            self.assertContains(response, 'DEBUG', status_code=404)\n+            self.assertContains(response, 'Request Method:', status_code=404)\n+\n+    @override_settings(DEBUG=False)\n+    def test_non_technical_404_when_debug_is_false(self):\n+        \"\"\"\n+        Test that raising Http404 does not provide technical debug \n+        information when DEBUG is False.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404(\"Custom message\")):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+            self.assertNotContains(response, 'DEBUG')\n+            self.assertNotContains(response, 'Request Method:')\n+\n import os\n import re\n import sys\n@@ -10,6 +46,10 @@ from pathlib import Path\n from unittest import mock\n \n from django.core import mail\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n+from django.test import SimpleTestCase\n+from unittest import mock\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db import DatabaseError, connection\n from django.shortcuts import render\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..03dc947 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -84,7 +84,33 @@ class BinaryFieldTests(SimpleTestCase):\n @isolate_apps('invalid_models_tests')\n class CharFieldTests(SimpleTestCase):\n \n-    def test_valid_field(self):\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n         class Model(models.Model):\n             field = models.CharField(\n                 max_length=255,\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..ef134af 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -252,6 +252,26 @@ class WriterTests(SimpleTestCase):\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n+    def test_serialize_enum_using_name_instead_of_value(self):\n+        class TextTranslatedEnum(Enum):\n+            A = _('a-value')\n+            B = _('b-value')\n+\n+        # Test default for a CharField\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+        )\n+        \n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('b-value', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n     def test_serialize_enums(self):\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..c426138 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..d598879 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,28 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..af2772a 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -147,6 +147,8 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.db import models\n+from django.test import TestCase\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 7b8648d..26b07a2 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -67,8 +67,21 @@ class SimplifiedURLTests(SimpleTestCase):\n                     match.route,\n                     r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n                 )\n-\n-    def test_path_lookup_with_inclusion(self):\n+    def test_re_path_with_optional_format_parameter(self):\n+        match = resolve('/module/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': None})\n+        self.assertEqual(\n+            match.route,\n+            r'^module/(?P<format>(html|json|xml))?/?$',\n+        )\n+        match = resolve('/module/json/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'json'})\n+        self.assertEqual(\n+            match.route,\n+            r'^module/(?P<format>(html|json|xml))?/?$',\n+        )\n         match = resolve('/included_urls/extra/something/')\n         self.assertEqual(match.url_name, 'inner-extra')\n         self.assertEqual(match.route, 'included_urls/extra/<extra>/')\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..0348d61 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -148,7 +149,21 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+class OverridingInheritedFieldDisplayTests(TestCase):\n+    def test_overriding_inherited_field_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')])\n+\n+        # Check that overridden choices work correctly\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+        self.assertEqual(Child(foo='C').get_foo_display(), 'Child C')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..2c2c36c 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,7 +76,39 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    @override_settings(USE_I18N=True, LANGUAGES=[('en', 'English')])\n+    def test_invalid_default_language_code(self):\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        for tag in ['fr', 'fr-CA', 'fr-357']:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [\n+                    Error(msg, id='translation.E004'),\n+                ])\n+      \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_valid_variant_consistent_language_settings(self):\n+        tests = [\n+            # language + region.\n+            'fr-CA',\n+            'es-419',\n+            'de-at',\n+            # language + region + variant.\n+            'ca-ES-valencia',\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..ec8b1e5 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,8 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n+from django.db import connection, models\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..c25cafa 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,6 +159,33 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_correct_hint_for_recursive_relationship(self):\n+        class Entity(models.Model):\n+            pass\n+\n+        class Container(models.Model):\n+            entities = models.ManyToManyField('Entity', through=\"ConflictingRelationship\")\n+\n+        class ConflictingRelationship(models.Model):\n+            first_entity = models.ForeignKey(Entity, models.CASCADE, related_name=\"first_entity\")\n+            first_container = models.ForeignKey(Container, models.CASCADE, related_name='first_container')\n+            second_container = models.ForeignKey(Container, models.CASCADE, related_name='second_container')\n+\n+        field = Container._meta.get_field('entities')\n+        self.assertEqual(field.check(from_model=Container), [\n+            Error(\n+                \"The model is used as an intermediate model by 'invalid_models_tests.Container.entities', \"\n+                \"but it has more than one foreign key from 'Container', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, '\n+                    'use ManyToManyField(\"self\", through=\"ConflictingRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..5c14a70 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,7 +1249,48 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n-    def test_request_meta_filtering(self):\n+    def test_cleanse_setting_recurses_in_list_tuples_nested(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'user',\n+                'password': 'topsecret',\n+                'apps': [\n+                    {'name': 'app1', 'api_key': 'apikey1'},\n+                    {'name': 'app2', 'api_key': 'apikey2'},\n+                ],\n+                'tokens': ['token1', 'token2'],\n+            },\n+            {'SECRET_KEY': 'secretkey'},\n+            [\n+                {'deep_secret': 'verysecret'},\n+                [{'even_deeper': 'deepsecret'}]\n+            ]\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'user',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': [\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ],\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+            [\n+                {'deep_secret': reporter_filter.cleansed_substitute},\n+                [{'even_deeper': reporter_filter.cleansed_substitute}]\n+            ]\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed)\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..0182a5d 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,23 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_queryset_delete_empty_with_foreign_key(self):\n+        \"\"\"\n+        Test that QuerySet.delete returns (0, {'app.Model': 0}) for models with foreign keys\n+        when no objects are deleted.\n+        \"\"\"\n+        deleted_count, deleted_objs = HiddenUserProfile.objects.filter(user=None).delete()\n+        self.assertEqual(deleted_count, 0)\n+        self.assertEqual(deleted_objs, {HiddenUserProfile._meta.label: 0})\n+\n+    def test_queryset_delete_empty_no_foreign_key(self):\n+        \"\"\"\n+        Test that QuerySet.delete returns (0, {'app.Model': 0}) for models without foreign keys\n+        when no objects are deleted.\n+        \"\"\"\n+        deleted_count, deleted_objs = R.objects.filter(h=None).delete()\n+        self.assertEqual(deleted_count, 0)\n+        self.assertEqual(deleted_objs, {R._meta.label: 0})\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7fb65b7..925c589 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1930,10 +1930,129 @@ class Model(metaclass=ModelBase):\n \n \n ############################################\n+# Test Class to verify Issue Resolution\n+class TestUniqueConstraintChecks(TestCase):\n+\n+    def test_unique_constraint_pointing_to_missing_field(self):\n+        class Model(models.Model):\n+            class Meta:\n+                constraints = [models.UniqueConstraint(fields=['missing_field'], name='name')]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [\n+            Error(\n+                \"'constraints' refers to the nonexistent field 'missing_field'.\",\n+                obj=Model,\n+                id='models.E012',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_pointing_to_m2m_field(self):\n+        class Model(models.Model):\n+            m2m = models.ManyToManyField('self')\n+\n+            class Meta:\n+                constraints = [models.UniqueConstraint(fields=['m2m'], name='name')]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [\n+            Error(\n+                \"'constraints' refers to a ManyToManyField 'm2m', but ManyToManyFields are not permitted in 'constraints'.\",\n+                obj=Model,\n+                id='models.E013',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_pointing_to_non_local_field(self):\n+        class Parent(models.Model):\n+            field1 = models.IntegerField()\n+\n+        class Child(Parent):\n+            field2 = models.IntegerField()\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['field2', 'field1'], name='name'),\n+                ]\n+\n+        self.assertEqual(Child.check(databases=self.databases), [\n+            Error(\n+                \"'constraints' refers to field 'field1' which is not local to model 'Child'.\",\n+                hint='This issue may be caused by multi-table inheritance.',\n+                obj=Child,\n+                id='models.E016',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_pointing_to_fk(self):\n+        class Target(models.Model):\n+            pass\n+\n+        class Model(models.Model):\n+            fk_1 = models.ForeignKey(Target, models.CASCADE, related_name='target_1')\n+            fk_2 = models.ForeignKey(Target, models.CASCADE, related_name='target_2')\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['fk_1_id', 'fk_2'], name='name'),\n+                ]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [])\n+\n+    # Additional Tests Ensuring Fields are Checked Properly\n+\n+    def test_unique_constraint_with_valid_fields(self):\n+        class Model(models.Model):\n+            field1 = models.IntegerField()\n+            field2 = models.CharField(max_length=10)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['field1', 'field2'], name='valid_constraint'),\n+                ]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [])\n+\n+    def test_unique_constraint_field_same_name_as_constraint(self):\n+        class Model(models.Model):\n+            name = models.CharField(max_length=10)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['name'], name='name'),\n+                ]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [])\n+\n+    def test_unique_constraint_on_pk_field(self):\n+        class Model(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['id'], name='unique_id'),\n+                ]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [])\n+\n+    def test_unique_constraint_multiple_valid_fields(self):\n+        class ValidModel(models.Model):\n+            field1 = models.IntegerField()\n+            field2 = models.CharField(max_length=10)\n+            field3 = models.DateField()\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['field1', 'field2', 'field3'], name='complex_constraint'),\n+                ]\n+\n+        self.assertEqual(ValidModel.check(databases=self.databases), [])\n+\n # HELPER FUNCTIONS (CURRIED MODEL METHODS) #\n ############################################\n \n-# ORDERING METHODS #########################\n+import unittest\n+from django.core.checks import Error\n+from django.db import connections, models\n+from django.test import TestCase\n \n def method_set_order(self, ordered_obj, id_list, using=None):\n     if using is None:\n",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..1387597 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,49 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..da052ce 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,11 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Test cases addressing the issue of stripping leading and trailing dashes/underscores\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('--Test with leading dashes--', 'test-with-leading-dashes', False),\n+            ('__Test with leading underscores__', 'test-with-leading-underscores', False),\n+            ('---Mix of __ and -- at both ends---', 'mix-of-and-at-both-ends', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..ea0dba9 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -168,6 +169,14 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num=2).extra(select={'count': 1})\n         self.assertCountEqual(qs1.union(qs2), [(1, 0), (2, 1)])\n \n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        # Before the fix, qs3.none() incorrectly returns all results\n+        self.assertSequenceEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n     def test_union_with_values_list_on_annotated_and_unannotated(self):\n         ReservedName.objects.create(name='rn1', order=1)\n         qs1 = Number.objects.annotate(\n@@ -313,4 +322,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..6d3cc96 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2829,8 +2829,75 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+from django.test import TestCase\n+from .models import Character, StumpJoke\n+from django import forms\n+from django.db import models\n+from django.db.models import Q\n+\n+class TestLimitChoicesToDuplicates(TestCase):\n+    def setUp(self):\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-01')\n+        self.marley = Character.objects.create(username='Marley', last_action='2023-10-01')\n+\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Test case from original patch to ensure duplicates do not occur\n+        joke1 = StumpJoke.objects.create(most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(most_recently_fooled=self.marley)\n+\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n \n-class FormFieldCallbackTests(SimpleTestCase):\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+\n+        # Ensure the queryset doesn't have duplicates\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..b767db9 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -11,6 +11,39 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Check they are not considered equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Check ordering\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        # Check hashes\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +380,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/models/__init__.py b/tests/auth_tests/models/__init__.py\nindex c6505e4..dd8b8f8 100644\n--- a/tests/auth_tests/models/__init__.py\n+++ b/tests/auth_tests/models/__init__.py\n@@ -1,3 +1,6 @@\n+\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from .custom_permissions import CustomPermissionsUser\n from .custom_user import (\n     CustomUser, CustomUserWithoutIsActiveField, ExtensionUser,\n@@ -22,4 +25,4 @@ __all__ = (\n     'IntegerUsernameUser', 'IsActiveTestUser1', 'MinimalUser',\n     'NoPasswordUser', 'Organization', 'Proxy', 'UUIDUser', 'UserProxy',\n     'UserWithDisabledLastLoginField',\n-)\n+)\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..b40490c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -8,6 +9,7 @@ from unittest import mock\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n+from collections import namedtuple\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n     DateField, DateTimeField, DecimalField, DurationField, Exists, Expression,\n@@ -875,6 +877,20 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'],\n             ordered=False\n         )\n+\n+    def test_range_lookup_with_namedtuple_exceeding(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=200, maximum=300),\n+        )\n+        self.assertQuerysetEqual(qs, [])\n+\n+    def test_range_lookup_with_namedtuple_including(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=50, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'])\n         self.assertQuerysetEqual(\n             Company.objects.filter(num_employees__range=(1, 100)),\n             [\n@@ -884,6 +900,20 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_with_namedtuple_exceeding(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=200, maximum=300),\n+        )\n+        self.assertQuerysetEqual(qs, [])\n+\n+    def test_range_lookup_with_namedtuple_including(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=50, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'])\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..6f97411 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,30 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stdout, captured_stderr\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stdout, captured_stderr\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stdout, captured_stderr\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stdout, captured_stderr\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n@@ -1867,7 +1879,31 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_is_respected_when_actually_provided(self):\n+        \"\"\"\n+        Ensure the program name provided directly to execute_from_command_line\n+        is respected when computing %(prog)s.\n+        \"\"\"\n+        args = ['help', 'check']\n+        overridden_prog_name = 'custom-admin'\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line([overridden_prog_name] + args)\n+        self.assertIn('usage: custom-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..dc746c1 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -29,15 +30,81 @@ class ShellCommandTestCase(SimpleTestCase):\n             stdin.seek(0)\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n         select.return_value = ([], [], [])\n@@ -49,4 +116,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..519b155 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -967,7 +967,23 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n \n-    def test_verbose_name_plural_inline(self):\n+    def test_verbose_name_default_plural_from_verbose_name(self):\n+        class ProfileInlineWithVerboseNameOnly(TabularInline):\n+            model = Profile\n+            verbose_name = 'Custom Verbose Name'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [ProfileInlineWithVerboseNameOnly]\n+\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Verify if the plural form is derived from the verbose_name\n+        self.assertContains(response, '<h2>Custom Verbose Names</h2>')\n+        self.assertContains(response, 'Add another Custom Verbose Name')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name_plural = 'Non-verbose childs'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..46a02e0 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -596,6 +596,26 @@ class TestQuerying(TestCase):\n         )\n \n     def test_isnull_key_or_none(self):\n+        # The original test to ensure objects without `value__j` key match.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # Assuming `self.objs[4]` has key `j` with a value that is not null.\n+        )\n+        \n+        # New test case for SQLite and Oracle: ensure objects with `value__b` as JSON null are not included.\n+        # Create objects with different 'b' key values\n+        json_model_null = NullableJSONModel.objects.create(value={'b': None})\n+        json_model_absent = NullableJSONModel.objects.create(value={})\n+        json_model_not_null = NullableJSONModel.objects.create(value={'b': 'not_null_value'})\n+\n+        # Expected objects should include those without the 'b' key, excluding ones where 'b' is explicitly None.\n+        expected_objs = list(NullableJSONModel.objects.filter(id__in=[json_model_absent.id]))\n+\n+        # This assertion checks that using `value__b__isnull=True` doesn't match JSON null values.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__b__isnull=True),\n+            expected_objs,  # Only obj without 'b' key, not the one with 'b': None\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..9567164 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -165,12 +165,25 @@ class DispatcherTests(SimpleTestCase):\n         def fails(val, **kwargs):\n             raise ValueError('this')\n         a_signal.connect(fails)\n-        result = a_signal.send_robust(sender=self, val=\"test\")\n+        with self.assertLogs('django.dispatch', level='ERROR') as cm:\n+            result = a_signal.send_robust(sender=self, val=\"test\")\n         err = result[0][1]\n         self.assertIsInstance(err, ValueError)\n         self.assertEqual(err.args, ('this',))\n         self.assertTrue(hasattr(err, '__traceback__'))\n         self.assertIsInstance(err.__traceback__, TracebackType)\n+\n+        # Verify that the exception was logged\n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(),\n+            \"Error calling fails in Signal.send_robust()\"\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        _, exc_value, _ = log_record.exc_info\n+        self.assertIsInstance(exc_value, ValueError)\n+        self.assertEqual(str(exc_value), 'this')\n+\n         a_signal.disconnect(fails)\n         self.assertTestIsClean(a_signal)\n \n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..15b22d9 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -370,6 +370,30 @@ def mocked_is_overridden(self, setting):\n         self.DEFAULT_AUTO_FIELD != 'django.db.models.AutoField'\n     )\n \n+    def test_inherited_explicit_primary_key(self):\n+        # Test case: Inherited models with explicit primary keys should not raise W042 warnings\n+\n+        class ParentWithPK(models.Model):\n+            id = models.BigAutoField(primary_key=True)\n+\n+        class ChildWithInheritedPK(ParentWithPK):\n+            pass\n+            \n+        warnings = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(warnings, [])\n+\n+    def test_inherited_explicit_primary_key_with_parent_link(self):\n+        # Test case: Inherited models with explicit primary keys and parent_link should not raise warnings.\n+        \n+        class ParentWithPK(models.Model):\n+            id = models.BigAutoField(primary_key=True)\n+\n+        class ChildWithParentLink(ParentWithPK):\n+            parent_ptr = models.OneToOneField(ParentWithPK, models.CASCADE, parent_link=True)\n+        \n+        warnings = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(warnings, [])\n+\n \n @mock.patch('django.conf.UserSettingsHolder.is_overridden', mocked_is_overridden)\n @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n@@ -414,4 +438,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..ea8e654 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -288,8 +288,18 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n         ChoiceModel.objects.create(pk=3, name='c')\n-\n-        # ModelChoiceField\n+    def test_modelchoicefield_value_placeholder(self):\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': 'INVALID CHOICE',\n@@ -307,4 +317,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..58a5383 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,6 @@\n+\n from django.db.models import F, Q\n+import unittest.mock\n from django.test import SimpleTestCase\n \n \n@@ -19,7 +21,27 @@ class QTests(SimpleTestCase):\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n-    def test_combine_not_q_object(self):\n+    def test_combine_or_with_dict_keys(self):\n+        # Test the combination of Q objects using | with dict_keys\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+    def test_combine_and_with_dict_keys(self):\n+        # Test the combination of Q objects using & with dict_keys\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+    def test_pickleability_of_q_object_with_non_standard_types(self):\n+        # Test if Q objects're pickleable when containing non-standard types like dict_keys\n+        q = Q(x__in={}.keys())\n+        try:\n+            with unittest.mock.patch('pickle.dumps') as mock_pickle:\n+                mock_pickle(q)\n+            self.assertTrue(True, \"Pickle operation succeeded.\")\n+        except TypeError:\n+            self.fail(\"Pickle operation failed for Q object with dict_keys\")\n         obj = object()\n         q = Q(x=1)\n         with self.assertRaisesMessage(TypeError, str(obj)):\n",
  "django__django-14017": "",
  "django__django-14155": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..2b66133 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..97f981f 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2217,7 +2217,15 @@ class StartApp(AdminScriptTestCase):\n             \"won't replace conflicting files.\"\n         )\n \n-    def test_template(self):\n+    def test_trailing_slash_handling_in_app_directory(self):\n+        \"\"\"\n+        Test that startapp handles trailing slashes in the target directory name.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'applications', 'example_app')\n+        os.makedirs(app_dir)\n+        out, err = self.run_django_admin(['startapp', 'example_app', os.path.join('applications', 'example_app', '')])\n+        self.assertNoOutput(err)\n+        self.assertTrue(os.path.exists(os.path.join(app_dir, 'apps.py')))\n         out, err = self.run_django_admin(['startapp', 'new_app'])\n         self.assertNoOutput(err)\n         app_path = os.path.join(self.test_dir, 'new_app')\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..9bb426c 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -14,6 +14,7 @@ from django.core import mail\n from django.core.exceptions import ValidationError\n from django.core.mail import EmailMultiAlternatives\n from django.forms.fields import CharField, Field, IntegerField\n+from django.forms import forms\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n@@ -1020,6 +1021,20 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_label_for_readonly_password_hash_widget(self):\n+        \"\"\"\n+        ReadOnlyPasswordHashWidget should render a label without a 'for' attribute,\n+        as it only renders text and not an input element.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        # Check that there is no ID for the label\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        # Ensure the label renders correctly without 'for' attribute\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..73a0973 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,39 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_serialize_type_model(self):\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set()),\n+        )\n+\n+    def test_migration_with_custom_field(self):\n+        \"\"\"\n+        Test the migration generation for a model using a custom field and mixin.\n+        Ensure that the import statement for 'models' is correctly included.\n+        \"\"\"\n+        new_model = type(\n+            'NewModel', \n+            (MyMixin, models.Model), \n+            {'name': app.models.MyField(primary_key=True)}\n+        )\n+\n+        fields = {\n+            'name': app.models.MyField(primary_key=True),\n+        }\n+\n+        options = {\n+            'abstract': False,\n+        }\n+\n+        serialized_model = MigrationWriter.serialize(new_model)\n+        expected_imports = {\"from django.db import models\"}\n+        \n+        # Verify that the serialized output includes necessary imports\n+        self.assertIn(('app.models.MyField', set()), serialized_model)\n+        self.assertIn(('app.models.MyMixin', set()), serialized_model)\n+        self.assertIn(('models.Model', expected_imports), serialized_model)\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..0b3483a 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -358,7 +358,9 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(str(non_form_errors), '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>')\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +984,49 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(str(non_form_errors), '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>')\n+\n+    def test_formset_no_non_form_errors(self):\n+        \"\"\"Formset with valid data should have no non-form errors.\"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '1',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '1',  \n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=0)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertTrue(formset.is_valid())\n+        self.assertEqual(formset.non_form_errors(), [])\n+\n+    def test_formset_custom_errorlist_class(self):\n+        \"\"\"\n+        Test that a custom ErrorList subclass rendering can still handle non-form errors.\n+        \"\"\"\n+        class CustomErrorList(ErrorList):\n+            def as_ul(self):\n+                if not self:  # if the list is empty, display nothing\n+                    return ''\n+                return '<ul class=\"custom-errorlist\">%s</ul>' % ''.join(['<li class=\"custom-error\">%s</li>' % e for e in self])\n+\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-0-choice': '',\n+            'choices-0-votes': '',\n+            'choices-1-choice': '',\n+            'choices-1-votes': '',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=0, min_num=3, validate_min=True)\n+        formset = ChoiceFormSet(data, error_class=CustomErrorList, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        custom_non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(custom_non_form_errors, CustomErrorList)\n+        self.assertEqual(str(custom_non_form_errors), '<ul class=\"custom-errorlist\"><li class=\"custom-error\">Please submit at least 3 forms.</li></ul>')\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..de9b2f7 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -31,7 +31,20 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n-    def test_get_on_intermediate_model(self):\n+    def test_through_fields_are_hashable(self):\n+        \"\"\"\n+        Test that the through_fields in a ManyToManyField relation are hashable.\n+        This ensures that the identity of the reverse relation in ManyToManyRel works correctly,\n+        preventing any TypeError that might arise from unhashable types.\n+        \"\"\"\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertTrue(isinstance(reverse_m2m.through_fields, list))\n+        # Verify the hashing does not raise an error\n+        try:\n+            hashable_through_fields = make_hashable(reverse_m2m.through_fields)\n+            self.assertIsInstance(hashable_through_fields, tuple)  # Ensure that it was converted to a tuple\n+        except TypeError as e:\n+            self.fail(f\"through_fields is not hashable: {e}\")\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n         queryset = Membership.objects.get(person=self.jane, group=self.rock)\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..bb8af08 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -292,6 +292,36 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[PAGINATOR_SIZE:]],\n             'pagination': {'more': False},\n         })\n+        \n+    def test_serialize_result(self):\n+        # Define a custom AutocompleteJsonView that includes an extra field 'posted'.\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        # Create test data for the Question model.\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        # Simulate an autocomplete request.\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+\n+        # Use the custom AutocompleteJsonView and verify the response.\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        expected_results = [\n+            {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+            for q in Question.objects.order_by('-posted')\n+        ]\n+        self.assertEqual(data, {\n+            'results': expected_results,\n+            'pagination': {'more': False},\n+        })\n \n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..111866d 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5093,6 +5093,53 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n \n+    def _test_readonly_foreignkey_links(self, admin_site_name):\n+        \"\"\"\n+        Helper function to test ForeignKey readonly fields link generation\n+        for a given admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+\n+        # Check the ForeignKey link for the language field in the readonly_fields.\n+        response = self.client.get(\n+            reverse(f'{admin_site_name}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        self.assertContains(\n+            response,\n+            reverse(f'{admin_site_name}:admin_views_language_change', args=(language.pk,))\n+        )\n+\n+        # Check the ForeignKey link for the user field in the readonly_fields.\n+        response = self.client.get(\n+            reverse(f'{admin_site_name}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        self.assertContains(\n+            response,\n+            reverse(f'{admin_site_name}:auth_user_change', args=(self.superuser.pk,))\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields render as links on the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields render as links on a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin2')\n+\n     def test_readonly_foreignkey_links(self):\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..447f641 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,6 +154,12 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n+    def test_multivaluewidget_label_id_without_index(self):\n+        form = ComplexFieldForm()\n+        output = form.as_table()\n+        self.assertNotIn('for=\"id_field1_0\"', output)\n+        self.assertIn('<label>Field1:</label>', output)\n+\n     def test_form_as_table_data(self):\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n",
  "django__django-15202": "",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..585fe3f 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -581,8 +581,41 @@ class NonAggregateAnnotationTestCase(TestCase):\n             lambda e: (\n                 e.id, e.first_name, e.manager, e.random_value, e.last_name, e.age,\n                 e.salary, e.store.name, e.annotated_value))\n+class ExpressionWrapperTestCase(TestCase):\n \n-    def test_custom_functions(self):\n+    def setUp(self):\n+        # We might not need specific setup for this test case\n+        pass\n+\n+    def test_expression_wrapper_with_negated_empty_q(self):\n+        \"\"\"\n+        Test that ExpressionWrapper with ~Q(pk__in=[]) does not crash.\n+        \"\"\"\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_expression_wrapper_with_negated_condition_and_aggregation(self):\n+        \"\"\"\n+        Test that aggregating over an ExpressionWrapper with ~Q(pk__in=[]) works.\n+        \"\"\"\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(books['selected__sum'], Book.objects.count())\n+\n+    def test_combined_annotation_with_negated_empty_q(self):\n+        \"\"\"\n+        Test a query involving negated Q objects with other annotations.\n+        \"\"\"\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            is_book=Value(1),\n+        ).filter(is_book=1)\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n         Company(name='Apple', motto=None, ticker_name='APPL', description='Beautiful Devices').save()\n         Company(name='Django Software Foundation', motto=None, ticker_name=None, description=None).save()\n         Company(name='Google', motto='Do No Evil', ticker_name='GOOG', description='Internet Company').save()\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..798a377 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -163,6 +164,29 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that a Message's extra_tags attribute is correctly serialized and\n+        deserialized when it is an empty string.\n+        \"\"\"\n+        storage = self.get_storage()\n+\n+        # Create a message with extra_tags set to an empty string\n+        original_message = Message(constants.DEBUG, 'Test message', extra_tags='')\n+        encoded_message = storage._encode(original_message)\n+        decoded_message = storage._decode(encoded_message)\n+\n+        # Validate that extra_tags remains an empty string after an encode-decode cycle\n+        self.assertEqual(decoded_message.extra_tags, '')\n+\n+        # Test with non-empty extra_tags\n+        original_message_tags = Message(constants.DEBUG, 'Test message', extra_tags='tag1')\n+        encoded_message_tags = storage._encode(original_message_tags)\n+        decoded_message_tags = storage._decode(encoded_message_tags)\n+\n+        # Validate that extra_tags is preserved when it is not an empty string\n+        self.assertEqual(decoded_message_tags.extra_tags, 'tag1')\n+\n     def test_safedata(self):\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..ca561d8 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -39,6 +39,18 @@ class TemplateReloadTests(SimpleTestCase):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n         mock_reset.assert_not_called()\n \n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [ROOT],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_template_change_triggers_reload(self, mock_reset):\n+        template_path = Path(__file__).parent / 'dummy_template_directory' / 'index.html'\n+        self.assertTrue(autoreload.template_changed(None, template_path))\n+        mock_reset.assert_called_once()\n+\n     def test_watch_for_template_changes(self):\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n@@ -88,6 +100,18 @@ class TemplateReloadTests(SimpleTestCase):\n @require_jinja2\n @override_settings(INSTALLED_APPS=['template_tests'])\n class Jinja2TemplateReloadTests(SimpleTestCase):\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [ROOT],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_template_change_triggers_reload(self, mock_reset):\n+        template_path = Path(__file__).parent / 'dummy_template_directory' / 'index.html'\n+        self.assertTrue(autoreload.template_changed(None, template_path))\n+        mock_reset.assert_called_once()\n+\n     def test_watch_for_template_changes(self):\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n",
  "django__django-15400": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\nindex f0097c4..6f8765f 100644\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -305,7 +305,27 @@ class SimpleLazyObjectTestCase(LazyObjectTestCase):\n     def lazy_wrap(self, wrapped_object):\n         return SimpleLazyObject(lambda: wrapped_object)\n \n-    def test_repr(self):\n+    def test_radd_with_integer(self):\n+        obj1 = self.lazy_wrap(5)\n+        self.assertEqual(10 + obj1, 15)\n+\n+    def test_add_with_string(self):\n+        obj1 = self.lazy_wrap('foo')\n+        self.assertEqual(obj1 + 'bar', 'foobar')\n+        obj2 = self.lazy_wrap('bar')\n+        self.assertEqual('foo' + obj2, 'foobar')\n+\n+    def test_add_with_list(self):\n+        obj1 = self.lazy_wrap([1, 2, 3])\n+        self.assertEqual(obj1 + [4, 5], [1, 2, 3, 4, 5])\n+        obj2 = self.lazy_wrap([4, 5])\n+        self.assertEqual([1, 2, 3] + obj2, [1, 2, 3, 4, 5])\n+\n+    def test_radd_with_lazy_object(self):\n+        obj1 = self.lazy_wrap(3)\n+        obj2 = self.lazy_wrap(7)\n+        self.assertEqual(obj2 + obj1, 10)\n+        self.assertEqual(obj1 + obj2, 10)  # Testing commutative property\n         # First, for an unevaluated SimpleLazyObject\n         obj = self.lazy_wrap(42)\n         # __repr__ contains __repr__ of setup function and does not evaluate\n",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..f07bf8c 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,25 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        # Test with an empty string header\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_valid_date_in_past(self):\n+        # Test with a valid date in the past\n+        past_mtime = 1609459200  # Fri, 01 Jan 2021 00:00:00 GMT\n+        header = http_date(past_mtime)\n+        self.assertFalse(was_modified_since(header, mtime=1609459201))\n+\n+    def test_was_modified_since_valid_date_in_future(self):\n+        # Test with a mtime older than the date in header\n+        future_mtime = 1609459201  # Fri, 01 Jan 2021 00:00:01 GMT\n+        header = http_date(future_mtime)\n+        self.assertTrue(was_modified_since(header, mtime=1609459200))\n+\n+    def test_was_modified_since_none_header(self):\n+        # Test with None as the header value\n+        self.assertTrue(was_modified_since(header=None, mtime=1609459200))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..98f07e4 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -8,6 +9,7 @@ from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management.utils import (\n     find_command,\n     get_random_secret_key,\n@@ -411,7 +413,39 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_formatter_applied_in_parser(self):\n+        \"\"\"Test if ArgumentDefaultsHelpFormatter is applied to the command parser.\"\"\"\n+        epilog = \"\"\"\n+        Example usage:\n+            ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+        \"\"\"\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter,\n+        )\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+\n+    def test_custom_help_output_format(self):\n+        \"\"\"Test if the help output is formatted correctly with the custom formatter.\"\"\"\n+        epilog = \"\"\"\n+        Example usage:\n+            ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+        \"\"\"\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter,\n+        )\n+        output = StringIO()\n+        with mock.patch('sys.stdout', output):\n+            parser.print_help()\n+\n+        # Check if the epilog is correctly formatted in the output\n+        expected_help_message = \"Example usage:\\n    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+        self.assertIn(expected_help_message, output.getvalue())\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..c1d386c 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,10 @@\n+\n import os\n from datetime import datetime\n \n+from django.core.serializers.json import DjangoJSONEncoder\n from django.test import SimpleTestCase\n+import json\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -217,7 +220,39 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder_with_empty_object(self):\n+        class CustomEmptyJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"encoder\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomEmptyJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"encoder\"}</script>',\n+        )\n+\n+    def test_json_script_with_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                if isinstance(o, datetime):\n+                    return '\"This is a date\"'\n+                return super().encode(o)\n+\n+        custom_data = {\"now\": datetime.now()}\n+        expected_script = '<script type=\"application/json\">{\"now\": \"This is a date\"}</script>'\n+\n+        self.assertHTMLEqual(\n+            json_script(custom_data, encoder=CustomDjangoJSONEncoder),\n+            expected_script,\n+        )\n+\n+    def test_json_script_with_default_encoder(self):\n+        default_data = {\"key\": \"value\"}\n+        expected_script = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+\n+        self.assertHTMLEqual(\n+            json_script(default_data),\n+            expected_script,\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..180a0fb 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -103,8 +103,23 @@ class CheckTemplateStringIfInvalidTest(SimpleTestCase):\n         with self.settings(TEMPLATES=TEMPLATES):\n             self.assertEqual(check_string_if_invalid_is_string(None), [self.error1])\n \n+from unittest.mock import patch\n+from django.core.checks.templates import check_for_template_tags_with_the_same_name\n+from django.core.checks import Error, Tags\n \n class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n+    @override_settings(\n+        INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n+    )\n+    def test_template_tags_same_library_in_installed_apps_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n     @classmethod\n     def setUpClass(cls):\n         super().setUpClass()\n@@ -206,4 +221,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..70c5f89 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,6 +399,23 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from .models import CustomModel, ProxyCustomModel, AnotherModel\n+\n+class ProxyModelSelectRelatedTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.custom_model = CustomModel.objects.create(name=\"Custom 1\")\n+        cls.proxy_model = ProxyCustomModel.objects.create(name=\"Proxy Custom 1\")\n+        cls.another_model = AnotherModel.objects.create(custom=cls.proxy_model)\n+    \n+    def test_select_related_only_on_proxy(self):\n+        # This test tries to reproduce the situation described in the issue.\n+        # If the issue is not fixed, this will raise an error.\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = list(qs.all())\n+        self.assertEqual(result[0].custom.name, \"Proxy Custom 1\")\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..b71f147 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,7 +151,14 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n-    def test_parameters(self):\n+    def test_parameters_proper_order(self):\n+        # Test to ensure parameters come before the database name.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"],\n+            ),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +190,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..d755a04 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,24 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        # This test ensures that `empty_permitted` in form_kwargs is ignored for `empty_form`.\n+        ArticleFormSet = formset_factory(CustomKwargForm)\n+        formset = ArticleFormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_true_empty_form(self):\n+        # Additional test to ensure empty_form behaves the same with True\n+        ArticleFormSet = formset_factory(CustomKwargForm)\n+        formset = ArticleFormSet(form_kwargs={\"empty_permitted\": True})\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_not_in_form_kwargs(self):\n+        # Ensure empty_form behaves correctly if empty_permitted is not in form_kwargs\n+        ArticleFormSet = formset_factory(CustomKwargForm)\n+        formset = ArticleFormSet()\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..d15893b 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -23,6 +24,8 @@ from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n+from django.urls import reverse\n+import urllib.parse\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n \n@@ -892,6 +895,39 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    def test_user_change_form_password_help_text_with_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        user.uuid = \"22222222-3333-4444-5555-666677778888\"  # Assuming User has a 'uuid' field\n+        # Access UserChangeForm via another model referencing User with to_field\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        expected_help_text = (\n+            \"Raw passwords are not stored, so there is no way to see this \"\n+            \"user\u2019s password, but you can change the password using \"\n+            f'<a href=\"../../{user.pk}/password/\">this form</a>.'\n+        )\n+        self.assertIn(expected_help_text, password_help_text)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..5b31fd2 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,7 +508,28 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n-# RemovedInDjango50Warning\n+from django.test import TestCase\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+\n+class CallableLastmodNoItemsTestCase(TestCase):\n+    def test_callable_lastmod_no_items_does_not_raise_value_error(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        \n+        # Check for no ValueError raised\n+        self.assertEqual(index_response.status_code, 200)\n+\n+        expected_content_index = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        '''\n+        self.assertXMLEqual(index_response.content.decode().strip(), expected_content_index.strip())\n+\n+    def test_callable_lastmod_with_no_items_returns_none(self):\n+        sitemap = CallableLastmodNoItemsSitemap()\n+        lastmod = sitemap.get_latest_lastmod()\n+        self.assertIsNone(lastmod)\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..37a733a 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,9 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock, TestCase\n+from django.core.cache import cache\n import io\n import os\n import pickle\n",
  "django__django-16527": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..8c1bcf4 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,29 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def _test_alter_alter(self, alter_foo, alter_bar):\n+        \"\"\"\n+        Test that multiple AlterField operations collapse into the last one.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                alter_foo,\n+                alter_bar,\n+            ],\n+            [\n+                alter_bar,\n+            ],\n+        )\n+\n+    def test_alter_alter_field(self):\n+        self._test_alter_alter(\n+            AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+            AlterField(\n+                \"book\",\n+                \"title\",\n+                models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..7637b7b 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -26,7 +27,14 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n+\n+    @setup({\"join09_autoescape_off\": '{% autoescape off %}{{ a|join:b }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        a = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        b = \"<br/>\"\n+        output = self.engine.render_to_string(\"join09_autoescape_off\", {\"a\": a, \"b\": b})\n+        expected = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected)\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +86,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..b22daca 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -561,6 +561,34 @@ class BulkCreateTests(TestCase):\n                 unique_fields=[\"relatedmodel\"],\n             )\n         # Many-to-many relationship.\n+\n+    @skipUnlessDBFeature(\"can_return_rows_from_bulk_insert\")\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        # Prepare initial objects in the database.\n+        TwoFields.objects.bulk_create([\n+            TwoFields(f1=1, f2=1),\n+            TwoFields(f1=2, f2=2),\n+        ])\n+        \n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"Conflict 1\"),\n+            TwoFields(f1=2, f2=2, name=\"Conflict 2\"),\n+            TwoFields(f1=3, f2=3, name=\"New 1\"),\n+        ]\n+        \n+        # Perform bulk_create with update_conflicts and ensure IDs are returned.\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"]\n+        )\n+        \n+        # Check that IDs are correctly set on returned instances.\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+          \n+        self.assertEqual(TwoFields.objects.count(), 3)\n         with self.assertRaisesMessage(ValueError, msg):\n             RelatedModel.objects.bulk_create(\n                 [RelatedModel(country=self.data[0])],\n@@ -816,4 +844,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..41cd4b8 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -468,7 +468,35 @@ class WriterTests(SimpleTestCase):\n                     ),\n                 )\n \n-    def test_serialize_uuid(self):\n+    def test_serialize_nested_class_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+                \n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+        \n+        # Simulate what the serialization of the field should look like\n+        capabilities_field = models.ArrayField(\n+            base_field=models.CharField(\n+                choices=[(\"BASIC\", \"Basic\"), (\"PROFESSIONAL\", \"Professional\")], max_length=30, blank=True\n+            ),\n+            null=True,\n+            default=Profile.Capability.default\n+        )\n+        string, imports = MigrationWriter.serialize(capabilities_field)\n+        self.assertIn(\n+            \"default=test_writer.WriterTests.Profile.Capability.default\", string\n+        )\n+        self.assertIn(\"import test_writer.WriterTests\", imports)\n         self.assertSerializedEqual(uuid.uuid1())\n         self.assertSerializedEqual(uuid.uuid4())\n \n@@ -1032,4 +1060,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..361b9f5 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1077,8 +1077,24 @@ def test_slider_horizontal_vertical():\n     box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n     assert_allclose(box.bounds, [.25, 0, .5, 10/24])\n \n+import numpy as np\n+from matplotlib.widgets import RangeSlider\n+\n+def test_range_slider_initialization():\n+    fig, ax = plt.subplots()\n+    img_min, img_max = 0.0, 1.0\n+\n+    # Test default initialization without IndexError\n+    slider = RangeSlider(ax, \"Test Slider\", img_min, img_max, valinit=[0.25, 0.75])\n+    assert_allclose(slider.val, (0.25, 0.75))\n+\n+    # Test that the valinit values are correctly assigned to the slider\n+    slider.set_val((0.3, 0.8))\n+    assert_allclose(slider.val, (0.3, 0.8))\n \n-def test_slider_reset():\n+    # Test setting the slider value where min > max in valinit\n+    slider.set_val((0.9, 0.1))\n+    assert_allclose(slider.val, (0.1, 0.9))\n     fig, ax = plt.subplots()\n     slider = widgets.Slider(ax=ax, label='', valmin=0, valmax=1, valinit=.5)\n     slider.set_val(0.75)\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..0ff8a77 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,7 +490,25 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n-def test_keymaps():\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_issue_get_backend_clears_figures_rc_context():\n+    import matplotlib.pyplot as plt\n+    from matplotlib import get_backend, rc_context\n+\n+    # Create a figure in the context of rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()  # This should not clear the figures\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, '\\n' + before + '\\n' + after\n+\n+    # Add additional cases if required\n+    plt.close('all')  # Clean up\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..7983ce9 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -20,8 +20,21 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n-\n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_invisible(fig_test, fig_ref):\n+    # Create a 3D subplot and set it invisible, comparing with a reference figure with no subplot\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.set_visible(False)\n+    \n+    # Reference figure without any subplot\n+    pass\n+\n+def test_3d_axes_visibility_checked_via_events():\n+    # Ensure that invisible 3D axes do not respond to events\n+    fig, ax = plt.subplots(subplot_kw={'projection': '3d'})\n+    assert fig.canvas.inaxes((200, 200)) is not None\n+    ax.set_visible(False)\n+    assert fig.canvas.inaxes((200, 200)) is None\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..17724de 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,7 +774,15 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n-def test_get_set_draggable():\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='shabnams')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..8cbcc24 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -246,7 +246,34 @@ def test_fonttype(fonttype):\n \n def test_linedash():\n     \"\"\"Test that dashed lines do not break PS output\"\"\"\n-    fig, ax = plt.subplots()\n+import io\n+import matplotlib.pyplot as plt\n+import pytest\n+from matplotlib.figure import Figure\n+\n+def test_empty_line():\n+    # Smoke-test for gh#23954\n+    fig = Figure()\n+    fig.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n+\n+@pytest.mark.parametrize(\"text_method, text_input\", [\n+    (\"annotate\", \"\\nLower label\"),\n+    (\"set_title\", \"\\nLower title\"),\n+])\n+def test_multi_line_empty_line(text_method, text_input):\n+    # Test both annotate and set_title with an empty line\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    if text_method == \"annotate\":\n+        ax.annotate(text=text_input, xy=(0, 0))\n+    else:\n+        ax.set_title(text_input)\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n \n     ax.plot([0, 1], linestyle=\"--\")\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..65efb37 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,23 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+import warnings\n+\n+@pytest.mark.filterwarnings(\"error:This figure was using a layout engine that is incompatible with subplots_adjust\")\n+def test_no_warning_with_constrained_layout_false_and_adjust():\n+    import numpy as np\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    plt.subplots_adjust(wspace=0)\n+    with warnings.catch_warnings(record=True) as w:\n+        plt.draw()  # This ensures any pending draw operations are executed\n+        # Check no warning of specific type is raised\n+        assert all(not issubclass(item.category, UserWarning) for item in w), \"Unexpected warning was raised.\"\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..2349327 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -16,8 +17,28 @@ import matplotlib.transforms as mtransforms\n import matplotlib.figure as mfigure\n from mpl_toolkits.axes_grid1 import parasite_axes\n \n+import pickletools\n+\n+def test_pickle_figure_with_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n \n-def test_simple():\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    try:\n+        pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+        # Ensure that no GUI-specific components are present in the pickle\n+        assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+        loaded_fig = pickle.loads(pkl)\n+        assert isinstance(loaded_fig, mfigure.Figure)\n+    except Exception as e:\n+        pytest.fail(f\"Pickling failed with error: {e}\")\n     fig = plt.figure()\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n",
  "matplotlib__matplotlib-25332": "",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..0183278 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,81 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+def test_mplcursor_with_matplotlib():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    # Create a simple scatter plot\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+\n+    # Activate mplcursors\n+    mplcursors.cursor(ax.scatter(x, y1))\n+\n+    try:\n+        plt.show(block=False)\n+        plt.pause(0.5)  # Allow the plot to render\n+\n+        cursor = mplcursors.cursor(ax)\n+        points_selected = 0\n+\n+        def on_add(sel):\n+            nonlocal points_selected\n+            points_selected += 1\n+            if points_selected > 2:\n+                sel.artist.figure.canvas.stop_event_loop()\n+\n+        cursor.connect(\"add\", on_add)\n+\n+        fig.canvas.start_event_loop_default()\n+        assert points_selected > 0, \"No points were selected via cursor, which means interaction did not occur.\"\n+    except Exception as e:\n+        assert False, f\"Test failed due to exception: {e}\"\n+    finally:\n+        plt.close(fig)\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_mplcursor_with_matplotlib():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    # Create a simple scatter plot\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+\n+    # Activate mplcursors\n+    mplcursors.cursor(ax.scatter(x, y1))\n+\n+    try:\n+        plt.show(block=False)\n+        plt.pause(0.5)  # Allow the plot to render\n+\n+        cursor = mplcursors.cursor(ax)\n+        points_selected = 0\n+\n+        def on_add(sel):\n+            nonlocal points_selected\n+            points_selected += 1\n+            if points_selected > 2:\n+                sel.artist.figure.canvas.stop_event_loop()\n+\n+        cursor.connect(\"add\", on_add)\n+\n+        fig.canvas.start_event_loop_default()\n+        assert points_selected > 0, \"No points were selected via cursor, which means interaction did not occur.\"\n+    except Exception as e:\n+        assert False, f\"Test failed due to exception: {e}\"\n+    finally:\n+        plt.close(fig)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..70d2f8f 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,9 +1,11 @@\n \n+\n import numpy as np\n import pandas as pd\n \n import pytest\n from numpy.testing import assert_array_equal, assert_array_almost_equal\n+from pandas.testing import assert_frame_equal\n \n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..4cc0b99 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -83,6 +83,31 @@ class TestContinuous:\n         s = Continuous(norm=(3, 7))._setup(x, IntervalProperty())\n         assert_array_equal(s(x), [-.5, 0, 1.5])\n \n+    def test_color_mapping_with_bools(self):\n+        import numpy as np\n+        import pandas as pd\n+        from seaborn import color_palette\n+\n+        # Prepare a series of boolean values\n+        bool_series = pd.Series([True, False, True, False])\n+        \n+        # Use a mock implementation for a Color property since actual implementation is needed\n+        class MockColor:\n+            pass\n+        \n+        try:\n+            # Apply the color scale setup using boolean series\n+            cmap = color_palette(\"ch:\", as_cmap=True)\n+            s = Continuous()._setup(bool_series, MockColor())\n+            # Check if mapping is successful without raising exceptions\n+            mapped_colors = s(bool_series)\n+            assert len(mapped_colors) == len(bool_series)\n+            print(\"Color mapping with boolean data did not raise exception.\")\n+        \n+        except Exception as e:\n+            print(f\"Color mapping with boolean data raised an exception: {e}\")\n+            assert False, \"Exception raised\"\n+\n     def test_interval_with_range_norm_and_transform(self, x):\n \n         x = pd.Series([1, 10, 100])\n",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..f3bcfb9 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -700,6 +700,28 @@ class TestFacetGrid:\n         color = \"blue\"\n         pad = 3\n         g.tick_params(pad=pad, color=color)\n+\n+    def test_pairplot_column_multiindex(self):\n+\n+        # Create a MultiIndex DataFrame\n+        cols = pd.MultiIndex.from_arrays([[\"A\", \"B\"], [\"1\", \"2\"]])\n+        data = {\n+            (\"A\", \"1\"): np.random.rand(100),\n+            (\"A\", \"2\"): np.random.rand(100),\n+            (\"B\", \"1\"): np.random.rand(100),\n+            (\"B\", \"2\"): np.random.rand(100),\n+        }\n+        df_multi = pd.DataFrame(data)\n+\n+        # Attempt to create pairplot\n+        try:\n+            g = ag.pairplot(df_multi)\n+            multi_index_handler = True\n+        except KeyError as e:\n+            multi_index_handler = False\n+\n+        # Check for expected behavior\n+        assert multi_index_handler, \"Pairplot raised KeyError with MultiIndex DataFrame\"\n         for ax in g.axes.flat:\n             for axis in [\"xaxis\", \"yaxis\"]:\n                 for tick in getattr(ax, axis).get_major_ticks():\n@@ -1448,6 +1470,28 @@ class TestPairGrid:\n         color = \"red\"\n         pad = 3\n         g.tick_params(pad=pad, color=color)\n+\n+    def test_pairplot_column_multiindex(self):\n+\n+        # Create a MultiIndex DataFrame\n+        cols = pd.MultiIndex.from_arrays([[\"A\", \"B\"], [\"1\", \"2\"]])\n+        data = {\n+            (\"A\", \"1\"): np.random.rand(100),\n+            (\"A\", \"2\"): np.random.rand(100),\n+            (\"B\", \"1\"): np.random.rand(100),\n+            (\"B\", \"2\"): np.random.rand(100),\n+        }\n+        df_multi = pd.DataFrame(data)\n+\n+        # Attempt to create pairplot\n+        try:\n+            g = ag.pairplot(df_multi)\n+            multi_index_handler = True\n+        except KeyError as e:\n+            multi_index_handler = False\n+\n+        # Check for expected behavior\n+        assert multi_index_handler, \"Pairplot raised KeyError with MultiIndex DataFrame\"\n         for ax in g.axes.flat:\n             for axis in [\"xaxis\", \"yaxis\"]:\n                 for tick in getattr(ax, axis).get_major_ticks():\n",
  "pallets__flask-4992": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex 73be34c..d8e24b9 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -261,7 +261,8 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            mode_str = 'rb' if mode == 'b' else 'r'\n+            with open(filename, mode_str) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
  "psf__requests-1963": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 7fdc4a9..20e436a 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -80,6 +80,86 @@ def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n     return merge_setting(request_hooks, session_hooks, dict_class)\n \n \n+import requests\n+import collections\n+from requests.structures import CaseInsensitiveDict\n+from requests.sessions import SessionRedirectMixin\n+\n+SendCall = collections.namedtuple('SendCall', ('args', 'kwargs'))\n+\n+class RedirectSession(SessionRedirectMixin):\n+    def __init__(self, order_of_redirects):\n+        self.redirects = order_of_redirects\n+        self.calls = []\n+        self.max_redirects = 30\n+        self.cookies = {}\n+        self.trust_env = False\n+\n+    def send(self, *args, **kwargs):\n+        self.calls.append(SendCall(args, kwargs))\n+        return self.build_response()\n+\n+    def build_response(self):\n+        request = self.calls[-1].args[0]\n+        r = requests.Response()\n+\n+        try:\n+            r.status_code = int(self.redirects.pop(0))\n+        except IndexError:\n+            r.status_code = 200\n+\n+        r.headers = CaseInsensitiveDict({'Location': '/'})\n+        r.raw = self._build_raw()\n+        r.request = request\n+        return r\n+\n+    def _build_raw(self):\n+        from io import StringIO\n+        string = StringIO('')\n+        setattr(string, 'release_conn', lambda *args: args)\n+        return string\n+\n+class TestRedirects:\n+    default_keyword_args = {\n+        'stream': False,\n+        'verify': True,\n+        'cert': None,\n+        'timeout': None,\n+        'allow_redirects': False,\n+        'proxies': None,\n+    }\n+\n+    def test_requests_are_updated_each_time(self):\n+        session = RedirectSession([303, 307])\n+        prep = requests.Request('POST', 'http://httpbin.org/post').prepare()\n+        r0 = session.send(prep)\n+        assert r0.request.method == 'POST'\n+        assert session.calls[-1] == SendCall((r0.request,), {})\n+        redirect_generator = session.resolve_redirects(r0, prep)\n+        for response in redirect_generator:\n+            assert response.request.method == 'GET'\n+            send_call = SendCall((response.request,),\n+                                 TestRedirects.default_keyword_args)\n+            assert session.calls[-1] == send_call\n+\n+    def test_preserves_transformed_method_on_307(self):\n+        session = RedirectSession([302, 303, 307])\n+        \n+        prep = requests.Request('POST', 'http://httpbin.org/post').prepare()\n+        r0 = session.send(prep)\n+\n+        assert r0.request.method == 'POST'\n+        \n+        redirect_generator = session.resolve_redirects(r0, prep)\n+\n+        status_methods = ['GET', 'GET', 'GET']\n+\n+        for response, expected_method in zip(redirect_generator, status_methods):\n+            assert response.request.method == expected_method\n+            send_call = SendCall((response.request,),\n+                                 TestRedirects.default_keyword_args)\n+            assert session.calls[-1] == send_call\n+\n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n                           verify=True, cert=None, proxies=None):\n",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..5a44318 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1655,7 +1655,31 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n-def test_vendor_aliases():\n+def test_urllib3_decode_error():\n+    import requests\n+    from requests.adapters import HTTPAdapter\n+    \n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+    \n+    with pytest.raises(requests.exceptions.ContentDecodingError):\n+        # An example URL that would cause a DecodeError in urllib3,\n+        # you should replace 'httpbin_invalid' with a URL or mock server\n+        # that reproduces the DecodeError exception.\n+        s.get('http://httpbin_invalid/encoding/utf8')\n+\n+def test_urllib3_timeout_error():\n+    import requests\n+    from requests.adapters import HTTPAdapter\n+    \n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+    \n+    with pytest.raises(requests.exceptions.ConnectTimeout):\n+        # An example URL that would cause a TimeoutError in urllib3,\n+        # replace 'httpbin_timeout' with a URL or mock server that\n+        # simulates a connection timeout.\n+        s.get('http://httpbin_timeout/status/200', timeout=0.001)\n     from requests.packages import urllib3\n     from requests.packages import chardet\n \n@@ -1663,4 +1687,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..767913f 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,36 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_iter_content_decode_unicode_false(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=False to ensure it returns bytes.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n+\n+    def test_response_iter_content_with_realistic_json(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True on a realistic JSON response.\n+        \"\"\"\n+        json_content = b'{\"key\": \"value\", \"number\": 123}'\n+        r = requests.Response()\n+        r.raw = io.BytesIO(json_content)\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+\n+    def test_response_iter_content_unicode_with_custom_encoding(self):\n+        \"\"\"\n+        Test iter_content with a custom encoding and decode_unicode=True.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'\\xe2\\x9c\\x88')  # airplane character in UTF-8\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..73bcb76 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -79,7 +79,13 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n+def test_no_traceback_for_unrecognized_option(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure no traceback is printed for an unrecognized option.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Command line:1:0: E0015: Unrecognized option found: Q\" in output.err\n+    assert \"Traceback\" not in output.err\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..52c1031 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,11 +934,26 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n-\n-def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n+def test_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"\n+    Test that pylint does not fail when checking a package with a module and a nested module\n+    sharing the same name.\n+    \"\"\"\n+    with tempdir():\n+        # Create the directory structure and files\n+        create_files([\"identical/identical.py\", \"identical/another.py\"])\n+        # Ensure the 'identical/identical.py' file is touched\n+        with open(\"identical/identical.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"print('Hello, world!')\\n\")\n+        \n+        # Run pylint on the 'identical' package\n+        initialized_linter.check([\"identical\"])\n+    \n+    # Expect no parse-error due to missing __init__.py\n+    assert \"parse-error\" not in initialized_linter.stats.by_msg\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..6ad4c47 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -19,6 +20,7 @@ from pylint import checkers\n from pylint.interfaces import HIGH\n from pylint.lint import PyLinter\n from pylint.message.message import Message\n+from _pytest.recwarn import WarningsRecorder\n from pylint.reporters import BaseReporter, MultiReporter\n from pylint.reporters.text import ParseableTextReporter, TextReporter\n from pylint.typing import FileItem, MessageLocationTuple\n@@ -112,8 +114,22 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[1] == \"my_mod:1::()\"\n     assert out_lines[2] == \"my_mod:2::()\"\n \n+def test_custom_braces_in_message_template(linter: PyLinter) -> None:\n+    \"\"\"Test to verify using custom braces in message template.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"test_module\")\n+\n+    linter.add_message(\"C0301\", line=10, args=(1, 2))\n+    linter.add_message(\"C0330\", line=20, args=(3, 4))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n \n-def test_deprecation_set_output(recwarn):\n+    # Check if the messages are formatted correctly without raising warnings\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"convention\" }'\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/acceptance_test.py b/testing/acceptance_test.py\nindex 0cc5057..4b5cda0 100644\n--- a/testing/acceptance_test.py\n+++ b/testing/acceptance_test.py\n@@ -1306,6 +1306,12 @@ def test_no_brokenpipeerror_message(pytester: Pytester) -> None:\n     popen.stderr.close()\n \n \n+from pathlib import Path\n+import sys\n+import pytest\n+from pytest import Pytester\n+from typing import Iterator\n+\n def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n@@ -1314,4 +1320,4 @@ def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     \"\"\"\n     )\n     res = pytester.runpytest()\n-    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n+    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..c2eb678 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -6,7 +7,7 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..f9a87be 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -299,6 +299,7 @@ def callequal(left, right, verbose=False):\n     config.verbose = verbose\n     return plugin.pytest_assertrepr_compare(config, \"==\", left, right)\n \n+import pytest\n \n class TestAssert_reprcompare:\n     def test_different_types(self):\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..9c3a2f2 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,7 +1,10 @@\n+\n import os\n from xml.dom import minidom\n+import platform\n \n import py\n+from datetime import datetime\n \n import pytest\n from _pytest.junitxml import LogXML\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..3570a1b 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -144,6 +144,28 @@ def test_repr_on_newstyle():\n     assert saferepr(Function())\n \n \n+def test_broken_getattribute_and_repr():\n+    \"\"\"saferepr() can handle objects with both broken __getattribute__ and __repr__.\"\"\"\n+\n+    class BrokenClass:\n+        def __getattribute__(self, attr):\n+            raise Exception(\"Getattribute exception\")\n+        \n+        def __repr__(self):\n+            raise Exception(\"Repr exception\")\n+    \n+    # Verify `saferepr` handles the exception in __repr__ gracefully\n+    representation = saferepr(BrokenClass())\n+    assert representation.startswith(\"<[Exception('Repr exception',) raised in repr()] BrokenClass object at 0x\")\n+    \n+    # Create another test case to see if the attributes raise correctly\n+    instance = BrokenClass()\n+    try:\n+        _ = instance.some_attribute\n+    except Exception as e:\n+        assert str(e) == \"Getattribute exception\"\n+\n+\n def test_unicode():\n     val = \"\u00a3\u20ac\"\n     reprval = \"'\u00a3\u20ac'\"\n@@ -153,4 +175,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..0a43c69 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -76,8 +76,32 @@ def test_parseconfig(testdir) -> None:\n     config2 = testdir.parseconfig()\n     assert config2 is not config1\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_testdir_runs_with_plugin(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    # Verify that the specific test file path appears in the expected position in the output.\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     testdir.makepyfile(\n         \"\"\"\n         pytest_plugins = \"pytester\"\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..104b33f 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+import os\n from unittest import mock\n \n import pytest\n@@ -22,7 +23,38 @@ class TestMark:\n         with pytest.raises(TypeError):\n             mark()  # type: ignore[operator] # noqa: F821\n \n-    def test_mark_with_param(self):\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"Ensure dynamic expression evaluation does not incorrectly cache results (#7360)\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        \n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+\n+        # Validate expected outcomes: one test skipped, one passed\n+        reprec.assertoutcome(passed=1, skipped=1)\n         def some_function(abc):\n             pass\n \n",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..73d2ce0 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,6 +1,8 @@\n+\n import sys\n \n import pytest\n+from _pytest.pytester import Testdir\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n@@ -382,7 +384,32 @@ class TestXFail:\n         \"\"\"\n         )\n \n-    def xtest_dynamic_xfail_set_during_setup(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail marker in the test function\n+        # correctly marks a failing test as xfailed.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail marker with strict=True causes\n+        # the test to fail if it passes unexpectedly.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..95e9127 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -19,7 +20,33 @@ from _pytest.pathlib import on_rm_rf_error\n from _pytest.pathlib import register_cleanup_lock_removal\n from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest.tmpdir import get_user\n+\n+def test_tmpdir_handles_invalid_dir_characters(tmpdir_factory: TempdirFactory, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"Verify that usernames with invalid directory characters do not cause tempdir creation failures.\"\"\"\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"invalid|username\")\n+    # Reset _basetemp and _given_basetemp for test isolation\n+    monkeypatch.setattr(tmpdir_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmpdir_factory, \"_given_basetemp\", None)\n+    temp_dir = tmpdir_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(temp_dir)\n+\n+def test_tmp_dir_creation_with_backslash_in_username(tmpdir_factory: TempdirFactory, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"Test that a username with a backslash doesn't throw an error during tempdir creation.\"\"\"\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"domain\\\\username\")\n+    monkeypatch.setattr(tmpdir_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmpdir_factory, \"_given_basetemp\", None)\n+    temp_dir = tmpdir_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(temp_dir)\n+\n+def test_handle_multiple_invalid_characters(tmpdir_factory: TempdirFactory, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"Ensure multiple invalid characters are handled correctly.\"\"\"\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"user>name<invalid:*?\")\n+    monkeypatch.setattr(tmpdir_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmpdir_factory, \"_given_basetemp\", None)\n+    temp_dir = tmpdir_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(temp_dir)\n from _pytest.tmpdir import TempdirFactory\n from _pytest.tmpdir import TempPathFactory\n \n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..e25e2b1 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -581,7 +581,32 @@ def test_ridgecv_store_cv_values():\n     n_samples = 8\n     n_features = 5\n     x = rng.randn(n_samples, n_features)\n+    import numpy as np\n+    from sklearn.linear_model import RidgeClassifierCV\n     alphas = [1e-1, 1e0, 1e1]\n+    n_samples = x.shape[0]\n+    n_alphas = len(alphas)\n+\n+    # Test with len(y.shape) == 1\n+    y_1d = np.array([1, 1, 1, -1, -1])\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(x, y_1d)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Test with len(y.shape) == 2\n+    y_2d = np.array([[1, 1, 1, -1, -1],\n+                     [1, -1, 1, -1, 1],\n+                     [-1, -1, 1, -1, -1]]).transpose()\n+    n_responses = y_2d.shape[1]\n+    r.fit(x, y_2d)\n+    assert r.cv_values_.shape == (n_samples, n_responses, n_alphas)\n+\n+    # Ensure that store_cv_values=True and cv!=None raises ValueError\n+    try:\n+        r = RidgeClassifierCV(alphas=alphas, store_cv_values=True, cv=3)\n+        r.fit(x, y_1d)\n+    except ValueError as e:\n+        assert 'incompatible' in str(e)\n     n_alphas = len(alphas)\n \n     r = RidgeCV(alphas=alphas, store_cv_values=True)\n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..c6a817c 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -6,6 +6,37 @@ import numpy as np\n from scipy.special import gammaln\n \n from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_greater\n+from sklearn.metrics.cluster import adjusted_rand_score\n+import numpy as np\n+from sklearn.mixture import BayesianGaussianMixture\n+from sklearn.datasets import make_blobs\n+\n+def test_bayesian_mixture_fit_predict_consistency():\n+    # Test consistency between fit_predict and separate fit + predict calls\n+    rng = np.random.RandomState(42)\n+    n_samples = 100\n+    X, labels_true = make_blobs(n_samples=n_samples, centers=3, random_state=rng)\n+\n+    bgmm = BayesianGaussianMixture(n_components=3, random_state=rng)\n+    labels_fit_predict = bgmm.fit_predict(X)\n+    labels_predict_after_fit = bgmm.predict(X)\n+\n+    assert_array_equal(labels_fit_predict, labels_predict_after_fit)\n+\n+def test_bayesian_mixture_labels():\n+    # Check that BayesianGaussianMixture simulates label handling\n+    rng = np.random.RandomState(42)\n+    n_samples = 100\n+    X, labels_true = make_blobs(n_samples=n_samples, centers=3, random_state=rng)\n+    \n+    bgmm = BayesianGaussianMixture(n_components=3, random_state=rng)\n+    bgmm.fit(X)\n+    # Simulate 'labels_' by using the predicted labels\n+    bgmm.labels_ = bgmm.predict(X)\n+    \n+    assert_array_equal(bgmm.labels_, bgmm.predict(X))\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n",
  "scikit-learn__scikit-learn-12471": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..e161107 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,6 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n \n def test_gaussian_mixture_fit():\n     # recover the ground truth\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..e5bb69e 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -13,8 +14,23 @@ from sklearn.pipeline import Pipeline\n from sklearn.model_selection import GridSearchCV\n from sklearn.metrics.pairwise import rbf_kernel\n \n+from sklearn.utils.testing import assert_allclose\n \n-def test_kernel_pca():\n+def test_kernel_pca_deterministic_signs():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+\n+    transformed_results = []\n+    for _ in range(5):\n+        transformed_X = kpca.fit_transform(X)\n+        transformed_results.append(transformed_X)\n+\n+    # Test for sign consistency across different runs\n+    first_result = transformed_results[0]\n+    for result in transformed_results[1:]:\n+        assert_allclose(np.abs(result), np.abs(first_result))\n+        assert np.all(np.sign(result) == np.sign(first_result) | np.sign(result) == -np.sign(first_result))\n     rng = np.random.RandomState(0)\n     X_fit = rng.random_sample((5, 4))\n     X_pred = rng.random_sample((2, 4))\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..5b4901c 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n@@ -297,6 +300,30 @@ def test_score_samples():\n \n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_multiple_warm_start():\n+    \"\"\"Test multiple iterations of warm start to ensure estimators grow without errors\"\"\"\n+\n+    rng = check_random_state(0)\n+    X = rng.randn(20, 2)\n+\n+    # Initialize with 10 estimators using warm start\n+    clf = IsolationForest(n_estimators=10, max_samples=20,\n+                          random_state=rng, warm_start=True)\n+    clf.fit(X)\n+\n+    # Here we will perform multiple warm starts and check the state\n+    for i in range(1, 4):\n+        clf.set_params(n_estimators=10 * (i + 1))\n+        clf.fit(X)\n+        assert len(clf.estimators_) == 10 * (i + 1)\n+    \n+    # Ensuring toggling warm_start off resets properly\n+    clf.set_params(warm_start=False, n_estimators=10)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 10\n+    # Ensure no previous estimators are kept\n+    assert clf.estimators_[0] is not None\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n     X = [[0.0], [1.0]]\n     clf = IsolationForest()\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..6e05c01 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -173,6 +173,36 @@ def test_mutual_info_classif_mixed():\n         assert_equal(mi_nn[2], mi[2])\n \n \n+def test_discrete_features_handling():\n+    # This test ensures that mutual_info correctly handles various forms\n+    # of discrete_features inputs, such as boolean masks and index arrays.\n+    X = np.array([[0, 0, 1],\n+                  [1, 1, 0],\n+                  [2, 0, 1],\n+                  [3, 1, 1]])\n+    y = np.array([1, 0, 1, 0], dtype=float)\n+    \n+    # Test with a boolean mask\n+    discrete_mask = [True, False, True]\n+    mi_mask = mutual_info_classif(X, y, discrete_features=discrete_mask)\n+    \n+    # Test with indices\n+    discrete_indices = [0, 2]\n+    mi_indices = mutual_info_classif(X, y, discrete_features=discrete_indices)\n+    \n+    assert_array_equal(mi_mask, mi_indices)\n+    \n+    # Test with invalid masks\n+    assert_raises(ValueError, mutual_info_classif, X, y, discrete_features=[True, False])\n+    assert_raises(IndexError, mutual_info_classif, X, y, discrete_features=[0, 3])\n+\n+    # Test with invalid indices\n+    assert_raises(IndexError, mutual_info_classif, X, y, discrete_features=[0, 3])\n+    \n+    # Test auto mode to see if it runs without error\n+    mi_auto = mutual_info_classif(X, y, discrete_features='auto')\n+    assert mi_auto is not None\n+\n def test_mutual_info_options():\n     X = np.array([[0, 0, 0],\n                   [1, 1, 0],\n@@ -197,4 +227,4 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..e424cb5 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,9 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n-\n-\n-# Ignore flake8 (lots of line too long issues)\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n # flake8: noqa\n \n # Constructors excerpted to test pprinting\n@@ -215,7 +215,16 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n     set_config(print_changed_only=False)\n \n \n-def test_pipeline():\n+def test_repr_with_array_parameter():\n+    # Test that array parameters in LogisticRegressionCV do not cause errors\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        assert isinstance(repr_output, str)\n+    except ValueError:\n+        assert False, \"ValueError raised when trying to repr LogisticRegressionCV with array parameters\"\n+    finally:\n+        set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..86a42e6 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -12,6 +13,7 @@ from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n+from sklearn.datasets import load_iris, load_boston\n from sklearn.model_selection import GridSearchCV\n from sklearn import datasets\n from sklearn.model_selection import cross_val_score, train_test_split\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..1a31996 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -119,6 +119,27 @@ def test_finite_differences():\n     np.testing.assert_almost_equal(rel_diff, 0., decimal=5)\n \n \n+@pytest.mark.parametrize('param, value', [\n+    ('n_components', np.int32(3)),\n+    ('max_iter', np.int32(100)),\n+    ('tol', np.float32(0.0001))\n+])\n+def test_parameters_valid_types(param, value):\n+    # Check that numpy integer and floating types don't raise TypeError\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+    \n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n+    knn = KNeighborsClassifier()\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+    \n+    params = {'nca__tol': [0.1, 0.5, 1],\n+              'nca__n_components': np.arange(1, 10)}\n+              \n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n+\n+\n def test_params_validation():\n     # Test that invalid parameters raise value error\n     X = np.arange(12).reshape(4, 3)\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..0b32715 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,8 +679,44 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n-\n-def test_sparse_precomputed():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_empty_input():\n+    # Ensures no error is raised when using an empty sparse matrix\n+    X_train = sparse.csr_matrix((0, 4))\n+    y_train = np.array([])\n+    model = svm.SVR(kernel='linear')\n+    try:\n+        model.fit(X_train, y_train)\n+    except ValueError as e:\n+        assert \"number of samples must be larger than number of classes\" in str(e)\n+    \n+def test_sparse_fit_different_kernels():\n+    # Test SVM with different kernels with sparse input\n+    kernels = ['linear', 'poly', 'rbf']\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    for kernel in kernels:\n+        model = svm.SVR(kernel=kernel, gamma='scale')\n+        model.fit(X_train, y_train)\n+        assert model.support_vectors_ is not None\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..aac3b81 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,18 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n @ignore_warnings\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 5, 10\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=10, n_splits=5, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n+\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..f8929ee 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -151,6 +151,18 @@ def test_affinity_propagation_predict_non_convergence():\n     y = assert_warns(ConvergenceWarning, af.predict, to_predict)\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n+def test_affinity_propagation_non_convergence_labels_and_centers():\n+    # Test for non-convergence returning correct labels and empty cluster centers.\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    \n+    # Check if labels are all -1 indicating non-convergence\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+    # Check if cluster centers are empty\n+    assert_array_equal(np.array([], dtype=int), af.cluster_centers_indices_)\n+\n \n def test_equal_similarities_and_preferences():\n     # Unequal distances\n",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..8abfdbc 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -679,4 +680,23 @@ def test_get_feature_names_out(shape):\n     names = iso.get_feature_names_out()\n     assert isinstance(names, np.ndarray)\n     assert names.dtype == object\n-    assert_array_equal([\"isotonicregression0\"], names)\n+    assert_array_equal([\"isotonicregression0\"], names)\n+\n+def test_calibrated_classifier_cv_with_pandas_output():\n+    \"\"\"\n+    Test CalibratedClassifierCV with isotonic regression method\n+    ensures it works with pandas output configuration.\n+    \"\"\"\n+    import pandas as pd  # Only import if needed\n+    X, y = make_classification(n_samples=30, n_features=3, random_state=42)\n+    base_estimator = SGDClassifier(loss=\"log_loss\", random_state=42)\n+    model = CalibratedClassifierCV(base_estimator, method='isotonic')\n+\n+    with set_config(transform_output=\"pandas\"):\n+        model.fit(X, y)\n+        predictions = model.predict(X)\n+        probabilities = model.predict_proba(X)\n+\n+    # Check if no exceptions are thrown and types are correct.\n+    assert isinstance(predictions, np.ndarray)\n+    assert isinstance(probabilities, pd.DataFrame)\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 21b6a7e..ec5ea72 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -737,6 +737,17 @@ def test_autodoc_type_aliases(app):\n     ]\n \n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    confoverrides={'autodoc_type_aliases': {'String': 'example.MyString'}})\n+def test_autodoc_type_aliases_variables_and_attributes(app):\n+    options = {\"members\": None, \"undoc-members\": None}\n+    actual = do_autodoc(app, 'module', 'target.annotations', options)\n+    assert '.. py:data:: variable' in actual\n+    assert ':type: example.MyString' in actual\n+    assert '.. py:attribute:: Foo.attr' in actual\n+    assert ':type: example.MyString' in actual\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_autodoc_default_options(app):\n     # no settings\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..47796de 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,60 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+from sphinx import nodes\n+from sphinx.testing.util import assert_node\n+from sphinx.domains.std import StandardDomain\n+from sphinx.testing import restructuredtext\n+\n+\n+def test_cmd_option_with_bracket_in_name(app):\n+    text = \".. option:: [enable=]PATTERN\\n\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (nodes.index, \n+                          nodes.desc, (\n+                              nodes.desc_signature, (\n+                                  nodes.desc_name, '[enable='\n+                              ), (\n+                                  nodes.desc_addname, ']PATTERN'\n+                              )\n+                          ), \n+                          nodes.desc_content\n+                         ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable=', '[enable=', 'cmdoption', 'index', 'cmdoption--enable=', 1) in objects\n+\n+\n+def test_cmd_option_with_equals_in_brackets(app):\n+    text = \".. option:: --opt[=value]\\n\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (nodes.index,\n+                          nodes.desc, (\n+                              nodes.desc_signature, (\n+                                  nodes.desc_name, '--opt'\n+                              ), (\n+                                  nodes.desc_addname, '[=value]'\n+                              )\n+                          ), \n+                          nodes.desc_content\n+                         ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--opt', '--opt', 'cmdoption', 'index', 'cmdoption---opt', 1) in objects\n+\n+\n+def test_cmd_option_with_special_characters(app):\n+    text = \".. option:: :!flag\\n\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (nodes.index,\n+                          nodes.desc, (\n+                              nodes.desc_signature, (\n+                                  nodes.desc_name, ':!flag'\n+                              )\n+                          ),\n+                          nodes.desc_content\n+                         ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (':!flag', ':!flag', 'cmdoption', 'index', 'cmdoption--flag', 1) in objects\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..db2850d 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,8 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,6 +47,41 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_empty_all_attribute(app):\n+    \"\"\"Test case for an empty __all__ attribute in a Python module.\"\"\"\n+    # Set options for autodoc\n+    options = {'members': True}\n+\n+    # Run the 'do_autodoc' function on a sample module with an empty __all__\n+    actual = do_autodoc(app, 'module', 'example', options)  # Assuming 'example.py' is in the correct path\n+\n+    # Verify that the output is as expected\n+    assert actual == [\n+        '',\n+        '.. py:module:: example',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_no_all_attribute(app):\n+    \"\"\"Test case for a module with no __all__ attribute defined.\"\"\"\n+    # Set options for autodoc\n+    options = {'members': True}\n+\n+    # Run the 'do_autodoc' function on a sample module with no __all__ attribute\n+    actual = do_autodoc(app, 'module', 'example_without_all', options)  # Replace with actual module name\n+\n+    # Assuming the docstring of the module contains a description, this should produce output with all members\n+    assert actual != [\n+        '',\n+        '.. py:module:: example_without_all',\n+        '',\n+    ]\n+\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..8ddad6f 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -44,6 +46,7 @@ def test_restify():\n     assert restify(None) == \":obj:`None`\"\n     assert restify(Integral) == \":class:`numbers.Integral`\"\n     assert restify(Any) == \":obj:`Any`\"\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n \n \n def test_restify_type_hints_containers():\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..5f1edb0 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,31 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    \n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        # Test when napoleon_use_param is False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+        # Test when napoleon_use_param is True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..a55ab0e 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,16 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+@pytest.mark.sphinx('epub', testroot='ext-viewcode',\n+                    confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_explicitly_disabled(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+\n+import pytest\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..49b985b 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -337,6 +337,16 @@ def test_args():\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n     assert Permutation([[1], [4, 2]]) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n+    \n+    # Test non-disjoint cycles leading to identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    \n+    # Test non-disjoint cycles that don't form identity but should be resolved left-to-right\n+    assert Permutation([[0, 1, 2], [1, 0]]) == Permutation([1, 0, 2])\n+    assert Permutation([[0, 1, 2], [1, 0], [2, 1]]) == Permutation([0, 2, 1])\n+    \n+    # Original test patch validation\n+    assert Permutation([[0, 1], [0, 2]]) == Permutation([1, 0, 2])\n     assert Permutation(\n         [[1], [4, 2]], size=6) == Permutation([0, 1, 4, 3, 2, 5])\n     assert Permutation([], size=3) == Permutation([0, 1, 2])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..5eac529 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -448,6 +449,26 @@ def test_sparse_matrix():\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n \n+def test_sparse_hstack_vstack():\n+    # Test case specifically for hstack with 0 x n matrices\n+    sparse_matrices_0xn = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    result_0xn_h = SparseMatrix.hstack(*sparse_matrices_0xn)\n+    assert result_0xn_h.shape == (0, 6), f\"Expected shape (0, 6) but got {result_0xn_h.shape}\"\n+\n+    # Test case specifically for vstack with n x 0 matrices\n+    sparse_matrices_nx0 = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    result_nx0_v = SparseMatrix.vstack(*sparse_matrices_nx0)\n+    assert result_nx0_v.shape == (6, 0), f\"Expected shape (6, 0) but got {result_nx0_v.shape}\"\n+\n+    # Additional test case - mix zero row and column matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(1, 0)\n+    M4 = SparseMatrix.zeros(1, 1)\n+    mixed_h = SparseMatrix.hstack(M1, M2)\n+    assert mixed_h.shape == (0, 1), f\"Expected shape (0, 1) but got {mixed_h.shape}\"\n+    mixed_v = SparseMatrix.vstack(M3, M4)\n+    assert mixed_v.shape == (2, 1), f\"Expected shape (2, 1) but got {mixed_v.shape}\"\n \n def test_transpose():\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..15a6445 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -99,6 +99,16 @@ def test_core_symbol():\n             Symbol(\"_issue_3130\", commutative=False), Wild, Wild(\"x\")):\n         check(c)\n \n+import pickle\n+import sympy\n+\n+def test_float_pickling_python2_to_python3():\n+    # Simulate a pickled sympy expression from Python 2 with floats\n+    python2_pickled_data = pickle.dumps(sympy.Float((0, '1L', 0, 1)), protocol=2)\n+    # Load this pickled data in Python 3 and ensure no errors and correct unpickling\n+    unpickled_float = pickle.loads(python2_pickled_data)\n+    \n+    assert sympy.Float((0, '1', 0, 1)) == unpickled_float\n \n def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..6753f7c 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -271,9 +271,23 @@ def test_coth():\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n-\n-\n-def test_coth_series():\n+def test_coth_subs_issue():\n+    from sympy import Symbol, coth, log, tan\n+\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    assert e.subs(x, 2) is not None\n+    assert e.subs(x, 3) is not None\n+    assert e.subs(x, 5) is not None\n+    assert e.subs(x, 6) is not None\n+    assert e.subs(x, 8) is not None\n+    assert e.subs(x, 9) is not None\n+    assert e.subs(x, 11) is not None\n+    assert e.subs(x, 12) is not None\n+    assert e.subs(x, 13) is not None\n+    assert e.subs(x, 15) is not None\n+    assert e.subs(x, 18) is not None\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..585eb15 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,42 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Additional test: inserting at the end should append\n+    M = sm.eye(3)\n+    V = sm.ones(3, 1)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 1],\n+        [0, 1, 0, 1],\n+        [0, 0, 1, 1]\n+    ])\n+    assert result == expected\n+\n+    # Additional test: inserting at the beginning\n+    M = sm.eye(3)\n+    V = sm.ones(3, 1)\n+    result = M.col_insert(0, V)\n+    expected = sm.Matrix([\n+        [1, 1, 0, 0],\n+        [1, 0, 1, 0],\n+        [1, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..501cae6 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -616,6 +616,27 @@ def test_latex_Range():\n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n \n+from sympy import latex, symbols, SeqFormula, oo, SeqPer, SeqAdd, SeqMul\n+\n+def test_latex_sequence_brackets():\n+    n = symbols('n')\n+    \n+    # Check standard sequence rendering\n+    seq = SeqFormula(n**2, (n, 0, oo))\n+    expected_output = r'[0, 1, 4, 9, \\ldots]'\n+    latex_output = latex(seq)\n+    assert r'\\left' not in latex_output, \"Output contains '\\\\left'\"\n+    assert r'\\right' not in latex_output, \"Output contains '\\\\right'\"\n+    assert expected_output in latex_output, f\"Expected {expected_output}, but got {latex_output}\"\n+\n+    # Additional check with finite sequence\n+    seq_finite = SeqFormula(n**2, (n, 0, 3))\n+    expected_output_finite = r'[0, 1, 4, 9]'\n+    latex_output_finite = latex(seq_finite)\n+    assert r'\\left' not in latex_output_finite, \"Output contains '\\\\left'\"\n+    assert r'\\right' not in latex_output_finite, \"Output contains '\\\\right'\"\n+    assert expected_output_finite in latex_output_finite, f\"Expected {expected_output_finite}, but got {latex_output_finite}\"\n+\n def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..edc5b0e 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -154,7 +155,15 @@ def test_Greedy_postprocess():\n     assert opt == {'greedy': True}\n \n \n+from sympy.abc import x, y, z\n+from sympy import Poly\n+\n def test_Domain_preprocess():\n+    # Verify that RR domains can be preprocessed correctly\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]  # Ensure RR with multiple variables is supported\n+\n+    # Verify that Poly works with RR[y,z] without errors\n+    assert str(Poly(1.2*x*y*z, x, domain='RR[y,z]')) == \"Poly(1.2*y*z*x, x, domain='RR[y,z]')\"\n     assert Domain.preprocess(ZZ) == ZZ\n     assert Domain.preprocess(QQ) == QQ\n     assert Domain.preprocess(EX) == EX\n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..69bcb2d 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,28 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty\n+\n+def test_issue_14814():\n+    # issue #14814\n+    n = 3\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    a = MatrixSymbol('a', n, n)\n+\n+    # Testing original reported issue with MatrixSymbol containing '*'\n+    assert pretty(x + y) == \"x + y*\"\n+    \n+    # Testing pretty printing with negative coefficients\n+    assert pretty(-a*x + -2*y*y) == \"-a*x - 2*y*y*\"\n+    \n+    # Additional test cases to confirm robust handling\n+    z = MatrixSymbol('z', n, n)\n+    assert pretty(x - y) == \"x - y*\"\n+    assert pretty(x * y * z) == \"x*y* * z\"\n+    assert pretty(-x - y - z) == \"-x - y* - z\"\n+    assert pretty(-a*x - -2*y*y) == \"-a*x + 2*y*y*\"\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..d5845d6 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,7 +728,25 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n-def test_python_keywords():\n+from sympy import MatrixSymbol, lambdify\n+from sympy.testing.pytest import raises\n+\n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    \n+    # Test with curly braces in the MatrixSymbol name\n+    lam = lambdify(curlyv, curlyv)\n+    result = lam([[1], [2]])\n+    assert result[0][0] == 1 and result[1][0] == 2\n+    \n+    # Test with dummify=True\n+    lam_dummify = lambdify(curlyv, curlyv, dummify=True)\n+    result_dummify = lam_dummify([[1], [2]])\n+    assert result_dummify[0][0] == 1 and result_dummify[1][0] == 2\n+\n+    # Expect no SyntaxError even for matrix with curly braces and dummify set\n+    raises(SyntaxError, lambda: lambdify(curlyv, curlyv))\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..c3742a4 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,25 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Original test patch\n+    assert latex((M*N)[i, j]) == r'\\sum_{{i_{1}}=0}^{{k - 1}} M_{{i, i_{1}}} N_{{i_{1}, j}}'\n+    \n+    # Additional test cases to verify the fix \n+    # Testing with different indices\n+    assert latex((M*N)[j, i]) == r'\\sum_{{i_{1}}=0}^{{k - 1}} M_{{j, i_{1}}} N_{{i_{1}, i}}'\n+    assert latex((M*N)[i, i]) == r'\\sum_{{i_{1}}=0}^{{k - 1}} M_{{i, i_{1}}} N_{{i_{1}, i}}'\n+    \n+    # Testing with different dimensions\n+    P = MatrixSymbol(\"P\", k, 1)\n+    Q = MatrixSymbol(\"Q\", 1, k)\n+    assert latex((P*Q)[i, j]) == r'P_{{i, 0}} Q_{{0, j}}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..05fd1a7 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, Eq, exp\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -6,6 +7,21 @@ from sympy.utilities.pytest import raises\n \n \n def test_idiff():\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test for the issue of idiff with Eq class\n+    y = Symbol('y', real=True)\n+    x = Symbol('x', real=True)\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x).simplify() == (x + 1) * exp(x - y)/(y + 1)\n+\n+    # Test for the issue of idiff with function notation f(x) instead of y\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x).simplify() == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+\n+    # Additional complex test cases\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x).simplify() == (y + Derivative(y, x))*exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x).simplify() == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x).simplify() == Derivative(g(x), x)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..6fc9036 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,38 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_cython_autowrap_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in expr\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n+\n+def test_codegen_cython_unused_array_arg():\n+    from sympy.utilities.codegen import codegen\n+    from sympy import MatrixSymbol\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generated = codegen(name_expr, language='C', prefix='test', \n+                        argument_sequence=(x,), header=False, empty=False)\n+    source = generated[0][1]\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..d11e12f 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -339,6 +339,19 @@ def test_intersection():\n \n     assert Intersection(S.Complexes, FiniteSet(S.ComplexInfinity)) == S.EmptySet\n \n+    # Test for issue: Intersection should remove duplicates\n+    from sympy import Piecewise, Eq, Intersection, FiniteSet, S\n+\n+    x = Symbol('x')\n+\n+    # Intersection should evaluate duplicates in nested sets\n+    assert Intersection({1}, {1}, {x}) == Piecewise((FiniteSet(1), Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {x}) == Piecewise((FiniteSet(1), Eq(x, 1)), (S.EmptySet, True))\n+\n+    # Additional test cases for duplicates\n+    assert Intersection({1, 1}, {1, x}, evaluate=False).args == (FiniteSet(1), FiniteSet(1, x))\n+    assert Intersection(FiniteSet(1, 2, 2), FiniteSet(1, x), evaluate=True) == Piecewise((FiniteSet(1), Eq(x, 1)), (S.EmptySet, True))\n+\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..5746498 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,8 +1,9 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n )\n-from sympy import eye\n+from sympy import eye, Identity\n from sympy.abc import x, i, j, a, b, c, d\n from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbrt, Sqrt\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n@@ -11,7 +12,8 @@ from sympy.codegen.array_utils import (CodegenArrayContraction,\n from sympy.printing.lambdarepr import NumPyPrinter\n \n from sympy.utilities.pytest import warns_deprecated_sympy\n-from sympy.utilities.pytest import skip\n+from sympy.utilities.pytest import skip, raises\n+from sympy.matrices import MatrixSymbol\n from sympy.external import import_module\n \n np = import_module('numpy')\n@@ -26,7 +28,20 @@ def test_numpy_piecewise_regression():\n     assert NumPyPrinter().doprint(p) == 'numpy.select([numpy.less(x, 0),True], [1,0], default=numpy.nan)'\n \n \n-def test_sum():\n+def test_issue_matrix_identity():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2), modules='numpy')\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+    assert (f(ma) == mr).all()\n+\n+    from sympy import symbols\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n), modules='numpy'))\n     if not np:\n         skip(\"NumPy not installed\")\n \n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..4612c87 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,15 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n+def test_issue_17137():\n+    from sympy import Symbol, I, cos, simplify\n+    x = Symbol('x')\n+    # The expression simplify(cos(x)**I) should not raise any exceptions\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    # Test with a more complex exponent to ensure robustness\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..145ef30 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import geometry as ge, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -95,7 +96,9 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n-    # Point differences should be simplified\n+    # Test Point multiplication with scalars in different orders\n+    assert ge.Point(0, 0) + ge.Point(1, 1) * sympify(2.0) == ge.Point(2, 2)\n+    assert ge.Point(0, 0) + sympify(2.0) * ge.Point(1, 1) == ge.Point(2, 2)\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n     a, b = S.Half, Rational(1, 3)\n@@ -172,7 +175,9 @@ def test_point3D():\n \n     raises(ValueError, lambda: Point3D(0, 0, 0) + 10)\n \n-    # Point differences should be simplified\n+    # Test Point multiplication with scalars in different orders\n+    assert ge.Point(0, 0) + ge.Point(1, 1) * sympify(2.0) == ge.Point(2, 2)\n+    assert ge.Point(0, 0) + sympify(2.0) * ge.Point(1, 1) == ge.Point(2, 2)\n     assert Point3D(x*(x - 1), y, 2) - Point3D(x**2 - x, y + 1, 1) == \\\n         Point3D(0, -1, 1)\n \n",
  "sympy__sympy-18057": "",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..b24acde 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,17 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_issue_18186():\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy import symbols\n \n-def test_general_pythagorean():\n+    x, y = symbols('x y', integer=True)\n+\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..a1b95b5 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,8 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String, Node\n+from sympy import Basic\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -60,7 +62,19 @@ def test_PostIncrement():\n     assert ccode(p) == '(x)++'\n \n \n-def test_sizeof():\n+def test_atoms_in_codegen():\n+    sz = sizeof('unsigned int')\n+    # Adding test case to check atoms method\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n+\n+    # Check for a more complex expression \n+    expr = Variable(x, float64) + Variable(y, int64)\n+    # Verify that atoms() returns elements with no args\n+    assert expr.atoms() == {Variable(x, float64), Variable(y, int64)}\n+\n+    # Creating a custom Node with no arguments\n+    custom_node = Node() # A custom node that should have no args\n+    assert custom_node.atoms() == {custom_node}\n     typename = 'unsigned int'\n     sz = sizeof(typename)\n     assert ccode(sz) == 'sizeof(%s)' % typename\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..8865563 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -101,7 +101,29 @@ def test_block_collapse_explicit_matrices():\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n-    assert block_collapse(BlockMatrix([[A]])) == A\n+    from sympy import Matrix, BlockDiagMatrix, BlockMatrix, ZeroMatrix\n+\n+def test_single_element_blockdiagmatrix_conversion():\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2],\n+        [3, 4]\n+    ])\n+    assert B == expected\n+\n+def test_multiple_elements_blockdiagmatrix_conversion():\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B == expected\n \n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..9ce6e53 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -53,8 +54,13 @@ def test_pow_index():\n     Q2 = A**n\n     assert Q2[0, 0] == MatrixElement(Q2, 0, 0)\n \n-\n-def test_transpose_index():\n+def test_block_index_symbolic_issue():\n+    n, i = symbols('n, i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    # Verify indexing doesn't simplify incorrectly\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n     assert X.T[i, j] == X[j, i]\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..063fb4b 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -316,6 +316,35 @@ def test_sign():\n     d = p - q\n     assert sign(d).func is sign or sign(d) == 0\n \n+def test_sign_rewrite_abs():\n+    from sympy import sign, Abs, Piecewise, Eq, Symbol, I, Function\n+\n+    # Test real variable\n+    x = Symbol('x', real=True)\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+\n+    # Test imaginary variable\n+    y = Symbol('y', imaginary=True)\n+    assert sign(y).rewrite(Abs) == y / Abs(y)\n+\n+    # Test complex variable\n+    z = Symbol('z', complex=True)\n+    assert sign(z).rewrite(Abs) == z / Abs(z)\n+\n+    # Test zero\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # Test function of a variable\n+    f = Function('f')\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x)/Abs(f(x)), True))\n+\n+    # Test specific numbers\n+    assert sign(-2).rewrite(Abs) == -1\n+    assert sign(3*I).rewrite(Abs) == I\n+\n+    # Test nonzero real variable\n+    nz = Symbol('nz', real=True, nonzero=True)\n+    assert sign(nz).rewrite(Abs) == nz / Abs(nz)\n \n def test_as_real_imag():\n     n = pi**1000\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..392cc7b 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,6 +471,8 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n def test_partitions():\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n@@ -481,6 +483,12 @@ def test_partitions():\n         assert list(partitions(6, None, 2, size=i)) != ans[i]\n         assert list(partitions(6, 2, 0, size=i)) == ans[i]\n \n+    # Test if the same dictionary object is reused\n+    results = list(partitions(6, k=2))\n+    ids = list(map(id, results))\n+    # Ensure that they all have unique IDs (i.e., no object reuse).\n+    assert len(set(ids)) == len(ids), \"Partition objects are reused but should not be.\"\n+\n     assert [p.copy() for p in partitions(6, k=2)] == [\n         {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n \n@@ -712,8 +720,14 @@ def test_uniq():\n     f = [[1]]\n     raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n \n-\n-def test_kbins():\n+def test_partitions_reuse():\n+    # Verify partitions don't reuse the same dictionary instance\n+    results = list(partitions(6, k=2))\n+    for idx, p in enumerate(results):\n+        p[1] = 99  # Modify one result\n+        for jdx, q in enumerate(results):\n+            if idx != jdx:\n+                assert 1 not in q, \"Modification in one partition affected another\"\n     assert len(list(kbins('1123', 2, ordered=1))) == 24\n     assert len(list(kbins('1123', 2, ordered=11))) == 36\n     assert len(list(kbins('1123', 2, ordered=10))) == 10\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..3d59c84 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,6 +254,13 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n+from sympy import S, oo, zoo, power\n+\n+def test_issue_19572():\n+    # Test for 0**-oo should return ComplexInfinity (zoo)\n+    assert 0**-oo == zoo\n+    assert power(0, -oo) == zoo\n+\n def test_zero():\n     x = Symbol('x')\n     y = Symbol('y')\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..18c0f14 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,15 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_does_not_have_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        s.__dict__\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..35e6d9f 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,21 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_arg():\n+    x = Symbol('x', complex = True)\n+    assert refine(arg(x), Q.positive(x)) == 0\n+    assert refine(arg(x), Q.negative(x)) == pi\n+\n+    # New Test Cases to thoroughly test the fix\n+    a = Symbol('a', real=True)\n+    assert refine(arg(exp(I*pi/2)), Q.positive(a)) == pi/2\n+    assert refine(arg(exp(-I*pi/2)), Q.positive(a)) == -pi/2\n+    assert refine(arg(-a*I), Q.positive(a)) == -pi/2\n+    assert refine(arg(a*I), Q.positive(a)) == pi/2\n+    assert refine(arg(-a*I), Q.negative(a)) == pi/2\n+    assert refine(arg(a*I), Q.negative(a)) == -pi/2\n+    assert refine(arg(-1), Q.positive(a)) == pi\n+    assert refine(arg(1), Q.positive(a)) == 0\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..f10d3a2 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -20,6 +21,33 @@ def test_subs():\n     assert e == Rational(6)\n \n \n+def test_issue_21373():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+    from sympy import exp, symbols, clear_cache\n+\n+    x, y, z = symbols('x y z')\n+    \n+    # Clear cache and set up expression\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    # This works fine\n+    assert expr.subs({1: 1.0}) == exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+\n+    # Define real symbols, clear cache again, and recreate expression\n+    x, y, z = symbols('x y z', real=True)\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    try:\n+        result = expr.subs({1: 1.0})\n+        assert result == exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    except PolynomialError:\n+        assert False, \"Unexpected PolynomialError raised\"\n+\n+    # Check if repeated substitutions work without clearing cache\n+    result = expr.subs({1: 1.0})\n+    assert result == exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+\n def test_subs_Matrix():\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..1588c9a 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -34,7 +36,10 @@ def test_Symbol_kind():\n     assert comm_x.kind is NumberKind\n     assert noncomm_x.kind is UndefinedKind\n \n-def test_Integral_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..45edf2b 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,6 +11,7 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n \n \n def test_point():\n@@ -443,8 +445,23 @@ def test_unit():\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n+def test_issue_22684():\n+    # Test case to ensure the issue is resolved\n+    # This should not raise a ValueError for imaginary coordinates\n+    with evaluate(False):\n+        p = Point2D(sp.Integer(1), sp.Integer(2))\n+        assert p == Point2D(1, 2)\n+\n+    # Additional test cases to verify behavior with evaluate=False\n+    p_non_evaluate = Point2D(1, 2, evaluate=False)\n+    assert p_non_evaluate == Point2D(1, 2)\n+\n+    p_evaluate = Point2D(1, 2, evaluate=True)\n+    assert p_evaluate == Point2D(1, 2)\n \n-def test__normalize_dimension():\n+    # Ensure it works without the context manager\n+    p_no_context = Point2D(sp.Integer(1), sp.Integer(2))\n+    assert p_no_context == Point2D(1, 2)\n     assert Point._normalize_dimension(Point(1, 2), Point(3, 4)) == [\n         Point(1, 2), Point(3, 4)]\n     assert Point._normalize_dimension(\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..efd3c59 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -338,6 +338,40 @@ def test_cse_Indexed():\n     assert len(replacements) > 0\n \n \n+from sympy import symbols, MatrixSymbol, Matrix, cse\n+\n+def test_cse_matrix_symbol_indexing():\n+    A = MatrixSymbol(\"A\", 4, 4)\n+    B = MatrixSymbol(\"B\", 4, 4)\n+\n+    # Create a symbolic matrix expression\n+    expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0]\n+\n+    # Perform cse on this expression\n+    replacements, reduced_exprs = cse(expr)\n+\n+    # Validate replacements are correct meaningfully\n+    expected_replacements = [(symbols('x0'), A[0, 0] * B[0, 0])]\n+    expected_reduced_exprs = [symbols('x0') + A[0, 1] * B[1, 0]]\n+\n+    assert replacements == expected_replacements\n+    assert reduced_exprs == expected_reduced_exprs\n+\n+def test_cse_matrix_symbol_full_expression():\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    B = MatrixSymbol(\"B\", 3, 1)\n+    \n+    full_expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0] + A[1, 0] * B[0, 0]\n+\n+    replacements, reduced_exprs = cse(full_expr)\n+\n+    expected_replacements = [(symbols('x0'), A[0, 0] * B[0, 0]), \n+                             (symbols('x1'), A[0, 1] * B[1, 0])]\n+    expected_reduced_exprs = [symbols('x0') + symbols('x1') + A[1, 0] * B[0, 0]]\n+\n+    assert replacements == expected_replacements\n+    assert reduced_exprs == expected_reduced_exprs\n+\n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..541dde1 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -17,8 +18,12 @@ array_types = [\n     MutableSparseNDimArray\n ]\n \n-\n-def test_array_negative_indices():\n+def test_empty_array_construction():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n     for ArrayType in array_types:\n         test_array = ArrayType([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n         assert test_array[:, -1] == Array([5, 10])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..92b78fa 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1198,6 +1201,18 @@ def test_issue_14941():\n     assert f3(2, 3) == [3, 2]\n \n \n+def test_tuple_single_element():\n+    \"\"\"Test that lambdify handles a tuple with a single element correctly.\"\"\"\n+    # Creating the lambdified function with a tuple containing a single element\n+    f_single = lambdify([], (1,))\n+    \n+    # Call the function to see if it returns a tuple\n+    assert f_single() == (1,)\n+    \n+    # Verify the source code generated includes the trailing comma for tuple\n+    src_single = inspect.getsource(f_single)\n+    assert \"return (1,)\" in src_single\n+\n def test_lambdify_Derivative_arg_issue_16468():\n     f = Function('f')(x)\n     fx = f.diff()\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..ea6aee2 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,30 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units import Dimension\n+    \n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..d0aacc1 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,23 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_issue_expansion_incomplete():\n+    # Test cases to verify the fix for incomplete tensor expansion\n+\n+    # Test from the issue description\n+    U = Operator('U')\n+    V = Operator('V')\n+    P = TensorProduct(2*U - V, U + V)\n+    expanded_P = P.expand(tensorproduct=True)\n+    assert expanded_P == 2*TensorProduct(U, U) + 2*TensorProduct(U, V) - TensorProduct(V, U) - TensorProduct(V, V)\n+\n+    # Original test patch cases\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..972e4e9 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,40 @@\n+\n+from sympy.physics.units import Quantity\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import time, velocity, acceleration, second, meter\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_equivalent_dimensions_with_different_factors():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+    \n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+    \n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+    \n+    expr1 = a1*t1 + v1\n+    # It should not raise ValueError here if the issue is resolved\n+    SI._collect_factor_and_dimension(expr1)\n+\n import warnings\n \n from sympy.core.add import Add\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..652178b 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,19 @@\n+\n+def test_prefix_multiplication_with_units():\n+    # Checking milli prefix with Watts\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+    \n+    # Checking milli prefix with Volts\n+    assert milli * V == V / 1000\n+    assert V * milli == V / 1000\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, V\n+from sympy.physics.units.prefixes import milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..0a12722 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -9,6 +9,7 @@ from .models import (\n     Base, Chef, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n     MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase,\n     Supplier, Title, Worker,\n+    Child, Parent\n )\n \n \n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..1aee8d6 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,7 +343,32 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_order_by_f_expression(self):\n+    def test_order_by_self_referencing_fk_id(self):\n+        # Setup initial data for OneModel and TwoModel\n+        root = OneModel.objects.create(oneval=10)  # Creating a root object\n+        child1 = OneModel.objects.create(root=root, oneval=1)\n+        child2 = OneModel.objects.create(root=root, oneval=2)\n+\n+        two1 = TwoModel.objects.create(record=child1, twoval=100)\n+        two2 = TwoModel.objects.create(record=child2, twoval=200)\n+\n+        # Test order by record__root_id to verify correct ordering\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2]).order_by('record__root_id')\n+        self.assertQuerysetEqual(\n+            qs,\n+            [two1, two2],\n+            transform=lambda x: x,\n+        )\n+\n+        # Test incorrect ordering behavior to ensure it's resolved\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2]).order_by('-record__root_id')\n+        self.assertQuerysetEqual(\n+            qs,\n+            [two2, two1],\n+            transform=lambda x: x,\n+        )\n+        \n+        # The test above ensures that specifying order_by('record__root_id') works correctly\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n                 \"Article 1\",\n",
  "django__django-13265": "",
  "django__django-14534": "",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..7305ff4 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,10 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+import sys\n+from .utils import do_autodoc\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..1470a08 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,25 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_alignment_issue():\n+    from sympy import Sum, pprint, oo\n+    from sympy.abc import x\n \n-def test_units():\n+    # Test for the reported issue where + 3 is not aligned properly with the summation term\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571     + 3\\n\\\n+ \u2571      \\n\\\n+ \u203e\u203e\u203e    \\n\\\n+x = 1   \\\n+\"\"\")\n+\n+    assert upretty(expr) == ucode_str\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..f1626dd 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -704,8 +704,20 @@ def test_uniq():\n     assert list(uniq([2, 3, 2, 4, [2], [1], [2], [3], [1]])) == \\\n         [2, 3, 4, [2], [1], [3]]\n \n-\n-def test_kbins():\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Additional test cases\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = list('THISTLESPROUT')\n+    raises(RuntimeError, lambda: [f.append('X') for i in uniq(f)])\n+    f = [1, 2, 3, 4, 5]\n+    raises(RuntimeError, lambda: [f.append(i) for i in uniq(f)])\n+    f = [1, 2, 2, 4, 5]\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+    # Ensure immutables do not raise errors\n+    f = (1, 2, 3, 2, 1)\n+    assert list(uniq(f)) == [1, 2, 3]\n     assert len(list(kbins('1123', 2, ordered=1))) == 24\n     assert len(list(kbins('1123', 2, ordered=11))) == 36\n     assert len(list(kbins('1123', 2, ordered=10))) == 10\n",
  "django__django-11797": "",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..8bed05f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -545,8 +545,23 @@ class BasicExpressionsTests(TestCase):\n         self.assertCountEqual(subquery_test, [self.foobar_ltd, self.gmbh])\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n-\n-    def test_uuid_pk_subquery(self):\n+    \n+    def test_subquery_sql_with_compiler(self):\n+        # Ensure subquery SQL is generated correctly when subquery attribute is set\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        \n+        # Assertions to ensure subquery flag correctness\n+        self.assertTrue(employees_subquery.query.subquery)\n+        self.assertFalse(employees.query.subquery)\n+        \n+        # Generate compiler and associated SQL\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        \n+        # Ensure generated SQL starts correctly and ends with a closing bracket\n+        self.assertTrue(sql.startswith('(SELECT '))\n+        self.assertTrue(sql.endswith(')'))\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..7e55cbe 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,17 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_multilevel_filtered_relation_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            # Test that the related tournament obtained from the pool and \n+            # the tournament from tournament_pool are the same.\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +175,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..97dfd4d 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1623,7 +1624,54 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_hue_in_map(self):\n+        import seaborn as sns\n+        import pandas as pd\n+        import numpy as np\n+\n+        # Load iris dataset\n+        iris = sns.load_dataset(\"iris\")\n+\n+        # Create a PairGrid without using hue at initialization\n+        g = sns.PairGrid(\n+            iris, \n+            y_vars=[\"sepal_length\", \"sepal_width\"], \n+            x_vars=[\"petal_length\", \"petal_width\"]\n+        )\n+\n+        # Attempt to map with hue from the dataset\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            mapping_error = False\n+        except Exception as e:\n+            mapping_error = True\n+\n+        assert not mapping_error, \"Mapping with hue in PairGrid raises an error\"\n+\n+    def test_pairgrid_with_various_dtypes_hue(self):\n+        import seaborn as sns\n+        import pandas as pd\n+\n+        # Load iris dataset\n+        iris = sns.load_dataset(\"iris\")\n+\n+        # Alternative dtypes for hue\n+        iris[\"species_num\"] = iris[\"species\"].astype('category').cat.codes\n+\n+        # Create pair plot with categorical numerical hue\n+        g = sns.PairGrid(\n+            iris, \n+            y_vars=[\"sepal_length\", \"sepal_width\"], \n+            x_vars=[\"petal_length\", \"petal_width\"]\n+        )\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species_num\"])\n+            mapping_error = False\n+        except Exception as e:\n+            mapping_error = True\n+\n+        assert not mapping_error, \"Mapping with numerical categorical hue in PairGrid raises an error\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..82c11f7 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,10 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Verify that the shortcut -c functions the same way as --collect-only\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..2a97ab1 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -94,8 +94,14 @@ def missing_attr(c,\n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n \n-    def __init__(self, x: int) -> None:\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..2519c1e 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,6 +83,18 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+def test_identity_matrix_sum():\n+    from sympy import Sum, symbols\n+    n = symbols('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+\n+    # Check element-wise sum of the identity matrix\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+    \n+    # Check when n is substituted with a specific number\n+    assert Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit() == 3\n+    assert Sum(Sum(In[i, j], (i, 0, 4)), (j, 0, 4)).doit() == 5\n \n def test_Identity_doit():\n     Inn = Identity(Add(n, n, evaluate=False))\n",
  "sympy__sympy-20049": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex b711aa3..098133f 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -518,9 +518,21 @@ class Point(object):\n         \"\"\"\n \n         _check_frame(frame)\n-        if not (frame in self._vel_dict):\n-            raise ValueError('Velocity of point ' + self.name + ' has not been'\n-                             ' defined in ReferenceFrame ' + frame.name)\n+        if frame not in self._vel_dict:\n+            # Attempt to compute the velocity if not explicitly defined\n+            found = False\n+            for p in self._pos_dict:\n+                try:\n+                    rel_vel = self.pos_from(p).dt(frame) + p.vel(frame)\n+                    self.set_vel(frame, rel_vel)\n+                    found = True\n+                    break\n+                except ValueError:\n+                    continue\n+            \n+            if not found:\n+                raise ValueError('Velocity of point ' + self.name + ' has not been'\n+                                 ' defined in ReferenceFrame ' + frame.name)\n         return self._vel_dict[frame]\n \n     def partial_velocity(self, frame, *gen_speeds):\n",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..ea30c11 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -246,6 +246,14 @@ GOOD_PAIRS = [\n ]\n \n \n+from sympy.parsing.latex import parse_latex  # Ensure this import is present\n+\n+def test_issue_21537_latex_parsing_of_fractions():\n+    # This test checks the specific issue where fractions were parsed incorrectly.\n+    expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    expected_expr = ((a**3 + b)/c)/(1/(c**2))\n+    assert expr == expected_expr, f\"Expected {expected_expr}, but got {expr}\"\n+\n def test_parseable():\n     from sympy.parsing.latex import parse_latex\n     for latex_str, sympy_expr in GOOD_PAIRS:\n"
}