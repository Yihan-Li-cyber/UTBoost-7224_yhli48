{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..15bf4e9 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -128,8 +128,23 @@ def test_arith_oper():\n     with pytest.raises(ModelDefinitionError, match=r\"Unsupported operands for arithmetic operator: .*\"):\n         _arith_oper(sh1, map1)\n \n-\n-@pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n+# New test for nested CompoundModels from issue description\n+def test_nested_compound_models_separability():\n+    # Creating models\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    \n+    # The nested compound model example from the issue description\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    nested_model = m.Pix2Sky_TAN() & cm\n+\n+    expected_result = np.array([[True, True, False, False],\n+                                [True, True, False, False],\n+                                [False, False, True, True],\n+                                [False, False, True, True]])\n+\n+    # Assert the separability matrix for the nested compound model\n+    assert_allclose(separability_matrix(nested_model), expected_result)\n def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..5f790b3 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,13 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+from astropy.table import QTable\n+import astropy.units as u\n+import numpy as np\n+from io import StringIO\n \n from .common import assert_almost_equal, assert_equal\n \n@@ -184,4 +189,59 @@ Col1      Col2 Col3 Col4\n  2.4 's worlds    2    2\n ==== ========= ==== ====\n \"\"\",\n-    )\n+    )\n+\n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing a table with ReStructuredText format with header_rows\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.count})\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    expected_rst_output = (\n+        \"==== ========\\n\"\n+        \"wave response\\n\"\n+        \" nm       ct \\n\"\n+        \"==== ========\\n\"\n+        \"350.0    0.7\\n\"\n+        \"950.0    1.2\\n\"\n+        \"==== ========\\n\"\n+    )\n+    assert out.getvalue() == expected_rst_output\n+\n+\n+def test_roundtrip_rst_with_dtypes():\n+    \"\"\"Round-trip a table with dtype specified in header rows\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n+\n+def test_empty_table_with_header_rows():\n+    \"\"\"Test an empty table with header_rows\"\"\"\n+    tbl = QTable(names=(\"a\", \"b\"), dtype=(\"float\", \"int\"))\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"dtype\"])\n+    expected = (\n+        \"=== ===\\n\"\n+        \" a   b \\n\"\n+        \"=== ===\\n\"\n+        \"      \\n\"  # Expecting no data rows here due to empty table\n+        \"=== ===\\n\"\n+    )\n+    assert out.getvalue() == expected\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..45fb797 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,40 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+import numpy as np\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def test_command_case_sensitivity(tmp_path):\n+    \"\"\"Test that QDP command case sensitivity is correctly handled.\"\"\"\n+    example_qdp_lower = \"\"\"\n+    ! Sample data with lowercase commands\n+    read terr 1\n+    read serr 2\n+    1 0.5 1 0.5\n+    \"\"\"\n+    example_qdp_capitalized = \"\"\"\n+    ! Sample data with capitalized commands\n+    Read Terr 1 \n+    Read Serr 2\n+    1 0.5 1 0.5\n+    \"\"\"\n+    path_lower = str(tmp_path / \"test_lower.qdp\")\n+    path_capitalized = str(tmp_path / \"test_capitalized.qdp\")\n+\n+    with open(path_lower, \"w\") as fp:\n+        fp.write(example_qdp_lower)\n+    with open(path_capitalized, \"w\") as fp:\n+        fp.write(example_qdp_capitalized)\n+\n+    # Check if the lowercase command qdp file is read correctly without errors\n+    table_lower = _read_table_qdp(path_lower)\n+    assert np.isclose(table_lower[\"col1_err\"][0], 0.5)\n \n-def test_read_example():\n+    # Check if the capitalized command qdp file is read correctly without errors\n+    table_capitalized = _read_table_qdp(path_capitalized)\n+    assert np.isclose(table_capitalized[\"col1_err\"][0], 0.5)\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..c5d8c67 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,6 +28,46 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n+import numpy as np\n+from astropy.nddata import NDDataRef\n+import pytest\n+\n+def test_nddata_bitmask_arithmetic_no_mask_behavior():\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n+\n # Test with Data covers:\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..870c352 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -253,8 +253,26 @@ class TestTableFunctions(FitsTestCase):\n         # When there are scaled columns, the raw data are in data._parent\n \n         t.close()\n-\n-    def test_ascii_table(self):\n+    def test_d_exponent_handling(self):\n+        # Test to ensure that D format floating point numbers are correctly written\n+        import numpy as np\n+        from astropy.io import fits\n+        from astropy.io.fits.tests import comparerecords\n+        a1 = np.array(['abc', 'def'])\n+        r1 = np.array([11.0, 12.0])\n+        c1 = fits.Column(name='abc', format='A3', array=a1)\n+        c2 = fits.Column(name='def', format='D', array=r1, bscale=2.3, bzero=0.6)\n+        c3 = fits.Column(name='t1', format='I', array=[91, 92, 93])\n+        x = fits.ColDefs([c1, c2, c3])\n+        hdu = fits.TableHDU.from_columns(x)\n+        hdu.writeto(self.temp('d_test.fits'), overwrite=True)\n+        with open(self.temp('d_test.fits')) as f:\n+            contents = f.read()\n+            # Each number should have a D as the exponent separator\n+            assert '4.95652173913043D' in contents\n+            assert '5.478260869565217D' in contents\n+        with fits.open(self.temp('d_test.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n         ra1 = np.rec.array([\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..21e941b 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,6 +1093,14 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS should be 0o644 if not set in the\n+        Django settings.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..47bc6ed 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,16 +72,39 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n-        self.assertEqual(\n-            cm.exception.message % cm.exception.params,\n-            \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+        self.assertIn(\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\",\n+            cm.exception.message % cm.exception.params\n         )\n \n+    def test_invalid_format_string(self):\n+        field = models.DurationField()\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean('14:00', None)\n+        self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertIn(\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\",\n+            cm.exception.message % cm.exception.params\n+        )\n+\n+    def test_valid_duration_formats(self):\n+        field = models.DurationField()\n+        # Test valid durations with various formats\n+        valid_durations = {\n+            '30': datetime.timedelta(seconds=30),\n+            '15:30': datetime.timedelta(minutes=15, seconds=30),\n+            '1:15:30': datetime.timedelta(hours=1, minutes=15, seconds=30),\n+            '3 1:15:30.3': datetime.timedelta(days=3, hours=1, minutes=15, seconds=30, milliseconds=300),\n+            '1 15:30': datetime.timedelta(days=1, minutes=15, seconds=30),\n+        }\n+        for input_value, expected_output in valid_durations.items():\n+            with self.subTest(input_value=input_value):\n+                self.assertEqual(field.clean(input_value), expected_output)\n+\n \n class TestFormField(SimpleTestCase):\n     # Tests for forms.DurationField are in the forms_tests app.\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..26dd9d1 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\u000A',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,6 +249,18 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n+    def test_ascii_validator(self):\n+        valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n@@ -258,4 +271,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..ef23e83 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,16 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        # Test case for HttpResponse handling a memoryview object\n+        r = HttpResponse(memoryview(b'memoryview content'))\n+        self.assertEqual(r.content, b'memoryview content')\n+\n+        # Test content via property\n+        r = HttpResponse()\n+        r.content = memoryview(b'property set content')\n+        self.assertEqual(r.content, b'property set content')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..3731b5e 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -471,6 +473,15 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        \"\"\"Test that deleting a single model instance sets its PK to None if it has no dependencies.\"\"\"\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_joined_qs(self):\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..a1d2f83 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.db import IntegrityError\n \n from .models import Proxy, UserProxy\n \n@@ -140,6 +142,26 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n+    def test_duplicate_permission_error_during_migration(self):\n+        \"\"\"\n+        Test that a duplicate permission error does not break migration\n+        when migrating proxy permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+\n+        # Manually create a duplicate permission\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+\n+        try:\n+            # Run update proxy model permissions, which should handle duplicates gracefully\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        except IntegrityError as e:\n+            self.fail(f'Migration failed with IntegrityError: {e}')\n+\n     def test_user_keeps_same_permissions_after_migrating_backward(self):\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..146de7e 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -129,6 +129,32 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n     def test_module_without_spec(self):\n         module = types.ModuleType('test_module')\n+\n+    def test_main_module_is_resolved_and_detected(self):\n+        \"\"\"\n+        Test that changes to the __main__ module are tracked by the autoreloader.\n+        \"\"\"\n+        # Create a temporary file to mimic a manage.py script\n+        filename = self.temporary_file('test_manage.py')\n+        filename.write_text(\"print('Initial content')\")\n+\n+        # Simulate __main__ module using the temporary file\n+        main_module = types.ModuleType('__main__')\n+        main_module.__file__ = str(filename.resolve())\n+        sys.modules['__main__'] = main_module\n+\n+        # Inject the module as if it's running\n+        self.addCleanup(lambda: sys.modules.pop('__main__', None))\n+        \n+        # Ensure file change is detected\n+        self.assertFileFound(filename)\n+\n+        # Modify the manage.py-like script\n+        filename.write_text(\"print('Modified content')\")\n+\n+        # Test again to see if autoreloader detects change\n+        self.clear_autoreload_caches()\n+        self.assertFileFound(filename)\n         del module.__spec__\n         self.assertEqual(autoreload.iter_modules_and_files((module,), frozenset()), frozenset())\n \n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..9c7e72f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -152,6 +152,48 @@ class TestCommonRoots(SimpleTestCase):\n         results = autoreload.common_roots(paths)\n         self.assertCountEqual(results, [Path('/first/'), Path('/root/first/')])\n \n+class TestEmbeddedNullBytes(SimpleTestCase):\n+    def test_path_with_embedded_null_bytes(self):\n+        # Constructing paths with embedded null byte scenarios\n+        paths_with_null_bytes = [\n+            'embedded_null_byte\\x00.py',\n+            'di\\x00rectory/embedded_null_byte.py',\n+        ]\n+        for path in paths_with_null_bytes:\n+            with self.subTest(path=path):\n+                # Expectation is that paths with null byte should not be considered valid\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+\n+    def test_valid_path_does_not_raise(self):\n+        # Ensure valid paths are handled without exceptions\n+        valid_paths = [\n+            'valid_file.py',\n+            'directory/valid_file.py',\n+        ]\n+        for path in valid_paths:\n+            with self.subTest(path=path):\n+                # Expectation is that valid paths resolve without issue\n+                try:\n+                    result = autoreload.iter_modules_and_files((), frozenset([path]))\n+                    self.assertTrue(result)  # Should contain at least the valid path\n+                except ValueError:\n+                    self.fail(f\"Valid path {path} raised ValueError\")\n+\n+    def test_non_existant_paths_handled(self):\n+        # Testing with non-existent paths\n+        non_existent_paths = [\n+            'non_existent_file.py',\n+            'non_existent_directory/file.py',\n+        ]\n+        for path in non_existent_paths:\n+            with self.subTest(path=path):\n+                # Expectation is that non-existent paths are not found, but also do not raise unexpected errors\n+                result = autoreload.iter_modules_and_files((), frozenset([path]))\n+                self.assertEqual(result, frozenset())\n+\n \n class TestSysPathDirectories(SimpleTestCase):\n     def setUp(self):\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..9ad9103 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -10,6 +10,8 @@ from pathlib import Path\n from unittest import mock\n \n from django.core import mail\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db import DatabaseError, connection\n from django.shortcuts import render\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..538d567 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -84,7 +84,31 @@ class BinaryFieldTests(SimpleTestCase):\n @isolate_apps('invalid_models_tests')\n class CharFieldTests(SimpleTestCase):\n \n-    def test_valid_field(self):\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n         class Model(models.Model):\n             field = models.CharField(\n                 max_length=255,\n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..5cadd58 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +318,31 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)),  # corrected past year\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),  # corrected past year\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Saturday, 27-Nov-71 08:49:37 GMT', datetime(2071, 11, 27, 8, 49, 37)),  # future year should stay\n+        )\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11964": "",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..6d681ec 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -147,9 +147,21 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.test import SimpleTestCase\n+from django.db import models\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_override_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), \"something\")\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 7b8648d..dfd0e75 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -68,7 +68,16 @@ class SimplifiedURLTests(SimpleTestCase):\n                     r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n                 )\n \n-    def test_path_lookup_with_inclusion(self):\n+    def test_modules_view_with_optional_format_parameter(self):\n+        # Test with the optional 'format' parameter provided as 'html'\n+        match = resolve('/module/html/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'html'})\n+        \n+        # Test without the optional 'format' parameter\n+        match = resolve('/module/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {})  # Expecting default behavior without the format param\n         match = resolve('/included_urls/extra/something/')\n         self.assertEqual(match.url_name, 'inner-extra')\n         self.assertEqual(match.route, 'included_urls/extra/<extra>/')\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..62506fd 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,6 @@\n+\n+from django.test import TestCase\n+\n import pickle\n \n from django import forms\n@@ -148,7 +151,33 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+class InheritedChoicesDisplayTests(TestCase):\n+\n+    def test_inherited_choices_display(self):\n+        \"\"\"\n+        Test get_FOO_display with inherited and overridden `choices`.\n+        \"\"\"\n+\n+        class AbstractBase(models.Model):\n+            foo_choice = [(\"A\", \"Base A\"), (\"B\", \"Base B\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(AbstractBase):\n+            foo_choice = [(\"A\", \"Updated A\"), (\"B\", \"Updated B\"), (\"C\", \"New C\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+        instance_a = ChildModel(field_foo='A')\n+        instance_b = ChildModel(field_foo='B')\n+        instance_c = ChildModel(field_foo='C')\n+        instance_invalid = ChildModel(field_foo='D')\n+        \n+        self.assertEqual(instance_a.get_field_foo_display(), 'Updated A')\n+        self.assertEqual(instance_b.get_field_foo_display(), 'Updated B')\n+        self.assertEqual(instance_c.get_field_foo_display(), 'New C')\n+        self.assertEqual(instance_invalid.get_field_foo_display(), 'D')  # Unmatched choice should return the raw value\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..80c52e7 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,7 +76,24 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_sublanguage_with_base_available(self):\n+        \"\"\"Test no error is raised when a base language is available for a sublanguage.\"\"\"\n+        tests = [\n+            'de-at',  # Base language 'de' is available\n+            'fr-CA',  # Base language 'fr' is available\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..7e293ea 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,74 @@\n+\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_foreign_key_constraint(self):\n+        # Test for foreign key constraints handling.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": 1}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        # Should not raise an integrity error since the transaction is atomic.\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=2)\n+        obj_ref = ObjectReference.objects.filter(pk=2).first()\n+        self.assertIsNotNone(obj)\n+        self.assertIsNone(obj_ref)\n+\n+    def test_m2m_field(self):\n+        # Test for many-to-many field handling.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 3,\n+                \"fields\": {\"related_objects\": [4]}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 4,\n+                \"fields\": {\"related_objects\": [3]}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj_3 = Object.objects.get(pk=3)\n+        obj_4 = Object.objects.get(pk=4)\n+        self.assertIn(obj_4, obj_3.related_objects.all())\n+        self.assertIn(obj_3, obj_4.related_objects.all())\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +77,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..778efe5 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -128,6 +128,34 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_multiple_foreign_keys_without_through_fields(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first_group')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second_group')\n+\n+        field = Group._meta.get_field('members')\n+        expected_error = Error(\n+            \"The model is used as an intermediate model by \"\n+            \"'invalid_models_tests.Group.members', but it has more than one \"\n+            \"foreign key from 'Group', which is ambiguous. You must \"\n+            \"specify which foreign key Django should use via the \"\n+            \"through_fields keyword argument.\",\n+            hint=(\n+                'If you want to create a recursive relationship, use '\n+                'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+            ),\n+            obj=field,\n+            id='fields.E334',\n+        )\n+        self.assertEqual(field.check(from_model=Group), [expected_error])\n+\n     def test_ambiguous_relationship_model(self):\n \n         class Person(models.Model):\n@@ -159,6 +187,34 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_multiple_foreign_keys_without_through_fields(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first_group')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second_group')\n+\n+        field = Group._meta.get_field('members')\n+        expected_error = Error(\n+            \"The model is used as an intermediate model by \"\n+            \"'invalid_models_tests.Group.members', but it has more than one \"\n+            \"foreign key from 'Group', which is ambiguous. You must \"\n+            \"specify which foreign key Django should use via the \"\n+            \"through_fields keyword argument.\",\n+            hint=(\n+                'If you want to create a recursive relationship, use '\n+                'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+            ),\n+            obj=field,\n+            id='fields.E334',\n+        )\n+        self.assertEqual(field.check(from_model=Group), [expected_error])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..07b63f7 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,7 +1249,56 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n-    def test_request_meta_filtering(self):\n+    def test_cleanse_setting_nested_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            \"foo\": \"value\",\n+            \"secret\": \"value\",\n+            \"token\": \"value\",\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": \"value\"},\n+                {\"token\": \"value\"},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            \"foo\": \"value\",\n+            \"secret\": reporter_filter.cleansed_substitute,\n+            \"token\": reporter_filter.cleansed_substitute,\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": reporter_filter.cleansed_substitute},\n+                {\"token\": reporter_filter.cleansed_substitute},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..983aefa 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -67,6 +67,34 @@ class MigrationTestBase(TransactionTestCase):\n             )\n \n     def assertIndexNotExists(self, table, columns):\n+        self.assertIndexExists(table, columns, False)\n+\n+    def test_remove_index_together_with_unique_together(self):\n+        \"\"\"\n+        Test removing index_together when unique_together exists on the same fields.\n+        \"\"\"\n+        app_label = 'test_remove_index_with_unique'\n+        model_name = 'Pony'\n+        table_name = f'{app_label}_{model_name.lower()}'\n+        fields = ['pink', 'weight']\n+\n+        # Set up initial state with unique_together and index_together.\n+        project_state = self.set_up_test_model(app_label, unique_together=True, index_together=True)\n+        self.assertUniqueConstraintExists(table_name, fields)\n+        self.assertIndexExists(table_name, fields)\n+\n+        # New state without index_together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Applying migration to remove index_together.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Assert index_together is removed, but unique_together remains.\n+        self.assertIndexNotExists(table_name, fields)\n+        self.assertUniqueConstraintExists(table_name, fields)\n         return self.assertIndexExists(table, columns, False)\n \n     def assertConstraintExists(self, table, name, value=True, using='default'):\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..3a56860 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,6 +685,30 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n+    def test_zero_objects_deleted_no_foreign_keys(self):\n+        \"\"\"\n+        Test deleting a queryset that results in zero objects deleted for\n+        a simple model without foreign keys. Should return (0, {model_key: 0}).\n+        \"\"\"\n+        # Assuming 'SimpleModel' is a defined model without foreign keys\n+        SimpleModel.objects.all().delete()  # Ensure empty\n+        deleted, deleted_objs = SimpleModel.objects.filter(id__lt=0).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {\n+            SimpleModel._meta.label: 0\n+        })\n+\n+    def test_zero_objects_deleted_with_foreign_keys(self):\n+        \"\"\"\n+        Test deleting a queryset that results in zero objects deleted for\n+        a model with foreign keys; should return (0, {}).\n+        \"\"\"\n+        # Assuming 'ComplexModel' is a defined model with foreign keys\n+        ComplexModel.objects.all().delete()  # Ensure empty\n+        deleted, deleted_objs = ComplexModel.objects.filter(id__lt=0).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {})\n+\n     def test_fast_delete_empty_no_update_can_self_select(self):\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..e0fe1ff 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,49 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(get_asgi_application())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(get_asgi_application())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = Path(__file__).parent / 'project' / 'static' / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..e14e65c 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,12 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Tests related to the issue fix for slugify\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('__strip__underscore-value___', 'strip-underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('multiple---dash---and---space', 'multiple-dash-and-space', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..34d0312 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -45,6 +46,20 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lte=4)\n         self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n \n+    def test_union_none_with_union(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        union_qs = qs1.union(qs2)\n+        # Making sure none() correctly results in no results.\n+        self.assertEqual(list(union_qs.none()), [])\n+    \n+    def test_none_with_combined_queries(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        combined_qs = qs1 | qs2\n+        # none() should result in no results for combined querysets.\n+        self.assertEqual(list(combined_qs.none()), [])\n+\n     def test_union_distinct(self):\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n@@ -313,4 +328,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..3cce73e 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2829,6 +2829,65 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Set up initial Character instances\n+        self.marley = Character.objects.create(username='marley', last_action=timezone.now())\n+        self.threepwood = Character.objects.create(username='threepwood', last_action=timezone.now())\n+        \n+        # Create StumpJoke instances\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        # Add many-to-many relations\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        # Define the CharacterDetails model inside test\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        # Define a form to test these many-to-many and foreign key fields\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+\n+        # Assertions: ensure no duplicate options in querysets\n+        self.assertCountEqual(form.fields['character1'].queryset, [self.marley, self.threepwood])\n+        self.assertCountEqual(form.fields['character2'].queryset, [self.marley, self.threepwood])\n+        self.assertCountEqual(form.fields['character3'].queryset, [self.marley, self.threepwood])\n+\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..bb72908 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -5,12 +5,43 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.checks import Error\n from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TestCase\n+from django.db import models\n from django.test.utils import isolate_apps\n \n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +378,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..9f07054 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField, User\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,6 +39,29 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                # Change the user's email which should invalidate the token\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                # Assert that the token is now invalid\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..87dd996 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -875,6 +876,38 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'],\n             ordered=False\n         )\n+\n+    def test_range_lookup_with_namedtuple_various_inputs(self):\n+        from collections import namedtuple\n+\n+        # Namedtuple with integers\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+        # Namedtuple with one equal bound\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+        # Namedtuple with inverted bounds, expecting empty result\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=51),\n+        )\n+        self.assertQuerysetEqual(qs, [], ordered=False)\n+\n+        # Namedtuple with a wide range\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=0, maximum=1000),\n+        )\n+        expected_companies = [\n+            '<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>',\n+            '<Company: 5060 Ltd>', '<Company: 99300 Ltd>',\n+        ]\n+        self.assertQuerysetEqual(qs, expected_companies, ordered=False)\n         self.assertQuerysetEqual(\n             Company.objects.filter(num_employees__range=(1, 100)),\n             [\n@@ -884,6 +917,38 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_with_namedtuple_various_inputs(self):\n+        from collections import namedtuple\n+\n+        # Namedtuple with integers\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+        # Namedtuple with one equal bound\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+        # Namedtuple with inverted bounds, expecting empty result\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=51),\n+        )\n+        self.assertQuerysetEqual(qs, [], ordered=False)\n+\n+        # Namedtuple with a wide range\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=0, maximum=1000),\n+        )\n+        expected_companies = [\n+            '<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>',\n+            '<Company: 5060 Ltd>', '<Company: 99300 Ltd>',\n+        ]\n+        self.assertQuerysetEqual(qs, expected_companies, ordered=False)\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..48b0f15 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -23,6 +23,8 @@ from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..2191ada 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -30,6 +31,48 @@ class ShellCommandTestCase(SimpleTestCase):\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n \n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n@@ -37,6 +80,48 @@ class ShellCommandTestCase(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n \n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n@@ -49,4 +134,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..f882754 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -967,7 +967,54 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n \n-    def test_verbose_name_plural_inline(self):\n+    def test_verbose_name_inline(self):\n+        class NonVerboseProfileInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Non-verbose childs'\n+\n+        class VerboseNameProfileInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Childs with verbose name'\n+\n+        class VerboseNamePluralProfileInline(TabularInline):\n+            model = VerboseNamePluralProfile\n+            verbose_name = 'Childs with verbose name plural'\n+\n+        class BothVerboseNameProfileInline(TabularInline):\n+            model = BothVerboseNameProfile\n+            verbose_name = 'Childs with both verbose names'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            NonVerboseProfileInline,\n+            VerboseNameProfileInline,\n+            VerboseNamePluralProfileInline,\n+            BothVerboseNameProfileInline,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        self.assertNotContains(response, 'Add another Profile')\n+        # Non-verbose model.\n+        self.assertContains(response, '<h2>Non-verbose childss</h2>')\n+        self.assertContains(response, 'Add another Non-verbose child')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n+        # Model with verbose name.\n+        self.assertContains(response, '<h2>Childs with verbose names</h2>')\n+        self.assertContains(response, 'Add another Childs with verbose name')\n+        self.assertNotContains(response, '<h2>Model with verbose name onlys</h2>')\n+        self.assertNotContains(response, 'Add another Model with verbose name only')\n+        # Model with verbose name plural.\n+        self.assertContains(response, '<h2>Childs with verbose name plurals</h2>')\n+        self.assertContains(response, 'Add another Childs with verbose name plural')\n+        self.assertNotContains(response, '<h2>Model with verbose name plural only</h2>')\n+        # Model with both verbose names.\n+        self.assertContains(response, '<h2>Childs with both verbose namess</h2>')\n+        self.assertContains(response, 'Add another Childs with both verbose names')\n+        self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n+        self.assertNotContains(response, 'Add another Model with both - name')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name_plural = 'Non-verbose childs'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..e8580ad 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -594,6 +594,12 @@ class TestQuerying(TestCase):\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n         )\n+        # New test case: Ensure that __isnull=True does not match JSON null values\n+        # This check is necessary specifically for SQLite and Oracle where the issue was reported.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n \n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..c350778 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -165,12 +165,27 @@ class DispatcherTests(SimpleTestCase):\n         def fails(val, **kwargs):\n             raise ValueError('this')\n         a_signal.connect(fails)\n-        result = a_signal.send_robust(sender=self, val=\"test\")\n+\n+        with self.assertLogs('django.dispatch', 'ERROR') as cm:\n+            result = a_signal.send_robust(sender=self, val=\"test\")\n+        \n         err = result[0][1]\n         self.assertIsInstance(err, ValueError)\n         self.assertEqual(err.args, ('this',))\n         self.assertTrue(hasattr(err, '__traceback__'))\n         self.assertIsInstance(err.__traceback__, TracebackType)\n+\n+        # Check log\n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(),\n+            f\"Error calling {fails.__name__} in Signal.send_robust() (this)\"\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        _, exc_value, _ = log_record.exc_info\n+        self.assertIsInstance(exc_value, ValueError)\n+        self.assertEqual(str(exc_value), 'this')\n+\n         a_signal.disconnect(fails)\n         self.assertTestIsClean(a_signal)\n \n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..4d583f1 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -401,6 +401,14 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             pass\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+    def test_inherited_explicit_pk_no_warning(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n     def test_explicit_pk(self):\n         class Model(models.Model):\n@@ -414,4 +422,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..13d2896 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -307,4 +307,48 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Prepare the queryset and ModelChoiceField for the test.\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        # Test that an invalid choice shows the value in the error message.\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n+    def test_modelchoicefield_with_integer(self):\n+        # Test case where invalid choice is an integer.\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': 'Choice \"%(value)s\" is not valid.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['Choice \"999\" is not valid.'],\n+            f.clean,\n+            999,\n+        )\n+\n+    def test_modelmultiplechoicefield_value_placeholder(self):\n+        # Prepare the queryset and ModelMultipleChoiceField for the test.\n+        f = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not valid.',\n+            },\n+        )\n+        # Test that an invalid choice in a list shows the value in the error message.\n+        self.assertFormErrors(\n+            ['\"not_valid\" is not valid.'],\n+            f.clean,\n+            ['not_valid'],\n+        )\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..6734c0a 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,5 +1,7 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n+from django.test import SimpleTestCase\n \n \n class QTests(SimpleTestCase):\n@@ -16,6 +18,17 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n+    def test_non_pickleable_dict_keys_with_or(self):\n+        # Test combining Q objects with | when using non-pickleable objects like dict_keys\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+    def test_non_pickleable_dict_keys_with_and(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..0fa2718 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -794,6 +794,32 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n+    def test_q_and_exists_combination(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test Exists & Q combinations\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=10)),\n+            [self.example_inc.ceo],\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=10) & Exists(is_ceo)),\n+            [self.example_inc.ceo],\n+        )\n+\n+        # Test Exists | Q combinations\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) | Q(salary__lt=15)),\n+            [self.example_inc.ceo, self.max],\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_ceo)),\n+            [self.example_inc.ceo, self.max],\n+        )\n+\n     def test_boolean_expression_combined(self):\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..942d2dd 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1137,7 +1137,7 @@ class ResolverMatchTests(SimpleTestCase):\n         request = HttpRequest()\n         self.assertIsNone(request.resolver_match)\n \n-    def test_repr(self):\n+    def test_repr(self):  # Existing test case\n         self.assertEqual(\n             repr(resolve('/no_kwargs/42/37/')),\n             \"ResolverMatch(func=urlpatterns_reverse.views.empty_view, \"\n@@ -1146,6 +1146,11 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import path, resolve\n+from django.test import SimpleTestCase, override_settings\n+from urlpatterns_reverse import views\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..fd1d57b 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -74,7 +75,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    class MyBigAutoField(models.BigAutoField):\n+        pass\n+\n+    class MySmallAutoField(models.SmallAutoField):\n+        pass\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n         class Model(models.Model):\n@@ -91,7 +112,27 @@ class TestDefaultPK(SimpleTestCase):\n         m2m_pk = M2MModel._meta.get_field('m2m').remote_field.through._meta.pk\n         self.assertIsInstance(m2m_pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    class MyBigAutoField(models.BigAutoField):\n+        pass\n+\n+    class MySmallAutoField(models.SmallAutoField):\n+        pass\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_m2m_app_default_auto_field(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..d59bff5 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2206,7 +2206,15 @@ class StartApp(AdminScriptTestCase):\n             \"another directory.\"\n         )\n \n-    def test_overlaying_app(self):\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Ensure startapp works with a trailing slash in the app directory name.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app_with_trailing_slash')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app_with_trailing_slash', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n         # Use a subdirectory so it is outside the PYTHONPATH.\n         os.makedirs(os.path.join(self.test_dir, 'apps/app1'))\n         self.run_django_admin(['startapp', 'app1', 'apps/app1'])\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..cea707b 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -2,6 +2,7 @@ import datetime\n import re\n from unittest import mock\n \n+from django.forms import forms\n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n     PasswordResetForm, ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget,\n@@ -1020,7 +1021,18 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_label_for_ReadOnlyPasswordHashWidget(self):\n+        \"\"\"\n+        Test that the label for ReadOnlyPasswordHashWidget does not\n+        include a 'for' attribute since it is not labelable.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        self.assertIsNone(bound_field.field.widget.id_for_label('id'))\n+        expected_label = '<label>Hash field:</label>'\n+        self.assertEqual(bound_field.label_tag(), expected_label)\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..a93e917 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,42 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_serialize_missing_import(self):\n+        \"\"\"\n+        Tests that the migration writer correctly serializes a model with the necessary imports,\n+        specifically ensuring models is imported when used as a base.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+        \n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        fields = {\n+            'name': MyField(primary_key=True),\n+        }\n+\n+        options = {\n+            'abstract': False,\n+        }\n+\n+        bases = (MyMixin, MyBaseModel)\n+        \n+        migration_writer = MigrationWriter()\n+        serialized_model = migration_writer.serialize(bases)\n+\n+        # Check if 'from django.db import models' is present in the serialized output\n+        self.assertIn(\"from django.db import models\", serialized_model[2])\n+        # Important part of the serialized result which caused the issue\n+        self.assertIn(\"models.Model\", serialized_model[0])\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..bc7dfde 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        \n+        # Ensuring that non-form error has the 'nonform' class.\n+        error_list_html = str(formset.non_form_errors(as_text=False))\n+        self.assertIn('<ul class=\"errorlist nonform\">', error_list_html)\n+        self.assertIn('<li>Please submit at most 1 form.</li>', error_list_html)\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -360,6 +365,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n \n+        # Ensuring that non-form error has the 'nonform' class.\n+        error_list_html = str(formset.non_form_errors(as_text=False))\n+        self.assertIn('<ul class=\"errorlist nonform\">', error_list_html)\n+        self.assertIn('<li>Please submit at least 3 forms.</li>', error_list_html)\n+\n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n         min_num validation doesn't consider unchanged forms with initial data\n@@ -984,6 +994,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n+        # Ensuring that non-form error has the 'nonform' class.\n+        error_list_html = str(formset.non_form_errors(as_text=False))\n+        self.assertIn('<ul class=\"errorlist nonform\">', error_list_html)\n+        self.assertIn('<li>You may only specify a drink once.</li>', error_list_html)\n+\n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..0eadcc8 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -292,6 +292,38 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[PAGINATOR_SIZE:]],\n             'pagination': {'more': False},\n         })\n+    \n+    def test_autocomplete_serialize_result_customization(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'notes': obj.notes,  # Added field for testing\n+                }\n+        \n+        # Creating test data with the 'notes' attribute\n+        question1 = Question.objects.create(question='Question 1', notes='First note')\n+        question2 = Question.objects.create(question='Question 2', notes='Second note')\n+        \n+        request = self.factory.get(self.url, {'term': 'Question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        \n+        expected_results = [\n+            {'id': str(question1.pk), 'text': question1.question, 'notes': 'First note'},\n+            {'id': str(question2.pk), 'text': question2.question, 'notes': 'Second note'},\n+        ]\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': expected_results,\n+            'pagination': {'more': False},\n+        })\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[PAGINATOR_SIZE:]],\n+            'pagination': {'more': False},\n+        })\n \n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..5813ecd 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,7 +426,46 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+from functools import partial, wraps\n+from django.utils.decorators import method_decorator\n+from django.test import TestCase\n+\n+class PreserveWrapperAssignmentsTests(TestCase):\n+    def test_partial_function_attributes_preserved(self):\n+        \"\"\"\n+        Tests that a method decorated with a decorator does not lose its __name__ \n+        or __module__ attributes when the original function is a partial object.\n+        \"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def simple_decorator(func):\n+            @wraps(func)\n+            def wrapper(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return wrapper\n+\n+        # Define a partial function which will lack direct `__name__`\n+        def original_function(a, b):\n+            return a + b\n+\n+        partial_func = partial(original_function, 1)\n+\n+        class Test:\n+            @method_decorator(simple_decorator)\n+            def method(self, b):\n+                return partial_func(b)\n+\n+        # Call the method to trigger the decorator\n+        instance = Test()\n+        result = instance.method(2)\n+\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+        self.assertEqual(result, 3)\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..d8a9d37 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,7 +5085,43 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n-    def test_change_form_renders_correct_null_choice_value(self):\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test that the readonly ForeignKey field links are correct in the default admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 2',\n+            content='content',\n+            book=Book.objects.create(name='Book 2'),\n+        )\n+        language = Language.objects.create(iso='_50', name='Default Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+        response = self.client.get(reverse('admin:admin_views_readonlyrelatedfield_change', args=(obj.pk,)))\n+        expected_url = reverse('admin:admin_views_language_change', args=[language.pk])\n+        self.assertContains(response, f'href=\"{expected_url}\"', msg_prefix=\"Default admin site ForeignKey link should use the correct URL.\")\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that the readonly ForeignKey field links are correct in the custom admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 3',\n+            content='content',\n+            book=Book.objects.create(name='Book 3'),\n+        )\n+        language = Language.objects.create(iso='_60', name='Custom Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+        response = self.client.get(reverse('site2:admin_views_readonlyrelatedfield_change', args=(obj.pk,)))\n+        expected_url = reverse('site2:admin_views_language_change', args=[language.pk])\n+        self.assertContains(response, f'href=\"{expected_url}\"', msg_prefix=\"Custom admin site ForeignKey link should use the correct URL.\")\n         \"\"\"\n         Regression test for #17911.\n         \"\"\"\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..3f7829c 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,20 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_model_choice_iterator_value_hashable(self):\n+        \"\"\"Test that ModelChoiceIteratorValue is hashable and behaves correctly.\"\"\"\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_1_duplicate = ModelChoiceIteratorValue(self.c1.pk, None) # Simulate the same value\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Verify that the same value gives the same hash\n+        self.assertEqual(hash(value_1), hash(value_1_duplicate))\n+        # Verify that different values give different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+        # Additionally, ensure that ModelChoiceIteratorValue can be used as dictionary keys\n+        test_dict = {value_1: \"first\", value_2: \"second\"}\n+        self.assertEqual(test_dict[value_1_duplicate], \"first\")\n+        self.assertEqual(test_dict[value_2], \"second\")\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..e691060 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,7 +154,11 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n-    def test_form_as_table_data(self):\n+    def test_multivaluefield_label_without_index(self):\n+        form = ComplexFieldForm()\n+        html_output = form.as_table()\n+        self.assertIn('<th><label for=\"id_field1_0\">Field1:</label></th>', html_output)\n+        self.assertNotIn('<label>Field1:</label></th>', html_output)  # Ensuring no label without \"for\"\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..202ab83 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,6 +70,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            # URL with malformed IPv6 that currently causes ValueError\n+            '////]@N.AN',\n+            '#@A.bO',\n         ]\n         for url, expected in tests:\n             with self.subTest(url=url):\n@@ -100,6 +103,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # URL with malformed IPv6 that currently causes ValueError\n+            '////]@N.AN',\n+            '#@A.bO',\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..7ce8ce2 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -757,18 +757,32 @@ class NonAggregateAnnotationTestCase(TestCase):\n             {'pubdate__year': 2008, 'top_rating_year': 4.0},\n         ])\n \n-    def test_annotation_aggregate_with_m2o(self):\n-        qs = Author.objects.filter(age__lt=30).annotate(\n-            max_pages=Case(\n-                When(book_contact_set__isnull=True, then=Value(0)),\n-                default=Max(F('book__pages')),\n-            ),\n-        ).values('name', 'max_pages')\n-        self.assertCountEqual(qs, [\n-            {'name': 'James Bennett', 'max_pages': 300},\n-            {'name': 'Paul Bissex', 'max_pages': 0},\n-            {'name': 'Wesley J. Chun', 'max_pages': 0},\n-        ])\n+    def test_expression_not_q_with_empty_list(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_expression_not_q_with_no_books(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=Book.objects.none()), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_expression_not_q_with_aggregation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1, 1, 1, 1, 1, 1])\n+\n+    def test_aggregate_over_expression_not_q(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n \n \n class AliasTests(TestCase):\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..f32bacf 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -163,7 +164,18 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_extra_tags_preservation(self):\n+        \"\"\"\n+        A message's extra_tags attribute is correctly preserved when retrieved\n+        from the message storage.\n+        \"\"\"\n+        storage = self.storage_class(self.get_request())\n+        for extra_tags in ['', None, 'some tags']:\n+            with self.subTest(extra_tags=extra_tags):\n+                message = Message(constants.INFO, 'Test message', extra_tags=extra_tags)\n+                encoded_message = storage._encode(message)\n+                decoded_message = storage._decode(encoded_message)\n+                self.assertEqual(decoded_message.extra_tags, extra_tags)\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..59cece1 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,37 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that was_modified_since returns True when the If-Modified-Since header is an empty string.\n+        \"\"\"\n+        mtime = 1\n+        self.assertTrue(was_modified_since(header=\"\", mtime=mtime))\n+\n+    def test_was_modified_since_with_correct_date(self):\n+        \"\"\"\n+        Test that was_modified_since returns False when the header date matches the mtime.\n+        \"\"\"\n+        mtime = 1609459200  # Corresponds to 'Fri, 01 Jan 2021 00:00:00 GMT'\n+        header = http_date(mtime)\n+        self.assertFalse(was_modified_since(header, mtime))\n+\n+    def test_was_modified_since_with_earlier_date(self):\n+        \"\"\"\n+        Test that was_modified_since returns True when the header date is before the mtime.\n+        \"\"\"\n+        mtime = 1609459200  # Corresponds to 'Fri, 01 Jan 2021 00:00:00 GMT'\n+        earlier_header = http_date(mtime - 3600)  # One hour before\n+        self.assertTrue(was_modified_since(earlier_header, mtime))\n+\n+    def test_was_modified_since_with_later_date(self):\n+        \"\"\"\n+        Test that was_modified_since returns False when the header date is after the mtime.\n+        \"\"\"\n+        mtime = 1609459200  # Corresponds to 'Fri, 01 Jan 2021 00:00:00 GMT'\n+        later_header = http_date(mtime + 3600)  # One hour later\n+        self.assertFalse(was_modified_since(later_header, mtime))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..52211f2 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -410,13 +411,27 @@ class CommandTests(SimpleTestCase):\n         epilog = \"some epilog text\"\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n-\n-    def test_outputwrapper_flush(self):\n-        out = StringIO()\n-        with mock.patch.object(out, \"flush\") as mocked_flush:\n-            management.call_command(\"outputwrapper\", stdout=out)\n-        self.assertIn(\"Working...\", out.getvalue())\n-        self.assertIs(mocked_flush.called, True)\n+    \n+    def test_custom_formatter_help_text(self):\n+        \"\"\"\n+        Test that BaseCommand's help text retains newline formatting in the example usage.\n+        \"\"\"\n+        help_text = '''\n+        Import a contract from tzkt.\n+        Example usage:\n+            ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+        '''\n+        command = BaseCommand()\n+        command.help = help_text\n+        parser = command.create_parser(\"manage.py\", \"tzkt_import\")\n+        \n+        # Capture the help output\n+        with mock.patch('sys.stdout', new_callable=StringIO) as mock_stdout:\n+            parser.print_help()\n+            help_output = mock_stdout.getvalue()\n+\n+        # Check that the help output retains the newline before 'Example usage:'\n+        self.assertIn(\"Example usage:\\n    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\", help_output)\n \n \n class CommandRunTests(AdminScriptTestCase):\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..f880e1d 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,11 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -217,6 +220,26 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        class CustomJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"custom\": \"encoding\"})\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"encoding\"}</script>',\n+        )\n+\n+    def test_json_script_with_special_characters(self):\n+        class SpecialCharsJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"special\": \"<>&\"})\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=SpecialCharsJSONEncoder),\n+            '<script type=\"application/json\">{\"special\": \"\\\\u003C\\\\u003E\\\\u0026\"}</script>',\n+        )\n+        \n     def test_smart_urlquote(self):\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..bd42f1b 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -119,6 +119,19 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             id=E003.id,\n         )\n \n+    @override_settings(\n+        INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n+    )\n+    def test_template_tags_same_library_in_installed_apps_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n     @staticmethod\n     def get_settings(module_name, module_path):\n         return {\n@@ -142,6 +155,19 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             [self.error_same_tags],\n         )\n \n+    @override_settings(\n+        INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n+    )\n+    def test_template_tags_same_library_in_installed_apps_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n     def test_template_tags_with_same_library_name(self):\n         with self.settings(\n             TEMPLATES=[\n@@ -206,4 +232,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..6c1cc1a 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,10 +395,25 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n-    def test_eq(self):\n+    def test_select_related_only_with_proxy(self):\n+        # Create instances of models\n+        user = ProxyCustomModel.objects.create(name=\"Jane Doe\")\n+        another_instance = AnotherModel.objects.create(custom=user)\n+        \n+        # Using select_related and only() to fetch and check data without error\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        fetched_instance = qs.get()\n+\n+        # Assertions to ensure the queryset retrieves the correct object\n+        self.assertEqual(fetched_instance.custom.name, \"Jane Doe\")\n+        self.assertEqual(fetched_instance, another_instance)\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from django.core.management import call_command\n+from .models import ProxyTrackerUser, Issue, ProxyCustomModel, CustomModel, AnotherModel\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 55aff39..bd505d5 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -1,3 +1,4 @@\n+\n import signal\n \n from django.db.backends.base.client import BaseDatabaseClient\n@@ -32,6 +33,7 @@ class DatabaseClient(BaseDatabaseClient):\n             args += [\"-h\", host]\n         if port:\n             args += [\"-p\", str(port)]\n+        args.extend(parameters)\n         if dbname:\n             args += [dbname]\n         args.extend(parameters)\n@@ -61,4 +63,4 @@ class DatabaseClient(BaseDatabaseClient):\n             super().runshell(parameters)\n         finally:\n             # Restore the original SIGINT handler.\n-            signal.signal(signal.SIGINT, sigint_handler)\n+            signal.signal(signal.SIGINT, sigint_handler)\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..2ddc647 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,6 +1901,33 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.test import SimpleTestCase\n+        from django.forms.formsets import formset_factory, BaseFormSet\n+        from django.forms import Form\n+        from django.forms.fields import ChoiceField\n+        from django.forms.renderers import get_default_renderer\n+        from unittest.mock import MagicMock\n+        from django.utils.lru_cache import lru_cache\n+        class Choice(Form):\n+            choice_field = ChoiceField(choices=[(1, \"One\"), (2, \"Two\")])\n+\n+        class ManagementFormDeprecationTest(SimpleTestCase):\n+            def test_no_management_form_warning(self):\n+                \"\"\"\n+                Test that no deprecation warning is raised for management forms.\n+                The management form should render without raising the default.html\n+                deprecation warning.\n+                \"\"\"\n+                with self.subTest(\"Rendering management form of a formset should not issue a warning\"):\n+                    with self.settings(FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"):\n+                        ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                        formset = ChoiceFormSet()\n+                        # Simulating rendering of management form\n+                        with isolate_lru_cache(get_default_renderer), self.assertRaisesMessage(\n+                            RemovedInDjango50Warning, \"\"\n+                        ):\n+                            rendered_management_form = str(formset.management_form)\n+                            self.assertIn('input type=\"hidden\"', rendered_management_form)\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1936,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..74b2a1d 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -179,7 +179,17 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n \n-    def test_formset_validation(self):\n+    def test_empty_permitted_ignored_empty_form_with_true(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        # Ensure no KeyError and empty_permitted should be True by default\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+        \n+    def test_empty_permitted_ignored_empty_form_with_false(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        # Ensure no KeyError and empty_permitted should be True by default\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n         formset = self.make_choiceformset([(\"Calexico\", \"\")])\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..69548f7 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,18 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty_string(self):\n+        # Test the nformat function with an empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        \n+    def test_none_value(self):\n+        # Test the nformat function with a None value, expecting a string \"None\"\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_negative_number_given_as_string(self):\n+        # Test the nformat function with negative numbers provided as strings\n+        self.assertEqual(nformat(\"-1234\", \".\"), \"-1234\")\n+        self.assertEqual(nformat(\"-1234.56\", \".\", decimal_pos=1), \"-1234.5\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..33ce325 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -26,11 +27,47 @@ from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n \n+from django.urls import reverse\n from .models.custom_user import (\n     CustomUser,\n     CustomUserWithoutIsActiveField,\n     ExtensionUser,\n )\n+import urllib.parse\n+# Add necessary imports here\n+\n+class UserAdminToFieldTestCase(TestCase):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_useradmin_password_reset_link_via_to_field(self):\n+        # Create a test user with a UUID\n+        user = User.objects.create_user(username=\"testclient\", password=\"testpass\", uuid=\"22222222-3333-4444-5555-666677778888\")\n+        \n+        # Load form associated with the user instance\n+        form = UserChangeForm(instance=user)\n+        \n+        # Extract the help text for the password field\n+        password_help_text = form.fields[\"password\"].help_text\n+\n+        # Use regex to match the first URL in the help text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # Construct the URL relative to the admin user change path via `to_field`\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),\n+            current_app='auth',\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        # Expected URL to the PasswordChangeForm\n+        expected_pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+            current_app='auth',\n+        )\n+\n+        # Validate that the constructed URL matches the expected URL\n+        self.assertEqual(joined_url, expected_pw_change_url)\n from .models.with_custom_email_field import CustomEmailField\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..6173f7a 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -505,6 +505,17 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"</urlset>\"\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_lastmod_with_empty_items(self):\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..9aad865 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,9 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from django.core.cache import cache\n+from unittest import mock, TestCase\n import io\n import os\n import pickle\n@@ -1762,8 +1765,21 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n         with open(cache_file, \"rb\") as fh:\n             self.assertIs(cache._is_expired(fh), True)\n \n-\n-@unittest.skipUnless(RedisCache_params, \"Redis backend not configured\")\n+    def test_has_key_race_handling_with_threads(self):\n+        self.assertIs(cache.add(\"concurrent_key\", \"value\"), True)\n+        \n+        def access_cache():\n+            try:\n+                _ = cache.has_key(\"concurrent_key\")\n+            except FileNotFoundError:\n+                self.fail(\"has_key raised FileNotFoundError unexpectedly!\")\n+        \n+        # Create multiple threads to access the same key\n+        threads = [threading.Thread(target=access_cache) for _ in range(10)]\n+        for thread in threads:\n+            thread.start()\n+        for thread in threads:\n+            thread.join()\n @override_settings(\n     CACHES=caches_setting_for_tests(\n         base=RedisCache_params,\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..3ef0759 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -10,7 +11,8 @@ from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n-from .tests import AdminViewBasicTestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import AdminViewBasicTestCase, get_perm\n \n \n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..e11536b 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -76,6 +77,13 @@ class FunctionTests(SimpleTestCase):\n         obj = object()\n         self.assertEqual(join(obj, \"<br>\"), obj)\n \n-    def test_noniterable_arg_autoescape_off(self):\n+    \n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        var_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        context = {\"a\": var_list, \"var\": \"<br/>\"}\n+        output = self.engine.render_to_string(\"join_autoescape_off\", context)\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..13503be 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -728,6 +728,32 @@ class BulkCreateTests(TestCase):\n     def test_update_conflicts_unique_two_fields_unique_no_unique_fields(self):\n         self._test_update_conflicts_unique_two_fields([])\n \n+    @skipUnlessDBFeature(\n+        \"supports_update_conflicts\", \"can_return_rows_from_bulk_insert\"\n+    )\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        instances = [\n+            TwoFields(f1=1, f2=1, name=\"test1\"),\n+            TwoFields(f1=2, f2=2, name=\"test2\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(instances)\n+        for result in results:\n+            self.assertIsNotNone(result.pk)\n+\n+        # Update with conflicts\n+        conflicting_instances = [\n+            TwoFields(f1=1, f2=1, name=\"updated_test1\"),\n+            TwoFields(f1=3, f2=3, name=\"test3\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_instances,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+        for result in results:\n+            self.assertIsNotNone(result.pk)\n+\n     def _test_update_conflicts(self, unique_fields):\n         UpsertConflict.objects.bulk_create(\n             [\n@@ -816,4 +842,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..393d137 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1077,6 +1077,13 @@ def test_slider_horizontal_vertical():\n     box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n     assert_allclose(box.bounds, [.25, 0, .5, 10/24])\n \n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.widgets as widgets\n+import pytest\n+from numpy.testing import assert_allclose\n+\n+# Existing test cases\n \n def test_slider_reset():\n     fig, ax = plt.subplots()\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..b350afb 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -489,8 +489,33 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n     else:\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend\n+from matplotlib._pylab_helpers import Gcf\n+from matplotlib import rc_context\n+import sys\n+import pytest\n \n-def test_keymaps():\n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+def test_get_backend_does_not_clear_figures():\n+    # The repro steps outlined in the issue:\n+    with rc_context():\n+        fig = plt.figure()\n+\n+    # Check the state of Gcf before calling get_backend()\n+    before = id(Gcf), Gcf.figs.copy()\n+    get_backend()\n+    # Check the state of Gcf after calling get_backend()\n+    after = id(Gcf), Gcf.figs.copy()\n+\n+    # The state of Gcf should remain the same\n+    assert before == after, (\n+        f\"Gcf was altered by get_backend()\\nBefore: {before}\\nAfter: {after}\")\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..d7fc779 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,6 +21,18 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_false_3d(fig_test, fig_ref):\n+    # Test to ensure that set_visible(False) works for 3D axes\n+\n+    # fig_test is expected to have the 3D subplot invisible\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter([1], [1], [1])\n+    ax_test.set_visible(False)\n+\n+    # fig_ref is a reference figure with no axes (producing a blank figure)\n+    fig_ref.add_subplot(projection=None)\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..1f43ef2 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,16 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='Sample data')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "",
  "matplotlib__matplotlib-23987": "",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..b26240c 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,6 +90,20 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+def test_figure_with_draggable_legend():\n+    import pickletools\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 4], label=\"Quadratic\")\n+    legend = ax.legend(draggable=True)\n+\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    # Ensure that no reference to FigureCanvasQTAgg or any GUI canvas exists in the pickle\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_ax = loaded_fig.axes[0]\n+    assert loaded_ax.get_legend() is not None\n+    assert loaded_ax.get_legend().get_draggable() is True\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
  "matplotlib__matplotlib-25332": "",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..2f26cd1 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -83,6 +83,19 @@ class TestContinuous:\n         s = Continuous(norm=(3, 7))._setup(x, IntervalProperty())\n         assert_array_equal(s(x), [-.5, 0, 1.5])\n \n+    def test_color_mapping_with_boolean(self):\n+\n+        import pandas as pd\n+        from numpy.testing import assert_array_equal\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+\n+        x = pd.Series([True, False])\n+        scale = Continuous()._setup(x, Color())\n+        result = scale(x)\n+        expected = [1, 0]\n+        assert_array_equal(result, expected)\n+\n     def test_interval_with_range_norm_and_transform(self, x):\n \n         x = pd.Series([1, 10, 100])\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..317f9dd 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,10 +1,13 @@\n+\n import json\n import os\n import textwrap\n \n import pytest\n-\n+import os\n+import pytest\n import flask\n+import tomllib\n \n \n # config keys used for the TestConfig\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..16970f5 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,38 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import requests\n+import pytest\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import DecodeError, Timeout\n+import requests.packages.urllib3.exceptions as urllib3_exceptions\n+\n+def httpbin(endpoint):\n+    \"\"\"Helper function to construct the httpbin URL.\"\"\"\n+    return f\"http://httpbin.org/{endpoint}\"\n+\n+def test_urllib3_decode_error_wrapped():\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def send(self, *args, **kwargs):\n+            raise urllib3_exceptions.DecodeError(\"mock decode error\")\n+\n+    s = requests.Session()\n+    s.mount('http://', MockHTTPAdapter())\n+\n+    with pytest.raises(DecodeError, match=\"mock decode error\"):\n+        s.get(httpbin('status/200'))\n+\n+def test_urllib3_timeout_error_wrapped():\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def send(self, *args, **kwargs):\n+            raise urllib3_exceptions.TimeoutError(\"mock timeout error\")\n+\n+    s = requests.Session()\n+    s.mount('http://', MockHTTPAdapter())\n+\n+    with pytest.raises(Timeout, match=\"mock timeout error\"):\n+        s.get(httpbin('status/200'))\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1695,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..3d1977f 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -400,9 +400,14 @@ def test_groupby_repr(obj, dim):\n         expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n \n-\n+@pytest.mark.parametrize(\"dim\", [\"x\", \"y\", \"z\", \"month\"])\n @pytest.mark.parametrize(\"obj\", [repr_da, repr_da.to_dataset(name=\"a\")])\n-def test_groupby_repr_datetime(obj):\n+def test_groupby_repr_no_trailing_whitespace(obj, dim):\n+    actual = repr(obj.groupby(dim))\n+    # Ensure that there is no trailing whitespace at the end of any line\n+    lines = actual.splitlines()\n+    for line in lines:\n+        assert line == line.rstrip(), f\"Line has trailing whitespace: '{line}'\"\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n     expected += \", grouped over 'month' \"\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..c36d846 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -60,6 +60,7 @@ def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n     output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n     assert \"Command line:1:0: E0012: Bad option value for --disable.\" in output.out\n \n \n@@ -68,6 +69,7 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n     with pytest.raises(_UnrecognizedOptionError):\n         Run([str(EMPTY_MODULE), \"--unknown-option=yes\"], exit=False)\n     output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n     assert \"E0015: Unrecognized option found: unknown-option=yes\" in output.out\n \n \n@@ -76,6 +78,7 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     with pytest.raises(_UnrecognizedOptionError):\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n@@ -84,6 +87,7 @@ def test_unknown_confidence(capsys: CaptureFixture) -> None:\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n     output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n     assert \"argument --confidence: UNKNOWN_CONFIG should be in\" in output.err\n \n \n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..73b4901 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1324,11 +1324,21 @@ class TestRunTC:\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n-                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n                 self._runtest(\n-                    [\".\", \"--recursive=y\"],\n+                    [\"src\", \"--recursive=y\", \"--ignore-paths=^gen/.*$\"],\n                     code=0,\n                 )\n+                # Further validate that the gen/ directory is ignored\n+                self._runtest(\n+                    [\"src\", \"--recursive=y\"],\n+                    code=32,  # Assuming 32 is the non-zero exit code for linting errors present in gen/\n+                )\n+                # A positive test case to not ignore any paths\n+                self._runtest(\n+                    [\"src\", \"--recursive=y\", \"--ignore-paths=\"],\n+                    code=32,  # Again, assume this results in errors from gen/ files not being ignored\n+                )\n \n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..a510704 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,36 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for identifying problems when a module has the same name as the package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"identical/identical.py\", \"identical/another.py\"])\n+        with open(\"identical/identical.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"import imp\")  # Use some arbitrary import\n+        with open(\"identical/another.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"import os\")  # Use some arbitrary import\n+        linter.check([\"identical\"])\n+    assert not linter.stats.by_msg  # Expected no errors\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for identifying problems when a module has the same name as the package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"identical/identical.py\", \"identical/another.py\"])\n+        with open(\"identical/identical.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"import imp\")  # Use some arbitrary import\n+        with open(\"identical/another.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"import os\")  # Use some arbitrary import\n+        linter.check([\"identical\"])\n+    assert not linter.stats.by_msg  # Expected no errors\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..9fc2dcf 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -112,8 +113,34 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[1] == \"my_mod:1::()\"\n     assert out_lines[2] == \"my_mod:2::()\"\n \n+from _pytest.recwarn import WarningsRecorder\n+\n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    output = StringIO()\n+    linter.reporter.out = output\n+    # Test with custom braces in the template\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"test_module\")\n+\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"R0913\", line=2, args=(3, 4))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"refactor\" }'\n+\n+def test_template_with_unrecognized_args(linter: PyLinter, recwarn: WarningsRecorder) -> None:\n+    output = StringIO()\n+    linter.reporter.out = output\n+    # Test with an unrecognized argument in the template to ensure warning is displayed\n+    linter.config.msg_template = '{path}:{line}: {unrecognized_arg}'\n+    linter.open()\n+    linter.set_current_module(\"test_module\")\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n \n-def test_deprecation_set_output(recwarn):\n+    warning = recwarn.pop(UserWarning)\n+    assert \"Don't recognize the argument 'unrecognized_arg'\" in str(warning.message)\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/acceptance_test.py b/testing/acceptance_test.py\nindex 0cc5057..2b1149b 100644\n--- a/testing/acceptance_test.py\n+++ b/testing/acceptance_test.py\n@@ -1306,6 +1306,11 @@ def test_no_brokenpipeerror_message(pytester: Pytester) -> None:\n     popen.stderr.close()\n \n \n+from pathlib import Path\n+import sys\n+import pytest\n+from pytest import Pytester\n+\n def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n@@ -1314,4 +1319,4 @@ def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     \"\"\"\n     )\n     res = pytester.runpytest()\n-    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n+    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n",
  "pytest-dev__pytest-5227": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 1ebe9d0..01f354c 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..2dd573a 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,5 +1,8 @@\n+\n import os\n from xml.dom import minidom\n+import platform\n+from datetime import datetime\n \n import py\n \n@@ -139,7 +142,29 @@ class TestPython:\n         node = dom.find_first_by_tag(\"testsuite\")\n         node.assert_attr(name=\"pytest\", errors=1, failures=2, skipped=1, tests=5)\n \n-    def test_timing_function(self, testdir):\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n         testdir.makepyfile(\n             \"\"\"\n             import time, pytest\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..487e26f 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,34 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with broken __getattribute__ and __repr__.\"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_broken_repr_and_getattribute():\n+    \"\"\"Test saferepr handling when both __getattribute__ and __repr__ raise exceptions.\"\"\"\n+    class AnotherClass:\n+        def __getattribute__(self, attr):\n+            if attr == \"__class__\":\n+                return object.__getattribute__(self, attr)\n+            raise AttributeError(\"simulating broken getattribute\")\n+        \n+        def __repr__(self):\n+            raise ValueError(\"simulating repr error\")\n+\n+    assert saferepr(AnotherClass()).startswith(\n+        \"<[ValueError('simulating repr error') raised in repr()] AnotherClass object at 0x\"\n+    )\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +181,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..7149156 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,7 @@\n import os\n import sys\n+import os\n+\n from unittest import mock\n \n import pytest\n@@ -707,7 +709,35 @@ class TestFunctional:\n         reprec.assertoutcome(skipped=1)\n \n \n-class TestKeywordSelection:\n+class TestCachingEvaluation:\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360 - Test the fix for caching of skipif/xfail conditions.\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert False\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert False\n+        \"\"\"\n+        )\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=0, skipped=1, failed=1)\n     def test_select_simple(self, testdir):\n         file_test = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..08fda4e 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -153,6 +153,28 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n+class TestSkipWithRunXFail:\n+    @pytest.mark.parametrize(\n+        \"test_input, expected\", \n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_reporting_with_runxfail(self, testdir, test_input, expected):\n+        # Create a test file with a skipped test\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        # Run pytest with the specified input and match the output against the expected lines\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..7fd84ac 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -153,7 +154,42 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n+from _pytest.pytester import Testdir\n+\n class TestXFail:\n+    def test_dynamic_xfail_during_test_failure_and_xfail(self, testdir: Testdir):\n+        \"\"\"\n+        Test case to ensure dynamically added xfail behaves as expected in a test that fails.\n+        \"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0  # This should be xfailed\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p, \"-rx\")\n+        # We expect an xfail\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_during_test_pass_and_strict(self, testdir: Testdir):\n+        \"\"\"\n+        Test case to ensure dynamically added xfail behaves as expected in a test that passes with strict.\n+        \"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                assert 1  # This should trigger a strict xfail since the test passes\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p, \"-rx\")\n+        # We expect a failure due to strict xfail\n+        result.assert_outcomes(failed=1)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..1225971 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -19,7 +20,8 @@ from _pytest.pathlib import on_rm_rf_error\n from _pytest.pathlib import register_cleanup_lock_removal\n from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n-from _pytest.tmpdir import get_user\n+from _pytest.monkeypatch import MonkeyPatch\n+from _pytest.tmpdir import get_user, TempPathFactory\n from _pytest.tmpdir import TempdirFactory\n from _pytest.tmpdir import TempPathFactory\n \n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..879e55f 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,6 +597,18 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    import numpy as np\n+    from sklearn.linear_model import RidgeClassifierCV\n+    from sklearn.utils._testing import assert_raises\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+    alphas = [1e-1, 1e0, 1e1]\n+\n+    # We expect a TypeError because store_cv_values is not a valid parameter.\n+    assert_raises(TypeError, RidgeClassifierCV, alphas=alphas, store_cv_values=True)\n+\n \n def test_ridgecv_sample_weight():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..5dafbff 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -3,7 +3,7 @@\n # License: BSD 3 clause\n \n import numpy as np\n-from scipy.special import gammaln\n+from sklearn.utils.testing import assert_array_equal\n \n from sklearn.utils.testing import assert_raise_message\n from sklearn.utils.testing import assert_almost_equal\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..47b51ba 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,44 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+import numpy as np\n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_handle_known_and_unknown_strings():\n+    X = np.array(['short', 'mediumlength', 'veryverylong']).reshape(-1, 1)\n+    X2 = np.array(['unknown', 'short']).reshape(-1, 1)\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    transformed = oh.transform(X2).toarray()\n+    expected = np.array([[0., 0., 0.], [1., 0., 0.]])\n+    assert_array_equal(transformed, expected)\n+\n+def test_one_hot_encoder_all_unknown_strings():\n+    X = np.array(['cat', 'dog', 'fish']).reshape(-1, 1)\n+    X2 = np.array(['tiger', 'lion']).reshape(-1, 1)\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    transformed = oh.transform(X2).toarray()\n+    expected = np.array([[0., 0., 0.], [0., 0., 0.]])\n+    assert_array_equal(transformed, expected)\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..2c4d2ba 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..f4289c2 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..e8340fb 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,30 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+    # Additional test cases based on the described issue\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test with a boolean mask for discrete_features\n+        mi_bool_mask = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        mi_bool_mask_csr = mutual_info(X_csr, y, discrete_features=[True, False, True], random_state=0)\n+        assert_array_equal(mi_bool_mask, mi_5)        # mi_5 generated in previous patch\n+\n+        # Test with an array of indices for discrete_features\n+        mi_indices = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        assert_array_equal(mi_indices, mi_6)          # mi_6 generated in previous patch\n+\n+        # Test errors with mismatched array size for discrete features\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False, True, False])\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n+\n+        # Test handling an empty feature mask\n+        assert_raises(ValueError, mutual_info, X, y, discrete_features=[])\n+\n+        # Edge case: Test with all features marked as discrete\n+        mi_all_discrete = mutual_info(X, y, discrete_features=[True, True, True], random_state=0)\n+        assert np.any(mi_all_discrete)  # Check that MI is computed to some extent\n+\n+        # Edge case: Test with all features marked as continuous\n+        mi_all_continuous = mutual_info(X, y, discrete_features=[False, False, False], random_state=0)\n+        assert np.all(mi_all_continuous >= 0)  # MI values should be non-negative\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..a538488 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,9 +1,12 @@\n+\n import re\n from pprint import PrettyPrinter\n \n import numpy as np\n-\n from sklearn.utils._pprint import _EstimatorPrettyPrinter\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn import set_config\n+import numpy as np\n from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n@@ -214,8 +217,15 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n-\n-def test_pipeline():\n+def test_logistic_regression_cv_array():\n+    \"\"\"Test that LogisticRegressionCV with an array for Cs does not raise an error\"\"\"\n+    set_config(print_changed_only=True)\n+    try:\n+        repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    except ValueError as e:\n+        raise AssertionError(f\"Unexpected ValueError raised: {e}\")\n+    finally:\n+        set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..092092d 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -7,6 +8,8 @@ from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.exceptions import NotFittedError\n from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..e1cc162 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -511,8 +511,35 @@ def test_expected_transformation_shape():\n     nca.fit(X, y)\n     assert_equal(transformation_storer.transformation.size, X.shape[1]**2)\n \n+import pytest\n+import numpy as np\n+from sklearn.utils.testing import assert_raises, assert_raise_message\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+from sklearn.exceptions import ConvergenceWarning\n \n-def test_convergence_warning():\n+def test_valid_parameters_gridsearch():\n+    # Validate that parameters like tol and n_components handle numpy integer/float types within a GridSearch\n+    from sklearn.model_selection import GridSearchCV\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.neighbors import KNeighborsClassifier\n+    \n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+                \n+    params = {'nca__tol': [0.1, 0.5, np.float32(1)],  # Use np.float32 to check the tolerance for type\n+              'nca__n_components': np.arange(1, 10, dtype=np.int32)}  # np.int32 for n_components\n+          \n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    try:\n+        gs.fit(X, y)\n+        print(\"Test passed: GridSearchCV handled parameter types successfully.\")\n+    except TypeError as e:\n+        print(\"Test failed:\", e)\n     nca = NeighborhoodComponentsAnalysis(max_iter=2, verbose=1)\n     cls_name = nca.__class__.__name__\n     assert_warns_message(ConvergenceWarning,\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..64e649e 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,23 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for ZeroDivisionError with sparse data and empty support_vectors_\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..ef0a137 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,8 +972,15 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n-def test_repeated_cv_value_errors():\n+import pytest\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_kfold_repr(RepeatedCV):\n+    \"\"\"Test __repr__ output for RepeatedKFold and RepeatedStratifiedKFold.\"\"\"\n+    n_splits, n_repeats = 2, 3\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    expected_repr = '{}(n_repeats=3, n_splits=2, random_state=None)'.format(repeated_cv.__class__.__name__)\n+    \n+    assert repr(repeated_cv) == expected_repr\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n         assert_raises(ValueError, cv, n_repeats=0)\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..ea02e98 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -5,7 +6,12 @@ import copy\n \n import pytest\n \n-from sklearn.datasets import make_regression\n+from sklearn.datasets import make_regression, make_classification\n+from sklearn.linear_model import SGDClassifier\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn import set_config\n+from sklearn.exceptions import NotFittedError\n+from sklearn.utils._testing import assert_allclose\n from sklearn.isotonic import (\n     check_increasing,\n     isotonic_regression,\n@@ -668,7 +674,32 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_cv_with_isotonic():\n+    \"\"\"Test CalibratedClassifierCV with isotonic method under pandas output.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    X, y = make_classification(n_samples=100, n_features=2, random_state=42)\n+    \n+    base_estimator = SGDClassifier(loss=\"log_loss\")\n+    calibrator = CalibratedClassifierCV(base_estimator=base_estimator, method='isotonic', cv=2)\n+    \n+    with set_config(transform_output=\"pandas\"):\n+        calibrator.fit(X, y)\n+        probas = calibrator.predict_proba(X)\n+    \n+    assert isinstance(probas, (np.ndarray, pd.DataFrame))\n+    assert probas.shape == (100, len(np.unique(y)))\n+    assert_allclose(probas.sum(axis=1), 1, atol=1e-5)\n+\n+\n+def test_calibrated_classifier_cv_raises_not_fitted_error():\n+    \"\"\"Test that predict raises NotFittedError if classifier is not fitted.\"\"\"\n+    X, _ = make_classification(n_samples=10, n_features=2, random_state=42)\n+    \n+    base_estimator = SGDClassifier(loss=\"log_loss\")\n+    calibrator = CalibratedClassifierCV(base_estimator=base_estimator, method='isotonic', cv=2)\n+    \n+    with pytest.raises(NotFittedError):\n+        calibrator.predict_proba(X)\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "diff --git a/tests/test_environment_indexentries.py b/tests/test_environment_indexentries.py\nindex 9775484..389609d 100644\n--- a/tests/test_environment_indexentries.py\n+++ b/tests/test_environment_indexentries.py\n@@ -16,6 +16,35 @@ from sphinx.testing import restructuredtext\n \n @pytest.mark.sphinx('dummy', freshenv=True)\n def test_create_single_index(app):\n+    text = (\".. index:: docutils\\n\"\n+            \".. index:: Python\\n\"\n+            \".. index:: pip; install\\n\"\n+            \".. index:: pip; upgrade\\n\"\n+            \".. index:: Sphinx\\n\"\n+            \".. index:: \u0415\u043b\u044c\\n\"\n+            \".. index:: \u0451\u043b\u043a\u0430\\n\"\n+            \".. index:: \u200f\u05ea\u05d9\u05e8\u05d1\u05e2\u200e\\n\"\n+            \".. index:: 9-symbol\\n\"\n+            \".. index:: &-symbol\\n\"\n+            \".. index:: @username\\n\"\n+            \".. index:: \u00a3currency\\n\"\n+            \".. index:: \u2190left-arrow\\n\")\n+    restructuredtext.parse(app, text)\n+    index = IndexEntries(app.env).create_index(app.builder)\n+    assert len(index) == 6  # Ensure there are six sections\n+    assert index[0] == ('Symbols', [('&-symbol', [[('', '#index-9')], [], None]),\n+                                    ('9-symbol', [[('', '#index-8')], [], None]),\n+                                    ('@username', [[('', '#index-10')], [], None]),\n+                                    ('\u00a3currency', [[('', '#index-11')], [], None]),\n+                                    ('\u2190left-arrow', [[('', '#index-12')], [], None])])\n+    assert index[1] == ('D', [('docutils', [[('', '#index-0')], [], None])])\n+    assert index[2] == ('P', [('pip', [[], [('install', [('', '#index-2')]),\n+                                            ('upgrade', [('', '#index-3')])], None]),\n+                              ('Python', [[('', '#index-1')], [], None])])\n+    assert index[3] == ('S', [('Sphinx', [[('', '#index-4')], [], None])])\n+    assert index[4] == ('\u0415', [('\u0451\u043b\u043a\u0430', [[('', '#index-6')], [], None]),\n+                               ('\u0415\u043b\u044c', [[('', '#index-5')], [], None])])\n+    assert index[5] == ('\u05ea', [('\u200f\u05ea\u05d9\u05e8\u05d1\u05e2\u200e', [[('', '#index-7')], [], None])])\n     text = (\".. index:: docutils\\n\"\n             \".. index:: Python\\n\"\n             \".. index:: pip; install\\n\"\n",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 21b6a7e..50ebb0d 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -684,6 +684,56 @@ def test_autodoc_typehints_description(app):\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases_for_variables_and_attributes(app):\n+    # define aliases\n+    app.config.autodoc_type_aliases = {'String': 'example.MyString'}\n+    \n+    example_module_content = \"\"\"\n+    from __future__ import annotations\n+\n+    #: var docstring\n+    var: String\n+\n+    class MyString:\n+        \"class docstring\"\n+        #: attr docstring\n+        var: String\n+    \"\"\"\n+    \n+    options = {\"members\": None, \"undoc-members\": True}\n+    \n+    # Mock `example` module content\n+    with open(app.srcdir / 'example.py', 'w') as f:\n+        f.write(example_module_content)\n+    \n+    actual = do_autodoc(app, 'module', 'example', options)\n+    \n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: example',\n+        '',\n+        '',\n+        '.. py:data:: var',\n+        '   :module: example',\n+        '   :type: example.MyString',\n+        '',\n+        '   var docstring',\n+        '',\n+        '',\n+        '.. py:class:: MyString',\n+        '   :module: example',\n+        '',\n+        '   class docstring',\n+        '',\n+        '   .. py:attribute:: MyString.var',\n+        '      :module: example',\n+        '      :type: example.MyString',\n+        '',\n+        '      attr docstring',\n+        '',\n+    ]\n+\n def test_autodoc_typehints_description_for_invalid_node(app):\n     text = \".. py:function:: hello; world\"\n     restructuredtext.parse(app, text)  # raises no error\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..71b0ec2 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,40 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+import pytest\n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+\n+...\n+\n+# New test function to check the Sphinx fix for optional option syntax\n+def test_cmd_option_with_square_brackets(app):\n+    text = \".. option:: [enable=]PATTERN\\n\\n   Immediately enable events matching *PATTERN*\"\n+    \n+    # Parse the text into a doctree\n+    doctree = restructuredtext.parse(app, text)\n+    # Check the structure of the parse tree to ensure node generation is correct\n+    assert_node(doctree, (\n+        [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[enable'],\n+                                                    [addnodes.desc_addname, '=]PATTERN'])],\n+                         [addnodes.desc_content, ()])]))\n+\n+    # Verify the option is properly registered within the domain objects\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+# Ensure no existing behavior is affected by the fix\n+def test_cmd_option_without_square_brackets(app):\n+    text = \".. option:: --enable\\n\\n   Enable the feature\"\n+    \n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '--enable'])],\n+                         [addnodes.desc_content, ()])]))\n+\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--enable', '--enable', 'cmdoption', 'index', 'cmdoption--enable', 1) in objects\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..ebabca9 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -10,6 +11,7 @@\n \n import sys\n from numbers import Integral\n+from struct import Struct\n from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar,\n                     Union)\n \n@@ -44,6 +46,8 @@ def test_restify():\n     assert restify(None) == \":obj:`None`\"\n     assert restify(Integral) == \":class:`numbers.Integral`\"\n     assert restify(Any) == \":obj:`Any`\"\n+    # Test for struct.Struct type annotations\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n \n \n def test_restify_type_hints_containers():\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..8df6774 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,56 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    \n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+    def test_other_parameters_section_formatting(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+arg2 : int\n+    Description of arg2\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **arg2** (*int*) -- Description of arg2\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param arg2:\n+:type arg2: int\n+    Description of arg2\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..343cadc 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -61,7 +61,20 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/cpp/' in stuff\n \n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+import pytest\n+from pathlib import Path\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_default(app, status, warning):\n+    app.builder.build_all()\n+    epub_module_path = Path(app.outdir) / '_modules/spam/mod1.xhtml'\n+    assert not epub_module_path.exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+    epub_module_path = Path(app.outdir) / '_modules/spam/mod1.xhtml'\n+    assert epub_module_path.exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..0a832d8 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -353,6 +353,14 @@ def test_args():\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n+    \n+    # New test cases to check non-disjoint cycles handling\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1]) # Should result in identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 2], [1, 2]]) == Permutation([2, 0, 1])\n+    assert Permutation([[1, 2], [0, 1], [2, 3]]) == Permutation([2, 0, 1, 3])\n+    assert Permutation([[0, 1], [1, 2], [2, 3]]) == Permutation([1, 2, 3, 0])\n+    assert Permutation([[0, 1], [2, 3], [1, 2]]) == Permutation([1, 3, 0, 2])\n \n \n def test_Cycle():\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..5b69acb 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,8 +1,38 @@\n-from sympy import Abs, S, Symbol, I, Rational, PurePoly\n+\n+from sympy import Abs, S, Symbol, I, Rational, PurePoly, Matrix\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n def test_sparse_matrix():\n+    # Test for hstack with 0 x n matrices\n+    def test_hstack_with_zero_size_matrices():\n+        M1 = SparseMatrix.zeros(0, 0)\n+        M2 = SparseMatrix.zeros(0, 1)\n+        M3 = SparseMatrix.zeros(0, 2)\n+        M4 = SparseMatrix.zeros(0, 3)\n+        result = SparseMatrix.hstack(M1, M2, M3, M4)\n+        assert result.shape == (0, 6)\n+\n+    # Test for hstack with n x 0 matrices\n+    def test_hstack_with_nx0_matrices():\n+        M1 = SparseMatrix.zeros(1, 0)\n+        M2 = SparseMatrix.zeros(1, 1)\n+        M3 = SparseMatrix.zeros(1, 2)\n+        M4 = SparseMatrix.zeros(1, 3)\n+        result = SparseMatrix.hstack(M1, M2, M3, M4)\n+        assert result.shape == (1, 6)\n+\n+    # Test for vstack with 0 x n matrices\n+    def test_vstack_with_zero_size_matrices():\n+        M1 = SparseMatrix.zeros(0, 1)\n+        M2 = SparseMatrix.zeros(0, 2)\n+        M3 = SparseMatrix.zeros(0, 3)\n+        result = SparseMatrix.vstack(M1, M2, M3)\n+        assert result.shape == (0, 3)\n+\n+    test_hstack_with_zero_size_matrices()\n+    test_hstack_with_nx0_matrices()\n+    test_vstack_with_zero_size_matrices()\n     def sparse_eye(n):\n         return SparseMatrix.eye(n)\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..8ca49ff 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -115,7 +115,21 @@ def test_core_relational():\n         check(c)\n \n \n-def test_core_add():\n+def test_cross_version_pickle_float():\n+    # Test pickling and unpickling of a sympy expression with a float from Python 2 to Python 3\n+    # Create an expression containing a float\n+    x = symbols(\"x\")\n+    expr = x + 1.0\n+    \n+    # Simulate the Python 2 pickling process by using protocol 2\n+    pickle_data = pickle.dumps(expr, protocol=2)\n+    \n+    # In a real scenario, this pickle_data would be read by a Python 3 process\n+    # We unpickle using Python 3 and check if the expression is correctly reconstructed\n+    unpickled_expr = pickle.loads(pickle_data)\n+    \n+    # Verify the unpickled expression is as expected\n+    assert unpickled_expr == Add(x, 1.0)\n     x = Symbol(\"x\")\n     for c in (Add, Add(x, 4)):\n         check(c)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..8e5262b 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -279,7 +279,20 @@ def test_coth_series():\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n \n-def test_csch():\n+def test_coth_subs_issue():\n+    x = Symbol('x')\n+    values_to_test = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+\n+    for value in values_to_test:\n+        e = coth(log(tan(x)))\n+        try:\n+            result = e.subs(x, value)\n+            print(f\"coth(log(tan({value}))) => {result}\")\n+        except NameError as ne:\n+            assert False, f\"NameError was raised for x = {value}: {str(ne)}\"\n+        except Exception as e:\n+            # If any other exceptions occur, they should also be noted.\n+            assert False, f\"An unexpected exception occurred for x = {value}: {str(e)}\"\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..15fd910 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -187,6 +187,21 @@ def test_col_join():\n                    [0, 0, 1],\n                    [7, 7, 7]])\n \n+def test_issue_13643_col_insert():\n+    from sympy import eye, Matrix, ones\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n def test_row_insert():\n     r4 = Matrix([[4, 4, 4]])\n     for i in range(-4, 5):\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..f6139ea 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -620,46 +620,46 @@ def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n     assert latex(s1) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n+    latex_str = r'[1, 2, 1, 2, \\ldots]'\n     assert latex(s2) == latex_str\n \n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4\\right\\]'\n+    latex_str = r'[0, 1, 4]'\n     assert latex(s3) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1\\right\\]'\n+    latex_str = r'[1, 2, 1]'\n     assert latex(s4) == latex_str\n \n     s5 = SeqFormula(a**2, (-oo, 0))\n     s6 = SeqPer((1, 2), (-oo, 0))\n \n-    latex_str = r'\\left\\[\\ldots, 9, 4, 1, 0\\right\\]'\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n     assert latex(s5) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 2, 1, 2, 1\\right\\]'\n+    latex_str = r'[\\ldots, 2, 1, 2, 1]'\n     assert latex(s6) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5, 11, \\ldots\\right\\]'\n+    latex_str = r'[1, 3, 5, 11, \\ldots]'\n     assert latex(SeqAdd(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5\\right\\]'\n+    latex_str = r'[1, 3, 5]'\n     assert latex(SeqAdd(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 11, 5, 3, 1\\right\\]'\n+    latex_str = r'[\\ldots, 11, 5, 3, 1]'\n     assert latex(SeqAdd(s5, s6)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4, 18, \\ldots\\right\\]'\n+    latex_str = r'[0, 2, 4, 18, \\ldots]'\n     assert latex(SeqMul(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4\\right\\]'\n+    latex_str = r'[0, 2, 4]'\n     assert latex(SeqMul(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n+    latex_str = r'[\\ldots, 18, 4, 2, 0]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..15607d4 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,9 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, EX, RR, CC\n+from sympy.polys import Poly\n+from sympy.abc import x, y, z\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -188,6 +191,20 @@ def test_Domain_preprocess():\n \n     raises(OptionError, lambda: Domain.preprocess('Z()'))\n \n+    # Test cases for the issue with domain='RR[y,z]'\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]\n+\n+    # Test Poly initialization with domain 'RR[y,z]'\n+    poly = Poly(1.2 * x * y * z, x)\n+    assert poly.as_expr() == 1.2 * y * z * x\n+    assert poly.domain == RR[y, z]\n+\n+    poly_with_domain = Poly(1.2 * x * y * z, x, domain='RR[y,z]')\n+    assert poly_with_domain.as_expr() == 1.2 * y * z * x\n+    assert poly_with_domain.domain == RR[y, z]\n+\n     assert Domain.preprocess('Z(x)') == ZZ.frac_field(x)\n     assert Domain.preprocess('Q(x)') == QQ.frac_field(x)\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..7b7bcd7 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6122,6 +6122,32 @@ def test_MatrixSymbol_printing():\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n \n+\n+from sympy import MatrixSymbol, pretty\n+\n+def test_MatrixSymbol_pretty_printing():\n+    # Additional test cases for issue #14814\n+    n = 3  # Example dimension, adjust as needed\n+    \n+    # MatrixSymbols with an asterisk in the name\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    z_star = MatrixSymbol('z*', n, n)\n+    neg_a = MatrixSymbol('-a', n, n)\n+    two_y = MatrixSymbol('2*y', n, n)\n+\n+    # Test pretty print for simple addition\n+    assert pretty(x + y_star) == \"x + y*\"\n+    \n+    # Test pretty print with negative factors and MatMul\n+    assert pretty(-neg_a*x + -two_y*y_star) == \"-(-a)*x - 2*y*y*\"\n+\n+    # Test for cases with more complex expressions\n+    assert pretty(z_star + y_star - x) == \"-x + z* + y*\"\n+\n+    # Ensure nothing breaks with scalar values added\n+    assert pretty(1 - x + y_star) == \"-x + 1 + y*\"\n+\n def test_degree_printing():\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..dfb3428 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -727,8 +727,33 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n-\n-def test_python_keywords():\n+import sympy\n+from sympy import lambdify\n+\n+def test_curly_matrix_symbol_edge_cases():\n+    # Test case for issue with curly braces in MatrixSymbol and dummify=True\n+    curlyv = sympy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # This line should not raise SyntaxError and should return the input\n+    lam = lambdify(curlyv, curlyv)\n+    assert (lam([[1], [2]]) == [[1], [2]])\n+\n+    # Test with dummify=True\n+    lam_dummify = lambdify(curlyv, curlyv, dummify=True)\n+    assert (lam_dummify([[3], [4]]) == [[3], [4]])\n+    \n+    # Additional test cases for more coverage\n+    # Mixed curly and non-curly symbols\n+    curlyu = sympy.MatrixSymbol(\"{u}\", 2, 1)\n+    simplev = sympy.MatrixSymbol(\"v\", 2, 1)\n+\n+    lam_mixed = lambdify((curlyu, simplev), curlyu + simplev)\n+    assert (lam_mixed([[1], [2]], [[3], [4]]) == [[4], [6]])\n+\n+    # Test with nested lambdify\n+    simple_scalar = sympy.symbols('a')\n+    lam_nested = lambdify(simple_scalar, lambdify(curlyv, curlyv + simple_scalar)([[1], [1]]))\n+    assert (lam_nested(1) == [[2], [2]])\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..d7cd8b5 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,18 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_matrix_expression_latex_compilation():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    \n+    # Test the LaTeX output of an indexed matrix expression\n+    expr = (M * N)[i, j]\n+    expected_latex_output = r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+    assert latex(expr) == expected_latex_output\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..a9e8b00 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -20,6 +21,22 @@ def test_idiff():\n     assert True in [sol.diff(x, 3).equals(explicit) for sol in solve(circ, y)]\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test cases provided in the original test patch\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Additional test cases to cover Eq scenario mentioned in the issue\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x).simplify() == (x + 1) * exp(x - y)/(y + 1)\n+    assert idiff(y * exp(y) - x * exp(x), y, x).simplify() == (x + 1) * exp(x - y)/(y + 1)\n+\n+    # Additional test case with higher order derivatives\n+    eq = Eq(y * exp(y), x * exp(x))\n+    assert idiff(eq, y, x, 2).simplify() == ((x + 1)*(x * exp(x - y)/(y + 1) + 1) - 1) * exp(x - y)/(y + 1)\n \n def test_intersection():\n     assert intersection(Point(0, 0)) == []\n",
  "sympy__sympy-16792": "",
  "sympy__sympy-16988": "",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..6096e10 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -10,13 +11,32 @@ from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayPermuteDims, CodegenArrayElementwiseAdd)\n from sympy.printing.lambdarepr import NumPyPrinter\n \n-from sympy.utilities.pytest import warns_deprecated_sympy\n+from sympy.utilities.pytest import warns_deprecated_sympy, raises\n+from sympy.matrices import Matrix, MatrixSymbol, Identity\n+from sympy import symbols\n+import numpy as np\n from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n np = import_module('numpy')\n \n-def test_numpy_piecewise_regression():\n+def test_issue_identity_matrix_with_lambdify():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    # Test with specific sized identity matrices\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+    assert (f(ma) == mr).all()\n+\n+    # Test with a generic sized identity matrix and raise an error\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"N\", n, n)\n+\n+    # Should raise NotImplementedError because generic symbolic sizes are not supported\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..9bab5ec 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -810,8 +810,21 @@ def test_issue_15965():\n     assert simplify(A) == anew\n     assert simplify(B) == bnew\n \n+def test_issue_17137():\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n \n-def test_issue_7971():\n+def test_simplify_complex_exponent():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Test more complex expressions\n+    assert simplify((cos(x)**I)*(sin(y)**I)) == (cos(x)**I)*(sin(y)**I)\n+    assert simplify(exp(I*x)) == exp(I*x)\n+    assert simplify(exp(2*I*x)) == exp(2*I*x)\n+    assert simplify((cos(x) + sin(x))**I) == (cos(x) + sin(x))**I\n+    # Test real exponents for comparison\n+    assert simplify((cos(x) + sin(x))**2) == (cos(x) + sin(x))**2\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..804058a 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -93,6 +94,17 @@ def test_point():\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n+    # Test multiplication order\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    # This line should not raise an exception\n+    assert point1 + point2 * scalar == Point(2, 2)\n+\n+    # This line should also not raise an exception and give the same result\n+    assert point1 + scalar * point2 == Point(2, 2)\n+\n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n     # Point differences should be simplified\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..23c8055 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,12 +1894,46 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy.core import symbols, Symbol, sympify, Expr\n+from sympy.testing.pytest import raises\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n \n \n+def test_non_string_equality():\n+    # Ensure expressions do not improperly invoke eval on reprs\n+    x = symbols('x')\n+\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    \n+    # Should not raise an AttributeError \n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    # Verify handling of object with repr that is valid as a variable\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (x == D()) is False\n+    assert (x != D()) is True\n+\n+    # Verify handling of object with numeric repr\n+    class E:\n+        def __repr__(self):\n+            return '42'\n+\n+    assert (x == E()) is False\n+    assert (x != E()) is True\n+    one = sympify(1)\n+    assert (one == E()) is False\n+    assert (one != E()) is True\n+\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..649a75d 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,27 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_diophantine_permutation_issue():\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy import symbols\n \n-def test_general_pythagorean():\n+    x, y = symbols('x y')\n+    equation = x**4 + y**4 - 2**4 - 3**4\n+\n+    # Test for order (x, y)\n+    expected_solution = {(-3, -2), (-3, 2), (-2, -3), (-2, 3),\n+                         (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(equation, syms=(x, y), permute=True) == expected_solution\n+\n+    # Test for order (y, x)\n+    assert diophantine(equation, syms=(y, x), permute=True) == expected_solution\n+\n+    # Additional checks\n+    a, b = symbols('a b')\n+    equation2 = a**4 + b**4 - 1**4 - 6**4\n+\n+    # Different orders\n+    assert diophantine(equation2, syms=(a, b), permute=True) == diophantine(equation2, syms=(b, a), permute=True)\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..1996a63 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n from sympy.codegen.ast import Declaration, Variable, float64, int64\n@@ -66,7 +67,8 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert set(sz.atoms()) == {String('unsigned int'), String('sizeof')}\n+    assert all(not hasattr(atom, 'args') or not atom.args for atom in sz.atoms()), \"All atoms should have no arguments.\"\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..62ab491 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,36 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_with_one_element():\n+    # This test case checks the issue described where a BlockDiagMatrix\n+    # with a single Matrix element cannot be converted to regular Matrix\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+\n+    # Test that converting to a regular matrix does not raise an error\n+    try:\n+        B = Matrix(D)\n+        assert B == M\n+    except TypeError as e:\n+        assert False, f\"BlockDiagMatrix to regular Matrix conversion raised TypeError: {str(e)}\"\n+\n+def test_BlockDiagMatrix_with_two_elements():\n+    # This test case verifies functionality with two elements\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+\n+    assert B == Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..10aaad2 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,24 @@\n+\n+from sympy import *\n+from sympy.testing.pytest import XFAIL\n+\n+def test_block_index_issue_resolved():\n+    # This test is designed to ensure that C[i, 0] returns a MatrixElement\n+    # and does not simplify incorrectly to elements from A when i is symbolic\n+    n, i = symbols('n, i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[i, 0] == MatrixElement(C, i, 0)  # Should not simplify\n+\n+@XFAIL # Since the initial issue seems to suggest some expected symbolic index problems\n+def test_specific_failure_case():\n+    n, m = symbols('n m', integer=True)\n+    A1 = MatrixSymbol('A1', n, 1)\n+    A2 = MatrixSymbol('A2', m, 1)\n+    A = BlockMatrix([[A1], [A2]])\n+    assert A[2 * n, 0] == A2[n, 0]  # Hypothetical failure case\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..97708bd 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -222,6 +222,18 @@ def test_sign():\n     assert sign(x).is_zero is None\n     assert sign(x).doit() == sign(x)\n     assert sign(1.2*x) == sign(x)\n+\n+    # Test rewrite with Abs\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    f = Function('f')\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+\n+    # Test specific cases including zero and non-zero\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(5).rewrite(Abs) == 5/Abs(5)\n+    assert sign(-3).rewrite(Abs) == -3/Abs(-3)\n+    assert sign(4 + 4*I).rewrite(Abs) == (4 + 4*I)/Abs(4 + 4*I)\n+    assert sign(0 + 0*I).rewrite(Abs) == 0\n     assert sign(2*x) == sign(x)\n     assert sign(I*x) == I*sign(x)\n     assert sign(-2*I*x) == -I*sign(x)\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..9765fce 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -514,6 +514,14 @@ def test_partitions():\n         assert i == RGS_enum(n)\n \n \n+def test_partition_reuse():\n+    # Test to check if the returned dictionaries are not reused.\n+    partitions_list = list(partitions(6, k=2))\n+    partitions_list[0][2] = 4\n+    \n+    # Ensure that modifying one dictionary does not modify others\n+    assert partitions_list[1] == {1: 2, 2: 2}\n+\n def test_binary_partitions():\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..56594b1 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,7 +254,12 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n-def test_zero():\n+from sympy import Symbol, S, oo\n+\n+def test_issue_19572():\n+    # Test the fix for issue 19572\n+    assert 0**-oo is S.ComplexInfinity\n+    assert S.Pow(0, -oo) == S.ComplexInfinity\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..cab4532 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,8 +1,9 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n                                  volume, kilometer)\n-from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n+from sympy.physics.units.definitions import (amu, au, centimeter, coulomb, joule,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n     byte, kibibyte, mebibyte, gibibyte, tebibyte, pebibyte, exbibyte,\n@@ -31,6 +32,21 @@ def test_eq():\n \n \n def test_convert_to():\n+    # Test issue: convert_to seems to combine orthogonal units\n+\n+    # Ensure convert_to doesn't erroneously simplify Joules * second to a power of Joules\n+    expr = joule * second\n+    assert convert_to(expr, joule) == expr\n+\n+    # Test conversion of joule*second to itself which should remain unchanged\n+    assert convert_to(joule*second, joule*second) == joule*second\n+\n+    # Test conversion of joule*second to kg*m**2/s, which is expected to work fine\n+    expr_equivalent = kg * m**2 / s\n+    assert convert_to(joule*second, expr_equivalent) == expr_equivalent\n+\n+    # Test conversion with time units\n+    assert convert_to(joule*second, minute) == joule*minute/60\n     q = Quantity(\"q1\")\n     q.set_global_relative_scale_factor(S(5000), meter)\n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..4f5a249 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,24 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import pytest\n+from sympy import Symbol\n+from sympy.testing.pytest import raises\n+\n+\n+def test_symbol_dict_absence():\n+    s = Symbol('s')\n+    # Check that __dict__ exists and is empty as per the issue in version 1.7\n+    assert hasattr(s, '__dict__')\n+    assert s.__dict__ == {}\n+\n+def test_symbol_slots():\n+    s = Symbol('s')\n+    # Check that __slots__ is defined\n+    assert hasattr(s, '__slots__')\n+    # Check that __slots__ contains expected entry\n+    assert s.__slots__ == ('name',)\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..a71976e 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n                    atan, atan2, nan, Symbol, re, im, sign)\n from sympy.abc import w, x, y, z\n@@ -161,7 +162,28 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_refine_complex_arguments():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x')\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    J_doit = J.doit()\n+    \n+    # Check if the original piecewise solution can be simplified given positive assumption\n+    refined_J_doit = refine(J_doit, Q.positive(a))\n+    assert refined_J_doit == 1 / (a**2 + 1)\n+\n+    # Verify refining arg with Q.positive for complex symbols\n+    y = Symbol('y', complex=True)\n+    assert refine(arg(y), Q.positive(y)) == 0\n+    assert refine(arg(y), Q.negative(y)) == pi\n+\n+    # Testing with imaginary symbol\n+    z = Symbol('z', imaginary=True)\n+    assert refine(arg(z), Q.positive(im(z))) == pi/2\n+    assert refine(arg(-z), Q.positive(im(z))) == -pi/2\n+\n+    # Case where argument does not depend on assumptions\n+    assert refine(arg(a), Q.positive(a)) == 0\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..be54d56 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -8,7 +9,38 @@ from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n-def test_subs():\n+from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n+from sympy import exp\n+from sympy.core.cache import clear_cache\n+\n+def test_issue_polynomial_error_with_subs():\n+    # Related to issue with PolynomialError when using subs on hyperbolic functions with piecewise arguments\n+\n+    x, y, z = symbols('x y z')\n+\n+    # Test with x and y as real symbols, expect no error\n+    clear_cache()\n+    x_r, y_r = symbols('x y', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr.subs({1: 1.0}) is not None  # Ensuring no error, returning the expression\n+\n+    # Testing similar expressions with cosh and tanh to ensure no error\n+    clear_cache()\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_cosh.subs({1: 1.0}) is not None\n+\n+    clear_cache()\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_tanh.subs({1: 1.0}) is not None\n+\n+    # Variations removing division by z and exp\n+    clear_cache()\n+    expr_simple = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)))\n+    assert expr_simple.subs({1: 1.0}) is not None\n+    \n+    clear_cache()\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    assert expr_no_exp.subs({1: 1.0}) is not None\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..d0246dc 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -45,7 +47,10 @@ def test_Matrix_kind():\n         m = cls.zeros(3, 2)\n         assert m.kind is MatrixKind(NumberKind)\n \n-def test_MatMul_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n     assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..0f09c23 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -130,6 +130,22 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 1])) == {S.One, x, y, x*y, x**2, x**2*y}\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n+    \n+    # Added test cases to verify the fix for itermonomials with min_degrees argument\n+\n+    # Test with three variables, min_degrees equals max_degrees\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    monomials_3_3 = set(itermonomials([x1, x2, x3], 3, 3))\n+    expected_3_3 = {x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2, x1*x2*x3,\n+                    x2**2*x3, x2*x3**2, x2*x3}\n+    assert monomials_3_3 == expected_3_3, monomials_3_3\n+\n+    # Verify behavior when max_degrees > min_degrees\n+    monomials_4_3 = set(itermonomials([x1, x2, x3], 4, 3))\n+    expected_4_3 = {x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2, x1*x2*x3,\n+                    x2**2*x3, x2*x3**2, x2*x3, x1**4, x2**4, x3**4, x1*x2**3, x1*x3**3,\n+                    x2*x3**3, x1*x2**2*x3, x2*x3*x1} | {x1**i*x2**j*x3**(4-i-j) for i in range(5) for j in range(5-i)}\n+    assert monomials_4_3 == expected_4_3, monomials_4_3\n \n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..768cfd3 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -45,6 +46,8 @@ def test_solve_poly_system():\n         [x + x*y - 3, y + x*y - 4], x, y) == [(-3, -2), (1, 2)]\n \n     raises(NotImplementedError, lambda: solve_poly_system([x**3 - y**3], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        Poly(y, x, y), (x, y)))\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..e68b63d 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,8 +1,11 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.core.sympify import sympify\n+from sympy.core.parameters import evaluate\n+from sympy.geometry import Point2D\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n@@ -440,7 +443,21 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        assert Point2D(1, 2) == Point2D(1, 2)\n+\n+    # Test with sympify using string\n+    with evaluate(False):\n+        result = sympify('Point2D(Integer(1),Integer(2))', evaluate=False)\n+        assert result == Point2D(1, 2)\n+\n+    # Directly testing with Point2D\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert isinstance(p, Point2D)\n+        assert p.equals(Point2D(1, 2))\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..7f2fccf 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,7 +347,22 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n-def test_cse_MatrixExpr():\n+def test_cse_MatrixSymbol_indexing_issue():\n+    from sympy import symbols, MatrixSymbol, cse\n+    # Symbolic MatrixSymbol\n+    n = symbols('n', integer=True)\n+    A = MatrixSymbol('A', n, n)\n+    B = MatrixSymbol('B', n, n)\n+    \n+    expr = A[0, 0]*B[0, 0] + A[0, 1]*B[1, 0]\n+    replacements, reduced_exprs = cse(expr)\n+    \n+    # Test assertion as described in original issue patch\n+    expected_replacements = [(symbols('x0'), A[0, 0]*B[0, 0] + A[0, 1]*B[1, 0])]\n+    \n+    assert len(replacements) == len(expected_replacements)\n+    for repl, expected_repl in zip(replacements, expected_replacements):\n+        assert repl == expected_repl\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..087afca 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -17,8 +18,12 @@ array_types = [\n     MutableSparseNDimArray\n ]\n \n-\n-def test_array_negative_indices():\n+def test_empty_array_creation():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n     for ArrayType in array_types:\n         test_array = ArrayType([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n         assert test_array[:, -1] == Array([5, 10])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..f9fdab6 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,24 @@ def test_scipy_polys():\n \n \n \n+def test_lambdify_single_element_tuple():\n+    # Test lambdify for a single-element tuple to ensure the tuple is preserved\n+    f2b = lambdify([], (1,))  # from issue description\n+    assert f2b() == (1,)\n+    # Carefully check the generated source code to inspect the tuple correctness\n+    generated_source = inspect.getsource(f2b)\n+    assert 'return (1,)' in generated_source  # Ensure that single-element tuple has a comma\n+\n+def test_lambdify_multi_element_tuple():\n+    # Confirm that multi-element tuples work as expected too\n+    f2c = lambdify([], (1, 2))\n+    assert f2c() == (1, 2)\n+    generated_source = inspect.getsource(f2c)\n+    assert 'return (1, 2)' in generated_source  # Multi-element tuples don't need trailing comma for the last element\n+\n+import inspect\n+from sympy import lambdify, symbols\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "",
  "sympy__sympy-24152": "",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..b0d6870 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -13,7 +14,9 @@ from sympy.integrals.integrals import integrate\n from sympy.physics.units import (amount_of_substance, area, convert_to, find_unit,\n                                  volume, kilometer, joule, molar_gas_constant,\n                                  vacuum_permittivity, elementary_charge, volt,\n-                                 ohm)\n+                                 ohm, time, velocity, acceleration, second, meter,\n+                                 Quantity)\n+from sympy.physics.units.systems.si import SI\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..723bc32 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, volt, milli, Prefix\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,7 +28,18 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n-    m = Quantity(\"fake_meter\")\n+def test_milli_prefix_issue():\n+    assert milli*W == Prefix('milli', 'm', -3, 10)*W\n+    assert milli*W != 1\n+    assert milli*volt == Prefix('milli', 'm', -3, 10)*volt\n+    assert milli*volt != 1\n+\n+    # Check the correct behavior by evaluating expressions directly\n+    assert (milli*W).evalf(subs={W: 1}) == 0.001\n+    assert (milli*volt).evalf(subs={volt: 1}) == 0.001\n+\n+    # Check that milli*W and W*milli result in equivalent units\n+    assert milli*W == W*milli\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n \n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..ea9516c 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -185,11 +185,13 @@ class GrandParent(models.Model):\n \n \n class Parent(GrandParent):\n-    pass\n+    class Meta:\n+        ordering = ['-pk']\n \n \n class Child(Parent):\n-    pass\n+    class Meta:\n+        ordering = ['-pk']\n \n \n class GrandChild(Child):\n",
  "django__django-13033": "",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..ca7d747 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,8 +3201,37 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    def test_boundwidget_id_for_label_using_attrs_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the id from self.data['attrs']['id'] \n+        when available instead of the default id construction.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('alpha', 'Alpha'), ('beta', 'Beta')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_%s'}),\n+            )\n+        \n+        form = SomeForm(auto_id='form_id_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_alpha')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_beta')\n+\n+    def test_boundwidget_id_for_label_without_custom_attrs_id(self):\n+        \"\"\"\n+        Test BoundWidget.id_for_label when no id is set in self.data['attrs'], \n+        it should fallback to the default id construction.\n+        \"\"\"\n+        class AnotherForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('red', 'Red'), ('green', 'Green')],\n+                widget=CheckboxSelectMultiple(),\n+            )\n \n-    def test_boundfield_widget_type(self):\n+        form = AnotherForm(auto_id='color_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'color_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'color_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..a2ffbc1 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,11 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.colors import LogNorm, Normalize\n+...\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -658,7 +663,22 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n-def test_colorbar_get_ticks_2():\n+def test_colorbar_update_after_norm_change():\n+    x = np.random.uniform(1, 1000, size=(50, 50))\n+\n+    fig, ax = plt.subplots()\n+    pcm = ax.imshow(x, cmap='viridis', norm=LogNorm())\n+    cbar = fig.colorbar(pcm, ax=ax)\n+\n+    # Initial colorbar should be in log scale.\n+    np.testing.assert_allclose(cbar.get_ticks(), [1, 10, 100, 1000], rtol=1e-1)\n+\n+    # Change the normalization; the colorbar should update accordingly.\n+    pcm.norm = Normalize(vmin=1, vmax=1000)\n+    cbar.update_normal(pcm)\n+    fig.canvas.draw()\n+\n+    np.testing.assert_allclose(cbar.get_ticks(), [1, 250, 500, 750, 1000], rtol=1e-1)\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..88974aa 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,47 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion using pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn import set_config\n+\n+    # Simulate similar scenario as reported in the bug.\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None, **fit_params):\n+            return self\n+\n+        def transform(self, X, y=None):\n+            return X.groupby(X.index.date).sum()\n+\n+    # Create a sample data frame\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", freq=\"H\", inclusive='left')\n+    data = pd.DataFrame(index=index, data={'value': [10] * len(index)})\n+\n+    # If the above bug is fixed, both configurations below should work without exceptions.\n+    set_config(transform_output=\"default\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    union.fit_transform(data)\n+    \n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    transformed_data = union.fit_transform(data)\n+\n+    # Ensure the output is pandas if transform_output=\"pandas\" is set\n+    assert isinstance(transformed_data, pd.DataFrame)\n+\n+def test_feature_union_empty_transformers():\n+    \"\"\"Test FeatureUnion with all transformers set to 'drop'.\"\"\"\n+    import numpy as np\n+    from sklearn.pipeline import FeatureUnion\n+\n+    X = np.array([[1, 2], [3, 4]])\n+    union = FeatureUnion([(\"stm\", \"drop\")])\n+    X_trans = union.fit_transform(X)\n+\n+    # The result should be an array with shape (n_samples, 0)\n+    assert X_trans.shape == (X.shape[0], 0)\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..1acd801 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,9 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+import sys\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..6e5f453 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -358,7 +359,24 @@ def test_issue_2827_trigsimp_methods():\n     assert exptrigsimp(eq) == eq\n \n \n-def test_exptrigsimp():\n+def test_issue_15129_rational_simplification():\n+    from sympy import Rational, acos\n+\n+    # Test if sin/cos with Rational can be simplified\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    \n+    # Expected cosine of difference for dot product\n+    r = t1.dot(t2)\n+    assert simplify(r) == cos(Rational(1, 50) - Rational(1, 25))\n+\n+    # Direct calculation using trigonometric identities\n+    r = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert simplify(r) == cos(Rational(1, 50) - Rational(1, 25))\n+\n+    # Test acos simplification if possible\n+    r_cos = cos(Rational(1, 50) - Rational(1, 25))\n+    assert acos(simplify(r)) == acos(r_cos)\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..1108b8b 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,29 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n-\n-def test_units():\n+def test_sum_centering_issue():\n+    from sympy import Sum, symbols, oo\n+    from sympy.printing.pretty import pretty as pretty_print\n+    from sympy.abc import x\n+\n+    # Create the expression with the known issue.\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    # Define the expected pretty print output.\n+    # It should ensure that `x` and `+ 3` are aligned properly.\n+    expected_upretty = u(\"\"\"\\\n+  \u221e       \n+ ___      \n+ \u2572        \n+  \u2572   x   \n+  \u2571  + 3 \n+ \u2571        \n+ \u203e\u203e\u203e      \n+x = 1    \\\n+\"\"\")\n+\n+    # Assert that the pretty printed output is as expected.\n+    assert pretty_print(expr) == expected_upretty\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..c27ae42 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -701,6 +701,29 @@ def test_uniq():\n     assert list(uniq([[1], [2, 1], [1]])) == [[1], [2, 1]]\n     assert list(uniq(permutations(i for i in [[1], 2, 2]))) == \\\n         [([1], 2, 2), (2, [1], 2), (2, 2, [1])]\n+\n+    # Test that modifying the list during iteration raises RuntimeError\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    # Additional test for more complex scenarios\n+    f = [1, 2, 2, 3, 4]\n+    raises(RuntimeError, lambda: [f.pop(0) for i in uniq(f)])\n+\n+    f = ['a', 'b', 'a', 'c']\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+\n+    f = [1, 1, 1, 2, 2, 3]\n+    def modify_and_collect():\n+        results = []\n+        for i in uniq(f):\n+            f.append(i)\n+            results.append(i)\n+        return results\n+\n+    raises(RuntimeError, modify_and_collect)\n     assert list(uniq([2, 3, 2, 4, [2], [1], [2], [3], [1]])) == \\\n         [2, 3, 4, [2], [1], [3]]\n \n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..c49374d 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,6 +8,7 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..9d34bb9 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,6 +546,16 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n+    def test_subquery_as_sql_with_explicit_subquery_true(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        # Assuming the fix is applied and 'subquery=True' is set by default\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertTrue(sql.startswith('(SELECT '))\n+        self.assertTrue(sql.endswith(')'))\n+\n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..e61dc8b 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,35 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\")\n+            )\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +193,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..3b4c3b1 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,24 @@\n+\n+@pytest.mark.skipif(not (platform.system() == 'Darwin' and platform.processor() == 'arm'),\n+                    reason=\"This test is specific to macOS with ARM architecture.\")\n+def test_dpi_doubling_on_unpickle():\n+    # Create a figure with specific DPI\n+    initial_dpi = 200\n+    fig = plt.figure(dpi=initial_dpi)\n+\n+    def serialize_deserialize(fig):\n+        fig_serialized = pickle.dumps(fig)\n+        return pickle.loads(fig_serialized)\n+\n+    fig_dpi_check = fig.dpi\n+    for i in range(32):\n+        assert fig_dpi_check == initial_dpi, f\"Failed at iteration {i}, DPI was {fig_dpi_check}\"\n+        fig = serialize_deserialize(fig)\n+        fig_dpi_check = fig.dpi\n+\n+    # Verify that the DPI remains constant after multiple serializations\n+    assert fig.dpi == initial_dpi, f\"DPI after 32 iterations should be {initial_dpi}, but was {fig.dpi}\"\n+\n import copy\n from datetime import datetime\n import io\n@@ -14,6 +35,9 @@ from PIL import Image\n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n+from matplotlib.figure import Figure\n+import pytest\n+import platform\n from matplotlib.axes import Axes\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..3d4784b 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1623,6 +1624,21 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n+    def test_pairgrid_scatter_hue_map(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+        \n+        # Test with PairGrid and map for hue\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        g.map(sns.scatterplot, hue=iris[\"species\"])\n+\n+        # Check for axes not being empty and for no errors during map\n+        for ax in g.axes.flat:\n+            assert ax.has_data()\n+            \n+        # Test with different arrangements and ensure no errors, useful for future visual inspections\n+        g.map(sns.regplot, scatter=False)\n+\n     def test_linewidths(self, long_df):\n \n         f, ax = plt.subplots()\n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..c813725 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,6 +323,8 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n+import pytest\n+\n def test_excinfo_exconly():\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n@@ -347,7 +349,26 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n-def test_excinfo_for_later():\n+def test_excinfo_raises_str():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    # Verify that str(excinfo) does not match the full error message\n+    assert str(excinfo) != \"A\\nB\\nC\"\n+    # Verify that str(excinfo.value) matches the actual exception message\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n+def test_excinfo_raises_str_vs_normal():\n+    try:\n+        raise LookupError(\"A\\nB\\nC\")\n+    except LookupError as e:\n+        normal_exception_str = str(e)\n+\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    \n+    pytest_exception_str = str(excinfo.value)\n+    # Ensure both capture the same string representation for the exception message\n+    assert normal_exception_str == pytest_exception_str\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..f4f2135 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -404,6 +404,11 @@ class TestCustomConftests:\n         testdir.makepyfile(\"def test_x(): pass\")\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # New test case to verify the single-character shortcut for '--collect-only'\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # New test case to verify the single-character shortcut for '--collect-only'\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..95b1289 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -94,8 +94,20 @@ def missing_attr(c,\n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n \n+\n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n     def __init__(self, x: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..a4cbf08 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -91,7 +91,23 @@ def test_Identity_doit():\n     assert isinstance(Inn.doit().rows, Mul)\n \n \n-def test_addition():\n+def test_sum_of_identity_matrix_elements():\n+    from sympy import Symbol, MatrixSymbol, Identity, Sum, symbols\n+\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    \n+    # Construct Identity matrix of size n\n+    In = Identity(n)\n+\n+    # Test for sum of diagonal elements\n+    assert Sum(In[i, i], (i, 0, n-1)).doit() == n\n+\n+    # Test for total sum of elements\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n+    # Verify with a concrete example\n+    assert Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit() == 3\n     A = MatrixSymbol('A', n, m)\n     B = MatrixSymbol('B', n, m)\n \n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..47054e9 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -245,6 +245,13 @@ GOOD_PAIRS = [\n     (r\"5^0 - 4^0\", _Add(_Pow(5, 0), _Mul(-1, _Pow(4, 0)))),\n ]\n \n+def test_issue_fraction_parsing():\n+    from sympy.parsing.latex import parse_latex\n+    # Issue Example\n+    expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    expected = ((a**3 + b)/c)/(1/(c**2))\n+    assert expr == expected, f\"Expected {expected}, but got {expr}\"\n+\n \n def test_parseable():\n     from sympy.parsing.latex import parse_latex\n"
}