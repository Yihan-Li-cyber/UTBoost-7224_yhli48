{
  "astropy__astropy-12907": "",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..88f58cf 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n@@ -184,4 +185,43 @@ Col1      Col2 Col3 Col4\n  2.4 's worlds    2    2\n ==== ========= ==== ====\n \"\"\",\n-    )\n+    )\n+\n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing a table to RST format with header rows specified.\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [1.0, 2.0] * u.ct, 'ints': [1, 2]})\n+    tbl['wave'].dtype = np.float64\n+    tbl['response'].dtype = np.float32\n+    tbl['ints'].dtype = np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    expected_lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    assert out.getvalue().splitlines() == expected_lines\n+\n+def test_read_write_rst_round_trip():\n+    \"\"\"Test reading and then writing back a table with header_rows in RST format.\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..cd8bdf4 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,36 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+import numpy as np\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def test_read_lowercase_commands(tmp_path):\n+    example_qdp = \"\"\"\n+    ! A QDP file with lowercase commands\n+    read terr 1\n+    read serr 2\n+    ! Data description\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.1 0.0001 -0.0001 0.5 0.05\n+    55000.2 0.0002 -0.0002 0.6 0.06\n+    NO NO NO NO NO\n+    \"\"\"\n \n-def test_read_example():\n+    path = str(tmp_path / \"test_lower.qdp\")\n+    \n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+    \n+    # Read the QDP file and ensure it does not crash, and data is read correctly.\n+    table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n+    \n+    assert np.isclose(table[\"MJD\"][0], 53000.1)\n+    assert np.isclose(table[\"Rate\"][0], 0.5)\n+    assert np.isclose(table[\"Rate_err\"][0], 0.05)\n+    assert np.isclose(table[\"MJD_perr\"][0], 0.0001)\n+    assert len(table) == 2\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..4766820 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -31,7 +31,47 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n # Test with Data covers:\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n-@pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n+import pytest\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n @pytest.mark.parametrize(\n     (\"data1\", \"data2\"),\n     [\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..841e527 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -245,6 +245,22 @@ class TestTableFunctions(FitsTestCase):\n         # Change scaled field and scale back to the original array\n         t[1].data.field('c4')[0] = 1\n         t[1].data._scale_back()\n+\n+    def test_exponent_replacement_in_d_format(self):\n+        # Test for D-format exponent replacement\n+        r1 = np.array([4.95652173913043548e+00, 1.23456789012345678e+01])\n+        c1 = fits.Column(name='exp_replace', format='D', array=r1)\n+        hdu = fits.BinTableHDU.from_columns([c1])\n+        hdu.writeto(self.temp('exp_replace.fits'), overwrite=True)\n+\n+        with open(self.temp('exp_replace.fits')) as f:\n+            content = f.read()\n+            assert '4.95652173913043548D+00' in content\n+            assert '1.23456789012345678D+01' in content\n+\n+        with fits.open(self.temp('exp_replace.fits')) as hdul:\n+            data = hdul[1].data\n+            np.testing.assert_array_almost_equal(data['exp_replace'], r1)\n         assert str(np.rec.recarray.field(t[1].data, 'c4')) == '[84 84]'\n \n         # look at data column-wise\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..0e282e9 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1102,6 +1102,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertIsNone(default_storage.file_permissions_mode)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n+    \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Test that the default FILE_UPLOAD_PERMISSIONS is set to 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n \n     def test_override_file_upload_directory_permissions(self):\n         \"\"\"\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..1ad8d38 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n', 'newline\\u240A', 'newline_literal\\\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +251,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..59c6988 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,10 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a5cc4e9 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -464,7 +466,35 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_without_dependencies(self):\n+        # Create a simple model `T` instance with no foreign key or m2m dependencies.\n+        t_instance = T.objects.create()\n+        # Ensure PK is not None before deletion\n+        self.assertIsNotNone(t_instance.pk)\n+        # Delete the instance\n+        t_instance.delete()\n+        # Verify that the primary key is set to None after deletion\n+        self.assertIsNone(t_instance.pk)\n+\n+    def test_fast_delete_instance_with_dependencies(self):\n+        # Create a User and Avatar which does have dependencies\n+        avatar = Avatar.objects.create(desc='avatar')\n+        user = User.objects.create(avatar=avatar)\n+        self.assertIsNotNone(user.pk)\n+        # User cannot be fast-deleted because it has a dependency on avatar\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(user))\n+        user.delete()\n+        # Verify that the primary key is set to None after deletion\n+        self.assertIsNone(user.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..ffd05fc 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,13 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.db import IntegrityError\n+from django.contrib.auth.models import Permission\n+from django.contrib.contenttypes.models import ContentType\n \n from .models import Proxy, UserProxy\n \n@@ -140,7 +144,48 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist for proxy models; \n+        the migration should not cause IntegrityError on existing permissions. \n+        Instead, it should update to point to the proxy content type.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        with captured_stdout() as stdout:\n+            try:\n+                update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+                self.assertIn('Permissions migrated', stdout.getvalue())\n+            except IntegrityError:\n+                self.fail('IntegrityError raised during migration')\n+\n+    def test_handle_duplicate_permissions_gracefully(self):\n+        \"\"\"\n+        Check if the migration handles pre-existing permissions without crashing\n+        and logs an informative message if duplicates prevented.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        with captured_stdout() as stdout:\n+            try:\n+                update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+                # Adjust to how the function might notify about duplicate problems.\n+                self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+            except IntegrityError:\n+                self.fail('IntegrityError raised during migration with duplicates')\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..15fd0ac 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -141,7 +141,49 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n-class TestCommonRoots(SimpleTestCase):\n+class TestIterModulesAndFiles(SimpleTestCase):\n+    def test_path_with_embedded_null_bytes(self):\n+        paths_with_null_bytes = [\n+            'embedded_null_byte\\x00.py',\n+            'di\\x00rectory/embedded_null_byte.py',\n+            'another\\x00dir/null_byte_file.py',\n+            '\\x00start_with_null.py',\n+            'normal_path.py'\n+        ]\n+        for path in paths_with_null_bytes:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset()\n+                )\n+\n+    def test_empty_and_invalid_paths(self):\n+        invalid_paths = [\n+            '',\n+            '\\0',\n+            ' '\n+        ]\n+        for path in invalid_paths:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset()\n+                )\n+                \n+    def test_valid_paths(self):\n+        valid_paths = [\n+            'valid_path.py',\n+            'another_valid_directory/valid_script.py'\n+        ]\n+        # Assuming we have a mock or test file structure that accounts for these\n+        for path in valid_paths:\n+            with self.subTest(path=path):\n+                # While actual paths need to be created or mocked, this is the test structure\n+                # It's expected these paths will return resolved paths instead of an empty frozenset\n+                self.assertNotEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset()\n+                )\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..2595aa3 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -18,6 +18,8 @@ from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n from django.utils.functional import SimpleLazyObject\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n@@ -242,7 +244,38 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n-    def test_handle_db_exception(self):\n+    def test_technical_404_converter_raise_404(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+    \n+    def test_custom_converter_with_value_error(self):\n+        \"\"\"Test that raising ValueError in a converter results in a technical 404.\"\"\"\n+        class CustomConverter:\n+            regex = '[0-9]+'\n+            \n+            def to_python(self, value):\n+                raise ValueError\n+        \n+        with mock.patch('django.urls.get_converter', return_value=CustomConverter):\n+            response = self.client.get('/custom-convert/123/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_custom_converter_with_custom_404(self):\n+        \"\"\"Test that raising Http404 returns a 404 response with debug information.\"\"\"\n+        @override_settings(DEBUG=True)\n+        def test_case():\n+            class CustomConverter:\n+                regex = '[0-9]+'\n+                \n+                def to_python(self, value):\n+                    raise Http404('Custom 404 message')\n+            \n+            with mock.patch('django.urls.get_converter', return_value=CustomConverter):\n+                response = self.client.get('/custom-convert/123/')\n+                self.assertContains(response, 'Custom 404 message', status_code=404)\n+        \n+        test_case()\n         \"\"\"\n         Ensure the debug view works when a database exception is raised by\n         performing an invalid query and passing the exception to the debug view.\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..8fb8abb 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -334,8 +334,31 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    @unittest.skipUnless(connection.vendor == 'mysql',\n-                         \"Test valid only for MySQL\")\n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[('ABC', 'Value Too Long!'), ('OK', 'Good')]\n+            )\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n     def test_too_long_char_field_under_mysql(self):\n         from django.db.backends.mysql.validation import DatabaseValidation\n \n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..5d5972a 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -308,6 +309,26 @@ class ETagProcessingTests(unittest.TestCase):\n \n \n class HttpDateProcessingTests(unittest.TestCase):\n+\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_50_years_rule(self, mocked_datetime):\n+        # We mock datetime to control the \"current\" year for testing purposes\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Define a list of tests as tuples: (current_date, input_string, expected_result)\n+        tests = [\n+            (datetime(1999, 12, 31, 23, 59), 'Friday, 31-Dec-69 23:59:00 GMT', datetime(1969, 12, 31, 23, 59)), \n+            (datetime(1999, 12, 31, 23, 59), 'Friday, 01-Jan-00 00:00:00 GMT', datetime(2000, 1, 1, 0, 0)),\n+            (datetime(2045, 6, 1), 'Saturday, 05-Jun-95 00:00:00 GMT', datetime(2095, 6, 5, 0, 0)),\n+            (datetime(2069, 1, 1), 'Monday, 31-Dec-70 00:00:00 GMT', datetime(1970, 12, 31, 0, 0)),\n+        ]\n+\n+        for current_time, rfc850_date_str, expected_datetime in tests:\n+            with self.subTest(rfc850_date_str=rfc850_date_str):\n+                mocked_datetime.utcnow.return_value = current_time\n+                parsed_timestamp = parse_http_date(rfc850_date_str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed_timestamp), expected_datetime)\n     def test_http_date(self):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..e4f93b6 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,16 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import TestCase\n+\n+class TextChoicesResolutionTests(TestCase):\n+    def test_enum_value_returned_as_str(self):\n+        # Test for TextChoices to ensure getter returns correct str value\n+        obj = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+        fetched_obj = MyObject.objects.get(pk=obj.pk)\n+        self.assertIsInstance(fetched_obj.my_str_value, str)\n+        self.assertEqual(fetched_obj.my_str_value, \"first\")\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..0b1fcfe 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,7 +168,15 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n-    def test_iterator_choices(self):\n+    def test_overriding_field_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+            \n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"\n         get_choices() works with Iterators.\n         \"\"\"\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..02e7a99 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,26 @@\n+\n+class InheritedChoicesTests(TransactionTestCase):\n+    def test_inherited_choices_display(self):\n+        class A(models.Model):\n+            foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class B(A):\n+            foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\"), (\"C\", \"output3\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+        instance = B(field_foo='A')\n+        self.assertEqual(instance.get_field_foo_display(), \"output1\")\n+\n+        instance = B(field_foo='B')\n+        self.assertEqual(instance.get_field_foo_display(), \"output2\")\n+\n+        instance = B(field_foo='C')\n+        self.assertEqual(instance.get_field_foo_display(), \"output3\")\n+\n import pickle\n \n from django import forms\n@@ -147,6 +170,7 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.test import TransactionTestCase\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..dd24104 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,7 +76,32 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    def test_sublanguage_with_base_language_available(self):\n+        # This test ensures no error when a sublanguage is specified and its base language is available.\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with self.settings(LANGUAGE_CODE='pt-BR', LANGUAGES=[('pt', 'Portuguese')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+        \n+        with self.settings(LANGUAGE_CODE='es-CO', LANGUAGES=[('es', 'Spanish')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    def test_sublanguage_without_base_language_available(self):\n+        # This test ensures an error is raised when a sublanguage is specified but its base language is not available.\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        with self.settings(LANGUAGE_CODE='fr-CA', LANGUAGES=[('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(msg, id='translation.E004'),\n+            ])\n+        \n+        with self.settings(LANGUAGE_CODE='es-MX', LANGUAGES=[('fr', 'French')]):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(msg, id='translation.E004'),\n+            ])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..efac791 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,59 @@\n+\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_missing_reference(self):\n+        # Test if integrity error is raised when the referenced object is missing.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        with self.assertRaises(Object.DoesNotExist):\n+            connection.creation.deserialize_db_from_string(data)\n+            ObjectReference.objects.get()  # This should not exist\n+\n+    def test_nonexistent_foreign_key(self):\n+        # Test deserialization with a foreign key reference that doesn't exist.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 999, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        with self.assertRaises(ObjectReference.DoesNotExist):\n+            connection.creation.deserialize_db_from_string(data)\n+            Object.objects.get()  # This should raise an error because obj_ref with pk 999 doesn't exist\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +62,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..0ca8c12 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -128,6 +128,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_fixed_hint_for_multiple_foreign_keys(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            group1 = models.ForeignKey(Group, models.CASCADE, related_name='group1')\n+            group2 = models.ForeignKey(Group, models.CASCADE, related_name='group2')\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.field', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_ambiguous_relationship_model(self):\n \n         class Person(models.Model):\n@@ -159,6 +188,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_fixed_hint_for_multiple_foreign_keys(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            group1 = models.ForeignKey(Group, models.CASCADE, related_name='group1')\n+            group2 = models.ForeignKey(Group, models.CASCADE, related_name='group2')\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.field', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..dac1cb5 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,7 +1249,73 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n-    def test_request_meta_filtering(self):\n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_nested_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'nested': [\n+                {\n+                    'key': 'value',\n+                    'secret': 'should_be_hidden',\n+                    'nested_tuple': (\n+                        {'token': 'also_should_be_hidden', 'api_key': 'hidden'},\n+                        {'foo': 'bar'},\n+                    ),\n+                }\n+            ],\n+            'another': {'password': 'hidden_too'},\n+        }\n+        cleansed = {\n+            'nested': [\n+                {\n+                    'key': 'value',\n+                    'secret': reporter_filter.cleansed_substitute,\n+                    'nested_tuple': (\n+                        {'token': reporter_filter.cleansed_substitute, 'api_key': reporter_filter.cleansed_substitute},\n+                        {'foo': 'bar'},\n+                    ),\n+                }\n+            ],\n+            'another': {'password': reporter_filter.cleansed_substitute},\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..64414e3 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1758,9 +1758,43 @@ class OperationTests(OperationTestBase):\n     def test_alter_index_together_remove(self):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        app_label = 'test_alterindexremove_unique'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n-    def test_add_constraint(self):\n+    def test_alter_index_together_add(self):\n+        app_label = 'test_alterindexadd_unique'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label)\n+        # Assure no initial constraint exists\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        # Add index together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        # Check the index now exists\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n         gt_constraint = models.CheckConstraint(check=gt_check, name=\"test_add_constraint_pony_pink_gt_2\")\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..632b131 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,6 +697,24 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n+    def test_delete_with_no_objects_deleted(self):\n+        \"\"\"\n+        Ensure that QuerySet.delete() returns a consistent result (0, {})\n+        or (0, {'app_label.ModelName': 0}) when there are no objects to delete.\n+        \"\"\"\n+        # Test with a simple model (no foreign keys)\n+        for model_class in [SimpleModel, AnotherSimpleModel]:  # Assuming SimpleModel and AnotherSimpleModel exist\n+            self.assertEqual(\n+                model_class.objects.filter(non_existent_field='value').delete(),\n+                (0, {'your_app_label.SimpleModel': 0})\n+            )\n+\n+        # Test with a model that has a foreign key\n+        self.assertEqual(\n+            ForeignKeyModel.objects.filter(non_existent_field='value').delete(),\n+            (0, {})\n+        )\n+\n     def test_fast_delete_combined_relationships(self):\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..e1bab66 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,7 +79,45 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n-    async def test_headers(self):\n+class TestASGIStaticFilesHandler(StaticFilesTestCase):\n+    async_request_factory = AsyncRequestFactory()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n+    async def test_static_file_with_special_characters(self):\n+        \"\"\"Test that files with special characters in the name are served correctly.\"\"\"\n+        request = self.async_request_factory.get('/static/test/special-@!&=+.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_static_file_large(self):\n+        \"\"\"Test that large files are served correctly.\"\"\"\n+        request = self.async_request_factory.get('/static/test/large-file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_cache_control_header(self):\n+        \"\"\"Verify that Cache-Control header is set correctly for static files.\"\"\"\n+        request = self.async_request_factory.get('/static/test/cached-file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertIn(b'Cache-Control', dict(response.items()))\n+        response.close()\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n             application,\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..132a6d1 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,18 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Original issue test cases\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('__strip__underscore-value___', 'strip-underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+            # Additional edge cases\n+            ('____leading_underscores', 'leading-underscores', False),\n+            ('trailing_dashes----', 'trailing-dashes', False),\n+            ('_multi___underscore--dash-', 'multi-underscore-dash', False),\n+            ('- - - spaced - - -', 'spaced', False),\n+            ('no-changes-needed', 'no-changes-needed', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..2ff5be0 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2830,6 +2830,68 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n+class DuplicateOptionsInFormFieldTests(TestCase):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        marley = Character.objects.create(username='Marley', last_action=timezone.now())\n+        threepwood = Character.objects.create(username='Threepwood', last_action=timezone.now())\n+\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        \n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+        \n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+        \n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n+\n+\n class FormFieldCallbackTests(SimpleTestCase):\n \n     def test_baseform_with_widgets_in_meta(self):\n",
  "django__django-13321": "",
  "django__django-13401": "",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..af55c8f 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,7 +45,24 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n-    def test_available_apps(self):\n+    def test_app_list_includes_model_class(self):\n+        \"\"\"\n+        Test to ensure that the app_list context includes the actual model class.\n+        \"\"\"\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n+        \n+        # Access the first model in the admin_views app\n+        article = apps[0]['models'][0]\n+        # Verify that the Article model object is correctly referenced\n+        self.assertEqual(article['object_name'], 'Article')\n+        self.assertEqual(article['model'], Article)\n+\n+        # Access the single model in the auth app\n+        user = apps[1]['models'][0]\n+        # Verify that the User model object is correctly referenced\n+        self.assertEqual(user['object_name'], 'User')\n+        self.assertEqual(user['model'], User)\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..65a71e9 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,6 +40,40 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_invalidation_on_email_change(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                # Change email\n+                setattr(user, user.get_email_field_name(), 'newemail@example.com')\n+                user.save()\n+                # Token should be invalid\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n+    def test_token_validity_with_same_email(self):\n+        \"\"\"Token remains valid if the email address remains unchanged.\"\"\"\n+        user = User.objects.create_user('sameemailuser', 'same@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+        # Re-save user without changing email\n+        user.save()\n+        # Token should still be valid\n+        self.assertIs(p0.check_token(user, tk1), True)\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..5b5ddfb 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..28bcea6 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,6 +19,41 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_when_argv_is_none(self):\n+        \"\"\"\n+        Program name is 'django-admin' even if sys.argv[0] is None.\n+        \"\"\"\n+        args = ['help', 'check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_custom_value(self):\n+        \"\"\"\n+        Custom program name is used when passed in argv.\n+        \"\"\"\n+        args = ['help', 'check']\n+        custom_prog_name = 'my-custom-admin'\n+        with captured_stdout() as out, captured_stderr() as err:\n+            execute_from_command_line([custom_prog_name] + args)\n+        self.assertIn(f'usage: {custom_prog_name} check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n@@ -26,6 +61,7 @@ from django.core.management.commands.runserver import (\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from unittest import mock\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..bdd0e97 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -44,9 +45,51 @@ class ShellCommandTestCase(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, \"Couldn't import bpython interface.\"):\n             call_command('shell', interface='bpython')\n \n-    # [1] Patch select to prevent tests failing when when the test suite is run\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    # [1] Patch select to prevent tests failing when the test suite is run\n     # in parallel mode. The tests are run in a subprocess and the subprocess's\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..2a8375e 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -967,7 +967,24 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n \n-    def test_verbose_name_plural_inline(self):\n+    def test_verbose_name_base_default_plural(self):\n+        # New test case to ensure that the verbose_name_plural for an Inline defaults to verbose_name if specified\n+        class DefaultPluralFromVerboseNameInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Verbatims'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [DefaultPluralFromVerboseNameInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        \n+        # Check that it pluralizes based on verbose_name, 'Verbatims' should be used in h2\n+        self.assertContains(response, '<h2>Verbatims</h2>')\n+        self.assertContains(response, 'Add another Verbatim')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name_plural = 'Non-verbose childs'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..b0ec862 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -596,6 +596,13 @@ class TestQuerying(TestCase):\n         )\n \n     def test_isnull_key_or_none(self):\n+        # Test case for verifying that using __isnull=True on a KeyTransform \n+        # should not match JSON null on SQLite and Oracle as per the issue.\n+        # This augments the original test by focusing on the 'j' key.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # Adjusted to check the right behavior\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..5198ae0 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -370,6 +370,68 @@ def mocked_is_overridden(self, setting):\n         self.DEFAULT_AUTO_FIELD != 'django.db.models.AutoField'\n     )\n \n+    def test_explicit_inherited_pk(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+        \n+        class Child(Parent):\n+            pass\n+        \n+        # Should not raise a warning, as the primary key is explicitly inherited.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+        \n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+        \n+        # Should not raise a warning, as the parent link is explicitly inherited with an explicit primary key.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+    \n+    def test_auto_created_inherited_pk(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        # Should raise a warning because a primary key is auto-created and not explicitly defined.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to point to a \"\n+                    \"subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n+    \n+    def test_auto_created_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        # Should raise a warning because a primary key is auto-created and not explicitly defined.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to point to a \"\n+                    \"subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n+\n \n @mock.patch('django.conf.UserSettingsHolder.is_overridden', mocked_is_overridden)\n @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n@@ -414,4 +476,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..f2a8046 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -272,6 +272,40 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n \n         class SomeForm(Form):\n             field = ModelMultipleChoiceField(ChoiceModel.objects.all())\n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+\n+...\n+\n+class ModelChoiceFieldErrorMessagesTestCase(TestCase):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Ensure the invalid value is included in the error message for invalid_choice in ModelChoiceField\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n+    def test_modelmultiplechoicefield_value_placeholder(self):\n+        # Ensure the invalid value is included in the error message for invalid_choice in ModelMultipleChoiceField\n+        f = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            ['invalid'],\n+        )\n \n         f = SomeForm({'field': ['<script>']})\n         self.assertHTMLEqual(\n@@ -307,4 +341,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..44c024e 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -19,7 +20,10 @@ class QTests(SimpleTestCase):\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n-    def test_combine_not_q_object(self):\n+    def test_dict_keys_in_q_object_with_or_operator(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         obj = object()\n         q = Q(x=1)\n         with self.assertRaisesMessage(TypeError, str(obj)):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..3c44986 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,12 +28,14 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n+from django.db.models import Exists, OuterRef, Q\n from django.utils.functional import SimpleLazyObject\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n     RemoteEmployee, Result, SimulationRun, Time,\n )\n+from django.db.models import Exists, OuterRef, Q\n \n \n class BasicExpressionsTests(TestCase):\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..2e11bf7 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1128,7 +1128,23 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n \n-    def test_resolver_match_on_request(self):\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial_unwrapping(self):\n+        tests = [\n+            ('partial', 'template.html', views.empty_view, ('template.html',)),\n+            ('partial_nested', 'nested_partial.html', views.nested_view, ('nested_partial.html',)),\n+            ('partial_wrapped', 'template.html', views.wrapped_view, ('template.html',)),\n+        ]\n+        for name, template_name, expected_func, expected_args in tests:\n+            with self.subTest(name=name):\n+                resolved = resolve(f'/{name}/')\n+                func_repr = f\"functools.partial({expected_func.__module__}.{expected_func.__name__}, template_name='{template_name}')\"\n+                expected_repr = (\n+                    f\"ResolverMatch(func={func_repr}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\"\n+                )\n+                self.assertEqual(repr(resolved), expected_repr)\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n@@ -1146,6 +1162,11 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from urlpatterns_reverse import views\n+from django.urls import resolve\n+from django.test import override_settings\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..f9d2c40 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2196,8 +2196,20 @@ class StartApp(AdminScriptTestCase):\n                     \"CommandError: '%s' is not a valid app directory. Please \"\n                     \"make sure the directory is a valid identifier.\" % bad_target\n                 )\n+    \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test startapp with a target directory name that includes a trailing slash.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app_with_slash')\n+        os.makedirs(app_dir)\n+        \n+        # Attempt to create a new app inside 'apps/app_with_slash/'.\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app_with_slash', '')])\n \n-    def test_importable_target_name(self):\n+        # Ensure there are no errors and that the expected file is created.\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n         _, err = self.run_django_admin(['startapp', 'app', 'os'])\n         self.assertOutput(\n             err,\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..f01867d 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,23 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonlypasswordhashwidget_label_for_attribute(self):\n+        \"\"\"\n+        Test that the ReadOnlyPasswordHashWidget does not include a\n+        'for' attribute in its label, as it has no labelable elements.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        widget = bound_field.field.widget\n+\n+        # Ensure that widget's id_for_label returns None\n+        self.assertIsNone(widget.id_for_label(\"id\"))\n+\n+        # Ensure the label_tag does not have a 'for' attribute\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..d957c56 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,6 +658,26 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n+    def test_missing_models_import(self):\n+        \"\"\"\n+        Ensure that when a migration is generated which includes models.Model or one of its subclass imported \n+        from models.py, the import statement for models is properly added to the migration file.\n+        \"\"\"\n+        Model = self.create_model(\n+            'MyModel',\n+            fields={\n+                'name': models.CharField(max_length=100),\n+            },\n+            bases=(app.models.MyMixin, models.Model,),\n+        )\n+        \n+        # Simulate migration writing\n+        migration_writer = MigrationWriter()\n+        serialized_migration = migration_writer.serialize(Model)\n+        \n+        # Check that 'from django.db import models' is present\n+        self.assertIn(\"from django.db import models\", serialized_migration)\n+        \n     def test_simple_migration(self):\n         \"\"\"\n         Tests serializing a simple migration.\n",
  "django__django-14608": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 0b8d2fa..ca33f9d 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -3349,6 +3349,7 @@ class AdminViewListEditable(TestCase):\n         non_form_errors = response.context['cl'].formset.non_form_errors()\n         self.assertIsInstance(non_form_errors, ErrorList)\n         self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n+        self.assertIn('nonform', non_form_errors.error_class)\n \n     def test_list_editable_ordering(self):\n         collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..a0fd6ff 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -31,7 +31,30 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n-    def test_get_on_intermediate_model(self):\n+    def test_m2m_through_fields_list_hashable_proxy_model(self):\n+        class BaseProxyPerson(models.Model):\n+            name = models.CharField(max_length=128)\n+        \n+        class ProxyPerson(BaseProxyPerson):\n+            class Meta:\n+                proxy = True\n+        \n+        class ProxyEvent(models.Model):\n+            title = models.CharField(max_length=50)\n+            invitees = models.ManyToManyField(\n+                ProxyPerson, through='ProxyInvitation',\n+                through_fields=['event', 'invitee'],\n+                related_name='proxyevents_invited',\n+            )\n+        \n+        class ProxyInvitation(models.Model):\n+            event = models.ForeignKey(ProxyEvent, models.CASCADE, related_name='invitations')\n+            invitee = models.ForeignKey(ProxyPerson, models.CASCADE, related_name='proxyinvitations')\n+        \n+        reverse_m2m = ProxyPerson._meta.get_field('proxyevents_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        # Check that the through_fields list is hashable\n+        self.assertIsInstance(hash(reverse_m2m), int)\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n         queryset = Membership.objects.get(person=self.jane, group=self.rock)\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..5bf51a0 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -294,8 +294,50 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n-@override_settings(ROOT_URLCONF='admin_views.urls')\n-class SeleniumTests(AdminSeleniumTestCase):\n+import json\n+from django.test import TestCase, RequestFactory\n+from django.urls import path, reverse\n+from django.utils.encoding import force_str\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.core.exceptions import PermissionDenied\n+from .models import Question\n+from .admin import QuestionAdmin\n+\n+class AutocompleteJsonViewTests(TestCase):\n+    \"\"\"\n+    Test the functionality of the AutocompleteJsonView including the new extension\n+    point for serializing results.\n+    \"\"\"\n+\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser(username='super', password='secret', email='super@example.com')\n+        self.client.login(username='super', password='secret')\n+        self.url = reverse('admin:autocomplete', args=['app', 'question'])\n+        self.opts = {'app_label': 'app', 'model_name': 'question'}\n+\n+    def test_serialize_result_extension(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return super().serialize_result(obj, to_field_name) | {'posted': str(obj.posted)}\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        with model_admin(Question, QuestionAdmin):\n+            response = CustomAutocompleteJsonView.as_view(admin_site=site)(request)\n+\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n \n     def setUp(self):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..0e22f46 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -430,6 +430,37 @@ class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n+\n+    def test_method_decorator_preserves_function_attributes(self):\n+        \"\"\"@method_decorator should preserve function attributes like __name__ and __module__.\"\"\"\n+        from functools import wraps\n+        from django.utils.decorators import method_decorator\n+        \n+        # Define a logger decorator which wraps the function and logs its call\n+        def logger(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                result = func(*args, **kwargs)\n+                return result\n+            return inner\n+        \n+        # Define a test class that uses the method_decorator\n+        @method_decorator(logger)\n+        class Test:\n+            def hello_world(self):\n+                \"\"\"A sample method to be decorated.\"\"\"\n+                return \"hello\"\n+        \n+        # Instantiate and call the method\n+        test_instance = Test()\n+        result = test_instance.hello_world()\n+        \n+        # Verify that the result is correct\n+        self.assertEqual(result, \"hello\")\n+        \n+        # Verify the method's __name__ and __module__ attributes are preserved\n+        self.assertEqual(test_instance.hello_world.__name__, \"hello_world\")\n+        self.assertIsNotNone(test_instance.hello_world.__module__)\n     def test_deny_decorator(self):\n         \"\"\"\n         Ensures @xframe_options_deny properly sets the X-Frame-Options header.\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..350b8cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..4b2379e 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -804,6 +804,32 @@ class OperationTests(OperationTestBase):\n                 (\"riders\", models.ManyToManyField(\"Rider\")),\n             ]),\n         ])\n+\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rename_model_noop'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Horse', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+\n+        # State changes should still occur\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Ensure no database queries are executed for forwards and backwards\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         Pony = project_state.apps.get_model(app_label, \"Pony\")\n         Rider = project_state.apps.get_model(app_label, \"Rider\")\n         pony = Pony.objects.create()\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..a090f86 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -137,6 +137,25 @@ class MultiValueFieldTest(SimpleTestCase):\n         self.assertIs(f.has_changed(['x', 'x'], ['y', 'y']), False)\n \n     def test_form_as_table(self):\n+        \"\"\"\n+        Test form rendering for MultiWidget without unnecessary index in the label's for attribute.\n+        \"\"\"\n+        form = ComplexFieldForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_field1\">Field1:</label></th>\n+            <td><input type=\"text\" name=\"field1_0\" id=\"id_field1_0\" required>\n+            <select multiple name=\"field1_1\" id=\"id_field1_1\" required>\n+            <option value=\"J\">John</option>\n+            <option value=\"P\">Paul</option>\n+            <option value=\"G\">George</option>\n+            <option value=\"R\">Ringo</option>\n+            </select>\n+            <input type=\"text\" name=\"field1_2_0\" id=\"id_field1_2_0\" required>\n+            <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n+            \"\"\",\n+        )\n         form = ComplexFieldForm()\n         self.assertHTMLEqual(\n             form.as_table(),\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..9973f25 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -93,6 +93,8 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://[a',\n             # Non-string.\n             23,\n+            '////]@N.AN',\n+            '#@A.bO',\n             # Hangs \"forever\" before fixing a catastrophic backtracking,\n             # see #11198.\n             'http://%s' % ('X' * 60,),\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..aaa94ce 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -1,7 +1,7 @@\n import datetime\n from decimal import Decimal\n \n-from django.core.exceptions import FieldDoesNotExist, FieldError\n+from django.core.exceptions import FieldDoesNotExist, FieldError, ValidationError\n from django.db.models import (\n     BooleanField, Case, CharField, Count, DateTimeField, DecimalField, Exists,\n     ExpressionWrapper, F, FloatField, Func, IntegerField, Max, OuterRef, Q,\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..6e3f842 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -10,6 +11,7 @@ from django.contrib.messages.storage.cookie import (\n from django.test import SimpleTestCase, override_settings\n from django.utils.crypto import get_random_string\n from django.utils.safestring import SafeData, mark_safe\n+from django.utils.safestring import SafeData, mark_safe\n \n from .base import BaseTests\n \n@@ -163,7 +165,28 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that the extra_tags attribute is correctly preserved when\n+        serialized and deserialized.\n+        \"\"\"\n+        storage = self.get_storage()\n+        encoder = MessageEncoder()\n+        decoder = MessageDecoder()\n+        \n+        test_cases = [\n+            {\"extra_tags\": \"\", \"expected\": \"\"},\n+            {\"extra_tags\": None, \"expected\": None},\n+            {\"extra_tags\": \"some tags\", \"expected\": \"some tags\"},\n+        ]\n+        \n+        for case in test_cases:\n+            with self.subTest(extra_tags=case[\"extra_tags\"]):\n+                original_message = Message(constants.INFO, \"Test message\", extra_tags=case[\"extra_tags\"])\n+                encoded_message = encoder.encode(original_message)\n+                decoded_message = decoder.decode(encoded_message)\n+                \n+                self.assertEqual(decoded_message.extra_tags, case[\"expected\"])\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..754ff70 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,4 +1,5 @@\n from pathlib import Path\n+from pathlib import Path\n from unittest import mock\n \n from django.template import autoreload\n",
  "django__django-15400": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\nindex f0097c4..436a1ea 100644\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -345,7 +345,49 @@ class SimpleLazyObjectTestCase(LazyObjectTestCase):\n         self.assertEqual(str(x), \"None\")\n         self.assertEqual(i, [1])\n \n-    def test_dict(self):\n+    def test_radd_with_non_lazy(self):\n+        # Testing right addition with a non-lazy object\n+        obj = self.lazy_wrap(5)\n+        result = 10 + obj\n+        self.assertEqual(result, 15)\n+\n+    def test_radd_with_lazy(self):\n+        # Testing right addition with another lazy object\n+        obj1 = self.lazy_wrap(3)\n+        obj2 = self.lazy_wrap(4)\n+        result = obj1 + obj2\n+        self.assertEqual(result, 7)\n+        self.assertEqual(2 + obj2, 6)\n+\n+    def test_radd_chain(self):\n+        # Testing chained right addition\n+        obj1 = self.lazy_wrap(1)\n+        obj2 = self.lazy_wrap(2)\n+        obj3 = self.lazy_wrap(3)\n+        result = 1 + obj1 + obj2 + obj3\n+        self.assertEqual(result, 7)\n+\n+    def test_radd_with_zero(self):\n+        # Testing right addition with zero\n+        obj = self.lazy_wrap(7)\n+        self.assertEqual(0 + obj, 7)\n+\n+    def test_radd_with_string(self):\n+        # Testing right addition with a string\n+        obj = self.lazy_wrap(\"world\")\n+        self.assertEqual(\"hello \" + obj, \"hello world\")\n+\n+    def test_radd_with_list(self):\n+        # Testing right addition with a list\n+        obj = self.lazy_wrap([3, 4])\n+        self.assertEqual([1, 2] + obj, [1, 2, 3, 4])\n+\n+    def test_radd_no_evaluation(self):\n+        # Ensure that radd doesn't force evaluation of the underlying object unnecessarily\n+        obj = self.lazy_wrap(1)\n+        other = 5\n+        self.assertEqual(other + obj, 6)\n+        self.assertIs(obj._wrapped, empty)  # Ensure lazy evaluation is still respected unless needed\n         # See ticket #18447\n         lazydict = SimpleLazyObject(lambda: {\"one\": 1})\n         self.assertEqual(lazydict[\"one\"], 1)\n",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..1e16289 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,15 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that was_modified_since handles an empty string without raising exceptions.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+        # Add additional checks to ensure it behaves as expected\n+        # Consider mtime is before/after default date if any\n+        self.assertFalse(was_modified_since(header=\"\", mtime=0))\n+        self.assertTrue(was_modified_since(header=\"\", mtime=999999999))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..5298c5e 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -5,6 +6,7 @@ from unittest import mock\n from admin_scripts.tests import AdminScriptTestCase\n \n from django.apps import apps\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n@@ -405,6 +407,23 @@ class CommandTests(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, msg):\n             management.call_command(\"subparser_dest\", subcommand=\"foo\", bar=12)\n \n+    def test_custom_formatter_class(self):\n+        \"\"\"Test that the create_parser method correctly sets the formatter_class\"\"\"\n+        epilog = \"Example usage: ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        cmd = BaseCommand()\n+        cmd.help = \"Import a contract from tzkt\\n\" + epilog\n+        parser = cmd.create_parser(\"manage.py\", \"tzkt_import\", epilog=epilog, formatter_class=ArgumentDefaultsHelpFormatter)\n+\n+        # Capture the output of parser.print_help()\n+        output = StringIO()\n+        with mock.patch('sys.stdout', new=output):\n+            parser.print_help()\n+\n+        # Check the output format\n+        self.assertIn(\"Example usage:\\n\", output.getvalue())\n+        self.assertIn(\"    ./manage.py tzkt_import\", output.getvalue())\n+        self.assertIn(\"KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\", output.getvalue())\n+\n     def test_create_parser_kwargs(self):\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = \"some epilog text\"\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..0962690 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,5 +1,8 @@\n+\n import os\n from datetime import datetime\n+import json\n+from django.core.serializers.json import DjangoJSONEncoder\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n@@ -217,6 +220,33 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"foo\": \"bar\"})\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"foo\": \"bar\"}</script>',\n+        )\n+    \n+    def test_json_script_default_encoder(self):\n+        # Test to ensure the default encoder still works as expected.\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_with_element_id_and_custom_encoder(self):\n+        class SimpleEncoder(json.JSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"encoded_key\": \"encoded_value\"})\n+\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}, element_id=\"custom_id\", encoder=SimpleEncoder),\n+            '<script id=\"custom_id\" type=\"application/json\">{\"encoded_key\": \"encoded_value\"}</script>',\n+        )\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..c1c9d58 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -205,5 +205,28 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             \"check_framework.template_test_apps.different_tags_app\",\n         ]\n     )\n+    def test_no_template_tags_conflict(self):\n+        # Test when there are no conflicting template tags in libraries or installed apps\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags\", \"unique_tags_app.templatetags.unique_tags\"\n+                ),\n+            ],\n+            INSTALLED_APPS=[\"check_framework.template_test_apps.unique_tags_app\"]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n+    def test_single_library_in_templates_options(self):\n+        # Test with only one library in TEMPLATES['OPTIONS']['libraries']\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"single_tags\", \"single_tags_app.templatetags.single_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..fff2d40 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,25 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_with_proxy(self):\n+        custom = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        another = AnotherModel.objects.create(custom=custom)\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        self.assertEqual(qs.get(), another)\n+\n+    def test_select_related_only_with_concrete_model(self):\n+        concrete = CustomModel.objects.create(name=\"Concrete Name\")\n+        another = AnotherModel.objects.create(custom=concrete)\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        self.assertEqual(qs.get(), another)\n+\n+    def test_select_related_only_with_invalid_field(self):\n+        custom = ProxyCustomModel.objects.create(name=\"Invalid Field\")\n+        AnotherModel.objects.create(custom=custom)\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__invalid_field\")\n+        with self.assertRaises(FieldError):\n+            qs.get()\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..9baf5ab 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,7 +157,12 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n-    @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n+    def test_parameters_ordering(self):\n+        # Test if additional parameters are placed before the dbname in the args list.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n \n@@ -183,4 +188,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..03a1be6 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,6 +1901,35 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.forms import formset_factory, BaseFormSet\n+        from django.forms.renderers import get_default_renderer\n+        from django.test import TestCase\n+        from django.utils.lru_cache import lru_cache as isolate_lru_cache\n+        \n+        class TestManagementFormDeprecation(TestCase):\n+        \n+            def test_no_management_form_warning(self):\n+                \"\"\"\n+                Management forms are already rendered with the new div template.\n+                \"\"\"\n+                ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                with isolate_lru_cache(get_default_renderer), self.settings(\n+                    FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+                ):\n+                    formset = ChoiceFormSet()\n+                    management_form_str = str(formset.management_form)\n+                    # Ensure no warning is raised during the rendering of management_form\n+                    self.assertNotIn('default.html', management_form_str)\n+            \n+            def test_regular_form_warning(self):\n+                ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                with isolate_lru_cache(get_default_renderer), self.settings(\n+                    FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+                ), self.assertRaisesMessage(\n+                    RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n+                ):\n+                    formset = ChoiceFormSet()\n+                    form_str = str(formset.forms[0])  # Render the first form, expecting the warning\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1938,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..eded0c1 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -179,6 +179,22 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n \n+    def test_empty_permitted_ignored_empty_form_true(self):\n+        # Test for the case where empty_permitted is set to True in form_kwargs\n+        ArticleFormSet = modelformset_factory(MyModel, fields=['a_field'])\n+        formset = ArticleFormSet(form_kwargs={\"empty_permitted\": True})\n+        self.assertTrue(hasattr(formset.empty_form, \"empty_permitted\"))\n+        # The behavior expected is that empty_form's empty_permitted is True, which checks if correctly the empty_form ignores the empty_permitted from form_kwargs\n+        self.assertTrue(formset.empty_form.empty_permitted)\n+\n+    def test_empty_permitted_ignored_empty_form_false(self):\n+        # Test for the case where empty_permitted is set to False in form_kwargs\n+        ArticleFormSet = modelformset_factory(MyModel, fields=['a_field'])\n+        formset = ArticleFormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertTrue(hasattr(formset.empty_form, \"empty_permitted\"))\n+        # The behavior expected is that empty_form's empty_permitted is True, which checks if correctly the empty_form ignores the empty_permitted from form_kwargs\n+        self.assertTrue(formset.empty_form.empty_permitted)\n+\n     def test_formset_validation(self):\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n",
  "django__django-16046": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..207a640 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+from django.urls import reverse\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,6 +894,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_link_generated_correctly_via_to_field(self):\n+        user = User.objects.create(username=\"testuser\", password=\"foo\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),  # assuming `uuid` is a field in the User model\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..01cb366 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -505,6 +505,21 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"</urlset>\"\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_sitemod_no_items_fix(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_sitemod_no_items_invalid(self):\n+        # Testing the behavior when lastmod is callable but raising unexpected exceptions\n+        index_invalid_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_invalid_response)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..e5e30a9 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n@@ -9,6 +10,8 @@ import shutil\n import sys\n import tempfile\n import threading\n+from unittest import mock\n+from django.core.cache import caches\n import time\n import unittest\n from pathlib import Path\n@@ -1755,7 +1758,43 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n-    def test_empty_cache_file_considered_expired(self):\n+    def test_has_key_race_handling(self):\n+        cache = caches['default']\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_has_key_with_existing_file(self):\n+        cache = caches['default']\n+        cache.add(\"key\", \"value\")\n+        self.assertTrue(cache.has_key(\"key\"))\n+\n+    def test_has_key_with_expired_file(self):\n+        cache = caches['default']\n+        cache.add(\"expired_key\", \"value\", timeout=-1)  # Set expired at creation\n+        with mock.patch(\"os.path.exists\", return_value=True):\n+            with mock.patch(\"builtins.open\", mock.mock_open(read_data=pickle.dumps(-1))):\n+                self.assertIs(cache.has_key(\"expired_key\"), False)\n+\n+    def test_has_key_deletion_during_check(self):\n+        cache = caches['default']\n+        cache.add(\"key_to_delete\", \"value\")\n+        \n+        # Simulate file deletion after exists() returns True\n+        original_exists = os.path.exists\n+\n+        def side_effect_exists(path):\n+            # Only fake the existence for the test's specific file\n+            if \"key_to_delete\" in path:\n+                return original_exists(path)\n+            return original_exists(path)\n+\n+        with mock.patch(\"os.path.exists\", side_effect=side_effect_exists) as mock_exists, \\\n+             mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key_to_delete\"), False)\n+            mock_exists.assert_called()\n+            mocked_open.assert_called_once()\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n             fh.write(b\"\")\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..597a3de 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,6 +1,8 @@\n+\n import datetime\n \n-from django.contrib.admin import ModelAdmin\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n@@ -33,7 +35,36 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required_only_add_permission(self):\n+        add_only_user = User.objects.create_user(\n+            username=\"add_only_user\", password=\"secret\", is_staff=True\n+        )\n+        add_only_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_only_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+    \n+    def test_submit_row_save_as_new_add_permission_required_no_permissions(self):\n+        no_perm_user = User.objects.create_user(\n+            username=\"no_perm_user\", password=\"secret\", is_staff=True\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = no_perm_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..01acfae 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -27,14 +28,26 @@ class JoinTests(SimpleTestCase):\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n     # Joining with unsafe joiners doesn't result in unsafe strings.\n-    @setup({\"join05\": \"{{ a|join:var }}\"})\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off\", {\"some_list\": some_list, \"some_var\": some_var})\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n     def test_join05(self):\n         output = self.engine.render_to_string(\n             \"join05\", {\"a\": [\"alpha\", \"beta & me\"], \"var\": \" & \"}\n         )\n         self.assertEqual(output, \"alpha &amp; beta &amp; me\")\n \n-    @setup({\"join06\": \"{{ a|join:var }}\"})\n+    @setup({\"join_autoescape_off_with_nonalphanumeric\": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})\n+    def test_join_autoescape_off_with_nonalphanumeric(self):\n+        some_list = [\"Hello <World>\", \"Example & Test\", \"<Data>\"]\n+        some_var = \"--non&alpha--\"\n+        output = self.engine.render_to_string(\"join_autoescape_off_with_nonalphanumeric\", {\"some_list\": some_list, \"some_var\": some_var})\n+        expected_result = \"Hello <World>--non&alpha--Example & Test--non&alpha--<Data>\"\n+        self.assertEqual(output, expected_result)\n     def test_join06(self):\n         output = self.engine.render_to_string(\n             \"join06\", {\"a\": [\"alpha\", \"beta & me\"], \"var\": mark_safe(\" & \")}\n@@ -78,4 +91,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..0ffd080 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -600,7 +600,32 @@ class BulkCreateTests(TestCase):\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n-    def test_update_conflicts_two_fields_unique_fields_first(self):\n+    @skipUnlessDBFeature(\n+        \"supports_update_conflicts\", \"supports_update_conflicts_with_target\", \n+        \"can_return_rows_from_bulk_insert\"\n+    )\n+    def test_bulk_create_update_conflicts_returning_ids(self):\n+        TwoFields.objects.bulk_create(\n+            [\n+                TwoFields(f1=1, f2=10, name=\"m\"),\n+                TwoFields(f1=2, f2=20, name=\"n\"),\n+            ]\n+        )\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=10, name=\"x\"),\n+            TwoFields(f1=2, f2=20, name=\"y\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"f1\", \"f2\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n         self._test_update_conflicts_two_fields([\"f1\"])\n \n     @skipUnlessDBFeature(\n@@ -816,4 +841,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..a79d012 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -496,7 +496,30 @@ def test_keymaps():\n         assert isinstance(mpl.rcParams[k], list)\n \n \n-def test_rcparams_reset_after_fail():\n+\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend\n+\n+def test_get_backend_with_rc_context():\n+    # Testing the issue where get_backend() clears figures made with rc_context\n+    from matplotlib._pylab_helpers import Gcf\n+\n+    # Create a figure within an rc_context\n+    with plt.rc_context():\n+        fig1 = plt.figure()\n+    \n+    # Capture the state of Gcf before calling get_backend()\n+    before_backend_call = list(Gcf.figs.keys())\n+    \n+    # Call get_backend() (this should not clear the figures)\n+    get_backend()\n+    \n+    # Capture the state of Gcf after get_backend() is called\n+    after_backend_call = list(Gcf.figs.keys())\n+\n+    # Ensure that the figure is still present after the call\n+    assert before_backend_call == after_backend_call, \\\n+        f\"Figures disappeared after get_backend(): before {before_backend_call}, after {after_backend_call}\"\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..895be61 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,6 +21,17 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_3d_axes(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    \n+    ax_test.set_visible(False)  # The 3D subplot should be invisible\n+    ax_ref.set_visible(True)    # The 3D subplot should be visible\n+    \n+    ax_test.scatter(1, 1, 1)\n+    ax_ref.scatter(1, 1, 1)\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..66edf6c 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,8 +774,15 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n-def test_get_set_draggable():\n-    legend = plt.legend()\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_creation_with_draggable_keyword(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test')\n+    legend = ax.legend(draggable=draggable)\n+    assert legend.get_draggable() is draggable\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='data')\n+    legend = ax.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n     assert legend.get_draggable()\n@@ -785,7 +792,9 @@ def test_get_set_draggable():\n \n def test_alpha_handles():\n     x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n-    legend = plt.legend()\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='data')\n+    legend = ax.legend()\n     for lh in legend.legendHandles:\n         lh.set_alpha(1.0)\n     assert lh.get_facecolor()[:-1] == hh[1].get_facecolor()[:-1]\n",
  "matplotlib__matplotlib-23964": "",
  "matplotlib__matplotlib-23987": "",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..9c3cfb1 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -58,37 +58,280 @@ def _generate_complete_test_figure(fig_ref):\n     # Ensure lists also pickle correctly.\n     plt.subplot(3, 3, 1)\n     plt.plot(list(range(10)))\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Previously problematic line\n+\n+    # Try pickling the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n \n+    # Unpickle and check if it loads without error\n+    loaded = pickle.loads(pkl.getvalue())\n+    loaded.canvas.draw()  # Ensure the figure can still be drawn\n+\n+    plt.close(fig)\n+    plt.close(loaded)\n     plt.subplot(3, 3, 2)\n     plt.contourf(data, hatches=['//', 'ooo'])\n     plt.colorbar()\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Previously problematic line\n+\n+    # Try pickling the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+\n+    # Unpickle and check if it loads without error\n+    loaded = pickle.loads(pkl.getvalue())\n+    loaded.canvas.draw()  # Ensure the figure can still be drawn\n+\n+    plt.close(fig)\n+    plt.close(loaded)\n     plt.subplot(3, 3, 3)\n     plt.pcolormesh(data)\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Previously problematic line\n+\n+    # Try pickling the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n \n+    # Unpickle and check if it loads without error\n+    loaded = pickle.loads(pkl.getvalue())\n+    loaded.canvas.draw()  # Ensure the figure can still be drawn\n+\n+    plt.close(fig)\n+    plt.close(loaded)\n     plt.subplot(3, 3, 4)\n     plt.imshow(data)\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Previously problematic line\n+\n+    # Try pickling the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+\n+    # Unpickle and check if it loads without error\n+    loaded = pickle.loads(pkl.getvalue())\n+    loaded.canvas.draw()  # Ensure the figure can still be drawn\n+\n+    plt.close(fig)\n+    plt.close(loaded)\n     plt.subplot(3, 3, 5)\n     plt.pcolor(data)\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Previously problematic line\n+\n+    # Try pickling the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+\n+    # Unpickle and check if it loads without error\n+    loaded = pickle.loads(pkl.getvalue())\n+    loaded.canvas.draw()  # Ensure the figure can still be drawn\n \n+    plt.close(fig)\n+    plt.close(loaded)\n     ax = plt.subplot(3, 3, 6)\n     ax.set_xlim(0, 7)\n     ax.set_ylim(0, 9)\n     plt.streamplot(x, y, u, v)\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Previously problematic line\n+\n+    # Try pickling the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+\n+    # Unpickle and check if it loads without error\n+    loaded = pickle.loads(pkl.getvalue())\n+    loaded.canvas.draw()  # Ensure the figure can still be drawn\n \n+    plt.close(fig)\n+    plt.close(loaded)\n     ax = plt.subplot(3, 3, 7)\n     ax.set_xlim(0, 7)\n     ax.set_ylim(0, 9)\n     plt.quiver(x, y, u, v)\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Previously problematic line\n+\n+    # Try pickling the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+\n+    # Unpickle and check if it loads without error\n+    loaded = pickle.loads(pkl.getvalue())\n+    loaded.canvas.draw()  # Ensure the figure can still be drawn\n \n+    plt.close(fig)\n+    plt.close(loaded)\n     plt.subplot(3, 3, 8)\n     plt.scatter(x, x ** 2, label='$x^2$')\n     plt.legend(loc='upper left')\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Previously problematic line\n+\n+    # Try pickling the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+\n+    # Unpickle and check if it loads without error\n+    loaded = pickle.loads(pkl.getvalue())\n+    loaded.canvas.draw()  # Ensure the figure can still be drawn\n+\n+    plt.close(fig)\n+    plt.close(loaded)\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Previously problematic line\n+\n+    # Try pickling the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+\n+    # Unpickle and check if it loads without error\n+    loaded = pickle.loads(pkl.getvalue())\n+    loaded.canvas.draw()  # Ensure the figure can still be drawn\n \n+    plt.close(fig)\n+    plt.close(loaded)\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n@@ -99,10 +342,64 @@ def test_complete(fig_test, fig_ref):\n     pickle.dump(fig_ref, pkl, pickle.HIGHEST_PROTOCOL)\n     loaded = pickle.loads(pkl.getbuffer())\n     loaded.canvas.draw()\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Previously problematic line\n+\n+    # Try pickling the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+\n+    # Unpickle and check if it loads without error\n+    loaded = pickle.loads(pkl.getvalue())\n+    loaded.canvas.draw()  # Ensure the figure can still be drawn\n \n+    plt.close(fig)\n+    plt.close(loaded)\n     fig_test.set_size_inches(loaded.get_size_inches())\n     fig_test.figimage(loaded.canvas.renderer.buffer_rgba())\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Previously problematic line\n+\n+    # Try pickling the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+\n+    # Unpickle and check if it loads without error\n+    loaded = pickle.loads(pkl.getvalue())\n+    loaded.canvas.draw()  # Ensure the figure can still be drawn\n+\n+    plt.close(fig)\n+    plt.close(loaded)\n     plt.close(loaded)\n \n \n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..70c31a3 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,35 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+def test_mplcursor_attribute_error():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    # Reproduce the scenario described in the bug report\n+    x = np.arange(1, 11)    \n+    y1 = x\n+\n+    plt.scatter(x, y1)\n+\n+    mplcursors.cursor()\n+    plt.show()  # This should be manually inspected for handling without error.\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_mplcursor_attribute_error():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    # Reproduce the scenario described in the bug report\n+    x = np.arange(1, 11)    \n+    y1 = x\n+\n+    plt.scatter(x, y1)\n+\n+    mplcursors.cursor()\n+    plt.show()  # This should be manually inspected for handling without error.\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..688b36f 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -6,6 +7,7 @@ import pytest\n from numpy.testing import assert_array_equal, assert_array_almost_equal\n \n from seaborn._core.groupby import GroupBy\n+from pandas.testing import assert_frame_equal\n from seaborn._stats.regression import PolyFit\n \n \n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..0ff19db 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -707,9 +707,26 @@ class TestFacetGrid:\n                     assert mpl.colors.same_color(tick.tick2line.get_color(), color)\n                     assert tick.get_pad() == pad\n \n+import numpy as np\n+import pandas as pd\n+import seaborn as sns\n+import pytest\n+from seaborn import axisgrid as ag\n+import matplotlib.pyplot as plt\n+import numpy.testing as npt\n+from matplotlib import scatterplot\n+from seaborn import histplot, kdeplot\n+from matplotlib.colors import to_rgba\n \n class TestPairGrid:\n \n+    def test_pairplot_column_multiindex(self):\n+        cols = pd.MultiIndex.from_arrays([[\"A\", \"B\"], [1, 2]])\n+        df = pd.DataFrame(np.random.rand(100, 4), columns=cols)\n+        g = ag.pairplot(df)\n+        expected_diag_vars = df.columns.tolist()\n+        assert g.diag_vars == expected_diag_vars\n+\n     rs = np.random.RandomState(sum(map(ord, \"PairGrid\")))\n     df = pd.DataFrame(dict(x=rs.normal(size=60),\n                            y=rs.randint(0, 4, size=(60)),\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..e44dc4f 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,6 +1,11 @@\n-import json\n+\n import os\n import textwrap\n+import pytest\n+import json\n+import flask\n+from flask import current_app\n+import tomllib\n \n import pytest\n \n@@ -19,6 +24,21 @@ def common_object_test(app):\n \n \n def test_config_from_pyfile():\n+    ...\n+\n+\n+def test_config_from_file_toml():\n+    # Skip the test if Python version is lower than 3.11 (tomllib is not available)\n+    tomllib = pytest.importorskip(\"tomllib\", reason=\"tomllib added in 3.11\")\n+    \n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    \n+    # Testing loading TOML file in binary mode\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.toml\"), tomllib.load, mode=\"rb\"\n+    )\n+    common_object_test(app)\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n     common_object_test(app)\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/exceptions.py b/requests/exceptions.py\nindex e0ab26b..4c24b59 100644\n--- a/requests/exceptions.py\n+++ b/requests/exceptions.py\n@@ -27,6 +27,17 @@ class RequestException(IOError):\n         super(RequestException, self).__init__(*args, **kwargs)\n \n \n+from requests.packages.urllib3.exceptions import DecodeError as URLLib3DecodeError\n+from requests.packages.urllib3.exceptions import TimeoutError as URLLib3TimeoutError\n+\n+...\n+\n+class DecodeError(RequestException):\n+    \"\"\"Failed to decode response content.\"\"\"\n+    \n+class TimeoutError(RequestException):\n+    \"\"\"The request timed out.\"\"\"\n+    \n class HTTPError(RequestException):\n     \"\"\"An HTTP error occurred.\"\"\"\n \n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..cd78ba5 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,40 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_iter_content_with_unicode_encoding(self):\n+        \"\"\"\n+        Additional test to verify iter_content with decode_unicode=True\n+        returns unicode strings for a known encoding.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = 'utf-8'  # Assume the content is encoded in UTF-8\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+\n+    def test_response_iter_content_without_known_encoding(self):\n+        \"\"\"\n+        Test to verify iter_content with decode_unicode=True returns\n+        bytes when encoding is None, as no decoding can occur.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = None  # Unknown encoding\n+        chunks = r.iter_content(decode_unicode=True)\n+        # Since no encoding is provided, the output should be bytes\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n+\n+    def test_response_iter_content_with_partial_content(self):\n+        \"\"\"\n+        Verify that iter_content can handle partial chunks correctly \n+        and decode them when decode_unicode=True.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'Hello, World! Some more text here.')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(chunk_size=5, decode_unicode=True)\n+        for chunk in chunks:\n+            assert isinstance(chunk, str)  # Ensure each chunk is decoded to str\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..b71817e 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -731,8 +731,41 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             })\n \n             return args\n-\n-        for service in SERVICES:\n+        # Additional test cases for verifying the list in hooks\n+        def test_single_hook_function_as_list(self):\n+            def add_baz_header(args):\n+                if not args.get('headers'):\n+                    args['headers'] = {}\n+                args['headers'].update({\n+                    'X-Baz': 'baz'\n+                })\n+                return args\n+\n+            hooks = [add_baz_header]\n+            r = requests.models.Request(hooks={'args': hooks})\n+            assert_hooks_are_callable(r.hooks)\n+\n+        def test_empty_hook_list(self):\n+            hooks = []\n+            r = requests.models.Request(hooks={'args': hooks})\n+            assert_hooks_are_callable(r.hooks)\n+\n+        def test_mixed_valid_hooks_and_invalid_entries(self):\n+            def add_qux_header(args):\n+                if not args.get('headers'):\n+                    args['headers'] = {}\n+                args['headers'].update({\n+                    'X-Qux': 'qux'\n+                })\n+                return args\n+\n+            hooks = [add_qux_header, \"not_callable\", 42]\n+            r = requests.models.Request(hooks={'args': hooks})\n+            for hook in r.hooks['args']:\n+                if callable(hook):\n+                    assert callable(hook) is True\n+                else:\n+                    assert callable(hook) is False\n             url = service('headers')\n \n             response = get(url=url,\n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..2b70860 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -71,12 +71,13 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: unknown-option=yes\" in output.out\n \n \n-def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n+def test_unknown_short_option_name_no_traceback(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n     with pytest.raises(_UnrecognizedOptionError):\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback (most recent call last):\" not in output.err\n \n \n def test_unknown_confidence(capsys: CaptureFixture) -> None:\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..4e08661 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,27 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_option(self) -> None:\n+        \"\"\"Test that `ignore-paths` works correctly with `--recursive=y`.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                # Assume `pyproject.toml` is correctly placed in regrtest_data\n+                # and ignore-paths is defined in it as specified in the issue.\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^directory/ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..2844455 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,28 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_module_with_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that linting a directory with a module having the same name does not fail for missing __init__.py\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"same_name/same_name.py\", \"same_name/other.py\"])\n+        linter.check([\"same_name\"])\n+    assert not linter.stats.by_msg\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_module_with_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that linting a directory with a module having the same name does not fail for missing __init__.py\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"same_name/same_name.py\", \"same_name/other.py\"])\n+        linter.check([\"same_name\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..88a3e86 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -298,6 +298,33 @@ class TestImportPath:\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n+    def test_import_once_with_importlib(self, tmp_path: Path) -> None:\n+        \"\"\"Test that a module is only imported once with importlib mode.\"\"\"\n+        # Create two modules that import each other\n+        mod1 = tmp_path / \"mod1.py\"\n+        mod2 = tmp_path / \"mod2.py\"\n+        mod1.write_text(\"import mod2\", encoding=\"utf-8\")\n+        mod2.write_text(\"import mod1\", encoding=\"utf-8\")\n+        \n+        # Import mod1 using importlib\n+        mod1_obj = import_path(mod1, mode=\"importlib\", root=tmp_path)\n+        \n+        # Check that mod1 and mod2 are in sys.modules\n+        assert 'mod1' in sys.modules\n+        assert 'mod2' in sys.modules\n+        \n+        # Check that importing mod1 again returns the same object\n+        imported_mod1 = import_path(mod1, mode=\"importlib\", root=tmp_path)\n+        assert imported_mod1 is mod1_obj\n+        \"\"\"`importlib` mode does not change sys.path.\"\"\"\n+        module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module.foo(2) == 42  # type: ignore[attr-defined]\n+        assert str(simple_module.parent) not in sys.path\n+        assert module.__name__ in sys.modules\n+        assert module.__name__ == \"_src.tests.mymod\"\n+        assert \"_src\" in sys.modules\n+        assert \"_src.tests\" in sys.modules\n+\n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n     ) -> None:\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..8ab0505 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -6,6 +7,39 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n+    \"\"\"Test the ColoredLevelFormatter with the updated default format.\"\"\"\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=logging.DEBUG,\n+        pathname=\"dummy_path/utils.py\",\n+        lineno=114,\n+        msg=\"Test log message for the new format\",\n+        args=(),\n+        exc_info=None,\n+    )\n+\n+    class ColorConfig:\n+        class option:\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    # Check with markup enabled\n+    output = formatter.format(record)\n+    assert output == (\n+        \"\\x1b[34mDEBUG   \\x1b[0mdummy_module:utils.py:114 Test log message for the new format\"\n+    )\n+\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    # Check with markup disabled\n+    output = formatter.format(record)\n+    assert output == (\n+        \"DEBUG    dummy_module:utils.py:114 Test log message for the new format\"\n+    )\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n     record = logging.LogRecord(\n",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..3c2eb84 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,3 +1,4 @@\n+\n import os\n from xml.dom import minidom\n \n@@ -157,6 +158,30 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n+\n     @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..84a6941 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,31 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_exception_in_repr():\n+    \"\"\"Ensure saferepr can handle exceptions raised in __repr__ method.\"\"\"\n+    class FaultyRepr:\n+        def __repr__(self):\n+            raise ValueError(\"Error in repr\")\n+\n+    # The saferepr should handle the error and provide a safe fallback representation\n+    result = saferepr(FaultyRepr())\n+    assert result.startswith(\"<[ValueError('Error in repr')] FaultyRepr object at 0x\")\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +178,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..c104b91 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,7 @@\n import os\n import sys\n+import os\n+\n from unittest import mock\n \n import pytest\n@@ -707,7 +709,57 @@ class TestFunctional:\n         reprec.assertoutcome(skipped=1)\n \n \n-class TestKeywordSelection:\n+class TestReevaluationDynamicExpr:\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360 Verifies the reevaluation of string conditions for `skipif`.\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+            \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+            \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+    def test_different_conditions(self, testdir):\n+        \"\"\"Tests multiple different skip conditions to ensure no caching conflicts.\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            \n+            cond = 'win32'\n+            @pytest.mark.skipif(\"cond == 'win32'\")\n+            def test_skip_on_win32():\n+                assert True\n+\n+            cond = 'linux'\n+            @pytest.mark.skipif(\"cond == 'linux'\")\n+            def test_skip_on_linux():\n+                assert True\n+            \"\"\"\n+        )\n+\n+        reprec1 = testdir.inline_run(py_file1)\n+        reprec1.assertoutcome(passed=1, skipped=1)\n     def test_select_simple(self, testdir):\n         file_test = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..9eee57e 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -5,6 +6,7 @@ from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n+from _pytest.pytester import Testdir\n \n \n class TestEvaluation:\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..6c9d3e3 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -21,6 +22,7 @@ from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n from _pytest.tmpdir import get_user\n from _pytest.tmpdir import TempdirFactory\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest.tmpdir import TempPathFactory\n \n \n@@ -433,7 +435,18 @@ def test_basetemp_with_read_only_files(pytester: Pytester) -> None:\n         import os\n         import stat\n \n-        def test(tmp_path):\n+def test_tmp_path_factory_handles_invalid_dir_characters_with_custom_username(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    # simulate a username with characters that are typically invalid for directories\n+    custom_username = \"invalid|username\"\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: custom_username)\n+    # Reset caches\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    # check if the illegal characters in the username are handled correctly\n+    assert \"pytest-of-unknown\" in str(p)\n             fn = tmp_path / 'foo.txt'\n             fn.write_text('hello')\n             mode = os.stat(str(fn)).st_mode\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..55c375e 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,39 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+from sklearn.linear_model import RidgeClassifierCV\n+import numpy as np\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n \n-def test_ridgecv_store_cv_values():\n+    # Setup\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Test for single output\n+    y = rng.randint(0, 2, size=n_samples)\n+    clf_single = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    clf_single.fit(x, y)\n+    assert clf_single.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Test for multi-target output\n+    n_responses = 3\n+    y_multi = rng.randint(0, 2, size=(n_samples, n_responses))\n+    clf_multi = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    clf_multi.fit(x, y_multi)\n+    assert clf_multi.cv_values_.shape == (n_samples, n_responses, n_alphas)\n+    \n+    # Test with cv=None and store_cv_values=True: Expectation - Error\n+    try:\n+        clf_error = RidgeClassifierCV(alphas=alphas, store_cv_values=True, cv=5)  # cv should be None to use store_cv_values\n+        clf_error.fit(x, y)\n+    except ValueError as e:\n+        assert \"cv!=None and store_cv_values=True are incompatible\" in str(e)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..1612c7d 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -12,6 +12,9 @@ from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n from sklearn.mixture.bayesian_mixture import _log_wishart_norm\n \n from sklearn.mixture import BayesianGaussianMixture\n+from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import ignore_warnings\n+from sklearn.metrics.cluster import adjusted_rand_score\n \n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n from sklearn.exceptions import ConvergenceWarning\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..8542945 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,54 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_ignore_unknown_with_mixed_length():\n+    X_train = np.array(['short', 'medium', 'verylong']).reshape((-1, 1))\n+    X_test = np.array(['unknown1', 'verylong']).reshape((-1, 1))\n+    encoder = OneHotEncoder(handle_unknown='ignore')\n+    encoder.fit(X_train)\n+    transformed = encoder.transform(X_test).toarray()\n+    expected = np.array([[0., 0., 0.], [0., 0., 1.]])\n+    assert_array_equal(transformed, expected)\n+\n+def test_one_hot_encoder_ignore_unknown_all_unknowns():\n+    X_train = np.array(['cat', 'dog', 'fish']).reshape((-1, 1))\n+    X_test = np.array(['bird', 'rat']).reshape((-1, 1))\n+    encoder = OneHotEncoder(handle_unknown='ignore')\n+    encoder.fit(X_train)\n+    transformed = encoder.transform(X_test).toarray()\n+    expected = np.array([[0., 0., 0.], [0., 0., 0.]])\n+    assert_array_equal(transformed, expected)\n+\n+def test_one_hot_encoder_ignore_unknown_empty_category():\n+    X_train = np.array([]).reshape((-1, 1))\n+    X_test = np.array(['bird', 'cat']).reshape((-1, 1))\n+    encoder = OneHotEncoder(handle_unknown='ignore')\n+    encoder.fit(X_train)\n+    transformed = encoder.transform(X_test).toarray()\n+    expected = np.array([[0.], [0.]])\n+    assert_array_equal(transformed, expected)\n+\n+import numpy as np\n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+import pytest\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..e2dc1a2 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,46 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+from sklearn.mixture import GaussianMixture\n+from numpy.testing import assert_array_equal\n+import numpy as np\n \n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Ensuring fit_predict is the same as fit.predict with n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_n_init_multiple_components():\n+    # Test with varying number of components and n_init > 1\n+    X = np.random.RandomState(42).randn(1000, 5)\n+    for n_components in range(2, 7):  # testing different component sizes\n+        gm = GaussianMixture(n_components=n_components, n_init=5, random_state=42)\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_different_random_states():\n+    # Test GaussianMixture with different random states\n+    X = np.random.RandomState(100).randn(1000, 5)\n+    gm = GaussianMixture(n_components=3, n_init=3)  # Different from initial example\n+    gm.fit(X)  # Fit first to ensure initialized\n+    for random_state in [0, 1, 2, 42, 100]:\n+        gm.random_state = random_state\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_with_different_n_init():\n+    # Test GaussianMixture behavior with varying n_init values\n+    X = np.random.RandomState(42).randn(1000, 5)\n+    for n_init in range(1, 6):  # Test various initialization counts\n+        gm = GaussianMixture(n_components=5, n_init=n_init, random_state=42)\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..5729853 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -71,7 +72,26 @@ def test_kernel_pca_consistent_transform():\n     assert_array_almost_equal(transformed1, transformed2)\n \n \n-def test_kernel_pca_sparse():\n+from sklearn.utils.testing import assert_allclose\n+\n+def test_kernel_pca_sign_deterministic_output():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=0)\n+\n+    # Transform multiple times and check if the signs are consistent\n+    transformed1 = kpca.fit_transform(X)\n+    transformed2 = kpca.fit_transform(X)\n+    transformed3 = kpca.fit_transform(X)\n+    \n+    # The absolute values should be the same for all transformations\n+    abs_transformed1 = np.abs(transformed1)\n+    abs_transformed2 = np.abs(transformed2)\n+    abs_transformed3 = np.abs(transformed3)\n+\n+    assert_allclose(abs_transformed1, abs_transformed2, atol=1e-7)\n+    assert_allclose(abs_transformed2, abs_transformed3, atol=1e-7)\n+    assert_allclose(abs_transformed1, abs_transformed3, atol=1e-7)\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..f9be449 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,6 +1058,19 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n+def test_pipeline_len():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.svm import SVC\n+\n+    # Create a simple pipeline\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    # Test that the length of the pipeline is 2\n+    assert len(pipe) == 2\n+\n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n@@ -1070,4 +1083,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..a0707cc 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n@@ -295,6 +298,27 @@ def test_score_samples():\n                        clf2.score_samples([[2., 2.]]))\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start():\n+    \"\"\"Test iterative addition of iTrees to an iForest \"\"\"\n+    \n+    rng = check_random_state(0)\n+    X = rng.randn(20, 2)\n+    \n+    # fit first 10 trees\n+    clf = IsolationForest(n_estimators=10, max_samples=20,\n+                          random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    # remember the 1st tree\n+    tree_1 = clf.estimators_[0]\n+    # fit another 10 trees\n+    clf.set_params(n_estimators=20)\n+    clf.fit(X)\n+    # expecting 20 fitted trees and no overwritten trees\n+    assert len(clf.estimators_) == 20\n+    assert clf.estimators_[0] is tree_1\n+\n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..b232032 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,20 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+    # Additional test cases for discrete_features variations\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test with an array of indices\n+        mi_indices = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        assert_array_equal(mi_2, mi_indices)\n+\n+        # Test with a full boolean mask\n+        mi_mask = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        assert_array_equal(mi_2, mi_mask)\n+\n+        # Test with mismatch in length of discrete_features boolean mask\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False])\n+\n+        # Test with invalid indices\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[0, 3])\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..a19ad26 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,9 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+import unittest\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,8 +218,15 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n-\n-def test_pipeline():\n+def test_vector_param_with_print_changed_only():\n+    # Ensure that vector parameters don't result in an error with print_changed_only=True\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    except Exception as e:\n+        assert False, f\"Test failed with an exception: {e}\"\n+    finally:\n+        set_config(print_changed_only=False)  # Reset config to avoid side effects\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..305ef55 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,21 @@\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(datasets.load_iris(return_X_y=True), VotingClassifier(\n+        [('lr', LogisticRegression()), ('rf', RandomForestClassifier())])),\n+     (datasets.load_diabetes(return_X_y=True), VotingRegressor(\n+        [('lr', LinearRegression()), ('rf', RandomForestRegressor())]))]\n+)\n+def test_none_estimator_raises_no_error(X, y, voter):\n+    # Check that setting an estimator to None and using sample weights does not raise an error\n+    rng = check_random_state(42)\n+    sample_weight = rng.rand(len(y))\n+    voter.fit(X, y, sample_weight=sample_weight)\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=sample_weight)\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape[0] == y.shape[0]\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..2897b4a 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,6 +160,32 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+import numpy as np\n+import pytest\n+from sklearn.utils._testing import assert_raises, assert_raise_message\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+\n+# Add test for GridSearch parameter checking issue\n+def test_gridsearch_param_types():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.model_selection import GridSearchCV\n+    from sklearn.neighbors import KNeighborsClassifier\n+\n+    # Dummy data\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+    \n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+    \n+    # Parameter grid with numpy types\n+    params = {'nca__tol': [0.1, 0.5, 1.0],  # float and numpy float\n+              'nca__n_components': np.arange(1, 10, dtype=np.int64)}  # numpy int\n+    \n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)  # Should not raise any TypeError\n \n def test_transformation_dimensions():\n     X = np.arange(12).reshape(4, 3)\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..c4690f7 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,6 +679,26 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for ZeroDivisionError when support_vectors_ is empty\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([\n+        [0, 1, 0, 0],\n+        [0, 0, 0, 1],\n+        [0, 0, 1, 0],\n+        [0, 0, 0, 1]\n+    ])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+\n+    # Verify that the support_vectors_ and dual_coef_ are properly structured\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n \n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..2780e8e 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,6 +972,8 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n+import pytest\n+\n @ignore_warnings\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n@@ -980,7 +982,13 @@ def test_repeated_cv_value_errors():\n         assert_raises(ValueError, cv, n_repeats=1.5)\n \n \n-def test_repeated_kfold_determinstic_split():\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=6, n_splits=2, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n     X = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n     random_state = 258173307\n     rkf = RepeatedKFold(\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..a35b0da 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,9 +1,15 @@\n+\n import warnings\n import numpy as np\n import pickle\n import copy\n \n import pytest\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn import set_config\n+from sklearn.model_selection import train_test_split\n+from sklearn.datasets import make_classification\n \n from sklearn.datasets import make_regression\n from sklearn.isotonic import (\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..5b6ffe2 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2121,6 +2121,34 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n \n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output_with_zero_features(empty_selection):\n+    \"\"\"Check that pandas output works with transformers handling zero features.\n+\n+    Non-regression test for gh-25487\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame([[5.0, 3.2], [0.0, 1.5], [2.4, -0.3]], columns=[\"c\", \"d\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", RobustScaler(), [\"c\", \"d\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert X_out.equals(pd.DataFrame(RobustScaler().fit_transform(X), columns=[\"numerical__c\", \"numerical__d\"]))\n+    \n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert X_out.equals(pd.DataFrame(RobustScaler().fit_transform(X), columns=[\"c\", \"d\"]))\n+\n     # The feature names are prefixed because verbose_feature_names_out=True is default\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n@@ -2128,4 +2156,4 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..30bce71 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,8 +1,10 @@\n+\n from __future__ import annotations\n \n from typing import overload\n \n myint = int\n+String = str  # Added for use in the new test case for the issue\n \n \n def sum(x: myint, y: myint) -> myint:\n@@ -22,4 +24,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..d6c80b1 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,8 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,6 +47,39 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    expected = [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        ''\n+    ]\n+    assert list(actual) == expected\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_non_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.non_empty_all', options)\n+    expected = [\n+        '',\n+        '.. py:module:: target.non_empty_all',\n+        '',\n+        'docsting of non_empty_all module.',\n+        '',\n+        '.. py:function:: foo',\n+        '   :module: target.non_empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+    assert list(actual) == expected\n+\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..5fcf7c0 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -16,6 +17,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n import pytest\n \n from sphinx.util.typing import restify, stringify\n+from struct import Struct\n \n \n class MyClass1:\n@@ -115,7 +117,8 @@ def test_restify_type_ForwardRef():\n     assert restify(ForwardRef(\"myint\")) == \":class:`myint`\"\n \n \n-def test_restify_broken_type_hints():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..7b66081 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,33 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_napoleon_use_param(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+    Description of param2.\n+\n+\"\"\"\n+\n+        # Test with napoleon_use_param set to False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+        # Test with napoleon_use_param set to True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..33082a5 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -349,6 +349,14 @@ def test_args():\n     raises(ValueError, lambda: Permutation([[1, 2], 0]))\n            # enclosing brackets needed on 0\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n+    \n+    # Test case to check non-disjoint cycles leading to identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # Test cases to explicitly check permutations with overlapping cycles\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[2, 3], [1, 2]]) == Permutation([0, 3, 1, 2])\n+    assert Permutation([[0, 1, 2], [2, 0]]) == Permutation([2, 0, 1])\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..06ced30 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -448,8 +449,40 @@ def test_sparse_matrix():\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n \n-\n-def test_transpose():\n+def test_sparse_hstack_vstack():\n+    # Test cases for horizontal stacking (hstack) with zero-row matrices\n+    sparse_matrices_h0 = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_h0).shape == (0, 6)\n+\n+    # Test cases for vertical stacking (vstack) with zero-column matrices\n+    sparse_matrices_v0 = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_v0).shape == (6, 0)\n+    \n+    # Test cases for horizontal stacking (hstack) with different row counts\n+    sparse_matrices_h1 = [SparseMatrix.zeros(1, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_h1).shape == (1, 6)\n+\n+    # Test cases for vertical stacking (vstack) with different column counts\n+    sparse_matrices_v1 = [SparseMatrix.zeros(n, 1) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_v1).shape == (6, 1)\n+\n+    # Extend test coverage with multiple row matrices\n+    sparse_matrices_mixed = [\n+        SparseMatrix.zeros(0, 3),\n+        SparseMatrix.zeros(1, 0),\n+        SparseMatrix.zeros(2, 2)\n+    ]\n+    assert SparseMatrix.hstack(*sparse_matrices_mixed).shape == (0, 5)\n+    assert SparseMatrix.vstack(*sparse_matrices_mixed).shape == (3, 2)\n+\n+    # Additional edge cases\n+    single_zero_row = SparseMatrix.zeros(1, 0)\n+    assert SparseMatrix.hstack(single_zero_row).shape == (1, 0)\n+    assert SparseMatrix.vstack(single_zero_row).shape == (1, 0)\n+\n+    single_zero_col = SparseMatrix.zeros(0, 1)\n+    assert SparseMatrix.hstack(single_zero_col).shape == (0, 1)\n+    assert SparseMatrix.vstack(single_zero_col).shape == (0, 1)\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n         SparseMatrix(((1, 3), (2, 4)))\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 0a3b6ce..820e322 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -581,8 +581,18 @@ def test_Float_issue_2107():\n     assert S.Zero + b - b == 0\n     assert S.Zero + b + (-b) == 0\n \n-\n-def test_Infinity():\n+def test_pickle_long_in_float():\n+    import pickle\n+    import sys\n+    import sympy\n+    from sympy.abc import x\n+\n+    # Simulate pickling in Python 2 with long type\n+    dumped = pickle.dumps(sympy.Float((0, '1L', 0, 1)), 2)\n+\n+    # Simulating loading in Python 3 which should work without throwing error\n+    loaded = pickle.loads(dumped)\n+    assert loaded == sympy.Float((0, '1', 0, 1))\n     assert oo != 1\n     assert 1*oo == oo\n     assert 1 != oo\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..7fb1a86 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -279,7 +279,19 @@ def test_coth_series():\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n \n-def test_csch():\n+def test_coth_log_tan_subs():\n+    from sympy import coth, log, tan, Symbol\n+    \n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+\n+    # Testing various integer substitutions which previously caused issues\n+    for value in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        try:\n+            result = expr.subs(x, value)\n+            print(f\"coth(log(tan({value}))) = {result}\")\n+        except Exception as e:\n+            print(f\"Failed for {value}: {e}\")\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..427694a 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,56 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+    \n+    # Test-case based on the provided issue example\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    inserted = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert inserted == expected\n+\n+    # Additional test-cases to verify the correct behavior thoroughly\n+    \n+    # Inserting a smaller column matrix into a larger one\n+    M_small = eye(3)\n+    V_small = ones(3, 1)\n+    expected_small = Matrix([\n+        [1, 0, 1, 0],\n+        [0, 1, 1, 0],\n+        [0, 0, 1, 1]\n+    ])\n+    assert M_small.col_insert(2, V_small) == expected_small\n+\n+    # Inserting at the start\n+    expected_start = Matrix([\n+        [1, 2, 2, 0, 0, 0, 0, 0],\n+        [0, 2, 2, 1, 0, 0, 0, 0],\n+        [0, 2, 2, 0, 1, 0, 0, 0],\n+        [0, 2, 2, 0, 0, 1, 0, 0],\n+        [0, 2, 2, 0, 0, 0, 1, 0],\n+        [0, 2, 2, 0, 0, 0, 0, 1]\n+    ])\n+    assert M.col_insert(0, V) == expected_start\n+\n+    # Inserting at the end\n+    expected_end = Matrix([\n+        [1, 0, 0, 0, 0, 0, 2, 2],\n+        [0, 1, 0, 0, 0, 0, 2, 2],\n+        [0, 0, 1, 0, 0, 0, 2, 2],\n+        [0, 0, 0, 1, 0, 0, 2, 2],\n+        [0, 0, 0, 0, 1, 0, 2, 2],\n+        [0, 0, 0, 0, 0, 1, 2, 2]\n+    ])\n+    assert M.col_insert(6, V) == expected_end\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..f91bc3c 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,18 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+from sympy import symbols, oo\n+from sympy.series.sequences import SeqFormula\n+import sympy as sp\n \n def test_latex_sequences():\n+    # Test case 1: sequence starting from 0 to infinity\n+    n = symbols('n', integer=True)\n+    s1 = SeqFormula(n**2, (n, 0, oo))\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s1) == latex_str\n+\n+    # Test for manually escaped backslashes output\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..d09701f 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,12 +7,13 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n from sympy import Integer, Symbol, I, sqrt\n from sympy.utilities.pytest import raises\n+from sympy import Poly\n from sympy.abc import x, y, z\n \n \n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..d93cf5f 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,4 +1,6 @@\n+\n from sympy import (\n+    asec, acsc, # Ensure these are imported if missing\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n     Interval, InverseCosineTransform, InverseFourierTransform,\n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..a6b1330 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6121,8 +6121,23 @@ def test_MatrixSymbol_printing():\n     assert pretty(A - B) == \"-B + A\"\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n-\n-def test_degree_printing():\n+from sympy import MatrixSymbol, pretty\n+\n+def test_pretty_MatrixSymbol_with_special_characters():\n+    # Related to issue where MatAdd failed to pretty print with special char MatrixSymbol\n+    n = 3  # using a specific size for the test\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    \n+    assert pretty(x + y_star) == \"x + y*\"\n+\n+def test_pretty_negative_numbers_with_MatrixSymbol():\n+    # Additional test for negative numbers matrix addition\n+    n = 3\n+    a = MatrixSymbol('a', n, n)\n+    b = MatrixSymbol('b', n, n)\n+    \n+    assert pretty(-2*a + -3*b) == \"-2*a - 3*b\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..806c352 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -727,8 +727,21 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n+def test_curly_matrix_symbol_issue_15009():\n+    import sympy as sy\n \n-def test_python_keywords():\n+    # Tests for the specific issue #15009 regarding curly braces in MatrixSymbol names\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # Test without dummify\n+    lam = lambdify(curlyv, curlyv)\n+    result = lam([[1], [2]])\n+    assert result[0][0] == 1 and result[1][0] == 2\n+\n+    # Test with dummify=True\n+    lam_dummify = lambdify(curlyv, curlyv, dummify=True)\n+    result_dummify = lam_dummify([[1], [2]])\n+    assert result_dummify[0][0] == 1 and result_dummify[1][0] == 2\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..8c5d10a 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -18,6 +19,19 @@ def test_Integer():\n def test_Rational():\n     assert mcode(Rational(3, 7)) == \"3/7\"\n     assert mcode(Rational(18, 9)) == \"2\"\n+\n+def test_Max_Min_functions():\n+    # This test is added to verify the correct behavior of Max and Min\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(x, 2, y)) == \"Max[x, 2, y]\"\n+    \n+    # Ensure the fix also checks Min to not break the functionality\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+    assert mcode(Min(x, y, 2)) == \"Min[x, y, 2]\"\n+    assert mcode(Min(x, 2, y)) == \"Min[x, 2, y]\"\n     assert mcode(Rational(3, -7)) == \"-3/7\"\n     assert mcode(Rational(-3, -7)) == \"3/7\"\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..8865730 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,7 +1717,12 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n-def test_latex_UnevaluatedExpr():\n+def test_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Verify that the indexed expression for matrix multiplication M*N is rendered correctly\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n     assert latex(he) == latex(1/x) == r\"\\frac{1}{x}\"\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..195e8e3 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,24 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    f = Function('f')\n+    g = Function('g')\n+    # Test case to check idiff with an equation using f(x)\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+\n+    # Test case to check idiff with mixed f(x) and y\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+\n+    # Test case to check idiff with two function variables\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Additional test cases for the original issues mentioned\n+    # Check idiff using Eq syntax\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x) == (x + 1) * exp(x - y)/(y + 1)\n+    \n+    # Check idiff singularity handling with f(x) and Eq\n+    assert idiff(Eq(f(x)*exp(f(x)), x*exp(x)), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..ffa0875 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,7 +582,35 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n-def test_empty_f_code():\n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_cython_with_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0 \n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0, 2.0]]))\n+    assert result == 1.0\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..496b0f1 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,23 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, Eq, FiniteSet, S, Symbol\n \n-def test_issue_9623():\n+def test_issue_remove_duplicates():\n+    x = Symbol('x')\n+\n+    # Test with literal duplicates and symbolic\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    # Simplified to the expected Piecewise result or unevaluated\n+    assert Intersection({1}, {1}, {x}, evaluate=False) == Intersection({1}, {x}, evaluate=False)\n+    \n+    # Test with intersecting symbolic and literal set\n+    expected_result = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {x}) == expected_result\n+    assert Intersection({1}, {1}, {x}) == expected_result\n+    \n+    # Test with empty set results\n+    assert Intersection(S.EmptySet, {1}, {1}, {x}) == S.EmptySet\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex bd254ca..19fa012 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -370,6 +370,28 @@ def test_numpy_matrix():\n     #Check that the types are arrays and matrices\n     assert isinstance(f(1, 2, 3), numpy.ndarray)\n \n+    \n+    # Test identity matrix behavior with lambdify\n+    def test_issue_identity_matrix():\n+        if not numpy:\n+            skip(\"numpy not installed.\")\n+        \n+        from sympy import symbols\n+        n = symbols('n', integer=True)\n+        M = MatrixSymbol(\"M\", 2, 2)\n+        N = MatrixSymbol(\"N\", n, n)\n+        \n+        # Static size test\n+        f_static = lambdify(M, M + Identity(2), modules=\"numpy\")\n+        ma_static = numpy.array([[1, 2], [3, 4]])\n+        mr_static = numpy.array([[2, 2], [3, 5]])\n+        assert (f_static(ma_static) == mr_static).all()\n+        \n+        # Dynamic size test should raise NotImplementedError\n+        raises(NotImplementedError, lambda: lambdify(N, N + Identity(n), modules=\"numpy\"))\n+\n+    test_issue_identity_matrix()\n+    \n     # gh-15071\n     class dot(Function):\n         pass\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..5a314e5 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -810,8 +810,16 @@ def test_issue_15965():\n     assert simplify(A) == anew\n     assert simplify(B) == bnew\n \n+def test_issue_17137():\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I  # test for base case in issue\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)  # additional test\n+    # Additional complex power tests\n+    assert simplify(cos(x + 1)**I) == cos(x + 1)**I\n+    assert simplify(cos(x**2)**(1 + I)) == cos(x**2)**(1 + I)\n+\n \n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..f017f1a 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,28 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n+def test_issue_order_of_operations():\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+    multiplier = sympify(2.0)\n+\n+    # Test that multiplication follows commutative property\n+    assert p1 + p2 * multiplier == p1 + multiplier * p2\n+\n+    # Also test with integer multipliers\n+    assert p1 + p2 * 3 == p1 + 3 * p2\n+\n+    # Test same with 3D points\n+    p3d1 = Point3D(0, 0, 0)\n+    p3d2 = Point3D(1, 1, 1)\n+    assert p3d1 + p3d2 * multiplier == p3d1 + multiplier * p3d2\n \n-def test_point():\n+    assert p3d1 + p3d2 * 3 == p3d1 + 3 * p3d2\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..a2ddbf2 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,48 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, Symbol, sympify, raise_error\n+import pytest\n+\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    \n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Ensure no conversion of the expression to a string\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+def test_issue_sympy_eval():\n+    # Check the specific issue with eval in __eq__ method\n+    x = Symbol('x')\n+    class EvalRepr:\n+        def __repr__(self):\n+            return 'x.y'  # this simulates the problematic repr\n+    \n+    with pytest.raises(AttributeError, match=\"'Symbol' object has no attribute 'y'\"):\n+        _ = (x == EvalRepr())\n+\n+    # Ensure an object with repr 'x' does not equal Symbol 'x'\n+    class StrRepr:\n+        def __repr__(self):\n+            return 'x'\n+    \n+    obj = StrRepr()\n+    assert (x == obj) is False\n+    assert (x != obj) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1944,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..c8295e0 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,11 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # issue 18186: test permute=True with different symbol orders\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..03dd0ab 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,7 +67,7 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..29c6e67 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -101,7 +101,18 @@ def test_block_collapse_explicit_matrices():\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n-    assert block_collapse(BlockMatrix([[A]])) == A\n+from sympy import Matrix, BlockDiagMatrix\n+\n+def test_single_element_BlockDiagMatrix_conversion():\n+    # Test the issue where a BlockDiagMatrix with one element raises an error on conversion to Matrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    \n+    try:\n+        B = Matrix(D)  # Should not raise an error if the issue is resolved\n+        assert B == M  # Ensure conversion is accurate\n+    except Exception as e:\n+        assert False, \"Exception raised during conversion: \" + str(e)\n \n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..36af3ce 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -66,7 +67,35 @@ def test_Identity_index():\n     raises(IndexError, lambda: I[3, 3])\n \n \n-def test_block_index():\n+def test_issue_XXXXX_block_index_symbolic():\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    # Verify that C[i, 0] doesn't simplify to (A)[i, 0] or similar incorrect forms\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+\n+def test_issue_XXXXX_simple_block_index():\n+    # Testing with non-symbolic dimensions for clearer deterministic cases\n+    A = MatrixSymbol('A', 2, 1)\n+    B = MatrixSymbol('B', 3, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[0, 0] == A[0, 0]\n+    assert C[2, 0] == B[0, 0]\n+    assert C[4, 0] == B[2, 0]\n+    \n+def test_issue_XXXXX_edge_case():\n+    # Verify handling of zero-sized matrix blocks\n+    from sympy import ZeroMatrix\n+    A = MatrixSymbol('A', 2, 2)\n+    Z = ZeroMatrix(0, 1)\n+    C = BlockMatrix([[A], [Z]])\n+    # Accessing element in A:\n+    assert C[0, 0] == A[0, 0]\n+    # Indices that would be in Z should raise an IndexError\n+    with raises(IndexError):\n+        C[2, 0]\n+        C[3, 0]\n     I = Identity(3)\n     Z = ZeroMatrix(3, 3)\n     B = BlockMatrix([[I, I], [I, I]])\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..78f81d1 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -305,6 +305,20 @@ def test_sign():\n     # evaluate what can be evaluated\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n+    # Test rewrite of sign to Abs\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    \n+    z = Symbol('z', complex=True, zero=False)\n+    assert sign(z).rewrite(Abs) == z / Abs(z)\n+    assert sign(-z).rewrite(Abs) == -z / Abs(z)\n+    \n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(1).rewrite(Abs) == 1\n+    assert sign(-1).rewrite(Abs) == -1\n+    assert sign(I).rewrite(Abs) == I\n+    assert sign(-I).rewrite(Abs) == -I\n+\n     eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n     # if there is a fast way to know when and when you cannot prove an\n     # expression like this is zero then the equality to zero is ok\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..b82a23b 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,13 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n def test_partitions():\n+    # Test for the issue of reusing output dictionaries\n+    results = list(partitions(6, k=2))\n+    copies = [dict(p) for p in results]\n+    assert results == copies, \"Generated partitions should be distinct copies.\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..1129e9a 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -266,6 +266,12 @@ def test_zero():\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n+    from sympy import S, oo, power, zoo\n+\n+    # Test issue 19572\n+    assert 0 ** -oo == zoo\n+    assert power(0, -oo) == zoo\n+\n \n def test_pow_as_base_exp():\n     x = Symbol('x')\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..7239055 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n-                                 volume, kilometer)\n+                                 volume, kilometer, joule)\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n@@ -31,6 +32,15 @@ def test_eq():\n \n \n def test_convert_to():\n+    # Test conversion involving orthogonal units initially described in the issue\n+    expr = joule*second\n+    conv = convert_to(expr, joule)\n+    assert conv == expr  # Expectation is that it remains unchanged\n+\n+    # Additional tests to validate resolution of the issue\n+    assert convert_to(joule*second, joule*second) == joule*second  # Identity case\n+    assert convert_to(joule*second, kg * m**2 / s) == kg * m**2 / s\n+    assert convert_to(joule*second, minute) == joule*minute/60\n     q = Quantity(\"q1\")\n     q.set_global_relative_scale_factor(S(5000), meter)\n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..9d4aee2 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -27,8 +27,13 @@ def test__aresame():\n     assert not _aresame(Basic([]), Basic(()))\n     assert not _aresame(Basic(2), Basic(2.))\n \n+from sympy import Symbol\n \n-def test_structure():\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        s.other_attribute = 42\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n     assert bool(b1)\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..78c9904 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..6bdfb2c 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,6 +8,9 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy.functions.elementary.hyperbolic import sinh\n+from sympy.functions.elementary.exponential import exp\n+from sympy.functions.elementary.piecewise import Piecewise\n \n def test_subs():\n     n3 = Rational(3)\n@@ -20,6 +24,17 @@ def test_subs():\n     assert e == Rational(6)\n \n \n+def test_issue_21373():\n+    # Re-enacting the issue conditions to verify the fix\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    \n+    # This substitution should no longer raise PolynomialError\n+    result = expr.subs({1: 1.0})\n+    \n+    # If the error is resolved, this will pass, indicating the expression was handled correctly\n+    assert result is not None\n+\n def test_subs_Matrix():\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..d64939f 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,9 +1,11 @@\n+\n from sympy.core.add import Add\n-from sympy.core.kind import NumberKind, UndefinedKind\n+from sympy.core.kind import NumberKind, UndefinedKind, MatrixKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n+from sympy.core.function import Derivative\n from sympy.integrals.integrals import Integral\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n@@ -34,7 +36,10 @@ def test_Symbol_kind():\n     assert comm_x.kind is NumberKind\n     assert noncomm_x.kind is UndefinedKind\n \n-def test_Integral_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..7b075ad 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -140,6 +140,19 @@ def test_monomials():\n     assert set(itermonomials([i, j, k], [0, 2, 0])) == {1, j, j**2}\n     assert set(itermonomials([i, j, k], [2, 0, 0])) == {i, 1, i**2}\n     assert set(itermonomials([i, j, k], [1, 1, 1])) == {1, k, j, j*k, i*k, i, i*j, i*j*k}\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+\n+    assert set(itermonomials([i, j, k], 2, 2)) == \\\n+            {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n+    assert set(itermonomials([i, j, k], 3, 2)) == \\\n+            {j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j,\n+                    j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i,\n+                    k**2*j, j*i**2, k*j, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i,\n+                    i*j*k, k*i\n+            }\n+\n+    # Existing test case\n     assert set(itermonomials([i, j, k], [2, 2, 2])) == \\\n             {1, k, i**2*k**2, j*k, j**2, i, i*k, j*k**2, i*j**2*k**2,\n                     i**2*j, i**2*j**2, k**2, j**2*k, i*j**2*k,\n",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..11fe43e 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,7 +10,8 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n-from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n+from sympy.geometry import Point2D\n \n \n def test_point():\n@@ -440,7 +442,11 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_with_evaluate():\n+    # Test if Point2D works with evaluate(False) without error\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert isinstance(p, Point2D)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22840": "",
  "sympy__sympy-23117": "",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..6d7c314 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,37 @@ def test_scipy_polys():\n \n \n \n+def test_single_element_tuple():\n+    # Test for single-element tuple\n+    f2b = lambdify([], (1,))  # Expecting to return a single-element tuple (1,)\n+    assert f2b() == (1,)\n+    # Use inspect.getsource to verify the printed code\n+    source_code = inspect.getsource(f2b)\n+    expected_output = 'def _lambdifygenerated():\\n    return (1,)\\n'\n+    assert source_code == expected_output\n+\n+def test_multiple_element_tuple():\n+    # Test for two-element tuple, which was already correct\n+    f2c = lambdify([], (1, 2))\n+    assert f2c() == (1, 2)\n+    source_code = inspect.getsource(f2c)\n+    expected_output = 'def _lambdifygenerated():\\n    return (1, 2)\\n'\n+    assert source_code == expected_output\n+\n+def test_expression_tuple():\n+    x = Symbol('x')\n+    # Testing tuple with expression (e.g., (x + 1,))\n+    expression_tuple = (x + 1,)\n+    f_expr = lambdify([x], expression_tuple)\n+    assert f_expr(1) == (2,)\n+    source_code = inspect.getsource(f_expr)\n+    expected_output = 'def _lambdifygenerated(x):\\n    return (x + 1,)\\n'\n+    assert source_code == expected_output\n+\n+import inspect\n+from sympy import lambdify, Tuple, Symbol, Function\n+from sympy.core.numbers import Integer\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..78f5d27 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy import exp\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity, dimensionless\n+\n+def test_issue_24062():\n+    # Reproducing the scenario from the issue\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    # Expression that should be treated as dimensionless\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    # Test the exp function with the dimensionless exponent\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + exp(1), dimensionless)\n+\n+...\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..02fe466 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -32,6 +32,14 @@ def test_tensor_product_dagger():\n         TensorProduct(Dagger(mat1), Dagger(mat2))\n \n \n+from sympy import symbols\n+from sympy.physics.quantum import TensorProduct as TP\n+from sympy.physics.quantum import Operator\n+\n+A, B, C = symbols('A B C')\n+U = Operator('U')\n+V = Operator('V')\n+\n def test_tensor_product_abstract():\n \n     assert TP(x*A, 2*B) == x*2*TP(A, B)\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..d8b3d21 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,7 +563,55 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_validation_additional_cases():\n+    from sympy.physics.units import Quantity, velocity, acceleration, force, time, meter, second, newton\n+    from sympy.physics.units.systems.si import SI\n+\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 2 * meter / second)\n+\n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, -9.8 * meter / second**2)\n+\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 5 * second)\n+\n+    # a different combination of acceleration and time should still match velocity dimension\n+    expr1 = A2 * T2 + V2\n+    SI._collect_factor_and_dimension(expr1)\n+\n+    F1 = Quantity('F1')\n+    SI.set_quantity_dimension(F1, force)\n+    SI.set_quantity_scale_factor(F1, 10 * newton)\n+\n+    expr2 = A2 * T2 + F1  # Force and velocity should not match, expect ValueError\n+    try:\n+        SI._collect_factor_and_dimension(expr2)\n+    except ValueError as e:\n+        assert 'Dimension' in str(e)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..cc99fc4 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, volt\n+from sympy.physics.units.prefixes import milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +29,20 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Additional test cases for the bug reported with `milli` and unit multiplication\n+    assert milli * W == W / 1000, \"milli*W should equal 1/1000 W (mW)\"\n+    assert W * milli == milli * W, \"W*milli should equal milli*W and equal 1/1000 W (mW)\"\n+    \n+    # New test case for Volts since the issue was observed with Volts as well\n+    assert milli * volt == volt / 1000, \"milli*volt should equal 1/1000 volt (mV)\"\n+    assert volt * milli == milli * volt, \"volt*milli should equal milli*volt and equal 1/1000 volt (mV)\"\n+    \n+    # Test that both expressions produce an instance of Quantity\n+    assert isinstance(milli * W, Quantity), \"milli*W should produce a Quantity instance\"\n+    assert isinstance(W * milli, Quantity), \"W*milli should produce a Quantity instance\"\n+    assert isinstance(milli * volt, Quantity), \"milli*volt should produce a Quantity instance\"\n+    assert isinstance(volt * milli, Quantity), \"volt*milli should produce a Quantity instance\"\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..fc939da 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -6,6 +6,7 @@ from django.test import SimpleTestCase, TestCase\n from django.test.utils import CaptureQueriesContext, isolate_apps\n \n from .models import (\n+    Parent, Child,\n     Base, Chef, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n     MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase,\n     Supplier, Title, Worker,\n@@ -216,6 +217,21 @@ class ModelInheritanceDataTests(TestCase):\n             rating=2,\n         )\n \n+    def test_inherited_ordering_pk_desc(self):\n+        # Create instances of Child model (which inherits from Parent)\n+        c1 = Child.objects.create(first_name='Alice', email='alice@example.com')\n+        c2 = Child.objects.create(first_name='Bob', email='bob@example.com')\n+\n+        # Expected ordering is by \"pk\" in descending order, so the latest created object comes first\n+        qs = Child.objects.all()\n+        \n+        # Assert that the objects are in the correct order as expected\n+        self.assertSequenceEqual(qs, [c2, c1])\n+        \n+        # Check the SQL query to ensure it includes the ORDER BY clause with DESC\n+        expected_order_by_sql = 'ORDER BY %s DESC' % connection.ops.quote_name('id')\n+        self.assertIn(expected_order_by_sql, str(qs.query))\n+\n         chef = Chef.objects.create(name=\"Albert\")\n         cls.italian_restaurant = ItalianRestaurant.objects.create(\n             name=\"Ristorante Miron\",\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..93b7a0b 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,36 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2')\n+        article_1 = Article.objects.create(author=author_1, headline='Article 1')\n+        article_2 = Article.objects.create(author=author_2, headline='Article 2')\n+\n+        # Set 'editor' to self-referential relationships.\n+        author_1_editor = Author.objects.create(name=\"Editor 1\", editor=author_1)\n+        author_2_editor = Author.objects.create(name=\"Editor 2\", editor=author_2)\n+        \n+        article_1.author = author_1_editor\n+        article_1.save()\n+\n+        article_2.author = author_2_editor\n+        article_2.save()\n+\n+        # Check order_by with self-referential FK\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'), \n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+        \n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13265": "",
  "django__django-14534": "",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..0648449 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,52 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.colors import LogNorm, Normalize\n+from matplotlib import colors as mcolors\n+\n+...\n+\n+def test_update_colorbar_norm():\n+    # Setup initial plot and colorbar\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cbar = fig.colorbar(plot, ax=ax)\n+\n+    # Initially linear scale\n+    assert cbar.ax.yaxis.get_scale() == 'linear'\n+\n+    # Change to LogNorm and update the colorbar\n+    plot.set_norm(LogNorm())\n+    cbar.update_normal(plot)\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+\n+    # Test if ticks are updated properly based on the new normalization\n+    fig.canvas.draw()\n+    log_ticks = cbar.ax.yaxis.get_ticklabels()\n+    assert len(log_ticks) > 0  # Ensuring ticks are present\n+\n+def test_update_colorbar_bruteforce():\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cbar = fig.colorbar(plot, ax=ax)\n+\n+    # Change the normalization and use update_bruteforce\n+    plot.set_norm(LogNorm())\n+    try:\n+        cbar.update_bruteforce(plot)\n+    except ZeroDivisionError:\n+        assert False, \"ZeroDivisionError encountered during update_bruteforce\"\n+\n+    # Ensure that colorbar scale updated correctly\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+    \n+...\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..e30b34b 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,34 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import make_union\n+    from sklearn import set_config\n+    \n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Create some sample data\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Set pandas output for transformers\n+    set_config(transform_output=\"pandas\")\n+\n+    # Feature union with custom transformer\n+    union = make_union(MyTransformer())\n+\n+    try:\n+        result = union.fit_transform(data)\n+        print(\"FeatureUnion successfully handled pandas output:\", result)\n+    except Exception as e:\n+        print(\"Error occurred with pandas output:\", str(e))\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..00544ce 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,8 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n@@ -132,8 +134,32 @@ def test_decorators(app):\n     ]\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_slots_attribute(app):\n+def test_annotated_inherited_attributes(app):\n+    options = {\"members\": None,\n+               \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Derived', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr3',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'class', 'target.slots.Bar', options)\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..72adddf 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -353,7 +354,27 @@ def test_issue_2827_trigsimp_methods():\n     M = Matrix.eye(1)\n     assert all(trigsimp(M, method=m) == M for m in\n         'fu matching groebner old'.split())\n-    # watch for E in exptrigsimp, not only exp()\n+    # Additional test cases for verifying trigonometric simplification with Rational numbers\n+    def test_trigsimp_with_rational():\n+        # Test simplification of cos and sin expressions involving Rational arguments\n+        t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+        t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+        r = t1.dot(t2)\n+        assert trigsimp(r) == cos(S(1)/50)\n+        assert simplify(r) == cos(S(1)/50)\n+\n+        r_direct = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+        assert trigsimp(r_direct) == cos(S(1)/50)\n+        assert simplify(r_direct) == cos(S(1)/50)\n+\n+        # Test acos of the resulted expression to ensure simplification through inverse functions works\n+        result = acos(r_direct)\n+        assert trigsimp(result) == acos(cos(S(1)/50))\n+        assert simplify(result) == S(1)/50\n+\n+        # Additional checks with different rational simplifications\n+        r3 = Rational(1, 50) - Rational(1, 25)\n+        assert simplify(r3) == -Rational(1, 50)\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..919a80b 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4345,7 +4345,27 @@ def test_settings():\n     raises(TypeError, lambda: pretty(S(4), method=\"garbage\"))\n \n \n+from sympy import Sum, oo, pprint\n+from sympy.abc import x\n+\n def test_pretty_sum():\n+    \n+    # Test case for the alignment issue with pretty print of Sum + constant\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e   \\n\\\n+ ___  \\n\\\n+ \u2572    \\n\\\n+  \u2572   x\\n\\\n+  \u2571   + 3\\n\\\n+ \u2571    \\n\\\n+ \u203e\u203e\u203e  \\n\\\n+x = 1 \\\n+\"\"\")\n+\n+    # Verify the unicode pretty print output\n+    assert upretty(expr) == ucode_str\n     from sympy.abc import x, a, b, k, m, n\n \n     expr = Sum(k**k, (k, 0, n))\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..a006746 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -705,7 +705,26 @@ def test_uniq():\n         [2, 3, 4, [2], [1], [3]]\n \n \n-def test_kbins():\n+def test_uniq_modification():\n+    f = [1, 2, 3]\n+    # Test that modifying `f` during iteration by removing elements raises RuntimeError.\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = [1, 2, 3]\n+    # Test that modifying `f` during iteration by appending elements raises RuntimeError.\n+    raises(RuntimeError, lambda: [f.append(i) for i in uniq(f)])\n+\n+    f = [1, 1, 2]\n+    # Test with nested lists\n+    raises(RuntimeError, lambda: f.clear() or list(uniq(f)))\n+\n+    f = [1, 2, 3]\n+    # Test modifying with list slicing\n+    raises(RuntimeError, lambda: [f.pop(0) for i in uniq(f)])\n+\n+    f = [[1], [2], [3]]\n+    # Test with lists inside list\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n     assert len(list(kbins('1123', 2, ordered=1))) == 24\n     assert len(list(kbins('1123', 2, ordered=11))) == 36\n     assert len(list(kbins('1123', 2, ordered=10))) == 10\n",
  "django__django-11797": "",
  "django__django-15320": "",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..9d13000 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,4 +1,5 @@\n-from django.db.models import FilteredRelation\n+\n+from django.db.models import FilteredRelation, Q\n from django.test import TestCase\n \n from .models import Organiser, Pool, PoolStyle, Tournament\n@@ -152,7 +153,34 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_multilevel_select_related_with_filtered_relation(self):\n+        with self.assertNumQueries(3):\n+            poolstyles = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation('pool__tournament__pool', condition=Q(pool__tournament__pool__isnull=False))\n+                ).select_related('tournament_pool', 'tournament_pool__tournament').order_by('pk')\n+            )\n+            self.assertEqual(poolstyles[0].pool.tournament, poolstyles[0].tournament_pool.tournament)\n+            \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            poolstyles = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(poolstyles[0].tournament_pool.tournament, poolstyles[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            tournaments = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(tournaments[0].style.another_pool, self.p3)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +191,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..01489ba 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -13,7 +14,9 @@ from PIL import Image\n \n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n-from matplotlib.testing.decorators import image_comparison, check_figures_equal\n+import pickle\n+from matplotlib import pyplot as plt\n+from matplotlib.figure import Figure\n from matplotlib.axes import Axes\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..5b3942b 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn import PairGrid\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,18 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_categorical_hue(self):\n+        iris = sns.load_dataset(\"iris\")\n+        try:\n+            g = PairGrid(iris, y_vars=[\"sepal_length\",\"sepal_width\"], x_vars=[\"petal_length\",\"petal_width\"])\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            success = True\n+        except Exception as e:\n+            success = False\n+            print(f\"Error encountered: {e}\")\n+        \n+        assert success, \"PairGrid should handle categorical hue without errors\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..239b89a 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,6 +323,10 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n+import pytest\n+\n+...\n+\n def test_excinfo_exconly():\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n@@ -347,6 +351,15 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n+def test_excinfo_raises_str_behavior():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    # Verify that str(e.value) behavior matches the normal exception\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+    # Verify that str(excinfo) does not provide the full message directly\n+    assert \"LookupError\" in str(excinfo)\n+    assert not \"A\\nB\\nC\" in str(excinfo)\n+\n def test_excinfo_for_later():\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..96423cf 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Additional test to verify the new single-character option\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Additional test to verify the new single-character option\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..057168f 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -83,6 +83,27 @@ def complex_func(arg1, arg2, arg3=None, *args, **kwargs):\n     pass\n \n \n+from typing import Optional\n+\n+def missing_attr(c,\n+                 a,  # type: str\n+                 b=None  # type: Optional[str]\n+                 ):\n+    # type: (...) -> str\n+    return a + (b or \"\")\n+\n+\n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n def missing_attr(c,\n                  a,  # type: str\n                  b=None  # type: Optional[str]\n@@ -98,4 +119,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..62a617a 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,19 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Sum, symbols\n \n-def test_Identity_doit():\n+def test_Identity_element_sum():\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+    \n+    # Test the sum of all elements of the identity matrix\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n, f\"Expected {n}, but got {total_sum}\"\n+\n+    # Test a specific case with a known result, where n=3\n+    total_sum_3 = Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit()\n+    assert total_sum_3 == 3, f\"Expected 3, but got {total_sum_3}\"\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..3227aa4 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,17 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+from sympy.parsing.latex import parse_latex\n+from sympy import Symbol, Pow, Add, Mul\n+\n+# Test case for issue mentioned about LaTeX parsing\n+def test_issue_21537():\n+    a = Symbol('a')\n+    b = Symbol('b')\n+    c = Symbol('c')\n+    expected_expr = Mul(Mul(Add(Pow(a, 3), b), Pow(c, -1)), Pow(Mul(Pow(c, 2), Pow(1, -1)), -1))\n+    parsed_expr = parse_latex(r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\")\n+    assert parsed_expr == expected_expr, f\"Expected {expected_expr}, but got {parsed_expr}\"\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}