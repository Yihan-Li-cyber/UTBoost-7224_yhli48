{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..c28f106 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -128,6 +128,41 @@ def test_arith_oper():\n     with pytest.raises(ModelDefinitionError, match=r\"Unsupported operands for arithmetic operator: .*\"):\n         _arith_oper(sh1, map1)\n \n+# Import necessary modules\n+from astropy.modeling import models\n+from astropy.modeling.separable import is_separable, separability_matrix\n+import numpy as np\n+import pytest\n+from numpy.testing import assert_allclose\n+\n+# Define individual models for testing\n+pix2sky = models.Pix2Sky_TAN()\n+linear1 = models.Linear1D(10)\n+linear2 = models.Linear1D(5)\n+\n+def test_separability_nested_compound_models():\n+    # Initial compound model\n+    cm = linear1 & linear2\n+    \n+    # Case 1: Non-nested compound model (baseline)\n+    model_1 = pix2sky & linear1 & linear2\n+    expected_1 = np.array([\n+        [ True,  True, False, False],\n+        [ True,  True, False, False],\n+        [False, False,  True, False],\n+        [False, False, False,  True]\n+    ])\n+    assert_allclose(separability_matrix(model_1), expected_1)\n+\n+    # Case 2: Nested compound model\n+    model_2 = pix2sky & cm\n+    expected_2 = np.array([\n+        [ True,  True, False, False],\n+        [ True,  True, False, False],\n+        [False, False,  True,  True],\n+        [False, False,  True,  True]\n+    ])\n+    assert_allclose(separability_matrix(model_2), expected_2)\n \n @pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n def test_separable(compound_model, result):\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..6fe0a5d 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,11 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n-\n-from astropy.io import ascii\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n+from io import StringIO\n \n from .common import assert_almost_equal, assert_equal\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..872e8c7 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -33,8 +33,19 @@ def test_get_tables_from_qdp_file(tmp_path):\n \n     with open(path, \"w\") as fp:\n         print(example_qdp, file=fp)\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+import numpy as np\n+import pytest\n+from astropy.utils.exceptions import AstropyUserWarning\n \n-    table0 = _read_table_qdp(fp.name, names=[\"MJD\", \"Rate\"], table_id=0)\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n     assert table0.meta[\"initial_comments\"][0].startswith(\"Swift\")\n     assert table0.meta[\"comments\"][0].startswith(\"WT -- hard data\")\n     table2 = _read_table_qdp(fp.name, names=[\"MJD\", \"Rate\"], table_id=2)\n@@ -109,7 +120,31 @@ def test_roundtrip(tmp_path):\n         assert meta_name in new_table.meta\n \n \n-def test_read_example():\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip_with_lowercase_commands(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    \"\"\"\n+\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"test.qdp\")\n+\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+    \n+    table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n+    \n+    assert np.allclose(table[\"MJD_perr\"], [2.378472e-05, 1.1446759e-05])\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..93cb171 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,47 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+# Additionally, import necessary modules and classes for testing\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+from numpy.testing import assert_equal\n+import pytest\n+\n+def test_nddata_mask_propagation():\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply mask by constant (mask * no mask)\n+    assert_equal(\n+        nref_mask.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply mask by itself (mask * mask)\n+    assert_equal(\n+        nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply mask by no mask (mask * no mask)\n+    assert_equal(\n+        nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    assert_equal(\n+        nref_mask_other.multiply(nref_mask, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..83d827f 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -245,6 +245,25 @@ class TestTableFunctions(FitsTestCase):\n         # Change scaled field and scale back to the original array\n         t[1].data.field('c4')[0] = 1\n         t[1].data._scale_back()\n+\n+    def test_column_exponent_replacement(self):\n+        # Set up the initial data and column definitions\n+        r1 = np.array([11.0, 12.0])\n+        c1 = fits.Column(name='def', format='D', array=r1)\n+\n+        # Define Table HDU\n+        hdu = fits.TableHDU.from_columns([c1])\n+\n+        # Write the table to a temporary FITS file\n+        hdu.writeto(self.temp('test_exponent_replacement.fits'), overwrite=True)\n+\n+        # Open the FITS file and read the data as ASCII\n+        with open(self.temp('test_exponent_replacement.fits')) as f:\n+            content = f.read()\n+\n+        # Check if the exponent 'D' is used in the file content\n+        assert '1.1000000000000000D+01' in content\n+        assert '1.2000000000000000D+01' in content\n         assert str(np.rec.recarray.field(t[1].data, 'c4')) == '[84 84]'\n \n         # look at data column-wise\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..f4770cf 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,6 +1092,15 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n+    \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        By default, FILE_UPLOAD_PERMISSIONS should be set to 0o644.\n+        This test ensures that the file_permissions_mode reflects the correct default.\n+        \"\"\"\n+        from django.conf import settings\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n \n     def test_override_file_upload_permissions(self):\n         \"\"\"\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..ea8ae63 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -514,6 +514,21 @@ class MigrateTests(MigrationTestBase):\n             out.getvalue()\n         )\n \n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_sqlmigrate_handles_non_transactional_ddl(self):\n+        \"\"\"\n+        Tests that sqlmigrate does not wrap output in BEGIN/COMMIT on databases\n+        that don't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command(\"sqlmigrate\", \"migrations\", \"0001\", stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        if connection.ops.start_transaction_sql():\n+            self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_plan_app_label_no_migrations(self):\n         out = io.StringIO()\n",
  "django__django-11049": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..c7f1dbd 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +251,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..a1468b7 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -366,7 +366,22 @@ class HttpResponseTests(unittest.TestCase):\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n-    def test_iter_content(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'My Content'))\n+        self.assertEqual(r.content, b'My Content')\n+        \n+        # Testing empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+        \n+        # Testing content via property\n+        r = HttpResponse()\n+        r.content = memoryview(b'Property Test')\n+        self.assertEqual(r.content, b'Property Test')\n+        \n+        # Testing with non-byte content should raise an error\n+        with self.assertRaises(TypeError):\n+            r = HttpResponse(memoryview('String Content'))\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n \n",
  "django__django-11179": "",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..67ddba6 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,62 @@\n+\n+class UpdateProxyPermissionsTests(TestCase):\n+    def test_update_proxy_permissions_with_existing_entries(self):\n+        \"\"\"\n+        Test updating proxy permissions when permissions already exist should not raise IntegrityError.\n+        \"\"\"\n+\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        \n+        # Create existing Permission entries intentionally\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+\n+        try:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        except IntegrityError:\n+            self.fail(\"update_proxy_model_permissions raised IntegrityError unexpectedly!\")\n+\n+    def test_no_duplicate_entries_after_update(self):\n+        \"\"\"\n+        Test ensuring no duplicates exist after running update_proxy_model_permissions.\n+        \"\"\"\n+\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        \n+        # Create existing Permission entries intentionally\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+\n+        existing_permissions = Permission.objects.filter(content_type=proxy_model_content_type)\n+        self.assertEqual(existing_permissions.count(), 2)\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.db.utils import IntegrityError\n+from django.contrib.auth.models import Permission\n+from django.contrib.contenttypes.models import ContentType\n \n from .models import Proxy, UserProxy\n \n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..ec93cf6 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -11,6 +11,8 @@ import weakref\n import zipfile\n from importlib import import_module\n from pathlib import Path\n+import os\n+import sys\n from unittest import mock, skip, skipIf\n \n from django.apps.registry import Apps\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..b301b5f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -141,7 +141,32 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n-class TestCommonRoots(SimpleTestCase):\n+    def test_non_existing_file_path(self):\n+        with self.subTest(\"Non-existing file path\"):\n+            self.assertEqual(\n+                autoreload.iter_modules_and_files((), frozenset(['non_existent_file.py'])),\n+                frozenset(),\n+            )\n+\n+    def test_path_with_invalid_characters(self):\n+        with self.subTest(\"Path with special invalid characters\"):\n+            self.assertEqual(\n+                autoreload.iter_modules_and_files((), frozenset(['invalid><path.py'])),\n+                frozenset(),\n+            )\n+\n+    def test_path_with_embedded_null_bytes_in_different_locations(self):\n+        paths_with_null_bytes = [\n+            'start\\x00file.py',\n+            'middle/part\\x00file.py',\n+            'end/endingnull\\x00',\n+        ]\n+        for path in paths_with_null_bytes:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..880fa35 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1,10 +1,26 @@\n import importlib\n import inspect\n+class Test404HandlingWithDebug(SimpleTestCase):\n+    @override_settings(DEBUG=True)\n+    def test_debug_404_converter_raise_404(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+            self.assertContains(response, 'A server error occurred. Please contact the administrator.', status_code=404)\n+\n+    @override_settings(DEBUG=False)\n+    def test_non_debug_404_converter_raise_404(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n import os\n import re\n import sys\n import tempfile\n import threading\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from io import StringIO\n from pathlib import Path\n from unittest import mock\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..bf84f0d 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -353,6 +353,60 @@ class CharFieldTests(SimpleTestCase):\n         ])\n \n \n+@isolate_apps('invalid_models_tests')\n+class CharFieldMaxLengthChoicesTests(SimpleTestCase):\n+\n+    def test_max_length_too_small_for_choices(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Long')]),\n+                    ('Grouped', [('Good', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_max_length_fits_choices(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=3,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('AB', 'Good')\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n @isolate_apps('invalid_models_tests')\n class DateFieldTests(SimpleTestCase):\n     maxDiff = None\n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..f862258 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,7 +318,30 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_year_edge_cases(self, mocked_datetime):\n+        real_datetime_class = datetime\n+        mocked_datetime.side_effect = lambda *args, **kwargs: real_datetime_class(*args, **kwargs)\n+\n+        # Current mocked datetime set for testing purposes\n+        mocked_datetimes = [\n+            datetime(2023, 11, 6, 8, 49, 37),\n+            datetime(2071, 11, 6, 8, 49, 37),\n+        ]\n+        \n+        tests = [\n+            # Adding tests for edge case scenarios precisely 50 years difference\n+            (mocked_datetimes[0], 'Tuesday, 07-Nov-73 08:49:37 GMT', datetime(1973, 11, 7, 8, 49, 37)),\n+            (mocked_datetimes[0], 'Tuesday, 06-Nov-73 08:49:37 GMT', datetime(2073, 11, 6, 8, 49, 37)),\n+            (mocked_datetimes[1], 'Tuesday, 08-Nov-21 08:49:37 GMT', datetime(2021, 11, 8, 8, 49, 37)),\n+            (mocked_datetimes[1], 'Tuesday, 07-Nov-21 08:49:37 GMT', datetime(2021, 11, 7, 8, 49, 37)),\n+        ]\n+        \n+        for current_dt, rfc850_date_str, expected_dt in tests:\n+            with self.subTest(rfc850_date_str=rfc850_date_str):\n+                mocked_datetime.utcnow.return_value = current_dt\n+                parsed = parse_http_date(rfc850_date_str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_dt)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..1ec23d3 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -98,8 +98,25 @@ class ChoicesTests(SimpleTestCase):\n         self.assertIsInstance(YearInSchool.FRESHMAN, YearInSchool)\n         self.assertIsInstance(YearInSchool.FRESHMAN.label, Promise)\n         self.assertIsInstance(YearInSchool.FRESHMAN.value, str)\n-\n-    def test_textchoices_auto_label(self):\n+    def test_textchoices_retrieve_correct_type(self):\n+        test_object = MyObjectTest(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(test_object.my_str_value, str)\n+        self.assertEqual(str(test_object.my_str_value), \"first\")\n+\n+    def test_integerchoices_retrieve_correct_type(self):\n+        test_int_object = MyIntegerObjectTest(my_int_value=MyIntegerChoice.CHOICE_ONE)\n+        self.assertIsInstance(test_int_object.my_int_value, int)\n+        self.assertEqual(test_int_object.my_int_value, 1)\n+\n+    def test_textchoices_str_representation(self):\n+        for choice in MyChoice:\n+            with self.subTest(choice=choice):\n+                self.assertEqual(str(choice), choice.value)\n+\n+    def test_integerchoices_str_representation(self):\n+        for choice in MyIntegerChoice:\n+            with self.subTest(choice=choice):\n+                self.assertEqual(str(choice), str(choice.value))\n         self.assertEqual(Gender.MALE.label, 'Male')\n         self.assertEqual(Gender.FEMALE.label, 'Female')\n         self.assertEqual(Gender.NOT_SPECIFIED.label, 'Not Specified')\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..13110fc 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -187,7 +187,16 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n \n-class GetChoicesTests(SimpleTestCase):\n+class OverrideGetFieldDisplayTests(TestCase):\n+    def test_override_get_field_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..0c5945c 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -14,4 +14,5 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.modules, name='modules'),\n+]\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..7fa6cad 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -148,8 +149,31 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.db import models\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_inherited_FIELD_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[\n+                ('A', 'Child A'), \n+                ('B', 'Child B'),\n+                ('C', 'Child C'),  # Adding new choice to test inherited and new choices\n+            ])\n+\n+        # Test the original functionality\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+\n+        # Test the newly added functionality with inherited and overriding choices\n+        self.assertEqual(Child(foo='C').get_foo_display(), 'Child C')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12286": "",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..5648bc9 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..e0893c0 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,7 +159,37 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_relationship_model_with_foreign_key_to_wrong_model(self):\n+    def test_recursive_relationship_hint_corrected(self):\n+        class Node(models.Model):\n+            pass\n+\n+        class Connection(models.Model):\n+            first_node = models.ForeignKey(Node, models.CASCADE, related_name='first_conn')\n+            second_node = models.ForeignKey(Node, models.CASCADE, related_name='second_conn')\n+\n+        class Network(models.Model):\n+            connections = models.ManyToManyField(Node, through='Connection')\n+\n+        field = Network._meta.get_field('connections')\n+        errors = field.check(from_model=Network)\n+        self.assertEqual(len(errors), 1)\n+        self.assertEqual(errors[0].hint, 'If you want to create a recursive relationship, '\n+                                         'use ManyToManyField(\"self\", through=\"Connection\").')\n+\n+    def test_m2m_with_proper_through_fields(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Club(models.Model):\n+            members = models.ManyToManyField(Person, through='Membership', through_fields=('club', 'person'))\n+\n+        class Membership(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            club = models.ForeignKey(Club, models.CASCADE)\n+\n+        field = Club._meta.get_field('members')\n+        errors = field.check(from_model=Club)\n+        self.assertEqual(errors, [])\n         class WrongModel(models.Model):\n             pass\n \n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..a25282d 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1241,6 +1241,41 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n     def test_cleanse_setting_recurses_in_dictionary(self):\n         reporter_filter = SafeExceptionReporterFilter()\n         initial = {'login': 'cooper', 'password': 'secret'}\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..4d161d9 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1755,6 +1755,35 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(definition[1], [])\n         self.assertEqual(definition[2], {'name': \"Pony\", 'index_together': {(\"pink\", \"weight\")}})\n \n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '{}_pony'.format(app_label)\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        \n+        # Check the initial unique constraint\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        \n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Test the fix by removing index_together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n     def test_alter_index_together_remove(self):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..94f08ee 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,24 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_queryset_delete_zero_objects_with_foreign_keys(self):\n+        \"\"\"\n+        Test that deleting zero objects with foreign keys results in consistent output.\n+        \"\"\"\n+        # Assume HiddenUserProfile is a model with a foreign key to HiddenUser\n+        hidden_users_profiles_to_delete = HiddenUserProfile.objects.none()  # No profiles to delete\n+        deleted, deleted_objs = hidden_users_profiles_to_delete.delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {})\n+\n+    def test_queryset_delete_zero_objects_without_foreign_keys(self):\n+        \"\"\"\n+        Test that deleting zero objects without foreign keys results in consistent output.\n+        \"\"\"\n+        block_library_to_delete = BlockLibrary.objects.none()  # No BlockLibrary objects to delete\n+        deleted, deleted_objs = block_library_to_delete.delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.BlockLibrary': 0})\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7fb65b7..975f74d 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1930,10 +1930,61 @@ class Model(metaclass=ModelBase):\n \n \n ############################################\n-# HELPER FUNCTIONS (CURRIED MODEL METHODS) #\n+from django.core.exceptions import ValidationError\n+from django.db import connections, router\n+from django.db.models import CheckConstraint, UniqueConstraint, Model\n+from django.test import TestCase\n+from django.db.models import Error\n ############################################\n \n-# ORDERING METHODS #########################\n+class UniqueConstraintTestCase(TestCase):\n+\n+    def test_unique_constraint_nonexistent_field(self):\n+        # Test UniqueConstraint with a nonexistent field\n+        class Model(models.Model):\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['nonexistent_field'], name='test_nonexistent_field')\n+                ]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [\n+            Error(\n+                \"'constraints' refers to the nonexistent field 'nonexistent_field'.\",\n+                obj=Model,\n+                id='models.E012',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_duplicate_field(self):\n+        # Test UniqueConstraint with duplicate fields\n+        class Model(models.Model):\n+            field1 = models.CharField(max_length=100)\n+            \n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['field1', 'field1'], name='test_duplicate_field')\n+                ]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [\n+            Error(\n+                \"'constraints' contains duplicate field 'field1'.\",\n+                obj=Model,\n+                id='models.E031',\n+            ),\n+        ])\n+\n+    def test_valid_unique_constraint(self):\n+        # Test a valid UniqueConstraint\n+        class Model(models.Model):\n+            field1 = models.CharField(max_length=100)\n+            field2 = models.CharField(max_length=100)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['field1', 'field2'], name='test_valid_constraint')\n+                ]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [])\n \n def method_set_order(self, ordered_obj, id_list, using=None):\n     if using is None:\n",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..eacc728 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -73,10 +73,77 @@ class ASGITest(SimpleTestCase):\n                 (b'Content-Disposition', b'inline; filename=\"urls.py\"'),\n             },\n         )\n+from django.test import SimpleTestCase, modify_settings, override_settings\n+from django.core.asgi import get_asgi_application\n+\n+TEST_STATIC_ROOT = Path(__file__).resolve().parent / 'static'\n+\n+class TestASGIStaticFilesHandler(SimpleTestCase):\n+    async_request_factory = AsyncRequestFactory()\n+\n+    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.staticfiles'})\n+    @override_settings(\n+        STATIC_URL='/static/',\n+        STATIC_ROOT=TEST_STATIC_ROOT,\n+        STATICFILES_DIRS=[TEST_STATIC_ROOT],\n+        STATICFILES_FINDERS=[\n+            'django.contrib.staticfiles.finders.FileSystemFinder',\n+        ],\n+    )\n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n         response_body = await communicator.receive_output()\n         self.assertEqual(response_body['type'], 'http.response.body')\n         self.assertEqual(response_body['body'], test_file_contents)\n-        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n+    async def test_not_modified_response(self):\n+        # This test checks the '304 Not Modified' response functionality.\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        scope = self.async_request_factory._base_scope(\n+            path='/static/file.txt',\n+            headers=[\n+                (b'if-modified-since', http_date(file_path.stat().st_mtime).encode('ascii')),\n+            ]\n+        )\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 304)  # Not Modified\n         await communicator.wait()\n \n     async def test_headers(self):\n",
  "django__django-12983": "",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..cb1ace9 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -22,14 +23,26 @@ class QuerySetSetOperationTests(TestCase):\n         qs3 = Number.objects.filter(num=5)\n         self.assertNumbersEqual(qs1.union(qs2, qs3), [0, 1, 5, 8, 9], ordered=False)\n \n-    @skipUnlessDBFeature('supports_select_intersection')\n+    def test_union_none_with_union(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        # This union query should return 0, 1, 8, 9\n+        qs_union = qs1.union(qs2)\n+        # Applying none() to the union query should return no results\n+        self.assertSequenceEqual(qs_union.none(), [])\n     def test_simple_intersection(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__gte=5)\n         qs3 = Number.objects.filter(num__gte=4, num__lte=6)\n         self.assertNumbersEqual(qs1.intersection(qs2, qs3), [5], ordered=False)\n \n-    @skipUnlessDBFeature('supports_select_intersection')\n+    def test_union_none_with_union(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        # This union query should return 0, 1, 8, 9\n+        qs_union = qs1.union(qs2)\n+        # Applying none() to the union query should return no results\n+        self.assertSequenceEqual(qs_union.none(), [])\n     def test_intersection_with_values(self):\n         ReservedName.objects.create(name='a', order=2)\n         qs1 = ReservedName.objects.all()\n@@ -51,7 +64,13 @@ class QuerySetSetOperationTests(TestCase):\n         self.assertEqual(len(list(qs1.union(qs2, all=True))), 20)\n         self.assertEqual(len(list(qs1.union(qs2))), 10)\n \n-    @skipUnlessDBFeature('supports_select_intersection')\n+    def test_union_none_with_union(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        # This union query should return 0, 1, 8, 9\n+        qs_union = qs1.union(qs2)\n+        # Applying none() to the union query should return no results\n+        self.assertSequenceEqual(qs_union.none(), [])\n     def test_intersection_with_empty_qs(self):\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.none()\n@@ -214,7 +233,13 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lt=9)\n         self.assertEqual(qs1.difference(qs2).count(), 1)\n \n-    @skipUnlessDBFeature('supports_select_intersection')\n+    def test_union_none_with_union(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        # This union query should return 0, 1, 8, 9\n+        qs_union = qs1.union(qs2)\n+        # Applying none() to the union query should return no results\n+        self.assertSequenceEqual(qs_union.none(), [])\n     def test_count_intersection(self):\n         qs1 = Number.objects.filter(num__gte=5)\n         qs2 = Number.objects.filter(num__lte=5)\n@@ -313,4 +338,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..ffc7067 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2819,7 +2819,74 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        marley = Character.objects.create(username='Marley', last_action='2023-06-01T00:00:00')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-06-02T00:00:00')\n+\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13321": "",
  "django__django-13401": "",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..38d2d5b 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..4fbd67e 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -27,6 +27,9 @@ from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n from django.db import ConnectionHandler, connection\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n@@ -1866,6 +1869,29 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('verbosity', 1)]\" % option_b\n         )\n \n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv_with_null_sys_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv, even when sys.argv[0] is None.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_actual_prog_name(self):\n+        \"\"\"\n+        Program name is correctly pulled from argv when sys.argv[0] is not None.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['actual-prog'] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..55ed698 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -7,8 +8,51 @@ from django.core.management import CommandError, call_command\n from django.test import SimpleTestCase\n from django.test.utils import captured_stdin, captured_stdout\n \n+from django import __version__\n \n class ShellCommandTestCase(SimpleTestCase):\n+    \n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n \n     def test_command_option(self):\n         with self.assertLogs('test', 'INFO') as cm:\n@@ -49,4 +93,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..2bc39f6 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -967,7 +967,31 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n \n-    def test_verbose_name_plural_inline(self):\n+    def test_verbose_name_inline_default_plural(self):\n+        class DefaultVerboseInline(TabularInline):\n+            model = Profile\n+\n+        class VerboseNameInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Child Profile'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            DefaultVerboseInline,\n+            VerboseNameInline,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        \n+        # For inline with no specific verbose_name or verbose_name_plural\n+        self.assertContains(response, '<h2>Profiles</h2>')\n+        \n+        # For inline with verbose_name but no verbose_name_plural specified, default pluralization should be used \n+        self.assertContains(response, '<h2>Child Profiles</h2>')\n+        self.assertContains(response, 'Add another Child Profile')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name_plural = 'Non-verbose childs'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..de61393 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -582,18 +582,93 @@ class TestQuerying(TestCase):\n \n     def test_isnull_key(self):\n         # key__isnull=False works the same as has_key='key'.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        # Additional test case to check SQLite/Oracle doesn't match JSON null values\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n             self.objs[:3] + self.objs[5:],\n         )\n+        # Additional test case for value__k__isnull=True to ensure correct behavior\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        # Additional test case to check SQLite/Oracle doesn't match JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__k__isnull=True),\n+            self.objs[:1] + self.objs[2:],\n+        )\n+        # Confirming value__k with JSON null doesn't match isnull=True\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        # Additional test case to check SQLite/Oracle doesn't match JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__k__isnull=False),\n+            [self.objs[1], self.objs[3], self.objs[4], self.objs[5]],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        # Additional test case to check SQLite/Oracle doesn't match JSON null values\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=False),\n             [self.objs[3], self.objs[4]],\n         )\n+        # Additional test case for value__k__isnull=True to ensure correct behavior\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        # Additional test case to check SQLite/Oracle doesn't match JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__k__isnull=True),\n+            self.objs[:1] + self.objs[2:],\n+        )\n+        # Confirming value__k with JSON null doesn't match isnull=True\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        # Additional test case to check SQLite/Oracle doesn't match JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__k__isnull=False),\n+            [self.objs[1], self.objs[3], self.objs[4], self.objs[5]],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        # Additional test case to check SQLite/Oracle doesn't match JSON null values\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n         )\n+        # Additional test case for value__k__isnull=True to ensure correct behavior\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        # Additional test case to check SQLite/Oracle doesn't match JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__k__isnull=True),\n+            self.objs[:1] + self.objs[2:],\n+        )\n+        # Confirming value__k with JSON null doesn't match isnull=True\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        # Additional test case to check SQLite/Oracle doesn't match JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__k__isnull=False),\n+            [self.objs[1], self.objs[3], self.objs[4], self.objs[5]],\n+        )\n \n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..f373589 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -151,11 +151,37 @@ class DispatcherTests(SimpleTestCase):\n         self.assertTestIsClean(a_signal)\n \n     def test_send_robust_no_receivers(self):\n+        import logging\n         result = a_signal.send_robust(sender=self, val='test')\n         self.assertEqual(result, [])\n \n-    def test_send_robust_ignored_sender(self):\n+    def test_send_robust_exception_logging(self):\n+        def fails(val, **kwargs):\n+            raise ValueError('this')\n+        a_signal.connect(fails)\n+\n+        with self.assertLogs('django.dispatch', level='ERROR') as cm:\n+            result = a_signal.send_robust(sender=self, val='test')\n+\n+        err = result[0][1]\n+        self.assertIsInstance(err, ValueError)\n+        self.assertEqual(err.args, ('this',))\n+        self.assertTrue(hasattr(err, '__traceback__'))\n+        self.assertIsInstance(err.__traceback__, TracebackType)\n+\n+        # Checking the logging content\n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(),\n+            f\"Error calling {fails.__name__} in Signal.send_robust() ({err.args[0]})\"\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        _, exc_value, _ = log_record.exc_info\n+        self.assertIsInstance(exc_value, ValueError)\n+        self.assertEqual(str(exc_value), 'this')\n+        a_signal.disconnect(fails)\n         a_signal.connect(receiver_1_arg)\n+        import logging\n         result = a_signal.send_robust(sender=self, val='test')\n         self.assertEqual(result, [(receiver_1_arg, 'test')])\n         a_signal.disconnect(receiver_1_arg)\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..234489f 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,41 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from .models import ChoiceModel\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from django.utils.translation import gettext_lazy as _\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Ensure the value is in the error message for ModelChoiceField\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n+    def test_modelmultiplechoicefield_value_list_placeholder(self):\n+        # Ensure the invalid choice is included in ModelMultipleChoiceField for a list of invalid choices\n+        f = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+                'invalid_list': 'Enter a list of values.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid1\", \"invalid2\" is not one of the available choices.'],\n+            f.clean,\n+            ['invalid1', 'invalid2'],\n+        )\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +340,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "",
  "django__django-14017": "",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..4af7937 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1128,7 +1128,37 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n \n-    def test_resolver_match_on_request(self):\n+    def test_repr_functools_partial_with_arguments(self):\n+        \"\"\"Test __repr__ with functools.partial that has arguments.\"\"\"\n+        def sample_view(arg1, arg2):\n+            return HttpResponse(f\"Args: {arg1}, {arg2}\")\n+\n+        partial_func = functools.partial(sample_view, 'arg1_value')\n+        match = ResolverMatch(\n+            func=partial_func, args=('resolved_arg2',), kwargs={}, url_name='partial_url', app_names=[], namespaces=[], route='partial_route'\n+        )\n+        expected_repr = (\n+            \"ResolverMatch(func=test_repr_functools_partial_with_arguments.<locals>.sample_view, \"\n+            \"args=('resolved_arg2',), kwargs={}, url_name=partial_url, app_names=[], namespaces=[], \"\n+            \"route=partial_route)\"\n+        )\n+        self.assertEqual(repr(match), expected_repr)\n+\n+    def test_repr_functools_partial_no_arguments(self):\n+        \"\"\"Test __repr__ with functools.partial without pre-supplied arguments.\"\"\"\n+        def empty_view():\n+            return HttpResponse(\"This is an empty view\")\n+\n+        partial_func = functools.partial(empty_view)\n+        match = ResolverMatch(\n+            func=partial_func, args=(), kwargs={}, url_name='empty_partial', app_names=[], namespaces=[], route='empty_partial_route'\n+        )\n+        expected_repr = (\n+            \"ResolverMatch(func=test_repr_functools_partial_no_arguments.<locals>.empty_view, \"\n+            \"args=(), kwargs={}, url_name=empty_partial, app_names=[], namespaces=[], \"\n+            \"route=empty_partial_route)\"\n+        )\n+        self.assertEqual(repr(match), expected_repr)\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n@@ -1146,6 +1176,8 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools  # Required for creating functools.partial objects for testing\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..632fd69 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test.utils import isolate_apps\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -74,7 +76,31 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n         class Model(models.Model):\n@@ -91,7 +117,31 @@ class TestDefaultPK(SimpleTestCase):\n         m2m_pk = M2MModel._meta.get_field('m2m').remote_field.through._meta.pk\n         self.assertIsInstance(m2m_pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_m2m_app_default_auto_field(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..67eac20 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2206,6 +2206,22 @@ class StartApp(AdminScriptTestCase):\n             \"another directory.\"\n         )\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app_with_slash')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app_with_slash', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_trailing_slash_on_non_existent_directory(self):\n+        non_existent_dir = os.path.join(self.test_dir, 'apps', 'non_existent_dir', '')\n+        _, err = self.run_django_admin(['startapp', 'app', non_existent_dir])\n+        self.assertOutput(\n+            err,\n+            \"CommandError: Destination directory '{}' does not \"\n+            \"exist, please create it first.\".format(non_existent_dir.rstrip(os.sep))\n+        )\n+\n     def test_overlaying_app(self):\n         # Use a subdirectory so it is outside the PYTHONPATH.\n         os.makedirs(os.path.join(self.test_dir, 'apps/app1'))\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..269d260 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,5 +1,6 @@\n import datetime\n import re\n+from django.forms import forms\n from unittest import mock\n \n from django.contrib.auth.forms import (\n@@ -1020,6 +1021,23 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_widget_no_for_attribute(self):\n+        \"\"\"\n+        Test that ReadOnlyPasswordHashWidget's label does not have a 'for' attribute.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        form = TestForm()\n+        bound_field = form['hash_field']\n+\n+        # Check that the id_for_label method returns None\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+\n+        # The generated label should not include a 'for' attribute\n+        expected_label_html = '<label>Hash field:</label>'\n+        self.assertEqual(bound_field.label_tag(), expected_label_html)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..5a8d1ff 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,37 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Tests that a migration for a model using a custom field and mixin includes the proper imports.\n+        \"\"\"\n+        MyField = type('MyField', (models.TextField,), {})\n+        MyMixin = type('MyMixin', (), {})\n+        MyModel = type('MyModel', (MyMixin, models.Model), {\n+            'name': MyField(primary_key=True)\n+        })\n+        \n+        operations = [\n+            migrations.CreateModel(\n+                name='MyModel',\n+                fields=[\n+                    ('name', MyField(primary_key=True, serialize=False)),\n+                ],\n+                bases=(MyMixin, models.Model),\n+            ),\n+        ]\n+\n+        migration = migrations.Migration('test_migration', 'test_app')\n+        migration.operations = operations\n+        \n+        writer = MigrationWriter(migration)\n+        serialized_migration = writer.as_string()\n+\n+        # Verify that 'from django.db import models' is in the migration file\n+        self.assertIn('from django.db import models', serialized_migration)\n+        # Verify that the custom field and mixin are correctly serialized\n+        self.assertIn('MyField', serialized_migration)\n+        self.assertIn('MyMixin', serialized_migration)\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..0326c7c 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -360,6 +360,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n \n+        # Verify the HTML rendering of non-form errors for this specific case\n+        rendered_errors = str(formset.non_form_errors(as_text=False))\n+        self.assertEqual(rendered_errors, '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>')\n+\n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n         min_num validation doesn't consider unchanged forms with initial data\n@@ -983,8 +987,35 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        \n+        # Verify the HTML rendering of non-form errors for this specific case\n+        rendered_errors = str(formset.non_form_errors(as_text=False))\n+        self.assertEqual(rendered_errors, '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>')\n \n-    def test_formset_iteration(self):\n+    def test_formset_validate_max_flag(self):\n+        \"\"\"\n+        If validate_max is set and more forms are submitted than max_num allows,\n+        a ValidationError is raised.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',  # the number of forms rendered\n+            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'choices-MAX_NUM_FORMS': '1',  # max number of forms\n+            'choices-0-choice': 'Option A',\n+            'choices-0-votes': '10',\n+            'choices-1-choice': 'Option B',\n+            'choices-1-votes': '20',\n+            'choices-2-choice': 'Option C',\n+            'choices-2-votes': '30',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        \n+        # Verify the HTML rendering of non-form errors for this specific case\n+        rendered_errors = str(formset.non_form_errors(as_text=False))\n+        self.assertEqual(rendered_errors, '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>')\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..9fef8bf 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -293,6 +293,33 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+    def test_serialize_result_with_extra_fields(self):\n+        # Define a custom AutocompleteJsonView class to test serialization extension point.\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                # Call the parent method and add extra fields\n+                return super().serialize_result(obj, to_field_name) | {'extra_field': 'extra_value'}\n+\n+        # Create test data\n+        Question.objects.create(question='Test Question 1')\n+        Question.objects.create(question='Test Question 2')\n+\n+        # Issue a request to the custom view\n+        request = self.factory.get(self.url, {'term': 'test', **self.opts})\n+        request.user = self.superuser\n+        response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        \n+        # Validate response\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'extra_field': 'extra_value'}\n+                for q in Question.objects.all()\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..7e036f7 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -425,8 +425,34 @@ class MethodDecoratorTests(SimpleTestCase):\n                 def __module__(cls):\n                     return \"tests\"\n \n+from functools import wraps\n+from unittest import TestCase\n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+class MethodDecoratorTests(TestCase):\n+    def test_wrapper_assignments_with_partial(self):\n+        \"\"\"Tests method_decorator with a function returning a partial object.\"\"\"\n+        from functools import partial\n+       \n+        # Define a test decorator that returns a partial object\n+        def custom_decorator(func):\n+            @wraps(func)\n+            def wrapper(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return partial(wrapper)\n+\n+        class TestClass:\n+            @method_decorator(custom_decorator)\n+            def my_method(self):\n+                \"\"\"This is a test method\"\"\"\n+                return \"Hello, World!\"\n+\n+        instance = TestClass()\n+        result = instance.my_method()\n+\n+        self.assertEqual(result, \"Hello, World!\")\n+        self.assertEqual(TestClass.my_method.__name__, 'my_method')\n+        self.assertEqual(TestClass.my_method.__doc__, 'This is a test method')\n+        self.assertIsNotNone(getattr(TestClass.my_method, '__module__', None))\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..fa16fee 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5083,6 +5083,51 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n     def test_user_password_change_limited_queryset(self):\n         su = User.objects.filter(is_superuser=True)[0]\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n+\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test the URLs generated for readonly foreign key links\n+        in both default and custom admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Test Chapter',\n+            content='Test content',\n+            book=Book.objects.create(name='Test Book')\n+        )\n+        language = Language.objects.create(iso='TST', name='Test Language')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser\n+        )\n+\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,)))\n+        self.assertEqual(response.status_code, 200)\n+        \n+        # Extract URL for chapter foreign key field\n+        # Check if the URL is pointing to the correct admin site\n+        chapter_link = f'href=\"/{admin_site}/admin_views/chapter/{chapter.pk}/change/\"'\n+        self.assertContains(response, chapter_link)\n+\n+        # Extract URL for language foreign key field\n+        language_link = f'href=\"/{admin_site}/admin_views/language/{language.pk}/change/\"'\n+        self.assertContains(response, language_link)\n+\n+        # Extract URL for user foreign key field\n+        user_link = f'href=\"/{admin_site}/auth/user/{self.superuser.pk}/change/\"'\n+        self.assertContains(response, user_link)\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links in a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom_admin')\n         self.assertEqual(response.status_code, 404)\n \n     def test_change_form_renders_correct_null_choice_value(self):\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..d589217 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django import forms\n@@ -341,6 +342,29 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n+    def test_choice_value_hash(self):\n+        # Import ModelChoiceIteratorValue needed for tests\n+        from django.forms.models import ModelChoiceIteratorValue\n+\n+        # Create instances of ModelChoiceIteratorValue\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Check if the hash value is consistent regardless of instance differences\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        \n+        # Ensure different instances produce different hash values\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+        # Further checks to ensure hashability\n+        # Testing if ModelChoiceIteratorValue can be used as dictionary key\n+        test_dict = {value_1: 'some_value'}\n+        self.assertEqual(test_dict[value_1], 'some_value')\n+\n+        # Testing if ModelChoiceIteratorValue can be added to a set\n+        test_set = {value_1}\n+        self.assertIn(value_1, test_set)\n+        \n     def test_choices_not_fetched_when_not_rendering(self):\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..b33aa8e 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -153,8 +153,25 @@ class MultiValueFieldTest(SimpleTestCase):\n             <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n             \"\"\",\n         )\n+    \n+    def test_multivaluefield_label_without_index(self):\n+        class TestForm(forms.Form):\n+            field = MultiValueField(fields=(CharField(), CharField()))\n \n-    def test_form_as_table_data(self):\n+        form = TestForm()\n+        # Ensure the label does not include unnecessary index referencing\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr>\n+                <th><label for=\"id_field_0\">Field:</label></th>\n+                <td>\n+                    <input type=\"text\" name=\"field_0\" id=\"id_field_0\" required>\n+                    <input type=\"text\" name=\"field_1\" id=\"id_field_1\" required>\n+                </td>\n+            </tr>\n+            \"\"\"\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..c8444e9 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -12,6 +12,7 @@ from django.db.models.functions import (\n     Coalesce, ExtractYear, Floor, Length, Lower, Trim,\n )\n from django.test import TestCase, skipUnlessDBFeature\n+from datetime import date\n from django.test.utils import register_lookup\n \n from .models import (\n@@ -196,6 +197,27 @@ class NonAggregateAnnotationTestCase(TestCase):\n         ).get(isbn=test.isbn)\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n+    \n+    def test_full_expression_annotation(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_full_expression_annotation_with_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    def test_aggregate_over_full_expression_annotation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n \n     def test_empty_expression_annotation(self):\n         books = Book.objects.annotate(\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..5e55263 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,6 @@\n+\n+from django.utils.safestring import SafeData, mark_safe\n+\n import json\n import random\n \n@@ -163,7 +166,29 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that messages with empty extra_tags are correctly serialized and deserialized.\n+        \"\"\"\n+        storage = self.storage_class(self.get_request())\n+        \n+        # Create a message with empty extra_tags\n+        original_message_empty = Message(constants.INFO, \"Message with empty tags\", extra_tags=\"\")\n+        encoded_message_empty = storage._encode(original_message_empty)\n+        decoded_message_empty = storage._decode(encoded_message_empty)\n+        self.assertEqual(decoded_message_empty.extra_tags, \"\")\n+\n+        # Create a message with None extra_tags\n+        original_message_none = Message(constants.INFO, \"Message with None tags\", extra_tags=None)\n+        encoded_message_none = storage._encode(original_message_none)\n+        decoded_message_none = storage._decode(encoded_message_none)\n+        self.assertIsNone(decoded_message_none.extra_tags)\n+\n+        # Create a message with non-empty extra_tags\n+        original_message_non_empty = Message(constants.INFO, \"Message with non-empty tags\", extra_tags=\"tag\")\n+        encoded_message_non_empty = storage._encode(original_message_non_empty)\n+        decoded_message_non_empty = storage._decode(encoded_message_non_empty)\n+        self.assertEqual(decoded_message_non_empty.extra_tags, \"tag\")\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..28196a4 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,6 +1,7 @@\n from pathlib import Path\n from unittest import mock\n \n+from pathlib import Path\n from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n",
  "django__django-15400": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\nindex f0097c4..87c6f24 100644\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -304,8 +304,35 @@ class SimpleLazyObjectTestCase(LazyObjectTestCase):\n     # tested in the parent testcase also apply to SimpleLazyObject.\n     def lazy_wrap(self, wrapped_object):\n         return SimpleLazyObject(lambda: wrapped_object)\n-\n-    def test_repr(self):\n+    def test_radd_with_integer(self):\n+        obj = self.lazy_wrap(10)\n+        # Test reverse addition with an integer on the left side.\n+        self.assertEqual(5 + obj, 15)\n+        self.assertEqual(0 + obj, 10)\n+        self.assertEqual(-10 + obj, 0)\n+\n+    def test_radd_with_lazy_object(self):\n+        obj1 = self.lazy_wrap(3)\n+        obj2 = self.lazy_wrap(4)\n+        # Test reverse addition where both sides are SimpleLazyObjects.\n+        self.assertEqual(obj1 + obj2, 7)\n+        self.assertEqual(obj2 + obj1, 7)\n+        \n+    def test_radd_with_custom_objects(self):\n+        class CustomAdd:\n+            def __init__(self, value):\n+                self.value = value\n+            \n+            def __add__(self, other):\n+                return CustomAdd(self.value + other)\n+\n+        obj = self.lazy_wrap(7)\n+        custom = CustomAdd(5)\n+        \n+        # Test reverse addition with a custom object implementing __add__.\n+        added_result = custom + obj\n+        self.assertIsInstance(added_result, CustomAdd)\n+        self.assertEqual(added_result.value, 12)\n         # First, for an unevaluated SimpleLazyObject\n         obj = self.lazy_wrap(42)\n         # __repr__ contains __repr__ of setup function and does not evaluate\n",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..c0dc0b5 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,14 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test was_modified_since with an empty string as If-Modified-Since header.\n+        It should return True and not raise an exception.\n+        \"\"\"\n+        mtime = 1  # arbitrary mtime\n+        self.assertTrue(was_modified_since(header=\"\", mtime=mtime))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..bce99ae 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -8,6 +9,8 @@ from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n+from argparse import ArgumentDefaultsHelpFormatter\n+from io import StringIO\n from django.core.management.utils import (\n     find_command,\n     get_random_secret_key,\n@@ -411,6 +414,35 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+    def test_custom_command_help_formatter(self):\n+        \"\"\"\n+        Test that the help formatter outputs the expected command help\n+        format including correct epilog formatting.\n+        \"\"\"\n+        class CustomCommand(BaseCommand):\n+            help = \"\"\"\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+            \"\"\"\n+        \n+        out = StringIO()\n+        command = CustomCommand()\n+        parser = command.create_parser(\"manage.py\", \"tzkt_import\")\n+        parser.print_help(out)\n+        expected_output = (\n+            \"usage: manage.py tzkt_import [-h] [--api API] [--version] [-v {0,1,2,3}] [--settings SETTINGS]\\n\"\n+            \"                             [--pythonpath PYTHONPATH] [--traceback] [--no-color] \"\n+            \"[--force-color]\\n\"\n+            \"                             [--skip-checks]\\n\"\n+            \"                             blockchain target\\n\"\n+            \"\\n\"\n+            \"Import a contract from tzkt\\n\"\n+            \"Example usage:\\n\"\n+            \"   ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+        )\n+        self.assertIn(expected_output, out.getvalue())\n+\n     def test_outputwrapper_flush(self):\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..0d51a3e 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,5 +1,8 @@\n+\n import os\n from datetime import datetime\n+import json\n+from django.core.serializers.json import DjangoJSONEncoder\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n@@ -217,6 +220,32 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                # Define a custom encoding that returns a static JSON string\n+                return '{\"hello\": \"world\"}'\n+\n+        # Test the output when using the custom encoder\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_invalid_encoder(self):\n+        class InvalidEncoder:\n+            pass\n+\n+        with self.assertRaises(TypeError):\n+            json_script({}, encoder=InvalidEncoder)\n+\n+    def test_json_script_default_encoder(self):\n+        # Ensure the default DjangoJSONEncoder is used when no custom encoder is provided\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..087bc3c 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -141,21 +141,40 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             check_for_template_tags_with_the_same_name(None),\n             [self.error_same_tags],\n         )\n-\n-    def test_template_tags_with_same_library_name(self):\n+    def test_same_library_name_in_templates_options(self):\n+        # This test directly targets the TEMPLATES['OPTIONS']['libraries'] setting\n+        # where the issue was reported.\n         with self.settings(\n             TEMPLATES=[\n-                self.get_settings(\n-                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n-                ),\n-                self.get_settings(\n-                    \"same_tags\", \"same_tags_app_2.templatetags.same_tags\"\n-                ),\n+                {\n+                    \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+                    \"OPTIONS\": {\n+                        \"libraries\": {\n+                            \"my_tags\": \"someapp.templatetags.my_tags\"\n+                        }\n+                    }\n+                },\n+                {\n+                    \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+                    \"OPTIONS\": {\n+                        \"libraries\": {\n+                            \"my_tags\": \"someapp.templatetags.my_tags\"\n+                        }\n+                    }\n+                },\n             ]\n         ):\n             self.assertEqual(\n                 check_for_template_tags_with_the_same_name(None),\n-                [self.error_same_tags],\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'my_tags'\",\n+                            \"'someapp.templatetags.my_tags', 'someapp.templatetags.my_tags'\"\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ]\n             )\n \n     @override_settings(\n@@ -206,4 +225,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..a3091ba 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,9 +398,25 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+from django.test import TestCase\n+from .models import AnotherModel, ProxyCustomModel\n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n+...\n+\n+class ProxyModelTests(TestCase):\n+    def test_select_related_only_with_proxy(self):\n+        # Create an instance of ProxyCustomModel\n+        custom_obj = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        # Create an instance of AnotherModel that relates to the ProxyCustomModel instance\n+        another_obj = AnotherModel.objects.create(custom=custom_obj)\n+\n+        # Test the queryset using select_related and only on the proxy\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        fetched_obj = qs.get()\n+\n+        # Validate that the queryset retrieves the correct object\n+        self.assertEqual(fetched_obj, another_obj)\n+        self.assertEqual(fetched_obj.custom.name, \"Test Name\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..65fa7c3 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,7 +151,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n-    def test_parameters(self):\n+    def test_parameter_before_dbname(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n+            ([\"psql\", \"--help\", \"dbname\"], None),\n+        )\n+\n+    def test_parameters_after_dbname(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +189,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..a871d9e 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,6 +1901,26 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.forms import formset_factory, BaseFormSet\n+        from django.test import SimpleTestCase\n+        from django.forms.models import Choice\n+\n+        class ManagementFormDeprecationWarningTests(SimpleTestCase):\n+            \n+            def test_no_management_form_deprecation_warning(self):\n+                \"\"\"\n+                Test that no deprecation warning is raised when rendering \n+                a management form in a formset.\n+                \"\"\"\n+                with isolate_lru_cache(get_default_renderer), self.settings(\n+                    FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+                ):\n+                    # Create a formset based on a simple form model.\n+                    ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                    formset = ChoiceFormSet()\n+                    # Rendering the management form of the formset should not raise a warning.\n+                    rendered_management_form = str(formset.management_form)\n+                    self.assertNotIn(DEFAULT_TEMPLATE_DEPRECATION_MSG, rendered_management_form)\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1929,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..0ffcf9c 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,18 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_none_and_empty_negative(self):\n+        # Verify the fix handles empty string input correctly.\n+        with self.assertRaises(IndexError):\n+            nformat(\"-\", \".\")  # Should raise IndexError since \"-\" is invalid.\n+        # Ensure the function returns \"None\" string for None input.\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+        # Ensure the function returns empty string for empty string input.\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..b3941f3 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,10 @@\n+\n import datetime\n+import urllib.parse\n+import re\n import re\n from unittest import mock\n+from django.urls import reverse\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm,\n@@ -884,6 +888,27 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            kwargs={'object_id': user.pk},\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+\n     def test_bug_19349_bound_password_field(self):\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..fbe58b2 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,22 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n-\n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+from django.test import TestCase\n+from django.urls import path\n+from django.contrib.sitemaps import Sitemap\n+from django.contrib.sitemaps.views import index\n+from django.test.utils import override_settings\n+\n+class CallableLastmodNoItemsTests(TestCase):\n+    def test_callable_lastmod_no_items(self):\n+        # Test that a sitemap that has a callable lastmod and no items does not raise ValueError\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response.headers)\n+        expected_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\"\"\"\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..2f132b6 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -5,7 +6,8 @@ from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n-from django.test import RequestFactory, TestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..e78ba32 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -26,6 +27,14 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n+    # Ensure join filter doesn't escape joiner string when autoescape is off.\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        output = self.engine.render_to_string(\n+            \"join_autoescape_off\", {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"var\": \"<br/>\"}\n+        )\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n+\n     # Joining with unsafe joiners doesn't result in unsafe strings.\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n@@ -78,4 +87,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..343d758 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -790,7 +790,50 @@ class BulkCreateTests(TestCase):\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n-    def test_update_conflicts_unique_fields_update_fields_db_column(self):\n+    def test_bulk_create_with_update_conflicts_returns_ids(self):\n+        # Create initial objects\n+        TwoFields.objects.bulk_create(\n+            [TwoFields(f1=1, f2=1, name=\"a\"), TwoFields(f1=2, f2=2, name=\"b\")]\n+        )\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # Prepare conflicting objects with update_conflicts=True\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"c\"),\n+            TwoFields(f1=2, f2=2, name=\"d\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"f1\"],\n+            update_fields=[\"name\"],\n+        )\n+\n+        # Verify IDs are set\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+\n+    def test_bulk_create_with_update_conflicts_and_new_objects(self):\n+        # Prepare new and conflicting objects\n+        objects = [\n+            Country(name=\"Germany\", iso_two_letter=\"DE\"),\n+            Country(name=\"Czech Republic\", iso_two_letter=\"CZ\"),\n+            Country(name=\"Australia\", iso_two_letter=\"AU\"),\n+            Country(name=\"Japan\", iso_two_letter=\"JP\"),\n+        ]\n+        results = Country.objects.bulk_create(\n+            objects,\n+            update_conflicts=True,\n+            update_fields=[\"description\"],\n+            unique_fields=[\"iso_two_letter\"],\n+        )\n+\n+        # Verify the number and IDs of results\n+        self.assertEqual(len(results), len(objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         FieldsWithDbColumns.objects.bulk_create(\n             [\n                 FieldsWithDbColumns(rank=1, name=\"a\"),\n@@ -816,4 +859,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..236904e 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -242,8 +242,33 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(value.max_length, new_value.max_length)\n         self.assertEqual(value.null, new_value.null)\n         self.assertEqual(value.unique, new_value.unique)\n-\n-    def test_serialize_numbers(self):\n+    class Profile(models.Model):\n+        class Capability(models.TextChoices):\n+            BASIC = (\"BASIC\", \"Basic\")\n+            PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+            \n+            @classmethod\n+            def default(cls):\n+                return [cls.BASIC]\n+        \n+        capabilities = models.JSONField(\n+            default=Capability.default,\n+            null=True,\n+        )\n+\n+    def test_serialize_nested_class_method_as_default(self):\n+        \"\"\"\n+        Test that a nested class method used as a field default\n+        is serialized correctly (resolves to the correct dotted path).\n+        \"\"\"\n+        field = self.Profile._meta.get_field(\"capabilities\")\n+        default = field.default\n+        serialized_default, imports = MigrationWriter.serialize(default)\n+        self.assertEqual(\n+            serialized_default,\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+        )\n+        self.assertIn(\"import migrations.test_writer\", imports)\n         self.assertSerializedEqual(1)\n         self.assertSerializedEqual(1.2)\n         self.assertTrue(math.isinf(self.serialize_round_trip(float(\"inf\"))))\n@@ -1032,4 +1057,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..21a8eae 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1119,6 +1119,28 @@ def test_range_slider(orientation):\n     slider.reset()\n     assert_allclose(slider.val, [0.1, 0.34])\n \n+def test_range_slider_valinit():\n+    # Check if RangeSlider can be initialized without errors with valinit.\n+    fig, ax = plt.subplots()\n+    valinit = [0.0, 0.0]\n+    slider = widgets.RangeSlider(ax=ax, label=\"Threshold\", valmin=-2, valmax=2, valinit=valinit)\n+    \n+    # Check if initial values are set correctly\n+    assert_allclose(slider.val, valinit)\n+\n+    # Further checks on setting values to ensure no regression.\n+    slider.set_val([-1.5, 1.5])\n+    assert_allclose(slider.val, (-1.5, 1.5))\n+\n+    slider.set_val([0.0, 0.0])\n+    assert_allclose(slider.val, (0.0, 0.0))\n+\n+    slider.set_val([2.0, -2.0])  # This should clip to [valmin, valmax] in sorted order\n+    assert_allclose(slider.val, (-2.0, 2.0))\n+    \n+    slider.reset()\n+    assert_allclose(slider.val, valinit)\n+\n \n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..6db8071 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,13 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib._pylab_helpers import Gcf\n+import pytest\n+import sys\n+import matplotlib as mpl\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n@@ -508,7 +515,27 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+\n+def test_get_backend_does_not_clear_gcf():\n+    # Test to verify that get_backend() does not clear figures from Gcf\n+    with rc_context():\n+        fig1 = plt.figure()\n+        before = f'{id(Gcf)} {Gcf.figs!r}'\n+        get_backend()\n+        after = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+        assert before == after, f'\\n{before}\\n{after}'\n+\n+    # Test with a figure outside rc_context\n+    fig2 = plt.figure()\n+    with rc_context():\n+        fig3 = plt.figure()\n+\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    assert before == after, f'\\n{before}\\n{after}'\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..b130515 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,6 +21,24 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_visibility(fig_test, fig_ref):\n+    # Test to check visibility of 3D axes after setting it to be invisible\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    \n+    # Some plot data\n+    ax_test.scatter([1], [1], [1])\n+    ax_ref.scatter([1], [1], [1])\n+    \n+    # Make the test subplot invisible\n+    ax_test.set_visible(False)\n+    # Keep the reference subplot visible (default)\n+    \n+    # Expect the test figure with invisible axes to match an empty figure\n+    fig_test.patch.set_alpha(0)  # Make the test figure's patch fully transparent\n+    fig_ref.patch.set_alpha(0)  # Make the reference figure's patch fully transparent\n+    \n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..b52ee29 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1802,6 +1802,39 @@ def test_pathpatch_3d(fig_test, fig_ref):\n @image_comparison(baseline_images=['scatter_spiral.png'],\n                   remove_text=True,\n                   style='default')\n+def test_Poly3DCollection_get_facecolor():\n+    # Smoke test to verify get_facecolor does not raise an error\n+    y, x = np.ogrid[1:10:100j, 1:10:100j]\n+    z2 = np.cos(x) ** 3 - np.sin(y) ** 2\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111, projection='3d')\n+    r = ax.plot_surface(x, y, z2, cmap='hot')\n+    \n+    # Test get_facecolor method\n+    try:\n+        r.get_facecolor()\n+        print(\"get_facecolor method executed without AttributeError.\")\n+    except AttributeError as e:\n+        print(f\"get_facecolor raised an error: {e}\")\n+\n+def test_Poly3DCollection_get_edgecolor():\n+    # Smoke test to verify get_edgecolor does not raise an error\n+    y, x = np.ogrid[1:10:100j, 1:10:100j]\n+    z2 = np.cos(x) ** 3 - np.sin(y) ** 2\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111, projection='3d')\n+    r = ax.plot_surface(x, y, z2, cmap='hot')\n+    \n+    # Test get_edgecolor method\n+    try:\n+        r.get_edgecolor()\n+        print(\"get_edgecolor method executed without AttributeError.\")\n+    except AttributeError as e:\n+        print(f\"get_edgecolor raised an error: {e}\")\n+\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n def test_scatter_spiral():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..bcb3bc1 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -773,6 +773,15 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n     for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n         assert mpl.colors.same_color(text.get_color(), color)\n \n+import pytest\n+import matplotlib.pyplot as plt\n+\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable_initialization(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_line')\n+    legend = ax.legend(draggable=draggable)\n+    assert legend.get_draggable() is draggable\n \n def test_get_set_draggable():\n     legend = plt.legend()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..d6c51f9 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -252,10 +252,38 @@ def test_linedash():\n \n     buf = io.BytesIO()\n     fig.savefig(buf, format=\"ps\")\n-\n     assert buf.tell() > 0\n \n \n+def test_empty_line_text():\n+    # Verify fix for issue with empty lines in multi-line text labels\n+    from matplotlib.figure import Figure\n+    import io\n+\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    # Adding an annotation with an empty line\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0  # Ensure something was written to the buffer\n+\n+def test_empty_line_title():\n+    # Additional test case for empty lines in title\n+    from matplotlib.figure import Figure\n+    import io\n+\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    # Adding a title with an empty line\n+    ax.set_title('\\nLower title')\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0  # Ensure something was written to the buffer\n+\n+\n def test_no_duplicate_definition():\n \n     fig = Figure()\n",
  "matplotlib__matplotlib-23987": "",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..2f37da4 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5733,6 +5733,56 @@ def test_set_get_ticklabels():\n \n \n @check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_raise_error_without_labels():\n+    \"\"\"\n+    When labels=None and any kwarg is passed, axis.set_ticks() raises a\n+    ValueError to ensure kwargs are not silently ignored.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, alpha=0.5)\n+\n+def test_set_ticks_with_valid_labels_kwargs():\n+    \"\"\"\n+    Test that no error is raised when labels and valid Text kwargs are provided.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = [\"One\", \"Two\", \"Three\"]\n+    ax.xaxis.set_ticks(ticks, labels=labels, fontsize=12)  # Should not raise\n+\n+def test_set_ticks_with_invalid_kwargs_when_labels_set():\n+    \"\"\"\n+    Test that invalid Text properties raise an error even when labels are set.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = [\"One\", \"Two\", \"Three\"]\n+    with pytest.raises(TypeError):\n+        ax.xaxis.set_ticks(ticks, labels=labels, bad_property=100)  # Should raise\n+\n+def test_set_ticks_no_kwargs_no_labels():\n+    \"\"\"\n+    Test that no error is raised when neither kwargs nor labels are provided.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    ax.xaxis.set_ticks(ticks)  # Should not raise\n+\n+def test_set_ticks_with_invalid_labels_type():\n+    \"\"\"\n+    Test that providing a non-iterable as labels raises an error.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    non_iterable_labels = 123  # Incorrect type\n+    with pytest.raises(TypeError):\n+        ax.xaxis.set_ticks(ticks, labels=non_iterable_labels)\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..5bb6bea 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -90,6 +91,8 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n+import pickletools\n+\n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n@@ -106,7 +109,26 @@ def test_complete(fig_test, fig_ref):\n     plt.close(loaded)\n \n \n-def _pickle_load_subprocess():\n+def test_pickling_with_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)  # Test the ability to pickle with a draggable legend\n+\n+    # Pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure that 'FigureCanvasAgg' is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Unpickle the figure\n+    loaded = pickle.loads(pkl)\n+    # Try drawing the loaded canvas to ensure it's valid\n+    loaded.canvas.draw()\n     import os\n     import pickle\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..87457e7 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -58,37 +58,343 @@ def _generate_complete_test_figure(fig_ref):\n     # Ensure lists also pickle correctly.\n     plt.subplot(3, 3, 1)\n     plt.plot(list(range(10)))\n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+\n+def test_pickle_figure_with_aligned_labels():\n+    # Create a simple plot with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n \n+    # Align labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickle_data)\n+        unpickled_fig.canvas.draw()  # Attempt to draw to test if it's fully functional\n+        plt.close(unpickled_fig)     # Close to avoid resource warning\n+        success = True\n+    except Exception as e:\n+        success = False\n+        print(f\"Pickling failed: {e}\")\n+\n+    assert success, \"Pickle and unpickle of figure with aligned labels failed.\"\n+\n+# Insert the test call here for completion or it can be added via a test runner.\n     plt.subplot(3, 3, 2)\n     plt.contourf(data, hatches=['//', 'ooo'])\n     plt.colorbar()\n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n \n+def test_pickle_figure_with_aligned_labels():\n+    # Create a simple plot with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickle_data)\n+        unpickled_fig.canvas.draw()  # Attempt to draw to test if it's fully functional\n+        plt.close(unpickled_fig)     # Close to avoid resource warning\n+        success = True\n+    except Exception as e:\n+        success = False\n+        print(f\"Pickling failed: {e}\")\n+\n+    assert success, \"Pickle and unpickle of figure with aligned labels failed.\"\n+\n+# Insert the test call here for completion or it can be added via a test runner.\n     plt.subplot(3, 3, 3)\n     plt.pcolormesh(data)\n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+\n+def test_pickle_figure_with_aligned_labels():\n+    # Create a simple plot with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n \n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickle_data)\n+        unpickled_fig.canvas.draw()  # Attempt to draw to test if it's fully functional\n+        plt.close(unpickled_fig)     # Close to avoid resource warning\n+        success = True\n+    except Exception as e:\n+        success = False\n+        print(f\"Pickling failed: {e}\")\n+\n+    assert success, \"Pickle and unpickle of figure with aligned labels failed.\"\n+\n+# Insert the test call here for completion or it can be added via a test runner.\n     plt.subplot(3, 3, 4)\n     plt.imshow(data)\n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+\n+def test_pickle_figure_with_aligned_labels():\n+    # Create a simple plot with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n \n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickle_data)\n+        unpickled_fig.canvas.draw()  # Attempt to draw to test if it's fully functional\n+        plt.close(unpickled_fig)     # Close to avoid resource warning\n+        success = True\n+    except Exception as e:\n+        success = False\n+        print(f\"Pickling failed: {e}\")\n+\n+    assert success, \"Pickle and unpickle of figure with aligned labels failed.\"\n+\n+# Insert the test call here for completion or it can be added via a test runner.\n     plt.subplot(3, 3, 5)\n     plt.pcolor(data)\n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+\n+def test_pickle_figure_with_aligned_labels():\n+    # Create a simple plot with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n \n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickle_data)\n+        unpickled_fig.canvas.draw()  # Attempt to draw to test if it's fully functional\n+        plt.close(unpickled_fig)     # Close to avoid resource warning\n+        success = True\n+    except Exception as e:\n+        success = False\n+        print(f\"Pickling failed: {e}\")\n+\n+    assert success, \"Pickle and unpickle of figure with aligned labels failed.\"\n+\n+# Insert the test call here for completion or it can be added via a test runner.\n     ax = plt.subplot(3, 3, 6)\n     ax.set_xlim(0, 7)\n     ax.set_ylim(0, 9)\n     plt.streamplot(x, y, u, v)\n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+\n+def test_pickle_figure_with_aligned_labels():\n+    # Create a simple plot with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n \n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickle_data)\n+        unpickled_fig.canvas.draw()  # Attempt to draw to test if it's fully functional\n+        plt.close(unpickled_fig)     # Close to avoid resource warning\n+        success = True\n+    except Exception as e:\n+        success = False\n+        print(f\"Pickling failed: {e}\")\n+\n+    assert success, \"Pickle and unpickle of figure with aligned labels failed.\"\n+\n+# Insert the test call here for completion or it can be added via a test runner.\n     ax = plt.subplot(3, 3, 7)\n     ax.set_xlim(0, 7)\n     ax.set_ylim(0, 9)\n     plt.quiver(x, y, u, v)\n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n \n+def test_pickle_figure_with_aligned_labels():\n+    # Create a simple plot with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickle_data)\n+        unpickled_fig.canvas.draw()  # Attempt to draw to test if it's fully functional\n+        plt.close(unpickled_fig)     # Close to avoid resource warning\n+        success = True\n+    except Exception as e:\n+        success = False\n+        print(f\"Pickling failed: {e}\")\n+\n+    assert success, \"Pickle and unpickle of figure with aligned labels failed.\"\n+\n+# Insert the test call here for completion or it can be added via a test runner.\n     plt.subplot(3, 3, 8)\n     plt.scatter(x, x ** 2, label='$x^2$')\n     plt.legend(loc='upper left')\n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+\n+def test_pickle_figure_with_aligned_labels():\n+    # Create a simple plot with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n \n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickle_data)\n+        unpickled_fig.canvas.draw()  # Attempt to draw to test if it's fully functional\n+        plt.close(unpickled_fig)     # Close to avoid resource warning\n+        success = True\n+    except Exception as e:\n+        success = False\n+        print(f\"Pickling failed: {e}\")\n+\n+    assert success, \"Pickle and unpickle of figure with aligned labels failed.\"\n+\n+# Insert the test call here for completion or it can be added via a test runner.\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n \n+def test_pickle_figure_with_aligned_labels():\n+    # Create a simple plot with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickle_data)\n+        unpickled_fig.canvas.draw()  # Attempt to draw to test if it's fully functional\n+        plt.close(unpickled_fig)     # Close to avoid resource warning\n+        success = True\n+    except Exception as e:\n+        success = False\n+        print(f\"Pickling failed: {e}\")\n+\n+    assert success, \"Pickle and unpickle of figure with aligned labels failed.\"\n+\n+# Insert the test call here for completion or it can be added via a test runner.\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n@@ -99,10 +405,78 @@ def test_complete(fig_test, fig_ref):\n     pickle.dump(fig_ref, pkl, pickle.HIGHEST_PROTOCOL)\n     loaded = pickle.loads(pkl.getbuffer())\n     loaded.canvas.draw()\n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+\n+def test_pickle_figure_with_aligned_labels():\n+    # Create a simple plot with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n \n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickle_data)\n+        unpickled_fig.canvas.draw()  # Attempt to draw to test if it's fully functional\n+        plt.close(unpickled_fig)     # Close to avoid resource warning\n+        success = True\n+    except Exception as e:\n+        success = False\n+        print(f\"Pickling failed: {e}\")\n+\n+    assert success, \"Pickle and unpickle of figure with aligned labels failed.\"\n+\n+# Insert the test call here for completion or it can be added via a test runner.\n     fig_test.set_size_inches(loaded.get_size_inches())\n     fig_test.figimage(loaded.canvas.renderer.buffer_rgba())\n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n \n+def test_pickle_figure_with_aligned_labels():\n+    # Create a simple plot with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickle_data)\n+        unpickled_fig.canvas.draw()  # Attempt to draw to test if it's fully functional\n+        plt.close(unpickled_fig)     # Close to avoid resource warning\n+        success = True\n+    except Exception as e:\n+        success = False\n+        print(f\"Pickling failed: {e}\")\n+\n+    assert success, \"Pickle and unpickle of figure with aligned labels failed.\"\n+\n+# Insert the test call here for completion or it can be added via a test runner.\n     plt.close(loaded)\n \n \n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..0e2cf18 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -449,4 +449,25 @@ def test_paddedbox():\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_mplcursor_integration():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import mplcursors\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+    \n+    fig, ax = plt.subplots()\n+    scatter = ax.scatter(x, y1)\n+\n+    # Initiate mplcursor and simulate clicks to check for the absence of errors\n+    cursor = mplcursors.cursor(scatter)\n+    \n+    # Simulate clicking behavior by calling the mouse event handlers directly\n+    for _ in range(5):\n+        cursor._event_handler.on_pick(scatter.figure, event=None)\n+\n+    # Draw the canvas to ensure no errors during the rendering process\n+    fig.canvas.draw()\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..b688d79 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -96,7 +96,19 @@ class TestContinuous:\n         s = Continuous()._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n-    def test_color_named_values(self, x):\n+    def test_color_mapping_with_booleans(self):\n+\n+        # Create a plot object with boolean values for the color argument\n+        plot = so.Plot([\"a\", \"b\"], [1, 2], color=[True, False]).add(so.Bar())\n+\n+        # Rendering the plot should not raise an error\n+        try:\n+            plot.show()  # or an equivalent method that triggers rendering\n+        except TypeError as e:\n+            self.fail(f\"Plot.show() raised TypeError unexpectedly: {e}\")\n+\n+        # Additional checks can be implemented based on expected color output\n+        # For instance, converting `True` to one color and `False` to another\n \n         cmap = color_palette(\"viridis\", as_cmap=True)\n         s = Continuous(\"viridis\")._setup(x, Color())\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..720452a 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,6 +1,8 @@\n+\n import json\n import os\n-import textwrap\n+import io\n+import tomllib\n \n import pytest\n \n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..a472ede 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,32 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import pytest\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import DecodeError, Timeout\n+from requests.packages.urllib3.exceptions import ProtocolError, ReadTimeoutError, DecodeError as Urllib3DecodeError\n+\n+def httpbin(path):\n+    return f'http://httpbin.org/{path}'\n+\n+def test_urllib3_decode_error():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    # Simulate a DecodeError bubble up scenario\n+    with pytest.raises(DecodeError):\n+        raise Urllib3DecodeError(\"Fake decode error\")\n+\n+def test_urllib3_timeout_error():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    # Simulate passing of urllib3's TimeoutError\n+    with pytest.raises(Timeout):\n+        # Here, we simulate a ReadTimeoutError which should be wrapped by requests\n+        raise ReadTimeoutError(None, None, \"Fake timeout error\")\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1689,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..90ab1a7 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -950,7 +950,8 @@ class TestRequests:\n \n     def test_response_is_iterable(self):\n         r = requests.Response()\n-        io = StringIO.StringIO('abc')\n+        import io\n+        io = io.StringIO('abc')\n         read_ = io.read\n \n         def read_mock(amt, decode_content=None):\n@@ -979,8 +980,39 @@ class TestRequests:\n         r.encoding = 'ascii'\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n+    \n+    def test_iter_content_decode_unicode_with_utf8(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True for UTF-8 encoded content.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO('\u0442\u0435\u043a\u0441\u0442'.encode('utf-8'))  # some unicode characters\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+        assert ''.join(chunks) == '\u0442\u0435\u043a\u0441\u0442'\n \n-    def test_response_chunk_size_int(self):\n+    def test_iter_content_decode_unicode_with_iso_8859_1(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True for ISO-8859-1 encoded content.\n+        \"\"\"\n+        r = requests.Response()\n+        # ISO-8859-1 encoding of 'hello' as bytes\n+        r.raw = io.BytesIO(b'hello')\n+        r.encoding = 'ISO-8859-1'\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+        assert ''.join(chunks) == 'hello'\n+\n+    def test_iter_content_no_encoding_set(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True when no encoding is set.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'hello')\n+        r.encoding = None\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"Expected bytes as encoding is None\"\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..a8c4500 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,8 +743,57 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    def test_hooks_with_single_function_in_list(self):\n+        \"\"\"Test hook functionality with a single function wrapped in a list.\"\"\"\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({\n+                'X-Foo': 'foo'\n+            })\n+            return args\n+\n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h) is True\n+\n+        hook = [add_foo_header]\n+        r = requests.models.Request(hooks={'args': hook})\n+        assert_hooks_are_callable(r.hooks)\n+\n+    def test_hooks_with_empty_list(self):\n+        \"\"\"Test hook handling with an empty list.\"\"\"\n+        hooks = []\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert 'args' in r.hooks\n+        assert r.hooks['args'] == hooks\n+\n+    def test_hooks_list_append(self):\n+        \"\"\"Ensure hooks can be added to the list after initialization.\"\"\"\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({\n+                'X-Foo': 'foo'\n+            })\n+            return args\n+\n+        def add_bar_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({\n+                'X-Bar': 'bar'\n+            })\n+            return args\n+\n+        r = requests.models.Request()\n+        r.register_hook('args', add_foo_header)\n+        \n+        # Manually append another hook without using register_hook to test list manipulating\n+        r.hooks['args'].append(add_bar_header)\n \n-    def test_session_persistent_cookies(self):\n+        expected_hooks = [add_foo_header, add_bar_header]\n+        assert r.hooks['args'] == expected_hooks\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..805d0a7 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -400,12 +400,28 @@ def test_groupby_repr(obj, dim):\n         expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n \n+@pytest.mark.parametrize(\"dim\", [\"x\", \"y\", \"z\", \"month\"])\n+@pytest.mark.parametrize(\"obj\", [repr_da, repr_da.to_dataset(name=\"a\")])\n+def test_groupby_str(obj, dim):\n+    actual = str(obj.groupby(dim))\n+    expected = \"%sGroupBy\" % obj.__class__.__name__\n+    expected += \", grouped over %r\" % dim\n+    expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n+    if dim == \"x\":\n+        expected += \"1, 2, 3, 4, 5.\"\n+    elif dim == \"y\":\n+        expected += \"0, 1, 2, 3, 4, 5, ..., 15, 16, 17, 18, 19.\"\n+    elif dim == \"z\":\n+        expected += \"'a', 'b', 'c'.\"\n+    elif dim == \"month\":\n+        expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n+    assert actual == expected\n \n @pytest.mark.parametrize(\"obj\", [repr_da, repr_da.to_dataset(name=\"a\")])\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..c5edc16 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -89,7 +89,27 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n-    def test_issue_2321_should_not_trigger(self) -> None:\n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag_with_only_punctuation(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n+    @set_config(notes=[\"YES\", \"???\"])\n+    def test_mixed_codetags_including_only_punctuation(self) -> None:\n+        code = \"\"\"a = 1\n+                # YES: This is a test note\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"YES: This is a test note\", col_offset=17),\n+            MessageTest(msg_id=\"fixme\", line=3, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n@@ -119,4 +139,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..f80e152 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -53,7 +53,15 @@ reports = \"yes\"\n         f\"${env_var}\", file_to_lint_path\n     )\n     mock_exit.assert_called_once_with(0)\n-    check_configuration_file_reader(runner)\n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from _pytest.capture import CaptureFixture\n+from tests.conftest import EMPTY_MODULE\n+\n+def check_configuration_file_reader(runner):\n+    \"\"\"Dummy function definition for configuration file reader.\"\"\"\n+    pass\n \n \n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n@@ -79,7 +87,13 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n+def test_unrecognized_option_no_traceback(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure no traceback is printed for an unrecognized option.\"\"\"\n+    with pytest.raises(_UnrecognizedOptionError):\n+        Run([\"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..6f5a4db 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,28 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self) -> None:\n+        \"\"\"Test that --ignore-paths is respected when using --recursive=y\"\"\"\n+        with _test_sys_path():\n+            # Exclude directories for cleaner test environment\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Navigate to a directory where ignore-paths should take effect\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Run the test ensuring src/gen/* paths are ignored\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^gen/.*$\"\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/checkers/unittest_imports.py b/tests/checkers/unittest_imports.py\nindex c3c05a2..38c4814 100644\n--- a/tests/checkers/unittest_imports.py\n+++ b/tests/checkers/unittest_imports.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -11,7 +12,7 @@ import astroid\n from pylint import epylint as lint\n from pylint.checkers import imports\n from pylint.interfaces import UNDEFINED\n-from pylint.testutils import CheckerTestCase, MessageTest\n+from pylint.testutils import CheckerTestCase, MessageTest, linter, tempdir, create_files\n \n REGR_DATA = os.path.join(os.path.dirname(__file__), \"..\", \"regrtest_data\", \"\")\n \n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..1d8705a 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,6 @@\n+\n+...\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -5,8 +8,8 @@\n # pylint: disable=redefined-outer-name\n \n from __future__ import annotations\n-\n import sys\n+from _pytest.recwarn import WarningsRecorder\n import warnings\n from contextlib import redirect_stdout\n from io import StringIO\n@@ -112,8 +115,22 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[1] == \"my_mod:1::()\"\n     assert out_lines[2] == \"my_mod:2::()\"\n \n+def test_custom_braces_message_template(linter: PyLinter) -> None:\n+    output = StringIO()\n+    linter.reporter.out = output\n+    # Setting a message template with custom braces\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"test_module\")\n+\n+    # Adding messages to trigger the output\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E1101\", line=2, args=(3, 4))\n \n-def test_deprecation_set_output(recwarn):\n+    out_lines = output.getvalue().split(\"\\n\")\n+    # Check the output format\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..9bd1b4a 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,8 +1,47 @@\n+\n import logging\n \n import py.io\n \n-from _pytest.logging import ColoredLevelFormatter\n+from _pytest.logging import ColoredLevelFormatter, DEFAULT_LOG_FORMAT\n+\n+\n+def test_coloredlogformatter_default_format():\n+    \"\"\" Test using the default log format to match the suggested improvement. \"\"\"\n+    \n+    # Use the proposed improved logging format\n+    logfmt = DEFAULT_LOG_FORMAT\n+\n+    record = logging.LogRecord(\n+        name=\"test_module\",\n+        level=logging.DEBUG,\n+        pathname=\"/path/to/module.py\",\n+        lineno=25,\n+        msg=\"This is a debug message\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfigTest(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+\n+    # Expected format with improvements: %(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\n+    assert output == (\n+        \"DEBUG    \\x1b[32mtest_module:module.py:25 \\x1b[0m This is a debug message\"\n+    )\n+\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == (\n+        \"DEBUG    test_module:module.py:25 This is a debug message\"\n+    )\n \n \n def test_coloredlogformatter():\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..c6b7d64 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -495,7 +495,27 @@ class TestAssert_reprcompare:\n         expl = callequal(TestSequence([0, 1]), list([0, 2]))\n         assert len(expl) > 1\n \n-    def test_list_tuples(self):\n+    def test_bytes_diff_empty_vs_nonempty(self):\n+        \"\"\"Test comparison of empty byte string to non-empty byte string.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n+\n+    def test_bytes_diff_single_char(self):\n+        \"\"\"Test comparison of single character byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+        ]\n         expl = callequal([], [(1, 2)])\n         assert len(expl) > 1\n         expl = callequal([(1, 2)], [])\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..36df1b5 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,3 +1,4 @@\n+\n import os\n from xml.dom import minidom\n \n@@ -6,6 +7,7 @@ import py\n import pytest\n from _pytest.junitxml import LogXML\n from _pytest.reports import BaseReport\n+import platform\n \n \n def runandparse(testdir, *args):\n@@ -157,7 +159,20 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_and_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_example():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        # Verify hostname\n+        node.assert_attr(hostname=platform.node())\n+        # Verify timestamp is present and has the correct format\n+        timestamp = node[\"timestamp\"]\n+        datetime.strptime(timestamp, \"%Y-%m-%dT%H:%M:%S.%f\")\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..5650fd8 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,42 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ and __repr__, reproducing #7145 issue\n+    \"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_broken_repr_raises_runtime_error():\n+    \"\"\"Verify saferepr handles RuntimeError in __repr__ gracefully\"\"\"\n+    class AnotherClass:\n+        def __repr__(self):\n+            raise RuntimeError(\"This __repr__ raises a RuntimeError\")\n+\n+    result = saferepr(AnotherClass())\n+    assert \"<[RuntimeError('This __repr__ raises a RuntimeError') raised in repr()] AnotherClass object at 0x\" in result\n+\n+def test_broken_attribute_access_and_repr():\n+    \"\"\"Test to ensure both __getattribute__ and __repr__ failing is handled\"\"\"\n+    class ClassWithBrokenAccessAndRepr:\n+        def __getattribute__(self, item):\n+            raise AttributeError(\"Access denied!\")\n+        \n+        def __repr__(self):\n+            raise RuntimeError(\"You can't print me!\")\n+\n+    result = saferepr(ClassWithBrokenAccessAndRepr())\n+    assert \"<[RuntimeError('You can't print me!') raised in repr()] ClassWithBrokenAccessAndRepr object at 0x\" in result\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +189,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..3bf68b3 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -706,8 +706,35 @@ class TestFunctional:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(skipped=1)\n \n+def test_reevaluate_dynamic_expr(testdir):\n+    \"\"\"This test checks if the issue #7360 is resolved regarding skipif caching.\"\"\"\n+    py_file1 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr1=\"\"\"\n+        import pytest\n+\n+        skip = True\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_skip():\n+            assert True\n+    \"\"\"\n+    )\n+    py_file2 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr2=\"\"\"\n+        import pytest\n+\n+        skip = False\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_not_skip():\n+            assert True\n+    \"\"\"\n+    )\n \n-class TestKeywordSelection:\n+    file_name1 = py_file1.strpath\n+    file_name2 = py_file2.strpath\n+    reprec = testdir.inline_run(file_name1, file_name2)\n+    reprec.assertoutcome(passed=1, skipped=1)\n     def test_select_simple(self, testdir):\n         file_test = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..9a9d7cd 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -234,8 +234,26 @@ class TestXFail:\n         result.stdout.fnmatch_lines(\n             [\"*def test_func():*\", \"*assert 0*\", \"*1 failed*1 pass*\"]\n         )\n-\n-    def test_xfail_evalfalse_but_fails(self, testdir):\n+    \n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_location_with_runxfail(self, testdir, test_input, expected):\n+        \"\"\"Test to verify that --runxfail does not affect skip location reporting.\"\"\"\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"unconditional skip\")\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n         item = testdir.getitem(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..b1178a2 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -152,8 +153,31 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+from _pytest.pytester import Testdir\n \n class TestXFail:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..043d1e3 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -20,6 +21,7 @@ from _pytest.pathlib import register_cleanup_lock_removal\n from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n from _pytest.tmpdir import get_user\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest.tmpdir import TempdirFactory\n from _pytest.tmpdir import TempPathFactory\n \n",
  "scikit-learn__scikit-learn-10297": "",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..5bbd0a9 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,7 +5,7 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_raise_message, assert_array_equal\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..fbe3cdd 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,11 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+from sklearn.preprocessing import OneHotEncoder\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+import pytest\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n@@ -273,6 +278,26 @@ def test_one_hot_encoder_no_categorical_features():\n     assert enc.categories_ == []\n \n \n+def test_one_hot_encoder_handle_unknown_strings_with_truncate_issue():\n+    # This test is to ensure the issue of truncated strings is resolved.\n+    X_train = np.array(['22', '333', '4444', '11111111']).reshape((-1, 1))\n+    X_test = np.array(['55555', '22']).reshape((-1, 1))\n+\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(X_train)\n+    X_test_passed = X_test.copy()\n+\n+    # Transform X_test and compare with expected output\n+    transformed = ohe.transform(X_test_passed).toarray()\n+    expected = np.array([\n+        [0., 0., 0., 0.],  # unknown category becomes all zeroes\n+        [0., 1., 0., 0.]   # '22' maps correctly to its one-hot encoding\n+    ])\n+    assert_array_equal(transformed, expected)\n+\n+    # Ensure original test data wasn't modified\n+    assert_array_equal(X_test, X_test_passed)\n+\n @pytest.mark.parametrize(\"output_dtype\", [np.int32, np.float32, np.float64])\n @pytest.mark.parametrize(\"input_dtype\", [np.int32, np.float32, np.float64])\n def test_one_hot_encoder_dtype(input_dtype, output_dtype):\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..aa6de60 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,17 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+import numpy as np\n+from sklearn.mixture import GaussianMixture\n+from numpy.testing import assert_array_equal\n+\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Test that fit_predict is equivalent to fit followed by predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..f953b2a 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -70,8 +71,22 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n+def test_kernel_pca_sign_consistency():\n+    rng = np.random.RandomState(42)  # Using a specific random state for consistency\n+    X = rng.rand(10, 5)  # Generate random data\n+\n+    # List of possible eigen solvers\n+    eigen_solvers = ['auto', 'arpack', 'dense']\n+\n+    for solver in eigen_solvers:\n+        kpca = KernelPCA(n_components=7, kernel='rbf', eigen_solver=solver, random_state=rng)\n+        transformed_X1 = kpca.fit_transform(X)\n+\n+        # Perform another transform to check for consistency\n+        transformed_X2 = kpca.fit_transform(X)\n \n-def test_kernel_pca_sparse():\n+        # Check consistency ignoring signs\n+        assert_allclose(np.abs(transformed_X1), np.abs(transformed_X2), atol=1e-5)\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..f4289c2 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..e0398b2 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -5,6 +6,8 @@ import numpy as np\n \n from sklearn.utils._pprint import _EstimatorPrettyPrinter\n from sklearn.pipeline import make_pipeline\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n@@ -215,7 +218,14 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n     set_config(print_changed_only=False)\n \n \n-def test_pipeline():\n+def test_logistic_regression_cv_array_params():\n+    # Test that array parameters in LogisticRegressionCV with print_changed_only=True do not raise errors\n+    set_config(print_changed_only=True)\n+    # It's expected that this test won't raise any exception\n+    repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    expected_substring = \"Cs=array([0.1, 1.0])\"\n+    assert expected_substring in repr_output\n+    set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..8e3d639 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -511,8 +511,37 @@ def test_expected_transformation_shape():\n     nca.fit(X, y)\n     assert_equal(transformation_storer.transformation.size, X.shape[1]**2)\n \n+import numpy as np\n+from sklearn.utils.testing import assert_raises\n+from sklearn.datasets import load_iris\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+\n+iris = load_iris()\n+iris_data = iris.data\n+iris_target = iris.target\n+\n+def test_gridsearchcv_with_nca():\n+    # Test if GridSearchCV works with NeighborhoodComponentsAnalysis with various parameter types\n \n-def test_convergence_warning():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.model_selection import GridSearchCV\n+    from sklearn.neighbors import KNeighborsClassifier\n+\n+    X, y = iris_data, iris_target\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca),\n+                     ('knn', knn)])\n+                    \n+    params = {'nca__tol': [0.1, 0.5, 1],  # 1 should be handled\n+              'nca__n_components': np.arange(1, 10, dtype=np.int64)}  # np.int64 should be handled\n+      \n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+\n+    # Fit the data\n+    gs.fit(X, y)\n     nca = NeighborhoodComponentsAnalysis(max_iter=2, verbose=1)\n     cls_name = nca.__class__.__name__\n     assert_warns_message(ConvergenceWarning,\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..417828c 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,30 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for ZeroDivisionError when support_vectors_ is empty\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([\n+        [0, 1, 0, 0],\n+        [0, 0, 0, 1],\n+        [0, 0, 1, 0],\n+        [0, 0, 0, 1]\n+    ])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, epsilon=0.1, max_iter=15000)\n+    \n+    try:\n+        model.fit(X_train, y_train)\n+        assert not model.support_vectors_.data.size\n+        assert not model.dual_coef_.data.size\n+        print(\"Test passed: No ZeroDivisionError and state variables as expected.\")\n+    except ZeroDivisionError:\n+        assert False, \"Test failed: ZeroDivisionError was raised unexpectedly.\"\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..87dff05 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -980,7 +980,33 @@ def test_repeated_cv_value_errors():\n         assert_raises(ValueError, cv, n_repeats=1.5)\n \n \n-def test_repeated_kfold_determinstic_split():\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=6, n_splits=2, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV, n_splits, n_repeats, random_state\",\n+    [\n+        (RepeatedKFold, 5, 10, None),\n+        (RepeatedStratifiedKFold, 3, 5, 42),\n+        (RepeatedKFold, 4, 7, 0),\n+        (RepeatedStratifiedKFold, 2, 8, 123)\n+    ]\n+)\n+def test_repeated_cv_repr_varied(RepeatedCV, n_splits, n_repeats, random_state):\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    repeated_cv_repr = (\n+        '{}(n_repeats={}, n_splits={}, random_state={})'.format(\n+            repeated_cv.__class__.__name__, n_repeats, n_splits, random_state\n+        )\n+    )\n+    assert repeated_cv_repr == repr(repeated_cv)\n     X = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n     random_state = 258173307\n     rkf = RepeatedKFold(\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..bc78bd8 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2125,7 +2125,34 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n     assert_array_equal(X_trans_df0.columns, expected_verbose_names)\n-\n+    \n     ct.set_params(verbose_feature_names_out=False)\n+    \n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False, False, False]), [False, False, False, False]],\n+    ids=[\"list\", \"bool_array\", \"bool_list\"],\n+)\n+def test_column_transformer_with_empty_features(empty_selection):\n+    \"\"\"Check that ColumnTransformer handles transformers with no features (empty selection)\n+    correctly when output is set to pandas.\n+    \"\"\"\n+\n+    import pandas as pd\n+    \n+    X = pd.DataFrame(data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]], columns=[\"a\", \"b\", \"c\", \"d\"])\n+    y = np.array([0, 1])\n+    \n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\", \"c\"]),\n+        ],\n+        remainder='drop'\n+    )\n+    \n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\", \"numerical__c\"])\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..eadd356 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -113,6 +113,19 @@ def test_automodule_special_members(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_ignore_builtin_collections(app):\n+    options = {'members': None,\n+               'undoc-members': None,\n+               'inherited-members': 'list, set, tuple'}\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert '.. py:class:: MyList' in actual\n+    assert '.. py:class:: SomeSet' in actual\n+    assert '.. py:class:: SomeTuple' in actual\n+    assert '.. py:method:: MyList.meth()' in actual\n+    assert '.. py:method:: SomeSet.custom_set_meth()' in actual\n+    assert '.. py:method:: SomeTuple.custom_tuple_meth()' in actual\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n                                                             'missing_package1',\n@@ -125,4 +138,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "diff --git a/tests/test_environment_indexentries.py b/tests/test_environment_indexentries.py\nindex 9775484..722ac01 100644\n--- a/tests/test_environment_indexentries.py\n+++ b/tests/test_environment_indexentries.py\n@@ -28,9 +28,12 @@ def test_create_single_index(app):\n             \".. index:: &-symbol\\n\")\n     restructuredtext.parse(app, text)\n     index = IndexEntries(app.env).create_index(app.builder)\n-    assert len(index) == 6\n+    assert len(index) == 7  # Expecting an additional \"Symbols\" entry\n     assert index[0] == ('Symbols', [('&-symbol', [[('', '#index-9')], [], None]),\n                                     ('9-symbol', [[('', '#index-8')], [], None])])\n+    assert index[1] == ('Symbols', [('@mention', [[('', '#index-10')], [], None]),\n+                                    ('\u00a3100', [[('', '#index-11')], [], None]),\n+                                    ('\u2190arrow', [[('', '#index-12')], [], None])])\n     assert index[1] == ('D', [('docutils', [[('', '#index-0')], [], None])])\n     assert index[2] == ('P', [('pip', [[], [('install', [('', '#index-2')]),\n                                             ('upgrade', [('', '#index-3')])], None]),\n",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..bde798c 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,7 +1,21 @@\n+\n from __future__ import annotations\n \n from typing import overload\n \n+# Additional type alias and variables for the test case\n+String = str\n+\n+#: blah blah blah\n+var: String\n+\n+\n+class MyString:\n+    \"mystring\"\n+\n+    #: blah blah blah\n+    var: String\n+\n myint = int\n \n \n@@ -22,4 +36,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..3621fd4 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,32 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+@pytest.fixture\n+def app():\n+    return SphinxTestApp(srcdir='.')\n+\n+def test_option_directive_with_bracket_and_pattern(app):\n+    # Test the option directive with optional pattern in brackets\n+    text = (\".. option:: [enable=]PATTERN\\n\"\n+            \"   Description of the option with optional pattern.\\n\")\n+    doctree = parse_rst(app, text)\n+    assert_node(doctree, (nodes.document,))\n+    desc_signature = doctree[0][0]\n+    assert isinstance(desc_signature, nodes.desc_signature)\n+    assert desc_signature[0].astext() == '[enable='\n+    assert desc_signature[-1].astext() == ']PATTERN'\n+\n+def test_option_directive_with_optional_value(app):\n+    # Test the option directive with optional value\n+    text = (\".. option:: -j[=N]\\n\"\n+            \"   Description of the option with optional value.\\n\")\n+    doctree = parse_rst(app, text)\n+    assert_node(doctree, (nodes.document,))\n+    desc_signature = doctree[0][0]\n+    assert isinstance(desc_signature, nodes.desc_signature)\n+    assert desc_signature[0].astext() == '-j'\n+    assert desc_signature[-1].astext() == '[=N]'\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..a4ed440 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -119,7 +121,9 @@ def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n-def test_stringify():\n+def test_restify_struct():\n+    # Test that struct.Struct gets correctly restified\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..bc4532a 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,31 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_napoleon_use_param(self):\n+        \"\"\"Test for Other Parameters section with napoleon_use_param config.\"\"\"\n+        docstring = \"\"\"\\\n+Other parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..0c45f08 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,24 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from pathlib import Path\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.config.viewcode_enable_epub = False\n+    app.builder.build_all()\n+    \n+    # Verify module pages are not created for epub by default when viewcode_enable_epub=False\n+    assert not (Path(app.outdir) / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+    \n+    # Verify module pages are created for epub when viewcode_enable_epub=True\n+    assert (Path(app.outdir) / '_modules/spam/mod1.xhtml').exists()\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..f71446a 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -349,7 +349,14 @@ def test_args():\n     raises(ValueError, lambda: Permutation([[1, 2], 0]))\n            # enclosing brackets needed on 0\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n-    raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n+    # Test for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Should be identity\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 0, 2]) # Should apply [0, 1] first making it [1, 0, 2], then [1, 2] has no effect\n+    assert Permutation([[0, 1, 2], [2, 3, 4]]) == Permutation([1, 2, 3, 4, 0])  # non-disjoint cycles\n+    assert Permutation([[1, 2], [0, 3, 4]]) == Permutation([3, 1, 0, 4, 2])  # non-disjoint cycles\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([1, 0, 2]) # Affects only after [0, 1, 2] to [1, 0, 2]\n+    \n+    raises(ValueError, lambda: Permutation([[1], [1, 2]]))  # Redundant test kept for ValueError\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..ab205a9 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,8 +1,28 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n+from sympy.matrices import Matrix\n \n def test_sparse_matrix():\n+    # Test hstack with 0 x n matrices\n+    sparse_matrices_zero_n = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_zero_n) == Matrix(0, 6, [])\n+    \n+    # Test hstack with 0 x m and non-zero dimensions matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # Test hstack with 1 x n matrices\n+    sparse_matrices_one_n = [SparseMatrix.zeros(1, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_one_n) == Matrix(1, 6, [0]*6)\n+\n+    # Test vstack with n x 0 matrices\n+    sparse_matrices_n_zero = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_n_zero) == Matrix(6, 0, [])\n     def sparse_eye(n):\n         return SparseMatrix.eye(n)\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..e53c948 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -99,6 +99,27 @@ def test_core_symbol():\n             Symbol(\"_issue_3130\", commutative=False), Wild, Wild(\"x\")):\n         check(c)\n \n+import sys\n+import subprocess\n+import sympy\n+\n+def test_pickle_python2_to_3():\n+    # This test simulates pickling in Python 2 and unpickling in Python 3\n+    # by calling external Python interpreters\n+    if sys.version_info[0] == 3:  # Run this test only in Python 3 environment\n+        script_python2 = \"\"\"\n+import pickle, sympy\n+x = sympy.symbols(\"x\")\n+print(pickle.dumps(x + 1.0, 2))\n+        \"\"\"\n+        output = subprocess.check_output(['python2', '-c', script_python2])\n+\n+        script_python3 = \"\"\"\n+import pickle, sys\n+expr = pickle.loads(sys.stdin.buffer.read())\n+assert expr == sympy.symbols(\"x\") + 1.0\n+        \"\"\"\n+        subprocess.run(['python3', '-c', script_python3], input=output)\n \n def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..1c3245b 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,24 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+def test_coth_subs_issue():\n+    x = Symbol('x')\n+    # Testing previously problematic integral values for substitution\n+    assert coth(log(tan(2))).subs(x, 2) == coth(log(tan(2)))\n+    assert coth(log(tan(3))).subs(x, 3) == coth(log(tan(3)))\n+    assert coth(log(tan(5))).subs(x, 5) == coth(log(tan(5)))\n+    assert coth(log(tan(6))).subs(x, 6) == coth(log(tan(6)))\n+    assert coth(log(tan(8))).subs(x, 8) == coth(log(tan(8)))\n+    assert coth(log(tan(9))).subs(x, 9) == coth(log(tan(9)))\n+    assert coth(log(tan(11))).subs(x, 11) == coth(log(tan(11)))\n+    assert coth(log(tan(12))).subs(x, 12) == coth(log(tan(12)))\n+    assert coth(log(tan(13))).subs(x, 13) == coth(log(tan(13)))\n+    assert coth(log(tan(15))).subs(x, 15) == coth(log(tan(15)))\n+    assert coth(log(tan(18))).subs(x, 18) == coth(log(tan(18)))\n+\n+    # Original test cases\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..47a3d2b 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -194,6 +194,29 @@ def test_row_insert():\n         l.insert(i, 4)\n         assert flatten(eye_Shaping(3).row_insert(i, r4).col(0).tolist()) == l\n \n+from sympy import Matrix, eye, ones\n+\n+def test_col_insert_issue_13643():\n+    # Initial matrix\n+    M = eye(6)\n+\n+    # Matrix to insert\n+    V = 2 * ones(6, 2)\n+\n+    # Expected result after column insertion\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+\n+    # Perform column insertion and assert\n+    result = M.col_insert(3, V)\n+    assert result == expected, \"Col insert test failed for issue 13643\"\n+\n def test_col_insert():\n     c4 = Matrix([4, 4, 4])\n     for i in range(-4, 5):\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..15612fd 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,42 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+from sympy import SeqFormula, SeqPer, SeqAdd, SeqMul, latex, oo, symbols\n \n+a = symbols('a')\n def test_latex_sequences():\n+    # Test 1: Normal sequence with infinite limit\n+    s1 = SeqFormula(a**2, (a, 0, oo))  # Original test\n+    latex_str_expected = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s1) == latex_str_expected\n+\n+    # Test 2: Periodic sequence\n+    s2 = SeqPer((1, 2))\n+    latex_str_expected = r'[1, 2, 1, 2, \\ldots]'\n+    assert latex(s2) == latex_str_expected\n+\n+    # Test 3: Finite sequence\n+    s3 = SeqFormula(a**2, (a, 0, 2))\n+    latex_str_expected = r'[0, 1, 4]'\n+    assert latex(s3) == latex_str_expected\n+\n+    # Test 4: Periodic finite sequence\n+    s4 = SeqPer((1, 2), (0, 2))\n+    latex_str_expected = r'[1, 2, 1]'\n+    assert latex(s4) == latex_str_expected\n+\n+    # Test 5: Negative infinite to zero\n+    s5 = SeqFormula(a**2, (a, -oo, 0))\n+    latex_str_expected = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(s5) == latex_str_expected\n+\n+    # Test 6: Add sequence\n+    latex_str_expected = r'[1, 3, 5, 11, \\ldots]'\n+    assert latex(SeqAdd(s1, s2)) == latex_str_expected\n+\n+    # Test 7: Multiply sequences\n+    latex_str_expected = r'[0, 2, 4, 18, \\ldots]'\n+    assert latex(SeqMul(s1, s2)) == latex_str_expected\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..e938495 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, EX, RR, CC\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..9399e60 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -310,6 +311,13 @@ def test_latex_functions():\n     assert latex(factorial(-k)) == r\"\\left(- k\\right)!\"\n \n     assert latex(subfactorial(k)) == r\"!k\"\n+\n+    # Test for inverse trigonometric functions with full and power styles\n+    x = Symbol('x')\n+    assert latex(acsc(x), inv_trig_style=\"full\") == r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+    assert latex(acsc(x), inv_trig_style=\"power\") == r\"\\csc^{-1}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"full\") == r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"power\") == r\"\\sec^{-1}{\\left (x \\right )}\"\n     assert latex(subfactorial(-k)) == r\"!\\left(- k\\right)\"\n \n     assert latex(factorial2(k)) == r\"k!!\"\n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..1c81b72 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,28 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+def test_MatAdd_pretty_printing_with_symbols():\n+    n = symbols('n')\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    a = symbols('a')\n+\n+    # Test case from the issue: check pretty printing of MatAdd with special symbols\n+    assert pretty(x + y_star) == \"x + y*\"\n+\n+    # Additional case: check when negative coefficients involved\n+    y = MatrixSymbol('y', n, n)\n+    assert pretty(-a*x - 2*y_star) == \"-a*x - 2*y*\"\n+\n+    # Test to make sure mixed symbols still work fine\n+    assert pretty(x + y - y_star) == \"x + y - y*\"\n+\n+    # Test case with more complex expressions\n+    assert pretty(-a*x + y_star - y) == \"-a*x + y* - y\"\n+\n+from sympy import MatrixSymbol, pretty, symbols\n+from sympy.matrices.expressions.matmul import MatAdd\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..364ecee 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,6 +728,31 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n+def test_curly_matrix_symbol_issue():\n+    import sympy as sy\n+    from sympy.utilities.lambdify import lambdify\n+\n+    # Test case for issue where lambdify fails with curly braces in MatrixSymbol names\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    \n+    # Should not raise a SyntaxError\n+    try:\n+        curlyVectorId = lambdify(curlyv, curlyv)\n+        result1 = curlyVectorId([[1], [2]])\n+        assert (result1 == [[1], [2]]), \"Failed curlyVectorId test without dummify\"\n+    except SyntaxError:\n+        assert False, \"Unexpected SyntaxError without dummify\"\n+\n+    # Should not raise a SyntaxError with dummify=True\n+    try:\n+        curlyVectorIdDummified = lambdify(curlyv, curlyv, dummify=True)\n+        result2 = curlyVectorIdDummified([[1], [2]])\n+        assert (result2 == [[1], [2]]), \"Failed curlyVectorId test with dummify=True\"\n+    except SyntaxError:\n+        assert False, \"Unexpected SyntaxError with dummify=True\"\n+\n+    # Add further verifications if needed to test different modules or cases\n+\n def test_python_keywords():\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..e4ea6f5 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,25 @@\n+\n+def test_Max_Min_Functions():\n+    # Original test case\n+    assert mcode(Max(x, y, z)*Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+    \n+    # New test cases for the issue\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(3, x)) == \"Max[3, x]\"\n+    assert mcode(Max(x + 1, y - 1)) == \"Max[x + 1, y - 1]\"\n+    assert mcode(Max(0, x, -1)) == \"Max[0, x, -1]\"\n+    \n+    # Complementary test for Min\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(3, x)) == \"Min[3, x]\"\n+    assert mcode(Min(x + 1, y - 1)) == \"Min[x + 1, y - 1]\"\n+    assert mcode(Min(0, x, -1)) == \"Min[0, x, -1]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..a3e3147 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n@@ -1726,7 +1728,13 @@ def test_latex_UnevaluatedExpr():\n     assert latex(x*he) == r\"x \\frac{1}{x}\"\n \n \n-def test_MatrixElement_printing():\n+def test_issue_indexed_matrix_expression_latex_printer():\n+    # Test case based on the issue where indexed matrix expression was not compiled correctly in LaTeX\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # The assertion is that the fix corrects the indexed summation\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n     # test cases for issue #11821\n     A = MatrixSymbol(\"A\", 1, 3)\n     B = MatrixSymbol(\"B\", 1, 3)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..a960c19 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -21,7 +22,22 @@ def test_idiff():\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n \n-def test_intersection():\n+def test_idiff_original_issue_cases():\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+    \n+    # Test the idiff with Eq\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x) == (x + 1)*exp(x - y)/(y + 1)\n+    \n+    # Test with function f(x) instead of y\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+\n+    # Additional test cases based on original test patch\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..a9fe16a 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -581,12 +581,27 @@ def test_ccode_cse():\n         '}\\n'\n     )\n     assert source == expected\n-\n-def test_empty_f_code():\n+import numpy as np\n+from sympy import MatrixSymbol\n+from sympy.utilities.autowrap import autowrap\n+def test_autowrap_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    # Test if function returns 1.0 when argument x is unused in the expression\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n+    \n+    # Additional test case: Use another shape of x and check the result\n+    result = f(np.array([[3.0], [4.0]]))\n+    assert result == 1.0\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n-\n+import numpy as np\n+from sympy import MatrixSymbol\n+from sympy.utilities.autowrap import autowrap\n \n def test_empty_f_code_with_header():\n     code_gen = FCodeGen()\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..eaaf271 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,37 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Piecewise, Eq, Symbol, Intersection, FiniteSet\n+from sympy.core.singleton import S\n \n-def test_issue_9623():\n+def test_issue_duplicates_in_intersection():\n+    x = Symbol('x')\n+    # Test 1: Intersection of duplicate single elements with a symbolic set\n+    result = Intersection({1}, {1}, {x})\n+    expected = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert result == expected\n+\n+    # Test 2: Intersection of single element without duplicates and a symbolic set\n+    result = Intersection({1}, {x})\n+    expected = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert result == expected\n+\n+    # Test 3: Intersection without symbolic sets, expect duplicates removed\n+    result = Intersection({1}, {1}, {2})\n+    assert result == S.EmptySet\n+\n+    # Test 4: Intersection of multiple duplicates and a single non-duplicate\n+    result = Intersection({1, 1, 2}, {3, 2, 2})\n+    assert result == FiniteSet(2)\n+\n+    # Test 5: Check if ordering affects duplicates with a symbolic set\n+    result = Intersection({1, 1, x}, {1})\n+    expected = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert result == expected\n+\n+    # Test 6: Intersection of empty sets with duplicates\n+    result = Intersection({1, 1}, {})\n+    assert result == S.EmptySet\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..7fe0708 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,8 +1,10 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n )\n-from sympy import eye\n+from sympy import eye, Identity\n+from sympy.utilities.pytest import raises\n from sympy.abc import x, i, j, a, b, c, d\n from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbrt, Sqrt\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n@@ -25,8 +27,21 @@ def test_numpy_piecewise_regression():\n     p = Piecewise((1, x < 0), (0, True))\n     assert NumPyPrinter().doprint(p) == 'numpy.select([numpy.less(x, 0),True], [1,0], default=numpy.nan)'\n \n+def test_lambdify_identity_matrix():\n+    if not np:\n+        skip(\"NumPy not installed\")\n \n-def test_sum():\n+    # Test with a fixed-size identity matrix\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2), modules='numpy')\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+    assert (f(ma) == mr).all()\n+\n+    # Test with a symbolic-size identity matrix\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n     if not np:\n         skip(\"NumPy not installed\")\n \n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..eef2a16 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n+from sympy import sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -21,6 +23,14 @@ def test_point():\n     p5 = Point(0, 1)\n     line = Line(Point(1, 0), slope=1)\n \n+    # Test multiplication of Point with a scalar in both orders\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    assert point1 + point2 * scalar == Point(2, 2), \"Multiplication must be commutative with scalars\"\n+    assert point1 + scalar * point2 == Point(2, 2), \"Multiplication must be commutative with scalars\"\n+\n     assert p1 in p1\n     assert p1 not in p2\n     assert p2.y == y2\n@@ -135,6 +145,14 @@ def test_point3D():\n     p4 = Point3D(1, 1, 1)\n     p5 = Point3D(0, 1, 2)\n \n+    # Test multiplication of Point with a scalar in both orders\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    assert point1 + point2 * scalar == Point(2, 2), \"Multiplication must be commutative with scalars\"\n+    assert point1 + scalar * point2 == Point(2, 2), \"Multiplication must be commutative with scalars\"\n+\n     assert p1 in p1\n     assert p1 not in p2\n     assert p2.y == y2\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..5012aa7 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,12 +1894,34 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, sympify, Symbol, raises\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n \n \n+def test_non_string_equality_issue_case():\n+    # Adding test for the specific issue discussed\n+    x = symbols('x')\n+    \n+    class ReprWithDot:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    # Ensure that the comparison does not evaluate repr's result via eval\n+    assert (x == ReprWithDot()) is False\n+    assert (x != ReprWithDot()) is True\n+\n+    class ReprWithX:\n+        def __repr__(self):\n+            return 'x'\n+\n+    # Ensure the object with repr 'x' does not equal Symbol('x')\n+    assert (x == ReprWithX()) is False\n+    assert (x != ReprWithX()) is True\n+\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..ae2be82 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,21 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy.abc import x, y\n+    from sympy.solvers.diophantine import diophantine\n+\n+    # Test for correct handling of symbol order and permutation\n+    eq = x**4 + y**4 - 2**4 - 3**4\n+    expected = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    \n+    # Test original order with permutation\n+    result1 = diophantine(eq, syms=(x, y), permute=True)\n+    assert result1 == expected, f\"Unexpected solution for syms=(x, y): {result1}\"\n+    \n+    # Test reversed order with permutation\n+    result2 = diophantine(eq, syms=(y, x), permute=True)\n+    assert result2 == expected, f\"Unexpected solution for syms=(y, x): {result2}\"\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..8fa1b63 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -68,6 +69,14 @@ def test_sizeof():\n     assert not sz.is_Atom\n     assert all(atom == typename for atom in sz.atoms())\n \n+    # Test atoms for proper leaves check (empty args means string, not subclasses of Atom)\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n+    sz = sizeof(typename)\n+    assert ccode(sz) == 'sizeof(%s)' % typename\n+    assert sz.func(*sz.args) == sz\n+    assert not sz.is_Atom\n+    assert all(atom == typename for atom in sz.atoms())\n+\n \n def test_struct():\n     vx, vy = Variable(x, type=float64), Variable(y, type=float64)\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..a957ce7 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,29 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_single_element_BlockDiagMatrix():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    try:\n+        B = Matrix(D)\n+        assert B == M, \"Conversion to Matrix did not yield the expected result\"\n+    except Exception as e:\n+        assert False, f\"An exception was raised during conversion: {e}\"\n+\n+def test_double_element_BlockDiagMatrix():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B == expected, \"Conversion to Matrix did not match expected result for two-element BlockDiagMatrix.\"\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..b54738d 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -83,7 +84,12 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_blockmatrix_indexing_issue():\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[i, 0] == MatrixElement(C, i, 0)  # Expected behavior as described in the issue\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..d70055e 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -302,7 +302,17 @@ def test_sign():\n     assert sign(x).rewrite(Heaviside) == 2*Heaviside(x, H0=S(1)/2) - 1\n     assert sign(y).rewrite(Heaviside) == sign(y)\n \n-    # evaluate what can be evaluated\n+    # Test for rewriting sign in terms of Abs\n+    y = Symbol('y')\n+    f = Function('f')\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+    \n+    # Test edge case where x is zero\n+    z = Symbol('z')\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(z).rewrite(Abs).subs(z, 0) == 0\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n     eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..1912ece 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,18 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n \n def test_partitions():\n+\n+    # Test to ensure unique dictionaries are yielded\n+    def test_unique_output():\n+        partitions_list = list(partitions(6, k=2))\n+        for i in range(len(partitions_list)):\n+            for j in range(i + 1, len(partitions_list)):\n+                assert partitions_list[i] is not partitions_list[j], \"Partitions reused the same dictionary instance\"\n+    \n+    test_unique_output()\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..28ded70 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,7 +254,12 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n-def test_zero():\n+def test_issue_19572():\n+    # Verify that `0**-oo` returns `zoo` as expected\n+    assert Pow(0, -oo) == S.ComplexInfinity\n+    assert 0 ** S.NegativeInfinity == S.ComplexInfinity\n+\n+# Existing test for zero powers\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..acb9f34 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,20 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    # Verify that Symbol instance does not have a __dict__ attribute\n+    assert not hasattr(s, '__dict__')\n+    # Verify that __slots__ is still working\n+    assert hasattr(s, '__slots__')\n+    assert '__slots__' in s.__slots__\n+    # Using raises to check that accessing __dict__ raises an AttributeError\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..91d07b0 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n                    atan, atan2, nan, Symbol, re, im, sign)\n from sympy.abc import w, x, y, z\n@@ -161,7 +162,20 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_12345():  # Assuming the issue has an ID to track\n+    a = Symbol('a', complex=True)\n+    x = Symbol('x', real=True)\n+    J = Integral(sin(x)*exp(-a*x), (x, 0, oo))\n+    simplified_integral = refine(J.doit(), Q.positive(a))\n+    \n+    # The expected result is simplified considering that 'a' is positive and real.\n+    expected_integral = 1/(a**2 + 1)\n+    \n+    assert simplified_integral == expected_integral\n+    \n+    # Check the behavior of `refine` on abs and arg under the same assumptions\n+    assert refine(abs(a), Q.positive(a)) == a\n+    assert refine(arg(a), Q.positive(a)) == 0\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..da52372 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,14 +1,40 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n     Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict,\n     Piecewise, oo, Mul, factor, nsimplify, zoo, Subs, RootOf,\n-    AccumBounds, Matrix, zeros, ZeroMatrix)\n+    AccumBounds, Matrix, zeros, ZeroMatrix, sinh, cosh, tanh)\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n-\n-def test_subs():\n+def test_issue_21373_polynomial_error_in_subs():\n+    x, y, z = symbols('x y z', real=True)\n+    \n+    # Testing sinh with piecewise and division\n+    expr1 = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr1.subs({1: 1.0})  # Should not raise PolynomialError\n+    \n+    # Testing cosh with piecewise and division\n+    expr2 = exp(cosh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr2.subs({1: 1.0})  # Should not raise PolynomialError\n+    \n+    # Testing tanh with piecewise and division\n+    expr3 = exp(tanh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr3.subs({1: 1.0})  # Should not raise PolynomialError\n+\n+    # Without division by 'z'\n+    expr4 = exp(cosh(Piecewise((x, y > x), (y, True))))\n+    assert expr4.subs({1: 1.0})  # Should not raise PolynomialError\n+\n+    # Without the exp function\n+    expr5 = tanh(Piecewise((x, y > x), (y, True)) / z)\n+    assert expr5.subs({1: 1.0})  # Should not raise PolynomialError\n+\n+    # With non-real symbols for x and y\n+    x_noreal, y_noreal = symbols('x_noreal y_noreal')\n+    expr6 = exp(sinh(Piecewise((x_noreal, y_noreal > x_noreal), (y_noreal, True)) / z))\n+    assert expr6.subs({1: 1.0})  # Should not raise PolynomialError\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..6a7ad22 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n+from sympy.core.function import Derivative\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n@@ -45,6 +47,22 @@ def test_Matrix_kind():\n         m = cls.zeros(3, 2)\n         assert m.kind is MatrixKind(NumberKind)\n \n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    x = Symbol('x')\n+    \n+    # Test case based on the issue description where the kind was previously wrong\n+    d = Derivative(A, x)\n+    assert d.kind is MatrixKind(NumberKind)  # Expected result after fix\n+\n+    # Test for commutative symbols\n+    assert Derivative(comm_x, comm_x).kind is NumberKind  # Original test verification\n+\n+    # Additional test: Ensure undefined kind for non-commutative symbols\n+    B = MatrixSymbol('B', 3, 3, commutative=False)\n+    d_noncomm = Derivative(B, x)\n+    assert d_noncomm.kind is UndefinedKind  # Expected to be undefined due to noncommutativity\n+\n def test_MatMul_kind():\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..639f230 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,6 +131,23 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n+    # Additional test cases for verifying the issue with min_degrees\n+\n+    # Test for min_degrees equal to max_degrees\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, \n+                                                      x1*x2**2, x1*x3**2, \n+                                                      x2*x1**2, x2*x3**2, \n+                                                      x3*x1**2, x3*x2**2, \n+                                                      x1*x2*x3}\n+\n+    # Test for min_degrees less than max_degrees\n+    assert set(itermonomials([x1, x2], 3, 2)) == {x1**2, x1*x2, x2**2, \n+                                                   x1**3, x1**2*x2, \n+                                                   x1*x2**2, x2**3}\n+\n+    # An edge case with no variables, where the min and max degree are the same\n+    assert set(itermonomials([], 0, 0)) == {S.One}\n+\n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..2ae1c4e 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,6 +50,30 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n+    # Test for infinite solution detection with additional case\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        Poly(x - 1, x, y), (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        Poly(y - 1, x, y), (x, y)))\n+\n+    # Test for the same issue using expressions directly\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], (x, y)))\n+\n+    # Testing systems with infinite solutions involving multivariate univariate polynomials\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x**2 + y], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y**2 + x], (x, y)))\n+\n+    # Checking single equation with multiple variables still raises NotImplementedError\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x + y - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1, y], (x, y)))\n+\n \n def test_solve_biquadratic():\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..e23292b 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,6 +11,30 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n+\n+def test_issue_22684():\n+    # Testing the original issue with evaluate(False)\n+    with evaluate(False):\n+        Point2D(1, 2)  # Should not raise ValueError: Imaginary coordinates are not permitted\n+\n+    # Without evaluate(False), the expression should work too\n+    Point2D(1, 2)  # Should create Point2D(1, 2) without any error\n+\n+    # Additional tests to ensure behavior consistency\n+    with evaluate(False):\n+        assert Point2D(1, 2) == Point2D(1, 2)\n+        pt = Point2D(1, 2)\n+        assert pt.args == (1, 2)\n+\n+    # Verify that problematic input cases raise errors\n+    with raises(ValueError):\n+        Point2D(1 + I, 2)\n+\n+    with evaluate(False):\n+        # Even with evaluate(False), imaginary should raise a ValueError\n+        with raises(ValueError):\n+            Point2D(1 + I, 2)\n \n \n def test_point():\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..9d11e5f 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,6 +347,27 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n+def test_issue_matrixsymbol_indexing():\n+    # Reproducing the issue from the problem statement\n+    from sympy import MatrixSymbol, Matrix, symbols\n+\n+    # Setup MatrixSymbols\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+\n+    # Using symbols in computation\n+    A = Matrix(a)\n+    B = Matrix(b)\n+    expr = A * B\n+\n+    # Run CSE\n+    cse_subs, cse_reduced = cse(expr)\n+\n+    # Test that x0 and x2 are not simple copies of matrices a and b respectively\n+    # We expect each element of A and B to be a separate entry of CSE results,\n+    # therefore no substitution should be a direct copy of a or b whole.\n+    assert all(x[1] != a and x[1] != b for x in cse_subs)\n+\n def test_cse_MatrixExpr():\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n",
  "sympy__sympy-23117": "",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..bbd4c9d 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,10 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+from sympy.abc import x\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1182,7 +1186,12 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_single_element_tuple():\n+    f2b = lambdify([], (1,))  # gh-23224\n+    assert f2b() == (1,)\n+\n+    f2b_source = inspect.getsource(lambdify([], tuple([1])))\n+    assert 'return (1,)' in f2b_source\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..4720738 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,29 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI, Dimension\n+    from sympy import exp\n+    \n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..7755ea6 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,27 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_expand_issue_24142():\n+    # Test cases focusing on the issue described where expansion isn't complete\n+    assert TP(2*U - V, U + V).expand(tensorproduct=True) == \\\n+        2*TP(U, U) + 2*TP(U, V) - TP(V, U) - TP(V, V)\n+\n+def test_tensor_product_expand():\n+    # Existing test case\n+    assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n+        TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n+\n+    # Test new scenarios to ensure the fix works for those\n+    assert TP(x*A, 2*B).expand(tensorproduct=True) == \\\n+        TP(x*A, 2*B)\n+    assert TP(A, 2*B + 3*C).expand(tensorproduct=True) == \\\n+        2 * TP(A, B) + 3 * TP(A, C)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(A - B, C - D).expand(tensorproduct=True) == \\\n+        TP(A, C) - TP(A, D) - TP(B, C) + TP(B, D)\n+    assert TP(0, A).expand(tensorproduct=True) == 0\n+    assert TP(A, 0).expand(tensorproduct=True) == 0\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..9e03744 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -561,6 +562,30 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_collect_factor_and_dimension_equivalent_addition():\n+    from sympy.physics.units import Quantity, SI, velocity, acceleration, time, meter, second\n+    \n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+    \n+    # Test addition of a1*t1 and v1; these should be equivalent in dimensions\n+    expr1 = a1*t1 + v1\n+    try:\n+        factor, dim = SI._collect_factor_and_dimension(expr1)\n+        assert dim == SI.get_dimension_system().get_dimension(acceleration*time)\n+        print(f\"Test passed: expr={expr1}, factor={factor}, dimension={dim}\")\n+    except ValueError as e:\n+        print(f\"Test failed: {e}\")\n+\n \n def test_prefixed_property():\n     assert not meter.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..50b2be0 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, V, milli\n+from sympy.core.singleton import S\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -12,6 +14,17 @@ x = Symbol('x')\n \n def test_prefix_operations():\n     m = PREFIXES['m']\n+\n+    # New tests related to milli prefix issue\n+    assert milli * W == W / 1000  # Check milli with watts\n+    assert milli * V == V / 1000  # Check milli with volts\n+    assert W * milli == W / 1000  # Commutativity check\n+    assert V * milli == V / 1000  # Commutativity check\n+\n+    # Check that milli*W is a prefix unit\n+    from sympy.physics.units import watt, volt\n+    assert milli * watt == watt / 1000\n+    assert milli * volt == volt / 1000\n     k = PREFIXES['k']\n     M = PREFIXES['M']\n \n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..42f0a22 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -185,11 +185,13 @@ class GrandParent(models.Model):\n \n \n class Parent(GrandParent):\n-    pass\n+    class Meta:\n+        ordering = [\"-pk\"]\n \n \n class Child(Parent):\n-    pass\n+    class Meta:\n+        ordering = [\"-pk\"]\n \n \n class GrandChild(Child):\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..cb1f999 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,52 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_ordering_self_referencing_fk(self):\n+        a1 = OneModel.objects.create(oneval=1)\n+        root_a2 = OneModel.objects.create(oneval=2)\n+        a2 = OneModel.objects.create(root=root_a2, oneval=2)\n+        \n+        b1 = TwoModel.objects.create(record=a1, twoval=10)\n+        b2 = TwoModel.objects.create(record=a2, twoval=20)\n+        \n+        # Ordering by the self-referencing FK's id via the relation\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2])\n+        qs_sorted = qs.order_by(\"record__root_id\")\n+        \n+        # Check if the query is as expected\n+        expected_query = ('SELECT \"ordering_twomodel\".\"id\", \"ordering_twomodel\".\"record_id\", '\n+                          '\"ordering_twomodel\".\"twoval\" FROM \"ordering_twomodel\" '\n+                          'INNER JOIN \"ordering_onemodel\" '\n+                          'ON (\"ordering_twomodel\".\"record_id\" = \"ordering_onemodel\".\"id\") '\n+                          'WHERE \"ordering_onemodel\".\"oneval\" IN (1, 2) '\n+                          'ORDER BY \"ordering_onemodel\".\"root_id\" ASC')\n+        self.assertEqual(str(qs_sorted.query).strip(), expected_query.strip())\n+        \n+        # Verifying the ordering\n+        self.assertQuerysetEqual(\n+            qs_sorted,\n+            [b1, b2],\n+            lambda x: x,\n+        )\n+\n+        # Order by the explicit `record__root_id` and test again\n+        qs_sorted_explicit = qs.order_by(\"record__root__id\")\n+        \n+        # Check if the query is as expected\n+        expected_query_explicit = ('SELECT \"ordering_twomodel\".\"id\", \"ordering_twomodel\".\"record_id\", '\n+                                   '\"ordering_twomodel\".\"twoval\" FROM \"ordering_twomodel\" '\n+                                   'INNER JOIN \"ordering_onemodel\" '\n+                                   'ON (\"ordering_twomodel\".\"record_id\" = \"ordering_onemodel\".\"id\") '\n+                                   'WHERE \"ordering_onemodel\".\"oneval\" IN (1, 2) '\n+                                   'ORDER BY \"ordering_onemodel\".\"root_id\" ASC')\n+        self.assertEqual(str(qs_sorted_explicit.query).strip(), expected_query_explicit.strip())\n+        \n+        self.assertQuerysetEqual(\n+            qs_sorted_explicit,\n+            [b1, b2],\n+            lambda x: x,\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..9212f77 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,8 +3201,30 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    \n+    def test_issue_boundwidget_correct_id_for_label(self):\n+        \"\"\"\n+        Test that `BoundWidget.id_for_label` returns the ID set in `data['attrs']['id']`\n+        for a CheckboxSelectMultiple when `auto_id` is provided.\n+        \"\"\"\n+        class SampleForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple,\n+            )\n \n-    def test_boundfield_widget_type(self):\n+        # Case 1: With auto_id\n+        form_with_auto_id = SampleForm(auto_id='custom_%s')\n+        subwidgets_auto_id = form_with_auto_id['field'].subwidgets\n+        self.assertEqual(subwidgets_auto_id[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets_auto_id[1].id_for_label, 'custom_field_1')\n+\n+        # Case 2: Without auto_id - fallback to internal ID generation\n+        form_default_id = SampleForm()\n+        subwidgets_default_id = form_default_id['field'].subwidgets\n+        # Should match the typical id format \"id_<field_name>_<index>\"\n+        self.assertEqual(subwidgets_default_id[0].id_for_label, 'id_field_0')\n+        self.assertEqual(subwidgets_default_id[1].id_for_label, 'id_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..9c0f481 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -658,6 +658,30 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n+def test_update_colorbar_norm_change():\n+    # Test updating colorbar when mappable's norm is changed\n+    import matplotlib.pyplot as plt\n+    from matplotlib.colors import LogNorm\n+    import numpy as np\n+    \n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Change the norm and update the colorbar\n+    new_norm = LogNorm(vmin=img.min(), vmax=img.max())\n+    plot.set_norm(new_norm)\n+    \n+    fig.canvas.draw()\n+\n+    # Check that the color ticks are in log scale\n+    assert cb.ax.yaxis.get_scale() == 'log'\n+    tick_labels = [label.get_text() for label in cb.ax.yaxis.get_ticklabels()]\n+    assert all(isinstance(float(label), float) for label in tick_labels if label)\n+\n+\n def test_colorbar_get_ticks_2():\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..a4f700d 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -251,12 +251,90 @@ def test_set_output_mro():\n \n     class A(Base):\n         pass\n+import pandas as pd\n+import pytest\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn.pipeline import FeatureUnion, make_union\n+from sklearn import set_config\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+        return self\n+\n+    def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+        return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+def test_feature_union_with_pandas_output():\n+    # Fixes issue where FeatureUnion fails with pandas output configuration\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n \n+    # Check that no errors are raised when using FeatureUnion with pandas output\n+    set_config(transform_output=\"pandas\")\n+    result = make_union(MyTransformer()).fit_transform(data)\n+    expected = data[\"value\"].groupby(data[\"date\"]).sum().to_frame()\n+    pd.testing.assert_frame_equal(result, expected)\n+\n+    # Reset to default configuration for other tests\n+    set_config(transform_output=\"default\")\n     class B(Base):\n         def transform(self, X):\n             return \"B\"\n+import pandas as pd\n+import pytest\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn.pipeline import FeatureUnion, make_union\n+from sklearn import set_config\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+        return self\n \n+    def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+        return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+def test_feature_union_with_pandas_output():\n+    # Fixes issue where FeatureUnion fails with pandas output configuration\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Check that no errors are raised when using FeatureUnion with pandas output\n+    set_config(transform_output=\"pandas\")\n+    result = make_union(MyTransformer()).fit_transform(data)\n+    expected = data[\"value\"].groupby(data[\"date\"]).sum().to_frame()\n+    pd.testing.assert_frame_equal(result, expected)\n+\n+    # Reset to default configuration for other tests\n+    set_config(transform_output=\"default\")\n     class C(A, B):\n         pass\n+import pandas as pd\n+import pytest\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn.pipeline import FeatureUnion, make_union\n+from sklearn import set_config\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+        return self\n+\n+    def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+        return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+def test_feature_union_with_pandas_output():\n+    # Fixes issue where FeatureUnion fails with pandas output configuration\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Check that no errors are raised when using FeatureUnion with pandas output\n+    set_config(transform_output=\"pandas\")\n+    result = make_union(MyTransformer()).fit_transform(data)\n+    expected = data[\"value\"].groupby(data[\"date\"]).sum().to_frame()\n+    pd.testing.assert_frame_equal(result, expected)\n \n-    assert C().transform(None) == \"B\"\n+    # Reset to default configuration for other tests\n+    set_config(transform_output=\"default\")\n+    assert C().transform(None) == \"B\"\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..bd274d2 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,12 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import sys\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from target.uninitialized_attributes import Base, Derived\n+from sphinx.ext.autodoc import do_autodoc\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..ea00ea5 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,6 +358,24 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n+def test_issue_15129_trigsimp_methods():\n+    # Original test cases from the patch\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+    # Additional tests to verify simplification on direct expressions\n+    expr1 = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    assert trigsimp(expr1) == cos(S(1)/50)\n+\n+    # Verification with acos\n+    expr2 = acos(expr1)\n+    assert expr2.expand(trig=True) == acos(cos(S(1)/50))\n+\n \n def test_exptrigsimp():\n     def valid(a, b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..81a4f2d 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,44 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_prettyprint_alignment():\n+    from sympy import Sum, oo\n+    from sympy.abc import x\n+    \n+    # The expression we want to test.\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    \n+    # The correct pretty-printed output (Unicode).\n+    ucode_str_correct = \\\n+u(\"\"\"\\\n+  \u221e           \\n\\\n+ ___          \\n\\\n+ \u2572            \\n\\\n+  \u2572   x       \\n\\\n+  \u2571  + 3      \\n\\\n+ \u2571            \\n\\\n+ \u203e\u203e\u203e          \\n\\\n+x = 1         \\\n+\"\"\")\n+    \n+    # Asserts for the pretty printer\n+    assert upretty(expr) == ucode_str_correct\n \n-def test_units():\n+    # The correct pretty-printed output (ASCII).\n+    ascii_str_correct = \\\n+\"\"\"\\\n+  oo          \\n\\\n+ ___          \\n\\\n+ \\\\            \\n\\\n+  \\\\   x       \\n\\\n+  /  + 3      \\n\\\n+ /            \\n\\\n+/___          \\n\\\n+x = 1         \\\n+\"\"\"\n+    \n+    # Asserts for the ASCII pretty printer\n+    assert pretty(expr) == ascii_str_correct\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..c6fda79 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -705,7 +705,29 @@ def test_uniq():\n         [2, 3, 4, [2], [1], [3]]\n \n \n-def test_kbins():\n+def test_uniq_modification():\n+    # These tests check if modifying the list during iteration causes a RuntimeError\n+    \n+    # Test 1: Remove elements while iterating with uniq\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Test 2: Remove elements from a nested list while iterating with uniq\n+    f = [[1, 2], [3, 4], [1, 2]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    # Test 3: Similar elements are modified during iteration\n+    f = [1, 2, 3, 2, 1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Edge cases\n+    f = []\n+    # Should not raise an error because there's nothing to iterate over\n+    list(uniq(f))\n+\n+    f = [1]\n+    # Should not raise an error unless we modify\n+    list(uniq(f))\n     assert len(list(kbins('1123', 2, ordered=1))) == 24\n     assert len(list(kbins('1123', 2, ordered=11))) == 36\n     assert len(list(kbins('1123', 2, ordered=10))) == 10\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..2fc2bd4 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,6 +8,7 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -946,6 +948,27 @@ class LookupTests(TestCase):\n     def test_nested_outerref_lhs(self):\n         tag = Tag.objects.create(name=self.au1.alias)\n         tag.articles.add(self.a1)\n+    def test_group_by_override_issue(self):\n+        # Setup: Create an author and associated objects to test with.\n+        author1 = Author.objects.create(name='Author 1')\n+        author2 = Author.objects.create(name='Author 2', alias='Alias 1')\n+\n+        # Reproduce the scenario from the issue.\n+        authors_max_ids = Author.objects.filter(name='Author 2').values('alias').annotate(max_id=Max('id')).values('max_id')\n+        authors = Author.objects.filter(id=authors_max_ids[:1])\n+        \n+        # Assert that the issue is resolved and it returns the correct author.\n+        self.assertEqual(authors.get(), author2)\n+\n+        # Additional assertions to ensure the group by 'alias' is not overridden by 'id'\n+        qs = Author.objects.filter(id=authors_max_ids[:1])\n+        self.assertIn('GROUP BY', str(qs.query))\n+        self.assertIn('alias', str(qs.query))\n+\n+        # Test case for when no results should be returned.\n+        authors_no_match = Author.objects.filter(id=Author.objects.filter(name='Nonexistent').annotate(max_id=Max('id')).values('max_id')[:1])\n+        self.assertFalse(authors_no_match.exists())\n+\n         qs = Tag.objects.annotate(\n             has_author_alias_match=Exists(\n                 Article.objects.annotate(\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..235f024 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,7 +546,52 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_sql(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        # Check initial state of subquery attribute\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+\n+        # Verify initial SQL doesn't miss any characters\n+        self.assertIn('SELECT', sql)\n+        self.assertIn('FROM', sql)\n+        self.assertTrue(sql.startswith('(SELECT '), \"SQL should start with '(SELECT '\")\n+        self.assertTrue(sql.endswith('))'), \"SQL should end with '))'\")\n+\n+        # Direct SQL rendering without as_sql to cross-check\n+        plain_sql = str(employees_subquery.query)\n+        self.assertIn('SELECT', plain_sql)\n+\n+    def test_subquery_no_parentheses_initial(self):\n+        # Check subquery setup before setting subquery=True\n+        query = App.objects.all().query\n+        subquery = Subquery(query)\n+        compiler = subquery.query.get_compiler(connection=connection)\n+        sql, _ = subquery.as_sql(compiler, connection)\n+        # Test to confirm SQL didn't incorrectly lose characters\n+        self.assertTrue(sql.startswith('(SELECT '), \"SQL should start with '(SELECT '\")\n+        self.assertTrue(sql.endswith('))'), \"SQL should end with '))'\")\n+\n+    def test_subquery_set_manually(self):\n+        # Test setting subquery attribute manually\n+        app_query = App.objects.all().query\n+        app_subquery = Subquery(app_query)\n+        app_query.subquery = False  # Manually set to check initial behavior\n+        compiler = app_subquery.query.get_compiler(connection=connection)\n+        sql, _ = app_subquery.as_sql(compiler, connection)\n+        # Assert SQL isn't prematurely formatted\n+        self.assertFalse('(SELECT ' in sql)\n+        self.assertFalse('))' in sql)\n+\n+        # Set subquery correctly, assert proper SQL format\n+        app_query.subquery = True\n+        sql, _ = app_subquery.as_sql(compiler, connection)\n+        self.assertTrue(sql.startswith('(SELECT '), \"SQL should start with '(SELECT '\")\n+        self.assertTrue(sql.endswith('))'), \"SQL should end with '))'\")\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..e61dc8b 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,35 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\")\n+            )\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +193,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..38f9a1a 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -6,15 +7,47 @@ import platform\n from threading import Timer\n from types import SimpleNamespace\n import warnings\n+def test_unpickle_dpi_consistency():\n+    fig = plt.figure(dpi=200)\n+    initial_dpi = fig.dpi\n+\n+    # Pickle and unpickle the figure\n+    pickled_fig = pickle.dumps(fig)\n+    unpickled_fig = pickle.loads(pickled_fig)\n \n+    assert unpickled_fig.dpi == initial_dpi, \"DPI should remain consistent after unpickling.\"\n+\n+    # Test multiple sequential pickle and unpickle operations that were causing overflow\n+    for _ in range(10):\n+        pickled_fig = pickle.dumps(unpickled_fig)\n+        unpickled_fig = pickle.loads(pickled_fig)\n+        assert unpickled_fig.dpi == initial_dpi, \"DPI should remain consistent after repeated unpickling.\"\n import numpy as np\n import pytest\n from PIL import Image\n+def test_unpickle_dpi_consistency():\n+    fig = plt.figure(dpi=200)\n+    initial_dpi = fig.dpi\n+\n+    # Pickle and unpickle the figure\n+    pickled_fig = pickle.dumps(fig)\n+    unpickled_fig = pickle.loads(pickled_fig)\n \n+    assert unpickled_fig.dpi == initial_dpi, \"DPI should remain consistent after unpickling.\"\n+\n+    # Test multiple sequential pickle and unpickle operations that were causing overflow\n+    for _ in range(10):\n+        pickled_fig = pickle.dumps(unpickled_fig)\n+        unpickled_fig = pickle.loads(pickled_fig)\n+        assert unpickled_fig.dpi == initial_dpi, \"DPI should remain consistent after repeated unpickling.\"\n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n+from matplotlib.figure import Figure\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..ac04976 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1622,8 +1623,20 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         scatterplot(data=long_df, x=\"x\", y=\"y\", c=long_df[\"y\"], cmap=cmap)\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n-\n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_hue_in_map(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"],\n+                         x_vars=[\"petal_length\", \"petal_width\"])\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            no_error = True\n+        except Exception as e:\n+            no_error = False\n+            print(str(e))\n+\n+        assert no_error, \"Plotting with hue in map raised an error.\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..646050c 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -339,7 +339,20 @@ def test_excinfo_repr():\n     assert s == \"<ExceptionInfo ValueError tblen=4>\"\n \n \n-def test_excinfo_str():\n+def test_raises_str_behavior():\n+    import pytest\n+\n+    # Test that str(excinfo) behaves as expected within pytest.raises\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\n+            f\"A\\n\"\n+            f\"B\\n\"\n+            f\"C\"\n+        )\n+    \n+    # Check the behavior of str(excinfo)\n+    assert str(excinfo) != str(excinfo.value), \"str(excinfo) should not be the same as str(excinfo.value)\"\n+    assert str(excinfo.value) == \"A\\nB\\nC\", \"Exception message should match\"\n     excinfo = pytest.raises(ValueError, h)\n     s = str(excinfo)\n     assert s.startswith(__file__[:-9])  # pyc file and $py.class\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_parseopt.py b/testing/test_parseopt.py\nindex 8428d12..b8f56f5 100644\n--- a/testing/test_parseopt.py\n+++ b/testing/test_parseopt.py\n@@ -115,7 +115,19 @@ class TestParser:\n         group.addoption(\"--option1\", action=\"store_true\")\n         assert len(group.options) == 1\n \n-    def test_parse(self, parser):\n+    def test_collect_only_shortcut(self, testdir):\n+        # Create a simple test file\n+        testdir.makepyfile(\"\"\"\n+            def test_example():\n+                assert True\n+        \"\"\")\n+        # Run pytest with the new \"-c\" shortcut for \"--collect-only\"\n+        result = testdir.runpytest(\"-c\")\n+        # Check if output indicates collection mode with no execution\n+        result.stdout.fnmatch_lines([\n+            \"*collected 1 item*\",\n+            \"*no tests ran in*\"\n+        ])\n         parser.addoption(\"--hello\", dest=\"hello\", action=\"store\")\n         args = parser.parse([\"--hello\", \"world\"])\n         assert args.hello == \"world\"\n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..bc6d551 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -90,12 +90,20 @@ def missing_attr(c,\n     # type: (...) -> str\n     return a + (b or \"\")\n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n \n-class _ClassWithDocumentedInit:\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n     \"\"\"Class docstring.\"\"\"\n \n     def __init__(self, x: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..8a2ef10 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -62,8 +62,29 @@ def test_ZeroMatrix():\n     assert ZeroMatrix(n, n)**0 == Identity(n)\n     with raises(ShapeError):\n         Z**0\n-    with raises(ShapeError):\n-        Z**2\n+    from sympy import Symbol, symbols, MatrixSymbol, Identity, Sum, refine, Q as Query, assuming\n+\n+    def test_issue_total_sum_identity_matrix():\n+        n = Symbol('n', integer=True, positive=True)\n+        i, j = symbols('i j', integer=True)\n+        M = MatrixSymbol('M', n, n)\n+\n+        with assuming(Query.orthogonal(M)):\n+            e = refine((M.T * M).doit())\n+\n+        # Check the structure of the identity matrix created by M.T * M\n+        assert e.is_Identity\n+        assert e.shape == (n, n)\n+        \n+        # Verify sum of diagonal elements\n+        expected_diag_sum = n\n+        diag_sum = Sum(e[i, i], (i, 0, n - 1)).doit()\n+        assert diag_sum == expected_diag_sum\n+        \n+        # Verify total sum of the elements\n+        expected_total_sum = n\n+        total_sum = Sum(Sum(e[i, j], (i, 0, n - 1)), (j, 0, n - 1)).doit()\n+        assert total_sum == expected_total_sum\n \n def test_ZeroMatrix_doit():\n     Znn = ZeroMatrix(Add(n, n, evaluate=False), n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..1d10c55 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -234,6 +234,8 @@ GOOD_PAIRS = [\n     (r\"a \\; b\", _Mul(a, b)),\n     (r\"a \\thickspace b\", _Mul(a, b)),\n     (r\"a \\quad b\", _Mul(a, b)),\n+    # Test for issue with missing brackets in LaTeX fraction parsing\n+    (r\"\\frac{\\frac{a^3 + b}{c}}{\\frac{1}{c^2}}\", _Mul(_Pow(c, 2), _Div(_Add(_Pow(a, 3), b), c))),\n     (r\"a \\qquad b\", _Mul(a, b)),\n     (r\"a \\! b\", _Mul(a, b)),\n     (r\"a \\negthinspace b\", _Mul(a, b)),\n"
}