{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..263e07a 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,29 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+def test_nested_compound_models_separable():\n+    from astropy.modeling import models\n+    from astropy.modeling.separable import separability_matrix\n+\n+    # Initialize simple linear model\n+    cm = models.Linear1D(10) & models.Linear1D(5)\n+\n+    # Test its separability matrix\n+    expected_cm_matrix = np.array([[True, False], [False, True]])\n+    result_cm_matrix = separability_matrix(cm)\n+    assert np.array_equal(result_cm_matrix, expected_cm_matrix), \"Failed on simple linear model\"\n+\n+    # Test separability matrix for a slightly more complex model\n+    complex_model = models.Pix2Sky_TAN() & models.Linear1D(10) & models.Linear1D(5)\n+    expected_complex_matrix = np.array([[True, True, False, False], [True, True, False, False], [False, False, True, False], [False, False, False, True]])\n+    result_complex_matrix = separability_matrix(complex_model)\n+    assert np.array_equal(result_complex_matrix, expected_complex_matrix), \"Failed on complex model\"\n+\n+    # Test nested compound models\n+    nested_model = models.Pix2Sky_TAN() & cm\n+    expected_nested_matrix = np.array([[True, True, False, False], [True, True, False, False], [False, False, True, False], [False, False, False, True]])\n+    result_nested_matrix = separability_matrix(nested_model)\n+    assert np.array_equal(result_nested_matrix, expected_nested_matrix), \"Failed on nested compound model\"\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..41c6bef 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,65 @@\n+\n+def test_rst_custom_headers():\n+    \"\"\"Test writing a table with custom header rows for RST format.\"\"\"\n+\n+    tbl = QTable(\n+        {\n+            \"wave\": [350, 950] * u.nm,\n+            \"response\": [0.7, 1.2] * u.count,\n+            \"ints\": np.array([1, 2], dtype=np.int8),\n+        }\n+    )\n+\n+    # Expected output with custom headers\n+    expected_output = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      0.7    1\",\n+        \"  950.0      1.2    2\",\n+        \"======= ======== ====\",\n+    ]\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == expected_output\n+\n+\n+def test_read_write_rst():\n+    \"\"\"Round-trip a table with header_rows specified and verify output\"\"\"\n+    \n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n+from io import StringIO\n+from astropy.table import QTable\n from astropy.io import ascii\n+import astropy.units as u\n+import numpy as np\n \n from .common import assert_almost_equal, assert_equal\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..fd71ecd 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -42,8 +42,20 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert table2.meta[\"comments\"][0].startswith(\"WT -- hardness\")\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n+import pytest\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+from astropy.utils.exceptions import AstropyUserWarning\n \n-def test_roundtrip(tmp_path):\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip(tmp_path, lowercase):\n+    def lowercase_header(value):\n+        \"\"\"Make every non-comment line lower case.\"\"\"\n+        lines = []\n+        for line in value.splitlines():\n+            if not line.startswith(\"!\"):\n+                line = line.lower()\n+            lines.append(line)\n+        return \"\\n\".join(lines)\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n@@ -71,6 +83,9 @@ def test_roundtrip(tmp_path):\n     NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n     \"\"\"\n \n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n     path = str(tmp_path / \"test.qdp\")\n     path2 = str(tmp_path / \"test2.qdp\")\n \n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..6aa5a90 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -31,6 +31,48 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n # Test with Data covers:\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n+\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n @pytest.mark.parametrize(\n     (\"data1\", \"data2\"),\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..9f47e80 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,23 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_d_exponents_in_fits(self):\n+        # Create a column with format 'D' to test the conversion from 'E' to 'D'\n+        r1 = np.array([11.0, 12.0])\n+        c2 = fits.Column(name='def', format='D', array=r1, bscale=2.3, bzero=0.6)\n+        hdu = fits.TableHDU.from_columns([c2])\n+        hdu.writeto(self.temp('test_d_exponents.fits'), overwrite=True)\n+        \n+        # Read the file directly and check if 'D' is used as an exponent instead of 'E'\n+        with open(self.temp('test_d_exponents.fits')) as f:\n+            content = f.read()\n+            assert '4.95652173913043548D+00' in content\n+\n+        with fits.open(self.temp('test_d_exponents.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n+        \n+        os.remove(self.temp('test_d_exponents.fits'))\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..f7ae602 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,8 +1092,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n-\n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS should be 0o644 when not explicitly set.\n+        This test verifies that the default is applied correctly.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..627924b 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,7 +248,19 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_trailing_newline_in_username(self):\n+        usernames_with_newlines = ['username\\n', 'user\\nname', 'name\\n']\n+        validators_to_test = [\n+            validators.ASCIIUsernameValidator,\n+            validators.UnicodeUsernameValidator\n+        ]\n+        for Validator in validators_to_test:\n+            with self.subTest(validator=Validator):\n+                v = Validator()\n+                for username in usernames_with_newlines:\n+                    with self.subTest(username=username):\n+                        with self.assertRaises(ValidationError):\n+                            v(username)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +270,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..aba9706 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,20 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        # Test initial memoryview content\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+        # Test updating content with memoryview via property\n+        r = HttpResponse()\n+        r.content = memoryview(b'updated memoryview')\n+        self.assertEqual(r.content, b'updated memoryview')\n+\n+        # Test empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..13f271e 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n@@ -471,7 +473,20 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n-    def test_fast_delete_joined_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        \"\"\"Ensure PK set to None after fast deleting instance without dependencies.\"\"\"\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_with_pk_set_none(self):\n+        \"\"\"Ensure PK set to None after normal deleting instance without dependencies.\"\"\"\n+        u = User.objects.create()\n+        u.delete()\n+        self.assertIsNone(u.pk)\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n         u2 = User.objects.create()\n",
  "django__django-11283": "",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..d8fe1c8 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -14,6 +14,8 @@ from pathlib import Path\n from unittest import mock, skip, skipIf\n \n from django.apps.registry import Apps\n+import os\n+import sys\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n@@ -97,7 +99,22 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 autoreload.check_errors(import_module)('test_exception')\n         self.assertFileFound(filename)\n \n-    def test_zip_reload(self):\n+    def test_main_module_is_resolved(self):\n+        \"\"\"Verify that the main module's file is detected in changes.\"\"\"\n+        main_module = sys.modules['__main__']\n+        self.assertFileFound(Path(main_module.__file__))\n+\n+    def test_manage_py_change_detection(self):\n+        \"\"\"Test that changes in manage.py trigger the autoreload mechanism.\"\"\"\n+        manage_py_path = Path(__file__).parent / 'manage.py'  # Simulating manage.py\n+        with open(manage_py_path, 'w') as f:\n+            f.write(\"print('This is a change to trigger autoreload.')\")\n+        try:\n+            self.assertFileFound(manage_py_path)\n+        finally:\n+            # Clean up after test\n+            with open(manage_py_path, 'w') as f:\n+                f.write(\"\")  # Reset file to empty or initial state\n         \"\"\"\n         Modules imported from zipped files have their archive location included\n         in the result.\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..e44751d 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -8,6 +8,9 @@ import threading\n from io import StringIO\n from pathlib import Path\n from unittest import mock\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n+from django.test import override_settings\n \n from django.core import mail\n from django.core.files.uploadedfile import SimpleUploadedFile\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..4849d31 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -81,7 +81,11 @@ class BinaryFieldTests(SimpleTestCase):\n         ])\n \n \n-@isolate_apps('invalid_models_tests')\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.functional import lazy\n+from django.apps import apps\n+from django.db import models, connection\n class CharFieldTests(SimpleTestCase):\n \n     def test_valid_field(self):\n@@ -163,7 +167,31 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_iterable_choices(self):\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+        \n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n         class Model(models.Model):\n             field = models.CharField(max_length=10, choices='bad')\n \n@@ -353,7 +381,11 @@ class CharFieldTests(SimpleTestCase):\n         ])\n \n \n-@isolate_apps('invalid_models_tests')\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.functional import lazy\n+from django.apps import apps\n+from django.db import models, connection\n class DateFieldTests(SimpleTestCase):\n     maxDiff = None\n \n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..252385a 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -306,8 +307,36 @@ class ETagProcessingTests(unittest.TestCase):\n         self.assertEqual(quote_etag('\"etag\"'), '\"etag\"')  # quoted\n         self.assertEqual(quote_etag('W/\"etag\"'), 'W/\"etag\"')  # quoted, weak\n \n+from unittest import mock\n \n class HttpDateProcessingTests(unittest.TestCase):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_current_year_logic(self, mocked_datetime):\n+        # Mock the current year to test the correct logic of interpreting two-digit years\n+        # according to the RFC7231 rule.\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        current_time_1 = datetime(2023, 11, 6, 8, 49, 37)\n+        current_time_2 = datetime(2048, 11, 6, 8, 49, 37)\n+        current_time_3 = datetime(2073, 11, 6, 8, 49, 37)\n+\n+        tests = ( \n+            # When the current year is 2023, '69' should be considered 1969\n+            (current_time_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)),\n+            # When the current year is 2023, '70' should be considered 1970\n+            (current_time_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            # When the current year is 2048, '00' should be considered 2000\n+            (current_time_2, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            # When the current year is 2073, '25' should be considered 2025\n+            (current_time_3, 'Monday, 01-Jan-25 08:49:37 GMT', datetime(2025, 1, 1, 8, 49, 37)),\n+        )\n+\n+        for current_time, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = current_time\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n     def test_http_date(self):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..d971de5 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -39,8 +39,19 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n+from django.utils.translation import gettext_lazy as _\n+from django.db import models\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n \n class ChoicesTests(SimpleTestCase):\n+    def test_str(self):\n+        for test in [Gender, Suit, YearInSchool, Vehicle, MyChoice]:\n+            for member in test:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(test[member.name]), str(member.value))\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..4b63565 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -187,6 +187,47 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n \n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class OverrideGetFieldDisplayTests(TestCase):\n+\n+    def test_overriding_get_FIELD_display(self):\n+        \"\"\"\n+        Ensure that we can override the get_FIELD_display method for a model field.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_overriding_get_FIELD_display_with_different_values(self):\n+        \"\"\"\n+        Test overriding get_FIELD_display with different values to ensure flexibility.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                if self.foo_bar == 1:\n+                    return 'Value One'\n+                elif self.foo_bar == 2:\n+                    return 'Value Two'\n+                else:\n+                    return 'Unknown'\n+\n+        f1 = FooBar(foo_bar=1)\n+        f2 = FooBar(foo_bar=2)\n+        f_unknown = FooBar(foo_bar=3)\n+        self.assertEqual(f1.get_foo_bar_display(), 'Value One')\n+        self.assertEqual(f2.get_foo_bar_display(), 'Value Two')\n+        self.assertEqual(f_unknown.get_foo_bar_display(), 'Unknown')\n+\n class GetChoicesTests(SimpleTestCase):\n \n     def test_empty_choices(self):\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..630cbfd 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -74,8 +75,41 @@ class TranslationCheckTests(SimpleTestCase):\n                 self.assertEqual(check_setting_languages_bidi(None), [\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('en', 'English'),\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_valid_variant_consistent_language_settings(self):\n+        tests = [\n+            # language + region.\n+            'fr-CA',\n+            'es-419',\n+            'de-at',\n+            # language + region + variant.\n+            'ca-ES-valencia',\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n \n-    def test_inconsistent_language_settings(self):\n+    @override_settings(USE_I18N=True, LANGUAGES=[('en', 'English')])\n+    def test_invalid_language_code(self):\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        for tag in ['fr', 'fr-CA', 'fr-357']:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(\n+                    check_language_settings_consistent(None),\n+                    [Error(msg, id='translation.E004')],\n+                )\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..a77f2f0 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +6,8 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TransactionTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -17,8 +19,65 @@ def get_connection_copy():\n     )\n     return test_connection\n \n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+class TestSerializedRollback(TransactionTestCase):\n+    databases = {'default'}\n+\n+    def test_foreign_key_restore(self):\n+        # Test restoring objects with foreign keys\n+        obj_ref = ObjectReference.objects.create()\n+        obj = Object.objects.create()\n+        obj.related_objects.add(obj_ref.obj)\n+\n+        # Serialize the database state\n+        serialized_data = connection.creation.serialize_db_to_string()\n+\n+        # Emulate a rollback by deserializing the state\n+        connection.creation.deserialize_db_from_string(serialized_data)\n+\n+        # Verify that the objects are correctly restored\n+        retrieved_obj = Object.objects.get(pk=obj.pk)\n+        retrieved_obj_ref = ObjectReference.objects.get(pk=obj_ref.pk)\n+        self.assertEqual(retrieved_obj.related_objects.first(), retrieved_obj_ref.obj)\n+\n+    def test_multiple_models_restore(self):\n+        # Test restoring multiple models to ensure order is maintained\n+        obj_ref1 = ObjectReference.objects.create()\n+        obj_ref2 = ObjectReference.objects.create()\n+        obj1 = Object.objects.create()\n+        obj1.related_objects.add(obj_ref1.obj)\n+        obj2 = Object.objects.create()\n+        obj2.related_objects.add(obj_ref2.obj)\n+\n+        serialized_data = connection.creation.serialize_db_to_string()\n+        connection.creation.deserialize_db_from_string(serialized_data)\n \n-class TestDbSignatureTests(SimpleTestCase):\n+        self.assertEqual(Object.objects.count(), 2)\n+        self.assertEqual(ObjectReference.objects.count(), 2)\n     def test_default_name(self):\n         # A test db name isn't set.\n         prod_name = 'hodor'\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..988ad03 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -152,13 +152,56 @@ class RelativeFieldTests(SimpleTestCase):\n                 \"keyword argument.\",\n                 hint=(\n                     'If you want to create a recursive relationship, use '\n-                    'ForeignKey(\"self\", symmetrical=False, through=\"AmbiguousRelationship\").'\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n                 ),\n                 obj=field,\n                 id='fields.E335',\n             ),\n         ])\n \n+    def test_m2m_incorrect_hint_recursive_relationship(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='CorrectRelationship')\n+\n+        class CorrectRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            group1 = models.ForeignKey(Group, models.CASCADE, related_name='grp1')\n+            group2 = models.ForeignKey(Group, models.CASCADE, related_name='grp2')\n+\n+        field = Group._meta.get_field('members')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.members', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"CorrectRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n+    def test_correct_through_fields(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='ValidRelationship', through_fields=('group', 'person'))\n+\n+        class ValidRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            group = models.ForeignKey(Group, models.CASCADE)\n+\n+        field = Group._meta.get_field('members')\n+        self.assertEqual(field.check(from_model=Group), [])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..81254f9 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,6 +1249,41 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n     def test_request_meta_filtering(self):\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..4ba68ca 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,37 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_with_unique_together(self):\n+        app_label = 'test_alter_idx_with_unique'\n+        table_name = '%s_pony' % app_label\n+        # Set up initial model with both index_together and unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Create initial index together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together and verify unique constraint still exists\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Now test moving index to Options.indexes\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        new_model_state = new_state.apps.get_model(app_label, 'Pony')\n+        new_model_state._meta.indexes = [models.Index(fields=['pink', 'weight'], name='test_pony_pink_weight_idx')]\n+        with connection.schema_editor() as editor:\n+            editor.add_index(new_model_state, new_model_state._meta.indexes[0])\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..4725f79 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,6 +685,22 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n+    def test_queryset_delete_no_objects(self):\n+        \"\"\"\n+        Test that QuerySet.delete() returns the expected results when\n+        there are zero objects to delete, ensuring consistency\n+        regardless of foreign keys.\n+        \"\"\"\n+        # Case with no foreign keys\n+        block_library_deleted, block_library_deleted_objs = BlockLibrary.objects.filter(id=0).delete()\n+        self.assertEqual(block_library_deleted, 0)\n+        self.assertEqual(block_library_deleted_objs, {'delete.BlockLibrary': 0})\n+\n+        # Case with foreign keys\n+        file_deleted, file_deleted_objs = File.objects.filter(id=0).delete()\n+        self.assertEqual(file_deleted, 0)\n+        self.assertEqual(file_deleted_objs, {'delete.File': 0})\n+\n     def test_fast_delete_empty_no_update_can_self_select(self):\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..d26cee3 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,21 +79,63 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n-    async def test_headers(self):\n-        application = get_asgi_application()\n-        communicator = ApplicationCommunicator(\n-            application,\n-            self.async_request_factory._base_scope(\n-                path='/meta/',\n-                headers=[\n-                    [b'content-type', b'text/plain; charset=utf-8'],\n-                    [b'content-length', b'77'],\n-                    [b'referer', b'Scotland'],\n-                    [b'referer', b'Wales'],\n-                ],\n-            ),\n-        )\n+TEST_STATIC_ROOT = Path(__file__).parent / 'project' / 'static'\n+\n+class TestASGIStaticFilesHandler(SimpleTestCase):\n+    async_request_factory = AsyncRequestFactory()\n+\n+    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.staticfiles'})\n+    @override_settings(\n+        STATIC_URL='/static/',\n+        STATIC_ROOT=TEST_STATIC_ROOT,\n+        STATICFILES_DIRS=[TEST_STATIC_ROOT],\n+        STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n+    )\n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n         await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_async_response_not_found(self):\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        request = self.async_request_factory.get('/static/file-not-found.txt')\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n+    async def test_async_response_permission_denied(self):\n+        # Assuming the file exists with restricted permissions.\n+        restricted_path = TEST_STATIC_ROOT / 'restricted_file.txt'\n+        with open(restricted_path, 'wb') as file:\n+            file.write(b'Some content')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        request = self.async_request_factory.get('/static/restricted_file.txt')\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 403)  # Example status for permission denied\n         response_start = await communicator.receive_output()\n         self.assertEqual(response_start['type'], 'http.response.start')\n         self.assertEqual(response_start['status'], 200)\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..933bb16 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,20 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Test cases from the issue\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('---Leading Dashes and Underscores___', 'leading-dashes-and-underscores', False),\n+            ('___Trailing Underscores and Dashes---', 'trailing-underscores-and-dashes', False),\n+            ('___Multiple___Underscores---Between_Words___', 'multiple-underscores-between-words', False),\n+            ('---Leading and Trailing---', 'leading-and-trailing', False),\n+            # Original test patch cases\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\\\t whitespace-in-value \\\\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore_in-value', False),\n+            ('__strip__underscore-value___', 'strip__underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..1c7cb6e 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -204,7 +205,26 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3).values('num')\n         self.assertEqual(qs1.union(qs2).count(), 4)\n \n-    def test_count_union_empty_result(self):\n+    def test_none_on_combined_union_queries(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs_none = Number.objects.none()\n+\n+        # Combined with `.none()` should return no results.\n+        union_none_qs = qs1.union(qs2, qs_none)\n+        self.assertEqual(len(union_none_qs), 0)\n+\n+        # Ensure results are as expected without `.none()`.\n+        valid_union_qs = qs1.union(qs2)\n+        self.assertNumbersEqual(valid_union_qs, [0, 1, 8, 9], ordered=False)\n+\n+        # Add another check using a queryset that matches some of the existing numbers.\n+        qs_partial = Number.objects.filter(num__lt=5)\n+        combined = qs_partial.union(qs1, qs2)\n+        self.assertNumbersEqual(combined, [0, 1, 2, 3, 4, 8, 9], ordered=False)\n+\n+        # When unioned with `.none()`, should still result in no entries.\n+        self.assertEqual(len(combined.union(qs_none)), 0)\n         qs = Number.objects.filter(pk__in=[])\n         self.assertEqual(qs.union(qs).count(), 0)\n \n@@ -313,4 +333,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..53a6965 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2829,8 +2829,71 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+from django.test import TestCase\n+from django import forms\n+from .models import Character, StumpJoke\n+\n+class FormFieldDuplicateOptionsTests(TestCase):\n+    def setUp(self):\n+        self.marley = Character.objects.create(username='Marley', last_action='2023-10-01 10:00:00')\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-01 09:00:00')\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n \n-class FormFieldCallbackTests(SimpleTestCase):\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..3859933 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -5,12 +5,39 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.checks import Error\n from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TestCase\n from django.test.utils import isolate_apps\n \n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    def test_abstract_inherited_fields_equality(self):\n+        \"\"\"Test that fields from different models inheriting the same abstract model are not considered equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Fields from different models should not be equal\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Check that fields are not considered equal using a set\n+        self.assertEqual(len({inherit1_model_field, inherit2_model_field}), 2)\n+\n+        # Ensure that fields from the same abstract model are equal\n+        self.assertEqual(abstract_model_field, AbstractModel._meta.get_field('field'))\n+\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +374,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..f25f1e8 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -55,14 +55,18 @@ class SiteEachContextTest(TestCase):\n         admin_views = apps[0]\n         self.assertEqual(admin_views['app_label'], 'admin_views')\n         self.assertEqual(len(admin_views['models']), 1)\n-        self.assertEqual(admin_views['models'][0]['object_name'], 'Article')\n+        article = admin_views['models'][0]\n+        self.assertEqual(article['object_name'], 'Article')\n+        # Verify the model class is included\n+        self.assertEqual(article['model'], Article)\n \n         # auth.User\n         auth = apps[1]\n         self.assertEqual(auth['app_label'], 'auth')\n         self.assertEqual(len(auth['models']), 1)\n         user = auth['models'][0]\n-        self.assertEqual(user['object_name'], 'User')\n+        # Verify the model class is included\n+        self.assertEqual(user['model'], User)\n \n         self.assertEqual(auth['app_url'], '/test_admin/admin/auth/')\n         self.assertIs(auth['has_module_perms'], True)\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..ba9b320 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,6 +1,8 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n@@ -37,6 +39,36 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_invalidated_after_email_change(self):\n+        \"\"\"Updating user's email address invalidates the password reset token.\"\"\"\n+        test_cases = [\n+            (User, 'testuser@example.com'),\n+            (CustomEmailField, 'testcustom@example.com'),\n+        ]\n+\n+        for model, email in test_cases:\n+            with self.subTest(model=model.__name__, email=email):\n+                # Create the user\n+                user = model.objects.create_user(\n+                    username=f'user_{email.split(\"@\")[0]}', \n+                    email=email, \n+                    password='test_password'\n+                )\n+\n+                # Create a token\n+                token_generator = PasswordResetTokenGenerator()\n+                token = token_generator.make_token(user)\n+\n+                # Ensure the token is initially valid\n+                self.assertTrue(token_generator.check_token(user, token))\n+\n+                # Change the user's email\n+                setattr(user, user.get_email_field_name(), 'new_' + email)\n+                user.save()\n+\n+                # Ensure the token is now invalid\n+                self.assertFalse(token_generator.check_token(user, token))\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..48b0f15 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -23,6 +23,8 @@ from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..e507064 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -44,9 +45,59 @@ class ShellCommandTestCase(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, \"Couldn't import bpython interface.\"):\n             call_command('shell', interface='bpython')\n \n-    # [1] Patch select to prevent tests failing when when the test suite is run\n+    def test_command_option_globals(self):\n+        script_globals = 'print(\"__name__\" in globals())'\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        # Inline function script with import\n+        script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        script_globals = 'print(\"__name__\" in globals())'\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        # Inline function script with import\n+        script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    # [1] Patch select to prevent tests failing when the test suite is run\n     # in parallel mode. The tests are run in a subprocess and the subprocess's\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..de5b6b8 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -958,6 +958,43 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n             html=True\n         )\n \n+    def test_inline_verbose_name_plural_default(self):\n+        class InlineWithVerboseNameOnly(TabularInline):\n+            model = Profile\n+            verbose_name = 'Profile Item'\n+\n+        class InlineWithNoVerboseName(TabularInline):\n+            model = VerboseNameProfile\n+\n+        class InlineCustomVerboseNamePlural(TabularInline):\n+            model = VerboseNamePluralProfile\n+            verbose_name = 'Custom Item'\n+            verbose_name_plural = 'Custom Items Plural'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            InlineWithVerboseNameOnly,\n+            InlineWithNoVerboseName,\n+            InlineCustomVerboseNamePlural,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        \n+        # Inline with only verbose_name should derive verbose_name_plural from it.\n+        self.assertContains(response, '<h2>Profile Items</h2>')\n+        self.assertContains(response, 'Add another Profile Item')\n+\n+        # Inline with no verbose_name should use model defaults.\n+        self.assertContains(response, '<h2>Verbose Name Profiles</h2>')\n+        self.assertContains(response, 'Add another Verbose Name Profile')\n+\n+        # Inline with custom verbose_name_plural should use custom.\n+        self.assertContains(response, '<h2>Custom Items Plural</h2>')\n+        self.assertContains(response, 'Add another Custom Item')\n+\n     def test_extra_inlines_are_not_shown(self):\n         response = self.client.get(self.change_url)\n         self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..7ce51f0 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -596,6 +596,17 @@ class TestQuerying(TestCase):\n         )\n \n     def test_isnull_key_or_none(self):\n+        # Test with a key that does not exist to ensure it matches correctly\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__k__isnull=True),\n+            self.objs[:3] + self.objs[4:],\n+        )\n+        # Test to ensure JSONField with key `j` doesn't match with JSON null values\n+        # Specifically for SQLite and Oracle engines\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..15acb36 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -401,6 +401,68 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             pass\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+    \n+    def test_explicit_inherited_pk(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_auto_created_inherited_pk(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n+\n+    def test_auto_created_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n \n     def test_explicit_pk(self):\n         class Model(models.Model):\n@@ -414,4 +476,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..6d997bc 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,30 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Silence expected warning during testing.\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"ignore\", category=RemovedInNextVersionWarning)\n+\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        \n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -298,6 +320,15 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n+        # Repeat ModelChoiceField test with an invalid choice value.\n+        # This test ensures the invalid choice value is included in the error message.\n+        f = ModelChoiceField(queryset=ChoiceModel.objects.all())\n+        self.assertFormErrors(\n+            ['Select a valid choice. \"invalid_choice\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid_choice'\n+        )\n+\n         # ModelMultipleChoiceField\n         e = {\n             'required': 'REQUIRED',\n@@ -307,4 +338,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..60dbac9 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +550,36 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        parent = ParentStringPrimaryKey.objects.create(name='jeff')\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff_updated'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_primary_key_set(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey()\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            child.parent.name = 'jeff_new'\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_before_primary_key_set(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='charlie')\n+            parent.save()\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            child.save()\n+            self.assertTrue(\n+                ChildStringPrimaryKeyParent.objects.filter(parent=parent).exists()\n+            )\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..e47f03d 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -19,7 +20,19 @@ class QTests(SimpleTestCase):\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n-    def test_combine_not_q_object(self):\n+    def test_combine_or_dict_keys(self):\n+        # Create a Q object using dict_keys\n+        q = Q(x__in={}.keys())\n+        # Test OR operation with an empty Q object\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+    def test_combine_and_dict_keys(self):\n+        # Create a Q object using dict_keys\n+        q = Q(x__in={}.keys())\n+        # Test AND operation with an empty Q object\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n         obj = object()\n         q = Q(x=1)\n         with self.assertRaisesMessage(TypeError, str(obj)):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..e676249 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -25,6 +25,7 @@ from django.db.models.functions import (\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.db.models import Exists, OuterRef, Q\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n@@ -794,7 +795,36 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n-    def test_boolean_expression_combined(self):\n+    def test_q_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+\n+        # Set up any necessary state\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Test combinations for commutative behavior\n+        test_cases = [\n+            (Q(salary__gte=30) & Exists(is_ceo), [self.max]),\n+            (Exists(is_ceo) & Q(salary__gte=30), [self.max]),\n+            (Q(salary__lt=15) | Exists(is_poc), [self.example_inc.ceo, self.max]),\n+            (Exists(is_poc) | Q(salary__lt=15), [self.example_inc.ceo, self.max]),\n+        ]\n+\n+        for conditions, expected in test_cases:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n+\n+        additional_tests = [\n+            Exists(is_ceo) & Q(),\n+            Q() & Exists(is_ceo),\n+            Exists(is_ceo) | Q(),\n+            Q() | Exists(is_ceo),\n+        ]\n+\n+        for conditions in additional_tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), [self.example_inc.ceo])\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..d3e399f 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1127,8 +1127,33 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[0], func)\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n-\n-    def test_resolver_match_on_request(self):\n+from django.urls import resolve\n+from django.test import SimpleTestCase, override_settings\n+from django.http import HttpRequest\n+from django.urls import path\n+import functools\n+from urlpatterns_reverse import views\n+\n+class TestPartialFunctionRepresentation(SimpleTestCase):\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('/partial/', 'template.html', views.empty_view),\n+            ('/partial_nested/', 'nested_partial.html', views.empty_view),\n+            ('/partial_wrapped/', 'template.html', views.empty_view),\n+        ]\n+        for path, template_name, expected_view in tests:\n+            with self.subTest(path=path):\n+                resolved = resolve(path)\n+                expected_func_repr = f\"functools.partial({expected_view!r}, template_name='{template_name}')\"\n+                actual_repr = repr(resolved)\n+                self.assertIn(expected_func_repr, actual_repr)\n+\n+        # Additional test for checking arguments\n+        partial_with_args = functools.partial(views.empty_view, 'arg1', kwarg1='value1')\n+        resolved = ResolverMatch(partial_with_args, (), {})\n+        expected_part_arg_repr = \"functools.partial(\"\n+        self.assertIn(expected_part_arg_repr, repr(resolved))\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..a3fdcb7 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import override_settings\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -66,7 +68,31 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +108,31 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..fa0878a 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2197,6 +2197,26 @@ class StartApp(AdminScriptTestCase):\n                     \"make sure the directory is a valid identifier.\" % bad_target\n                 )\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test that startapp works correctly with a trailing slash in the directory name.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_multiple_trailing_slashes_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test that startapp works correctly with multiple trailing slashes in the directory name.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app2', '///')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n     def test_importable_target_name(self):\n         _, err = self.run_django_admin(['startapp', 'app', 'os'])\n         self.assertOutput(\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..65108bb 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,7 +1020,20 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_hash_widget_label_for_attribute(self):\n+        \"\"\"\n+        Test to verify that the ReadOnlyPasswordHashWidget's label\n+        does not incorrectly have a 'for' attribute since its widget \n+        does not render any labelable elements.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        # Verify that id_for_label returns None as there is no labelable element.\n+        self.assertIsNone(bound_field.field.widget.id_for_label('id'))\n+        # Verify that the rendered label tag does not contain the 'for' attribute.\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..e1b148c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,35 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_serialize_type_model(self):\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set()),\n+        )\n+\n+    def test_migration_missing_import(self):\n+        \"\"\"\n+        Test that makemigrations includes necessary model imports.\n+        \"\"\"\n+        fields = [\n+            ('name', models.TextField(primary_key=True)),\n+        ]\n+        class_path = 'app.models.MyField'\n+        bases = (class_path, models.Model)\n+        \n+        # The expected serialized result should include app.models import\n+        expected = (\n+            \"('app.models.MyField', {'import app.models'})\",\n+            set(),\n+        )\n+        result = MigrationWriter.serialize(bases)\n+        self.assertSerializedResultEqual(result, expected)\n+\n+        with self.assertRaises(NameError) as cm:\n+            exec('bases=(app.models.MyField, models.Model)', {'models': models})\n+\n+        self.assertIn(\"name 'app.models' is not defined\", str(cm.exception))\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..95ee1b1 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +363,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +991,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..a99ec62 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -31,7 +31,12 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n-    def test_get_on_intermediate_model(self):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n         queryset = Membership.objects.get(person=self.jane, group=self.rock)\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..5cbe97b 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -292,6 +292,37 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[PAGINATOR_SIZE:]],\n             'pagination': {'more': False},\n         })\n+    \n+    def test_autocomplete_json_view_with_extra_fields(self):\n+        # Testing enhanced autocomplete serialization using a custom `serialize_result` method.\n+        \n+        class AutocompleteJsonWithExtraFieldsView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'extra': obj.extra_field\n+                }\n+\n+        Question.objects.create(question='Question 1', extra_field='Extra 1')\n+        Question.objects.create(question='Question 2', extra_field='Extra 2')\n+        request = self.factory.get(self.url, {'term': 'Question', **self.opts})\n+        request.user = self.superuser\n+        \n+        with model_admin(Question, AutocompleteJsonWithExtraFieldsView):\n+            response = AutocompleteJsonWithExtraFieldsView.as_view()(request)\n+        \n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(\n+            data,\n+            {\n+                'results': [\n+                    {'id': str(q.pk), 'text': q.question, 'extra': q.extra_field}\n+                    for q in Question.objects.all()\n+                ],\n+                'pagination': {'more': False},\n+            }\n+        )\n \n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..81cebb1 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,7 +426,57 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+from functools import wraps\n+from django.utils.decorators import method_decorator\n+\n+class DecoratorPreservationTests(TestCase):\n+    def test_method_decorator_preserves_function_metadata(self):\n+        \"\"\"Test that method_decorator preserves __name__ and __module__.\"\"\"\n+\n+        def sample_decorator(f):\n+            @wraps(f)\n+            def wrapper(*args, **kwargs):\n+                return f(*args, **kwargs)\n+            return wrapper\n+\n+        class TestClass:\n+            @method_decorator(sample_decorator)\n+            def test_method(self):\n+                \"\"\"A sample method.\"\"\"\n+                return \"Hello\"\n+\n+        instance = TestClass()\n+        method = instance.test_method\n+        self.assertEqual(method.__name__, 'test_method')\n+        self.assertEqual(method.__doc__, 'A sample method.')\n+        # Ensure the method belongs to the correct module\n+        self.assertIn('test_method', method.__module__)\n+\n+    def test_method_decorator_with_partial_function(self):\n+        \"\"\"Test that method_decorator does not fail for partial functions.\"\"\"\n+\n+        from functools import partial\n+\n+        def basic_decorator(f):\n+            @wraps(f)\n+            def wrapper(*args, **kwargs):\n+                return f(*args, **kwargs)\n+            return wrapper\n+\n+        def original_func(x):\n+            \"\"\"Original function.\"\"\"\n+            return x\n+\n+        partial_func = partial(original_func, x=1)\n+\n+        @method_decorator(basic_decorator)\n+        def wrapper_func(func):\n+            return func()\n+\n+        class TestClassWithPartial:\n+            decorated_partial = wrapper_func(partial_func)\n+\n+        self.assertEqual(TestClassWithPartial.decorated_partial, 1)\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..afae71d 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django import forms\n@@ -7,6 +8,8 @@ from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n \n+import json\n+from django.forms.models import ModelChoiceIteratorValue\n from .models import Article, Author, Book, Category, Writer\n \n \n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..f68b0ea 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -136,7 +136,19 @@ class MultiValueFieldTest(SimpleTestCase):\n         f = MultiValueField(fields=(CharField(), CharField()), disabled=True)\n         self.assertIs(f.has_changed(['x', 'x'], ['y', 'y']), False)\n \n-    def test_form_as_table(self):\n+    def test_multivaluewidget_label_ids(self):\n+        class TestForm(Form):\n+            field1 = SplitDateTimeField()\n+\n+        form = TestForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_field1_0\">Field1:</label></th>\n+            <td><input type=\"text\" name=\"field1_0\" id=\"id_field1_0\" required>\n+            <input type=\"text\" name=\"field1_1\" id=\"id_field1_1\" required></td></tr>\n+            \"\"\"\n+        )\n         form = ComplexFieldForm()\n         self.assertHTMLEqual(\n             form.as_table(),\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..ca0c856 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,6 +70,8 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            # URL that previously caused ValueError (invalid IPv6 URL).\n+            '////]@N.AN',\n         ]\n         for url, expected in tests:\n             with self.subTest(url=url):\n@@ -100,6 +102,8 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # URL that previously caused ValueError (invalid IPv6 URL).\n+            '////]@N.AN',\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n",
  "django__django-15213": "",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..b880d14 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -143,7 +144,29 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that extra_tags is preserved correctly during serialization/deserialization.\n+        \"\"\"\n+        storage = self.get_storage()\n+\n+        # Test with empty string extra_tags\n+        message_with_empty_extra_tags = Message(constants.INFO, 'Test message', extra_tags=\"\")\n+        encoded = storage._encode(message_with_empty_extra_tags)\n+        decoded_message = storage._decode(encoded)\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n+\n+        # Test with None extra_tags\n+        message_with_none_extra_tags = Message(constants.INFO, 'Test message', extra_tags=None)\n+        encoded = storage._encode(message_with_none_extra_tags)\n+        decoded_message = storage._decode(encoded)\n+        self.assertIsNone(decoded_message.extra_tags)\n+\n+        # Test with non-empty string extra_tags\n+        message_with_extra_tags = Message(constants.INFO, 'Test message', extra_tags=\"some tags\")\n+        encoded = storage._encode(message_with_extra_tags)\n+        decoded_message = storage._decode(encoded)\n+        self.assertEqual(decoded_message.extra_tags, \"some tags\")\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..a48323a 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,47 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty If-Modified-Since header does not raise an exception.\n+        Should return True, assuming modification is considered.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_none(self):\n+        \"\"\"\n+        Test with None as the If-Modified-Since header, which should treat\n+        as no header is provided and return True.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=None, mtime=1))\n+\n+    def test_was_modified_since_valid_date(self):\n+        \"\"\"\n+        Test with a valid HTTP date. If the given mtime is greater than the\n+        date in the header, it should return True (indicating the resource\n+        has been modified).\n+        \"\"\"\n+        mtime = 1343416141.107817  # Example mtime\n+        header = http_date(mtime - 10)  # 10 seconds earlier\n+        self.assertTrue(was_modified_since(header=header, mtime=mtime))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Test with an invalid HTTP date in the If-Modified-Since header.\n+        Should handle the invalid date gracefully and assume modification\n+        has taken place.\n+        \"\"\"\n+        invalid_date_header = \"Invalid-Date-String\"\n+        self.assertTrue(was_modified_since(header=invalid_date_header, mtime=1))\n+\n+    def test_was_modified_since_same_date(self):\n+        \"\"\"\n+        Test with the same mtime and header date, expecting False as no\n+        modification should be detected.\n+        \"\"\"\n+        mtime = 1343416141.107817\n+        header = http_date(mtime)\n+        self.assertFalse(was_modified_since(header=header, mtime=mtime))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..95e4bc6 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -8,6 +9,7 @@ from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management.utils import (\n     find_command,\n     get_random_secret_key,\n@@ -411,7 +413,17 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_create_parser_formatter_class(self):\n+        \"\"\"Test if BaseCommand.create_parser() uses the correct formatter class.\"\"\"\n+        epilog = \"Example usage:\\n    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter,\n+        )\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+        self.assertTrue(epilog in parser.format_help())\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..8a94761 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -217,6 +219,41 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder_with_simple_override(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"encoder\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"encoder\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_with_composite_data(self):\n+        class CustomDjangoEncoder(DjangoJSONEncoder):\n+            def default(self, o):\n+                if isinstance(o, datetime):\n+                    return o.isoformat()\n+                return super().default(o)\n+\n+        self.assertHTMLEqual(\n+            json_script({\"date\": datetime(2021, 1, 1)}, encoder=CustomDjangoEncoder),\n+            '<script type=\"application/json\">{\"date\": \"2021-01-01T00:00:00\"}</script>',\n+        )\n+\n+    def test_json_script_escaped_characters_with_custom_encoder(self):\n+        class CustomEncoder(DjangoJSONEncoder):\n+            def default(self, o):\n+                if isinstance(o, str):\n+                    return o[::-1]  # Just reverse the string for example purposes\n+                return super().default(o)\n+\n+        data = {\"text\": \"<escape&me>\"}\n+        self.assertHTMLEqual(\n+            json_script(data, encoder=CustomEncoder),\n+            '<script type=\"application/json\">{\"text\": \">em&epacse<\"}</script>',\n+        )\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..e282772 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -185,8 +185,20 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                     )\n                 ],\n             )\n-\n-    def test_template_tags_with_different_library_name(self):\n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\",\n+        ]\n+    )\n+    def test_template_tags_same_library_in_installed_apps_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n@@ -206,4 +218,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..ed4203d 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,6 +395,18 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n+    def test_select_related_only_with_proxy(self):\n+        proxy_user = ProxyCustomModel.objects.create(name=\"Alice\")\n+        another_obj = AnotherModel.objects.create(custom=proxy_user)\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        self.assertEqual(qs.get(), another_obj)\n+\n+    def test_select_related_only_with_concrete(self):\n+        concrete_user = CustomModel.objects.create(name=\"Bob\")\n+        another_obj = AnotherModel.objects.create(custom=concrete_user)\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        self.assertEqual(qs.get(), another_obj)\n+\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n",
  "django__django-15851": "",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..0738d24 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1900,13 +1900,26 @@ class AllValidTests(SimpleTestCase):\n \n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n+        import warnings\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.forms import formset_factory, BaseFormSet\n+        from django.test import SimpleTestCase\n \n-        with isolate_lru_cache(get_default_renderer), self.settings(\n-            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n-        ), self.assertRaisesMessage(\n-            RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n-        ):\n-            ChoiceFormSet = formset_factory(Choice)\n-            formset = ChoiceFormSet()\n-            str(formset)\n+class TestFormsetManagementForm(SimpleTestCase):\n+    \n+    def test_management_form_no_deprecation_warning(self):\n+        \"\"\"\n+        Management forms should not trigger the \"default.html\" deprecation\n+        warning when they are rendered.\n+        \"\"\"\n+        with isolate_lru_cache(get_default_renderer):\n+            with self.settings(FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"):\n+                with warnings.catch_warnings(record=True) as w:\n+                    warnings.simplefilter(\"always\")\n+                    \n+                    ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                    formset = ChoiceFormSet()\n+                    str(formset.management_form)\n+                    \n+                    for warning in w:\n+                        self.assertNotIn(DEFAULT_TEMPLATE_DEPRECATION_MSG, str(warning.message))\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..f911475 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,16 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        # Assuming ArticleFormSet is the relevant formset related to the issue. \n+        ArticleFormSet = formset_factory(CustomKwargForm)\n+        formset_true = ArticleFormSet(form_kwargs={\"empty_permitted\": True})\n+        # The empty_form should ignore empty_permitted and maintain a default irrelevant state for empty forms.\n+        self.assertIs(formset_true.empty_form.empty_permitted, None)\n+\n+        formset_false = ArticleFormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertIs(formset_false.empty_form.empty_permitted, None)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..71ee407 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,8 +25,11 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n \n+import urllib.parse\n+\n from .models.custom_user import (\n     CustomUser,\n     CustomUserWithoutIsActiveField,\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..7b2ee22 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,8 +508,19 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+class SitemapTests(SimpleTestCase):\n+    def test_callable_lastmod_no_items_should_return_none(self):\n+        class CallableLastmodNoItemsSitemap(Sitemap):\n+            location = \"/location/\"\n+\n+            def items(self):\n+                return []\n+\n+            def lastmod(self, obj):\n+                return obj.lastmod\n+\n+        sitemap = CallableLastmodNoItemsSitemap()\n+        self.assertIsNone(sitemap.get_latest_lastmod())\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..f7d9b4c 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,8 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock, TestCase\n import io\n import os\n import pickle\n@@ -1755,6 +1757,29 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n+    def test_has_key_race_handling(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_has_key_expired_file_deleted(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        # Artificially expire the file by mocking _is_expired to return True and simulate file deletion\n+        with mock.patch.object(cache, '_is_expired', return_value=True):\n+            with mock.patch('os.path.exists', return_value=True):\n+                with mock.patch('builtins.open', side_effect=FileNotFoundError) as mocked_open:\n+                    self.assertIs(cache.has_key(\"key\"), False)\n+                    mocked_open.assert_called_once()\n+\n+    def test_has_key_no_race_condition(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        # Test where the file exists and is not expired\n+        with mock.patch.object(cache, '_is_expired', return_value=False):\n+            with mock.patch('os.path.exists', return_value=True):\n+                with mock.patch('builtins.open', mock.mock_open(read_data='data')):\n+                    self.assertIs(cache.has_key(\"key\"), True)\n+\n     def test_empty_cache_file_considered_expired(self):\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..6e26de0 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,10 +1,13 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n+from django.contrib.auth import get_permission_codename\n from django.contrib.auth.models import User\n+from .tests import get_perm\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n",
  "django__django-16595": "",
  "django__django-16873": "",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..28b7d80 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -568,8 +568,34 @@ class BulkCreateTests(TestCase):\n                 update_fields=[\"name\"],\n                 unique_fields=[\"big_auto_fields\"],\n             )\n+    def test_bulk_create_update_conflicts_returning_ids(self):\n+        \"\"\"\n+        Test if bulk_create with update_conflicts returns IDs for updated\n+        objects.\n+        \"\"\"\n+        TwoFields.objects.bulk_create(\n+            [\n+                TwoFields(f1=1, f2=2, name=\"a\"),\n+                TwoFields(f1=2, f2=3, name=\"b\"),\n+            ]\n+        )\n+        self.assertEqual(TwoFields.objects.count(), 2)\n \n-    def _test_update_conflicts_two_fields(self, unique_fields):\n+        initial_instances = list(TwoFields.objects.all())\n+        conflicting_objects = [\n+            TwoFields(id=initial_instances[0].id, f1=1, f2=2, name=\"updated a\"),\n+            TwoFields(id=initial_instances[1].id, f1=2, f2=3, name=\"updated b\"),\n+        ]\n+\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n         TwoFields.objects.bulk_create(\n             [\n                 TwoFields(f1=1, f2=1, name=\"a\"),\n@@ -816,4 +842,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..0a06ae5 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -508,7 +508,30 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+import pytest\n+\n+def test_get_backend_does_not_clear_gcf_figs():\n+    # Test to ensure that calling get_backend() does not clear figures\n+    # from Gcf.figs when created under rc_context.\n+    from matplotlib._pylab_helpers import Gcf\n+\n+    # Create a figure within an rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+\n+    # Record state of Gcf.figs before calling get_backend\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    # Call get_backend to test if it erroneously clears Gcf.figs\n+    get_backend()\n+\n+    # Record state of Gcf.figs after calling get_backend\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    # Assert that Gcf.figs remains unchanged\n+    assert before == after, f'Gcf.figs changed: {before} -> {after}'\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..9c49879 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,14 +21,42 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_3d_axes(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    \n+    # Make the test axis invisible\n+    ax_test.set_visible(False)\n+    # The reference axis is left visible\n+    \n+    # Test that invisible 3D axes do not respond to events\n+    fig_test.canvas.draw()\n+    assert fig_test.canvas.inaxes((200, 200)) is None\n+\n+    fig_ref.canvas.draw()\n+    assert fig_ref.canvas.inaxes((200, 200)) is not None\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n         ax.set_aspect('equal')\n \n \n-@mpl3d_image_comparison(['bar3d.png'])\n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_3d_axes(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    \n+    # Make the test axis invisible\n+    ax_test.set_visible(False)\n+    # The reference axis is left visible\n+    \n+    # Test that invisible 3D axes do not respond to events\n+    fig_test.canvas.draw()\n+    assert fig_test.canvas.inaxes((200, 200)) is None\n+\n+    fig_ref.canvas.draw()\n+    assert fig_ref.canvas.inaxes((200, 200)) is not None\n def test_bar3d():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex ea745fc..d1cbc80 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -304,7 +304,9 @@ class Axes(_AxesBase):\n                 **kwargs)\n         if len(extra_args):\n             raise TypeError('legend only accepts two non-keyword arguments')\n+        draggable = kwargs.pop('draggable', False)\n         self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\n+        self.legend_.set_draggable(draggable)\n         self.legend_._remove_method = self._remove_legend\n         return self.legend_\n \n",
  "matplotlib__matplotlib-23964": "",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..e86723c 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,25 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+\n+@pytest.mark.parametrize('constrained', [True, False])\n+def test_user_warning_for_subplots_adjust(constrained):\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    \n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    \n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    \n+    if not constrained:\n+        with pytest.warns(UserWarning, match=\"This figure was using a layout engine that is incompatible with subplots_adjust and/or tight_layout; not calling subplots_adjust.\"):\n+            plt.subplots_adjust(wspace=0)\n+    else:\n+        # No warning should be generated when constrained layout is True\n+        plt.subplots_adjust(wspace=0)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..0cce1da 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5723,8 +5723,38 @@ def test_set_get_ticklabels():\n     ax[0].set_yticks(range(10))\n     ax[0].set_xticklabels(['a', 'b', 'c', 'd'] + 6 * [''])\n     ax[0].set_yticklabels(['11', '12', '13', '14'] + 6 * [''])\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_set_ticks_kwargs_raise_error_without_labels():\n+    \"\"\"\n+    When labels=None and any kwarg is passed, axis.set_ticks() raises a\n+    ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, alpha=0.5)\n \n-    # set ticklabel to the other plot, expect the 2 plots have same label\n+def test_set_ticks_with_valid_labels_and_kwargs():\n+    \"\"\"\n+    Verify that valid text properties do not raise an error when labels are provided.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = ['a', 'b', 'c']\n+    # This should not raise an error\n+    ax.xaxis.set_ticks(ticks, labels=labels, alpha=0.5)\n+\n+def test_set_ticks_with_invalid_kwargs_and_labels():\n+    \"\"\"\n+    Verify that invalid kwargs still raise an error when labels are provided.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = ['a', 'b', 'c']\n+    with pytest.raises(TypeError):\n+        ax.xaxis.set_ticks(ticks, labels=labels, invalid_property=0.5)\n     # setting pass get_ticklabels return value as ticklabels argument\n     ax[1].set_xticks(ax[0].get_xticks())\n     ax[1].set_yticks(ax[0].get_yticks())\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..d643e4f 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -29,8 +29,27 @@ def test_create_lookup_table(N, result):\n     data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n-\n-def test_resampled():\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_warnings(dtype):\n+    # Ensures no DeprecationWarning for converting out-of-bound integers\n+    cm = plt.get_cmap(\"viridis\")\n+    with pytest.warns(None) as record:\n+        cm(dtype(0))\n+    assert len(record) == 0, f\"Warnings were emitted: {record.list}\"\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_get_cmap_dtype(dtype):\n+    # Ensures basic colormap access without warnings\n+    cmap = plt.get_cmap(\"viridis\")\n+    with pytest.warns(None) as record:\n+        result = cmap(np.empty((0,), dtype=dtype))\n+    assert_array_equal(result, np.empty((0, 4)), err_msg=\"Mismatched result\")\n+    assert len(record) == 0, f\"Warnings were emitted: {record.list}\"\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..e1ec9b3 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -106,7 +107,26 @@ def test_complete(fig_test, fig_ref):\n     plt.close(loaded)\n \n \n-def _pickle_load_subprocess():\n+def test_draggable_legend():\n+    import pickletools\n+\n+    # Create a figure and plot with draggable legend\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    \n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Pickle the figure and ensure \"FigureCanvasQTAgg\" is not in the pickle stream\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()\n+\n+    plt.close(loaded_fig)\n     import os\n     import pickle\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..8addffa 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -58,37 +58,289 @@ def _generate_complete_test_figure(fig_ref):\n     # Ensure lists also pickle correctly.\n     plt.subplot(3, 3, 1)\n     plt.plot(list(range(10)))\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n \n+@pytest.mark.parametrize(\"align_call\", [True, False])\n+def test_pickle_figure_with_align_labels(align_call):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    if align_call:\n+        fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = pickle.dumps(fig)\n+        successful_pickle = True\n+    except TypeError:\n+        successful_pickle = False\n+\n+    # If align_labels() is called, check if pickling still succeeds\n+    assert successful_pickle == True\n     plt.subplot(3, 3, 2)\n     plt.contourf(data, hatches=['//', 'ooo'])\n     plt.colorbar()\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n \n+@pytest.mark.parametrize(\"align_call\", [True, False])\n+def test_pickle_figure_with_align_labels(align_call):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    if align_call:\n+        fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = pickle.dumps(fig)\n+        successful_pickle = True\n+    except TypeError:\n+        successful_pickle = False\n+\n+    # If align_labels() is called, check if pickling still succeeds\n+    assert successful_pickle == True\n     plt.subplot(3, 3, 3)\n     plt.pcolormesh(data)\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n \n+@pytest.mark.parametrize(\"align_call\", [True, False])\n+def test_pickle_figure_with_align_labels(align_call):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    if align_call:\n+        fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = pickle.dumps(fig)\n+        successful_pickle = True\n+    except TypeError:\n+        successful_pickle = False\n+\n+    # If align_labels() is called, check if pickling still succeeds\n+    assert successful_pickle == True\n     plt.subplot(3, 3, 4)\n     plt.imshow(data)\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n \n+@pytest.mark.parametrize(\"align_call\", [True, False])\n+def test_pickle_figure_with_align_labels(align_call):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    if align_call:\n+        fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = pickle.dumps(fig)\n+        successful_pickle = True\n+    except TypeError:\n+        successful_pickle = False\n+\n+    # If align_labels() is called, check if pickling still succeeds\n+    assert successful_pickle == True\n     plt.subplot(3, 3, 5)\n     plt.pcolor(data)\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n+\n+@pytest.mark.parametrize(\"align_call\", [True, False])\n+def test_pickle_figure_with_align_labels(align_call):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    if align_call:\n+        fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = pickle.dumps(fig)\n+        successful_pickle = True\n+    except TypeError:\n+        successful_pickle = False\n \n+    # If align_labels() is called, check if pickling still succeeds\n+    assert successful_pickle == True\n     ax = plt.subplot(3, 3, 6)\n     ax.set_xlim(0, 7)\n     ax.set_ylim(0, 9)\n     plt.streamplot(x, y, u, v)\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n \n+@pytest.mark.parametrize(\"align_call\", [True, False])\n+def test_pickle_figure_with_align_labels(align_call):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    if align_call:\n+        fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = pickle.dumps(fig)\n+        successful_pickle = True\n+    except TypeError:\n+        successful_pickle = False\n+\n+    # If align_labels() is called, check if pickling still succeeds\n+    assert successful_pickle == True\n     ax = plt.subplot(3, 3, 7)\n     ax.set_xlim(0, 7)\n     ax.set_ylim(0, 9)\n     plt.quiver(x, y, u, v)\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n+\n+@pytest.mark.parametrize(\"align_call\", [True, False])\n+def test_pickle_figure_with_align_labels(align_call):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    if align_call:\n+        fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = pickle.dumps(fig)\n+        successful_pickle = True\n+    except TypeError:\n+        successful_pickle = False\n \n+    # If align_labels() is called, check if pickling still succeeds\n+    assert successful_pickle == True\n     plt.subplot(3, 3, 8)\n     plt.scatter(x, x ** 2, label='$x^2$')\n     plt.legend(loc='upper left')\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n+\n+@pytest.mark.parametrize(\"align_call\", [True, False])\n+def test_pickle_figure_with_align_labels(align_call):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    if align_call:\n+        fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = pickle.dumps(fig)\n+        successful_pickle = True\n+    except TypeError:\n+        successful_pickle = False\n \n+    # If align_labels() is called, check if pickling still succeeds\n+    assert successful_pickle == True\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n+\n+@pytest.mark.parametrize(\"align_call\", [True, False])\n+def test_pickle_figure_with_align_labels(align_call):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    if align_call:\n+        fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = pickle.dumps(fig)\n+        successful_pickle = True\n+    except TypeError:\n+        successful_pickle = False\n \n+    # If align_labels() is called, check if pickling still succeeds\n+    assert successful_pickle == True\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n@@ -99,10 +351,66 @@ def test_complete(fig_test, fig_ref):\n     pickle.dump(fig_ref, pkl, pickle.HIGHEST_PROTOCOL)\n     loaded = pickle.loads(pkl.getbuffer())\n     loaded.canvas.draw()\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n+\n+@pytest.mark.parametrize(\"align_call\", [True, False])\n+def test_pickle_figure_with_align_labels(align_call):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    if align_call:\n+        fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = pickle.dumps(fig)\n+        successful_pickle = True\n+    except TypeError:\n+        successful_pickle = False\n \n+    # If align_labels() is called, check if pickling still succeeds\n+    assert successful_pickle == True\n     fig_test.set_size_inches(loaded.get_size_inches())\n     fig_test.figimage(loaded.canvas.renderer.buffer_rgba())\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n+\n+@pytest.mark.parametrize(\"align_call\", [True, False])\n+def test_pickle_figure_with_align_labels(align_call):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    if align_call:\n+        fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = pickle.dumps(fig)\n+        successful_pickle = True\n+    except TypeError:\n+        successful_pickle = False\n \n+    # If align_labels() is called, check if pickling still succeeds\n+    assert successful_pickle == True\n     plt.close(loaded)\n \n \n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..ac53203 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,79 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+def test_mplcursor_data_selection():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors as mpl\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    sc = ax.scatter(x, y1)\n+\n+    cursor = mpl.cursor(sc)\n+    assert cursor is not None  # Ensure cursor is created successfully\n+\n+    def on_click(event):\n+        assert event.artist == sc, \"Cursor selected wrong artist\"\n+        assert sc.contains(event.mouseevent)[0], \"Click not contained in scatter\"\n+\n+    # Mock click events to simulate user interactions\n+    cid = fig.canvas.mpl_connect('button_press_event', on_click)\n+    for i in range(len(x)):\n+        x_data, y_data = sc.get_offsets()[i]\n+        fig.canvas.draw()\n+        mouse_event = plt.backend_bases.MouseEvent(\n+            name='button_press_event',\n+            canvas=fig.canvas,\n+            x=x_data,\n+            y=y_data,\n+            button=1,\n+            # You may need to account for the display coordinate to canvas coordinate translation\n+            guiEvent=None\n+        )\n+        fig.canvas.callbacks.process('button_press_event', mouse_event)\n+\n+    fig.canvas.mpl_disconnect(cid)\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_mplcursor_data_selection():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors as mpl\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    sc = ax.scatter(x, y1)\n+\n+    cursor = mpl.cursor(sc)\n+    assert cursor is not None  # Ensure cursor is created successfully\n+\n+    def on_click(event):\n+        assert event.artist == sc, \"Cursor selected wrong artist\"\n+        assert sc.contains(event.mouseevent)[0], \"Click not contained in scatter\"\n+\n+    # Mock click events to simulate user interactions\n+    cid = fig.canvas.mpl_connect('button_press_event', on_click)\n+    for i in range(len(x)):\n+        x_data, y_data = sc.get_offsets()[i]\n+        fig.canvas.draw()\n+        mouse_event = plt.backend_bases.MouseEvent(\n+            name='button_press_event',\n+            canvas=fig.canvas,\n+            x=x_data,\n+            y=y_data,\n+            button=1,\n+            # You may need to account for the display coordinate to canvas coordinate translation\n+            guiEvent=None\n+        )\n+        fig.canvas.callbacks.process('button_press_event', mouse_event)\n+\n+    fig.canvas.mpl_disconnect(cid)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..7f37383 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,9 +9,28 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n \n+    def test_missing_data_robustness(self, df):\n+        # Simulate missing data\n+        df_with_missing = df.copy()\n+        df_with_missing.loc[5:10, 'x'] = np.nan\n+\n+        groupby = GroupBy([\"group\"])\n+        \n+        try:\n+            # Expected behavior: PolyFit should handle missing data\n+            res = PolyFit()(df_with_missing[[\"x\", \"y\"]], groupby, \"x\", {})\n+            \n+            # Drop missing data manually and compare\n+            expected_res = PolyFit()(df_with_missing[[\"x\", \"y\"]].dropna(), groupby, \"x\", {})\n+            assert_frame_equal(res, expected_res)\n+            print(\"Test passed: Missing data handled correctly.\")\n+        except Exception as e:\n+            print(f\"Test failed: {e}\")\n+\n     @pytest.fixture\n     def df(self, rng):\n \n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..2b70f03 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -83,6 +83,28 @@ class TestContinuous:\n         s = Continuous(norm=(3, 7))._setup(x, IntervalProperty())\n         assert_array_equal(s(x), [-.5, 0, 1.5])\n \n+    def test_interval_with_bools(self):\n+        # This test verifies that a boolean series can be used with Continuous and IntervalProperty\n+        x = pd.Series([True, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 0])\n+\n+    def test_color_mapping_with_bools(self):\n+        # This test aims to directly address the issue by using a boolean series in a color mapping scenario\n+        x = pd.Series([True, False, True, True, False])\n+        cmap = color_palette(\"ch:\", as_cmap=True)\n+        s = Continuous()._setup(x, Color())\n+        expected_result = cmap([1.0, 0.0, 1.0, 1.0, 0.0])[:, :3]  # Mapping True to 1.0 and False to 0.0\n+        assert_array_equal(s(x), expected_result)\n+\n+    def test_color_mapping_with_mixed_bools(self):\n+        # Testing a mixed data series including booleans\n+        x = pd.Series([True, 0, False, 1])\n+        cmap = color_palette(\"ch:\", as_cmap=True)\n+        s = Continuous()._setup(x, Color())\n+        expected_result = cmap([1.0, 0.0, 0.0, 1.0])[:, :3]\n+        assert_array_equal(s(x), expected_result)\n+\n     def test_interval_with_range_norm_and_transform(self, x):\n \n         x = pd.Series([1, 10, 100])\n",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..95f7684 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -806,6 +806,18 @@ class TestPairGrid:\n         assert len(g.figure.axes) == corner_size\n         assert g.axes[0, 0].get_ylabel() == \"x\"\n \n+    def test_pairplot_column_multiindex(self):\n+        \n+        # Create a dataframe with MultiIndex columns\n+        arrays = [[\"A\", \"A\", \"B\", \"B\"], [\"1\", \"2\", \"1\", \"2\"]]\n+        cols = pd.MultiIndex.from_arrays(arrays)\n+        df_multi_index = pd.DataFrame(np.random.rand(100, 4), columns=cols)\n+\n+        # Ensure sns.pairplot works without raising a KeyError\n+        g = ag.pairplot(df_multi_index)\n+        assert all(isinstance(var, tuple) for var in g.diag_vars)\n+        assert g.diag_vars == list(cols)\n+\n     def test_size(self):\n \n         g1 = ag.PairGrid(self.df, height=3)\n",
  "pallets__flask-4992": "",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..9ef85f8 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1655,6 +1655,37 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import RequestException, ConnectionError, Timeout\n+import pytest\n+import socket\n+from urllib3.exceptions import DecodeError\n+\n+# Additional test functions\n+\n+def test_decode_error_wrapping():\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def send(self, *args, **kwargs):\n+            raise DecodeError(\"Decoding failed\")\n+\n+    s = requests.Session()\n+    s.mount('http://', MockHTTPAdapter())\n+\n+    with pytest.raises(RequestException):\n+        s.get('http://example.com')\n+\n+def test_timeout_error_wrapping():\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def send(self, *args, **kwargs):\n+            raise socket.timeout(\"Timed out\")\n+\n+    s = requests.Session()\n+    s.mount('http://', MockHTTPAdapter())\n+\n+    with pytest.raises(Timeout):\n+        s.get('http://example.com')\n+\n def test_vendor_aliases():\n     from requests.packages import urllib3\n     from requests.packages import chardet\n@@ -1663,4 +1694,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..6938725 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -951,6 +951,7 @@ class TestRequests:\n     def test_response_is_iterable(self):\n         r = requests.Response()\n         io = StringIO.StringIO('abc')\n+        io_bytes = io.BytesIO(b'the content')\n         read_ = io.read\n \n         def read_mock(amt, decode_content=None):\n@@ -980,7 +981,35 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_iter_content_with_decode_unicode(self):\n+        \"\"\"\n+        Test that iter_content with decode_unicode=True returns unicode chunks.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = 'utf-8'\n+        \n+        # Test iter_content with decode_unicode=True\n+        chunks = r.iter_content(decode_unicode=True)\n+        for chunk in chunks:\n+            assert isinstance(chunk, str), f\"Expected str, got {type(chunk)}\"\n+\n+        # Test iter_content with decode_unicode=False\n+        r.raw = io.BytesIO(b'the content')\n+        chunks = r.iter_content(decode_unicode=False)\n+        for chunk in chunks:\n+            assert isinstance(chunk, bytes), f\"Expected bytes, got {type(chunk)}\"\n+\n+        # Test iter_content with unicode encoding\n+        r.raw = io.BytesIO('the content'.encode('utf-8'))\n+        chunks = r.iter_content(decode_unicode=True)\n+        for chunk in chunks:\n+            assert isinstance(chunk, str), f\"Expected str, got {type(chunk)}\"\n+\n+        # Test r.text to ensure it's always str and matches the decoded content\n+        r.raw = io.BytesIO('the content'.encode('utf-8'))\n+        text_output = r.text\n+        assert isinstance(text_output, str), f\"Expected str from r.text, got {type(text_output)}\"\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..8a7f376 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -382,13 +382,17 @@ repr_da = xr.DataArray(\n     },\n )\n \n+import xarray as xr\n+import numpy as np\n+import pytest\n+\n \n @pytest.mark.parametrize(\"dim\", [\"x\", \"y\", \"z\", \"month\"])\n @pytest.mark.parametrize(\"obj\", [repr_da, repr_da.to_dataset(name=\"a\")])\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +409,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..f3ff51b 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -53,7 +53,10 @@ reports = \"yes\"\n         f\"${env_var}\", file_to_lint_path\n     )\n     mock_exit.assert_called_once_with(0)\n-    check_configuration_file_reader(runner)\n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+import sys\n \n \n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..ccce19e 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,30 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_recursive_ignore_paths(self) -> None:\n+        \"\"\"Tests that ignored paths are respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Place 'ignored_subdirectory' inside the 'directory' and create a file to be ignored\n+                os.mkdir('ignored_subdirectory')\n+                with open('ignored_subdirectory/ignored_file.py', 'w') as f:\n+                    f.write('print(\"This should be ignored by pylint.\")\\n')\n+                \n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..49883ae 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,43 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_module_same_name_as_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Regression test for module named same as directory.\"\"\"\n+\n+    linter = initialized_linter\n+\n+    # Test case 1: Module 'a' exists as a file within directory 'a/'.\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    # Checking that there should not be any parse errors.\n+    assert not linter.stats.by_msg\n+\n+    # Test case 2: Ensure having __init__.py fixes resolution\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"a/__init__.py\"])\n+        linter.check([\"a\"])\n+    # Checking that there should not be any parse errors.\n+    assert not linter.stats.by_msg\n+\n+    # Test case 3: Ensure module importing another works correctly.\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        \n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\")\n+\n+        linter.check([\"r\", \"a\"])\n+    # There should be no import errors.\n+    assert not linter.stats.by_msg\n+\n+    # Test case 4: Renaming a.py should resolve parsing issues.\n+    with tempdir():\n+        create_files([\"a/c.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    # Checking that there should not be any parse errors.\n+    assert not linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +978,41 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_module_same_name_as_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Regression test for module named same as directory.\"\"\"\n+\n+    linter = initialized_linter\n+\n+    # Test case 1: Module 'a' exists as a file within directory 'a/'.\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    # Checking that there should not be any parse errors.\n+    assert not linter.stats.by_msg\n+\n+    # Test case 2: Ensure having __init__.py fixes resolution\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"a/__init__.py\"])\n+        linter.check([\"a\"])\n+    # Checking that there should not be any parse errors.\n+    assert not linter.stats.by_msg\n+\n+    # Test case 3: Ensure module importing another works correctly.\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        \n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\")\n+\n+        linter.check([\"r\", \"a\"])\n+    # There should be no import errors.\n+    assert not linter.stats.by_msg\n+\n+    # Test case 4: Renaming a.py should resolve parsing issues.\n+    with tempdir():\n+        create_files([\"a/c.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    # Checking that there should not be any parse errors.\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..772942e 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -19,6 +20,7 @@ from pylint import checkers\n from pylint.interfaces import HIGH\n from pylint.lint import PyLinter\n from pylint.message.message import Message\n+from _pytest.recwarn import WarningsRecorder\n from pylint.reporters import BaseReporter, MultiReporter\n from pylint.reporters.text import ParseableTextReporter, TextReporter\n from pylint.typing import FileItem, MessageLocationTuple\n@@ -113,7 +115,19 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n-def test_deprecation_set_output(recwarn):\n+def test_custom_braces_in_message_template(linter: PyLinter) -> None:\n+    \"\"\"Test that custom braces in message templates are handled correctly.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"CustomCategory\": \"{category}\" }}'\n+\n+    linter.open()\n+    linter.set_current_module(\"custom_braces_module\")\n+    \n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    \n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"CustomCategory\": \"convention\" }'\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..cf372d1 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -288,6 +288,12 @@ class TestImportPath:\n         fn.write_text(\"def foo(x): return 40 + x\", encoding=\"utf-8\")\n         return fn\n \n+    def test_importmode_importlib_no_double_import(self, simple_module: Path, tmp_path: Path) -> None:\n+        \"\"\"Ensure that the same instance is returned on repeated imports with importlib mode.\"\"\"\n+        module1 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        module2 = importlib.import_module(module1.__name__)\n+        assert module1 is module2, \"Modules should not be imported twice\"\n+\n     def test_importmode_importlib(self, simple_module: Path, tmp_path: Path) -> None:\n         \"\"\"`importlib` mode does not change sys.path.\"\"\"\n         module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n",
  "pytest-dev__pytest-5227": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 1ebe9d0..01f354c 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..5784390 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,50 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_repr_and_getattribute():\n+    \"\"\"Tests saferepr() with an object having broken __repr__ and __getattribute__.\"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Simulating broken getattribute\")\n+        \n+        def __repr__(self):\n+            raise RuntimeError(\"Simulating broken repr\")\n+\n+    obj = SomeClass()\n+    result = saferepr(obj)\n+    assert result.startswith(\"<[RuntimeError('Simulating broken repr'\")\n+    assert \"SomeClass object\" in result\n+\n+def test_broken_getattribute_only():\n+    \"\"\"Tests saferepr() with an object having broken __getattribute__, but valid __repr__.\"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Simulating broken getattribute\")\n+\n+        def __repr__(self):\n+            return \"Valid Repr\"\n+\n+    obj = SomeClass()\n+    result = saferepr(obj)\n+    assert result == \"Valid Repr\"\n+\n+def test_broken_repr_only():\n+    \"\"\"Tests saferepr() with an object having broken __repr__, but valid __getattribute__.\"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            return \"some value\"\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Simulating broken repr\")\n+\n+    obj = SomeClass()\n+    result = saferepr(obj)\n+    assert result.startswith(\"<[RuntimeError('Simulating broken repr'\")\n+    assert \"SomeClass object\" in result\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +197,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "",
  "pytest-dev__pytest-7373": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..0454362 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -219,6 +219,32 @@ class TestXFail:\n         assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"\n         assert not hasattr(callreport, \"wasxfail\")\n \n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_skip_location.py:3: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_skip_location.py:3: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_location_reporting(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_skip_location=\"\"\"\n+            import pytest\n+\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n     def test_xfail_run_anyway(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..01b55a2 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -9,6 +10,8 @@ from typing import List\n import attr\n \n import pytest\n+from _pytest.monkeypatch import MonkeyPatch\n+from _pytest.tmpdir import TempPathFactory\n from _pytest import pathlib\n from _pytest.config import Config\n from _pytest.pathlib import cleanup_numbered_dir\n@@ -433,7 +436,39 @@ def test_basetemp_with_read_only_files(pytester: Pytester) -> None:\n         import os\n         import stat\n \n-        def test(tmp_path):\n+def test_tmp_path_factory_handles_invalid_dir_characters(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    # Simulate a case where the username has illegal directory characters\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"contoso\\\\john_doe\")\n+\n+    # Invalidate cached base temp paths to ensure new behavior is tested\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+\n+    # Fetch the base temporary path and verify it doesn't contain invalid identifiers\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+\n+def test_tmpdir_factory_with_legal_usernames(tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"john_doe\")\n+\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-john_doe\" in str(p)\n+\n+def test_tmpdir_factory_special_chars_in_username(tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch) -> None:\n+    # Test special characters specifically (other than backward slashes), which are more common\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n             fn = tmp_path / 'foo.txt'\n             fn.write_text('hello')\n             mode = os.stat(str(fn)).st_mode\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..428bfaf 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -564,6 +564,34 @@ def test_class_weights_cv():\n                   [1.0, 1.0], [1.0, 0.0]])\n     y = [1, 1, 1, -1, -1]\n \n+    # Additional test to verify store_cv_values functionality on RidgeClassifierCV\n+    def test_ridge_classifier_cv_store_cv_values():\n+        import numpy as np\n+        from sklearn import linear_model as lm\n+        from numpy.testing import assert_array_equal\n+\n+        # Setup the data\n+        n_samples = 5\n+        x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+        y = np.array([1, 1, 1, -1, -1])\n+\n+        # Define alphas and make sure store_cv_values is set to True.\n+        alphas = [1e-1, 1e0, 1e1]\n+        n_alphas = len(alphas)\n+\n+        # Initialize the RidgeClassifierCV with store_cv_values = True.\n+        r = lm.RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+        # Fitting the model and checking the shape of the cv_values_\n+        r.fit(x, y)\n+        assert_array_equal(r.cv_values_.shape, (n_samples, n_alphas))\n+\n+        # Add a multi-target test\n+        y_multi = np.array([[1, 1, 1, -1, -1], [1, -1, 1, -1, 1], [-1, -1, 1, -1, -1]]).transpose()\n+        r.fit(x, y_multi)\n+        n_targets = y_multi.shape[1]\n+        assert_array_equal(r.cv_values_.shape, (n_samples, n_targets, n_alphas))\n+\n     reg = RidgeClassifierCV(class_weight=None, alphas=[.01, .1, 1])\n     reg.fit(X, y)\n \n",
  "scikit-learn__scikit-learn-11281": "",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..da61391 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,47 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+from sklearn.preprocessing import OneHotEncoder\n+import numpy as np\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_ignore_unknown_long_to_short_strings():\n+    train = np.array(['long_category_string', 'short']).reshape((-1, 1))\n+    test = np.array(['unknown', 'long_category_string']).reshape((-1, 1))\n+\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(train)\n+    transformed = ohe.transform(test).toarray()\n+\n+    expected = np.array([[0., 0.], [1., 0.]])\n+    assert_array_equal(transformed, expected)\n+\n+def test_one_hot_encoder_ignore_unknown_non_string_data():\n+    train = np.array([1, 2, 3]).reshape((-1, 1))\n+    test = np.array([4, 2]).reshape((-1, 1))\n+\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(train)\n+    transformed = ohe.transform(test).toarray()\n+\n+    expected = np.array([[0., 0., 0.], [0., 1., 0.]])\n+    assert_array_equal(transformed, expected)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..2c4d2ba 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..d8864e5 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,29 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n-\n-def test_make_pipeline_memory():\n+from sklearn.feature_selection import SelectKBest, f_regression\n+from sklearn.svm import SVC\n+from sklearn.pipeline import Pipeline\n+from sklearn.datasets import make_classification\n+\n+def test_pipeline_len():\n+    # Create a simple pipeline and test its length\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    assert len(pipe) == 2\n+\n+    # Add a step and ensure the length changes\n+    pipe.steps.append(('svc_second', SVC(kernel='rbf')))\n+    assert len(pipe) == 3\n+\n+    # Create a pipeline with one step and test its length\n+    pipe_single = Pipeline([('svc', clf)])\n+    assert len(pipe_single) == 1\n+\n+    # Empty pipeline should have length zero\n+    pipe_empty = Pipeline([])\n+    assert len(pipe_empty) == 0\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1091,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..ce2579b 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -13,7 +14,8 @@ import numpy as np\n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n-from sklearn.utils.testing import assert_raises_regex\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n from sklearn.utils.testing import assert_warns_message\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_greater\n@@ -295,6 +297,34 @@ def test_score_samples():\n                        clf2.score_samples([[2., 2.]]))\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start_increment_estimators():\n+    \"\"\"Test warm_start parameter and incrementing n_estimators correctly adds more trees.\"\"\"\n+\n+    rng = check_random_state(42)\n+    X = rng.randn(30, 3)\n+\n+    # Initial fit with 5 trees\n+    clf = IsolationForest(n_estimators=5, max_samples=10, random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    initial_num_trees = len(clf.estimators_)\n+\n+    # Increase the number of estimators\n+    clf.set_params(n_estimators=10)\n+    clf.fit(X)\n+\n+    # Test the number of trees has increased, but old trees remain\n+    assert len(clf.estimators_) == 10\n+    assert clf.estimators_[:initial_num_trees] == clf.estimators_[:initial_num_trees]\n+\n+    # Perform a third fit with increased number of estimators\n+    clf.set_params(n_estimators=15)\n+    clf.fit(X)\n+\n+    # Test the number of trees has increased again\n+    assert len(clf.estimators_) == 15\n+\n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..4ebf305 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,20 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+    # Additional test cases for discrete_features as array or boolean mask\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test with discrete_features as an array of indices\n+        mi_5 = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        mi_6 = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        assert_array_equal(mi_5, mi_6)\n+\n+        # Test with invalid length for boolean mask\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False, True, False])\n+\n+        # Test with invalid indices\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n+\n+        # Additional check for exception with invalid discrete_features string\n+        assert_raises(ValueError, mutual_info, X, y, discrete_features='manual')\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..c56a50e 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,8 +217,18 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_numpy_array():\n+    \"\"\"Test LogisticRegressionCV with numpy array for Cs and print_changed_only=True.\"\"\"\n \n-def test_pipeline():\n+    # Set configuration to print only changed parameters\n+    set_config(print_changed_only=True)\n+    # Create LogisticRegressionCV instance with numpy array for Cs\n+    lr_cv = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    repr_output = repr(lr_cv)\n+    # Assert that no error is raised and the repr contains the array\n+    assert \"Cs=array([0.1, 1])\" in repr_output, \"Repr output did not handle numpy array correctly.\"\n+    # Reset configuration after test\n+    set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..9c1b39d 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,9 +1,12 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n@@ -498,6 +501,25 @@ def test_transform():\n         voting='soft',\n         flatten_transform=False).fit(X, y)\n \n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(datasets.load_iris(return_X_y=True), VotingClassifier(\n+         [('lr', LogisticRegression()),\n+          ('rf', RandomForestClassifier(n_estimators=5))])),\n+     (datasets.load_boston(return_X_y=True), VotingRegressor(\n+         [('lr', LinearRegression()),\n+          ('rf', RandomForestRegressor(n_estimators=5))]))]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # check that an estimator can be set to None and still be able to fit with weights\n+    voter.fit(X, y, sample_weight=np.ones(y.shape[0] if len(y.shape) == 1 else y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape[0] if len(y.shape) == 1 else y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == (y.shape[0],)\n+\n     assert_array_equal(eclf1.transform(X).shape, (4, 6))\n     assert_array_equal(eclf2.transform(X).shape, (4, 6))\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..bd2efec 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,6 +679,25 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n+def test_sparse_fit_support_vectors_empty():\n+    from scipy import sparse\n+    from sklearn import svm\n+    import numpy as np\n+    \n+    # Regression test for handling ZeroDivisionError in _sparse_fit\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, epsilon=0.1)\n+    model.fit(X_train, y_train)\n+    \n+    # Check that support_vectors_ is empty\n+    assert model.support_.size == 0  # No support vectors\n+    # Check that dual_coef_ has a matching effect (should be empty or all zeros)\n+    assert model.dual_coef_.shape[1] == 0 or not model.dual_coef_.data.size\n+\n \n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..f4e305c 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,8 +972,21 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n @ignore_warnings\n-def test_repeated_cv_value_errors():\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 5, 10\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    expected_repr = (\n+        f\"{repeated_cv.__class__.__name__}(n_repeats={n_repeats}, \"\n+        f\"n_splits={n_splits}, random_state=None)\"\n+    )\n+    assert repr(repeated_cv) == expected_repr\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n         assert_raises(ValueError, cv, n_repeats=0)\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..a8f32bd 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -151,6 +151,17 @@ def test_affinity_propagation_predict_non_convergence():\n     y = assert_warns(ConvergenceWarning, af.predict, to_predict)\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n+def test_affinity_propagation_non_convergence_regressiontest():\n+    import numpy as np\n+    from sklearn.cluster import AffinityPropagation\n+    from numpy.testing import assert_array_equal\n+\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+    assert_array_equal(np.array([]), af.cluster_centers_indices_)\n \n def test_equal_similarities_and_preferences():\n     # Unequal distances\n",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..5bad447 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -166,6 +166,14 @@ def test_format_invariance(metric_name):\n         yield y + 1, 'strictly positive ints'\n \n     if metric_name in SUPERVISED_METRICS:\n+        # Additional test cases from the issue for mutual_info_score\n+        if metric_name == 'mutual_info_score':\n+            x1 = np.random.choice(['a', 'b'], size=20).astype(object)\n+            x2 = np.random.choice(['a', 'b'], size=20)\n+            assert metric(x1, x1) == metric(x2, x2)\n+            y_true_mixed = np.array([0, 'a', 1, 'b'], dtype=object)\n+            y_pred_mixed = ['a', 0, 'b', 1]\n+            assert metric(y_true_mixed, y_pred_mixed) is not None\n         metric = SUPERVISED_METRICS[metric_name]\n         score_1 = metric(y_true, y_pred)\n         y_true_gen = generate_formats(y_true)\n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..1cd63bd 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -668,7 +669,25 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_cv_with_isotonic_and_pandas_output():\n+    \"\"\"Test CalibratedClassifierCV with transform_output set to 'pandas'.\"\"\"\n+    X = np.arange(90).reshape(30, -1)\n+    y = np.arange(30) % 2\n+\n+    set_config(transform_output=\"pandas\")\n+\n+    clf = SGDClassifier()\n+    cal_clf = CalibratedClassifierCV(clf, method='isotonic')\n+\n+    # Fitting the calibrated classifier\n+    cal_clf.fit(X, y)\n+\n+    # No exception should be raised during prediction\n+    try:\n+        predictions = cal_clf.predict(X)\n+        assert predictions is not None\n+    except Exception as ex:\n+        pytest.fail(f\"CalibratedClassifierCV with 'pandas' output raised an exception: {ex}\")\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..4fc2a84 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2121,6 +2121,37 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n \n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+\n+    Non-regression test for the given issue.\n+    \"\"\"\n+    import pandas as pd\n+    from sklearn.compose import ColumnTransformer\n+    from sklearn.preprocessing import StandardScaler\n+    from numpy.testing import assert_array_equal\n+\n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\"])\n+\n     # The feature names are prefixed because verbose_feature_names_out=True is default\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n@@ -2128,4 +2159,4 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "diff --git a/tests/test_environment_indexentries.py b/tests/test_environment_indexentries.py\nindex 9775484..54a7c6c 100644\n--- a/tests/test_environment_indexentries.py\n+++ b/tests/test_environment_indexentries.py\n@@ -15,7 +15,35 @@ from sphinx.testing import restructuredtext\n \n \n @pytest.mark.sphinx('dummy', freshenv=True)\n+def test_duplicate_symbols_index(app):\n+    # Test for the issue of duplicate Symbols sections in the index\n+    text = (\".. index:: @mention\\n\"\n+            \".. index:: \u00a3100\\n\"\n+            \".. index:: \u2190 left-arrow\\n\"\n+            \".. index:: other\\n\")\n+    \n+    restructuredtext.parse(app, text)\n+    index = IndexEntries(app.env).create_index(app.builder)\n+\n+    # Verify that there is only one 'Symbols' section\n+    symbols_count = len([entry for entry in index if entry[0] == 'Symbols'])\n+    assert symbols_count == 1, \"There should be only one 'Symbols' section in the index.\"\n+\n+    # Verify the entries under the 'Symbols' section\n+    symbols_entries = next(entry for entry in index if entry[0] == 'Symbols')[1]\n+    expected_symbols_entries = [\n+        ('&-symbol', [[('', '#index-1')], [], None]),\n+        ('9-symbol', [[('', '#index-0')], [], None]),\n+        ('@mention', [[('', '#index-2')], [], None]),\n+        ('\u00a3100', [[('', '#index-3')], [], None]),\n+        ('\u2190 left-arrow', [[('', '#index-4')], [], None])\n+    ]\n+    \n+    assert all(entry in expected_symbols_entries for entry in symbols_entries), \\\n+        \"The entries under 'Symbols' do not match the expected entries.\"\n+\n def test_create_single_index(app):\n+    # Existing test, do not modify\n     text = (\".. index:: docutils\\n\"\n             \".. index:: Python\\n\"\n             \".. index:: pip; install\\n\"\n",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..ebb7dfc 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,8 +1,19 @@\n+\n from __future__ import annotations\n \n from typing import overload\n \n myint = int\n+String = str\n+\n+#: Sample variable with type alias\n+var: String\n+\n+class MyString:\n+    \"\"\"A sample class with a type alias attribute\"\"\"\n+\n+    #: Sample attribute with type alias\n+    var: String\n \n \n def sum(x: myint, y: myint) -> myint:\n@@ -22,4 +33,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..7c83e4b 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,30 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+from sphinx import addnodes\n+from sphinx.testing.util import SphinxTestApp, assert_node\n+from sphinx.domains.std import StandardDomain\n+from docutils import nodes\n+import restructuredtext_lint as restructuredtext\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (nodes.target, [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '-j'],\n+                                                                             [addnodes.desc_addname, '[=N]'])],\n+                                                  [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', '', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (nodes.target, [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[enable'],\n+                                                                          [addnodes.desc_addname, '=]PATTERN'])],\n+                                               [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable','[enable','cmdoption', '', 'cmdoption-arg-enable', 1) in objects\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..92e20b6 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..84a9132 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -46,6 +48,9 @@ def test_restify():\n     assert restify(Any) == \":obj:`Any`\"\n \n \n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n+\n def test_restify_type_hints_containers():\n     assert restify(List) == \":class:`List`\"\n     assert restify(Dict) == \":class:`Dict`\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..b66dcab 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1435,6 +1435,49 @@ class NumpyDocstringTest(BaseDocstringTest):\n         \"\"\")\n         self.assertEqual(expected, actual)\n \n+    def test_other_parameters_with_use_param_false(self):\n+        # Test with napoleon_use_param set to False (default behavior)\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other parameters\n+----------------\n+y : float\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:Other Parameters: **y** (*float*)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_use_param_true(self):\n+        # New test case with napoleon_use_param set to True\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other parameters\n+----------------\n+y : float\n+\"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:param y:\n+:type y: float\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n@@ -1447,6 +1490,49 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n :Parameters: **param1** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_use_param_false(self):\n+        # Test with napoleon_use_param set to False (default behavior)\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other parameters\n+----------------\n+y : float\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:Other Parameters: **y** (*float*)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_use_param_true(self):\n+        # New test case with napoleon_use_param set to True\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other parameters\n+----------------\n+y : float\n+\"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:param y:\n+:type y: float\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1455,6 +1541,49 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_use_param_false(self):\n+        # Test with napoleon_use_param set to False (default behavior)\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other parameters\n+----------------\n+y : float\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:Other Parameters: **y** (*float*)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_use_param_true(self):\n+        # New test case with napoleon_use_param set to True\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other parameters\n+----------------\n+y : float\n+\"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:param y:\n+:type y: float\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_build_epub.py b/tests/test_build_epub.py\nindex ca9b315..d51de05 100644\n--- a/tests/test_build_epub.py\n+++ b/tests/test_build_epub.py\n@@ -64,7 +64,21 @@ class EPUBElementTree:\n             yield self.__class__(child)\n \n \n-@pytest.mark.sphinx('epub', testroot='basic')\n+import pytest\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Check that viewcode pages are not generated in ePub\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Check that viewcode pages are generated in ePub\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_build_epub(app):\n     app.build()\n     assert (app.outdir / 'mimetype').read_text() == 'application/epub+zip'\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..0398b8c 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -350,6 +350,18 @@ def test_args():\n            # enclosing brackets needed on 0\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n+\n+    # Test for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 2, 3], [2, 3]]) == Permutation([0, 3, 2, 1])\n+    assert Permutation([[1, 2], [1, 3], [1, 2, 3]]) == Permutation([0, 2, 1, 3])\n+    assert Permutation([[0, 1, 2], [1, 2], [2, 3]]) == Permutation([1, 2, 3, 0])\n+    assert Permutation([[0, 1], [1, 0], [1, 0]]) == Permutation([0, 1])\n+    \n+    # Edge cases\n+    assert Permutation([[]]) == Permutation([])  # Empty permutation\n+    assert Permutation([[0]]) == Permutation([0])  # Single element cycle\n+    assert Permutation([[1, 1], [2, 3]]) == Permutation([0, 1, 3, 2])  # Cycle in self, should resolve as individual move\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..82e2b99 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -448,8 +449,27 @@ def test_sparse_matrix():\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n \n-\n-def test_transpose():\n+def test_hstack_vstack_empty_matrices():\n+    # Testing the hstack behavior with zero-row matrices\n+    sparse_matrices_hstack = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_hstack).shape == (0, 6)\n+    \n+    # Testing the vstack behavior with zero-column matrices\n+    sparse_matrices_vstack = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_vstack).shape == (6, 0)\n+    \n+    # Additional test cases with non-zero-row and non-zero-column matrices for hstack and vstack\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+    \n+    M5 = SparseMatrix.zeros(1, 0)\n+    M6 = SparseMatrix.zeros(2, 0)\n+    M7 = SparseMatrix.zeros(3, 0)\n+    M8 = SparseMatrix.zeros(4, 0)\n+    assert SparseMatrix.vstack(M5, M6, M7, M8).shape == (10, 0)\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n         SparseMatrix(((1, 3), (2, 4)))\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..4cb9bec 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -99,6 +99,17 @@ def test_core_symbol():\n             Symbol(\"_issue_3130\", commutative=False), Wild, Wild(\"x\")):\n         check(c)\n \n+import sys\n+import pickle\n+import sympy\n+\n+def test_pickle_float_expression_py2_to_py3():\n+    # Prepare a pickled expression in a format that emulates Python 2 output\n+    if sys.version_info.major == 3:\n+        x = sympy.symbols(\"x\")\n+        expr_python2_style = pickle.dumps(x + 1.0, protocol=2)\n+        unpickled_expr = pickle.loads(expr_python2_style)\n+        assert unpickled_expr == x + 1.0\n \n def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..db73803 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -279,7 +279,17 @@ def test_coth_series():\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n \n-def test_csch():\n+def test_coth_substitution_issue():\n+    from sympy import Symbol, coth, log, tan\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in test_values:\n+        try:\n+            result = e.subs(x, val)\n+            print(f\"coth(log(tan({val}))) evaluated successfully: {result}\")\n+        except Exception as ex:\n+            print(f\"An error occurred for coth(log(tan({val}))): {ex}\")\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..08c01db 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,18 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_col_insert_issue_13643():\n+    # Verify the behavior described in the issue\n+    M = eye_Shaping(6)\n+    V = Matrix([[2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]])\n+    result = M.col_insert(3, V)\n+    expected = Matrix([[1, 0, 0, 2, 2, 0, 0, 0],\n+                       [0, 1, 0, 2, 2, 0, 0, 0],\n+                       [0, 0, 1, 2, 2, 0, 0, 0],\n+                       [0, 0, 0, 2, 2, 1, 0, 0],\n+                       [0, 0, 0, 2, 2, 0, 1, 0],\n+                       [0, 0, 0, 2, 2, 0, 0, 1]])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..fbebc19 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -616,6 +616,29 @@ def test_latex_Range():\n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n \n+import pytest\n+from sympy import oo\n+from sympy import symbols, SeqFormula, latex\n+\n+def test_latex_SeqFormula_no_escaped_brackets():\n+    a, n = symbols('a n')\n+    \n+    # Test case for the originally reported issue\n+    s1 = SeqFormula(n**2, (n, 0, oo))\n+    assert latex(s1) == r'[0, 1, 4, 9, \\ldots]'\n+\n+    # Additional test cases to ensure no unwanted escaping\n+    s2 = SeqFormula(n**3 + n, (n, 0, 3))\n+    assert latex(s2) == r'[0, 2, 12, 30]'\n+\n+    s3 = SeqFormula(2*n + 1, (n, -3, 0))\n+    latex_str = r'[\\ldots, -5, -3, -1, 1]'\n+    assert latex(s3) == latex_str\n+\n+    s4 = SeqFormula(n + 1/n, (n, 1, oo))\n+    latex_str = r'[2, \\frac{3}{2}, \\frac{4}{3}, \\ldots]'\n+    assert latex(s4) == latex_str\n+\n def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..f47ca8f 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..3c3fb76 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,7 +6111,21 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty\n+n = 3\n+\n def test_MatrixSymbol_printing():\n+    # Additional test cases for issue #14814\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+\n+    # Checking pretty print results for the given issue case\n+    assert pretty(x + y) == 'x + y*'\n+    assert pretty(-x + -2*y) == '-x - 2*y*'\n+\n+    # Negative and positive matrix symbol combinations\n+    assert pretty(x - y) == 'x - y*'\n+    assert pretty(-x - y) == '-x - y*'\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..43107e6 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -719,6 +719,13 @@ def test_dummification():\n     some_expr = 2 * F(t)**2 / G(t)\n     lam = lambdify((F(t), G(t)), some_expr)\n     assert lam(3, 9) == 2\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    curlyVectorId = lambdify(curlyv, curlyv)\n+    assert (curlyVectorId([[1], [2]]) == [[1], [2]])\n+\n+    curlyVectorIdDummified = lambdify(curlyv, curlyv, dummify=True)\n+    assert (curlyVectorIdDummified([[3], [4]]) == [[3], [4]])\n+\n     lam = lambdify(sin(t), 2 * sin(t)**2)\n     assert lam(F(t)) == 2 * F(t)**2\n     #Test that \\alpha was properly dummified\n@@ -728,6 +735,8 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n+from sympy import MatrixSymbol, lambdify\n+\n def test_python_keywords():\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..c7b085c 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n@@ -28,6 +29,10 @@ def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(3, Min(x, 5))) == \"Max[3, Min[x, 5]]\"\n \n \n def test_Pow():\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..452b2de 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,20 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+    \n+    # Additional tests for other patterns and size\n+    P = MatrixSymbol(\"P\", 2, 2)\n+    Q = MatrixSymbol(\"Q\", 2, 2)\n+    assert latex((P*Q)[0, 1]) == r'\\sum_{i_{1}=0}^{1} P_{0, i_{1}} Q_{i_{1}, 1}'\n+    assert latex((P*Q)[1, 0]) == r'\\sum_{i_{1}=0}^{1} P_{1, i_{1}} Q_{i_{1}, 0}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..fc84f79 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -6,7 +7,28 @@ from sympy.utilities.pytest import raises\n \n \n def test_idiff():\n-    x = Symbol('x', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Original problem cases\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x)) / (f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Test with Eq wrapper\n+    expr = Eq(y * exp(y), x * exp(x))\n+    assert idiff(expr, y, x).simplify() == (x + 1) / (y + 1) * exp(x - y)\n+\n+    # Test additional expressions\n+    expr_f = f(x) * exp(f(x)) - x * exp(x)\n+    assert idiff(expr_f, f(x), x) == (x + 1) * exp(x - f(x)) / (f(x) + 1)\n+\n+    # With polynomial forms and higher order derivatives\n+    poly_expr = x**2 + y**2 - 1\n+    ans_poly = -x / y\n+    assert idiff(poly_expr, y, x).simplify() == ans_poly\n+    assert idiff(poly_expr, y, x, 2).simplify() == (x**2 + y**2) / y**3\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n     # the use of idiff in ellipse also provides coverage\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..89f8048 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -588,6 +588,41 @@ def test_empty_f_code():\n     assert source == \"\"\n \n \n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen, CCodeGen\n+    from sympy import MatrixSymbol\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_cython_with_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0, 2.0]]))\n+    expected = 1.0\n+    assert result == expected\n+\n def test_empty_f_code_with_header():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [], header=True)\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..3d4ebac 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -339,6 +339,16 @@ def test_intersection():\n \n     assert Intersection(S.Complexes, FiniteSet(S.ComplexInfinity)) == S.EmptySet\n \n+    # Testing the intersection with duplicates in sets\n+    x = Symbol('x')\n+    assert Intersection({1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1, 1, 2}, {1, 2}) == {1, 2}\n+    assert Intersection({1, 1, 2}, {2, 2, 3}, {3, 4}) == S.EmptySet\n+    assert Intersection({1, x}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {1}, {1}) == {1}\n+    assert Intersection({1}, {2}) == S.EmptySet\n+    assert Intersection({1, 2}, {2, 3}) == {2}\n+\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n",
  "sympy__sympy-17022": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex bd254ca..433ee54 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -350,6 +350,32 @@ def test_matrix():\n     sol = Matrix([[1, 2], [sin(3) + 4, 1]])\n     f = lambdify((x, y, z), A, modules=\"sympy\")\n     assert f(1, 2, 3) == sol\n+\n+def test_issue_identity_matrix_lambdify():\n+    import numpy as np\n+    from sympy import symbols, Identity, MatrixSymbol\n+    from sympy.utilities.pytest import skip, raises\n+\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    # Check if the lambdify correctly adds an identity matrix\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+\n+    assert (f(ma) == mr).all()\n+\n+    # Verify that lambdifying with Identity for a non-fixed size raises NotImplementedError\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n+\n+    # Check that printer outputs numpy.eye for Identity matrix\n+    from sympy.printing.numpy import NumPyPrinter\n+    p = NumPyPrinter()\n+    assert p.doprint(Identity(3)) == \"numpy.eye(3)\"\n     f = lambdify((x, y, z), (A, [A]), modules=\"sympy\")\n     assert f(1, 2, 3) == (sol, [sol])\n     J = Matrix((x, x + y)).jacobian((x, y))\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..c63b2a4 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -807,6 +807,22 @@ def test_issue_15965():\n     B = Integral(x*y, x)\n     bnew = y*Integral(x, x)\n     assert simplify(A + B) == anew + bnew\n+\n+def test_issue_17137():\n+    # Test cases from the original test patch\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n+    # Additional test cases for robustness\n+    expr1 = sin(x)**I\n+    expr2 = sin(x)**(2*I + 1)\n+    assert simplify(expr1) == expr1\n+    assert simplify(expr2) == expr2\n+\n+    expr3 = cos(x)**(I + 1)\n+    expr4 = cos(x)**(-I)\n+    assert simplify(expr3) == expr3\n+    assert simplify(expr4) == 1/cos(x)**I\n     assert simplify(A) == anew\n     assert simplify(B) == bnew\n \n@@ -814,4 +830,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..6d793aa 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -93,6 +94,11 @@ def test_point():\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n+    # Multiplication of a Point by a sympified number\n+    assert sympify(2.0) * p4 == Point(2, 2)\n+    assert p4 * sympify(2.0) == Point(2, 2)\n+    assert (p4 * sympify(2.0)).equals(sympify(2.0) * p4)\n+\n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n     # Point differences should be simplified\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..dedde3c 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,8 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import Symbol, symbols, sympify, raises\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1904,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..5fc7413 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,15 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # issue 18186\n+    from sympy import symbols\n+\n+    x, y = symbols('x y', integer=True)\n+    expected_solutions = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n+    # Test if permutations give consistent results for diophantine solutions\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == expected_solutions\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == expected_solutions\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..6f3db19 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n from sympy.codegen.ast import Declaration, Variable, float64, int64\n@@ -66,7 +67,10 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    # Test that atoms() returns objects with no args\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n+    for atom in sz.atoms():\n+        assert not hasattr(atom, 'args') or len(atom.args) == 0\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..7b82ecb 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,17 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element_to_Matrix():\n+    from sympy import Matrix, BlockDiagMatrix\n+    # Create a Matrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    # Create a BlockDiagMatrix with a single element\n+    D = BlockDiagMatrix(M)\n+    # Attempt to convert it back to a regular Matrix\n+    B = Matrix(D)\n+    # Assert the conversion did not raise an exception and is as expected\n+    assert B == M\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..f1f18db 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -83,7 +84,63 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_block_index_symbolic():\n+    # The elements should not simplify if the structure is ambiguous at compile time\n+    A1 = MatrixSymbol('A1', n, k)\n+    A2 = MatrixSymbol('A2', n, l)\n+    A3 = MatrixSymbol('A3', m, k)\n+    A4 = MatrixSymbol('A4', m, l)\n+    A = BlockMatrix([[A1, A2], [A3, A4]])\n+    assert A[0, 0] == MatrixElement(A, 0, 0)  # Cannot be A1[0, 0]\n+    assert A[n - 1, k - 1] == A1[n - 1, k - 1]\n+    assert A[n, k] == A4[0, 0]\n+    assert A[n + m - 1, 0] == MatrixElement(A, n + m - 1, 0)  # Cannot be A3[m - 1, 0]\n+    assert A[0, k + l - 1] == MatrixElement(A, 0, k + l - 1)  # Cannot be A2[0, l - 1]\n+    assert A[n + m - 1, k + l - 1] == MatrixElement(A, n + m - 1, k + l - 1)  # Cannot be A4[m - 1, l - 1]\n+    assert A[i, j] == MatrixElement(A, i, j)\n+    assert A[n + i, k + j] == MatrixElement(A, n + i, k + j)  # Cannot be A4[i, j]\n+    assert A[n - i - 1, k - j - 1] == MatrixElement(A, n - i - 1, k - j - 1)  # Cannot be A1[n - i - 1, k - j - 1]\n+\n+def test_block_index_symbolic_nonzero():\n+    # Valid simplifications with nonzero size matrices and nonnegative indices\n+    k, l, m, n = symbols('k l m n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True, nonnegative=True)\n+    A1 = MatrixSymbol('A1', n, k)\n+    A2 = MatrixSymbol('A2', n, l)\n+    A3 = MatrixSymbol('A3', m, k)\n+    A4 = MatrixSymbol('A4', m, l)\n+    A = BlockMatrix([[A1, A2], [A3, A4]])\n+    assert A[0, 0] == A1[0, 0]\n+    assert A[n + m - 1, 0] == A3[m - 1, 0]\n+    assert A[0, k + l - 1] == A2[0, l - 1]\n+    assert A[n + m - 1, k + l - 1] == A4[m - 1, l - 1]\n+    assert A[i, j] == MatrixElement(A, i, j)\n+    assert A[n + i, k + j] == A4[i, j]\n+    assert A[n - i - 1, k - j - 1] == A1[n - i - 1, k - j - 1]\n+    assert A[2 * n, 2 * k] == A4[n, k]\n+\n+def test_block_index_large():\n+    n, m, k = symbols('n m k', integer=True, positive=True)\n+    i = symbols('i', integer=True, nonnegative=True)\n+    A1 = MatrixSymbol('A1', n, n)\n+    A2 = MatrixSymbol('A2', n, m)\n+    A3 = MatrixSymbol('A3', n, k)\n+    A4 = MatrixSymbol('A4', m, n)\n+    A5 = MatrixSymbol('A5', m, m)\n+    A6 = MatrixSymbol('A6', m, k)\n+    A7 = MatrixSymbol('A7', k, n)\n+    A8 = MatrixSymbol('A8', k, m)\n+    A9 = MatrixSymbol('A9', k, k)\n+    A = BlockMatrix([[A1, A2, A3], [A4, A5, A6], [A7, A8, A9]])\n+    assert A[n + i, n + i] == MatrixElement(A, n + i, n + i)\n+\n+@XFAIL\n+def test_block_index_symbolic_fail():\n+    # Assumes symbolic matrix dimensions would be handled as nonnegative\n+    A1 = MatrixSymbol('A1', n, 1)\n+    A2 = MatrixSymbol('A2', m, 1)\n+    A = BlockMatrix([[A1], [A2]])\n+    assert A[2 * n, 0] == A2[n, 0]\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..704fb2e 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -316,8 +316,34 @@ def test_sign():\n     d = p - q\n     assert sign(d).func is sign or sign(d) == 0\n \n+def test_rewrite_sign_as_abs():\n+    from sympy import Abs, I, Piecewise, Symbol, nan, sign, simplify\n \n-def test_as_real_imag():\n+    # Test rewrite for real-valued variables\n+    x = Symbol('x', real=True)\n+    assert sign(x).rewrite(Abs) == Piecewise((0, x == 0), (x/Abs(x), True))\n+\n+    # Test rewrite for imaginary input\n+    y = Symbol('y', imaginary=True)\n+    assert sign(y * I).rewrite(Abs) == Piecewise((0, y * I == 0), (y * I / Abs(y * I), True))\n+\n+    # Test rewrite when the argument is zero\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # Test rewrite with a symbol\n+    z = Symbol('z')\n+    assert sign(z).rewrite(Abs) == Piecewise((0, z == 0), (z / Abs(z), True))\n+\n+    # Test handling of `nan`\n+    assert sign(nan).rewrite(Abs) is nan\n+\n+    # Complex numbers\n+    assert sign(2 + 3*I).rewrite(Abs) == (2 + 3*I) / Abs(2 + 3*I)\n+    assert simplify(sign(2 + 3*I).rewrite(Abs)).simplify() == simplify(sign(2 + 3*I))\n+\n+    # Ensure the original tests are consistent\n+    x = Symbol('x')\n+    assert sign(x).rewrite(Abs) == Piecewise((0, x == 0), (x / Abs(x), True))\n     n = pi**1000\n     # the special code for working out the real\n     # and complex parts of a power with Integer exponent\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..325a03c 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -514,7 +514,21 @@ def test_partitions():\n         assert i == RGS_enum(n)\n \n \n-def test_binary_partitions():\n+def test_partitions_reference_independence():\n+    from sympy.utilities.iterables import partitions\n+\n+    # Test that dictionaries returned by partitions are not references to the same object\n+    part_list = list(partitions(5))\n+    \n+    # Ensure all partitions are separate dictionary objects\n+    for i in range(len(part_list)):\n+        for j in range(i + 1, len(part_list)):\n+            assert part_list[i] is not part_list[j], \"Partitions should not share references\"\n+\n+    # Making a change to one dictionary should not affect the others\n+    part_list[0][1] = 999\n+    for i in range(1, len(part_list)):\n+        assert 999 not in part_list[i].values(), \"Modification of one partition should not affect others\"\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20212": "",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..f0ee134 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,7 +1,9 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n-                                 volume, kilometer)\n+                                 volume, kilometer, joule)\n+from sympy.physics.units.definitions import J\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n@@ -46,7 +48,28 @@ def test_convert_to():\n     assert speed_of_light.convert_to(m) == speed_of_light\n \n \n-def test_Quantity_definition():\n+def test_convert_issue():\n+    expr = joule * second\n+    \n+    # Test converting joule*second to joule.\n+    # Original test case where the conversion should result in the same expression\n+    conv = convert_to(expr, joule)\n+    assert conv == expr, f\"Expected {expr}, but got {conv}\"\n+    \n+    # Additional test cases to thoroughly cover the behavior\n+    \n+    # Convert J*s to kg*m**2/s\n+    conv1 = convert_to(J*s, kg*m**2/s)\n+    assert conv1 == kg*m**2/s, f\"Expected kg*m**2/s, but got {conv1}\"\n+    \n+    # Convert J*s to minutes.\n+    conv2 = convert_to(J*s, minute)\n+    expected_conv2 = J*minute/60\n+    assert conv2 == expected_conv2, f\"Expected {expected_conv2}, but got {conv2}\"\n+    \n+    # Convert J*s to J*s\n+    conv3 = convert_to(J*s, J*s)\n+    assert conv3 == J*s, f\"Expected J*s but got {conv3}\"\n     q = Quantity(\"s10\", abbrev=\"sabbr\")\n     q.set_global_relative_scale_factor(10, second)\n     u = Quantity(\"u\", abbrev=\"dam\")\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..e25383d 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,23 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_dict():\n+    s = Symbol('s')\n+    # Verify __dict__ behavior: in 1.7, it should have an empty __dict__\n+    assert hasattr(s, '__dict__')\n+    assert s.__dict__ == {}\n+\n+    # Ensure that __slots__ is present and functioning\n+    assert hasattr(s, '__slots__')\n+    assert s.__slots__ == ('name',)\n+\n+    # Ensure attribute error when accessing unassigned attribute\n+    with raises(AttributeError):\n+        s.non_existent_attr\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..dc5808c 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, sin, exp, Integral, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,28 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_arg_issue():\n+    # Test refining arg with positive assumption\n+    a = Symbol('a', real=True)\n+    assert refine(arg(a), Q.positive(a)) == 0\n+    assert refine(arg(a), Q.negative(a)) == pi\n+\n+    # Test integral case mentioned in the issue with refine\n+    x = Symbol('x')\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    refined_result = refine(J.doit(), Q.positive(a))\n+    expected_result = Piecewise((1/(a**2 + 1), 2*Abs(arg(a)) < pi), (J, True))\n+\n+    assert refined_result == Piecewise((1/(a**2 + 1), True))\n+\n+    # Testing more arg-related simplifications\n+    b = Symbol('b', positive=True)\n+    assert refine(arg(b), Q.positive(b)) == 0\n+    assert refine(arg(-b), Q.positive(b)) == pi\n+\n+    c = Symbol('c', imaginary=True)\n+    assert refine(arg(c), Q.positive(im(c))) == pi/2\n+    assert refine(arg(-c), Q.positive(im(c))) == 3*pi/2\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..b0e1ef7 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -8,6 +9,41 @@ from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n+def test_issue_21373():\n+    from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+    # testing the issue with real symbols x and y, and real z\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    \n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr.subs({1: 1.0}) == expr\n+    \n+    expr = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr.subs({1: 1.0}) == expr\n+    \n+    expr = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr.subs({1: 1.0}) == expr\n+\n+    # testing the error does not occur without real=True\n+    x, y, z = symbols('x y z')\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr\n+    \n+    expr = exp(cosh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr\n+    \n+    expr = exp(tanh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr\n+\n+    # testing variations with removal of division\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr.subs({1: 1.0}) == expr\n+    \n+    # testing variations with removal of exp\n+    expr = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr.subs({1: 1.0}) == expr\n+\n+# existing test cases\n def test_subs():\n     n3 = Rational(3)\n     e = x\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..931444b 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -48,4 +49,10 @@ def test_Matrix_kind():\n def test_MatMul_kind():\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n-    assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n+    assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n+\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n+    assert Derivative(A, noncomm_x).kind is MatrixKind(UndefinedKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..2135a5a 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -105,8 +105,8 @@ def test_monomials():\n \n     raises(ValueError, lambda: set(itermonomials([x, y], [0, 1], [1, 2])))\n     raises(ValueError, lambda: set(itermonomials([x, y, z], [0, 0, 3], [0, 1, 2])))\n-\n-    assert set(itermonomials([x], [0])) == {S.One}\n+    from sympy import symbols, S\n+    from sympy.polys.monomials import itermonomials\n     assert set(itermonomials([x], [1])) == {S.One, x}\n     assert set(itermonomials([x], [2])) == {S.One, x, x**2}\n     assert set(itermonomials([x], [3])) == {S.One, x, x**2, x**3}\n@@ -131,7 +131,29 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n-    i, j, k = symbols('i j k', commutative=False)\n+    x, y, z, x1, x2, x3 = symbols('x y z x1 x2 x3', commutative=True)\n+\n+    # Test case derived from the issue description.\n+    def test_issue_with_min_degrees():\n+        # Given example in the issue text\n+        monomials = set(itermonomials([x1, x2, x3], 3, 3))\n+        expected_monomials_issue = {\n+            x1**3, x2**3, x3**3, x1*x2**2, x1**2*x3, x2*x3**2, \n+            x1*x3**2, x2**2*x3, x1*x2*x3, x1**2*x2, x2*x3**2\n+        }\n+        assert monomials == expected_monomials_issue\n+\n+        # Additional test cases for thorough coverage\n+        monomials = set(itermonomials([x, y], 2, 2))\n+        expected_monomials = {x**2, x*y, y**2, x**2*y, x*y**2}\n+        assert monomials == expected_monomials\n+\n+        monomials = set(itermonomials([x, y, z], 3, 2))\n+        expected_monomials_3_2 = {\n+            x**3, x**2*y, x*y**2, x*z**2, x*y*z, x**2*z, x*y*z**2,\n+            y**3, y**2*z, y*z**2, x*y**2*z, x*y**2*z\n+        }\n+        assert monomials == expected_monomials_3_2\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n     assert set(itermonomials([i, j, k], [0, 1, 0])) == {1, j}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..38c2342 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -48,6 +49,13 @@ def test_solve_poly_system():\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n+    \n+    # Additional test cases to verify NotImplementedError for infinite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system([x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system([y - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system([x*y - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system([x**2 - 1, y**2 - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system([x**2 + y**2 - 1], (x, y)))\n \n \n def test_solve_biquadratic():\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..097ba51 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,6 +11,7 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n \n \n def test_point():\n@@ -440,7 +442,26 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Verify that no error is raised with evaluate(False)\n+    with evaluate(False):\n+        p = Point2D(Integer(1), Integer(2))\n+        assert p == Point2D(1, 2)\n+\n+    # Verify normal behavior without evaluate(False)\n+    p_normal = Point2D(1, 2)\n+    assert p_normal == Point2D(1, 2)\n+\n+    # Test with evaluate=False outside the context manager\n+    p_eval_false = Point2D(1, 2, evaluate=False)\n+    assert p_eval_false == Point2D(1, 2, evaluate=False)\n+\n+    # Ensure no imaginary components are present\n+    with raises(ValueError, match=\"Imaginary coordinates are not permitted.\"):\n+        Point2D(1 + I, 2)\n+\n+    # Verify the Point2D initialization does not throw with valid integers\n+    assert Point2D(1, 2).args == (1, 2)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..2b60c35 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,6 +347,30 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n+def test_matrixsymbol_indexing_issue():\n+    from sympy import MatrixSymbol, cse, symbols\n+    \n+    A = MatrixSymbol(\"A\", 4, 4)\n+    B = MatrixSymbol(\"B\", 4, 4)\n+    \n+    a_00, a_01, a_10, a_11 = symbols('a_00 a_01 a_10 a_11')\n+    b_00, b_01, b_10, b_11 = symbols('b_00 b_01 b_10 b_11')\n+    \n+    expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0]\n+    replacements, simplified = cse(expr)\n+    \n+    # There should be no unnecessary replacements\n+    assert replacements == []\n+    assert simplified == [A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0]]\n+\n+    # Test for another combination with supposed common subexpressions\n+    expr2 = A[0, 0] * B[0, 0] + A[0, 0] * B[0, 1]\n+    replacements2, simplified2 = cse(expr2)\n+    \n+    # Expect a single common subexpression to be factored out\n+    assert replacements2 == [(symbols('x0'), A[0, 0] * B[0, 0])]\n+    assert simplified2 == [symbols('x0') + A[0, 0] * B[0, 1]]\n+\n def test_cse_MatrixExpr():\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..65330ba 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,8 +38,12 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n-\n-def test_issue_18361():\n+def test_issue_17851():\n+    for ArrayType in array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n     C = Array([(x + x**2)/(x*sin(y)**2 + x*cos(y)**2), 2*sin(x)*cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..bca891b 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,37 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+from sympy import symbols, Dummy\n+\n+def test_lambdify_single_element_tuple():\n+    # This tests the specific issue where a single-element tuple output was handled incorrectly.\n+    f = lambdify([], (1,))\n+    assert f() == (1,)\n+    # Check source code to ensure tuple nature is preserved with comma\n+    source_code = inspect.getsource(f)\n+    assert \"return (1,)\" in source_code\n+\n+def test_lambdify_tuple_two_elements():\n+    f = lambdify([], (1, 2))\n+    assert f() == (1, 2)\n+    source_code = inspect.getsource(f)\n+    assert \"return (1, 2)\" in source_code\n+\n+def test_lambdify_empty_tuple():\n+    f = lambdify([], ())\n+    assert f() == ()\n+    source_code = inspect.getsource(f)\n+    assert \"return ()\" in source_code\n+\n+def test_lambdify_with_expression():\n+    x = symbols('x')\n+    f = lambdify(x, (x+1,))\n+    assert f(2) == (3,)\n+    source_code = inspect.getsource(f)\n+    assert \"return (x + 1,)\" in source_code\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..3be7b7d 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,12 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy.core.numbers import E\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity\n+from sympy.physics.units.systems.si import SI\n+from sympy import exp\n+from sympy.physics.units import units\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..3f26014 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,13 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_issue_24142():\n+    # Re-testing the issue with original examples\n+    assert TP(2*U - V, U + V).expand(tensorproduct=True) == \\\n+        2*TP(U, U) + 2*TP(U, V) - TP(V, U) - TP(V, V)\n+    # Expanding examples with scalar factors in between\n+    assert TP(3*(A + B), 2*(B - A)).expand(tensorproduct=True) == \\\n+        6*TP(A, B) - 6*TP(A, A) + 6*TP(B, B) - 6*TP(B, A)\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..915adf3 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -13,7 +14,9 @@ from sympy.integrals.integrals import integrate\n from sympy.physics.units import (amount_of_substance, area, convert_to, find_unit,\n                                  volume, kilometer, joule, molar_gas_constant,\n                                  vacuum_permittivity, elementary_charge, volt,\n-                                 ohm)\n+                                 ohm, Quantity, velocity, acceleration, time,\n+                                 second, meter)\n+from sympy.physics.units.systems.si import SI\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n@@ -574,7 +577,47 @@ def test_prefixed_property():\n     assert kilogram.is_prefixed\n     assert pebibyte.is_prefixed\n \n-def test_physics_constant():\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1 * T1 + V1\n+    # Checking the fix for addition of quantities with equivalent dimensions\n+    # Should not raise a ValueError\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_with_negative_scale():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr = A1 * T1 + V1\n+    # We should be able to handle negative scale factors correctly\n+    # Should not raise a ValueError\n+    SI._collect_factor_and_dimension(expr)\n+\n+    # Double-checking correct scaling by checking the result\n+    expected_factor = (-9.8) * 5 + 2  # (-9.8 * 5) + 2 m/s\n+    factor, dimension = SI._collect_factor_and_dimension(expr)\n+    assert factor == expected_factor\n+    assert dimension.equals(velocity)\n     from sympy.physics.units import definitions\n \n     for name in dir(definitions):\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..5961e30 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, milli, W, volt\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,15 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Test for milli prefix with various units\n+    assert milli * W == W / 1000   # 1 milliwatt = 1 watt / 1000\n+    assert milli * volt == volt / 1000  # 1 millivolt = 1 volt / 1000\n+    assert W * milli == W / 1000   # Commutative property should hold\n+\n+    # Test with other prefixes as a sanity check\n+    assert kibi * W == W * 1024    # 1 kibibit = 1024 bits\n+    assert kilo * meter == 1000 * meter # 1 kilometer = 1000 meters\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..763b7c6 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -6,6 +6,18 @@ should be a list or tuple of field names. This tells Django how to order\n ``QuerySet`` results.\n \n If a field name in ``ordering`` starts with a hyphen, that field will be\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n ordered in descending order. Otherwise, it'll be ordered in ascending order.\n The special-case field name ``\"?\"`` specifies random order.\n \n",
  "django__django-13265": "",
  "django__django-14534": "",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..630f4ff 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -633,6 +633,39 @@ def test_colorbar_format(fmt):\n     fig.canvas.draw()\n     assert cbar.ax.yaxis.get_ticklabels()[4].get_text() == '2.00e+02'\n \n+def test_colorbar_update_after_changing_norm():\n+    import matplotlib.pyplot as plt\n+    from matplotlib.colors import LogNorm\n+    import numpy as np\n+\n+    # Create data for the plot\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    # Set up the figure, axis and plot\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Change the norm of the plot and try to update colorbar\n+    plot.set_norm(LogNorm())\n+    \n+    # Handle the update using the current recommendation\n+    cb.update_normal(plot)\n+    fig.canvas.draw()  # Ensure the rendering updates\n+\n+    # Test to check if update_normal() has an effect\n+    assert cb.ax.yaxis.get_scale() == 'log', \"Colorbar scale should be log after updating norm\"\n+\n+    # Now let's test if update_bruteforce works without errors\n+    try:\n+        cb.update_bruteforce(plot)\n+    except ZeroDivisionError:\n+        assert False, \"update_bruteforce() should not cause ZeroDivisionError\"\n+    except Exception as e:\n+        assert False, f\"An unexpected exception occurred: {e}\"\n+    fig.canvas.draw()\n+    assert cb.ax.yaxis.get_scale() == 'log', \"Colorbar scale should remain log after bruteforce update\"\n+\n     # but if we change the norm:\n     im.set_norm(LogNorm(vmin=0.1, vmax=10))\n     fig.canvas.draw()\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..3cd1d54 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3020,6 +3020,13 @@ class TestDataset:\n \n         y = D.to_stacked_array(\"features\", sample_dims, name=name)\n         assert y.name == name\n+    def test_single_dim_to_stacked_array_unstacked_roundtrip(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n \n     def test_to_stacked_array_dtype_dims(self):\n         # make a two dimensional dataset\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..ef65617 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -258,5 +258,38 @@ def test_set_output_mro():\n \n     class C(A, B):\n         pass\n-\n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output.\"\"\"\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+    import pandas as pd\n+    import numpy as np\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame()\n+\n+    # Test data\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Check with default configuration\n+    set_config(transform_output=\"default\")\n+    union_default = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    result_default = union_default.fit_transform(data)\n+    assert isinstance(result_default, np.ndarray)\n+\n+    # Check with pandas configuration\n+    set_config(transform_output=\"pandas\")\n+    union_pandas = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    result_pandas = union_pandas.fit_transform(data)\n+    assert isinstance(result_pandas, pd.DataFrame)\n+    assert result_pandas.equals(data[\"value\"].groupby(data[\"date\"]).sum().to_frame())\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..f99ea9c 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -132,7 +132,38 @@ def test_decorators(app):\n     ]\n \n \n+import sys\n+import pytest\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is required for annotation-only.')\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_inherited_member(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only_inheritance.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_only_inheritance',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_only_inheritance',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_only_inheritance',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is required for annotation-only.')\n def test_slots_attribute(app):\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'class', 'target.slots.Bar', options)\n",
  "sympy__sympy-15346": "",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..9b52329 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4344,8 +4344,38 @@ def test_pretty_no_wrap_line():\n def test_settings():\n     raises(TypeError, lambda: pretty(S(4), method=\"garbage\"))\n \n+from sympy import Sum, oo\n+from sympy.abc import x\n \n-def test_pretty_sum():\n+def test_sum_plus_constant_alignment():\n+    # Test to check the alignment of the Sum with an added constant\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ascii_str = \\\n+\"\"\"\\\n+  oo     \\n\\\n+ ___     \\n\\\n+ \\\\ `     \\n\\\n+  \\\\    x \\n\\\n+   )  + 3\\n\\\n+  /      \\n\\\n+ /__,    \\n\\\n+x = 1    \\\n+\"\"\"\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e      \\n\\\n+ ___     \\n\\\n+ \u2572       \\n\\\n+  \u2572    x \\n\\\n+   \u2572  + 3\\n\\\n+   \u2571     \\n\\\n+  \u2571      \\n\\\n+ \u2571       \\n\\\n+ \u203e\u203e\u203e     \\n\\\n+x = 1    \\\n+\"\"\")\n+    assert pretty(expr) == ascii_str\n+    assert upretty(expr) == ucode_str\n     from sympy.abc import x, a, b, k, m, n\n \n     expr = Sum(k**k, (k, 0, n))\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..c8a9c5c 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -704,8 +704,23 @@ def test_uniq():\n     assert list(uniq([2, 3, 2, 4, [2], [1], [2], [3], [1]])) == \\\n         [2, 3, 4, [2], [1], [3]]\n \n-\n-def test_kbins():\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # New test cases\n+    f = ['a', 'b', 'c', 'a']\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    f = ['x', 'y', 'x', 'z']\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+\n+    f = [1, 2, 3, 4, 5]\n+    raises(RuntimeError, lambda: [f.append(i) for i in uniq(f)])  # Modifying by adding\n+\n+    f = [1, 1, 2, 3, 4]\n+    raises(RuntimeError, lambda: [f.clear() for i in uniq(f)])  # Modifying by clearing\n     assert len(list(kbins('1123', 2, ordered=1))) == 24\n     assert len(list(kbins('1123', 2, ordered=11))) == 36\n     assert len(list(kbins('1123', 2, ordered=10))) == 10\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..8d65417 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,6 +8,7 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -16,6 +18,49 @@ from .models import (\n \n class LookupTests(TestCase):\n \n+    def test_exact_query_rhs_with_selected_columns(self):\n+        # Original test\n+        newest_author = Author.objects.create(name='Author 2')\n+        authors_max_ids = Author.objects.filter(\n+            name='Author 2',\n+        ).values(\n+            'name',\n+        ).annotate(\n+            max_id=Max('id'),\n+        ).values('max_id')\n+        authors = Author.objects.filter(id=authors_max_ids[:1])\n+        self.assertEqual(authors.get(), newest_author)\n+\n+    def test_filter_with_group_by_not_overridden(self):\n+        # New test to verify GROUP BY is not overridden\n+        another_author = Author.objects.create(name='Unique Author')\n+        max_ids_grouped_by_name = Author.objects.filter(\n+            name='Unique Author',\n+        ).values(\n+            'name'\n+        ).annotate(\n+            max_id=Max('id')\n+        ).values('max_id')\n+        \n+        result_queryset = Author.objects.filter(id=max_ids_grouped_by_name[:1])\n+        self.assertEqual(result_queryset.count(), 1)\n+        self.assertEqual(result_queryset.get(), another_author)\n+\n+    def test_group_by_composite_key(self):\n+        # Additional test for GROUP BY with a composite key\n+        author_1 = Author.objects.create(name='Composite Author', alias='Alias 1')\n+        max_ids_composite = Author.objects.filter(\n+            name='Composite Author', alias='Alias 1'\n+        ).values(\n+            'name', 'alias'\n+        ).annotate(\n+            max_id=Max('id')\n+        ).values('max_id')\n+        \n+        authors_composite_result = Author.objects.filter(id=max_ids_composite[:1])\n+        self.assertEqual(authors_composite_result.count(), 1)\n+        self.assertEqual(authors_composite_result.get(), author_1)\n+\n     @classmethod\n     def setUpTestData(cls):\n         # Create a few Authors.\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..fea4925 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -537,6 +537,30 @@ class BasicExpressionsTests(TestCase):\n             qs.query.annotations['small_company'],\n         )\n \n+    def test_subquery_sql(self):\n+        from django.db import connection\n+        from .models import Employee\n+\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        \n+        # Verify that the subquery attribute is correctly set\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        \n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        # Check if the SQL syntax starts with \"(SELECT \" and ends with \")\"\n+        self.assertTrue(sql.startswith('(SELECT '))\n+        self.assertTrue(sql.endswith(')'))\n+\n+        # Test without setting subquery manually\n+        employees_subquery_no_flag = Subquery(employees)\n+        compiler = employees_subquery_no_flag.query.get_compiler(connection=connection)\n+        sql_no_flag, _ = employees_subquery_no_flag.as_sql(compiler, connection)\n+        self.assertTrue(sql_no_flag.startswith('(SELECT '))\n+        self.assertTrue(sql_no_flag.endswith(')'))\n+\n     def test_in_subquery(self):\n         # This is a contrived test (and you really wouldn't write this query),\n         # but it is a succinct way to test the __in=Subquery() construct.\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..e598fe7 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -163,4 +164,21 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_wrong_select_related(self):\n+        \"\"\"Original failing test to catch the multi-level related object issue.\"\"\"\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+            ).select_related('tournament_pool'))\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..4abb089 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -6,12 +7,27 @@ import platform\n from threading import Timer\n from types import SimpleNamespace\n import warnings\n-\n import numpy as np\n import pytest\n+\n+def test_dpi_stability_after_unpickle():\n+    \"\"\"Test to ensure DPI remains stable after pickling and unpickling, especially on M1 Macs.\"\"\"\n+    \n+    fig = plt.figure(dpi=200)\n+    initial_dpi = fig.dpi\n+    \n+    for _ in range(10):\n+        # Pickle and unpickle the figure\n+        pickled_fig = pickle.dumps(fig)\n+        fig = pickle.loads(pickled_fig)\n+        \n+        # Assert that the DPI remains consistent\n+        assert fig.dpi == initial_dpi\n from PIL import Image\n \n import matplotlib as mpl\n+import pickle\n+import matplotlib.pyplot as plt\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..7653ca2 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1623,7 +1624,19 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_hue_map(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+        \n+        # Attempt to create a PairGrid and map scatterplot with hue\n+        try:\n+            g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            plt.close(g.fig)  # Close the figure after creating it\n+            assert True, \"PairGrid with hue mapped directly works without error.\"\n+        except Exception as e:\n+            assert False, f\"PairGrid with hue mapped directly raised an error: {e}\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..44b6d64 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,6 +323,17 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n+import pytest\n+\n+def test_raises_behavior():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+        \n+    # Use str(excinfo) and verify it does not contain the exception message directly\n+    assert str(excinfo) != \"A\\nB\\nC\"\n+    # Ensure the full message is obtained via excinfo.value\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n def test_excinfo_exconly():\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..182b28a 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -404,6 +404,16 @@ class TestCustomConftests:\n         testdir.makepyfile(\"def test_x(): pass\")\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # Additional Test: Short option for --collect-only\n+        result = testdir.runpytest(\"--co\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+        \n+        # Additional Test: Short option for --collect-only\n+        result = testdir.runpytest(\"--co\")\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n@@ -434,6 +444,16 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # Additional Test: Short option for --collect-only\n+        result = testdir.runpytest(\"--co\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+        \n+        # Additional Test: Short option for --collect-only\n+        result = testdir.runpytest(\"--co\")\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..f3619c2 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -84,7 +84,18 @@ def test_Identity():\n     assert In.inverse() == In\n     assert In.conjugate() == In\n \n-def test_Identity_doit():\n+from sympy import Symbol, symbols, Sum, Q as Query, Identity, assuming, refine, ask\n+\n+def test_identity_matrix_sum_elements():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+\n+    with assuming(Query.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+    # Test the total sum of the elements of the identity matrix\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..c594db5 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,13 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_fraction_parsing_issue():\n+    from sympy.parsing.latex import parse_latex\n+    # The problematic expression and the expected result\n+    latex_expression = r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\"\n+    # Expected: ((a**3 + b)/c)/(1/(c**2))\n+    expected = ((a**3 + b)/c)/(1/(c**2))\n+    assert parse_latex(latex_expression) == expected\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}