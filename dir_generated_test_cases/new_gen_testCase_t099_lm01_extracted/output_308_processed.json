{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..7276403 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -129,7 +129,34 @@ def test_arith_oper():\n         _arith_oper(sh1, map1)\n \n \n-@pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n+import numpy as np\n+import pytest\n+from astropy.modeling.separable import separability_matrix\n+from astropy.modeling import models\n+\n+# New test cases for verifying issue related to nested CompoundModels\n+def test_separability_matrix_complex_nested():\n+    # Simple compound model (control test)\n+    cm_simple = models.Linear1D(10) & models.Linear1D(5)\n+    expected_simple = np.array([[ True, False],\n+                                [False,  True]])\n+    assert np.all(separability_matrix(cm_simple) == expected_simple)\n+\n+    # More complex compound model\n+    cm_complex = models.Pix2Sky_TAN() & models.Linear1D(10) & models.Linear1D(5)\n+    expected_complex = np.array([[ True,  True, False, False],\n+                                 [ True,  True, False, False],\n+                                 [False, False,  True, False],\n+                                 [False, False, False,  True]])\n+    assert np.all(separability_matrix(cm_complex) == expected_complex)\n+    \n+    # Nested compound model showing the issue\n+    cm_nested = models.Pix2Sky_TAN() & cm_simple\n+    expected_nested = np.array([[ True,  True, False, False],\n+                                [ True,  True, False, False],\n+                                [False, False,  True, False],\n+                                [False, False, False,  True]]) # modified expectation assuming the issue is fixed\n+    assert np.all(separability_matrix(cm_nested) == expected_nested)\n def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n",
  "astropy__astropy-14182": "",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..104093e 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -33,8 +33,39 @@ def test_get_tables_from_qdp_file(tmp_path):\n \n     with open(path, \"w\") as fp:\n         print(example_qdp, file=fp)\n+import pytest\n+import numpy as np\n+from astropy.utils.exceptions import AstropyUserWarning\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_case_insensitive_read(tmp_path, lowercase):\n+    # Use the example provided in the issue description\n+    example_qdp = \"READ SERR 1 2\\n1 0.5 1 0.5\\n\"\n+\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"test_case_insensitive.qdp\")\n+\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+\n+    table = _read_table_qdp(path)\n \n-    table0 = _read_table_qdp(fp.name, names=[\"MJD\", \"Rate\"], table_id=0)\n+    assert np.allclose(table['col1'], [1])\n+    assert np.allclose(table['col2'], [0.5])\n+    assert np.allclose(table['col3'], [1])\n+    assert np.allclose(table['col4'], [0.5])\n     assert table0.meta[\"initial_comments\"][0].startswith(\"Swift\")\n     assert table0.meta[\"comments\"][0].startswith(\"WT -- hard data\")\n     table2 = _read_table_qdp(fp.name, names=[\"MJD\", \"Rate\"], table_id=2)\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..21bc2d0 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,43 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..3182c0c 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,23 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_d_exponent_handling(self):\n+        # Test that a float column with the 'D' format correctly replaces 'E' \n+        # with 'D' in the output values.\n+        r1 = np.array([11.0, 12.0], dtype=np.float64)\n+        c2 = fits.Column(name='def', format='D', array=r1, bscale=2.3, bzero=0.6)\n+        hdu = fits.TableHDU.from_columns([c2])\n+        hdu.writeto(self.temp('test_d_exp.fits'), overwrite=True)\n+\n+        # Read the file directly to check if the 'E' is replaced by 'D'\n+        with open(self.temp('test_d_exp.fits')) as f:\n+            file_content = f.read()\n+            assert '2.5300000000000000D+01' in file_content or '4.9565217391304348D+01' in file_content  # scaled\n+\n+        with fits.open(self.temp('test_d_exp.fits')) as hdul:\n+            # Check data equality\n+            assert comparerecords(hdu.data, hdul[1].data)\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..5e2828e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -367,7 +367,28 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 1)\n \n-    def test_ticket_18375_chained_filters(self):\n+    def test_order_by_multiline_rawsql(self):\n+        # Create test data\n+        accepted_company = Company.objects.create(name='AcceptedCo', status='accepted', accepted_datetime='2023-01-01', preferred_datetime='2023-02-01', created_at='2023-03-01')\n+        verification_company = Company.objects.create(name='VerificationCo', status='verification', accepted_datetime='2023-01-02', preferred_datetime='2023-02-02', created_at='2023-03-02')\n+        other_company = Company.objects.create(name='OtherCo', status='other', accepted_datetime='2023-01-03', preferred_datetime='2023-02-03', created_at='2023-03-03')\n+        \n+        qs = Company.objects.all().order_by(\n+            RawSQL('''\n+                CASE WHEN status IN ('accepted', 'verification')\n+                     THEN 2 ELSE 1 END''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN status IN ('accepted', 'verification')\n+                     THEN (accepted_datetime, preferred_datetime)\n+                     ELSE NULL END''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN status NOT IN ('accepted', 'verification')\n+                     THEN (accepted_datetime, preferred_datetime, created_at)\n+                     ELSE NULL END''', []).desc()\n+        )\n+        \n+        # Test that all companies are returned and ordering is correct\n+        self.assertEqual(list(qs), [verification_company, accepted_company, other_company])\n         # F() expressions do not reuse joins from previous filter.\n         qs = Employee.objects.filter(\n             company_ceo_set__num_employees=F('pk')\n",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..95c4259 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"trailingnewline\\n\",  # This username ends with a newline character\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..1b5aeda 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -366,7 +366,28 @@ class HttpResponseTests(unittest.TestCase):\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n-    def test_iter_content(self):\n+    def test_memoryview_content(self):\n+        # Test using a memoryview directly\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+        # Test assigning memoryview to the content property\n+        r = HttpResponse()\n+        r.content = memoryview(b'memoryview via property')\n+        self.assertEqual(r.content, b'memoryview via property')\n+\n+        # Test a scenario with empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+        # Test using a memoryview from a bytearray\n+        r = HttpResponse(memoryview(bytearray(b'bytearray content')))\n+        self.assertEqual(r.content, b'bytearray content')\n+\n+        # Test read content from file-like object returning memoryview\n+        buffer = BytesIO(b'file-like memoryview')\n+        r = HttpResponse(memoryview(buffer.read()))\n+        self.assertEqual(r.content, b'file-like memoryview')\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n \n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a4d2853 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..07348ee 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,8 +1,10 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n+from django.db.utils import IntegrityError\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n@@ -140,7 +142,45 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_duplicate_permission_error(self):\n+        \"\"\"\n+        Test that running the migration raises an error if duplicate permissions exist.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        duplicate_permission = Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        \n+        try:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        except IntegrityError as e:\n+            self.assertIn(\"duplicate key value violates unique constraint\", str(e))\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..284f4e3 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -17,7 +17,10 @@ from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n-from django.utils.autoreload import WatchmanUnavailable\n+from django.utils.autoreload import WatchmanUnavailable, StatReloader\n+import shutil\n+import os\n+import sys\n \n from .utils import on_macos_with_hfs\n \n@@ -72,7 +75,29 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n         self.assertFileFound(filename.absolute())\n \n-    def test_check_errors(self):\n+    def test_manage_py_is_tracked(self):\n+        \"\"\"\n+        Verify that changes to manage.py are tracked by StatReloader.\n+        Simulate an edit to manage.py and confirm if the change is detected.\n+        \"\"\"\n+        reloader = StatReloader()\n+        manage_py_path = Path(__file__).parent / \"manage.py\"\n+        \n+        # Create a temporary manage.py for testing\n+        with self.temporary_file('manage.py') as temp_manage_py:\n+            temp_manage_py.write_text(\"print('Initial content')\\n\")\n+            \n+            # Track the initial state\n+            initial_files = set(reloader.extra_files)\n+            reloader.watch_file(temp_manage_py)\n+            self.assertIn(temp_manage_py, autoreload.iter_all_python_module_files())\n+\n+            # Simulate modification\n+            temp_manage_py.write_text(\"print('Modified content')\\n\")\n+            \n+            # Check if the change is detected.\n+            self.assertNotEqual(initial_files, set(reloader.extra_files))\n+            self.assertIn(temp_manage_py, autoreload.iter_all_python_module_files())\n         \"\"\"\n         When a file containing an error is imported in a function wrapped by\n         check_errors(), gen_filenames() returns it.\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..b2aef94 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -134,6 +134,32 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n     def test_main_module_is_resolved(self):\n         main_module = sys.modules['__main__']\n+\n+    def test_path_with_embedded_null_bytes(self):\n+        for path in (\n+            'embedded_null_byte\\\\x00.py',\n+            'di\\\\x00rectory/embedded_null_byte.py',\n+            '/some/\\\\x00path/file.py',\n+            'normal_path.py',\n+        ):\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+\n+    def test_iter_modules_and_files_with_valid_and_invalid_paths(self):\n+        # Test paths including valid and invalid (containing null byte)\n+        modules = []\n+        extra_files = frozenset([\n+            'valid_path.py',\n+            'invalid\\\\x00path.py',\n+        ])\n+        expected_result = frozenset([\n+            Path('valid_path.py').resolve().absolute(),\n+        ])\n+        result = autoreload.iter_modules_and_files(modules, extra_files)\n+        self.assertEqual(result, expected_result)\n         self.assertFileFound(Path(main_module.__file__))\n \n     def test_main_module_without_file_is_not_resolved(self):\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..91ea9fc 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -18,7 +18,8 @@ from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n from django.utils.functional import SimpleLazyObject\n-from django.utils.safestring import mark_safe\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n     Path as DebugPath, cleanse_setting, default_urlconf,\n@@ -242,7 +243,28 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n-    def test_handle_db_exception(self):\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that an Http404 raised within a path converter's to_python method\n+        results in a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_nonexistent_converter_raises_404(self):\n+        \"\"\"\n+        Test a scenario where the converter raises Http404 for a nonexistent\n+        item and check if a technical 404 page is shown when DEBUG is True.\n+        \"\"\"\n+        class NonExistentItemConverter(IntConverter):\n+            def to_python(self, value):\n+                raise Http404(\"Item does not exist\")\n+\n+        with mock.patch('django.urls.register_converter') as mock_register_converter:\n+            mock_register_converter(NonExistentItemConverter, 'nonexistent')\n+            response = self.client.get('/item/9999/')\n+            self.assertContains(response, \"Item does not exist\", status_code=404)\n         \"\"\"\n         Ensure the debug view works when a database exception is raised by\n         performing an invalid query and passing the exception to the debug view.\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..549a9e7 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -82,6 +82,33 @@ class BinaryFieldTests(SimpleTestCase):\n \n \n @isolate_apps('invalid_models_tests')\n+class TestMaxLengthChoiceConstraint(TestCase):\n+\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n class CharFieldTests(SimpleTestCase):\n \n     def test_valid_field(self):\n@@ -163,7 +190,27 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_iterable_choices(self):\n+    def test_valid_max_length_with_choices(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=5, choices=[\n+                    ('A', 'Apple'), ('BB', 'Banana'), ('CCC', 'Cherry'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n+    def test_excessive_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=20, choices=[\n+                    ('Short', 'Short'), ('Medium', 'Mediumish'), ('Long', 'VeryLongName'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n         class Model(models.Model):\n             field = models.CharField(max_length=10, choices='bad')\n \n@@ -354,6 +401,33 @@ class CharFieldTests(SimpleTestCase):\n \n \n @isolate_apps('invalid_models_tests')\n+class TestMaxLengthChoiceConstraint(TestCase):\n+\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n class DateFieldTests(SimpleTestCase):\n     maxDiff = None\n \n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..e6cad5c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -246,8 +246,28 @@ class WriterTests(SimpleTestCase):\n             [list, tuple, dict, set, frozenset],\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n+    def test_serialize_enum_with_translations(self):\n+        from enum import Enum\n+        from django.utils.translation import gettext_lazy as _\n+        from django.db import models\n \n-    def test_serialize_lazy_objects(self):\n+        class TranslatedEnum(Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+            def __str__(self):\n+                return self.name\n+\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            choices=[(tag.value, tag.name) for tag in TranslatedEnum],\n+            max_length=128\n+        )\n+        serialized = MigrationWriter.serialize(field)[0]\n+        self.assertIn(\n+            \"default=test_writer.TranslatedEnum['GOOD']\",\n+            serialized\n+        )\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..e73b996 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,9 +1,11 @@\n+\n import unittest\n from datetime import datetime\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n+from unittest import mock\n from django.utils.http import (\n     base36_to_int, escape_leading_slashes, http_date, int_to_base36,\n     is_safe_url, is_same_domain, parse_etags, parse_http_date, quote_etag,\n@@ -323,6 +325,32 @@ class HttpDateProcessingTests(unittest.TestCase):\n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mocked_datetime(self, mocked_datetime):\n+        \"\"\"Test parsing of RFC850 date format with a mocked current datetime.\"\"\"\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Mock current datetimes for different scenarios\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_year_less_than_70(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..3cc6a3b 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,9 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import SimpleTestCase\n+from django.utils.functional import Promise\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n@@ -143,8 +146,12 @@ class ChoicesTests(SimpleTestCase):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n-\n-class Separator(bytes, models.Choices):\n+    def test_str_return_type(self):\n+        # Test that the string representation of the enum returns the correct value type\n+        for choice in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in choice:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(member), str(member.value))\n     FS = b'\\x1c', 'File Separator'\n     GS = b'\\x1d', 'Group Separator'\n     RS = b'\\x1e', 'Record Separator'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..80316a7 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -186,8 +186,16 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsNone(WhizIterEmpty(c=None).c)         # Blank value\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n+    def test_override_get_FIELD_display(self):\n+        \"\"\"Test overriding the get_FIELD_display method.\"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n \n-class GetChoicesTests(SimpleTestCase):\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..d405e4e 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -147,8 +148,35 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.db import models\n+\n+class GetFieldDisplayTests(TestCase):\n+    def test_overriding_inherited_field_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B')])\n+\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+\n+    def test_inherited_field_with_additional_choice(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'output1'), ('B', 'output2')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'output1'), ('B', 'output2'), ('C', 'output3')])\n \n-class GetFieldDisplayTests(SimpleTestCase):\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'output1')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'output2')\n+        self.assertEqual(Child(foo='C').get_foo_display(), 'output3')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..bfe8659 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -171,6 +171,33 @@ class UtilsTests(SimpleTestCase):\n         self.assertHTMLEqual(display_value, expected)\n \n         display_value = display_for_field(None, models.DecimalField(), self.empty_value)\n+\n+    def test_json_display_for_field(self):\n+        tests = [\n+            # Test nested JSON structure\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            # Test JSON array\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            # Test string value\n+            ('a', '\"a\"'),\n+            # Test invalid JSON key (tuple)\n+            # Ensuring invalid keys are handled (can vary depending on implementation)\n+            ({('a', 'b'): 'c'}, '{\"\\\\\"(a, b)\\\\\": \"c\"}'),  # Example handling invalid JSON. Adapt as necessary.\n+            # Test simple integer\n+            (42, '42'),\n+            # Test None value\n+            (None, 'null'),\n+            # Test boolean value true\n+            (True, 'true'),\n+            # Test boolean value false\n+            (False, 'false'),\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n         self.assertEqual(display_value, self.empty_value)\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..02f3f41 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -18,6 +20,31 @@ def get_connection_copy():\n     return test_connection\n \n \n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n class TestDbSignatureTests(SimpleTestCase):\n     def test_default_name(self):\n         # A test db name isn't set.\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..0a4c1f4 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -128,7 +128,26 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_ambiguous_relationship_model(self):\n+    def test_correct_hint_for_recursive_relationship(self):\n+\n+        class Person(models.Model):\n+            pass\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            group = models.ForeignKey('Group', models.CASCADE)\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField(\n+                'self', \n+                through='AmbiguousRelationship'\n+            )\n+\n+        field = Group._meta.get_field('members')\n+        errors = field.check(from_model=Group)\n+        self.assertEqual(len(errors), 1)\n+        self.assertIn('ManyToManyField', errors[0].hint)\n+        self.assertNotIn('ForeignKey', errors[0].hint)\n \n         class Person(models.Model):\n             pass\n",
  "django__django-12700": "",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..0959136 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1756,6 +1756,54 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(definition[2], {'name': \"Pony\", 'index_together': {(\"pink\", \"weight\")}})\n \n     def test_alter_index_together_remove(self):\n+        # Initial setup: create model state with unique_together.\n+        app_label = 'test_alterindexremove_untogether'\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        table_name = '%s_pony' % app_label\n+        # Verify unique constraint exists\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Perform operation to add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        # Verify both index and unique constraint exist\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Remove index_together and verify only unique constraint stays\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+    def test_alter_index_together_no_recreation(self):\n+        app_label = 'test_no_recreation'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together using new-style indexes\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Change index declaration style\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..bf07503 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,18 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_queryset_delete_no_objects_deleted(self):\n+        \"\"\"\n+        Verify the consistency of QuerySet.delete() when zero objects are deleted,\n+        both for models with foreign key dependencies and simple models.\n+        \"\"\"\n+        # Test with a model with foreign key\n+        result_with_fk = HiddenUser.objects.filter(id=-1).delete()  # No object with such ID, hence 0 deletions\n+        self.assertEqual(result_with_fk, (0, {}))  # Expecting an empty dictionary\n+\n+        # Test with a \"simple\" model without foreign key\n+        result_simple = R.objects.filter(id=-1).delete()  # No object with such ID, hence 0 deletions\n+        self.assertEqual(result_simple, (0, {}))  # Expecting an empty dictionary to be consistent\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7fb65b7..75af79a 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1928,8 +1928,78 @@ class Model(metaclass=ModelBase):\n                 )\n         return errors\n \n-\n-############################################\n+from django.core.checks import Error\n+from django.db import connections, router\n+from django.db.models import Model, CheckConstraint, UniqueConstraint, ManyToManyField, IntegerField, ForeignKey, CASCADE\n+from django.test import TestCase\n+\n+class ConstraintTestCase(TestCase):\n+    databases = '__all__'  # Assuming test needs to run against all databases.\n+\n+    def test_unique_constraint_pointing_to_missing_field(self):\n+        class ModelWithMissingField(Model):\n+            class Meta:\n+                constraints = [UniqueConstraint(fields=['missing_field'], name='name')]\n+\n+        self.assertEqual(ModelWithMissingField.check(databases=self.databases), [\n+            Error(\n+                \"'constraints' refers to the nonexistent field 'missing_field'.\",\n+                obj=ModelWithMissingField,\n+                id='models.E012',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_pointing_to_m2m_field(self):\n+        class ModelWithM2MField(Model):\n+            m2m = ManyToManyField('self')\n+\n+            class Meta:\n+                constraints = [UniqueConstraint(fields=['m2m'], name='name')]\n+\n+        self.assertEqual(ModelWithM2MField.check(databases=self.databases), [\n+            Error(\n+                \"'constraints' refers to a ManyToManyField 'm2m', but ManyToManyFields are not permitted in 'constraints'.\",\n+                obj=ModelWithM2MField,\n+                id='models.E013',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_pointing_to_non_local_field(self):\n+        class Parent(Model):\n+            field1 = IntegerField()\n+\n+        class Child(Parent):\n+            field2 = IntegerField()\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['field2', 'field1'], name='name'),\n+                ]\n+\n+        self.assertEqual(Child.check(databases=self.databases), [\n+            Error(\n+                \"'constraints' refers to field 'field1' which is not local to model 'Child'.\",\n+                hint='This issue may be caused by multi-table inheritance.',\n+                obj=Child,\n+                id='models.E016',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_pointing_to_fk(self):\n+        class Target(Model):\n+            pass\n+\n+        class ModelWithFK(Model):\n+            fk_1 = ForeignKey(Target, CASCADE, related_name='target_1')\n+            fk_2 = ForeignKey(Target, CASCADE, related_name='target_2')\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['fk_1_id', 'fk_2'], name='name'),\n+                ]\n+\n+        # This should return no errors as constraints on FKs are valid.\n+        self.assertEqual(ModelWithFK.check(databases=self.databases), [])\n # HELPER FUNCTIONS (CURRIED MODEL METHODS) #\n ############################################\n \n",
  "django__django-12915": "",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..72f5ad9 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,12 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Test cases to verify fix for leading/trailing dashes and underscores\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('--Leading-and-Trailing--', 'leading-and-trailing', False),\n+            ('__Underscore_leading-and_trailing__', 'underscore-leading-and-trailing', False),\n+            ('-Mixed-_leading_and_trailing-', 'mixed-leading-and-trailing', False),\n+            ('  Multiple   --- mixed--__leading_trailing  __spaces__ ', 'multiple-mixed-leading-trailing-spaces', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..5f48d19 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -11,7 +11,47 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n-    def test_single_parent(self):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal and distinct.\"\"\"\n+\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Test field instances should not be considered equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Test ordering\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        # Test hash inequality\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+        # Additional tests for inclusion in sets\n+        field_set = {inherit1_model_field, inherit2_model_field}\n+        self.assertEqual(len(field_set), 2)\n+\n+        # Verify fields are tied to correct models\n+        self.assertEqual(inherit1_model_field.model, InheritAbstractModel1)\n+        self.assertEqual(inherit2_model_field.model, InheritAbstractModel2)\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n \n@@ -347,4 +387,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..5e14559 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,7 +45,26 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n-    def test_available_apps(self):\n+    from django.contrib.auth.models import User\n+    from admin_views.models import Article\n+\n+    def test_app_list_includes_model_class(self):\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n+\n+        # admin_views.Article\n+        admin_views = apps[0]\n+        self.assertEqual(admin_views['app_label'], 'admin_views')\n+        article = admin_views['models'][0]\n+        self.assertEqual(article['object_name'], 'Article')\n+        self.assertEqual(article.get('model'), Article)\n+\n+        # auth.User\n+        auth = apps[1]\n+        self.assertEqual(auth['app_label'], 'auth')\n+        user = auth['models'][0]\n+        self.assertEqual(user['object_name'], 'User')\n+        self.assertEqual(user.get('model'), User)\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..5b29dc9 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,49 @@\n+\n+class EmailChangeTokenInvalidationTest(TestCase):\n+    def test_token_invalidation_on_email_change(self):\n+        \"\"\"Updating the user's email address should invalidate the generated token\"\"\"\n+        user = CustomEmailField.objects.create_user(\n+            'testuser1',\n+            email='test1@example.com',\n+            password='testpw',\n+        )\n+        token_generator = PasswordResetTokenGenerator()\n+        initial_token = token_generator.make_token(user)\n+        self.assertTrue(token_generator.check_token(user, initial_token))\n+\n+        # Change the email, which should invalidate the existing token\n+        user.email = 'newemail@example.com'\n+        user.save()\n+        self.assertFalse(token_generator.check_token(user, initial_token))\n+\n+    def test_multiple_user_models_token_invalidation(self):\n+        \"\"\"Check token invalidation for different user models with email changes\"\"\"\n+        models = [CustomEmailField, User]\n+        for model in models:\n+            with self.subTest(model=model.__name__):\n+                user = model.objects.create_user(\n+                    'testuser2',\n+                    email='test2@example.com',\n+                    password='testpw',\n+                )\n+                token_generator = PasswordResetTokenGenerator()\n+                initial_token = token_generator.make_token(user)\n+                \n+                self.assertTrue(token_generator.check_token(user, initial_token))\n+\n+                # Changing email should invalidate the token\n+                user.email = 'anothernewemail@example.com'\n+                user.save()\n+                self.assertFalse(token_generator.check_token(user, initial_token))\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from .models import CustomEmailField  # Ensure the necessary imports are included\n from django.test import TestCase\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..267e238 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -28,6 +28,7 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from unittest import mock\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n@@ -1864,7 +1865,31 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('option_b', %s), ('option_c', '3'), ('pythonpath', None), \"\n             \"('settings', 'alternate_settings'), ('traceback', False), \"\n             \"('verbosity', 1)]\" % option_b\n-        )\n+        )        \n+\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_different_executable(self):\n+        \"\"\"\n+        The program name should reflect the provided executable name, not '__main__.py'.\n+        \"\"\"\n+        args = ['runserver', '--noreload']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin runserver', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n \n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..d94e9d1 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -30,14 +31,106 @@ class ShellCommandTestCase(SimpleTestCase):\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    def test_command_option_globals(self):\n+        script_globals = 'print(\"__name__\" in globals())'\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()\\n'\n+        )\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        script_globals = 'print(\"__name__\" in globals())'\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()\\n'\n+        )\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    def test_command_option_globals(self):\n+        script_globals = 'print(\"__name__\" in globals())'\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()\\n'\n+        )\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        script_globals = 'print(\"__name__\" in globals())'\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()\\n'\n+        )\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n         select.return_value = ([], [], [])\n@@ -49,4 +142,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..a4ea47b 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -982,7 +982,55 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n \n         class BothVerboseNameProfileInline(TabularInline):\n             model = BothVerboseNameProfile\n-            verbose_name_plural = 'Childs with both verbose names'\n+            # No explicit verbose_name_plural\n+            verbose_name = 'Childs with both verbose names'\n+\n+        class OnlyVerboseNameProfileInline(TabularInline):\n+            model = OnlyVerboseNameProfile\n+            verbose_name = 'Only verbose name provided'\n+            # No explicit verbose_name_plural\n+\n+        class NoNamesProfileInline(TabularInline):\n+            model = NoNamesProfile\n+            # Neither verbose_name nor verbose_name_plural set\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            NonVerboseProfileInline,\n+            VerboseNameProfileInline,\n+            VerboseNamePluralProfileInline,\n+            BothVerboseNameProfileInline,\n+            OnlyVerboseNameProfileInline,\n+            NoNamesProfileInline,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        # Non-verbose model.\n+        self.assertContains(response, '<h2>Non-verbose childs</h2>')\n+        self.assertContains(response, 'Add another Profile')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n+        # Model with verbose name.\n+        self.assertContains(response, '<h2>Childs with verbose name</h2>')\n+        self.assertContains(response, 'Add another Model with verbose name only')\n+        self.assertNotContains(response, '<h2>Model with verbose name onlys</h2>')\n+        # Model with verbose name plural.\n+        self.assertContains(response, '<h2>Childs with verbose name plural</h2>')\n+        self.assertContains(response, 'Add another Profile')\n+        self.assertNotContains(response, '<h2>Model with verbose name plural only</h2>')\n+        # Model with both verbose names.\n+        self.assertContains(response, '<h2>Childs with both verbose names</h2>')\n+        self.assertContains(response, 'Add another Model with both - name')\n+        self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n+        # Only verbose name provided, plural should default to \"Only verbose name provideds\"\n+        self.assertContains(response, '<h2>Only verbose name provideds</h2>')\n+        self.assertContains(response, 'Add another Only verbose name provided')\n+        self.assertNotContains(response, '<h2>Only verbose name provided</h2>')\n+        # No names provided, should default to model's verbose_name and verbose_name_plural\n+        self.assertContains(response, '<h2>No Names</h2>')  # Assuming \"No Names\" as model's Meta.verbose_name_plural\n+        self.assertContains(response, 'Add another No Name')  # Assuming \"No Name\" as model's Meta.verbose_name\n \n         modeladmin = ModelAdmin(ProfileCollection, admin_site)\n         modeladmin.inlines = [\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..33ea60b 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -595,7 +595,18 @@ class TestQuerying(TestCase):\n             [self.objs[4]],\n         )\n \n-    def test_isnull_key_or_none(self):\n+    def test_isnull_key_on_sqlite_and_oracle(self):\n+        # Test that __isnull=True does not match JSON null on SQLite and Oracle\n+        # Filtering with value__j__isnull=True should not include entries with value 'j' as None.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        # Ensure that when the key exists with a null value, it is excluded in SQLite and Oracle\n+        self.assertNotIn(\n+            self.obj_with_value_j_null,\n+            NullableJSONModel.objects.filter(value__j__isnull=True)\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex ad86558..659bfd4 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -204,10 +204,14 @@ class Signal:\n         # Call each receiver with whatever arguments it can accept.\n         # Return a list of tuple pairs [(receiver, response), ... ].\n         responses = []\n+        import logging\n+        logger = logging.getLogger('django.dispatch')\n+\n         for receiver in self._live_receivers(sender):\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n+                logger.exception('Error calling %s in Signal.send_robust()', receiver)\n                 responses.append((receiver, err))\n             else:\n                 responses.append((receiver, response))\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..21e7de5 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,7 +281,19 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from django.test import TestCase\n+from .models import ChoiceModel\n \n+class AssertFormErrorsMixin:\n+    def assertFormErrors(self, expected_errors, form_func, *args, **kwargs):\n+        try:\n+            form_func(*args, **kwargs)\n+        except Exception as e:\n+            self.assertEqual(e.messages, expected_errors)\n+        else:\n+            self.fail(\"ValidationError not raised\")\n+            \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n@@ -297,8 +309,32 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n+    \n+    def test_modelchoicefield_value_placeholder(self):\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n \n-        # ModelMultipleChoiceField\n+    def test_modelmultiplechoicefield_value_placeholder(self):\n+        f = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not a valid choice.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not a valid choice.'],\n+            f.clean,\n+            ['invalid'],\n+        )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': '%(value)s IS INVALID CHOICE',\n@@ -307,4 +343,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..c91e258 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,6 +17,17 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n+    def test_combine_dict_keys(self):\n+        # Ensure dict_keys with | does not raise a TypeError anymore.\n+        q = Q(x__in={}.keys())\n+        # Test with AND operations\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        \n+        # Test with OR operations\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..5e45781 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,12 +28,16 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n+from django.db.models import Exists, OuterRef, Q\n+from django.test import TestCase\n from django.utils.functional import SimpleLazyObject\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n     RemoteEmployee, Result, SimulationRun, Time,\n )\n+from django.db.models import Exists, OuterRef, Q\n+from django.test import TestCase\n \n \n class BasicExpressionsTests(TestCase):\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..e13bee6 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1146,6 +1146,40 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import resolve, path, ResolverMatch\n+from django.test import SimpleTestCase, override_settings\n+import urlpatterns_reverse.views as views\n+\n+@override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+class PartialFunctionResolverMatchTests(SimpleTestCase):\n+    def test_partial_function_in_repr(self):\n+        # Define a partial function\n+        partial_func = functools.partial(views.empty_view, template_name='template.html')\n+        resolver_match = ResolverMatch(\n+            partial_func, args=(), kwargs={}, url_name='partial',\n+            app_names=[], namespaces=[], route='partial/')\n+        \n+        expected_repr = (\n+            f\"ResolverMatch(func={partial_func.func.__module__}.{partial_func.func.__name__}, \"\n+            f\"args=(), kwargs={{}}, url_name=partial, app_names=[], namespaces=[], route=partial/)\"\n+        )\n+        self.assertEqual(repr(resolver_match), expected_repr)\n+\n+    def test_partial_function_arguments_in_repr(self):\n+        # Define a partial function with arguments\n+        partial_func = functools.partial(views.empty_view, 'arg1', 'arg2')\n+        resolver_match = ResolverMatch(\n+            partial_func, args=(), kwargs={}, url_name='partial_args',\n+            app_names=[], namespaces=[], route='partial_args/')\n+        \n+        expected_repr = (\n+            f\"ResolverMatch(func={partial_func.func.__module__}.{partial_func.func.__name__}, \"\n+            f\"args=('arg1', 'arg2'), kwargs={{}}, url_name=partial_args, \"\n+            f\"app_names=[], namespaces=[], route=partial_args/)\"\n+        )\n+        self.assertEqual(repr(resolver_match), expected_repr)\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..f453d67 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,8 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import SimpleTestCase, override_settings\n+from django.db import models\n+from django.test.utils import isolate_apps\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -66,7 +70,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+            \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+            \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +106,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+            \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+            \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..6be870a 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2217,6 +2217,30 @@ class StartApp(AdminScriptTestCase):\n             \"won't replace conflicting files.\"\n         )\n \n+    def test_trailing_slash_with_non_existent_directory(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'nonexistent/')\n+        _, err = self.run_django_admin(['startapp', 'app', app_dir])\n+        self.assertOutput(\n+            err,\n+            \"CommandError: Destination directory 'apps/nonexistent/' does not exist, please create it first.\"\n+        )\n+    \n+    def test_trailing_slash_in_target_app_directory_name_with_trailing_space(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1/')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1 ', '')])\n+        self.assertOutput(\n+            err,\n+            \"CommandError: 'app1 ' is not a valid app name. Please make sure the name is a valid identifier.\"\n+        )\n+        \n+    def test_multiple_trailing_slashes(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2///')\n+        os.makedirs(app_dir.rstrip('/'))\n+        _, err = self.run_django_admin(['startapp', 'app2', app_dir])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir.rstrip('/'), 'apps.py')), True)\n+\n     def test_template(self):\n         out, err = self.run_django_admin(['startapp', 'new_app'])\n         self.assertNoOutput(err)\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..44c3905 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -18,6 +18,7 @@ from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n+from django.forms import forms\n \n from .models.custom_user import (\n     CustomUser, CustomUserWithoutIsActiveField, ExtensionUser,\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..cbf3091 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,6 +658,41 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n+    def test_serialize_missing_import(self):\n+        \"\"\"\n+        Test that migration serialization includes necessary imports.\n+        \"\"\"\n+        from django.db import models\n+        class MyField(models.TextField):\n+            pass\n+        \n+        class MyMixin:\n+            pass\n+        \n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+        \n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+        \n+        fields = {\n+            'name': MyField(primary_key=True),\n+        }\n+        \n+        options = {\n+            'abstract': False,\n+        }\n+\n+        # Mimic a migration creation scenario to verify imports\n+        serialized_model = MigrationWriter.serialize(models.Model)\n+        self.assertIn(\"from django.db import models\", serialized_model[0])\n+        self.assertIn(\"models.Model\", serialized_model[0])\n+        \n+        # Test if mixins are also serialized correctly\n+        serialized_mixin = MigrationWriter.serialize(MyMixin)\n+        self.assertIn(\"app.models.MyMixin\", serialized_mixin[0])\n+\n     def test_simple_migration(self):\n         \"\"\"\n         Tests serializing a simple migration.\n",
  "django__django-14608": "",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..b09778b 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -9,6 +9,8 @@ from .models import (\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n     Relationship, SymmetricalFriendship,\n )\n+from django.test import TestCase\n+from .models import Event, Person, PersonChild, Invitation\n \n \n class M2mThroughTests(TestCase):\n@@ -31,7 +33,15 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n-    def test_get_on_intermediate_model(self):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        # Check for base model\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ('event', 'invitee'))\n+        # Check for inherited proxy model\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ('event', 'invitee'))\n+        # Ensure both are hashable and have the same hash\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n         queryset = Membership.objects.get(person=self.jane, group=self.rock)\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..501d2a8 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -293,6 +293,40 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+class AutocompleteJsonViewTest(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser('superuser', 'super@example.com', 'secret')\n+        self.url = reverse('admin:autocomplete')\n+        self.opts = {'app_label': 'myapp', 'model_name': 'question', 'field_name': 'question'}\n+\n+    def test_serialize_result_with_extra_field(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        # Create some Question objects\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        data = json.loads(response.content.decode('utf-8'))\n+        expected_results = [\n+            {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+            for q in Question.objects.order_by('-posted')\n+        ]\n+        self.assertEqual(data, {\n+            'results': expected_results,\n+            'pagination': {'more': False},\n+        })\n+\n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..3e262b1 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,7 +426,82 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+import functools\n+from django.utils.decorators import method_decorator\n+from functools import wraps\n+from django.test import TestCase\n+\n+class MethodDecoratorTests(TestCase):\n+\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_partial_function_decorator(self):\n+        \"\"\"Test method_decorator with partial functions to avoid AttributeError.\"\"\"\n+        func_name = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name\n+                func_name = getattr(func, '__name__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self, arg1, arg2):\n+                \"\"\"This is a method that adds two numbers.\"\"\"\n+                return arg1 + arg2\n+\n+        partial_function = functools.partial(Test().method, arg2=5)\n+        partial_function(10)  # Should not raise AttributeError\n+        self.assertEqual(func_name, 'method')\n+\n+    def test_preserve_function_attributes(self):\n+        \"\"\"Check if __doc__ and __annotations__ are preserved.\"\"\"\n+        func_doc = None\n+        func_annotations = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_doc, func_annotations\n+                func_doc = getattr(func, '__doc__', None)\n+                func_annotations = getattr(func, '__annotations__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self, arg: int) -> int:\n+                \"\"\"This is a method that returns the integer.\"\"\"\n+                return arg\n+\n+        result = Test().method(42)\n+        self.assertEqual(result, 42)\n+        self.assertEqual(func_doc, \"This is a method that returns the integer.\")\n+        self.assertEqual(func_annotations, {'arg': int, 'return': int})\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..cf73a4d 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +343,28 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_modelchoiceiteratorvalue_hash(self):\n+        # Assume self.c1 and self.c2 have been properly set up as categories with distinct primary keys\n+\n+        # Create instances of ModelChoiceIteratorValue\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Check that the instances can be hashed\n+        self.assertIsInstance(hash(value_1), int)\n+        self.assertIsInstance(hash(value_2), int)\n+\n+        # Verify different objects don't collide in hash if they are different\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+        # Test usage in dictionary\n+        test_dict = {value_1: \"Category 1\", value_2: \"Category 2\"}\n+        self.assertEqual(test_dict[value_1], \"Category 1\")\n+        self.assertEqual(test_dict[value_2], \"Category 2\")\n+\n+        # Test rehash and verify lookup\n+        rehash_value_1 = ModelChoiceIteratorValue(self.c1.pk, None)\n+        self.assertEqual(test_dict[rehash_value_1], \"Category 1\")\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..2c04fe9 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -153,8 +153,23 @@ class MultiValueFieldTest(SimpleTestCase):\n             <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n             \"\"\",\n         )\n-\n-    def test_form_as_table_data(self):\n+    def test_multivaluefield_label_without_index(self):\n+        form = ComplexFieldForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label>Field1:</label></th>\n+            <td><input type=\"text\" name=\"field1_0\" id=\"id_field1_0\" required>\n+            <select multiple name=\"field1_1\" id=\"id_field1_1\" required>\n+            <option value=\"J\">John</option>\n+            <option value=\"P\">Paul</option>\n+            <option value=\"G\">George</option>\n+            <option value=\"R\">Ringo</option>\n+            </select>\n+            <input type=\"text\" name=\"field1_2_0\" id=\"id_field1_2_0\" required>\n+            <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n+            \"\"\",\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..bdcbe6d 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -93,6 +93,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://[a',\n             # Non-string.\n             23,\n+            # ValueError: Invalid IPv6 URL should raise ValidationError instead.\n+            '////]@N.AN',\n+# Original test case for empty hostname remains to ensure correct workings.\n             # Hangs \"forever\" before fixing a catastrophic backtracking,\n             # see #11198.\n             'http://%s' % ('X' * 60,),\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..9fe9201 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -2,6 +2,8 @@ import datetime\n from decimal import Decimal\n \n from django.core.exceptions import FieldDoesNotExist, FieldError\n+from django.db.models.expressions import Subquery\n+from django.db.models.aggregates import Count\n from django.db.models import (\n     BooleanField, Case, CharField, Count, DateTimeField, DecimalField, Exists,\n     ExpressionWrapper, F, FloatField, Func, IntegerField, Max, OuterRef, Q,\n@@ -197,7 +199,18 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n-    def test_empty_expression_annotation(self):\n+    def test_expressionwrapper_with_negated_q(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=Book.objects.all()), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(not book.selected for book in books))\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n         )\n@@ -697,7 +710,18 @@ class NonAggregateAnnotationTestCase(TestCase):\n             [{'jacob_name': 'Jacob Kaplan-Moss', 'james_name': 'James Bennett'}],\n         )\n \n-    def test_annotation_filter_with_subquery(self):\n+    def test_annotate_with_negated_q_and_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    def test_aggregate_over_negated_expression_annotation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n         long_books_qs = Book.objects.filter(\n             publisher=OuterRef('pk'),\n             pages__gt=400,\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..d7a2994 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -9,6 +10,7 @@ from django.contrib.messages.storage.cookie import (\n )\n from django.test import SimpleTestCase, override_settings\n from django.utils.crypto import get_random_string\n+from django.contrib.messages.storage.base import Message\n from django.utils.safestring import SafeData, mark_safe\n \n from .base import BaseTests\n@@ -104,6 +106,25 @@ class CookieTests(BaseTests, SimpleTestCase):\n         # The message actually contains what we expect.\n         self.assertEqual(list(storage), [])\n \n+    def test_extra_tags_preserved(self):\n+        \"\"\"\n+        Test that extra_tags is correctly preserved when serialized and deserialized.\n+        \"\"\"\n+        storage = self.get_storage()\n+        def encode_decode_message(extra_tags):\n+            message = Message(constants.INFO, 'Test', extra_tags=extra_tags)\n+            encoded = storage._encode(message)\n+            return storage._decode(encoded).extra_tags\n+\n+        # Test with an empty string\n+        self.assertEqual(encode_decode_message(\"\"), \"\")\n+\n+        # Test with None\n+        self.assertIsNone(encode_decode_message(None))\n+\n+        # Test with arbitrary string\n+        self.assertEqual(encode_decode_message(\"some tags\"), \"some tags\")\n+\n     def test_max_cookie_length(self):\n         \"\"\"\n         If the data exceeds what is allowed in a cookie, older messages are\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..a0ef626 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,5 +1,7 @@\n from pathlib import Path\n from unittest import mock\n+import os\n+from django.conf import settings\n \n from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n@@ -39,7 +41,37 @@ class TemplateReloadTests(SimpleTestCase):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n         mock_reset.assert_not_called()\n \n-    def test_watch_for_template_changes(self):\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [str(ROOT)],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_base_dir_in_template_dirs(self, mock_reset):\n+        # Simulate a file change in the BASE_DIR\n+        self.assertIsNone(autoreload.template_changed(None, ROOT / 'dummy.py'))\n+        # Ensure that the loader reset is not triggered for non-template files\n+        mock_reset.assert_not_called()\n+\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [str(ROOT)],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_template_file_in_base_dir(self, mock_reset):\n+        # Create a temporary template directory and file in BASE_DIR to simulate changes\n+        with mock.patch.object(settings, 'BASE_DIR', os.path.dirname(__file__)):\n+            template_dir = os.path.join(settings.BASE_DIR, 'templates')\n+            os.makedirs(template_dir, exist_ok=True)\n+            template_file = os.path.join(template_dir, 'test_template.html')\n+        \n+            # Simulate a template change\n+            self.assertTrue(autoreload.template_changed(None, Path(template_file)))\n+            # Ensure that the loader reset is called for template changes\n+            mock_reset.assert_called_once()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n@@ -88,7 +120,37 @@ class TemplateReloadTests(SimpleTestCase):\n @require_jinja2\n @override_settings(INSTALLED_APPS=['template_tests'])\n class Jinja2TemplateReloadTests(SimpleTestCase):\n-    def test_watch_for_template_changes(self):\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [str(ROOT)],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_base_dir_in_template_dirs(self, mock_reset):\n+        # Simulate a file change in the BASE_DIR\n+        self.assertIsNone(autoreload.template_changed(None, ROOT / 'dummy.py'))\n+        # Ensure that the loader reset is not triggered for non-template files\n+        mock_reset.assert_not_called()\n+\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [str(ROOT)],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_template_file_in_base_dir(self, mock_reset):\n+        # Create a temporary template directory and file in BASE_DIR to simulate changes\n+        with mock.patch.object(settings, 'BASE_DIR', os.path.dirname(__file__)):\n+            template_dir = os.path.join(settings.BASE_DIR, 'templates')\n+            os.makedirs(template_dir, exist_ok=True)\n+            template_file = os.path.join(template_dir, 'test_template.html')\n+        \n+            # Simulate a template change\n+            self.assertTrue(autoreload.template_changed(None, Path(template_file)))\n+            # Ensure that the loader reset is called for template changes\n+            mock_reset.assert_called_once()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..34fba26 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,35 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        The was_modified_since function should handle an empty If-Modified-Since header\n+        without raising an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Test was_modified_since with an invalid date string for If-Modified-Since header.\n+        It should return True indicating the resource was modified.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"invalid-date\", mtime=1))\n+\n+    def test_was_modified_since_valid_date_unmodified(self):\n+        \"\"\"\n+        Test was_modified_since with a valid If-Modified-Since date string\n+        indicating the resource is unmodified.\n+        \"\"\"\n+        valid_date = http_date(1343416141)\n+        self.assertFalse(was_modified_since(header=valid_date, mtime=1343416141))\n+\n+    def test_was_modified_since_valid_date_modified(self):\n+        \"\"\"\n+        Test was_modified_since with a valid If-Modified-Since header where mtime indicates\n+        the resource was modified after the given date.\n+        \"\"\"\n+        valid_date = http_date(1343416141)\n+        self.assertTrue(was_modified_since(header=valid_date, mtime=1343416151))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..3cb625a 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -411,6 +412,33 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+    def test_custom_formatter_command_help(self):\n+        \"\"\"Test that custom formatter correctly formats help messages with example usage.\"\"\"\n+        epilog = '''\n+        Import a contract from tzkt.\n+        Example usage:\n+            ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+        '''\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"tzkt_import\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter,\n+        )\n+        help_message = parser.format_help()\n+\n+        expected_output = (\n+            \"usage: prog_name tzkt_import [-h] [--api API] [--version] [-v {0,1,2,3}] \"\n+            \"[--settings SETTINGS] [--pythonpath PYTHONPATH] [--traceback] [--no-color] \"\n+            \"[--force-color] [--skip-checks] blockchain target\\n\"\n+            \"Import a contract from tzkt\\n\"\n+            \"Example usage:\\n\"\n+            \"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+        )\n+        \n+        # Ensure the example usage is formatted with correct line breaks\n+        self.assertIn(expected_output, help_message)\n+\n     def test_outputwrapper_flush(self):\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..b2e2573 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,5 +1,8 @@\n+\n import os\n from datetime import datetime\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n@@ -217,7 +220,53 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        # Test that the default encoder still works with a simple dictionary input\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_with_complex_object(self):\n+        class ComplexObject:\n+            def __init__(self, data):\n+                self.data = data\n+\n+        class ComplexObjectEncoder(DjangoJSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, ComplexObject):\n+                    return {\"data\": obj.data}\n+                return super().default(obj)\n+\n+        complex_obj = ComplexObject({\"key\": \"value\"})\n+        self.assertHTMLEqual(\n+            json_script(complex_obj, encoder=ComplexObjectEncoder),\n+            '<script type=\"application/json\">{\"data\": {\"key\": \"value\"}}</script>',\n+        )\n+\n+    def test_json_script_with_list_and_custom_encoder(self):\n+        class ListEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                if isinstance(o, list):\n+                    return json.dumps({\"list\": o})\n+                return super().encode(o)\n+\n+        input_data = [1, 2, 3]\n+        expected_output = '<script type=\"application/json\">{\"list\": [1, 2, 3]}</script>'\n+        self.assertHTMLEqual(\n+            json_script(input_data, encoder=ListEncoder),\n+            expected_output,\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..20ae0d3 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -130,6 +130,31 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             },\n         }\n \n+    def test_template_tags_same_library_in_option_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"someapp.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"my_tags\", \"someapp.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            error = Error(\n+                E003.msg.format(\n+                    \"'my_tags'\",\n+                    \"'check_framework.template_test_apps.someapp.templatetags.\"\n+                    \"my_tags', 'check_framework.template_test_apps.someapp.templatetags.\"\n+                    \"my_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [error]\n+            )\n+\n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -158,6 +183,31 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 [self.error_same_tags],\n             )\n \n+    def test_template_tags_same_library_in_option_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"someapp.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"my_tags\", \"someapp.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            error = Error(\n+                E003.msg.format(\n+                    \"'my_tags'\",\n+                    \"'check_framework.template_test_apps.someapp.templatetags.\"\n+                    \"my_tags', 'check_framework.template_test_apps.someapp.templatetags.\"\n+                    \"my_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [error]\n+            )\n+\n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n     )\n@@ -199,6 +249,31 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ):\n             self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n \n+    def test_template_tags_same_library_in_option_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"someapp.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"my_tags\", \"someapp.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            error = Error(\n+                E003.msg.format(\n+                    \"'my_tags'\",\n+                    \"'check_framework.template_test_apps.someapp.templatetags.\"\n+                    \"my_tags', 'check_framework.template_test_apps.someapp.templatetags.\"\n+                    \"my_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [error]\n+            )\n+\n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -206,4 +281,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..bc34f8b 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,6 +395,17 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n+    def test_select_related_only_on_proxy_model(self):\n+        # Proxy model setup\n+        custom = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        another = AnotherModel.objects.create(custom=custom)\n+        # Query with select_related and only\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        # Assert the result is retrieved successfully without crashing\n+        self.assertEqual(result, another)\n+        self.assertEqual(result.custom.name, \"Test Name\")\n+\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..0290d2a 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -115,7 +115,36 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n-    def test_column(self):\n+    def test_parameters_order(self):\n+        # Test without additional parameters\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n+        # Test with additional parameters\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n+        # Test with various options and parameters\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\n+                    \"NAME\": \"dbname\",\n+                    \"USER\": \"someuser\",\n+                    \"PASSWORD\": \"somepassword\",\n+                    \"HOST\": \"somehost\",\n+                    \"PORT\": \"444\",\n+                },\n+                [\"--echo-all\", \"-c\", \"select * from some_table;\"],\n+            ),\n+            (\n+                [\"psql\", \"-U\", \"someuser\", \"-h\", \"somehost\", \"-p\", \"444\", \"--echo-all\", \"-c\", \"select * from some_table;\", \"dbname\"],\n+                {\"PGPASSWORD\": \"somepassword\"},\n+            ),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env(\n                 {\n@@ -183,4 +212,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..13f9bdd 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,20 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form_with_true(self):\n+        # Verify that passing empty_permitted=True does not affect empty_form\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        # Since empty_form should ignore empty_permitted, the default behavior is used\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_ignored_empty_form_with_false(self):\n+        # Verify that passing empty_permitted=False does not affect empty_form\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        # Since empty_form should ignore empty_permitted, the default behavior is used\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..f6ad94c 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -13,6 +14,7 @@ from django.contrib.auth.forms import (\n     UserChangeForm,\n     UserCreationForm,\n )\n+from django.urls import reverse\n from django.contrib.auth.models import User\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n@@ -892,6 +894,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_link_in_user_change_form_uses_correct_url(self):\n+        user = User.objects.create_user(username=\"uuid_user\", uuid=\"22222222-3333-4444-5555-666677778888\", password=\"password\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin accessed via \"uuid\" instead of \"pk\".\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..e561730 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -505,6 +505,18 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"</urlset>\"\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_sitemod_no_items_value_error_handling(self):\n+        # Test to ensure no ValueError is raised for sitemaps with no items but callable lastmod\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response.headers)\n+        expected_content_index = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '<sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\\n'\n+            '</sitemapindex>'\n+        )\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..c0daabe 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,9 +1,12 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n@@ -16,6 +19,43 @@ from .tests import AdminViewBasicTestCase\n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n     request_factory = RequestFactory()\n \n+    def test_submit_row_save_as_new_add_permission(self):\n+        \"\"\"\n+        Ensure \"show_save_as_new\" requires both change and add permissions.\n+        \"\"\"\n+        # User with change permission only\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permissions\n+        add_change_user = User.objects.create_user(\n+            username=\"add_change_user\", password=\"secret\", is_staff=True\n+        )\n+        add_change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_change_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_submit_row(self):\n         \"\"\"\n         submit_row template tag should pass whole context.\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..25ea755 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -26,6 +27,15 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n+    # Test when autoescape is off and joiner should not be escaped\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ a|join:b }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        a = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        b = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off\", {\"a\": a, \"b\": b})\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n+\n     # Joining with unsafe joiners doesn't result in unsafe strings.\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n@@ -69,7 +79,7 @@ class FunctionTests(SimpleTestCase):\n     def test_autoescape_off(self):\n         self.assertEqual(\n             join([\"<a>\", \"<img>\", \"</a>\"], \"<br>\", autoescape=False),\n-            \"<a>&lt;br&gt;<img>&lt;br&gt;</a>\",\n+            \"<a><br><img><br></a>\",\n         )\n \n     def test_noniterable_arg(self):\n@@ -78,4 +88,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..34ba857 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -568,8 +568,44 @@ class BulkCreateTests(TestCase):\n                 update_fields=[\"name\"],\n                 unique_fields=[\"big_auto_fields\"],\n             )\n-\n-    def _test_update_conflicts_two_fields(self, unique_fields):\n+    \n+    @skipUnlessDBFeature(\"supports_returning_id_on_bulk_update_conflict\")\n+    def test_bulk_create_with_update_conflicts_returning_ids(self):\n+        # Setup initial data\n+        TwoFields.objects.bulk_create([\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ])\n+\n+        # Conflicting data, will trigger an update\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"c\"),\n+            TwoFields(f1=2, f2=2, name=\"d\"),\n+        ]\n+        \n+        # Attempt bulk_create with update_conflicts\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"f1\", \"f2\"],\n+            update_fields=[\"name\"],\n+        )\n+        \n+        # Verify that the correct number of objects are returned\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        \n+        # Verify that each object has a primary key set\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        \n+        # Verify the objects in the database are updated\n+        self.assertCountEqual(\n+            TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n+            [\n+                {\"f1\": 1, \"f2\": 1, \"name\": \"c\"},\n+                {\"f1\": 2, \"f2\": 2, \"name\": \"d\"},\n+            ],\n+        )\n         TwoFields.objects.bulk_create(\n             [\n                 TwoFields(f1=1, f2=1, name=\"a\"),\n@@ -816,4 +852,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..0cd4c9c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -197,6 +197,27 @@ class OperationWriterTests(SimpleTestCase):\n             \"),\",\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n \n class WriterTests(SimpleTestCase):\n     \"\"\"\n@@ -255,12 +276,54 @@ class WriterTests(SimpleTestCase):\n             decimal.Decimal(\"1.3\"), (\"Decimal('1.3')\", {\"from decimal import Decimal\"})\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n         self.assertSerializedEqual(Money(\"1.3\"))\n         self.assertSerializedResultEqual(\n             Money(\"1.3\"),\n             (\"migrations.test_writer.Money('1.3')\", {\"import migrations.test_writer\"}),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_serialize_constants(self):\n         self.assertSerializedEqual(None)\n         self.assertSerializedEqual(True)\n@@ -296,6 +359,27 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set()),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r\"^foo$\")\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n@@ -306,6 +390,27 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum['A']\", {\"import migrations.test_writer\"}),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedResultEqual(\n             TextTranslatedEnum.A,\n             (\n@@ -313,6 +418,27 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\n@@ -320,10 +446,52 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedResultEqual(\n             IntEnum.B,\n             (\"migrations.test_writer.IntEnum['B']\", {\"import migrations.test_writer\"}),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedResultEqual(\n             self.NestedEnum.A,\n             (\n@@ -331,11 +499,53 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedEqual(self.NestedEnum.A)\n \n         field = models.CharField(\n             default=TextEnum.B, choices=[(m.value, m) for m in TextEnum]\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -344,10 +554,52 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextEnum['B'])], \"\n             \"default=migrations.test_writer.TextEnum['B'])\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         field = models.CharField(\n             default=TextTranslatedEnum.A,\n             choices=[(m.value, m) for m in TextTranslatedEnum],\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -356,9 +608,51 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n             \"default=migrations.test_writer.TextTranslatedEnum['A'])\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         field = models.CharField(\n             default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum]\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -367,9 +661,51 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum['B'])], \"\n             \"default=migrations.test_writer.BinaryEnum['B'])\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         field = models.IntegerField(\n             default=IntEnum.A, choices=[(m.value, m) for m in IntEnum]\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -379,6 +715,27 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -387,6 +744,27 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedResultEqual(\n             IntFlagEnum.B,\n             (\n@@ -394,9 +772,51 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -405,6 +825,27 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A | IntFlagEnum.B,\n             (\n@@ -414,6 +855,27 @@ class WriterTests(SimpleTestCase):\n             ),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = \"A\", \"A value\"\n@@ -433,6 +895,27 @@ class WriterTests(SimpleTestCase):\n             DateChoices.DATE_1,\n             (\"datetime.date(1969, 7, 20)\", {\"import datetime\"}),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         field = models.CharField(default=TextChoices.B, choices=TextChoices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -440,12 +923,54 @@ class WriterTests(SimpleTestCase):\n             \"models.CharField(choices=[('A', 'A value'), ('B', 'B value')], \"\n             \"default='B')\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         field = models.IntegerField(default=IntegerChoices.B, choices=IntegerChoices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n             \"models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=2)\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         field = models.DateField(default=DateChoices.DATE_2, choices=DateChoices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -456,6 +981,27 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\",\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_serialize_nested_class(self):\n         for nested_cls in [self.NestedEnum, self.NestedChoices]:\n             cls_name = nested_cls.__name__\n@@ -478,14 +1024,77 @@ class WriterTests(SimpleTestCase):\n             uuid_a,\n             (\"uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8')\", {\"import uuid\"}),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedResultEqual(\n             uuid_b,\n             (\"uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2')\", {\"import uuid\"}),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n         field = models.UUIDField(\n             choices=((uuid_a, \"UUID A\"), (uuid_b, \"UUID B\")), default=uuid_a\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -495,6 +1104,27 @@ class WriterTests(SimpleTestCase):\n             \"default=uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8'))\",\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_serialize_pathlib(self):\n         # Pure path objects work in all platforms.\n         self.assertSerializedEqual(pathlib.PurePosixPath())\n@@ -523,6 +1153,27 @@ class WriterTests(SimpleTestCase):\n             string,\n             \"models.FilePathField(path=pathlib.PurePosixPath('/home/user'))\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertIn(\"import pathlib\", imports)\n \n     def test_serialize_path_like(self):\n@@ -554,13 +1205,76 @@ class WriterTests(SimpleTestCase):\n         self.assertSerializedEqual(\n             datetime.datetime(2014, 1, 1, 1, 1, tzinfo=get_default_timezone())\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedEqual(\n             datetime.datetime(2013, 12, 31, 22, 1, tzinfo=get_fixed_timezone(180))\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedResultEqual(\n             datetime.datetime(2014, 1, 1, 1, 1),\n             (\"datetime.datetime(2014, 1, 1, 1, 1)\", {\"import datetime\"}),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedResultEqual(\n             datetime.datetime(2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc),\n             (\n@@ -568,6 +1282,27 @@ class WriterTests(SimpleTestCase):\n                 {\"import datetime\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedResultEqual(\n             datetime.datetime(\n                 2012, 1, 1, 2, 1, tzinfo=zoneinfo.ZoneInfo(\"Europe/Paris\")\n@@ -578,12 +1313,54 @@ class WriterTests(SimpleTestCase):\n             ),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_serialize_fields(self):\n         self.assertSerializedFieldEqual(models.CharField(max_length=255))\n         self.assertSerializedResultEqual(\n             models.CharField(max_length=255),\n             (\"models.CharField(max_length=255)\", {\"from django.db import models\"}),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedFieldEqual(models.TextField(null=True, blank=True))\n         self.assertSerializedResultEqual(\n             models.TextField(null=True, blank=True),\n@@ -593,20 +1370,104 @@ class WriterTests(SimpleTestCase):\n             ),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_serialize_settings(self):\n         self.assertSerializedEqual(\n             SettingsReference(settings.AUTH_USER_MODEL, \"AUTH_USER_MODEL\")\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedResultEqual(\n             SettingsReference(\"someapp.model\", \"AUTH_USER_MODEL\"),\n             (\"settings.AUTH_USER_MODEL\", {\"from django.conf import settings\"}),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_serialize_iterators(self):\n         self.assertSerializedResultEqual(\n             ((x, x * x) for x in range(3)), (\"((0, 0), (1, 1), (2, 4))\", set())\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_serialize_compiled_regex(self):\n         \"\"\"\n         Make sure compiled regex can be serialized.\n@@ -624,6 +1485,27 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(\n             string, \"django.core.validators.RegexValidator(message='hello')\"\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.serialize_round_trip(validator)\n \n         # Test with a compiled regex.\n@@ -633,6 +1515,27 @@ class WriterTests(SimpleTestCase):\n             string,\n             \"django.core.validators.RegexValidator(regex=re.compile('^\\\\\\\\w+$'))\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.serialize_round_trip(validator)\n \n         # Test a string regex with flag\n@@ -643,6 +1546,27 @@ class WriterTests(SimpleTestCase):\n             \"django.core.validators.RegexValidator('^[0-9]+$', \"\n             \"flags=re.RegexFlag['DOTALL'])\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.serialize_round_trip(validator)\n \n         # Test message and code\n@@ -653,6 +1577,27 @@ class WriterTests(SimpleTestCase):\n             \"django.core.validators.RegexValidator('^[-a-zA-Z0-9_]+$', 'Invalid', \"\n             \"'invalid')\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.serialize_round_trip(validator)\n \n         # Test with a subclass.\n@@ -661,6 +1606,27 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(\n             string, \"django.core.validators.EmailValidator(message='hello')\"\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.serialize_round_trip(validator)\n \n         validator = deconstructible(path=\"migrations.test_writer.EmailValidator\")(\n@@ -671,9 +1637,51 @@ class WriterTests(SimpleTestCase):\n             string, \"migrations.test_writer.EmailValidator(message='hello')\"\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n         validator = deconstructible(path=\"custom.EmailValidator\")(EmailValidator)(\n             message=\"hello\"\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         with self.assertRaisesMessage(ImportError, \"No module named 'custom'\"):\n             MigrationWriter.serialize(validator)\n \n@@ -700,6 +1708,27 @@ class WriterTests(SimpleTestCase):\n             models.OrderBy(models.F(\"name\").desc()),\n             name=\"complex_func_index\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         string, imports = MigrationWriter.serialize(index)\n         self.assertEqual(\n             string,\n@@ -711,6 +1740,27 @@ class WriterTests(SimpleTestCase):\n             \"models.OrderBy(models.OrderBy(models.F('name'), descending=True)), \"\n             \"name='complex_func_index')\",\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertEqual(imports, {\"from django.db import models\"})\n \n     def test_serialize_empty_nonempty_tuple(self):\n@@ -762,6 +1812,27 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.models\"},\n             ),\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         self.assertSerializedEqual(FoodManager(\"a\", \"b\"))\n         self.assertSerializedEqual(FoodManager(\"x\", \"y\", c=3, d=4))\n \n@@ -772,6 +1843,27 @@ class WriterTests(SimpleTestCase):\n             frozenset(\"cba\"), (\"frozenset(['a', 'b', 'c'])\", set())\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_serialize_set(self):\n         self.assertSerializedEqual(set())\n         self.assertSerializedResultEqual(set(), (\"set()\", set()))\n@@ -809,6 +1901,27 @@ class WriterTests(SimpleTestCase):\n             (\"('models.Model', {'from django.db import models'})\", set()),\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_simple_migration(self):\n         \"\"\"\n         Tests serializing a simple migration.\n@@ -848,6 +1961,27 @@ class WriterTests(SimpleTestCase):\n                 \"dependencies\": [(\"testapp\", \"some_other_one\")],\n             },\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         # We don't test the output formatting - that's too fragile.\n@@ -887,6 +2021,27 @@ class WriterTests(SimpleTestCase):\n                 \"dependencies\": [],\n             },\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         result = self.safe_exec(output)\n@@ -896,6 +2051,27 @@ class WriterTests(SimpleTestCase):\n             result[\"custom_migration_operations\"].more_operations.TestOperation,\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_sorted_dependencies(self):\n         migration = type(\n             \"Migration\",\n@@ -912,6 +2088,27 @@ class WriterTests(SimpleTestCase):\n                 ],\n             },\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         output = MigrationWriter(migration, include_header=False).as_string()\n         self.assertIn(\n             \"    dependencies = [\\n\"\n@@ -923,6 +2120,27 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_sorted_imports(self):\n         \"\"\"\n         #24155 - Tests ordering of imports.\n@@ -949,6 +2167,27 @@ class WriterTests(SimpleTestCase):\n                 ]\n             },\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         self.assertIn(\n@@ -956,6 +2195,27 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_migration_file_header_comments(self):\n         \"\"\"\n         Test comments at top of file.\n@@ -1001,6 +2261,27 @@ class WriterTests(SimpleTestCase):\n                 ]\n             },\n         )\n+\n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         self.assertIn(\"from django.db import migrations\\n\", output)\n@@ -1017,6 +2298,27 @@ class WriterTests(SimpleTestCase):\n             \"models.CharField(default=migrations.test_writer.DeconstructibleInstances)\",\n         )\n \n+    def test_serialize_nested_class_method(self):\n+        class ProfileModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.ProfileModel.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(ProfileModel.Capability.default, target)\n+\n     def test_register_serializer(self):\n         class ComplexSerializer(BaseSerializer):\n             def serialize(self):\n@@ -1032,4 +2334,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..1d5e3b6 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -508,7 +508,19 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+def test_no_figure_loss_on_get_backend_with_rc_context():\n+    # Ensure `Gcf.figs` is initially empty\n+    plt._pylab_helpers.Gcf.figs.clear()\n+\n+    with rc_context():\n+        fig_2 = plt.figure()\n+\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    # Check that figures created within an rc_context are not removed by get_backend()\n+    assert before == after, f\"Figures cleared by get_backend:\\n{before}\\n{after}\"\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..f794e6c 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,7 +774,14 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n-def test_get_set_draggable():\n+def test_legend_draggable_on_creation():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_data')\n+    leg = ax.legend(draggable=True)\n+    assert leg.get_draggable() is True\n+\n+    leg = ax.legend(draggable=False)\n+    assert leg.get_draggable() is False\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..8f1b4fc 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -253,6 +253,42 @@ def test_linedash():\n     buf = io.BytesIO()\n     fig.savefig(buf, format=\"ps\")\n \n+\n+# Additional tests for multiline text with empty lines in the PostScript backend\n+\n+def test_multiline_text_with_empty_line():\n+    import io\n+    from matplotlib.figure import Figure\n+\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='Line1\\n\\nLine3', xy=(0.5, 0.5))  # Text with an empty line\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n+def test_multiline_only_empty_lines():\n+    import io\n+    from matplotlib.figure import Figure\n+\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\n\\n', xy=(0.5, 0.5))  # Text with only empty lines\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n+def test_single_empty_line():\n+    import io\n+    from matplotlib.figure import Figure\n+\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\n', xy=(0.5, 0.5))  # Single empty line\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n     assert buf.tell() > 0\n \n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..51bfc86 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,18 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+@pytest.mark.filterwarnings(\"error\")\n+def test_constrained_layout_warning():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    # Test to trigger warning when constrained_layout=False\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    with pytest.warns(UserWarning, match=\"incompatible with subplots_adjust and/or tight_layout\"):\n+        plt.subplots_adjust(wspace=0)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..da0c4c7 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -29,8 +29,16 @@ def test_create_lookup_table(N, result):\n     data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n-\n-def test_resampled():\n+import pytest\n+import numpy as np\n+from matplotlib import colormaps as cm\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, np.int32, np.int64, np.float32, np.float64])\n+def test_deprecation_warning_handling(dtype):\n+    cmap = cm['viridis']\n+    # Check if accessing the colormap with different dtypes does not produce deprecation warnings\n+    assert np.allclose(cmap(dtype(0)), cmap(0))\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..1ec9148 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,4 +1,6 @@\n+\n from io import BytesIO\n+import pickletools\n import ast\n import pickle\n \n@@ -106,7 +108,30 @@ def test_complete(fig_test, fig_ref):\n     plt.close(loaded)\n \n \n-def _pickle_load_subprocess():\n+def test_draggable_legend_pickling():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure the pickle does not contain any reference to GUI-specific canvases\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Try loading the pickled figure\n+    loaded = pickle.loads(pkl)\n+    assert isinstance(loaded, mpl.figure.Figure)\n+\n+    # Ensure the draggable property is preserved after unpickling\n+    loaded_leg = loaded.legends[0]\n+    assert loaded_leg.get_draggable() == True\n     import os\n     import pickle\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..b3c4e96 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,9 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n-@mpl.style.context(\"default\")\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..3b66004 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -10,6 +11,7 @@ from seaborn._stats.regression import PolyFit\n \n \n class TestPolyFit:\n+    from pandas.testing import assert_frame_equal\n \n     @pytest.fixture\n     def df(self, rng):\n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..3e356ec 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -83,7 +83,28 @@ class TestContinuous:\n         s = Continuous(norm=(3, 7))._setup(x, IntervalProperty())\n         assert_array_equal(s(x), [-.5, 0, 1.5])\n \n-    def test_interval_with_range_norm_and_transform(self, x):\n+    def test_interval_with_bools(self):\n+        import pandas as pd\n+        from seaborn._core.scales import Continuous\n+        from seaborn._base import IntervalProperty\n+        from numpy.testing import assert_array_equal\n+\n+        x = pd.Series([True, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 0])\n+\n+    def test_boolean_color_mapping(self):\n+        import pandas as pd\n+        from seaborn.palettes import color_palette\n+        from seaborn._core.scales import Continuous\n+        from seaborn._base import Color\n+        from numpy.testing import assert_array_equal\n+\n+        x = pd.Series([True, False])\n+        cmap = color_palette(\"ch:\", as_cmap=True)\n+        s = Continuous()._setup(x, Color())\n+        # Check if boolean values are mapped to 1 and 0\n+        assert_array_equal(s(x), cmap([1, 0])[:, :3])\n \n         x = pd.Series([1, 10, 100])\n         # TODO param order?\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..d30b136 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,22 +1,28 @@\n+\n import json\n import os\n import textwrap\n-\n+import os\n+import pytest\n+import pytest\n+import os\n import pytest\n-\n import flask\n-\n+import os\n+import pytest\n \n # config keys used for the TestConfig\n TEST_KEY = \"foo\"\n SECRET_KEY = \"config\"\n-\n+import os\n+import pytest\n \n def common_object_test(app):\n     assert app.secret_key == \"config\"\n     assert app.config[\"TEST_KEY\"] == \"foo\"\n     assert \"TestConfig\" not in app.config\n-\n+import os\n+import pytest\n \n def test_config_from_pyfile():\n     app = flask.Flask(__name__)\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..20e4b48 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,51 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import Timeout as RequestsTimeout, ConnectionError\n+from requests.packages.urllib3.exceptions import DecodeError as Urllib3DecodeError, TimeoutError as Urllib3TimeoutError\n+\n+def httpbin(endpoint):\n+    \"\"\" Utility function to create httpbin endpoint addresses \"\"\"\n+    return f\"http://httpbin.org/{endpoint}\"\n+\n+def test_urllib3_decode_error_caught():\n+    \"\"\" Test that urllib3 DecodeError is caught and raised correctly in requests \"\"\"\n+    session = requests.Session()\n+    \n+    # Simulate a DecodeError condition\n+    adapter = HTTPAdapter()\n+    \n+    def mock_send(*args, **kwargs):\n+        raise Urllib3DecodeError(\"Mock Decode Error\")\n+    \n+    adapter.send = mock_send\n+    session.mount(\"http://\", adapter)\n+    \n+    with pytest.raises(ConnectionError) as excinfo:\n+        session.get(httpbin('get'))\n+    \n+    assert \"Mock Decode Error\" in str(excinfo.value)\n+\n+def test_urllib3_timeout_caught():\n+    \"\"\" Test that urllib3 TimeoutError is caught and raised correctly in requests \"\"\"\n+    session = requests.Session()\n+\n+    # Simulate a TimeoutError condition\n+    adapter = HTTPAdapter()\n+    \n+    def mock_send(*args, **kwargs):\n+        raise Urllib3TimeoutError(\"Mock Timeout Error\")\n+    \n+    adapter.send = mock_send\n+    session.mount(\"http://\", adapter)\n+\n+    with pytest.raises(RequestsTimeout) as excinfo:\n+        session.get(httpbin('get'), timeout=1)\n+\n+    assert \"Mock Timeout Error\" in str(excinfo.value)\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1708,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..075788c 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,20 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_json_content_decode_unicode(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True when fetching JSON data.\n+        \"\"\"\n+        import io\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'{\"key\": \"value\"}')\n+        r.encoding = 'utf-8'\n+        \n+        chunks = r.iter_content(decode_unicode=True)\n+        # Collect all chunks into a complete json string\n+        content = ''.join(chunks)\n+        assert isinstance(content, str)\n+        assert content == '{\"key\": \"value\"}'\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..816d9e5 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,8 +743,81 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    \n+    def test_hook_registration_with_list(self):\n+        \"\"\"Test multiple hooks registration using a list in hooks argument\"\"\"\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({\n+                'X-Foo': 'foo'\n+            })\n+            return args\n \n-    def test_session_persistent_cookies(self):\n+        def add_bar_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({\n+                'X-Bar': 'bar'\n+            })\n+            return args\n+\n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h) is True\n+\n+        # Create hooks list\n+        hooks = [add_foo_header, add_bar_header]\n+        \n+        # Passing hooks as list through constructor\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert_hooks_are_callable(r.hooks)\n+\n+        # Invoking hooks and checking the headers\n+        headers = {}\n+        for hook in r.hooks['args']:\n+            headers = hook({'headers': headers})['headers']\n+        \n+        assert 'X-Foo' in headers\n+        assert 'X-Bar' in headers\n+\n+    def test_single_hook_registration(self):\n+        \"\"\"Test single hook registration\"\"\"\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({\n+                'X-Foo': 'foo'\n+            })\n+            return args\n+\n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h) is True\n+\n+        # Register single hook\n+        r = requests.models.Request()\n+        r.register_hook('args', add_foo_header)\n+        assert_hooks_are_callable(r.hooks)\n+\n+    def test_register_hook_inexistent_event(self):\n+        \"\"\"Test registering a hook for an inexistent event fails gracefully\"\"\"\n+        def dummy_hook(args):\n+            return args\n+        \n+        # Attempting to register a hook for an event that doesn't exist\n+        r = requests.models.Request()\n+        r.register_hook('nonexistent_event', dummy_hook)\n+        assert 'nonexistent_event' not in r.hooks\n+\n+    def test_register_hook_noop(self):\n+        \"\"\"Test registering a noop hook is manageable\"\"\"\n+        def noop_hook(args):\n+            pass\n+        \n+        r = requests.models.Request()\n+        r.register_hook('args', noop_hook)\n+        assert len(r.hooks['args']) == 1\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..2898b82 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -411,7 +411,10 @@ def test_groupby_repr_datetime(obj):\n     assert actual == expected\n \n \n-def test_groupby_drops_nans():\n+def test_groupby_no_trailing_whitespace():\n+    obj = repr_da\n+    groupby_repr = repr(obj.groupby(\"x\"))\n+    assert groupby_repr.splitlines()[0][-1] != ' ', \"Trailing whitespace detected in repr output's first line\"\n     # GH2383\n     # nan in 2D data variable (requires stacking)\n     ds = xr.Dataset(\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..7f6ce62 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -88,6 +88,15 @@ class TestFixme(CheckerTestCase):\n             MessageTest(msg_id=\"fixme\", line=2, args=\"CODETAG\", col_offset=17)\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n \n     def test_issue_2321_should_not_trigger(self) -> None:\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n@@ -119,4 +128,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..8c23f45 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -72,6 +72,12 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n \n \n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([\"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Unrecognized option found: Q\" in output.err\n+    assert \"usage: pylint\" in output.err\n     \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n     with pytest.raises(_UnrecognizedOptionError):\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..e2cf6c1 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1324,9 +1324,33 @@ class TestRunTC:\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n-                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_ignore_path_recursive_specified_dir(self) -> None:\n+        \"\"\"Tests that ignore-paths works with a specified directory. Related to GitHub issue.\"\"\"\n+        with _test_sys_path():\n+            # Remove the specific directory from sys.path\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n                 self._runtest(\n-                    [\".\", \"--recursive=y\"],\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n                     code=0,\n                 )\n \n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..a5586c5 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,66 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for the presence of a module with the same name as its parent\"\"\"\n+    with tempdir():\n+        # Set up the directory structure\n+        create_files([\"identical/identical.py\", \"identical/other.py\"])\n+        # Verify that pylint runs without errors\n+        initialized_linter.check([\"identical\"])\n+    # Expect no errors since an __init__.py shouldn't be necessary\n+    assert not initialized_linter.stats.by_msg\n+\n+\n+def test_import_in_nested_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test importing a module when the parent has a same-named module\"\"\"\n+    with tempdir():\n+        # Create a complex directory with one submodule imitating issue\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        \n+        # Let's modify `r.py` to try and import `a/b.py`\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+\n+        # Checking the entire package\n+        initialized_linter.check([\"r\", \"a\"])\n+    \n+    # Expect no import errors when importing from a similar structured module\n+    assert not initialized_linter.stats.by_msg\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for the presence of a module with the same name as its parent\"\"\"\n+    with tempdir():\n+        # Set up the directory structure\n+        create_files([\"identical/identical.py\", \"identical/other.py\"])\n+        # Verify that pylint runs without errors\n+        initialized_linter.check([\"identical\"])\n+    # Expect no errors since an __init__.py shouldn't be necessary\n+    assert not initialized_linter.stats.by_msg\n+\n+\n+def test_import_in_nested_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test importing a module when the parent has a same-named module\"\"\"\n+    with tempdir():\n+        # Create a complex directory with one submodule imitating issue\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        \n+        # Let's modify `r.py` to try and import `a/b.py`\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+\n+        # Checking the entire package\n+        initialized_linter.check([\"r\", \"a\"])\n+    \n+    # Expect no import errors when importing from a similar structured module\n+    assert not initialized_linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..caae9a2 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -112,6 +113,39 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[1] == \"my_mod:1::()\"\n     assert out_lines[2] == \"my_mod:2::()\"\n \n+from _pytest.recwarn import WarningsRecorder  # Add missing import at the top\n+\n+def test_valid_custom_braces_template(linter: PyLinter) -> None:\n+    \"\"\"Test with a valid message template using custom braces.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+    linter.add_message(\"C0301\", line=1, args=())\n+    linter.add_message(\"E0401\", line=2, args=())\n+    \n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n+\n+def test_invalid_custom_braces_template_warnings(linter: PyLinter, recwarn: WarningsRecorder) -> None:\n+    \"\"\"Test with an invalid message template.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    # Intentionally using an unsupported field 'invalid_field'\n+    linter.config.msg_template = '{{ \"Invalid\": \"{invalid_field}\" }}'\n+    \n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+    linter.add_message(\"C0301\", line=1, args=())\n+    \n+    # Check if a warning was issued\n+    warning = recwarn.pop()\n+    assert \"Don't recognize the argument 'invalid_field'\" in str(warning.message)\n+    # Verify that the output doesn't contain the unsupported field\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == ' { \"Invalid\": \"\" }'\n \n def test_deprecation_set_output(recwarn):\n     \"\"\"TODO remove in 3.0.\"\"\"\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "",
  "pytest-dev__pytest-5227": "",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..84b9960 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -300,7 +300,32 @@ def callequal(left, right, verbose=False):\n     return plugin.pytest_assertrepr_compare(config, \"==\", left, right)\n \n \n+import pytest\n+\n class TestAssert_reprcompare:\n+    def test_bytes_empty_vs_nonempty(self):\n+        # Test comparison between empty and non-empty byte strings\n+        expl = callequal(b\"\", b\"42\")\n+        assert expl == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+            \"?   ++\",\n+        ]\n+    \n+    def test_bytes_nonempty_vs_empty(self):\n+        # Test comparison between non-empty and empty byte strings\n+        expl = callequal(b\"1\", b\"\")\n+        assert expl == [\n+            \"b'1' == b''\",\n+            \"Left contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b'1'\",\n+            \"?  -\",\n+            \"+ b''\",\n+        ]\n     def test_different_types(self):\n         assert callequal([0, 1], \"foo\") is None\n \n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..dec40e1 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,4 +1,7 @@\n+\n import os\n+import platform\n+from datetime import datetime\n from xml.dom import minidom\n \n import py\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..03607a4 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,20 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute_exception_in_repr():\n+    \"\"\" Test case to check if exceptions in __repr__ of classes are handled properly \"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Error in __getattribute__\")\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Error in __repr__\")\n+\n+    result = saferepr(SomeClass())\n+    assert result.startswith(\"<[RuntimeError('Error in __repr__') raised in repr()] SomeClass object at 0x\"), (\n+        f\"Unexpected saferepr output: {result}\"\n+    )\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +167,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..e9464b0 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -287,6 +287,29 @@ class TestInlineRunModulesCleanup:\n         testdir.inline_run(str(test_mod))\n         assert imported.data == 42\n \n+def test_failure_with_changed_cwd(testdir) -> None:\n+    \"\"\"Ensure failure lines use absolute paths if cwd has changed since invocation (#6428).\"\"\"\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(test_file) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n \n def test_assert_outcomes_after_pytest_error(testdir) -> None:\n     testdir.makepyfile(\"def test_foo(): assert True\")\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..9952361 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+import os\n from unittest import mock\n \n import pytest\n@@ -41,8 +42,66 @@ class TestMark:\n         with pytest.raises(AttributeError):\n             mark._some_name\n \n+class TestDynamicSkipifCaching:\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+    def test_reevaluate_dynamic_expr_different_globals(self, testdir):\n+        \"\"\"Test that different globals affect skip decision\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_globals1=\"\"\"\n+            import pytest\n+            import sys\n+\n+            condition = sys.version_info.major == 3\n \n-def test_marked_class_run_twice(testdir):\n+            @pytest.mark.skipif(\"condition\")\n+            def test_skip_if_python3():\n+                assert sys.version_info.major != 3\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_globals2=\"\"\"\n+            import pytest\n+            import sys\n+\n+            condition = sys.version_info.major == 2\n+\n+            @pytest.mark.skipif(\"condition\")\n+            def test_skip_if_python2():\n+                assert sys.version_info.major != 2\n+        \"\"\"\n+        )\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n     \"\"\"Test fails file is run twice that contains marked class.\n     See issue#683.\n     \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..31cd735 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -154,6 +154,25 @@ class TestEvaluation:\n \n \n class TestXFail:\n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_rskip.py:2: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_rskip.py:2: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_location_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_rskip=\"\"\"\n+            import pytest\n+\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..ac4f016 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -397,6 +398,31 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486 test case.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+        \n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486 test case.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_dynamic_xfail_no_run(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-8365": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..0085a1b 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,7 +573,36 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+from sklearn.linear_model import RidgeClassifierCV\n+import numpy as np\n+from numpy.testing import assert_array_equal, assert_equal\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values feature\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    y_multitarget = np.array([[1, 1, 1, -1, -1],\n+                              [1, -1, 1, -1, 1],\n+                              [-1, -1, 1, -1, -1]]).transpose()\n+\n+    n_targets_multitarget = y_multitarget.shape[1]\n+    r.fit(x, y_multitarget)\n+    assert r.cv_values_.shape == (n_samples, n_targets_multitarget, n_alphas)\n \n+# Existing test function\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-11281": "",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..996c5fa 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,48 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+import numpy as np\n+import pytest\n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue with OneHotEncoder\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_handle_longer_unknown_strings():\n+    X = np.array(['22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['555555', '4444']).reshape((-1, 1))\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.], [0.,  0.,  1.]]))\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_mixed_string_lengths():\n+    X = np.array(['short', 'longstring']).reshape((-1, 1))\n+    X2 = np.array(['short', 'unknown']).reshape((-1, 1))\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[1.,  0.], [0.,  0.]]))\n+    assert_array_equal(X2, X2_passed)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..5869558 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,7 +598,16 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n-def test_gaussian_mixture_fit():\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=42)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..febe787 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -71,7 +72,18 @@ def test_kernel_pca_consistent_transform():\n     assert_array_almost_equal(transformed1, transformed2)\n \n \n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_indeterminacy():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+\n+    for eigen_solver in (\"auto\", \"arpack\"):\n+        kpca = KernelPCA(n_components=7, kernel='rbf', eigen_solver=eigen_solver, random_state=rng)\n+        transformed_X1 = kpca.fit_transform(X)\n+        transformed_X2 = kpca.fit_transform(X)\n+        \n+        # Check that the transforms are equal up to sign flips\n+        sign_flips = np.sign(transformed_X1[0]) * np.sign(transformed_X2[0])\n+        assert_allclose(transformed_X1, transformed_X2 * sign_flips, atol=1e-7)\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..789c6e3 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,6 +1058,28 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n+def test_pipeline_length():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.svm import SVC\n+\n+    # Simple pipeline with two steps\n+    pipeline = Pipeline([('select', SelectKBest(f_regression, k=10)), ('model', SVC())])\n+    assert len(pipeline) == 2, \"Expected length of 2 for a pipeline with 2 steps\"\n+\n+    # Pipeline with one step\n+    pipeline_single = Pipeline([('model', SVC())])\n+    assert len(pipeline_single) == 1, \"Expected length of 1 for a pipeline with 1 step\"\n+\n+    # Pipeline with no steps should raise an error, test for empty initialization\n+    try:\n+        pipeline_empty = Pipeline([])\n+        len(pipeline_empty)\n+        assert False, \"Expected an error when initializing an empty pipeline\"\n+    except ValueError as e:\n+        assert str(e) == \"Pipeline must have at least one step, got an empty list.\", \"Unexpected error message for empty pipeline\"\n+\n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n@@ -1070,4 +1092,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..14053d4 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,8 +217,12 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n-\n-def test_pipeline():\n+def test_logistic_regression_cv_array_repr():\n+    \"\"\"Test that LogisticRegressionCV's repr works with array parameters.\"\"\"\n+    set_config(print_changed_only=True)\n+    repr_str = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    assert \"Cs=array([0.1, 1.0])\" in repr_str\n+    set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..da3af84 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -15,6 +16,8 @@ from sklearn.ensemble import VotingClassifier, VotingRegressor\n from sklearn.model_selection import GridSearchCV\n from sklearn import datasets\n from sklearn.model_selection import cross_val_score, train_test_split\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.datasets import make_multilabel_classification\n from sklearn.svm import SVC\n from sklearn.multiclass import OneVsRestClassifier\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..856d37f 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,6 +160,35 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+@pytest.mark.parametrize('tol_value', [0.1, 0.5, np.float32(1.0)])\n+@pytest.mark.parametrize('n_components_value', [1, np.int64(5)])\n+def test_gridsearchcv_with_nca(tol_value, n_components_value):\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+    \n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+\n+    params = {'nca__tol': [tol_value], 'nca__n_components': [n_components_value]}\n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+\n+    gs.fit(X, y)\n+\n+@pytest.mark.parametrize('param, value', [('n_components', np.int32(3)),\n+                                          ('max_iter', np.int32(100)),\n+                                          ('tol', np.float32(0.0001))])\n+def test_parameters_valid_types(param, value):\n+    # check that no error is raised when parameters have numpy integer or\n+    # floating types.\n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n+\n+    X = np.arange(12).reshape(4, 3)\n+    y = [1, 1, 2, 2]\n+\n+    nca.fit(X, y)\n+\n \n def test_transformation_dimensions():\n     X = np.arange(12).reshape(4, 3)\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..52af0e7 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,45 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+\n+def test_sparse_csc_fit_support_vectors_empty():\n+    # Additional test case for using CSC sparse matrix format\n+    X_train = sparse.csc_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+\n+def test_different_sparse_data():\n+    # Test with a different sparse dataset\n+    X_train = sparse.csr_matrix([[1, 0, 0],\n+                                 [0, 1, 1],\n+                                 [1, 1, 0]])\n+    y_train = np.array([0.1, 0.2, 0.3])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    # If the support vectors are not empty, this test will simply pass since we're checking non-error conditions\n+    if model.support_vectors_.data.size:\n+        assert model.dual_coef_.data.size > 0\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..6e505bb 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,20 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    expected_repr = (\n+        \"{}(n_repeats=6, n_splits=2, random_state=None)\"\n+        .format(repeated_cv.__class__.__name__)\n+    )\n+    assert repr(repeated_cv) == expected_repr\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..3f7f778 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -112,17 +112,296 @@ def test_automodule_special_members(app):\n         '',\n     ]\n \n+import sys\n+import pytest\n+from .util import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_bases(app):\n+    if sys.version_info < (3, 7):\n+        args = ''\n+    else:\n+        args = '(iterable=(), /)'\n \n-@pytest.mark.sphinx('html', testroot='ext-autodoc',\n-                    confoverrides={'autodoc_mock_imports': ['missing_module',\n-                                                            'missing_package1',\n-                                                            'missing_package2',\n-                                                            'missing_package3',\n-                                                            'sphinx.missing_module4']})\n+    # Assume we have another base class 'Base2' in the target module\n+    options = {'members': None,\n+               'undoc-members': None,\n+               'inherited-members': 'Base, list'}\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList%s' % args,\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n @pytest.mark.usefixtures(\"rollback_sysmodules\")\n def test_subclass_of_mocked_object(app):\n     sys.modules.pop('target', None)  # unload target module to clear the module cache\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "diff --git a/tests/test_environment_indexentries.py b/tests/test_environment_indexentries.py\nindex 9775484..fdb42fc 100644\n--- a/tests/test_environment_indexentries.py\n+++ b/tests/test_environment_indexentries.py\n@@ -15,6 +15,23 @@ from sphinx.testing import restructuredtext\n \n \n @pytest.mark.sphinx('dummy', freshenv=True)\n+def test_symbols_grouping_in_index(app):\n+    text = (\".. index:: @mention\\n\"\n+            \".. index:: \u00a3currency\\n\"\n+            \".. index:: \u2190arrow\\n\"\n+            \".. index:: docutils\\n\"\n+            \".. index:: Python\\n\")\n+    restructuredtext.parse(app, text)\n+    index = IndexEntries(app.env).create_index(app.builder)\n+    assert len(index) == 3\n+    assert index[0] == ('Symbols', [('@mention', [[('', '#index-0')], [], None]),\n+                                    ('\u00a3currency', [[('', '#index-1')], [], None]),\n+                                    ('\u2190arrow', [[('', '#index-2')], [], None])])\n+    assert index[1] == ('D', [('docutils', [[('', '#index-3')], [], None])])\n+    assert index[2] == ('P', [('Python', [[('', '#index-4')], [], None])])\n+\n+import pytest\n+\n def test_create_single_index(app):\n     text = (\".. index:: docutils\\n\"\n             \".. index:: Python\\n\"\n",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..a92f368 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -78,7 +78,46 @@ def test_get_full_qualified_name():\n     domain = StandardDomain(env)\n \n     # normal references\n-    node = nodes.reference()\n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.ext.autodoc.importer import import_module\n+import sphinx.domains.rst\n+\n+...\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = app.env.get_doctree('index')\n+    assert_node(doctree, (addnodes.index,[\n+        addnodes.desc, ([\n+            addnodes.desc_signature, ([\n+                addnodes.desc_name, \"-j\"\n+            ],[\n+                addnodes.desc_addname, \"[=N]\"\n+            ])\n+        ],[\n+            addnodes.desc_content, ()\n+        ])\n+    ]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = app.env.get_doctree('index')\n+    assert_node(doctree, (addnodes.index,[\n+        addnodes.desc, ([\n+            addnodes.desc_signature, ([\n+                addnodes.desc_name, \"[enable\"\n+            ],[\n+                addnodes.desc_addname, \"=]PATTERN\"\n+            ])\n+        ],[\n+            addnodes.desc_content, ()\n+        ])\n+    ]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n     assert domain.get_full_qualified_name(node) is None\n \n     # simple reference to options\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..4ee6afe 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -28,6 +29,7 @@ try:\n     pyximport.install()\n except ImportError:\n     pyximport = None\n+import pytest\n \n \n def do_autodoc(app, objtype, name, options=None):\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..20cdd5d 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -16,6 +17,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n import pytest\n \n from sphinx.util.typing import restify, stringify\n+from struct import Struct\n \n \n class MyClass1:\n@@ -39,6 +41,7 @@ class BrokenType:\n \n \n def test_restify():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(int) == \":class:`int`\"\n     assert restify(str) == \":class:`str`\"\n     assert restify(None) == \":obj:`None`\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..44117b2 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,39 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_section(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other Parameters\n+----------------\n+y : float\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:Other Parameters: **y** (*float*)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:param y:\n+:type y: float\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..b5d4ada 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,10 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from pathlib import Path\n+from sphinx.testing.util import SphinxTestApp\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..fece3dc 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -321,7 +321,28 @@ def test_mul():\n         h2 = _af_rmuln(*a[:i + 1])\n         assert h == h2\n \n+def test_permutation_non_disjoint_cycles():\n+    p1 = Permutation([[0, 1], [0, 1]])\n+    # Expect the identity permutation since the cycles should cancel out\n+    assert p1 == Permutation([0, 1])\n \n+    p2 = Permutation([[1, 2], [2, 1]])\n+    # Expect identity permutation for similar reason\n+    assert p2 == Permutation([0, 1, 2])\n+\n+    p3 = Permutation([[0, 1], [1, 2]])\n+    # Result of first swapping 0 and 1, then 1 and 2\n+    assert p3 == Permutation([1, 0, 2])\n+\n+    p4 = Permutation([[1, 2, 3], [1, 3]])\n+    # (1 2 3) followed by (1 3) should result in (1 2)\n+    assert p4 == Permutation([0, 2, 1, 3])\n+\n+    p5 = Permutation([[0, 2], [0, 1], [2, 1]])\n+    # Applying cycles left-to-right: (0 2), (0 1), then (2 1)\n+    assert p5 == Permutation([2, 0, 1])\n+\n+    \n def test_args():\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..096927f 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -447,9 +448,29 @@ def test_sparse_matrix():\n     assert A.row_list() == [(0, 0, 18), (0, 9, 12), (1, 4, 18), (2, 7, 16), (3, 9, 12), (4, 2, 19), (5, 7, 16), (6, 2, 12), (9, 7, 18)]\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n-\n-\n-def test_transpose():\n+def test_hstack_vstack_behavior():\n+    from sympy.matrices import Matrix\n+\n+    # Testing hstack with 0xN matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # Testing hstack with 1xN matrices to verify correct behavior\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    # Testing vstack with Nx0 matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(1, 0)\n+    M3 = SparseMatrix.zeros(2, 0)\n+    M4 = SparseMatrix.zeros(3, 0)\n+    assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (6, 0)\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n         SparseMatrix(((1, 3), (2, 4)))\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..9962518 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -82,6 +82,10 @@ def check(a, exclude=[], check_attr=True):\n #================== core =========================\n \n \n+import sympy\n+from sympy import Float, Symbol\n+import pickle\n+\n def test_core_basic():\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n@@ -115,6 +119,14 @@ def test_core_relational():\n         check(c)\n \n \n+def test_sympy_expression_pickle_compatibility():\n+    # Test pickling and unpickling of sympy expressions containing floats\n+    expr = sympy.symbols(\"x\") + 1.0\n+    # Simulate the pickling in Python 2 (protocol 2) and unpickling in Python 3\n+    pickled_expr = pickle.dumps(expr, protocol=2)\n+    unpickled_expr = pickle.loads(pickled_expr)\n+    assert expr == unpickled_expr\n+\n def test_core_add():\n     x = Symbol(\"x\")\n     for c in (Add, Add(x, 4)):\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..a694626 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -267,6 +267,18 @@ def test_coth():\n \n     assert coth(x*I) == -cot(x)*I\n \n+def test_coth_log_tan_subs_issue():\n+    x = Symbol('x')\n+    vals = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in vals:\n+        e = coth(log(tan(x)))\n+        # We expect the code to run without NameError\n+        try:\n+            e_sub = e.subs(x, val)\n+            assert e_sub is not None  # Ensure substitution happened\n+        except Exception as exc:\n+            assert False, f\"Substitution failed for x={val} with exception {exc}\"\n+\n     assert coth(k*pi*I) == -cot(k*pi)*I\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..88f4048 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,19 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    expected_result = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected_result\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..f6139ea 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -620,46 +620,46 @@ def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n     assert latex(s1) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n+    latex_str = r'[1, 2, 1, 2, \\ldots]'\n     assert latex(s2) == latex_str\n \n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4\\right\\]'\n+    latex_str = r'[0, 1, 4]'\n     assert latex(s3) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1\\right\\]'\n+    latex_str = r'[1, 2, 1]'\n     assert latex(s4) == latex_str\n \n     s5 = SeqFormula(a**2, (-oo, 0))\n     s6 = SeqPer((1, 2), (-oo, 0))\n \n-    latex_str = r'\\left\\[\\ldots, 9, 4, 1, 0\\right\\]'\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n     assert latex(s5) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 2, 1, 2, 1\\right\\]'\n+    latex_str = r'[\\ldots, 2, 1, 2, 1]'\n     assert latex(s6) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5, 11, \\ldots\\right\\]'\n+    latex_str = r'[1, 3, 5, 11, \\ldots]'\n     assert latex(SeqAdd(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5\\right\\]'\n+    latex_str = r'[1, 3, 5]'\n     assert latex(SeqAdd(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 11, 5, 3, 1\\right\\]'\n+    latex_str = r'[\\ldots, 11, 5, 3, 1]'\n     assert latex(SeqAdd(s5, s6)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4, 18, \\ldots\\right\\]'\n+    latex_str = r'[0, 2, 4, 18, \\ldots]'\n     assert latex(SeqMul(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4\\right\\]'\n+    latex_str = r'[0, 2, 4]'\n     assert latex(SeqMul(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n+    latex_str = r'[\\ldots, 18, 4, 2, 0]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..f47ca8f 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..a0d99e1 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,10 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import Symbol, symbols\n+from sympy.matrices import MatrixSymbol\n+from sympy.printing.pretty import pretty\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n@@ -6121,8 +6125,24 @@ def test_MatrixSymbol_printing():\n     assert pretty(A - B) == \"-B + A\"\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n-\n-def test_degree_printing():\n+def test_issue_14814_pretty_print_MatAdd():\n+    # Test for the specific issue of pretty printing MatAdd where string arguments caused errors\n+    \n+    # Test addition of two MatrixSymbols, one with special character '*'\n+    n = Symbol('n', integer=True)  # Define n symbol for size of MatrixSymbol\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    \n+    # Verify pretty printing does not raise errors and outputs as expected\n+    assert pretty(x + y_star) == \"x + y*\"\n+    \n+    # Additional test cases for negative and multiplication combinations\n+    a = symbols('a')\n+    y = MatrixSymbol('y', n, n)\n+    \n+    assert pretty(-a*x + -2*y*y) == \"-a*x - 2*y**2\"\n+    assert pretty(y_star - x) == \"-x + y*\"\n+    assert pretty(-y_star) == \"-y*\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..aa0ff25 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -727,8 +727,31 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n+import sympy as sy\n+from sympy.utilities.lambdify import lambdify\n+from sympy.testing.pytest import raises\n \n-def test_python_keywords():\n+def test_curly_matrix_symbol_issue():\n+    # Re-creating the scenario described in the issue\n+\n+    # Create symbols with curly braces\n+    curlyx = sy.symbols(\"{x}\")\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # Create lambdified functions\n+    curlyScalarId = lambdify(curlyx, curlyx)\n+    vectorId = lambdify(curlyv, curlyv)\n+\n+    # Testing lambdify on scalar with curly braces\n+    assert curlyScalarId(1) == 1\n+\n+    # Testing lambdify on MatrixSymbol with curly braces\n+    # This was the issue scenario in the bug report where it failed\n+    assert vectorId([[1], [2]]) == [[1], [2]]\n+\n+    # Now testing with dummifying to see if it resolves correctly\n+    vectorIdDummified = lambdify(curlyv, curlyv, dummify=True)\n+    assert vectorIdDummified([[3], [4]]) == [[3], [4]]\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..4ae3f55 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,6 +24,13 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Max(x, y, z)*Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n \n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..a51903b 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n@@ -1726,7 +1728,14 @@ def test_latex_UnevaluatedExpr():\n     assert latex(x*he) == r\"x \\frac{1}{x}\"\n \n \n-def test_MatrixElement_printing():\n+def test_matrix_expression_indexed_printing():\n+    # Test case for verifying fix of the latex indexed matrix-expression issue\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Ensure no double subscripts in the LaTeX output\n+    expected_output = r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+    assert latex((M*N)[i, j]) == expected_output\n     # test cases for issue #11821\n     A = MatrixSymbol(\"A\", 1, 3)\n     B = MatrixSymbol(\"B\", 1, 3)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..d15631e 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -20,8 +21,33 @@ def test_idiff():\n     assert True in [sol.diff(x, 3).equals(explicit) for sol in solve(circ, y)]\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n+def test_idiff_issue_cases():\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test the case where Eq is used (x-dependant equalities)\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x) == (x + 1) * exp(x - y) / (y + 1)\n+    \n+    # Test with function notation\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x)) / (f(x) + 1)\n+    \n+    # Test with multiple dependent variables\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    \n+    # Test differentiating function equivalents g(x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+    \n+    # New test cases for robustness and coverage\n+    circ = x**2 + y**2 - 4\n+    assert idiff(circ, y, x, 2).simplify() is not None # Ensure higher derivatives can be computed\n+    eq = Eq(f(x)**2 + y**3 - x, 0)\n+    assert idiff(eq, [f(x), y], x) is not None # Mixed equation form with Eq and function\n \n-def test_intersection():\n+# Ensure existing tests are unaffected and place the new cases toward the top\n+def test_idiff():\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..d7896c5 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,7 +582,19 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n-def test_empty_f_code():\n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n+def test_ccode_unused_array_arg_fix():\n+    x = MatrixSymbol('x', 2, 1)\n+    # 'x' does not appear in the output\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0], [2.0]]))\n+    expected = 1.0\n+    assert result == expected\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..ca5689b 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,24 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+def test_intersection_duplicates_issue():\n+    x = Symbol('x')\n+    \n+    # Test cases where duplicates are removed\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+\n+    # Test where variable symbol is involved\n+    result = Intersection({1}, {1}, {x})\n+    assert result == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True)) or result == Intersection({1}, {x})\n+\n+    # Testing with multiple sets and duplicates\n+    assert Intersection({1, 1, 2}, {2, 3, 3}, {2, x}) == Intersection({2}, {x})\n+\n+    # Test with EmptySet\n+    assert Intersection({1, 1}, S.EmptySet) == S.EmptySet\n \n-def test_issue_9623():\n+    # Simplified/canonical form tests\n+    assert Intersection({1, 2}, {2, 2, 3}, {2, 3}) == {2}\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..f5de82d 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,8 +1,11 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n )\n-from sympy import eye\n+from sympy import eye, Identity, Matrix, symbols\n+from sympy.utilities.pytest import raises\n+import numpy as np\n from sympy.abc import x, i, j, a, b, c, d\n from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbrt, Sqrt\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n@@ -25,8 +28,23 @@ def test_numpy_piecewise_regression():\n     p = Piecewise((1, x < 0), (0, True))\n     assert NumPyPrinter().doprint(p) == 'numpy.select([numpy.less(x, 0),True], [1,0], default=numpy.nan)'\n \n+def test_lambdify_identity_matrix():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    n = symbols('n', integer=True)\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    I = Identity(2)\n+    f = lambdify(A, A + I)\n+\n+    a = np.array([[1, 2], [3, 4]])\n+    expected_result = np.array([[2, 2], [3, 5]])\n+    \n+    np.testing.assert_array_equal(f(a), expected_result)\n \n-def test_sum():\n+    B = MatrixSymbol(\"B\", n, n)\n+    with raises(NotImplementedError):\n+        lambdify(B, B + Identity(n))  # Should raise error\n     if not np:\n         skip(\"NumPy not installed\")\n \n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17655": "",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..1af7a49 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1899,7 +1899,30 @@ def test_expr():\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n \n \n+from sympy import symbols, sympify\n+from sympy.testing.pytest import raises\n+\n+def test_repr_equality_issue():\n+    # Verify issue with repr causing incorrect eval behavior\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    \n+    x = symbols('x')\n+    # This should no longer raise an error after the issue is fixed\n+    try:\n+        _ = x == C()\n+    except AttributeError as e:\n+        raise AssertionError(\"Equality check raised an AttributeError unexpectedly\") from e\n+\n+    # A class with repr returning 'x' should not be equal to a symbol 'x'\n+    class ReprX:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (x == ReprX()) is False\n+\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..86db0e0 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,25 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_issue_18186_diophantine_permute_symbol_order():\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy.abc import x, y\n \n-def test_general_pythagorean():\n+    equation = y**4 + x**4 - 2**4 - 3**4\n+\n+    # Original test cases for issue verification\n+    assert diophantine(equation, syms=(x, y), permute=True) == \\\n+           {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(equation, syms=(y, x), permute=True) == \\\n+           {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+\n+    # Additional test for diagonal symmetry check\n+    assert diophantine(equation, syms=(x, y), permute=False) == {(2, 3)}\n+    assert diophantine(equation, syms=(y, x), permute=False) == {(3, 2)}\n+\n+    # Verifying the base solution order\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(x, y), permute=False) == {(2, 3)}\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(y, x), permute=False) == {(3, 2)}\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..b0254e9 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -60,7 +61,14 @@ def test_PostIncrement():\n     assert ccode(p) == '(x)++'\n \n \n-def test_sizeof():\n+def test_sizeof_atoms():\n+    typename = String('unsigned int')\n+    sz = sizeof(typename)\n+    assert sz.atoms() == {typename}\n+\n+    typename2 = int64\n+    sz2 = sizeof(typename2)\n+    assert sz2.atoms() == {typename2}\n     typename = 'unsigned int'\n     sz = sizeof(typename)\n     assert ccode(sz) == 'sizeof(%s)' % typename\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..2f4a688 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,17 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_single_element_BlockDiagMatrix():\n+    from sympy import Matrix, BlockDiagMatrix\n+    # Create a Matrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    # Create a BlockDiagMatrix with a single element\n+    D = BlockDiagMatrix(M)\n+    # Convert back to a regular Matrix\n+    B = Matrix(D)\n+    # Assert the conversion works correctly\n+    assert B == M\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..3fb93a3 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -83,7 +84,22 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+\n+def test_block_matrix_element_fetching():\n+    from sympy import pprint\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    \n+    # Initial block matrix check\n+    assert C.blocks[0, 0] == A\n+    assert C.blocks[1, 0] == B\n+\n+    # Check that a symbolic index does not incorrectly simplify\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+    assert C[0, 0] == A[0, 0]  # when i = 0\n+    assert C[1, 0] == B[0, 0]  # when i = 1\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..45e43d6 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -317,7 +317,34 @@ def test_sign():\n     assert sign(d).func is sign or sign(d) == 0\n \n \n-def test_as_real_imag():\n+def test_sign_rewrite_abs():\n+    from sympy import Abs, Piecewise, Eq, Symbol, nan, Function\n+\n+    x = Symbol('x')\n+    \n+    # Test case for real positive number\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+\n+    # Test case for complex function\n+    f = Function('f')\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x)/Abs(f(x)), True))\n+\n+    # Test case for numerical zero\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # Test case for rewrite and simplify\n+    assert (sign(0) / Abs(0)).rewrite(Abs) == nan\n+\n+    # Test case for abstract zero (both real and complex considerations)\n+    y = Symbol('y', real=True)\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+\n+    # Symbol that is zero: should return 0, not nan\n+    zero_symbol = Symbol('zero_symbol', zero=True)\n+    assert sign(zero_symbol).rewrite(Abs) == 0\n+\n+    # Ensuring rewrite does not alter existing zero cases:\n+    assert sign(0).rewrite(Abs) == 0\n     n = pi**1000\n     # the special code for working out the real\n     # and complex parts of a power with Integer exponent\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..233e247 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,6 +471,9 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+from sympy import S\n+\n def test_partitions():\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n@@ -514,6 +517,14 @@ def test_partitions():\n         assert i == RGS_enum(n)\n \n \n+def test_partitions_unique_dictionaries():\n+    \"\"\" Ensure that modifying one partition doesn't affect others,\n+        implying that partitions are unique.\"\"\"\n+    partition_list = [p.copy() for p in partitions(5)]\n+    partition_list[0][5] = 0  # Modify the first partition\n+    for p in partition_list[1:]:\n+        assert p.get(5, 0) != 0  # Ensure others have not been modified\n+\n def test_binary_partitions():\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n",
  "sympy__sympy-20212": "",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..728d62d 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,7 +1,8 @@\n-from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n+\n+from sympy import (Abs, Add, Function, Number, Rational, S, Symbol, joule,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n-                                 volume, kilometer)\n+                                 volume, kilometer, joule, minute)\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n@@ -46,7 +47,20 @@ def test_convert_to():\n     assert speed_of_light.convert_to(m) == speed_of_light\n \n \n-def test_Quantity_definition():\n+def test_issue_convert_to_orthogonal_units():\n+    expr = joule * second\n+    conv = convert_to(expr, joule)\n+    assert conv == expr  # Verify that orthogonal units remain unchanged\n+\n+    # Additional test cases from the issue:\n+    conv_full = convert_to(expr, joule * second)\n+    assert conv_full == joule * second  # Entire unit expression remains unchanged\n+\n+    conv_base = convert_to(expr, kg * m**2 / s)\n+    assert conv_base == kg * m**2 / s  # Conversion to base units correctly\n+\n+    conv_minute = convert_to(expr, minute)\n+    assert conv_minute == joule * minute / 60  # Conversion to minutes correctly\n     q = Quantity(\"s10\", abbrev=\"sabbr\")\n     q.set_global_relative_scale_factor(10, second)\n     u = Quantity(\"u\", abbrev=\"dam\")\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..76fc396 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,30 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import sympy\n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_slots_and_dicts():\n+    # Test that the Symbol instances do not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    \n+    # Ensure that __slots__ is as expected\n+    assert hasattr(s, '__slots__')\n+    assert s.__slots__ == ('name',)\n+    \n+    # Attempting to set an arbitrary attribute should raise an AttributeError\n+    with raises(AttributeError):\n+        s.new_attribute = 42\n+\n+    # Test Symbol objects with different assumptions to ensure consistency\n+    s_real = Symbol('s', real=True)\n+    assert not hasattr(s_real, '__dict__')\n+    assert s_real.__slots__ == ('name',)\n+    with raises(AttributeError):\n+        s_real.another_attribute = 'error'\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..4fc7ae1 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n                    atan, atan2, nan, Symbol, re, im, sign)\n from sympy.abc import w, x, y, z\n@@ -161,7 +162,17 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_fix():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x', real=True)\n+    J = Integral(sin(x) * exp(-a*x), (x, 0, oo))\n+    \n+    # Test simplifying the result of the integral under the assumption that a is positive\n+    assert refine(J.doit(), Q.positive(a)) == 1 / (a**2 + 1)\n+    \n+    # Test refine on abs and arg separately to verify issue\n+    assert refine(Abs(a), Q.positive(a)) == a\n+    assert refine(arg(a), Q.positive(a)) == 0\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..6bd1c80 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,9 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n+from sympy.core.kind import MatrixKind, NumberKind, UndefinedKind\n+from sympy.matrices import MatrixSymbol\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -39,7 +43,24 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n-def test_Matrix_kind():\n+def test_Derivative_kind_issue():\n+    A = MatrixSymbol('A', 2, 2)\n+    d = Derivative(A, comm_x)\n+    assert d.kind is MatrixKind(NumberKind)\n+\n+    # Additional test cases to verify behavior with different symbols\n+    B = MatrixSymbol('B', 3, 3)\n+    d2 = Derivative(B, comm_x)\n+    assert d2.kind is MatrixKind(NumberKind)\n+\n+    n = Symbol('n', integer=True)  # A scalar/symbol\n+    d3 = Derivative(n, comm_x)\n+    assert d3.kind is NumberKind\n+\n+    # Test with undefined kind when using noncommutative symbols\n+    C = MatrixSymbol('C', 2, 2)\n+    d4 = Derivative(C, noncomm_x)\n+    assert d4.kind is UndefinedKind\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n         m = cls.zeros(3, 2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..8c097ec 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -105,8 +105,20 @@ def test_monomials():\n \n     raises(ValueError, lambda: set(itermonomials([x, y], [0, 1], [1, 2])))\n     raises(ValueError, lambda: set(itermonomials([x, y, z], [0, 0, 3], [0, 1, 2])))\n-\n-    assert set(itermonomials([x], [0])) == {S.One}\n+    from sympy import symbols\n+    from sympy.polys.monomials import itermonomials\n+    \n+    x, y, z = symbols('x y z')\n+    \n+    # Test case for issue where min_degrees should generate all monomials with total degree of 3\n+    assert set(itermonomials([x, y, z], 3, 3)) == {x**3, y**3, z**3, x*y**2, x*z**2, y*x**2, y*z**2,\n+                                                   z*x**2, z*y**2, x**2*y, x**2*z, y**2*x, y**2*z,\n+                                                   z**2*x, z**2*y, x*y*z}\n+    \n+    # Similar test to ensure consistency with different max/min degree values\n+    assert set(itermonomials([x, y, z], 4, 3)) >= {x**3, y**3, z**3, x*y**2, x*z**2, y*x**2,\n+                                                    y*z**2, z*x**2, z*y**2, x**2*y, x**2*z,\n+                                                    y**2*x, y**2*z, z**2*x, z**2*y, x*y*z}\n     assert set(itermonomials([x], [1])) == {S.One, x}\n     assert set(itermonomials([x], [2])) == {S.One, x, x**2}\n     assert set(itermonomials([x], [3])) == {S.One, x, x**2, x**3}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..fdf3418 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -45,6 +46,13 @@ def test_solve_poly_system():\n         [x + x*y - 3, y + x*y - 4], x, y) == [(-3, -2), (1, 2)]\n \n     raises(NotImplementedError, lambda: solve_poly_system([x**3 - y**3], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], (x, y)))\n+\n+    # Additional test cases to ensure the fix covers one variable\n+    # properly with the other leading to infinite solutions\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7057531 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n",
  "sympy__sympy-22840": "",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..c3977c0 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,8 +38,14 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n-\n-def test_issue_18361():\n+def test_issue_empty_array_construction():\n+    from sympy.tensor.array import ImmutableDenseNDimArray, MutableDenseNDimArray, ImmutableSparseNDimArray, MutableSparseNDimArray\n+    mutable_array_types = [MutableDenseNDimArray, MutableSparseNDimArray]\n+    for ArrayType in array_types + mutable_array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n     C = Array([(x + x**2)/(x*sin(y)**2 + x*cos(y)**2), 2*sin(x)*cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..68a6582 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1174,6 +1174,27 @@ def test_scipy_polys():\n                     )\n \n \n+import inspect\n+from sympy import lambdify\n+\n+\n+def test_lambdify_single_element_tuple():\n+    # Test single-element tuple\n+    f1 = lambdify([], (1,))\n+    assert f1() == (1,)\n+\n+    # Check if generated source code correctly retains the single-element tuple\n+    source_code = inspect.getsource(f1)\n+    assert 'return (1,)' in source_code\n+\n+    # Test with tuple of two elements, as a control case\n+    f2 = lambdify([], (1, 2))\n+    assert f2() == (1, 2)\n+\n+    # Check if generated source code correctly handles two-element tuple\n+    source_code_two_elements = inspect.getsource(f2)\n+    assert 'return (1, 2)' in source_code_two_elements\n+\n \n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..d70a612 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,11 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy.core.numbers import E\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity\n+from sympy.physics.units.systems.si import SI\n+from sympy import exp, Dimension\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n@@ -541,6 +546,27 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    # Setup quantities with dimensions\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    # Test expression is dimensionless\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    # Test that the exponential expression is handled correctly\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..b822043 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,36 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_issue_24142():\n+    # Test for original reported issue: ensure complete expansion\n+    U = Operator('U')\n+    V = Operator('V')\n+    P = TensorProduct(2*U - V, U + V)\n+    result = P.expand(tensorproduct=True)\n+    assert result == TensorProduct(2*U, U) + TensorProduct(2*U, V) - TensorProduct(V, U) - TensorProduct(V, V)\n+\n+    # Additional test cases ensuring that nested tensor product factors with scalar multiples are expanded correctly\n+    A = Operator('A')\n+    B = Operator('B')\n+    C = Operator('C')\n+    \n+    # Case with different scalars\n+    P1 = TensorProduct(3*A + B, 4*B + C)\n+    result1 = P1.expand(tensorproduct=True)\n+    expected1 = 3*TensorProduct(A, 4*B) + 3*TensorProduct(A, C) + TensorProduct(B, 4*B) + TensorProduct(B, C)\n+    assert result1 == expected1\n+\n+    # Case with multiple scalar factors\n+    P2 = TensorProduct(5*(A + B), 2*(A + C))\n+    result2 = P2.expand(tensorproduct=True)\n+    expected2 = 10*TensorProduct(A, A) + 10*TensorProduct(A, C) + 10*TensorProduct(B, A) + 10*TensorProduct(B, C)\n+    assert result2 == expected2\n+\n+    # Confirm fix is consistent with qapply by propagating the correct expansion\n+    expr = qapply(JzKet(1, 0) * TensorProduct(3*U*V, V))\n+    expanded_expr = expr.expand(tensorproduct=True)\n+    expected_expr = qapply(JzKet(1, 0) * (TensorProduct(3*U*V, V)))\n+    assert expanded_expr == expected_expr\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..8ed66fb 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,6 +563,55 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter, SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+    \n+    # Expression to validate\n+    expr_original = A1*T1 + V1\n+    # should not throw ValueError here if the issue is fixed\n+    SI._collect_factor_and_dimension(expr_original)\n+    \n+    # Adding another test with different quantity names\n+    V2 = Quantity('V2', dimension=velocity, scale_factor=10 * meter / second)\n+    A2 = Quantity('A2', dimension=acceleration, scale_factor=3 * meter / second**2)\n+    T2 = Quantity('T2', dimension=time, scale_factor=4 * second)\n+    \n+    expr_additional = A2*T2 + V2\n+    # Testing if addition is correctly handled\n+    SI._collect_factor_and_dimension(expr_additional)\n+\n+    # Test with zero scale factor for velocity\n+    V3 = Quantity('V3', dimension=velocity, scale_factor=0 * meter / second)\n+    expr_zero_velocity = A1*T1 + V3\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr_zero_velocity)\n+\n+    # Test with zero scale factor for the entire expression\n+    expr_zero_total = A1*T1 - V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr_zero_total)\n+    \n+    # Test with dimensional mismatch to assure ValueError is raised\n+    L1 = Quantity('L1', dimension=Dimension(1), scale_factor=1 * meter)\n+    expr_mismatch = A1*T1 + L1\n+    try:\n+        SI._collect_factor_and_dimension(expr_mismatch)\n+        assert False, \"ValueError was not raised for dimensional mismatch\"\n+    except ValueError:\n+        pass\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..176a82f 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, milli, W\n+from sympy import S\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +29,11 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Additional Test Cases for the milli prefix\n+    assert milli * W == W / 1000  # Testing milli prefix with Watts\n+    assert milli * meter == meter / 1000  # Testing milli prefix with meters\n+    assert milli * length == length / 1000  # Testing milli prefix with a general length unit\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..f4e2a02 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -174,6 +174,18 @@ class SubBase(Base):\n     sub_id = models.IntegerField(primary_key=True)\n \n \n+class Parent(models.Model):\n+    first_name = models.CharField(max_length=80)\n+    email = models.EmailField(unique=True)\n+\n+    class Meta:\n+        ordering = ['-pk']\n+\n+\n+class Child(Parent):\n+    pass\n+\n+\n class GrandParent(models.Model):\n     first_name = models.CharField(max_length=80)\n     last_name = models.CharField(max_length=80)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..75bef50 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -341,7 +341,33 @@ class OrderingTests(TestCase):\n                 \"Article 1\",\n             ],\n             attrgetter(\"headline\")\n-        )\n+        )   \n+\n+    def test_self_referential_fk_ordering(self):\n+        # Create instances of Author which can be related to themselves\n+        author1 = Author.objects.create(name='Author 1')\n+        author2 = Author.objects.create(name='Author 2', editor=author1)\n+        author3 = Author.objects.create(name='Author 3', editor=author2)\n+\n+        # Create Articles to which these authors are related\n+        article1 = Article.objects.create(author=author1, headline='Article 1')\n+        article2 = Article.objects.create(author=author2, headline='Article 2')\n+        article3 = Article.objects.create(author=author3, headline='Article 3')\n+\n+        # Ordering by self-referential foreign key `author__editor`\n+        queryset = Article.objects.filter(author__isnull=False).order_by('author__editor')\n+        expected = [\"Article 2\", \"Article 1\", \"Article 3\"]  # Expect based on the defined relationships\n+        self.assertQuerysetEqual(queryset, expected, attrgetter('headline'))\n+\n+        # Checking ordering by self-referential foreign key `author__editor_id`\n+        queryset = Article.objects.filter(author__isnull=False).order_by('author__editor_id')\n+        expected = [\"Article 1\", \"Article 2\", \"Article 3\"]\n+        self.assertQuerysetEqual(queryset, expected, attrgetter('headline'))\n+\n+        # Reverse order check\n+        queryset = Article.objects.filter(author__isnull=False).order_by('-author__editor_id')\n+        expected = [\"Article 3\", \"Article 2\", \"Article 1\"]\n+        self.assertQuerysetEqual(queryset, expected, attrgetter('headline'))\n \n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..bb7a940 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,8 +3201,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    def test_boundfield_subwidget_checkboxselectmultiple_id_for_label(self):\n+        \"\"\"\n+        The id_for_label should respect the id set in ChoiceWidget.options\n+        for CheckboxSelectMultiple subwidgets.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_%s'})\n+            )\n \n-    def test_boundfield_widget_type(self):\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..65014cc 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,50 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+import unittest\n+from django.test import TestCase, override_settings\n+from django.contrib.auth.models import Permission\n+from django.apps import apps\n+from django.core.management.commands.migrate import Command as MigrateCommand\n+from unittest.mock import patch\n+\n+class CustomDBRouter:\n+    \"\"\"Route all database operations to the specified database.\"\"\"\n+\n+    def db_for_read(self, model, **hints):\n+        database = hints.get('using') or 'default'\n+        return database\n+\n+    def db_for_write(self, model, **hints):\n+        database = hints.get('using') or 'default'\n+        return database\n+\n+@override_settings(DATABASE_ROUTERS=[CustomDBRouter()])\n+class MigrateCommandDatabaseParameterTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    @patch('django.core.management.commands.migrate.MigrateCommand.handle')\n+    def test_migrate_command_respects_database_parameter(self, mock_handle):\n+        # Attempt to migrate and check if the database parameter is respected\n+        migrate_command = MigrateCommand()\n+        migrate_command.execute(database='other')\n+        \n+        # Verify if the handle method was called with the correct database\n+        mock_handle.assert_called_once()\n+        _, kwargs = mock_handle.call_args\n+        self.assertEqual(kwargs['database'], 'other')\n+\n+    def test_permission_creation_on_specified_database(self):\n+        # Ensure permissions are only created on the specified database\n+        Permission.objects.using(\"other\").delete()\n+        Permission.objects.using(\"default\").delete()\n+\n+        apps_config = apps.get_app_config(\"auth\")\n+        with self.assertNumQueries(6, using=\"other\") as captured_queries:\n+            Permission.objects.using(\"other\").create()\n+\n+        self.assertIn(\"INSERT INTO\", captured_queries.captured_queries[-1][\"sql\"].upper())\n+        self.assertGreater(Permission.objects.using(\"other\").count(), 0)\n+        self.assertEqual(Permission.objects.using(\"default\").count(), 0)\n",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..4fb5cc0 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,10 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm, Normalize\n+import numpy as np\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -658,7 +662,33 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n-def test_colorbar_get_ticks_2():\n+def test_colorbar_update_after_changing_norm():\n+    # Create random data and plot it using imshow()\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Initially, the scale should be linear\n+    assert cb.ax.yaxis.get_scale() == 'linear'\n+\n+    # Change the norm to logarithmic and update the colorbar\n+    plot.set_norm(LogNorm())\n+    cb.update_normal(plot)\n+    cb.set_ticks(cb.ax.get_yticks())  # Force recalculation of ticks\n+\n+    # After changing to LogNorm, the scale should be log\n+    assert cb.ax.yaxis.get_scale() == 'log'\n+\n+    # Update the plot again with a Normalize instance\n+    plot.set_norm(Normalize(vmin=0, vmax=1))\n+    cb.update_normal(plot)\n+    cb.set_ticks(cb.ax.get_yticks())  # Force recalculation of ticks\n+\n+    # After changing to Normalize, the scale should return to linear\n+    assert cb.ax.yaxis.get_scale() == 'linear'\n+\n+    plt.close(fig)\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..1d9f132 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3044,8 +3044,14 @@ class TestDataset:\n         x0 = y[0].to_unstacked_dataset(\"features\")\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n-\n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    \n+    def test_to_unstacked_dataset_single_dim_variables(self):\n+        # single dimension: regression test for issue\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..9c4abc3 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,39 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+@pytest.mark.parametrize(\"transform_output\", [\"default\", \"pandas\"])\n+def test_feature_union_with_custom_transformer(transform_output):\n+    \"\"\"Test FeatureUnion with a custom transformer that aggregates data.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+\n+    # Sample data preparation\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+    \n+    # Custom transformer that aggregates data\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Configure output style for the transformation\n+    set_config(transform_output=transform_output)\n+\n+    # FeatureUnion with the custom transformer\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+\n+    # Perform transformation and check results based on the output setting\n+    transformed_data = union.fit_transform(data)\n+    if transform_output == \"pandas\":\n+        assert isinstance(transformed_data, pd.DataFrame)\n+    else:\n+        assert not isinstance(transformed_data, pd.DataFrame)\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..3e059d5 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -132,6 +132,62 @@ def test_decorators(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_with_undoc_member_option(app):\n+    options = {\"members\": None, \"inherited-members\": True, \"undoc-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n     options = {\"members\": None}\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..a945a4f 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,16 +1,28 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n     Symbol, coth, pi, log, count_ops, sqrt, E, expand, Piecewise)\n-\n-from sympy.core.compatibility import long\n+from sympy import Rational, acos\n from sympy.utilities.pytest import XFAIL\n \n from sympy.abc import x, y, z, t, a, b, c, d, e, f, g, h, i, k\n \n \n-\n-def test_trigsimp1():\n+def test_issue_with_rational_trig_expressions():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r = t1.dot(t2)\n+    \n+    assert trigsimp(r) == cos(Rational(1, 25) - Rational(1, 50))\n+    \n+    # Verifying the simplification of a combination of trigonometric functions\n+    r2 = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert r2.simplify() == cos(Rational(1, 25) - Rational(1, 50))\n+    \n+    # Check if acos can be simplified correctly\n+    acos_r2 = acos(r2)\n+    assert acos_r2.simplify() == acos(cos(Rational(1, 25) - Rational(1, 50)))\n     x, y = symbols('x,y')\n \n     assert trigsimp(1 - sin(x)**2) == cos(x)**2\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..e7ea2a0 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,27 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n-\n-def test_units():\n+def test_sum_pretty_alignment_issue():\n+    from sympy import Sum, pprint\n+    from sympy.abc import x\n+\n+    # The expression we are testing\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    # The expected output as a unicode string\n+    expected_output = u(\"\"\"\\\n+  \u221e       \n+ ___       \n+ \u2572         \n+  \u2572    x   \n+  \u2571    + 3 \n+ \u2571         \n+ \u203e\u203e\u203e       \n+x = 1      \n+\"\"\")\n+\n+    # Check if the pretty print aligns x and +3 correctly\n+    assert upretty(expr) == expected_output\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..b587b65 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,24 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    # Original test cases\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+  \n+    # Additional test cases\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = [1, 2, 3, 4, 1]\n+    raises(RuntimeError, lambda: [f.pop(0) for i in uniq(f)])\n+\n+    f = ['a', 'b', 'b', 'c', 'a']\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..5cd6cdf 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,9 +1,11 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from django.db.models import Max\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n",
  "django__django-15320": "",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..0e6185e 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,7 +153,26 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_multilevel_filter_select_related(self):\n+        # This test checks whether the multilevel annotations and selects related work correctly\n+        with self.assertNumQueries(3):\n+            pool_styles = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(pool_styles[0].tournament_pool.tournament, pool_styles[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            tournaments = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(tournaments[0].style.another_pool, self.p3)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +183,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..bc3cd3c 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -5,7 +6,8 @@ from pathlib import Path\n import platform\n from threading import Timer\n from types import SimpleNamespace\n-import warnings\n+import pickle\n+import matplotlib.pyplot as plt\n \n import numpy as np\n import pytest\n@@ -14,7 +16,8 @@ from PIL import Image\n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n-from matplotlib.axes import Axes\n+from matplotlib.figure import Figure\n+from matplotlib.backends.backend_macosx import FigureCanvasMac\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..59ddf60 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -347,7 +347,21 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n-def test_excinfo_for_later():\n+import pytest\n+\n+def test_raises_with_correct_str_behavior():\n+    with pytest.raises(LookupError) as exc_info:\n+        raise LookupError(\"A\\nB\\nC\")\n+    # Test that the `str()` on the context variable provides a meaningful output\n+    assert str(exc_info) != \"<ExceptionInfo LookupError tblen=4>\"\n+    # Ensure str(exc_info.value) provides the expected error message\n+    assert str(exc_info.value) == \"A\\nB\\nC\"\n+\n+def test_raises_with_correct_repr_behavior():\n+    with pytest.raises(LookupError) as exc_info:\n+        raise LookupError(\"A\\nB\\nC\")\n+    # Test that the `repr()` on the context variable returns expected string format\n+    assert repr(exc_info) == \"<ExceptionInfo LookupError tblen=5>\"\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..7f10fbc 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -404,6 +404,11 @@ class TestCustomConftests:\n         testdir.makepyfile(\"def test_x(): pass\")\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # Testing the new single-character shortcut for --collect-only\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # Testing the new single-character shortcut for --collect-only\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 1db4096..60655d9 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,10 +1023,44 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n-\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n-def test_autodoc_typehints_description_with_documented_init(app):\n+def test_autodoc_typehints_description_with_starargs(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithDocumentedInitAndStarArgs\\n'\n+        '   :special-members: __init__\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._ClassWithDocumentedInitAndStarArgs(x, *args, **kwargs)\\n'\n+            '\\n'\n+            '   Class docstring.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **x** (*int*) --\\n'\n+            '\\n'\n+            '      ***args** (*int*) --\\n'\n+            '\\n'\n+            '      ****kwargs** (*int*) --\\n'\n+            '\\n'\n+            '   __init__(x, *args, **kwargs)\\n'\n+            '\\n'\n+            '      Init docstring.\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **x** (*int*) -- Some integer\\n'\n+            '\\n'\n+            '         ***args** (*int*) --\\n'\n+            '\\n'\n+            '           Some integer\\n'\n+            '\\n'\n+            '         ****kwargs** (*int*) --\\n'\n+            '\\n'\n+            '           Some integer\\n'\n+            '\\n'\n+            '      Return type:\\n'\n+            '         None\\n' == context)\n     (app.srcdir / 'index.rst').write_text(\n         '.. autoclass:: target.typehints._ClassWithDocumentedInit\\n'\n         '   :special-members: __init__\\n',\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..34e063e 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,19 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n-\n-def test_Identity_doit():\n+def test_identity_matrix_sum():\n+    from sympy import Sum, symbols, Q, MatrixSymbol, Identity\n+    i, j = symbols('i j', integer=True)\n+    n = symbols('n', integer=True, positive=True)\n+    \n+    # Setup an identity matrix\n+    In = Identity(n)\n+    \n+    # Verify the sum of the diagonal elements is n\n+    assert Sum(In[i, i], (i, 0, n-1)).doit() == n\n+    \n+    # Verify the total sum of elements in the identity matrix is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..497ff5e 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,6 +251,26 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n+def test_issue_21537():\n+    from sympy.parsing.latex import parse_latex\n+    from sympy import symbols, Pow, Mul, Add\n+\n+    a, b, c = symbols('a b c')\n+  \n+    # Given test expression from the issue\n+    latex_expr = r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\"\n+    expected_expr = Mul(Add(Pow(a, 3), b), Pow(c, -1), Pow(c, 2), evaluate=False)\n+    \n+    # parse the latex expression and verify it against the expected symbolic representation\n+    parsed_expr = parse_latex(latex_expr)\n+    assert parsed_expr == expected_expr, f\"Parsed: {parsed_expr}, Expected: {expected_expr}\"\n+\n+    # Additional related test to ensure correct parsing\n+    latex_expr_2 = r\"\\frac{a^3+b}{\\frac{c}{c^2}}\"\n+    expected_expr_2 = Mul(Add(Pow(a, 3), b), Pow(c, -1), c, evaluate=False)\n+    parsed_expr_2 = parse_latex(latex_expr_2)\n+    assert parsed_expr_2 == expected_expr_2, f\"Parsed: {parsed_expr_2}, Expected: {expected_expr_2}\"\n+\n # These bad LaTeX strings should raise a LaTeXParsingError when parsed\n BAD_STRINGS = [\n     r\"(\",\n"
}