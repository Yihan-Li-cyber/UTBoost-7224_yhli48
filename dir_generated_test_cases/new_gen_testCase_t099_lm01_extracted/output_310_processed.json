{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..dd8bb78 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,21 @@ compound_models = {\n             )\n }\n \n+def test_nested_compound_models_separability():\n+    nested_cm = m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5))\n+    expected_separability = np.array([[True, True, False, False],\n+                                      [True, True, False, False],\n+                                      [False, False, True, False],\n+                                      [False, False, False, True]])\n+    \n+    expected_separability_matrix = np.array([[True, True, False, False],\n+                                             [True, True, False, False],\n+                                             [False, False, True, True],\n+                                             [False, False, True, True]])\n+    \n+    assert_allclose(is_separable(nested_cm), expected_separability.sum(1) == 1)\n+    assert_allclose(separability_matrix(nested_cm), expected_separability_matrix)\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..f9eea63 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,9 +1,10 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n-\n+from astropy.table import QTable\n from .common import assert_almost_equal, assert_equal\n \n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..7770072 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,47 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+import numpy as np\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip_lowercase(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! Table comment\n+    !MJD     Err (pos)   Err(neg)    Rate     Error\n+    53000.123 2.378e-05  -2.378e-05  NO       0.212439\n+    55045.099 1.144e-05  -1.144e-05  0.000000 0.000000\n+    NO NO NO NO NO\n+    \"\"\"\n+\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"test_lowercase.qdp\")\n+\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+\n+    table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n \n-def test_read_example():\n+    assert np.allclose(table[\"MJD_perr\"], [2.378e-05, 1.144e-05])\n+    assert \"initial_comments\" in table.meta\n+    assert \"comments\" in table.meta\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..4dfccfa 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,6 +28,27 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n+import numpy as np\n+from astropy.nddata import NDDataRef\n+import pytest\n+\n+def test_nddata_mask_propagation_issue():\n+    # Based on the issue description, ensure the mask propagates correctly\n+\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # multiply mask by constant (mask * no mask)\n+    result = nref_mask.multiply(1.0, handle_mask=np.bitwise_or).mask\n+    np.testing.assert_equal(result, mask)\n+\n+    # multiply mask by no mask (mask * no mask)\n+    result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\n+    np.testing.assert_equal(result, mask)\n+\n # Test with Data covers:\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..dd97a25 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -300,6 +300,18 @@ class TestTableFunctions(FitsTestCase):\n         hdul.close()\n         a.close()\n \n+    def test_exponent_replacement_for_D_format(self):\n+        \"\"\"Test if D exponents are correctly replaced with E\"\"\"\n+        r1 = np.array([11., 12.])\n+        c2 = fits.Column(name='def', format='D', array=r1, bscale=2.3, bzero=0.6)\n+        hdu = fits.TableHDU.from_columns([c2])\n+        hdu.writeto(self.temp('test_d_exp.fits'), overwrite=True)\n+        \n+        with open(self.temp('test_d_exp.fits')) as f:\n+            content = f.read()\n+            # Checking if 'D' in data hasn been replaced with 'E'\n+            assert '4.95652173913043548E+00' in content\n+\n     def test_endianness(self):\n         x = np.ndarray((1,), dtype=object)\n         channelsIn = np.array([3], dtype='uint8')\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..cad9502 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS should be 0o644 if not explicitly set.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..c9d8b81 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +250,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +258,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..857d985 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -363,6 +363,10 @@ class HttpResponseTests(unittest.TestCase):\n \n         # test content via property\n         r = HttpResponse()\n+\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n@@ -372,10 +376,18 @@ class HttpResponseTests(unittest.TestCase):\n \n         # test iter content via property\n         r = HttpResponse()\n+\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n         r.content = ['idan', 'alex', 'jacob']\n         self.assertEqual(r.content, b'idanalexjacob')\n \n         r = HttpResponse()\n+\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n         r.content = [1, 2, 3]\n         self.assertEqual(r.content, b'123')\n \n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..ca6e5a3 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..1cf61ba 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,3 +1,4 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n@@ -6,6 +7,9 @@ from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import IntegrityError\n+from django.test.utils import captured_stdout\n \n update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')\n \n@@ -140,7 +144,64 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_duplicate_permission_handling_does_not_raise(self):\n+        \"\"\"\n+        Ensure migration does not fail with duplicate permission for proxy models\n+        that were once concrete and changed back to proxy.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        # Create a duplicate permission to simulate the failure scenario\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_agency',\n+            name='Can add agency',\n+        )\n+        try:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        except IntegrityError as e:\n+            self.fail(f'Migration failed due to IntegrityError: {e}')\n+\n+    def test_proxy_permission_update_creates_no_duplicates(self):\n+        \"\"\"\n+        Test that running the migration does not create duplicate permissions\n+        for the same Proxy model.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(UserProxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_userproxy',\n+            name='Can add User Proxy',\n+        )\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertEqual(\n+            Permission.objects.filter(content_type=proxy_model_content_type).count(),\n+            len(set(Permission.objects.filter(content_type=proxy_model_content_type).values_list('codename', flat=True))),\n+            'Duplicate permissions exist for proxy model UserProxy after migration'\n+        )\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..7215272 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -9,6 +9,7 @@ import time\n import types\n import weakref\n import zipfile\n+import os\n from importlib import import_module\n from pathlib import Path\n from unittest import mock, skip, skipIf\n@@ -72,7 +73,32 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n         self.assertFileFound(filename.absolute())\n \n-    def test_check_errors(self):\n+    def test_manage_py_change_triggers_reload(self):\n+        \"\"\"\n+        Simulate a change in the manage.py file and verify that the autoreload\n+        mechanism detects the change.\n+        \"\"\"\n+        # Assuming 'manage.py' is the entry point\n+        main_module = sys.modules.get('__main__')\n+\n+        if main_module is None:\n+            self.skipTest(\"No '__main__' module available to test.\")\n+\n+        original_path = Path(main_module.__file__).resolve()\n+        temp_manage_py = self.temporary_file('manage_temp.py')\n+        temp_manage_py.write_text(original_path.read_text())\n+\n+        # Overwrite the __file__ attribute to simulate a running manage.py\n+        main_module.__file__ = str(temp_manage_py)\n+\n+        # Modify the temporary manage.py file\n+        temp_manage_py.write_text(original_path.read_text() + \"\\nprint('Modified')\")\n+\n+        # Verify that autoreload sees the new change\n+        self.assertFileFound(temp_manage_py)\n+\n+        # Restore original __file__ attribute\n+        main_module.__file__ = str(original_path)\n         \"\"\"\n         When a file containing an error is imported in a function wrapped by\n         check_errors(), gen_filenames() returns it.\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..9eff9a2 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -6,6 +6,9 @@ import sys\n import tempfile\n import threading\n from io import StringIO\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n+from django.test import override_settings\n from pathlib import Path\n from unittest import mock\n \n@@ -242,7 +245,19 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n-    def test_handle_db_exception(self):\n+    @override_settings(DEBUG=True)\n+    def test_technical_404_converter_raise_404(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+            self.assertContains(response, 'Django version', status_code=404)\n+\n+    @override_settings(DEBUG=False)\n+    def test_non_technical_404_converter_raise_404(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+            self.assertNotContains(response, 'Django version', status_code=404)\n         \"\"\"\n         Ensure the debug view works when a database exception is raised by\n         performing an invalid query and passing the exception to the debug view.\n",
  "django__django-11742": "",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..cfba790 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+import calendar\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -328,6 +330,22 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n \n+    def test_parsing_rfc850_two_digit_year_boundary(self):\n+        # Mocking current date to 2060 to test the 'future more than 50 years' logic\n+        with mock.patch('django.utils.http.datetime') as mocked_datetime:\n+            mocked_datetime.side_effect = datetime\n+            mocked_datetime.utcnow = mock.Mock()\n+\n+            # Setting mocked current UTC time to 2060\n+            mocked_datetime.utcnow.return_value = datetime(2060, 11, 6, 8, 49, 37)\n+            \n+            # Test two-digit years appearing more than 50 years ahead are interpreted correctly\n+            parsed_date_2060 = parse_http_date('Tuesday, 31-Dec-69 08:49:37 GMT')\n+            self.assertEqual(datetime.utcfromtimestamp(parsed_date_2060), datetime(2069, 12, 31, 8, 49, 37), \"Expected year to resolve to 2069 since 1969 is more than 50 years before 2060\")\n+\n+            parsed_date_1970 = parse_http_date('Tuesday, 10-Nov-70 08:49:37 GMT')\n+            self.assertEqual(datetime.utcfromtimestamp(parsed_date_1970), datetime(1970, 11, 10, 8, 49, 37), \"Expected year to resolve to 1970 as it is less than 50 years from 2020\")\n+\n \n class EscapeLeadingSlashesTests(unittest.TestCase):\n     def test(self):\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..9f6a59d 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,31 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+        \n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+        \n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+from django.utils.translation import gettext_lazy as _\n+from django.db import models\n+from django.test import TestCase\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n@@ -41,7 +66,14 @@ class Gender(models.TextChoices):\n \n \n class ChoicesTests(SimpleTestCase):\n-    def test_integerchoices(self):\n+    def test_enum_str_values(self):\n+        \"\"\"\n+        Ensure that the string representation of a choice's value is correct.\n+        \"\"\"\n+        for test in [Gender, Suit, YearInSchool]:\n+            for member in test:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(member.value), str(member.value))\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n         self.assertEqual(Suit.values, [1, 2, 3, 4])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..44eddf2 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -150,7 +150,17 @@ class ChoicesTests(SimpleTestCase):\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n-    def test_choices_and_field_display(self):\n+    def test_overriding_FIELD_display(self):\n+        \"\"\"Test that get_FIELD_display can be overridden as expected.\"\"\"\n+        \n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+        \n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n         values.\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 7b8648d..460fd85 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -73,6 +73,16 @@ class SimplifiedURLTests(SimpleTestCase):\n         self.assertEqual(match.url_name, 'inner-extra')\n         self.assertEqual(match.route, 'included_urls/extra/<extra>/')\n \n+    def test_optional_format_url_parameter(self):\n+        match = resolve('/module/')\n+        self.assertEqual(match.kwargs.get('format'), None)\n+\n+        match_with_html = resolve('/module/html/')\n+        self.assertEqual(match_with_html.kwargs['format'], 'html')\n+\n+        match_with_json = resolve('/module/json/')\n+        self.assertEqual(match_with_json.kwargs['format'], 'json')\n+\n     def test_path_lookup_with_empty_string_inclusion(self):\n         match = resolve('/more/99/')\n         self.assertEqual(match.url_name, 'inner-more')\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..91cf220 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -147,8 +148,36 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.test import TestCase\n+\n+class ModelInheritanceDisplayTests(TestCase):\n+    def test_overriding_inherited_FIELD_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B')])\n+\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+\n+    def test_additional_choice_inherited_FIELD_display(self):\n+        class A(models.Model):\n+            foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class B(A):\n+            foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\"), (\"C\", \"output3\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n \n-class GetFieldDisplayTests(SimpleTestCase):\n+        obj = B(field_foo='C')\n+        self.assertEqual(obj.get_field_foo_display(), 'output3')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..1d40b25 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,6 +76,26 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('en', 'English'),\n+            ('de', 'German'),\n+            ('fr', 'French'),\n+            ('es', 'Spanish'),\n+        ],\n+    )\n+    def test_no_error_for_base_language_when_sublanguage_set(self):\n+        tests = [\n+            # Using existing base languages but with sublanguage codes\n+            'de-at',  # Austrian German (should fall back to 'de' German)\n+            'fr-CA',  # Canadian French (should fall back to 'fr' French)\n+            'es-MX',  # Mexican Spanish (should fall back to 'es' Spanish)\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..b751592 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +6,8 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TransactionTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..7065f06 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,6 +159,36 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_correct_hint_for_recursive_relationship(self):\n+\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            # This setup is similar to the problematic case mentioned in the issue.\n+            # More than two ForeignKeys in an intermediary model without through_fields.\n+            members = models.ManyToManyField('self', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('members')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by 'invalid_models_tests.Group.members', \"\n+                \"but it has more than one foreign key from 'Group', which is ambiguous. You must specify \"\n+                \"which foreign key Django should use via the through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..ddc7946 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,6 +1249,60 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n+    def test_cleanse_setting_complex_structures(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+\n+        # Initial settings structure with various levels of nested structures\n+        initial = {\n+            \"simple_key\": \"value\",\n+            \"secret\": \"should_be_cleansed\",\n+            \"token\": \"should_be_cleansed\",\n+            \"list_of_dicts\": [\n+                {\"foo\": \"value\", \"secret\": \"should_be_cleansed\"},\n+                {\"bar\": \"value\", \"token\": \"should_be_cleansed\"}\n+            ],\n+            \"nested_list\": [\n+                [\n+                    {\"foo\": \"value\", \"password\": \"should_be_cleansed\"},\n+                    {\"bar\": \"value\", \"api_key\": \"should_be_cleansed\"}\n+                ],\n+                [\n+                    {\"login\": \"user1\", \"secret\": \"should_be_cleansed\"},\n+                    {\"token\": \"should_be_cleansed\"}\n+                ]\n+            ]\n+        }\n+\n+        # Expected structure after cleansing\n+        cleansed = {\n+            \"simple_key\": \"value\",\n+            \"secret\": reporter_filter.cleansed_substitute,\n+            \"token\": reporter_filter.cleansed_substitute,\n+            \"list_of_dicts\": [\n+                {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute},\n+                {\"bar\": \"value\", \"token\": reporter_filter.cleansed_substitute},\n+            ],\n+            \"nested_list\": [\n+                [\n+                    {\"foo\": \"value\", \"password\": reporter_filter.cleansed_substitute},\n+                    {\"bar\": \"value\", \"api_key\": reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {\"login\": \"user1\", \"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ]\n+            ]\n+        }\n+\n+        # Assert both dict and tuple conversion are cleansed correctly\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('COMPLEX_SETTING', initial), cleansed\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('COMPLEX_SETTING', list(initial.items())),\n+            list(cleansed.items()),\n+        )\n+\n     def test_request_meta_filtering(self):\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n",
  "django__django-12708": "",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..0c27e33 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,6 +685,27 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n+    def test_delete_no_objects_with_foreign_keys(self):\n+        \"\"\"\n+        Test for delete method on a model with foreign keys that returns\n+        zero deleted objects, ensuring format is consistent.\n+        \"\"\"\n+        # Assume existence of ForeignKeyModel that points to ForeignKeyTarget\n+        ForeignKeyTarget.objects.all().delete()\n+        deleted, deleted_objs = ForeignKeyModel.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.ForeignKeyModel': 0})\n+\n+    def test_delete_no_objects_no_foreign_keys(self):\n+        \"\"\"\n+        Test for delete method on a simple model with no foreign keys that returns\n+        zero deleted objects, ensuring format is consistent.\n+        \"\"\"\n+        # Assume existence of SimpleModel with no foreign keys\n+        deleted, deleted_objs = SimpleModel.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.SimpleModel': 0})\n+\n     def test_fast_delete_empty_no_update_can_self_select(self):\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..1452af6 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -94,6 +94,58 @@ class ASGITest(SimpleTestCase):\n             ),\n         )\n         await communicator.send_input({'type': 'http.request'})\n+\n+    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.staticfiles'})\n+    @override_settings(\n+        STATIC_URL='/static/',\n+        STATIC_ROOT=Path(__file__).parent / 'project' / 'static',\n+        STATICFILES_DIRS=[Path(__file__).parent / 'project' / 'static'],\n+        STATICFILES_FINDERS=[\n+            'django.contrib.staticfiles.finders.FileSystemFinder',\n+        ],\n+    )\n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = Path(__file__).parent / 'project' / 'static' / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n         response_start = await communicator.receive_output()\n         self.assertEqual(response_start['type'], 'http.response.start')\n         self.assertEqual(response_start['status'], 200)\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..8046412 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,14 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\t whitespace-in-value \\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore_in-value', False),\n+            ('__strip__underscore-value___', 'strip__underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+            ('___This is a test ---', 'this-is-a-test', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..55bb9c5 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2819,7 +2819,82 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+from django.test import TestCase\n+from .models import Character, StumpJoke\n+from django import forms\n+from django.db import models\n+\n+class LimitChoicesToDuplicatesTests(TestCase):\n+\n+    def setUp(self):\n+        self.threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2023-10-01\")\n+        self.marley = Character.objects.create(username=\"Marley\", last_action=\"2023-10-02\")\n+\n+    def test_limit_choices_to_no_duplicates(self):\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..1d3515d 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -11,7 +11,39 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n-    def test_single_parent(self):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal across different derived models.\"\"\"\n+\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Verify fields are not considered equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Verify the ordering of fields\n+        self.assertLess(abstract_model_field.creation_counter, inherit1_model_field.creation_counter)\n+        self.assertLess(abstract_model_field.creation_counter, inherit2_model_field.creation_counter)\n+        self.assertLess(inherit1_model_field.creation_counter, inherit2_model_field.creation_counter)\n+\n+        # Verify hashes are not equal\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n \n@@ -347,4 +379,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..2ed9d9a 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -73,6 +73,20 @@ class SiteEachContextTest(TestCase):\n         self.assertIs(user['perms']['delete'], True)\n         self.assertEqual(user['admin_url'], '/test_admin/admin/auth/user/')\n         self.assertEqual(user['add_url'], '/test_admin/admin/auth/user/add/')\n+\n+    def test_app_list_includes_model_class(self):\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n+\n+        # Check that the Article model class is included in the admin_views app list\n+        admin_views = apps[0]\n+        article = admin_views['models'][0]\n+        self.assertEqual(article['model'], Article)\n+\n+        # Check that the User model class is included in the auth app list\n+        auth = apps[1]\n+        user = auth['models'][0]\n+        self.assertEqual(user['model'], User)\n         self.assertEqual(user['name'], 'Users')\n \n \n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..38d2d5b 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..92727ff 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -5,6 +6,7 @@ import uuid\n from copy import deepcopy\n from decimal import Decimal\n from unittest import mock\n+from collections import namedtuple\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..a1b8208 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -31,9 +31,47 @@ from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.core.management import execute_from_command_line\n+from unittest import mock\n+import os\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_invalid_sys_argv(self):\n+        \"\"\"\n+        Ensure that execute_from_command_line works even when sys.argv is invalid.\n+        \"\"\"\n+        args = ['help', 'check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_subcommand_provided_in_argv(self):\n+        \"\"\"\n+        Ensure that the subcommand is correctly processed from argv.\n+        \"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None, '--version'] + args):\n+                execute_from_command_line(['my-admin'] + args)\n+        self.assertIn('usage: my-admin help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n",
  "django__django-13660": "",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..e564ee9 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -962,6 +962,16 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n         response = self.client.get(self.change_url)\n         self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n \n+from django.test import TestCase, override_settings\n+from django.urls import reverse\n+from django.contrib.admin.sites import AdminSite\n+from django.contrib.admin import ModelAdmin\n+from django.contrib.admin import TabularInline\n+from django.test.client import RequestFactory\n+\n+from .models import ProfileCollection, Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile\n+\n+admin_site = AdminSite()\n \n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n@@ -1013,7 +1023,24 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_verbose_name_as_plural_default(self):\n+        class VerboseNameOnlyInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Child with inline verbose name'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            VerboseNameOnlyInline,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        # Ensure the verbose name is correctly pluralized as the default.\n+        self.assertContains(response, '<h2>Child with inline verbose names</h2>')\n+        self.assertContains(response, 'Add another Child with inline verbose name')\n+        self.assertNotContains(response, '<h2>VerboseNameProfiles</h2>')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n@@ -1071,6 +1098,16 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n         self.assertNotContains(response, 'Add another Model with both - name')\n \n+from django.test import TestCase, override_settings\n+from django.urls import reverse\n+from django.contrib.admin.sites import AdminSite\n+from django.contrib.admin import ModelAdmin\n+from django.contrib.admin import TabularInline\n+from django.test.client import RequestFactory\n+\n+from .models import ProfileCollection, Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile\n+\n+admin_site = AdminSite()\n \n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..06fe7d7 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -594,6 +594,24 @@ class TestQuerying(TestCase):\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n         )\n+        # Added tests for issue verification on SQLite and Oracle\n+        # Test to verify KeyTransform with isnull=True does not match JSON null\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        \n+        # Test for objects having key 'j' with JSON null (should not be matched)\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.exclude(value__j__exact=None).filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        \n+        # Test objects having key 'j' with JSON null (should be matched with exact=None)\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__exact=None),\n+            [],\n+        )\n \n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n",
  "django__django-13768": "",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..b1589a0 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -371,7 +371,12 @@ def mocked_is_overridden(self, setting):\n     )\n \n \n-@mock.patch('django.conf.UserSettingsHolder.is_overridden', mocked_is_overridden)\n+from django.db import models\n+from django.core.checks import Warning\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+from unittest import mock\n+import django.core.checks as checks\n @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n @isolate_apps('check_framework.apps.CheckDefaultPKConfig', attr_name='apps')\n @override_system_checks([checks.model_checks.check_all_models])\n@@ -402,7 +407,67 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n-    def test_explicit_pk(self):\n+    def test_explicit_inherited_pk(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_auto_created_inherited_pk(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n+\n+    def test_auto_created_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n         class Model(models.Model):\n             id = models.BigAutoField(primary_key=True)\n \n@@ -414,4 +479,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..773933b 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,52 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        ChoiceModel.objects.create(pk=1, name='x')\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+        \n+    def test_modelchoicefield_with_valid_choice(self):\n+        # Test with a valid choice to ensure it passes validation.\n+        ChoiceModel.objects.create(pk=1, name='x')\n+        f = ModelChoiceField(queryset=ChoiceModel.objects.all())\n+        self.assertEqual(f.clean(1).pk, 1)\n+        \n+    def test_modelmultiplechoicefield_value_placeholder(self):\n+        # Test ModelMultipleChoiceField with invalid choice value\n+        ChoiceModel.objects.create(pk=1, name='x')\n+        f = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            ['invalid'],\n+        )\n+\n+    def test_modelmultiplechoicefield_with_valid_choice(self):\n+        # Test with a valid choice list to ensure it passes validation.\n+        ChoiceModel.objects.create(pk=1, name='x')\n+        f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all())\n+        cleaned_data = f.clean([1])\n+        self.assertEqual([obj.pk for obj in cleaned_data], [1])\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +351,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..d13e78a 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n from copy import deepcopy\n \n from django.core.exceptions import FieldError, MultipleObjectsReturned\n from django.db import IntegrityError, models, transaction\n from django.test import TestCase\n+from .models import ParentStringPrimaryKey, ChildStringPrimaryKeyParent\n from django.utils.translation import gettext_lazy\n \n from .models import (\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..f4f659f 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -19,7 +20,14 @@ class QTests(SimpleTestCase):\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n-    def test_combine_not_q_object(self):\n+    def test_combine_dict_keys(self):\n+        q = Q(x__in={}.keys())\n+        # Testing `&` operator with dict_keys\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        # Testing `|` operator with dict_keys\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         obj = object()\n         q = Q(x=1)\n         with self.assertRaisesMessage(TypeError, str(obj)):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..816c6f2 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -25,9 +25,40 @@ from django.db.models.functions import (\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+class QExistsCommutativityTests(TestCase):\n+    def test_q_exists_commutativity(self):\n+        # We're using Company model for the test\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+\n+        # Set up some basic data\n+        self.example_inc = Company.objects.create(\n+            name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n+            ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=30)\n+        )\n+        self.foobar_ltd = Company.objects.create(\n+            name=\"Foobar Ltd.\", num_employees=3, num_chairs=4, based_in_eu=True,\n+            ceo=Employee.objects.create(firstname=\"Frank\", lastname=\"Meyer\", salary=20)\n+        )\n+\n+        # Test the Q & Exists commutativity\n+        tests = [\n+            (Q(salary__gte=30) & Exists(is_ceo), [self.example_inc.ceo]),\n+            (Exists(is_ceo) & Q(salary__gte=30), [self.example_inc.ceo]),\n+\n+            (Q(salary__lt=15) | Exists(is_poc), [self.example_inc.ceo]),\n+            (Exists(is_poc) | Q(salary__lt=15), [self.example_inc.ceo]),\n+        ]\n+\n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                qs = Employee.objects.filter(conditions)\n+                self.assertCountEqual(qs, expected)\n+\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n+from django.db.models import Exists, OuterRef, Q\n from django.utils.functional import SimpleLazyObject\n \n from .models import (\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..43d445e 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1127,8 +1127,28 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[0], func)\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n-\n-    def test_resolver_match_on_request(self):\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial_with_args(self):\n+        def test_view(*args, **kwargs):\n+            pass\n+\n+        partial_func = functools.partial(test_view, 'predefined_arg', another='value')\n+        match = ResolverMatch(\n+            func=partial_func,\n+            args=(),\n+            kwargs={},\n+            url_name='test-partial',\n+            app_names=[],\n+            namespaces=[],\n+            route='^test_partial/$'\n+        )\n+        repr_str = repr(match)\n+        expected_repr = (\n+            \"ResolverMatch(func=test_repr_functools_partial_with_args.<locals>.test_view, \"\n+            \"args=('predefined_arg',), kwargs={'another': 'value'}, url_name=test-partial, \"\n+            \"app_names=[], namespaces=[], route=^test_partial/$)\"\n+        )\n+        self.assertIn(expected_repr, repr_str)\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n@@ -1146,6 +1166,11 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import resolve\n+from django.test import override_settings\n+from . import views\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..f04c374 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import override_settings\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -74,7 +76,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n         class Model(models.Model):\n@@ -91,7 +113,27 @@ class TestDefaultPK(SimpleTestCase):\n         m2m_pk = M2MModel._meta.get_field('m2m').remote_field.through._meta.pk\n         self.assertIsInstance(m2m_pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_m2m_app_default_auto_field(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..6be29b8 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -8,6 +8,8 @@ from django.contrib.auth.forms import (\n     SetPasswordForm, UserChangeForm, UserCreationForm,\n )\n from django.contrib.auth.models import User\n+from django.forms import Form\n+from django.contrib.auth.forms import ReadOnlyPasswordHashField\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n from django.core import mail\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..27872d2 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,38 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_serialize_type_model(self):\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set()),\n+        )\n+\n+    def test_serialize_custom_field(self):\n+        \"\"\"\n+        Test serializing a model with a custom field.\n+        \"\"\"\n+        fields = {\n+            'name': app.models.MyField(primary_key=True, serialize=False),\n+        }\n+\n+        operations = [\n+            migrations.CreateModel(\n+                name='MyModel',\n+                fields=fields.items(),\n+                options={'abstract': False},\n+                bases=(app.models.MyMixin, models.Model),\n+            ),\n+        ]\n+\n+        writer = MigrationWriter(operations=operations)\n+        serialized_output = writer.serialize()[0]\n+        self.assertIn(\"import app.models\", serialized_output)\n+        self.assertIn(\"from django.db import models\", serialized_output)\n+        self.assertIn(\"app.models.MyField(primary_key=True, serialize=False)\", serialized_output)\n+        self.assertIn(\"bases=(app.models.MyMixin, models.Model)\", serialized_output)\n+\n+    def test_serialize_type_none(self):\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..c849d1f 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,9 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        # Verify that non_form_errors have the 'nonform' CSS class\n+        error_list_html = str(formset.non_form_errors())\n+        self.assertIn('class=\"nonform\"', error_list_html)\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +362,9 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        # Verify that non_form_errors have the 'nonform' CSS class\n+        error_list_html = str(formset.non_form_errors())\n+        self.assertIn('class=\"nonform\"', error_list_html)\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +989,9 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        # Verify that non_form_errors have the 'nonform' CSS class\n+        error_list_html = str(formset.non_form_errors())\n+        self.assertIn('class=\"nonform\"', error_list_html)\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..a557405 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -9,6 +9,8 @@ from .models import (\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n     Relationship, SymmetricalFriendship,\n )\n+from django.db import models\n+from django.core.checks import Error\n \n \n class M2mThroughTests(TestCase):\n@@ -31,7 +33,16 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n-    def test_get_on_intermediate_model(self):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        # Ensures that the ManyToManyField through_fields list is correctly made hashable\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        \n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        \n+        # These two should be hashable and hashes should be equal\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n         queryset = Membership.objects.get(person=self.jane, group=self.rock)\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..73abbf6 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -281,17 +281,53 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n-        request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n+import json\n+from django.test import TestCase, RequestFactory\n+from django.contrib.auth.models import User\n+from django.urls import path\n+from django.conf.urls import url\n+from django.http import JsonResponse\n+from django.utils.translation import gettext as _\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from admin_views.models import Question\n+\n+class CustomAutocompleteJsonViewTests(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        self.client.login(username='super', password='secret')\n+        self.opts = {'app_label': 'admin_views', 'model_name': 'question'}\n+        self.url = '/autocomplete/?term='\n+\n+    def test_serialize_result_method(self):\n+        \"\"\" Test if serialize_result can include extra fields. \"\"\"\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return super().serialize_result(obj, to_field_name) | {'notes': obj.notes}\n+\n+        q1 = Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        q1.notes = \"First question\"\n+        q1.save()\n+        \n+        q2 = Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        q2.notes = \"Second question\"\n+        q2.save()\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n         request.user = self.superuser\n-        with model_admin(Question, PKOrderingQuestionAdmin):\n-            response = AutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        response = CustomAutocompleteJsonView.as_view(admin_site=AdminSite())(request)\n         self.assertEqual(response.status_code, 200)\n         data = json.loads(response.content.decode('utf-8'))\n-        self.assertEqual(data, {\n-            'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[PAGINATOR_SIZE:]],\n+        expected_data = {\n+            'results': [\n+                {'id': str(q1.pk), 'text': q1.question, 'notes': 'First question'},\n+                {'id': str(q2.pk), 'text': q2.question, 'notes': 'Second question'},\n+            ],\n             'pagination': {'more': False},\n-        })\n+        }\n+        self.assertEqual(data, expected_data)\n \n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..4f9c50d 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,7 +426,33 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+class WrapperPreservationTests(TestCase):\n+    def test_partial_preserves_wrapper_assignments(self):\n+        \"\"\"method_decorator should preserve wrapper assignments for partial objects.\"\"\"\n+        from functools import partial, wraps\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self, x):\n+                \"\"\"Example method.\"\"\"\n+                return x\n+\n+        # Create a partial function\n+        partial_method = partial(Test().method, 1)\n+\n+        # Test whether __name__, __module__, and __doc__ are preserved.\n+        self.assertEqual(partial_method.__name__, 'method')\n+        self.assertIsNotNone(partial_method.__module__)\n+        self.assertEqual(partial_method.__doc__, \"Example method.\")\n+\n+        result = partial_method()\n+        self.assertEqual(result, 1)\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..9b21b31 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,27 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_use_in_dict(self):\n+        # This test ensures that ModelChoiceIteratorValue can be used as a key in a dict\n+        value = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        test_dict = {value: \"test\"}\n+        self.assertIn(value, test_dict)\n+\n+    def test_choice_value_equality_and_hash(self):\n+        # This test checks equality logic and hash consistency for same primary key\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c1.pk, None)  # same PK, different instance\n+        value_3 = ModelChoiceIteratorValue(self.c2.pk, self.c2)  # different PK\n+        self.assertEqual(value_1, value_2)\n+        self.assertNotEqual(value_1, value_3)\n+        self.assertEqual(hash(value_1), hash(value_2))\n+        self.assertNotEqual(hash(value_1), hash(value_3))\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..5eab80e 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -792,8 +792,34 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Pony.objects.count(), 2)\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Test the forward operation with zero queries, confirming no operation performed.\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Test the backward operation with zero queries, confirming no operation performed.\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n \n-    def test_rename_m2m_target_model(self):\n+        # Additionally, assert that the model state is unchanged\n+        self.assertEqual(project_state.apps.get_model(app_label, 'Rider')._meta.db_table, 'rider')\n+        self.assertEqual(new_state.apps.get_model(app_label, 'Runner')._meta.db_table, 'rider')\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..09de874 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -153,8 +153,23 @@ class MultiValueFieldTest(SimpleTestCase):\n             <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n             \"\"\",\n         )\n-\n-    def test_form_as_table_data(self):\n+    def test_multivaluewidget_labels(self):\n+        form = ComplexFieldForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_field1\">Field1:</label></th>\n+            <td><input type=\"text\" name=\"field1_0\" id=\"id_field1_0\" required>\n+            <select multiple name=\"field1_1\" id=\"id_field1_1\" required>\n+            <option value=\"J\">John</option>\n+            <option value=\"P\">Paul</option>\n+            <option value=\"G\">George</option>\n+            <option value=\"R\">Ringo</option>\n+            </select>\n+            <input type=\"text\" name=\"field1_2_0\" id=\"id_field1_2_0\" required>\n+            <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n+            \"\"\",\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..ac75bd7 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -197,6 +197,19 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n+    def test_expression_wrapper_with_negated_empty_q(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+        selected_books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[self.b1.pk]), output_field=BooleanField())\n+        ).filter(selected=True)\n+        self.assertEqual(len(selected_books), Book.objects.count() - 1)\n+        self.assertFalse(any(book.pk == self.b1.pk for book in selected_books))\n+\n     def test_empty_expression_annotation(self):\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..c81913f 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,4 +1,10 @@\n+\n import json\n+from django.test import TestCase\n+from django.utils.safestring import mark_safe\n+from django.contrib.messages import constants\n+from django.contrib.messages.storage.base import Message\n+from django.contrib.messages.storage.cookie import MessageEncoder, MessageDecoder\n import random\n \n from django.conf import settings\n@@ -104,7 +110,21 @@ class CookieTests(BaseTests, SimpleTestCase):\n         # The message actually contains what we expect.\n         self.assertEqual(list(storage), [])\n \n-    def test_max_cookie_length(self):\n+    def test_extra_tags_serialization_deserialization(self):\n+        \"\"\"\n+        Test that extra_tags are correctly serialized and deserialized\n+        into the same value when it is an empty string.\n+        \"\"\"\n+        def encode_decode(extra_tags):\n+            original_message = Message(constants.DEBUG, \"Test message\", extra_tags=extra_tags)\n+            encoded = MessageEncoder().encode(original_message)\n+            decoded_message = MessageDecoder().decode(encoded)\n+            return decoded_message.extra_tags\n+\n+        for extra_tags in [\"\", \"tag\", None, \"multiple tags\"]:\n+            with self.subTest(extra_tags=extra_tags):\n+                result = encode_decode(extra_tags)\n+                self.assertEqual(result, extra_tags)\n         \"\"\"\n         If the data exceeds what is allowed in a cookie, older messages are\n         removed before saving (and returned by the ``update`` method).\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..8cbd080 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,4 +1,5 @@\n from pathlib import Path\n+from pathlib import Path\n from unittest import mock\n \n from django.template import autoreload\n@@ -28,12 +29,34 @@ EXTRA_TEMPLATES_DIR = ROOT / \"templates_extra\"\n         },\n     }])\n class TemplateReloadTests(SimpleTestCase):\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [ROOT],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_does_not_restart_on_change(self, mock_reset):\n+        self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n+        mock_reset.assert_not_called()\n+\n     @mock.patch('django.template.autoreload.reset_loaders')\n     def test_template_changed(self, mock_reset):\n         template_path = Path(__file__).parent / 'templates' / 'index.html'\n         self.assertTrue(autoreload.template_changed(None, template_path))\n         mock_reset.assert_called_once()\n \n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [ROOT],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_does_not_restart_on_change(self, mock_reset):\n+        self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n+        mock_reset.assert_not_called()\n+\n     @mock.patch('django.template.autoreload.reset_loaders')\n     def test_non_template_changed(self, mock_reset):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n",
  "django__django-15400": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\nindex f0097c4..4034a7e 100644\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -308,7 +308,26 @@ class SimpleLazyObjectTestCase(LazyObjectTestCase):\n     def test_repr(self):\n         # First, for an unevaluated SimpleLazyObject\n         obj = self.lazy_wrap(42)\n-        # __repr__ contains __repr__ of setup function and does not evaluate\n+        # __radd__ method should correctly handle cases where the left-hand operand is not of type SimpleLazyObject\n+        # Testing reverse addition with an integer and a wrapped integer object\n+        obj1 = self.lazy_wrap(5)\n+        self.assertEqual(10 + obj1, 15)\n+\n+        # Testing reverse addition with a string and a wrapped string object\n+        obj2 = self.lazy_wrap(\"world\")\n+        self.assertEqual(\"hello \" + obj2, \"hello world\")\n+        \n+        # Testing reverse addition with a list and a wrapped list object\n+        obj3 = self.lazy_wrap([3, 4])\n+        self.assertEqual([1, 2] + obj3, [1, 2, 3, 4])\n+\n+        # Testing reverse addition with an object type that does not naturally support addition to ensure correct error\n+        class CustomObject:\n+            pass\n+\n+        obj4 = self.lazy_wrap(CustomObject())\n+        with self.assertRaises(TypeError):\n+            1 + obj4\n         # the SimpleLazyObject\n         self.assertRegex(repr(obj), \"^<SimpleLazyObject:\")\n         self.assertIs(obj._wrapped, empty)  # make sure evaluation hasn't been triggered\n",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..64e05d5 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,31 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        The function should handle an empty 'If-Modified-Since' header without raising an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(\"\", mtime=1))\n+\n+    def test_was_modified_since_empty_string_without_modtime(self):\n+        \"\"\"\n+        Tests that an empty 'If-Modified-Since' header correctly indicates 'was modified' when no mtime (default is 0).\n+        \"\"\"\n+        self.assertTrue(was_modified_since(\"\"))\n+\n+    def test_was_modified_since_empty_string_zero_mtime(self):\n+        \"\"\"\n+        Tests with an empty header and zero mtime, expecting it to be modified.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(\"\", mtime=0))\n+\n+    def test_was_modified_since_empty_string_with_future_mtime(self):\n+        \"\"\"\n+        Verifies that an empty header with future mtime correctly returns modified.\n+        \"\"\"\n+        future_mtime = 2050000000  # some time in the future\n+        self.assertTrue(was_modified_since(\"\", mtime=future_mtime))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..bb0c6bb 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,5 +1,8 @@\n+\n import os\n from io import StringIO\n+from argparse import ArgumentDefaultsHelpFormatter\n+from django.core.management.base import CommandParser\n from unittest import mock\n \n from admin_scripts.tests import AdminScriptTestCase\n@@ -411,7 +414,45 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_command_help_formatter_preserves_newlines(self):\n+        \"\"\"Test that the command help formatter preserves newlines in the help text.\"\"\"\n+        class TestCommand(BaseCommand):\n+            help = (\n+                \"This is a test command.\\n\"\n+                \"Example usage:\\n\"\n+                \"  ./manage.py test_command 'param1' 'param2'\\n\"\n+            )\n+\n+            def add_arguments(self, parser):\n+                parser.add_argument('arg1')\n+                parser.add_argument('arg2')\n+\n+        epilog = \"some epilog text\"\n+        command = TestCommand()\n+        parser = command.create_parser(\"prog_name\", \"test_command\", epilog=epilog)\n+        help_output = parser.format_help()\n+\n+        expected_help_output = (\n+            \"usage: prog_name test_command [-h] [--traceback] [--no-color] [--force-color]\\n\"\n+            \"                              arg1 arg2\\n\"\n+            \"\\n\"\n+            \"This is a test command.\\n\"\n+            \"Example usage:\\n\"\n+            \"  ./manage.py test_command 'param1' 'param2'\\n\"\n+            \"\\n\"\n+            \"positional arguments:\\n\"\n+            \"  arg1\\n\"\n+            \"  arg2\\n\"\n+            \"\\n\"\n+            \"optional arguments:\\n\"\n+            \"  -h, --help            show this help message and exit\\n\"\n+            \"  --traceback           Raise on CommandError for debugging\\n\"\n+            \"  --no-color            Don't colorize the command output.\\n\"\n+            \"  --force-color         Force colorization of the command output.\\n\"\n+            \"some epilog text\\n\"\n+        )\n+\n+        self.assertIn(expected_help_output, help_output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..17d5ec7 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -217,6 +219,22 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"greeting\": \"hello world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"greeting\": \"hello world\"}</script>',\n+        )\n+\n+    def test_json_script_with_default_encoder(self):\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..b035881 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -186,6 +186,33 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 ],\n             )\n \n+    def test_template_tags_with_duplicate_library_path(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"dup_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+                self.get_settings(\n+                    \"dup_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'dup_tags'\",\n+                            \"'check_framework.template_test_apps.same_tags_app_1.\"\n+                            \"templatetags.same_tags', \"\n+                            \"'check_framework.template_test_apps.same_tags_app_1.\"\n+                            \"templatetags.same_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ],\n+            )\n+\n     def test_template_tags_with_different_library_name(self):\n         with self.settings(\n             TEMPLATES=[\n@@ -206,4 +233,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..0835604 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,9 +398,42 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n-\n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n+from django.test import TestCase\n+from django.db import models\n+from django.core.management import call_command\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class QueryOptimizationTests(TestCase):\n+\n+    def setUp(self):\n+        self.custom_instance = ProxyCustomModel.objects.create(name=\"Proxy Test\")\n+        self.another_instance = AnotherModel.objects.create(custom=self.custom_instance)\n+\n+    def test_select_related_only_with_proxy_model(self):\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get(pk=self.another_instance.pk)\n+        self.assertEqual(result.custom.name, \"Proxy Test\")\n+\n+    def test_select_related_only_should_not_crash(self):\n+        try:\n+            qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+            list(qs)  # Would raise ValueError before the fix\n+        except ValueError as e:\n+            self.fail(f\"Queryset raised unexpected ValueError: {e}\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..8f0968f 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,7 +151,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n-    def test_parameters(self):\n+    def test_parameters_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None)\n+        )\n+\n+    def test_parameters_help(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +189,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..c64266e 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,6 +1901,33 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.forms import formset_factory\n+        from django.forms.formsets import BaseFormSet\n+        from django.test import SimpleTestCase\n+        from django.forms.renderers import get_default_renderer\n+        from myapp.forms import Choice\n+\n+class FormSetDeprecationTests(SimpleTestCase):\n+    def test_no_management_form_warning(self):\n+        \"\"\"\n+        Management forms are already rendered with the new div template.\n+        \"\"\"\n+        with isolate_lru_cache(get_default_renderer), self.settings(\n+            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+        ):\n+            ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+            formset = ChoiceFormSet()\n+            # Rendering management form should not raise deprecation warning\n+            with self.assertRaises(DeprecationWarning):\n+                str(formset.management_form)\n+\n+    def test_default_template_deprecation_warning(self):\n+        from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.forms import formset_factory\n+        from django.forms.formsets import BaseFormSet\n+        from django.test import SimpleTestCase\n+        from django.forms.renderers import get_default_renderer\n+        from myapp.forms import Choice\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1936,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "",
  "django__django-16046": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..0cc10ca 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,9 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,6 +895,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF='auth_tests.urls_admin')\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..43c450d 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -506,7 +506,39 @@ class HTTPSitemapTests(SitemapTestsBase):\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n-\n+import os\n+from django.test import TestCase\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.utils.decorators import method_decorator\n+from django.utils.http import http_date\n+from unittest.mock import patch\n+from django.test.utils import override_settings\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class CallableSitemapTests(TestCase):\n+    def test_callable_sitemod_no_items_does_not_raise(self):\n+        sitemap = CallableLastmodNoItemsSitemap()\n+        with self.assertRaises(ValueError, msg=\"ValueError should not be raised when items list is empty\"):\n+            sitemap.get_latest_lastmod()\n+\n+    def test_callable_sitemod_with_no_items_xml_correctness(self):\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(response.content.decode(), expected_content_index)\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..cd5eb71 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n@@ -8,6 +9,8 @@ import re\n import shutil\n import sys\n import tempfile\n+from unittest import mock\n+import unittest\n import threading\n import time\n import unittest\n@@ -1755,6 +1758,37 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n+    def test_has_key_race_handling(self):\n+        # Add a key to the cache\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        \n+        # Simulate the race condition by mocking open and causing it to raise FileNotFoundError\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+    \n+    def test_has_key_with_simultaneous_deletion(self):\n+        # Add the key and ensure it exists\n+        cache.add(\"key\", \"value\")\n+        \n+        # Patch os.path.exists to return True, but make open raise FileNotFoundError\n+        with mock.patch(\"os.path.exists\", return_value=True), \\\n+             mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            \n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+    \n+    def test_has_key_with_expired_file_deletion(self):\n+        # Add an expired key to the cache\n+        cache.add(\"expired_key\", \"expired_value\")\n+        \n+        # Mock _is_expired to return True and simulate file deletion\n+        with mock.patch.object(cache, '_is_expired', return_value=True), \\\n+             mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            \n+            self.assertIs(cache.has_key(\"expired_key\"), False)\n+            mocked_open.assert_called_once()\n+\n     def test_empty_cache_file_considered_expired(self):\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n",
  "django__django-16527": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..b2ad68d 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,31 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def _test_alter_alter_field(self, alter_foo, alter_bar):\n+        \"\"\"\n+        AlterField operations should collapse into the last one.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                alter_foo,\n+                alter_bar,\n+            ],\n+            [\n+                alter_bar,\n+            ],\n+        )\n+\n+    def test_alter_alter_field(self):\n+        self._test_alter_alter_field(\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+        )\n+\n+    def test_alter_alter_field_with_default(self):\n+        self._test_alter_alter_field(\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..ae20508 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -76,6 +77,12 @@ class FunctionTests(SimpleTestCase):\n         obj = object()\n         self.assertEqual(join(obj, \"<br>\"), obj)\n \n+    def test_autoescape_off_joiner_not_escaped(self):\n+        self.assertEqual(\n+            join([\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"<br/>\", autoescape=False),\n+            \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\",\n+        )\n+\n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..d8df901 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -728,6 +728,31 @@ class BulkCreateTests(TestCase):\n     def test_update_conflicts_unique_two_fields_unique_no_unique_fields(self):\n         self._test_update_conflicts_unique_two_fields([])\n \n+    def test_bulk_create_with_update_conflicts_returns_ids(self):\n+        # Create objects that will initially be inserted.\n+        initial_objects = [\n+            UpsertConflict(number=10, rank=1, name=\"Initial1\"),\n+            UpsertConflict(number=20, rank=2, name=\"Initial2\"),\n+        ]\n+        \n+        results = UpsertConflict.objects.bulk_create(initial_objects, update_conflicts=True, update_fields=['name'], unique_fields=['number'])\n+        # Assert all objects are saved and have IDs.\n+        for result in results:\n+            self.assertIsNotNone(result.pk)\n+\n+        self.assertEqual(UpsertConflict.objects.filter(number__in=[10, 20]).count(), 2)\n+        \n+        # Create conflicting objects, will trigger conflict update.\n+        conflicting_objects = [\n+            UpsertConflict(number=10, rank=3, name=\"Conflicted1\"),\n+            UpsertConflict(number=20, rank=4, name=\"Conflicted2\"),\n+        ]\n+        \n+        results_with_conflict = UpsertConflict.objects.bulk_create(conflicting_objects, update_conflicts=True, update_fields=['name'], unique_fields=['number'])\n+        # Assert all conflicts are updated and have IDs after bulk create.\n+        for result in results_with_conflict:\n+            self.assertIsNotNone(result.pk)\n+\n     def _test_update_conflicts(self, unique_fields):\n         UpsertConflict.objects.bulk_create(\n             [\n@@ -816,4 +841,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..dd6f614 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -496,6 +496,18 @@ def test_keymaps():\n         assert isinstance(mpl.rcParams[k], list)\n \n \n+def test_no_backend_figs_clearing():\n+    import matplotlib.pyplot as plt\n+    from matplotlib import get_backend, rc_context\n+\n+    # Create a figure in rc_context and check if it's not cleared by get_backend\n+    with rc_context():\n+        fig2 = plt.figure()\n+        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+        get_backend()\n+        after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+        assert before == after, f'Figures cleared!\\nBefore: {before}\\nAfter: {after}'\n+\n def test_rcparams_reset_after_fail():\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..2ba19cb 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,7 +21,31 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible(fig_test, fig_ref):\n+    # Test if set_visible works with 3D axes by using check_figures_equal to ensure\n+    # that the figure's rendered output matches expectations.\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter([1], [1], [1])\n+    ax_test.set_visible(False)\n+\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.scatter([1], [1], [1])\n+    # The reference doesn't set anything to invisible, thus, fig_test\n+    # should have nothing drawn.\n+\n+    # This doesn't directly compare them visually but checks the processing\n+    # of visibility internally via rendered output.\n+\n+def test_3d_axis_event_handling():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.set_visible(False)\n+\n+    # Typically, this would use an event testing function, but here we'll ensure\n+    # that basic canvas inaxes doesn't interact.\n+    fig.canvas.draw()\n+    assert fig.canvas.inaxes((200, 200)) is None\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..9fc8400 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,7 +774,15 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n-def test_get_set_draggable():\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable_at_creation(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='Label')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..ce27e21 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,23 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+\n+@pytest.mark.parametrize('constrained_layout', [False, True])\n+def test_no_warning_with_constrained_layout_false_or_true(constrained_layout):\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import warnings\n+    \n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    \n+    with warnings.catch_warnings(record=True) as caught_warnings:\n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained_layout)\n+        ax[0].plot(a, b)\n+        ax[1].plot(a, c)\n+        plt.subplots_adjust(wspace=0)\n+\n+        assert all(\"not calling subplots_adjust\" not in str(warning.message) for warning in caught_warnings)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..533685a 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -106,7 +107,35 @@ def test_complete(fig_test, fig_ref):\n     plt.close(loaded)\n \n \n-def _pickle_load_subprocess():\n+def test_pickle_figure_with_draggable_legend():\n+    import pickletools\n+    \n+    # Create a figure and a subplot\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    # Plot data\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    # Create a draggable legend\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Verify that `FigureCanvasAgg` is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Load the figure from the pickle to ensure it's correctly unpickled\n+    loaded_fig = pickle.loads(pkl)\n+    assert isinstance(loaded_fig, plt.Figure)\n+\n+    # Clean up\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n     import os\n     import pickle\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..57348d2 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,34 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Try to pickle and then unpickle the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    loaded_fig = pickle.loads(pkl.getvalue())\n+\n+    # Draw the loaded figure to ensure it is correctly restored\n+    loaded_fig.canvas.draw()\n+\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..c3aa4c9 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,47 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+def test_mplcursor_integration():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+    \n+    x = np.arange(1, 11)    \n+    y1 = x\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+    \n+    mplcursors.cursor()\n+    \n+    # Simulate clicks on some data points and check that no error occurs\n+    for i in range(1, 11, 2):  # Click at every other data point\n+        click_event = plt.backend_bases.MouseEvent(name='button_press_event', \n+                                                   canvas=fig.canvas, \n+                                                   x=i, y=y1[i-1],\n+                                                   button=1)\n+        fig.canvas.callbacks.process('button_press_event', click_event)\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_mplcursor_integration():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+    \n+    x = np.arange(1, 11)    \n+    y1 = x\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+    \n+    mplcursors.cursor()\n+    \n+    # Simulate clicks on some data points and check that no error occurs\n+    for i in range(1, 11, 2):  # Click at every other data point\n+        click_event = plt.backend_bases.MouseEvent(name='button_press_event', \n+                                                   canvas=fig.canvas, \n+                                                   x=i, y=y1[i-1],\n+                                                   button=1)\n+        fig.canvas.callbacks.process('button_press_event', click_event)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..aa9ea7f 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,8 +1,10 @@\n \n+\n import numpy as np\n import pandas as pd\n \n import pytest\n+from pandas.testing import assert_frame_equal\n from numpy.testing import assert_array_equal, assert_array_almost_equal\n \n from seaborn._core.groupby import GroupBy\n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..bd92b89 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -1314,6 +1314,20 @@ class TestPairGrid:\n         for ax in g.diag_axes:\n             assert len(ax.collections) == n\n \n+    def test_pairplot_column_multiindex(self):\n+        # Setting up a DataFrame with MultiIndex columns\n+        cols = pd.MultiIndex.from_arrays([[\"A\", \"B\"], [\"1\", \"2\"]])\n+        data = {\n+            (\"A\", \"1\"): np.random.rand(100),\n+            (\"A\", \"2\"): np.random.rand(100),\n+            (\"B\", \"1\"): np.random.rand(100),\n+            (\"B\", \"2\"): np.random.rand(100),\n+        }\n+        df = pd.DataFrame(data)\n+        df.columns = cols\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == df.columns.tolist()\n+\n     def test_pairplot_reg(self):\n \n         vars = [\"x\", \"y\", \"z\"]\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..7195e22 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,3 +1,4 @@\n+\n import json\n import os\n import textwrap\n@@ -5,6 +6,7 @@ import textwrap\n import pytest\n \n import flask\n+import tomllib\n \n \n # config keys used for the TestConfig\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..08c867b 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,15 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import pytest\n+import requests\n+from requests import HTTPAdapter\n+from requests.exceptions import DecodeError, Timeout\n+from urllib3.exceptions import DecodeError as Urllib3DecodeError\n+from urllib3.exceptions import ReadTimeoutError, TimeoutError as Urllib3TimeoutError\n+\n+...\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1655,7 +1664,29 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n-def test_vendor_aliases():\n+def test_urllib3_decode_error_is_wrapped():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    try:\n+        # This simulates causing an error in decoding response content\n+        raise Urllib3DecodeError(\"Simulated decode error\")\n+    except DecodeError:\n+        pass  # This is expected, since it should be wrapped\n+    except Urllib3DecodeError:\n+        pytest.fail(\"DecodeError from urllib3 was not wrapped correctly\")\n+\n+def test_urllib3_timeout_error_is_wrapped():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    try:\n+        # Simulate a timeout error, for example during proxy connection\n+        raise Urllib3TimeoutError(\"Simulated timeout error\")\n+    except Timeout:\n+        pass  # This is expected, as it should be wrapped\n+    except Urllib3TimeoutError:\n+        pytest.fail(\"TimeoutError from urllib3 was not wrapped correctly\")\n     from requests.packages import urllib3\n     from requests.packages import chardet\n \n@@ -1663,4 +1694,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..08530f3 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -979,8 +979,36 @@ class TestRequests:\n         r.encoding = 'ascii'\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n+    \n+    def test_response_iter_content_decode_unicode_none(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True when no encoding is set.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'some byte content')\n+        r.encoding = None\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Expected unicode chunks when decode_unicode=True\"\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_iter_content_decode_unicode_false(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=False should return bytes.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'some byte content')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"Expected byte chunks when decode_unicode=False\"\n+\n+    def test_response_iter_content_chunked_encoding(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True and chunked encoding.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'some more content')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(chunk_size=4, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Expected unicode chunks when decode_unicode=True\"\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..57d389a 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -744,6 +744,53 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             assert 'foo' in response.text\n             assert 'bar' in response.text\n \n+    def test_allow_multiple_hooks_in_request_initialization(self):\n+        \"\"\"Test if multiple hooks are correctly registered in Request object initialization\"\"\"\n+        def hook1(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'Hook1': 'hook1'})\n+            return args\n+\n+        def hook2(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'Hook2': 'hook2'})\n+            return args\n+\n+        def hook3(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'Hook3': 'hook3'})\n+            return args\n+\n+        hooks = [hook1, hook2, hook3]\n+        request = requests.models.Request(hooks={'args': hooks})\n+\n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h)\n+\n+        assert_hooks_are_callable(request.hooks)\n+\n+    def test_hooks_functionality(self):\n+        \"\"\"Test the functionality of hooks to alter request attributes\"\"\"\n+        def add_custom_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'X-Custom': 'custom-value'})\n+            return args\n+\n+        hooks = [add_custom_header]\n+        request = requests.models.Request(hooks={'args': hooks})\n+\n+        for hook in request.hooks['args']:\n+            args = {}\n+            modified_args = hook(args)\n+            assert 'X-Custom' in modified_args['headers']\n+            assert modified_args['headers']['X-Custom'] == 'custom-value'\n+            assert 'bar' in response.text\n+\n     def test_session_persistent_cookies(self):\n \n         s = requests.session()\n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..e4439eb 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -20,6 +20,7 @@\n \n from pylint.checkers import misc\n from pylint.testutils import CheckerTestCase, MessageTest, _tokenize_str, set_config\n+import re\n \n \n class TestFixme(CheckerTestCase):\n@@ -119,4 +120,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..626c591 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -87,6 +87,26 @@ def test_unknown_confidence(capsys: CaptureFixture) -> None:\n     assert \"argument --confidence: UNKNOWN_CONFIG should be in\" in output.err\n \n \n+def test_unrecognized_option_handling(capsys: CaptureFixture) -> None:\n+    \"\"\"Test that unrecognized options do not produce a traceback.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([\"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n+    assert \"Unrecognized option found: Q\" in output.err\n+    assert \"Traceback\" not in output.err\n+\n+\n+def test_unrecognized_long_option_handling(capsys: CaptureFixture) -> None:\n+    \"\"\"Test that unrecognized long options do not produce a traceback.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([\"--invalid-option\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n+    assert \"Unrecognized option found: invalid-option\" in output.err\n+    assert \"Traceback\" not in output.err\n+\n+\n def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown yes/no value.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..3d3b19f 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1328,6 +1328,35 @@ class TestRunTC:\n                 self._runtest(\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n+                )  \n+\n+    def test_ignore_paths_with_recursive_flag(self):\n+        \"\"\"Test that ignore-paths works when using --recursive=y\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Create a dummy directory structure and files for testing\n+                directory = join(HERE, \"regrtest_data\", \"directory\")\n+                ignored_dir = join(directory, \"ignored_subdirectory\")\n+                os.makedirs(ignored_dir, exist_ok=True)\n+                with open(join(directory, \"test_file.py\"), 'w') as f:\n+                    f.write(\"# Test file\\n\")\n+                with open(join(ignored_dir, \"ignored_file.py\"), 'w') as f:\n+                    f.write(\"# This should be ignored\\n\")\n+\n+                # Change to the directory and run the test\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n                 )\n \n     def test_regression_recursive_current_dir(self):\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..0dba9b7 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,22 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_module_with_same_name_as_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test module and directory having the same name does not cause linting failure.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        \n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+\n+        linter.check([\"a\"])\n+        assert not linter.stats.by_msg  # Expecting no errors\n+        \n+        # Checking combined module import\n+        linter.check([\"r\", \"a\"])\n+        assert not linter.stats.by_msg  # Expecting no errors after resolution\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +957,20 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_module_with_same_name_as_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test module and directory having the same name does not cause linting failure.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        \n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+\n+        linter.check([\"a\"])\n+        assert not linter.stats.by_msg  # Expecting no errors\n+        \n+        # Checking combined module import\n+        linter.check([\"r\", \"a\"])\n+        assert not linter.stats.by_msg  # Expecting no errors after resolution\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..f65fca6 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -14,7 +15,7 @@ from json import dumps\n from typing import TYPE_CHECKING\n \n import pytest\n-\n+from _pytest.recwarn import WarningsRecorder\n from pylint import checkers\n from pylint.interfaces import HIGH\n from pylint.lint import PyLinter\n@@ -109,11 +110,25 @@ def test_template_option_non_existing(linter) -> None:\n     )\n \n     out_lines = output.getvalue().split(\"\\n\")\n-    assert out_lines[1] == \"my_mod:1::()\"\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n-def test_deprecation_set_output(recwarn):\n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    \"\"\"Test custom braces in message template.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"test_mod\")\n+\n+    # Simulate adding messages\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"line-too-long\", line=2, end_lineno=2, end_col_offset=4, args=(3, 4))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"convention\" }'\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..babecfd 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -298,6 +298,47 @@ class TestImportPath:\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n+    def test_importmode_importlib_no_duplicates(self, tmp_path: Path) -> None:\n+        \"\"\"Ensures modules aren't duplicated in sys.modules with importlib mode.\"\"\"\n+        # Create two modules with potential import side effects.\n+        module_1 = tmp_path / \"namespace_pkg/module1.py\"\n+        module_2 = tmp_path / \"namespace_pkg/module2.py\"\n+\n+        module_1.parent.mkdir(parents=True, exist_ok=True)\n+        module_1.write_text(\"var = 'test'\", encoding=\"utf-8\")\n+        module_2.write_text(\"from . import module1 as m1\", encoding=\"utf-8\")\n+\n+        # Import both modules using importlib mode.\n+        import_path(module_1, mode=\"importlib\", root=tmp_path)\n+        mod2 = import_path(module_2, mode=\"importlib\", root=tmp_path)\n+\n+        # Verify no duplication of modules\n+        assert \"namespace_pkg.module1\" in sys.modules\n+        assert \"namespace_pkg.module2\" in sys.modules\n+        assert sys.modules[\"namespace_pkg.module2\"].m1.var == \"test\"\n+\n+    def test_reimport_with_importlib_remembers_state(\n+        self, simple_module: Path, tmp_path: Path\n+    ) -> None:\n+        \"\"\"Verify that re-importing with importlib mode remembers previous imports.\"\"\"\n+        module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        # Simulate modifying the module state and deleting sys.modules entry.\n+        setattr(module, \"foo\", lambda x: 41 + x)\n+        del sys.modules[module.__name__]\n+\n+        # Re-import and verify state is as expected (reset).\n+        new_mod = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert new_mod.foo(2) == 42  # type: ignore[attr-defined]\n+        assert new_mod is not module  # They should not be the same instance.\n+        \"\"\"`importlib` mode does not change sys.path.\"\"\"\n+        module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module.foo(2) == 42  # type: ignore[attr-defined]\n+        assert str(simple_module.parent) not in sys.path\n+        assert module.__name__ in sys.modules\n+        assert module.__name__ == \"_src.tests.mymod\"\n+        assert \"_src\" in sys.modules\n+        assert \"_src.tests\" in sys.modules\n+\n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n     ) -> None:\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..1f7d5b9 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,12 +1,68 @@\n+\n import logging\n \n import py.io\n \n from _pytest.logging import ColoredLevelFormatter\n \n+import pytest\n+from _pytest.logging import DEFAULT_LOG_FORMAT\n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+    # New format as per the issue\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=logging.INFO,\n+        pathname=\"dummypath/dummy.py\",\n+        lineno=10,\n+        msg=\"Test Message\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == (\n+        \"INFO    dummy_module:dummy.py:10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+    )\n+\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == (\"INFO    dummy_module:dummy.py:10 INFO     Test Message\")\n+\n+@pytest.mark.parametrize(\"level, expected_color\", [\n+    (logging.DEBUG, \"\\x1b[34m\"),\n+    (logging.INFO, \"\\x1b[32m\"),\n+    (logging.WARNING, \"\\x1b[33m\"),\n+    (logging.ERROR, \"\\x1b[31m\"),\n+    (logging.CRITICAL, \"\\x1b[41m\"),\n+])\n+def test_formatter_levels_colors(level, expected_color):\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=level,\n+        pathname=\"dummypath/dummy.py\",\n+        lineno=20,\n+        msg=\"Level %s Test\",\n+        args=(logging.getLevelName(level),),\n+        exc_info=False,\n+    )\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert expected_color in output\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..d9e8894 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -300,7 +300,31 @@ def callequal(left, right, verbose=False):\n     return plugin.pytest_assertrepr_compare(config, \"==\", left, right)\n \n \n+import pytest\n+\n class TestAssert_reprcompare:\n+\n+    def test_bytes_diff_simple(self):\n+        \"\"\"Test assertion rewriting for simple byte string comparisons.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+            \"?  ++\",\n+        ]\n+\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+            \"?  +\",\n+        ]\n     def test_different_types(self):\n         assert callequal([0, 1], \"foo\") is None\n \n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..081f1e1 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,5 +1,7 @@\n+\n import os\n from xml.dom import minidom\n+import platform\n \n import py\n \n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..85b73b8 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,34 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ and __repr__.\n+    \"\"\"\n+\n+    class SomeClass:\n+        def __getattr__(self, attr):\n+            raise RuntimeError(\"Error in __getattr__\")\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Error in __repr__\")\n+\n+    # Check that the saferepr handles the RuntimeError from __repr__ gracefully\n+    repr_output = saferepr(SomeClass())\n+    assert repr_output.startswith(\n+        \"<[RuntimeError('Error in __repr__') raised in repr()] SomeClass object at 0x\"\n+    )\n+    \n+    # Add more tests for exhaustive coverage\n+    class OtherClass:\n+        def __repr__(self):\n+            raise ValueError(\"Some other error\")\n+\n+    repr_output = saferepr(OtherClass())\n+    assert repr_output.startswith(\n+        \"<[ValueError('Some other error') raised in repr()] OtherClass object at 0x\"\n+    )\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +181,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..111925f 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -88,6 +88,32 @@ def test_testdir_runs_with_plugin(testdir) -> None:\n     result = testdir.runpytest()\n     result.assert_outcomes(passed=1)\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test that failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n \n def test_testdir_with_doctest(testdir):\n     \"\"\"Check that testdir can be used within doctests.\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..71d7d12 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,7 @@\n import os\n import sys\n+import os\n+\n from unittest import mock\n \n import pytest\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..56c48d9 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -219,6 +219,31 @@ class TestXFail:\n         assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"\n         assert not hasattr(callreport, \"wasxfail\")\n \n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_location_reporting(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n     def test_xfail_run_anyway(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..1abdb61 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -382,7 +383,30 @@ class TestXFail:\n         \"\"\"\n         )\n \n-    def xtest_dynamic_xfail_set_during_setup(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+    \n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Test case where xfail is added dynamically with strict=True, but the test passes.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..70460c7 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,4 +1,6 @@\n+\n import os\n+from _pytest.monkeypatch import MonkeyPatch\n import stat\n import sys\n from pathlib import Path\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..4834e02 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -598,7 +598,35 @@ def test_ridgecv_store_cv_values():\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n \n-def test_ridgecv_sample_weight():\n+from sklearn.linear_model import RidgeClassifierCV\n+import numpy as np\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test if RidgeClassifierCV can handle store_cv_values=True\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+    \n+    alphas = [0.1, 1.0, 10.0]\n+    \n+    # Initialize RidgeClassifierCV with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    \n+    # Fit the model\n+    r.fit(x, y)\n+    \n+    # Ensure the cv_values_ attribute exists and has correct shape\n+    n_samples, n_alphas = len(y), len(alphas)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+    \n+    # Now test with multi-target y\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).transpose()\n+    \n+    r.fit(x, y_multi)\n+    n_targets = y_multi.shape[1]\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-11281": "",
  "scikit-learn__scikit-learn-12471": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..c134ab2 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..e081a69 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -71,7 +72,23 @@ def test_kernel_pca_consistent_transform():\n     assert_array_almost_equal(transformed1, transformed2)\n \n \n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_flip_consistency():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    \n+    n_runs = 10\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=0)\n+    \n+    transformed_X = []\n+    for _ in range(n_runs):\n+        transformed = kpca.fit_transform(X)\n+        transformed_X.append(transformed)\n+        \n+    # Compare the results to the first run to ensure consistent signs\n+    first_run_signs = np.sign(transformed_X[0])\n+    for i in range(1, n_runs):\n+        current_signs = np.sign(transformed_X[i])\n+        assert_allclose(current_signs, first_run_signs, err_msg=f\"Run {i} has inconsistent signs\")\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..60b921a 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,9 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n@@ -297,6 +301,39 @@ def test_score_samples():\n \n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start_multiple_fits():\n+    \"\"\"Test multiple fits with warm_start and without\"\"\"\n+    rng = check_random_state(0)\n+    X = rng.randn(20, 2)\n+\n+    # Without warm start\n+    clf_no_warm = IsolationForest(n_estimators=10, max_samples=20,\n+                                  random_state=rng, warm_start=False)\n+    clf_no_warm.fit(X)\n+    trees_no_warm_10 = clf_no_warm.estimators_\n+\n+    clf_no_warm.set_params(n_estimators=20)\n+    clf_no_warm.fit(X)\n+    trees_no_warm_20 = clf_no_warm.estimators_\n+\n+    assert len(trees_no_warm_10) == 10\n+    assert len(trees_no_warm_20) == 20\n+    assert trees_no_warm_10[0] is not trees_no_warm_20[0]\n+\n+    # With warm start\n+    clf_with_warm = IsolationForest(n_estimators=10, max_samples=20,\n+                                    random_state=rng, warm_start=True)\n+    clf_with_warm.fit(X)\n+    trees_with_warm_10 = clf_with_warm.estimators_\n+\n+    clf_with_warm.set_params(n_estimators=20)\n+    clf_with_warm.fit(X)\n+    trees_with_warm_20 = clf_with_warm.estimators_\n+\n+    assert len(trees_with_warm_10) == 10\n+    assert len(trees_with_warm_20) == 20\n+    assert trees_with_warm_10[0] is trees_with_warm_20[0]\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n     X = [[0.0], [1.0]]\n     clf = IsolationForest()\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..516cc77 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -172,8 +172,35 @@ def test_mutual_info_classif_mixed():\n         # The MI should be the same\n         assert_equal(mi_nn[2], mi[2])\n \n+def test_fixed_estimate_mi_with_various_discrete_features():\n+    X = np.array([[0, 0, 0],\n+                  [1, 1, 0],\n+                  [2, 0, 1],\n+                  [2, 0, 1],\n+                  [2, 0, 1]], dtype=float)\n+    y = np.array([0, 1, 2, 2, 1], dtype=float)\n \n-def test_mutual_info_options():\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test with discrete features as boolean masks\n+        mi_5 = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        mi_6 = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        assert_array_equal(mi_5, mi_6)\n+\n+        # Test with discrete features as array indices\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n+\n+        # Test with discrete features as inconsistent boolean mask\n+        assert_raises(IndexError, mutual_info, X, y,\n+                      discrete_features=[True, False, True, False])\n+\n+        # Test with incorrect string option\n+        assert_raises(ValueError, mutual_info, X, y,\n+                      discrete_features='manual')\n+\n+        # Check that 'auto' option still works as intended\n+        mi_auto = mutual_info(X, y, discrete_features='auto', random_state=0)\n+        mi_false = mutual_info(X, y, discrete_features=False, random_state=0)\n+        assert_array_equal(mi_auto, mi_false)\n     X = np.array([[0, 0, 0],\n                   [1, 1, 0],\n                   [2, 0, 1],\n@@ -197,4 +224,4 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..400ee2a 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,7 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+import pytest  # Add pytest for testing purposes\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +216,22 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_print_changed_only_with_array():\n+    # Test to verify bug fix for vector values with print_changed_only=True\n+    set_config(print_changed_only=True)\n+    # This should not raise a ValueError\n+    model = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    repr_result = repr(model)\n+    assert 'Cs=array([0.1, 1.])' in repr_result  # Ensure representation includes the Cs parameter correctly\n+\n+    # Additional test cases to cover different array scenarios\n+    model2 = LogisticRegressionCV(Cs=np.array([0.01, 0.1, 1, 10]))\n+    repr_result2 = repr(model2)\n+    assert 'Cs=array([ 0.01,  0.1 ,  1.  , 10.  ])' in repr_result2\n+\n+    # Restore default configuration\n+    set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..c5a8a36 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -10,6 +11,8 @@ from sklearn.utils.testing import assert_raise_message\n from sklearn.exceptions import NotFittedError\n from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.ensemble import RandomForestClassifier\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n from sklearn.model_selection import GridSearchCV\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..2f45bac 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,38 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+@pytest.mark.parametrize('param, value', [\n+    ('n_components', np.int32(3)),\n+    ('max_iter', np.int32(100)),\n+    ('tol', np.float32(0.0001))\n+])\n+def test_parameters_valid_types(param, value):\n+    # check that no error is raised when parameters have numpy integer or\n+    # floating types.\n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n+\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n \n-def test_transformation_dimensions():\n+    nca.fit(X, y)\n+\n+\n+def test_nca_grid_search_compatibility():\n+    # Test that NCA works with GridSearchCV\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca),\n+                     ('knn', knn)])\n+\n+    params = {'nca__tol': [0.1, 0.5, 1.0],  # 1 changed to 1.0 to match float type\n+              'nca__n_components': np.arange(1, 10)}\n+\n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..94ad0de 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,8 +679,22 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n-\n-def test_sparse_precomputed():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the ZeroDivisionError issue\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_.size, \"support_ should be empty\"\n+    assert model.dual_coef_.shape == (1, 0), \"dual_coef_ should be of shape (1, 0)\"\n+    assert model.support_vectors_.shape == (0, X_train.shape[1]), \"support_vectors_ should match input feature width with 0 samples\"\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..bf5da47 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,8 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n@@ -980,7 +981,16 @@ def test_repeated_cv_value_errors():\n         assert_raises(ValueError, cv, n_repeats=1.5)\n \n \n-def test_repeated_kfold_determinstic_split():\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 5, 10\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    expected_repr = (\n+        f\"{repeated_cv.__class__.__name__}(n_repeats={n_repeats}, n_splits={n_splits}, random_state=None)\"\n+    )\n+    assert repr(repeated_cv) == expected_repr\n     X = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n     random_state = 258173307\n     rkf = RepeatedKFold(\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..ebdc9f0 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,7 +1,13 @@\n+\n import warnings\n import numpy as np\n import pickle\n import copy\n+import pytest\n+import numpy as np\n+from sklearn import set_config\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n \n import pytest\n \n@@ -668,7 +674,21 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_cv_with_isotonic_and_pandas_output():\n+    \"\"\"Test CalibratedClassifierCV with isotonic regression when transform_output=\"pandas\".\"\"\"\n+    \n+    # Skip test if pandas is not available\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = np.arange(90).reshape(30, -1)\n+    y = np.arange(30) % 2\n+\n+    with set_config(transform_output=\"pandas\"):\n+        model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\n+        model.fit(X, y)\n+        predictions = model.predict(X)  # Should not raise an exception\n+        assert len(predictions) == len(X)\n+        assert isinstance(predictions, np.ndarray)\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..27ddc0e 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,7 +1,20 @@\n+\n from __future__ import annotations\n \n from typing import overload\n \n+String = str\n+\n+#: Example variable\n+example_var: String\n+\n+\n+class ExampleClass:\n+    \"Example class docstring\"\n+\n+    #: Example attribute\n+    example_attr: String\n+\n myint = int\n \n \n@@ -22,4 +35,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..76919f4 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,31 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+import pytest\n+from sphinx.util.docutils import new_document\n+from docutils.parsers.rst import Parser\n+from sphinx.testing.util import assert_node\n+from sphinx.addnodes import desc, desc_signature, desc_name, desc_addname, desc_content\n+\n+def restructuredtext_parse(app, text):\n+    \"\"\"\n+    Helper function to parse reStructuredText\n+    \"\"\"\n+    doc = new_document('index.rst', app.env.settings)\n+    parser = Parser()\n+    parser.parse(text, doc)\n+    return doc\n+\n+def test_option_with_brackets_only(app):\n+    \"\"\"\n+    Tests the parsing of options with brackets syntax, e.g., [enable=]PATTERN\n+    \"\"\"\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext_parse(app, text)\n+    assert_node(doctree[0], [desc, ([desc_signature, ([desc_name, '[enable'],\n+                                                      [desc_addname, '=]PATTERN'])],\n+                                    [desc_content, ()])])\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..3a91497 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,8 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..98bb479 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -115,7 +117,8 @@ def test_restify_type_ForwardRef():\n     assert restify(ForwardRef(\"myint\")) == \":class:`myint`\"\n \n \n-def test_restify_broken_type_hints():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..3c5904c 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1457,8 +1457,30 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n+    \n+    def test_other_parameters_with_use_param(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n \n-    def test_multiple_parameters(self):\n+        # Test with napoleon_use_param = False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param = True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..a8d4b72 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -60,8 +60,21 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/c/' in stuff\n     assert 'http://foobar/cpp/' in stuff\n \n+import pytest\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_default(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Verify that module pages do not exist for epub when viewcode_enable_epub is False\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+    # Verify that module pages exist for epub when viewcode_enable_epub is True\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..9db1abe 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -322,6 +322,12 @@ def test_mul():\n         assert h == h2\n \n \n+def test_non_disjoint_cycles():\n+    # Test non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([1, 0])  # swapping back results in identity\n+    assert Permutation([[0, 1], [1, 2], [0, 1]]) == Permutation([0, 2, 1])\n+\n def test_args():\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..dbaf17e 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,4 +1,5 @@\n-from sympy import Abs, S, Symbol, I, Rational, PurePoly\n+\n+from sympy import Abs, S, Symbol, I, Rational, PurePoly, Matrix, SparseMatrix\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n@@ -446,6 +447,31 @@ def test_sparse_matrix():\n     A =  SparseMatrix(10, 10, {(0, 0): 18, (0, 9): 12, (1, 4): 18, (2, 7): 16, (3, 9): 12, (4, 2): 19, (5, 7): 16, (6, 2): 12, (9, 7): 18})\n     assert A.row_list() == [(0, 0, 18), (0, 9, 12), (1, 4, 18), (2, 7, 16), (3, 9, 12), (4, 2, 19), (5, 7, 16), (6, 2, 12), (9, 7, 18)]\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n+    \n+    # Test for issue: Behavior of Matrix hstack and vstack changed in sympy 1.1\n+    def test_hstack_vstack_empty_matrices():\n+        # Original reported behavior test for empty hstack\n+        M1 = SparseMatrix.zeros(0, 0)\n+        M2 = SparseMatrix.zeros(0, 1)\n+        M3 = SparseMatrix.zeros(0, 2)\n+        M4 = SparseMatrix.zeros(0, 3)\n+        assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+        \n+        # New behavior check: non-empty rows\n+        N1 = SparseMatrix.zeros(1, 0)\n+        N2 = SparseMatrix.zeros(1, 1)\n+        N3 = SparseMatrix.zeros(1, 2)\n+        N4 = SparseMatrix.zeros(1, 3)\n+        assert SparseMatrix.hstack(N1, N2, N3, N4).shape == (1, 6)\n+        \n+        # Test vstack\n+        P1 = SparseMatrix.zeros(0, 0)\n+        P2 = SparseMatrix.zeros(1, 0)\n+        P3 = SparseMatrix.zeros(2, 0)\n+        assert SparseMatrix.vstack(P1, P2, P3).shape == (3, 0)\n+\n+    test_hstack_vstack_empty_matrices()\n+\n     assert SparseMatrix.eye(2).nnz() == 2\n \n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..eacecee 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -82,7 +82,20 @@ def check(a, exclude=[], check_attr=True):\n #================== core =========================\n \n \n-def test_core_basic():\n+def test_pickle_float_expression_python2_to_3():\n+    import pickle\n+    from sympy import symbols\n+\n+    # Create a SymPy expression in Python 2 style\n+    x = symbols(\"x\")\n+    expr = x + 1.0  # Expression contains a float\n+\n+    # Simulate pickling in Python 2 and unpickling in Python 3\n+    pickled_expr = pickle.dumps(expr, protocol=2)  # Protocol 2 compatible with Python 2\n+    unpickled_expr = pickle.loads(pickled_expr)    # Load it as if it's done in Python 3\n+\n+    # Check that the expression unpickled correctly\n+    assert unpickled_expr == x + 1.0\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n               # XXX: dynamically created types are not picklable\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..162878e 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -267,6 +267,22 @@ def test_coth():\n \n     assert coth(x*I) == -cot(x)*I\n \n+    # New test cases to verify the resolution of the issue\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Test substitution of integer values as per the issue description\n+    assert e.subs(x, 2) != None  # Expect no error, result should be defined\n+    assert e.subs(x, 3) != None  # Repeat the same for other integer values\n+    assert e.subs(x, 5) != None\n+    assert e.subs(x, 6) != None\n+    assert e.subs(x, 8) != None\n+    assert e.subs(x, 9) != None\n+    assert e.subs(x, 11) != None\n+    assert e.subs(x, 12) != None\n+    assert e.subs(x, 13) != None\n+    assert e.subs(x, 15) != None\n+    assert e.subs(x, 18) != None\n+\n     assert coth(k*pi*I) == -cot(k*pi)*I\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..7222c2d 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -200,8 +200,21 @@ def test_col_insert():\n         l = [0, 0, 0]\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n-\n-def test_extract():\n+import sympy as sm\n+\n+def test_issue_13643():\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..15fbd19 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,9 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n+from sympy import Poly\n+from sympy.abc import x, y, z\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -153,8 +156,11 @@ def test_Greedy_postprocess():\n \n     assert opt == {'greedy': True}\n \n-\n-def test_Domain_preprocess():\n+def test_Poly_RR_domain():\n+    # Test Poly with 'RR[y,z]' domain specified\n+    assert Poly(1.2 * x * y * z, x, domain='RR[y,z]').rep == Poly(1.2 * y * z * x, x, domain=RR[y,z]).rep\n+    # Make sure it raises an OptionError with an invalid domain\n+    raises(OptionError, lambda: Poly(1.2 * x * y * z, x, domain='Invalid[y,z]'))\n     assert Domain.preprocess(ZZ) == ZZ\n     assert Domain.preprocess(QQ) == QQ\n     assert Domain.preprocess(EX) == EX\n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..463e45b 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,19 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+def test_pretty_printing_matadd_with_matrixsymbol():\n+    # Test case for issue of pretty printing with special characters in MatrixSymbol names\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    assert pretty(x + y_star) == \"x + y*\"\n+\n+    # Adding negative symbols and expressions\n+    expr1 = -a*x + -2*y_star*y_star\n+    assert pretty(expr1) == \"-a*x - 2*y**2*\"\n+\n+from sympy import MatrixSymbol, pretty\n+from sympy.abc import n, a  # Assuming 'n' and 'a' are intended symbols for test\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..1c24139 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -737,6 +737,21 @@ def test_python_keywords():\n     f = lambdify(python_if, expr)\n     assert f(4.0) == 2.0\n \n+def test_curly_matrix_symbol():\n+    # Issue #15009 - Extended Tests\n+    from sympy import MatrixSymbol, lambdify\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # Test without dummify\n+    lam = lambdify(curlyv, curlyv)\n+    result = lam([[1], [1]])\n+    assert result[0][0] == 1 and result[1][0] == 1\n+\n+    # Test with dummify=True\n+    lam_dummified = lambdify(curlyv, curlyv, dummify=True)\n+    result_dummified = lam_dummified([[2], [2]])\n+    assert result_dummified[0][0] == 2 and result_dummified[1][0] == 2\n+\n \n def test_lambdify_docstring():\n     func = lambdify((w, x, y, z), w + x + y + z)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..57dda48 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -38,6 +39,17 @@ def test_Pow():\n     assert mcode(x**-1.0) == 'x^(-1.0)'\n     assert mcode(x**Rational(2, 3)) == 'x^(2/3)'\n \n+def test_MinMax():\n+    # Test cases for Max\n+    assert mcode(Max(x, 2)) == 'Max[x, 2]'\n+    assert mcode(Max(2, x)) == 'Max[2, x]'  # Ensure it preserves order in cases where order doesn't affect output\n+    assert mcode(Max(y, x, z)) == 'Max[y, x, z]'\n+\n+    # Test cases for Min just for additional coverage\n+    assert mcode(Min(x, 2)) == 'Min[x, 2]'\n+    assert mcode(Min(2, x)) == 'Min[2, x]'  # Ensure it preserves order in cases where order doesn't affect output\n+    assert mcode(Min(y, x, z)) == 'Min[y, x, z]'\n+\n \n def test_Mul():\n     A, B, C, D = symbols('A B C D', commutative=False)\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..c4db3cd 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n@@ -1747,6 +1749,30 @@ def test_MatrixSymbol_printing():\n \n     assert latex(-A) == r\"- A\"\n     assert latex(A - A*B - B) == r\"A - A B - B\"\n+\n+def test_indexed_matrix_expression_latex():\n+    # Test case for the fixed issue with indexed matrix-expression LaTeX printer\n+    \n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    \n+    # Verify that the LaTeX output is correct\n+    expected_latex = r\"\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}\"\n+    assert latex((M*N)[i, j]) == expected_latex\n+\n+    # Additional test with different indices\n+    p, q = symbols(\"p q\")\n+    another_expected_latex = r\"\\sum_{i_{1}=0}^{k - 1} M_{p, i_{1}} N_{i_{1}, q}\"\n+    assert latex((M*N)[p, q]) == another_expected_latex\n+\n+    # Test with different matrix sizes\n+    l = symbols(\"l\")\n+    P = MatrixSymbol(\"P\", l, l)\n+    Q = MatrixSymbol(\"Q\", l, l)\n+    \n+    another_expected_latex_different_size = r\"\\sum_{i_{1}=0}^{l - 1} P_{i, i_{1}} Q_{i_{1}, j}\"\n+    assert latex((P*Q)[i, j]) == another_expected_latex_different_size\n     assert latex(-A*B - A*B*C - B) == r\"- A B - A B C - B\"\n \n \n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..635f6be 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, Eq, exp\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,15 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    f = Function('f')\n+    g = Function('g')\n+    # Test cases based on the issue description\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x) == (x + 1) * exp(x - y) / (y + 1)\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    # Additional cases\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..c36c096 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -587,8 +587,45 @@ def test_empty_f_code():\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n \n+def test_autowrap_unused_array_arg_cython():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n \n-def test_empty_f_code_with_header():\n+    # Create a MatrixSymbol representing an argument that will not be used\n+    x = MatrixSymbol('x', 2, 1)\n+\n+    # Expression does not use `x`\n+    expr = 1.0\n+\n+    # Attempt to autowrap using cython backend\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    # Call the wrapped function with a numpy array, should return 1.0\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n+\n+def test_ccode_unused_array_arg():\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.codegen import codegen\n+    from sympy.utilities.codegen import CCodeGen\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [], header=True)\n     assert source[:82] == (\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..c533ca6 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -344,7 +344,23 @@ def test_intersection():\n \n \n def test_issue_9623():\n-    n = Symbol('n')\n+    x, n = symbols('x n')\n+    \n+    # Test for duplicates in intersection\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    \n+    # Test symbolic intersection\n+    assert Intersection({1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    \n+    # Additional tests for symbolic elements\n+    assert Intersection({1, 2, x}, {1, 2}) == Intersection({1, 2})\n+    assert Intersection({1, 2, x}, {2, 3, x}) == Intersection({2, x})\n+    assert Intersection({1, 2, x}, {3, 4, x}) == Intersection({x})\n+\n+    # Tests for cases when intersection should yield empty set\n+    assert Intersection({x}, {3}) == S.EmptySet\n+    assert Intersection({1}, {2}, {x}) == S.EmptySet\n+    assert Intersection({x}, {x}) == Piecewise(({x}, Eq(x, x)), (S.EmptySet, True))\n \n     a = S.Reals\n     b = Interval(0, oo)\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..5a906f2 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,8 +1,13 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n )\n-from sympy import eye\n+from sympy import eye, Identity\n+from sympy.utilities.pytest import raises\n+from sympy.matrices import MatrixSymbol\n+from sympy import symbols\n+import numpy as np\n from sympy.abc import x, i, j, a, b, c, d\n from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbrt, Sqrt\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n@@ -16,7 +21,22 @@ from sympy.external import import_module\n \n np = import_module('numpy')\n \n-def test_numpy_piecewise_regression():\n+def test_lambdify_identity_matrix():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    n = symbols('n', integer=True)\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    a = np.array([[1, 2], [3, 4]])\n+    expected_result = np.array([[2, 2], [3, 5]])\n+    \n+    # Test correct behavior with specific size\n+    f = lambdify(A, A + Identity(2), 'numpy')\n+    assert np.array_equal(f(a), expected_result)\n+    \n+    # Test symbolic size raises NotImplementedError\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n), 'numpy'))\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..b279ba8 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,14 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n+def test_issue_17137():\n+    # Test cases to verify the fix for the invalid comparison of complex I\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(sin(x)**(2*I + 1)) == sin(x)**(2*I + 1)\n+\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..9fb9cf0 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,7 +1,9 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n+from sympy import sympify\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..c666575 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,45 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, sympify\n+from sympy.core.compatibility import raises\n+\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+            \n+    try:\n+        _ = sympy.Symbol('x') == C()\n+    except AttributeError as e:\n+        print(\"AttributeError raised as expected\")\n+\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert sympy.Symbol('x') != D()  # This should pass.\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1941,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..ab8d523 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,18 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # issue 18186\n+    # Original test patch\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    # Additional test cases to verify symbol order does not affect output\n+    assert diophantine(x**4 + y**4 - 3**4 - 2**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(x**4 + y**4 - 3**4 - 2**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..ef094f0 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,7 +67,7 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert sz.atoms() == {String(typename), String('sizeof')}\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..8916f2f 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,28 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_to_Matrix_with_single_element():\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_BlockDiagMatrix_to_Matrix_with_multiple_elements():\n+    from sympy import Matrix, BlockDiagMatrix, zeros\n+\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    expected_result = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    B = Matrix(D)\n+    assert B == expected_result\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..44df234 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -83,7 +84,29 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_block_index_symbolic():\n+    # Ensure proper behavior with symbolic indices in BlockMatrix\n+    A1 = MatrixSymbol('A1', n, n)\n+    A2 = MatrixSymbol('A2', m, n)\n+    B = BlockMatrix([[A1], [A2]])\n+    assert B[i, 0] == MatrixElement(B, i, 0), \"Should not simplify if uncertain\"\n+\n+def test_block_index_single_element_matrices():\n+    # Verify behavior with single-element matrices in a block matrix\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[0, 0] == A[0, 0]\n+    assert C[i, 0] == MatrixElement(C, i, 0), \"Should remain unsimplified symbolically\"\n+\n+def test_block_index_multiple_layers():\n+    # Test nested BlockMatrices\n+    A1 = MatrixSymbol('A1', n, n)\n+    A2 = MatrixSymbol('A2', n, n)\n+    B1 = BlockMatrix([[A1, A2]])\n+    B2 = BlockMatrix([[B1], [A1]])\n+    assert B2[n, 0] == A1[0, 0], \"Symbolic indices should correctly address the blocks\"\n+    assert B2[i, i] == MatrixElement(B2, i, i), \"Non-deterministic elements remain unsimplified\"\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..09f9f05 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -200,7 +200,31 @@ def test_im():\n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n \n+from sympy import Symbol, Abs, Piecewise, Eq, I, nan, sqrt, S, Heaviside, exp_polar, pi, expand, Rational\n+\n def test_sign():\n+    # Test cases for rewrite in terms of Abs\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', complex=True)\n+\n+    # Check if sign is rewritten correctly in terms of Abs\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # Sign applied to complex numbers rewritten in terms of Abs\n+    assert sign(2 + 2*I).rewrite(Abs) == (2 + 2*I) / Abs(2 + 2*I)\n+    assert sign(-3 - 3*I).rewrite(Abs) == (-3 - 3*I) / Abs(-3 - 3*I)\n+\n+    # Testing the behavior for various aspects of sign with zero checks\n+    zero = Symbol('zero', real=True, zero=True)\n+    assert sign(zero).rewrite(Abs) == 0\n+\n+    nonzero_real_pos = Symbol('nonzero_real_pos', real=True, positive=True)\n+    nonzero_real_neg = Symbol('nonzero_real_neg', real=True, negative=True)\n+\n+    assert sign(nonzero_real_pos).rewrite(Abs) == 1\n+    assert sign(nonzero_real_neg).rewrite(Abs) == -1\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..7a0790e 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,25 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n def test_partitions():\n+    # Verify that each partition is independent\n+    partition_list = list(partitions(6, k=2))\n+    assert len(partition_list) == len(set(id(p) for p in partition_list)), \"Partitions should not reuse dictionaries\"\n+\n+    # Modify one of the partitions and check others are unchanged\n+    original_partitions = list(partitions(4, k=3))\n+    modified_partitions = [p.copy() for p in original_partitions]\n+    \n+    if modified_partitions:\n+        modified_partitions[0][1] = 5  # Arbitrarily modify the first partition\n+    \n+    # Verify no other partitions have changed values\n+    for original, modified in zip(original_partitions, modified_partitions):\n+        if original is not modified:\n+            assert original != modified, \"Modifying one partition should not affect others\"\n+    # Original assertions to verify correct functionality\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..4aec2e5 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,6 +254,17 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n+def test_issue_19572():\n+    # Test expressed issue: 0**-oo should return zoo (Complex Infinity)\n+    from sympy import S, oo, zoo, power\n+    assert 0 ** -oo == zoo\n+    assert power(0, -oo) == zoo\n+    # Additional tests to ensure no regression on related expressions\n+    assert (0**-S.Infinity) == zoo\n+    assert (S.Zero**-oo) == zoo\n+    assert (0**(-oo)).is_infinite\n+\n+\n def test_zero():\n     x = Symbol('x')\n     y = Symbol('y')\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..e5d425f 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,8 +1,9 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n                                  volume, kilometer)\n-from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n+from sympy.physics.units.definitions import (joule, amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n     byte, kibibyte, mebibyte, gibibyte, tebibyte, pebibyte, exbibyte,\n@@ -41,7 +42,15 @@ def test_convert_to():\n     # assert (2*speed_of_light).convert_to(m / s) == 2 * 299792458 * m / s\n     assert day.convert_to(s) == 86400*s\n \n-    # Wrong dimension to convert:\n+    # Issues related to conversion of non-convertible or orthogonal units:\n+    expr = joule * second\n+    conv = convert_to(expr, joule)\n+    assert conv == expr, f\"Expected: {expr}, got: {conv}\"\n+\n+    # Ensure other related conversions work as expected\n+    assert convert_to(joule * second, joule * second) == joule * second\n+    assert convert_to(joule * second, kg * m**2 / s) == kg * m**2 / s\n+    assert convert_to(joule * second, minute) == joule * minute / 60\n     assert q.convert_to(s) == q\n     assert speed_of_light.convert_to(m) == speed_of_light\n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..dded244 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,37 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import sympy\n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_no_dict():\n+    \"\"\"\n+    Test if Symbol instances do not have a __dict__ attribute.\n+\n+    This test covers the issue where Symbol instances should not have\n+    a __dict__, as their attributes are defined in __slots__.\n+    \"\"\"\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        print(s.__dict__)\n+\n+    # Ensures that __slots__ contains the correct attributes\n+    assert s.__slots__ == ('name',)\n+\n+\n+def test_symbol_slots():\n+    \"\"\"\n+    Test if the __slots__ attribute contains correct values.\n+    \"\"\"\n+    s = Symbol('s')\n+    assert s.__slots__ == ('name',)\n+\n+    # Test specific to hasattr() and initialized attributes.\n+    assert hasattr(s, 'name')\n+    assert s.name == 's'\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..60e5194 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -9,6 +10,22 @@ from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n def test_subs():\n+    # Testing issue related to PolynomialError with Piecewise\n+    from sympy.functions.elementary.hyperbolic import sinh, cosh, tanh\n+\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+\n+    clear_cache()\n+    expr1 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr1.subs({1: 1.0}).is_real is None\n+\n+    clear_cache()\n+    expr2 = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr2.subs({1: 1.0}).is_real is None\n+\n+    clear_cache()\n+    expr3 = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr3.subs({1: 1.0}).is_real is None\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..ec40963 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -48,4 +50,17 @@ def test_Matrix_kind():\n def test_MatMul_kind():\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n-    assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n+    assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n+\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    # Test with standard commutative symbol and assert kind is NumberKind\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    # Test with MatrixSymbol which should have MatrixKind with NumberKind inside\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n+    # Additional test cases for verification\n+    B = MatrixSymbol('B', 3, 3)\n+    y = Symbol('y')\n+    assert Derivative(A, y).kind is MatrixKind(NumberKind)\n+    assert Derivative(B, x).kind is MatrixKind(NumberKind)\n+    assert Derivative(B, B).kind is UndefinedKind  # This case is more ambiguous\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..5003bc2 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,6 +131,24 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n+    # New test cases for itermonomials with min_degrees argument\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, \n+        x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, x3**2*x1, x3**2*x2, \n+        x1*x2**2, x1*x3**2, x2*x3**2, x1*x2*x3\n+    }\n+\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {\n+        S.One, x1, x2, x3, \n+        x1**2, x2**2, x3**2, \n+        x1**3, x2**3, x3**3, \n+        x1*x2, x1*x3, x2*x3, \n+        x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, x3**2*x1, x3**2*x2, \n+        x1*x2**2, x1*x3**2, x2*x3**2, x1*x2*x3, \n+        x1**2*x2**2, x1**2*x3**2, x2**2*x3**2, \n+        x1*x2*x3**2, x2*x3*x1**2, x1*x3**2*x2, x2*x1**2*x3\n+    }\n+\n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..2447a87 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,8 +50,14 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n-\n-def test_solve_biquadratic():\n+def test_issue_infinite_solutions():\n+    # Test for detecting infinite solutions.\n+    # The current patch should raise NotImplementedError\n+    # for systems that are not zero-dimensional.\n+  \n+    # Single univariate polynomial in two variables, leading to infinite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system([x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system([y - 1], (x, y)))\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n \n     f_1 = (x - 1)**2 + (y - 1)**2 - r**2\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..b3c4a28 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -8,6 +9,7 @@ from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n+from sympy.core.parameters import evaluate\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n \n@@ -440,7 +442,24 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Original test for the issue\n+    with evaluate(False):\n+        Point2D(1, 2)\n+\n+def test_point2d_evaluate_false():\n+    # Additional tests to verify the fix thoroughly\n+    with evaluate(False):\n+        p1 = Point2D(Integer(1), Integer(2))\n+        p2 = Point2D(Rational(1, 2), Rational(3, 4))\n+        assert p1 == Point2D(1, 2)\n+        assert p2 == Point2D(Rational(1, 2), Rational(3, 4))\n+\n+def test_point_evaluate_false_complex_error():\n+    # Test to ensure complex coordinates raise an error with evaluate(False)\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        with evaluate(False):\n+            Point2D(1 + I, 2)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..b1047e3 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,7 +347,44 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n-def test_cse_MatrixExpr():\n+def test_cse_Substitution_with_MatrixSymbol():\n+    from sympy import cse, MatrixSymbol, Matrix, symbols, pprint\n+\n+    # Create symbolic matrices\n+    A = MatrixSymbol(\"A\", 4, 4)\n+    B = MatrixSymbol(\"B\", 4, 4)\n+\n+    # Create expanded symbolic matrices\n+    def t44(name):\n+        return Matrix(4, 4, lambda i, j: symbols('%s_%d_%d' % (name, i, j)))\n+\n+    a = t44(\"a\")\n+    b = t44(\"b\")\n+\n+    # Simplified expression with CSE\n+    e = a * b\n+    exp = sub_in_matrixsymbols(e, [A, B])\n+    cse_subs, cse_reduced = cse(exp)\n+    \n+    # Ensure that we aren't just copying variables, implying issue is not resolved\n+    for sub in cse_subs:\n+        x, v = sub\n+        assert v != A and v != B, \"MatrixSymbols are being copied directly, issue unresolved.\"\n+\n+    # Perform the C code generation analogous to the reported issue\n+    code = []\n+    for sym, expr in cse_subs:\n+        code.append(f\"{sym} = {expr};\")\n+\n+    # Check if variables are declared but not direct matrix element copies\n+    for line in code:\n+        assert \"[\" in line, \"Generated code does not reflect intended CSE refs, issue unresolved.\"\n+\n+    print(\"CSE Substitutions:\")\n+    pprint(cse_subs)\n+\n+    print(\"Resulting Expression:\")\n+    pprint(cse_reduced)\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..7d1d9e0 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify, symbols, Tuple\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1182,7 +1185,27 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_tuple_with_one_element():\n+    # Test for a tuple with a single element\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,), \"Failed to return a tuple with a single element\"\n+\n+    # Test inspection of the function source code to ensure it includes the correct tuple syntax\n+    source_code = inspect.getsource(lambdify([], (1,)))\n+    assert \"return (1,)\" in source_code, \"Source code does not contain the correct tuple syntax\" \n+\n+    # Test for a tuple with multiple elements to ensure it is not affected\n+    f_multiple = lambdify([], (1, 2, 3))\n+    assert f_multiple() == (1, 2, 3), \"Failed to return a tuple with multiple elements\"\n+\n+    # Verify correct handling of other cases for expected behavior\n+    x, y = symbols('x y')\n+    f_expr = lambdify([x], (x**2,))\n+    assert f_expr(2) == (4,), \"Failed to return a tuple with a single evaluated element\"\n+\n+    # Test with an explicit sympy Tuple\n+    f_sympy_tuple = lambdify([], Tuple(1))\n+    assert f_sympy_tuple() == Tuple(1), \"Failed to return a sympy Tuple with a single element\"\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..f043ff0 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+    from sympy import exp\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+    \n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..786b251 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,31 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_issue_fix():\n+    # Tests based on the original patch provided in the issue description\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test cases to ensure expansive behavior for different scenarios\n+    U = Operator('U')\n+    V = Operator('V')\n+\n+    # Case with scalar multiplication\n+    P = TP(2*U - V, U + V)\n+    assert P.expand(tensorproduct=True) == \\\n+        2*TP(U, U) + 2*TP(U, V) - TP(V, U) - TP(V, V)\n+\n+    # Nested tensor products\n+    assert TP(TP(U, V), U + V).expand(tensorproduct=True) == \\\n+        TP(U, V, U) + TP(U, V, V)\n+\n+    # Zero in tensor product factors\n+    assert TP(0*U, U + V).expand(tensorproduct=True) == 0\n+    assert TP(U - U, V).expand(tensorproduct=True) == 0\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..c1f4528 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,4 +1,6 @@\n+\n import warnings\n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter, SI\n \n from sympy.core.add import Add\n from sympy.core.function import (Function, diff)\n@@ -562,6 +564,33 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24211_addition_with_equivalent_dimensions():\n+    V1 = Quantity('v1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+\n+    A1 = Quantity('a1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('t1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    # Expression (a1 * t1 + v1) should check if dimensions are equivalent\n+    expr1 = A1 * T1 + V1\n+    # Should not throw ValueError; dimensions should simplify to equivalent\n+    SI._collect_factor_and_dimension(expr1)\n+\n+    # Test with zero factor, should also not raise an error\n+    A2 = Quantity('a2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, 0 * meter / second**2)\n+\n+    expr2 = A2 * T1 + V1\n+    # Should not throw ValueError even if a2 * t1 is zero\n+    SI._collect_factor_and_dimension(expr2)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..8834ee1 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,31 @@\n+\n+def test_milli_prefix():\n+    # Test that milli*W evaluates to mW\n+    assert milli * W == mW\n+    # Test that W*milli gives the same result as milli*W\n+    assert W * milli == mW\n+    \n+    # Adding tests for Volts and other units:\n+    from sympy.physics.units import V, mV\n+    \n+    # Test that milli*V evaluates to mV\n+    assert milli * V == mV\n+    # Test that V*milli gives the same result as milli*V\n+    assert V * milli == mV\n+    \n+    # Test with other units and ensure no incorrect behavior\n+    from sympy.physics.units import meter, mm\n+    \n+    # Test that milli*meter evaluates to mm\n+    assert milli * meter == mm\n+    # Test that meter * milli gives the same result as milli * meter\n+    assert meter * milli == mm\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, mW, milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..42f0a22 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -185,11 +185,13 @@ class GrandParent(models.Model):\n \n \n class Parent(GrandParent):\n-    pass\n+    class Meta:\n+        ordering = [\"-pk\"]\n \n \n class Child(Parent):\n-    pass\n+    class Meta:\n+        ordering = [\"-pk\"]\n \n \n class GrandChild(Child):\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..17f969e 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -342,6 +342,46 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+    \n+    def test_order_by_self_referencing_fk(self):\n+        # Similar setup to the original patch\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1)\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2)\n+        author_1.editor = author_2  # Creating a self-referencing FK scenario\n+        author_1.save()\n+        author_2.editor = author_1  # Creating a self-referencing FK scenario\n+        author_2.save()\n+\n+        # Verify different order_by scenarios as described in the issue\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+        \n+        # Test with inverted order and annotating\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Using annotation as a workaround\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False)\n+            .annotate(editor_id=F('author__editor_id'))\n+            .order_by('editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n \n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n",
  "django__django-13265": "",
  "django__django-14534": "",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..ef84d9f 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -258,5 +258,30 @@ def test_set_output_mro():\n \n     class C(A, B):\n         pass\n+    assert C().transform(None) == \"B\"\n \n-    assert C().transform(None) == \"B\"\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output and custom transformer that aggregates data.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import make_union\n+    from sklearn import set_config\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return pd.DataFrame(X[\"value\"].groupby(X[\"date\"]).sum())\n+\n+    set_config(transform_output=\"pandas\")\n+    X_trans = make_union(MyTransformer()).fit_transform(data)\n+    expected_shape = (4, 1)  # As we have 4 unique dates and aggregate the 'value' column\n+\n+    assert isinstance(X_trans, pd.DataFrame), \"Output is not a DataFrame\"\n+    assert X_trans.shape == expected_shape, f\"Unexpected output shape: {X_trans.shape}\"\n+    pd.testing.assert_index_equal(X_trans.index, pd.Index(data[\"date\"].unique()))\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..07f00dd 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -105,6 +105,34 @@ def test_inherited_instance_variable(app):\n         '',\n     ]\n \n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only_issue.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_only_issue',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_only_issue',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_only_issue',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n \n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n@@ -115,6 +143,34 @@ def test_decorators(app):\n         '',\n     ]\n \n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only_issue.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_only_issue',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_only_issue',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_only_issue',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n     actual = do_autodoc(app, 'class', 'target.decorator.Qux')\n     assert list(actual) == [\n         '',\n@@ -131,6 +187,34 @@ def test_decorators(app):\n         '',\n     ]\n \n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only_issue.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_only_issue',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_only_issue',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_only_issue',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..ee03fb9 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -366,6 +367,29 @@ def test_exptrigsimp():\n         return True\n \n     assert exptrigsimp(exp(x) + exp(-x)) == 2*cosh(x)\n+\n+def test_issue_simplify_trig_with_rational():\n+    # This tests simplifying trig expressions with Rational inputs\n+    \n+    # Variables setup\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    \n+    # Test simplification of dot product\n+    r = t1.dot(t2)\n+    assert trigsimp(r) == cos(S(1) / 50)\n+\n+    # Test simplification of a direct trig expression\n+    expr = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    assert trigsimp(expr) == cos(S(1) / 50)\n+    \n+    # Negative rational angle simplification\n+    expr_neg = sin(-Rational(1, 50)) * sin(-Rational(1, 25)) + cos(-Rational(1, 50)) * cos(-Rational(1, 25))\n+    assert trigsimp(expr_neg) == cos(S(1) / 50)\n+\n+    # Test with acos function for trigonometric simplification\n+    assert simplify(acos(expr)) == S(1) / 50\n+    assert simplify(acos(expr_neg)) == -S(1) / 50\n     assert exptrigsimp(exp(x) - exp(-x)) == 2*sinh(x)\n     assert exptrigsimp((2*exp(x)-2*exp(-x))/(exp(x)+exp(-x))) == 2*tanh(x)\n     assert exptrigsimp((2*exp(2*x)-2)/(exp(2*x)+1)) == 2*tanh(x)\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..bbfec04 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,6 +4862,38 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_pretty_sum_with_addition():\n+    from sympy import Sum, oo\n+    from sympy.abc import x\n+\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ascii_str = \\\n+\"\"\"\\\n+  oo   \\n\\\n+ ___   \\n\\\n+ \\\\  `  \\n\\\n+  \\\\    \\n\\\n+  /   x\\n\\\n+ /__,  \\n\\\n+x = 1  \\n\\\n+     + 3\\\n+\"\"\"\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e    \\n\\\n+ ___   \\n\\\n+ \u2572     \\n\\\n+  \u2572    \\n\\\n+  \u2571   x\\n\\\n+ \u2571     \\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  \\n\\\n+     + 3\\\n+\"\"\")\n+\n+    assert pretty(expr) == ascii_str\n+    assert upretty(expr) == ucode_str\n+\n \n def test_units():\n     expr = joule\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..c49374d 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,6 +8,7 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..526ca4c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,7 +546,24 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_sql_issue(self):\n+        from django.db import connection\n+        from django.db.models import Subquery\n+        from apps.models import App\n+\n+        # Construct a subquery\n+        q = Subquery(App.objects.all())\n+        \n+        # Check if subquery attribute is set to True in Subquery\n+        self.assertIs(q.query.subquery, True)\n+\n+        # Get the SQL string from as_sql method\n+        compiler = q.query.get_compiler(connection=connection)\n+        sql, _ = q.as_sql(compiler, connection)\n+\n+        # Validate SQL is properly formatted with starting SELECT and ending parenthesis\n+        self.assertTrue(sql.startswith('(SELECT '))\n+        self.assertTrue(sql.endswith(')'))\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 0ecd041..95f6c84 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -437,7 +437,32 @@ class InspectDBTestCase(TestCase):\n class InspectDBTransactionalTests(TransactionTestCase):\n     available_apps = [\"inspectdb\"]\n \n-    def test_include_views(self):\n+    def test_related_name_for_same_model_foreign_keys(self):\n+        \"\"\"Ensure inspectdb generates related_name for fields with multiple FKs to the same model.\"\"\"\n+        out = StringIO()\n+        with mock.patch(\n+            \"django.db.connection.introspection.get_table_list\",\n+            return_value=[TableInfo(name=\"module_samerelation\", type=\"t\")],\n+        ), mock.patch(\n+            \"django.db.connection.introspection.get_relations\",\n+            return_value={\n+                (\"field1\", \"module_people\", \"id\"),\n+                (\"field2\", \"module_people\", \"id\"),\n+            },\n+        ):\n+            call_command(\"inspectdb\", \"module_samerelation\", stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"class ModuleSamerelation(models.Model):\", output\n+        )\n+        self.assertIn(\n+            \"field1 = models.ForeignKey(People, models.CASCADE, related_name='module_samerelation_field1_set')\",\n+            output\n+        )\n+        self.assertIn(\n+            \"field2 = models.ForeignKey(People, models.CASCADE, related_name='module_samerelation_field2_set')\",\n+            output\n+        )\n         \"\"\"inspectdb --include-views creates models for database views.\"\"\"\n         with connection.cursor() as cursor:\n             cursor.execute(\n",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..28ceda4 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,24 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_wrong_select_related(self):\n+        # Test case from the issue report to verify the fix\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+            ).select_related('tournament_pool'))\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        # Original patch test for the provided fix verification\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +182,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..fe0372d 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -12,7 +13,17 @@ import pytest\n from PIL import Image\n \n import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+import pickle\n from matplotlib import gridspec, rcParams\n+\n+def test_dpi_doubling_on_unpickle():\n+    fig = plt.figure(dpi=100)\n+    orig_dpi = fig.dpi\n+    \n+    for _ in range(20):  # Test unpickling 20 times\n+        fig = pickle.loads(pickle.dumps(fig))\n+        assert fig.dpi == orig_dpi, f\"DPI was altered after unpickling: {fig.dpi} != {orig_dpi}\"\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n from matplotlib.figure import Figure, FigureBase\n",
  "mwaskom__seaborn-2848": "",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..2d68064 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,7 +323,13 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n-def test_excinfo_exconly():\n+import pytest\n+\n+def test_excinfo_raises_context_variable_str():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    assert str(excinfo) == \"<ExceptionInfo LookupError tblen=1>\"\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n     with pytest.raises(ValueError) as excinfo:\n@@ -333,7 +339,10 @@ def test_excinfo_exconly():\n     assert msg.endswith(\"world\")\n \n \n-def test_excinfo_repr():\n+def test_excinfo_raises_value_str():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n     excinfo = pytest.raises(ValueError, h)\n     s = repr(excinfo)\n     assert s == \"<ExceptionInfo ValueError tblen=4>\"\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..4dc16ca 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+    def test_collect_only_shortcut(self, testdir):\n+        testdir.makepyfile(\"def test_y(): pass\")\n+        result = testdir.runpytest(\"-C\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+    def test_collect_only_shortcut(self, testdir):\n+        testdir.makepyfile(\"def test_y(): pass\")\n+        result = testdir.runpytest(\"-C\")\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..5453cf4 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -91,6 +91,18 @@ def missing_attr(c,\n     return a + (b or \"\")\n \n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n+\n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n \n@@ -98,4 +110,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..49c5a99 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,43 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import MatrixSymbol, Q as Query, Symbol, symbols, Sum, Identity, assuming, ask, refine\n \n def test_Identity_doit():\n+    # Setup for the test case based on the issue description\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+    \n+    e = None\n+    # Assuming M is orthogonal and computing M.T * M\n+    with assuming(Query.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+    # Verify M.T * M is recognized as an identity matrix\n+    assert e[0, 0] == 1\n+    assert e[0, 1] == 0\n+    assert e[1, 0] == 0\n+    assert e[1, 1] == 1\n+\n+    # Verify diagonal and integer elements properties\n+    assert ask(Query.diagonal(e)) is True\n+    assert ask(Query.integer_elements(e)) is True\n+\n+    # Verify the sum of the diagonal elements is n\n+    assert Sum(e[i, i], (i, 0, n-1)).doit() == n\n+\n+    # Verify the total sum of all elements is n\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n+    # Additional test: Checking with a specific matrix size\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).subs(n, 3).doit() == 3\n+\n+    # Original test patch integration\n+    In = Identity(n)\n+    assert In[i, j] != 0\n+    assert Sum(In[i, j], (i, 0, n-1), (j, 0, n-1)).subs(n, 3).doit() == 3\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).subs(n, 3).doit() == 3\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": ""
}