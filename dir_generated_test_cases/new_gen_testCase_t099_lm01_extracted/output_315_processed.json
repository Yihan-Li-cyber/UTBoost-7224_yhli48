{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..f042b71 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,37 @@ compound_models = {\n             )\n }\n \n+def test_separability_nested_compound_models():\n+    from astropy.modeling import models\n+    from astropy.modeling.separable import separability_matrix\n+\n+    # Base models\n+    linear1 = models.Linear1D(10)\n+    linear2 = models.Linear1D(5)\n+    pix2sky = models.Pix2Sky_TAN()\n+\n+    # Simple compound model\n+    cm = linear1 & linear2\n+    expected_matrix_cm = np.array([[True, False], \n+                                   [False, True]])\n+    assert np.array_equal(separability_matrix(cm), expected_matrix_cm)\n+\n+    # More complex model\n+    complex_model = pix2sky & linear1 & linear2\n+    expected_matrix_complex = np.array([[True,  True, False, False],\n+                                        [True,  True, False, False],\n+                                        [False, False, True,  False],\n+                                        [False, False, False, True]])\n+    assert np.array_equal(separability_matrix(complex_model), expected_matrix_complex)\n+\n+    # Nested compound model\n+    nested_model = pix2sky & cm\n+    expected_nested_matrix = np.array([[True,  True, False, False],\n+                                       [True,  True, False, False],\n+                                       [False, False, True,  False],\n+                                       [False, False, False, True]])\n+    assert np.array_equal(separability_matrix(nested_model), expected_nested_matrix)\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..9516ed2 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,13 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+from astropy.table import QTable\n+from io import StringIO\n+import astropy.units as u\n+import numpy as np\n \n from .common import assert_almost_equal, assert_equal\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..d4b2294 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,46 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+import numpy as np\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_case_insensitivity(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    \"\"\"\n+\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"test_case_insensitivity.qdp\")\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n \n-def test_read_example():\n+    table = _read_table_qdp(path)\n+    assert np.isclose(table[\"MJD_perr\"][0], 2.37847222222222e-05)\n+    assert np.isclose(table[\"MJD_nerr\"][0], -2.37847222222222e-05)\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..e9e6f8c 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,47 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..db3a171 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,6 +1100,21 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n+        # Test default file upload permissions when FILE_UPLOAD_PERMISSIONS is not set\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n+        # Test with explicitly set FILE_UPLOAD_PERMISSIONS\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o600):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o600)\n+\n+        # Test the handling of temporary files with default permissions\n+        def mock_save_behavior():\n+            # Simulate a scenario where a tempfile is used\n+            temp_file_permission = 0o600\n+            return temp_file_permission\n+\n+        self.assertEqual(mock_save_behavior(), 0o600)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..79716f7 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -514,6 +514,22 @@ class MigrateTests(MigrationTestBase):\n             out.getvalue()\n         )\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_no_transaction_for_non_transactional_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support\n+        transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_plan_app_label_no_migrations(self):\n         out = io.StringIO()\n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..7dc707a 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -65,8 +65,30 @@ class TestSerialization(SimpleTestCase):\n         self.assertEqual(instance.field, datetime.timedelta(days=1, hours=1))\n \n \n+from django.core import exceptions\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n class TestValidation(SimpleTestCase):\n \n+    def test_valid_durations(self):\n+        field = models.DurationField()\n+        # Valid cases\n+        try:\n+            field.clean('30', None)  # 30 seconds\n+            field.clean('15:30', None)  # 15 minutes, 30 seconds\n+            field.clean('1:15:30', None)  # 1 hour, 15 minutes, 30 seconds\n+            field.clean('1 1:15:30.3', None)  # 1 day, 1 hour, 15 minutes, 30.3 seconds\n+        except exceptions.ValidationError as e:\n+            self.fail(f\"Unexpected ValidationError: {e}\")\n+\n+    def test_invalid_durations(self):\n+        field = models.DurationField()\n+        invalid_values = ['14', '1:40:60', '1::30', '1:60', 'abcd']\n+        for value in invalid_values:\n+            with self.assertRaises(exceptions.ValidationError):\n+                field.clean(value, None)\n+\n     def test_invalid_string(self):\n         field = models.DurationField()\n         with self.assertRaises(exceptions.ValidationError) as cm:\n@@ -75,7 +97,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +106,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..a461977 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,25 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_trailing_newline_in_username(self):\n+        # Test usernames with trailing newline characters\n+        unicode_validator = validators.UnicodeUsernameValidator()\n+        ascii_validator = validators.ASCIIUsernameValidator()\n+\n+        # Create a list of usernames that have trailing newline\n+        usernames_with_newline = ['validname\\n', 'joe\\n', 'A-Name\\n']\n+\n+        # Test UnicodeUsernameValidator against these usernames\n+        for username in usernames_with_newline:\n+            with self.subTest(username=username):\n+                with self.assertRaises(ValidationError):\n+                    unicode_validator(username)        \n+\n+        # Test ASCIIUsernameValidator against these usernames\n+        for username in usernames_with_newline:\n+            with self.subTest(username=username):\n+                with self.assertRaises(ValidationError):\n+                    ascii_validator(username)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +276,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..d1daf57 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,24 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        # Test basic memoryview content\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+        # Test empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+        # Test single byte memoryview\n+        r = HttpResponse(memoryview(b'a'))\n+        self.assertEqual(r.content, b'a')\n+\n+        # Test larger content with memoryview\n+        large_content = b'This is a large content for testing memoryview handling in HttpResponse.'\n+        r = HttpResponse(memoryview(large_content))\n+        self.assertEqual(r.content, large_content)\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..1741597 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n@@ -476,8 +478,17 @@ class FastDeleteTests(TestCase):\n         User.objects.create(avatar=a)\n         u2 = User.objects.create()\n         expected_queries = 1 if connection.features.update_can_self_select else 2\n-        self.assertNumQueries(expected_queries,\n-                              User.objects.filter(avatar__desc='a').delete)\n+        self.assertNumQueries(expected_queries, User.objects.filter(avatar__desc='a').delete)\n+\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a User instance and ensure that it can be fast-deleted\n+        u = User.objects.create()\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+\n+        # Delete the instance and check that the PK is set to None\n+        u.delete()\n+        self.assertIsNone(u.pk)\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..54b4a0e 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,6 +1,10 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n+from django.contrib.contenttypes.models import ContentType\n+from django.contrib.auth.models import Permission\n+from django.test.utils import captured_stdout\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n@@ -140,7 +144,46 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_migration_handles_existing_permissions(self):\n+        \"\"\"\n+        Test that existing permissions do not cause a duplicate key error.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(UserProxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_userproxy',\n+            name='Can add user proxy',\n+        )\n+        # Run the migration which should handle existing permissions gracefully\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        # Verify that there are no duplicate permissions\n+        permissions = Permission.objects.filter(content_type=proxy_model_content_type)\n+        permission_codenames = permissions.values_list('codename', flat=True)\n+        self.assertEqual(len(permission_codenames), len(set(permission_codenames)))\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..91b15b8 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -9,6 +9,7 @@ import time\n import types\n import weakref\n import zipfile\n+import sys\n from importlib import import_module\n from pathlib import Path\n from unittest import mock, skip, skipIf\n@@ -133,7 +134,24 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((module,), frozenset()), frozenset())\n \n \n-class TestCommonRoots(SimpleTestCase):\n+class TestManagePyDetection(SimpleTestCase):\n+    \"\"\"Tests specifically for ensuring manage.py is detected by StatReloader.\"\"\"\n+\n+    def test_manage_py_is_detected(self):\n+        main_module = sys.modules['__main__']\n+        manage_py_path = Path(main_module.__file__).resolve()\n+        \n+        # Assuming manage.py is the file being executed.\n+        with self.subTest(\"manage.py should be detected before any modification\"):\n+            self.assertFileFound(manage_py_path)\n+\n+        # Simulate a change in manage.py\n+        with open(manage_py_path, 'a') as manage_py_file:\n+            manage_py_file.write(\"\\n# Test autoreload detection\")\n+        \n+        # After changing manage.py, it should trigger the reload detection\n+        with self.subTest(\"manage.py should still be detected after modification\"):\n+            self.assertFileFound(manage_py_path)\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..fe1ceab 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -153,6 +153,39 @@ class TestCommonRoots(SimpleTestCase):\n         self.assertCountEqual(results, [Path('/first/'), Path('/root/first/')])\n \n \n+class TestEmbeddedNullBytes(SimpleTestCase):\n+    def test_path_with_embedded_null_bytes(self):\n+        # Test cases for paths with embedded null bytes\n+        problematic_paths = [\n+            'embedded_null_byte\\x00.py',\n+            'di\\x00rectory/embedded_null_byte.py',\n+            '/path/with/\\x00embedded/null_byte.py',\n+            '/another/\\x00path/to/file.py',\n+            'normal_path.py',  # Including a normal path for control\n+        ]\n+        for path in problematic_paths:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+\n+    def test_handling_of_synthetic_path_failurers(self):\n+        # This test ensures that paths not resulting in ValueError are processed as expected\n+        valid_paths = [\n+            'normal_script.py',\n+            '/valid/path/to/file.py',\n+            '/another/valid/path.py',\n+        ]\n+        for path in valid_paths:\n+            with self.subTest(path=path):\n+                # Just to ensure they don't raise implicitly or explicitly\n+                try:\n+                    results = autoreload.iter_modules_and_files((), frozenset([path]))\n+                    self.assertIn(Path(path).resolve(strict=False).absolute(), results)\n+                except Exception as e:\n+                    self.fail(f\"Valid path '{path}' raised an exception: {e}\")\n+\n class TestSysPathDirectories(SimpleTestCase):\n     def setUp(self):\n         self._directory = tempfile.TemporaryDirectory()\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..8905064 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -19,6 +19,8 @@ from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n from django.utils.functional import SimpleLazyObject\n from django.utils.safestring import mark_safe\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n     Path as DebugPath, cleanse_setting, default_urlconf,\n@@ -238,6 +240,24 @@ class DebugViewTests(SimpleTestCase):\n             m.assert_called_once_with(encoding='utf-8')\n \n \n+class ConverterHttp404Tests(SimpleTestCase):\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that when Http404 is raised in a path converter's to_python method\n+        and DEBUG is True, a technical 404 page is returned.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_converter_valueerror_fallback(self):\n+        \"\"\"\n+        Test that a ValueError in to_python method allows URL resolver to try next path.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=ValueError):\n+            response = self.client.get('/path-post/1/')\n+            self.assertNotEqual(response.status_code, 404)\n+\n class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..10d0572 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -292,8 +292,50 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E005',\n             ),\n         ])\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+                \n+    def test_nested_choices_with_valid_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=10, choices=[\n+                    ('Short', 'Short'), ('ModeratelyLong', 'ModeratelyLong')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=20, choices=[\n+                    ('Nested', [('Short', 'Short'), ('LongerDescription', 'LongerDescription')]),\n+                    ('Grouped', [('Adequate', 'Adequate')]),\n+                ],\n+            )\n \n-    def test_choices_named_group_lazy(self):\n+        for name in ('field', 'group'):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [])\n         class Model(models.Model):\n             field = models.CharField(\n                 max_length=10, choices=[\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..de67045 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -252,7 +252,25 @@ class WriterTests(SimpleTestCase):\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n-    def test_serialize_enums(self):\n+    def test_serialize_enum_translation(self):\n+        from enum import Enum\n+        from django.utils.translation import gettext_lazy as _\n+        from django.db import models\n+        from django.db.migrations.writer import MigrationWriter\n+\n+        class TranslatedEnum(Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            max_length=128,\n+        )\n+\n+        serialized_string = MigrationWriter.serialize(field)[0]\n+        expected_default = \"migrations.test_writer.TranslatedEnum['GOOD']\"\n+        \n+        self.assertIn(expected_default, serialized_string)\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..6bf40e2 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,4 +1,6 @@\n+\n import unittest\n+from unittest import mock\n from datetime import datetime\n \n from django.test import SimpleTestCase, ignore_warnings\n@@ -316,7 +318,27 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..14ecf5d 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -80,6 +80,15 @@ class ChoicesTests(SimpleTestCase):\n         self.assertIn(1, Suit)\n         self.assertNotIn(0, Suit)\n \n+    def test_enum_str_representation(self):\n+        # Initialize different enum classes\n+        enums_to_test = [Gender, Suit, YearInSchool, Vehicle]\n+        for enum_class in enums_to_test:\n+            for enum_member in enum_class:\n+                with self.subTest(enum_member=enum_member):\n+                    # Check if the __str__ of each member corresponds to its value\n+                    self.assertEqual(str(enum_member), enum_member.value)\n+\n     def test_textchoices(self):\n         self.assertEqual(YearInSchool.choices, [\n             ('FR', 'Freshman'), ('SO', 'Sophomore'), ('JR', 'Junior'), ('SR', 'Senior'), ('GR', 'Graduate'),\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..a9fe561 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -186,6 +186,17 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsNone(WhizIterEmpty(c=None).c)         # Blank value\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n+    def test_override_get_FIELD_display(self):\n+        \"\"\"Test overriding the get_FIELD_display() method.\"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+        \n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n \n class GetChoicesTests(SimpleTestCase):\n \n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..9c8286a 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -14,4 +14,5 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.empty_view, name='modules'),\n+]\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..ce1c421 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -148,6 +149,22 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+class InheritanceFieldDisplayTests(TestCase):\n+    def test_overriding_inherited_field_display_with_additional_choices(self):\n+        class BaseModel(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'output1'), ('B', 'output2')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(BaseModel):\n+            foo = models.CharField(max_length=254, choices=[('A', 'output1'), ('B', 'output2'), ('C', 'output3')])\n+\n+        # Test output for overridden and additional choices\n+        self.assertEqual(ChildModel(foo='A').get_foo_display(), 'output1')\n+        self.assertEqual(ChildModel(foo='B').get_foo_display(), 'output2')\n+        self.assertEqual(ChildModel(foo='C').get_foo_display(), 'output3')\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n     def test_choices_and_field_display(self):\n",
  "django__django-12286": "",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..06469fd 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,69 @@\n+\n+class TestDeserializeDbFromString(TestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertIsNone(obj.obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_foreign_key_constraint(self):\n+        # Test to check foreign key relationships are deserialized correctly.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        with self.assertRaises(ObjectReference.DoesNotExist):\n+            connection.creation.deserialize_db_from_string(data)\n+\n+    def test_multiple_objects(self):\n+        # Ensure multiple related objects are deserialized correctly.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": [1]}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj_1 = Object.objects.get(pk=1)\n+        obj_2 = Object.objects.get(pk=2)\n+        self.assertIn(obj_1, obj_2.related_objects.all())\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +71,8 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..76d5395 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,7 +159,30 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_relationship_model_with_foreign_key_to_wrong_model(self):\n+    def test_fixed_recursive_relationship_hint(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            related_persons = models.ManyToManyField('Person', through='FixedAmbiguousRelationship')\n+\n+        class FixedAmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('related_persons')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by 'invalid_models_tests.Group.related_persons', but it has more than one foreign key from 'Group', which is ambiguous. You must specify which foreign key Django should use via the through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"FixedAmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n         class WrongModel(models.Model):\n             pass\n \n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..4a6c8bb 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1241,6 +1241,45 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        \"\"\"\n+        Test that cleanse_setting correctly traverses lists, tuples, and nested structures\n+        while cleansing sensitive values.\n+        \"\"\"\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+       \n     def test_cleanse_setting_recurses_in_dictionary(self):\n         reporter_filter = SafeExceptionReporterFilter()\n         initial = {'login': 'cooper', 'password': 'secret'}\n",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..2014593 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -46,7 +46,40 @@ class MigrationTestBase(TransactionTestCase):\n     def assertColumnNotExists(self, table, column, using='default'):\n         self.assertNotIn(column, [c.name for c in self.get_table_description(table, using=using)])\n \n-    def _get_column_allows_null(self, table, column, using):\n+    from django.test import skipUnlessDBFeature\n+    from django.db import connections, models, migrations\n+\n+    def assertUniqueConstraintExists(self, table, columns, value=True, using='default'):\n+        with connections[using].cursor() as cursor:\n+            constraints = connections[using].introspection.get_constraints(cursor, table).values()\n+            self.assertEqual(\n+                value,\n+                any(c['unique'] for c in constraints if c['columns'] == list(columns)),\n+            )\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_conflict_with_unique_together(self):\n+        app_label = 'test_conflict_index_unique_together'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Attempt to remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        # Ensure unique_together is not affected\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         return [c.null_ok for c in self.get_table_description(table, using=using) if c.name == column][0]\n \n     def assertColumnNull(self, table, column, using='default'):\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..075520c 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,7 +685,32 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n-    def test_fast_delete_empty_no_update_can_self_select(self):\n+    def test_zero_delete_with_foreign_keys(self):\n+        \"\"\"\n+        Test deletion when zero objects are deleted and foreign keys are involved.\n+        The result should have a dictionary with model-label keys and zero values.\n+        \"\"\"\n+        R.objects.create()  # Create an object to ensure the model is not empty.\n+        existed_objs = {\n+            R._meta.label: R.objects.none().count(),\n+            HiddenUser._meta.label: HiddenUser.objects.none().count()\n+        }\n+        deleted, deleted_objs = R.objects.none().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, existed_objs)\n+\n+    def test_zero_delete_without_foreign_keys(self):\n+        \"\"\"\n+        Test deletion when zero objects are deleted and no foreign keys are involved.\n+        The result should have a dictionary with model-label keys and zero values.\n+        \"\"\"\n+        BlockLibrary.objects.create()  # Assuming BlockLibrary is a model without foreign keys.\n+        existed_objs = {\n+            BlockLibrary._meta.label: BlockLibrary.objects.none().count(),\n+        }\n+        deleted, deleted_objs = BlockLibrary.objects.none().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, existed_objs)\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n         `no_update_can_self_select` feature should work even if the specified\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..3588db3 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,61 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = Path(TEST_STATIC_ROOT) / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n+    async def test_get_async_response_invalid_method(self):\n+        request = self.async_request_factory.post('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 405)  # Method Not Allowed\n+\n+    async def test_get_async_response_no_path(self):\n+        request = self.async_request_factory.get('/static/')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)  # No specific file requested\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..2898733 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -203,7 +203,25 @@ class TestUtilsText(SimpleTestCase):\n         # interning the result may be useful, e.g. when fed to Path.\n         self.assertEqual(sys.intern(text.slugify('a')), 'a')\n \n-    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_slugify_strip_dashes_and_underscores(self):\n+        items = (\n+            # Test cases based on the original issue description.\n+            (\"___This is a test ---\", \"this-is-a-test\", False),\n+            # Additional test cases to ensure functionality.\n+            (\"--leading-and-trailing--\", \"leading-and-trailing\", False),\n+            (\"__underscore__\", \"underscore\", False),\n+            (\"__mixed__and--combined---\", \"mixed-and-combined\", False),\n+            (\"--Multiple--Dashes---\", \"multiple-dashes\", False),\n+            (\"___Multiple___Underscores___\", \"multiple-underscores\", False),\n+            (\"__strip-mixed--chars__\", \"strip-mixed-chars\", False),\n+            # Unicode text with dashes and underscores\n+            (\"---Hello \u0130stanbu\u0142__\", \"hello-\u0130stanbu\u0142\", True),\n+            # Test with just dashes or underscores\n+            (\"---\", \"\", False),\n+            (\"___\", \"\", False),\n+        )\n+        for value, output, is_unicode in items:\n+            self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n     def test_unescape_entities(self):\n         items = [\n             ('', ''),\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..92e2e19 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -11,7 +11,31 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n-    def test_single_parent(self):\n+    def test_abstract_inherited_fields_equality(self):\n+        \"\"\"Test fields from different subclasses of the same abstract model are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        # Retrieve the fields from the inherited models\n+        inherit1_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Assert these fields are not considered equal\n+        self.assertNotEqual(inherit1_field, inherit2_field)\n+        # Assert their hashes are different\n+        self.assertNotEqual(hash(inherit1_field), hash(inherit2_field))\n+        \n+        # Check ordering operations\n+        self.assertLess(inherit1_field.creation_counter, inherit2_field.creation_counter)\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n \n@@ -347,4 +371,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..395ce25 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,4 +1,6 @@\n+\n from datetime import datetime, timedelta\n+from .models import CustomEmailField, IntegerUsernameUser  # Add any other missing imports here\n \n from django.conf import settings\n from django.contrib.auth.models import User\n@@ -37,6 +39,27 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..04c733c 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,39 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from django.core.management import execute_from_command_line\n+from django.core.management.base import BaseCommand\n+from django.core.management import call_command, CommandError\n+from django.core.management.color import color_style\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.core.management import execute_from_command_line\n+from django.core.management.base import BaseCommand\n+from django.core.management import call_command, CommandError\n+from django.core.management.color import color_style\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from django.core.management import execute_from_command_line\n+from django.core.management.base import BaseCommand\n+from django.core.management import call_command, CommandError\n+from django.core.management.color import color_style\n+from django.test.utils import captured_stderr, captured_stdout\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from unittest import mock\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.core.management import execute_from_command_line\n+from django.core.management.base import BaseCommand\n+from django.core.management import call_command, CommandError\n+from django.core.management.color import color_style\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n@@ -1866,8 +1887,40 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('verbosity', 1)]\" % option_b\n         )\n \n-\n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_from_argv_with_main(self):\n+        \"\"\"\n+        Program name should be corrected when __main__.py style is used.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_no_program_name_in_argv(self):\n+        \"\"\"\n+        If sys.argv[0] is None, use 'django' as a default prog_name.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(args)\n+        self.assertIn('usage: django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..2904ace 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -30,14 +31,82 @@ class ShellCommandTestCase(SimpleTestCase):\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n         select.return_value = ([], [], [])\n@@ -49,4 +118,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..9d18c75 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -596,6 +596,13 @@ class TestQuerying(TestCase):\n         )\n \n     def test_isnull_key_or_none(self):\n+        # Test case to verify that using __isnull=True on a KeyTransform \n+        # does not match JSON null on SQLite and Oracle \n+        # for the situation mentioned in the issue.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:]\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..609baf1 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,28 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.forms import ModelChoiceField\n+from .models import ChoiceModel\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Create choices for the model choice field tests below.\n+        ChoiceModel.objects.create(pk=1, name='alpha')\n+        ChoiceModel.objects.create(pk=2, name='bravo')\n+        ChoiceModel.objects.create(pk=3, name='charlie')\n+\n+        # Test to ensure that an invalid choice\u2019s value is included in the error message\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +327,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..78d43ff 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -81,6 +81,13 @@ class ToFieldChild(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n \n \n+# New models to test the non-numeric primary key issue\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n # Multiple paths to the same model (#7110, #7125)\n class Category(models.Model):\n     name = models.CharField(max_length=20)\n",
  "django__django-14016": "",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..a855557 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,7 +28,8 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n-from django.utils.functional import SimpleLazyObject\n+from django.db.models import Q, Exists, OuterRef\n+from django.test import TestCase\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n@@ -794,7 +795,30 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n-    def test_boolean_expression_combined(self):\n+    def test_issue_Q_and_Exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # We are adding tests where Exists and Q interchange positions \n+        test_conditions = [\n+            (Exists(is_ceo) & Q(), [self.example_inc.ceo]),\n+            (Q() & Exists(is_ceo), [self.example_inc.ceo]),\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_ceo) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Q() | Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Exists(is_poc) | Q(), [self.max]),\n+            (Q() | Exists(is_poc), [self.max]),\n+        ]\n+\n+        for condition, expected in test_conditions:\n+            with self.subTest(condition=condition):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(condition),\n+                    expected\n+                )\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..05441a7 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1137,7 +1137,25 @@ class ResolverMatchTests(SimpleTestCase):\n         request = HttpRequest()\n         self.assertIsNone(request.resolver_match)\n \n-    def test_repr(self):\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = (\n+                    f\"functools.partial({views.empty_view!r}, \"\n+                    f\"template_name='{template_name}')\"\n+                )\n+                self.assertEqual(\n+                    repr(resolve(f'/{name}/')),\n+                    f\"ResolverMatch(func={func}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\",\n+                )\n         self.assertEqual(\n             repr(resolve('/no_kwargs/42/37/')),\n             \"ResolverMatch(func=urlpatterns_reverse.views.empty_view, \"\n@@ -1146,6 +1164,12 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+from django.urls import resolve\n+from functools import partial\n+from . import views\n+from django.test import override_settings\n+from django.test import SimpleTestCase\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..d6be218 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.MyBigAutoField')\n+    def test_default_auto_field_setting_my_bigautofield(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.MySmallAutoField')\n+    def test_default_auto_field_setting_my_smallautofield(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +103,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.MyBigAutoField')\n+    def test_default_auto_field_setting_my_bigautofield(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.MySmallAutoField')\n+    def test_default_auto_field_setting_my_smallautofield(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..299fd80 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2168,6 +2168,25 @@ class StartApp(AdminScriptTestCase):\n                     \"sure the name is a valid identifier.\".format(bad_name)\n                 )\n                 self.assertFalse(os.path.exists(testproject_dir))\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Ensure that startapp handles directory names with trailing slashes.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app2', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_multiple_trailing_slashes_in_target_app_directory_name(self):\n+        \"\"\"\n+        Ensure that startapp handles directory names with multiple trailing slashes.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app3')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app3', '////')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n \n     def test_importable_name(self):\n         \"\"\"\n",
  "django__django-14411": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..dd9dfdb 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -654,6 +654,31 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.func, value.func)\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n+    \n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Test that the generated migration file includes necessary imports.\n+        \"\"\"\n+        from django.db import migrations, models\n+        from django.test.utils import override_settings\n+        from django.core.management import call_command\n+        import os\n+\n+        with override_settings(\n+            MIGRATION_MODULES={'app': 'app.migrations'}\n+        ):\n+            # Create the initial migration\n+            call_command('makemigrations', 'app')\n+\n+            # Read the migration file\n+            with open('app/migrations/0001_initial.py', 'r') as f:\n+                migration_content = f.read()\n+\n+            # Check that 'from django.db import models' is in the migration file\n+            self.assertIn('from django.db import models', migration_content)\n+\n+            # Clean up\n+            os.remove('app/migrations/0001_initial.py')\n \n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..1f91ac2 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -980,10 +980,33 @@ class FormsFormsetTestCase(SimpleTestCase):\n             'drinks-0-name': 'Gin and Tonic',\n             'drinks-1-name': 'Gin and Tonic',\n         }\n+        FavoriteDrinksFormSet = formset_factory(Drinks, extra=1, min_num=2)\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n+    def test_formset_multiple_validation_errors(self):\n+        \"\"\"\n+        Test multiple non-form validation errors to ensure they are all captured \n+        and rendered with the nonform CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '1',  # the number of forms rendered\n+            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'choices-MIN_NUM_FORMS': '0',  # min number of forms\n+            'choices-MAX_NUM_FORMS': '0',  # max number of forms\n+            'choices-0-choice': '',\n+            'choices-0-votes': '',\n+        }\n+        # Set formset with validation constraints\n+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=2, max_num=0, validate_min=True, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(formset.non_form_errors(), [\n+            'Please submit at least 2 forms.',\n+            'Please submit at most 0 forms.'\n+        ])\n+\n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..ad53547 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -294,7 +294,54 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n-@override_settings(ROOT_URLCONF='admin_views.urls')\n+import json\n+import datetime\n+from django.test import RequestFactory\n+from django.urls import reverse\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.http import JsonResponse\n+from .models import Question\n+from unittest.mock import patch\n+\n+\n+class AutocompleteJsonViewTestCase(AdminViewTest):\n+    url = reverse('admin:admin_views_question_autocomplete')\n+\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+\n+    def test_serialize_result_with_extra_field(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                result = super().serialize_result(obj, to_field_name)\n+                return {**result, 'posted': str(obj.posted)}\n+\n+        # Create some test data\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        # Make request and test response\n+        request = self.factory.get(self.url, {'term': 'question'})\n+        request.user = self.superuser\n+\n+        with patch.object(CustomAutocompleteJsonView, 'get_queryset', return_value=Question.objects.all()):\n+            response = CustomAutocompleteJsonView.as_view()(request)\n+\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        \n+        expected_results = [\n+            {'id': str(obj.pk), 'text': obj.question, 'posted': str(obj.posted)}\n+            for obj in Question.objects.all().order_by('-posted')\n+        ]\n+\n+        self.assertEqual(data, {\n+            'results': expected_results,\n+            'pagination': {'more': False},\n+        })\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n \n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..9f05cf6 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5093,7 +5093,45 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n \n-    def test_readonly_foreignkey_links(self):\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test readonly ForeignKey links in different admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+\n+        # Generate the expected URLs for the admin site\n+        expected_obj_url = reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        expected_user_url = reverse(f'{admin_site}:auth_user_change', args=(self.superuser.pk,))\n+\n+        # Fetch the page for the readonly object\n+        response = self.client.get(expected_obj_url)\n+        self.assertEqual(response.status_code, 200)\n+\n+        # Check if the ForeignKey readonly field link is correct\n+        readonly_field_html = response.content.decode('utf-8')\n+        self.assertIn(expected_user_url, readonly_field_html)\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links in the custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('site2')\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n         registered in admin.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..82359ce 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,7 +793,31 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n-    def test_rename_m2m_target_model(self):\n+    def test_rename_model_with_db_table_noop_variant(self):\n+        app_label = 'test_rmwdbtn_variant'\n+        # Set up initial model state with db_table explicitly defined\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Horse', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'horse'}),\n+            migrations.CreateModel('Jockey', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('horse', models.ForeignKey('%s.Horse' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        \n+        # Create a clone of the project state to apply the rename model operation\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Horse', 'Steed')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Ensure no SQL operations are executed (i.e., it's a no-op)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15061": "",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..b73b7a2 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,6 +70,8 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            # Test case for issue: URLField should raise a ValidationError for invalid IPv6 URL patterns.\n+            '////]@N.AN',\n         ]\n         for url, expected in tests:\n             with self.subTest(url=url):\n@@ -100,6 +102,8 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # Test case for issue: URLField should raise a ValidationError for invalid IPv6 URL patterns.\n+            '////]@N.AN',\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n@@ -107,7 +111,18 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n                 with self.assertRaisesMessage(ValidationError, msg):\n                     f.clean(value)\n \n-    def test_urlfield_clean_required(self):\n+    def test_urlfield_clean_valueerror(self):\n+        f = URLField()\n+        invalid_urls = [\n+            '////]@N.AN',\n+            # Test case for issue: URLField should raise a ValidationError for invalid IPv6 URL patterns.\n+            '////]@N.AN',\n+        ]\n+        msg = \"'Enter a valid URL.'\"\n+        for url in invalid_urls:\n+            with self.subTest(url=url):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(url)\n         f = URLField()\n         msg = \"'This field is required.'\"\n         with self.assertRaisesMessage(ValidationError, msg):\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..de3f3ef 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -356,6 +356,20 @@ class NonAggregateAnnotationTestCase(TestCase):\n         qs = Book.objects.annotate(new_price=F('price') + 1).filter(new_price=Decimal(31)).values_list('new_price')\n         self.assertEqual(qs.get(), (Decimal(31),))\n \n+    def test_original_issue_fixed(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        # Assuming the fix will be that ExpressionWrapper(~Q(pk__in=[])) should evaluate to True for all books\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_original_issue_fixed_with_aggregate(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n+\n     def test_combined_annotation_commutative(self):\n         book1 = Book.objects.annotate(adjusted_rating=F('rating') + 2).get(pk=self.b1.pk)\n         book2 = Book.objects.annotate(adjusted_rating=2 + F('rating')).get(pk=self.b1.pk)\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..b920acc 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -10,6 +11,7 @@ from django.contrib.messages.storage.cookie import (\n from django.test import SimpleTestCase, override_settings\n from django.utils.crypto import get_random_string\n from django.utils.safestring import SafeData, mark_safe\n+from django.utils.safestring import SafeData, mark_safe\n \n from .base import BaseTests\n \n@@ -104,6 +106,22 @@ class CookieTests(BaseTests, SimpleTestCase):\n         # The message actually contains what we expect.\n         self.assertEqual(list(storage), [])\n \n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that an empty string in extra_tags is correctly serialized and deserialized.\n+        \"\"\"\n+        storage = self.get_storage()\n+        \n+        # Create a message with empty extra_tags\n+        message = Message(constants.INFO, \"Test message\", extra_tags=\"\")\n+        \n+        # Encode and decode using the storage's methods\n+        encoded = storage._encode(message)\n+        decoded_message = storage._decode(encoded)\n+        \n+        # Verify that the extra_tags remain as an empty string\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n+\n     def test_max_cookie_length(self):\n         \"\"\"\n         If the data exceeds what is allowed in a cookie, older messages are\n",
  "django__django-15388": "",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..960ebb5 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,36 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test was_modified_since with an empty If-Modified-Since header, \n+        which should be handled without raising an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+    \n+    def test_was_modified_since_empty_header(self):\n+        \"\"\"\n+        Test was_modified_since with an empty header to verify correct behavior.\n+        \"\"\"\n+        mtime = 1609459200  # January 1, 2021\n+        self.assertTrue(was_modified_since(\"\", mtime))\n+\n+    def test_was_modified_since_with_date(self):\n+        \"\"\"\n+        Test was_modified_since with a valid date header that matches mtime.\n+        \"\"\"\n+        mtime = 1609459200  # January 1, 2021\n+        header = http_date(mtime)\n+        self.assertFalse(was_modified_since(header, mtime))\n+\n+    def test_was_modified_since_with_invalid_date(self):\n+        \"\"\"\n+        Test was_modified_since with an invalid date header.\n+        \"\"\"\n+        mtime = 1609459200  # January 1, 2021\n+        header = \"Invalid Date\"\n+        self.assertTrue(was_modified_since(header, mtime))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..53d15a9 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -411,6 +412,33 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+    def test_custom_formatter_help_output(self):\n+        class CustomCommand(BaseCommand):\n+            help = '''\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+            '''\n+\n+        cmd = CustomCommand()\n+        parser = cmd.create_parser(\"manage.py\", \"tzkt_import\")\n+        with StringIO() as out:\n+            parser.print_help(out)\n+            help_output = out.getvalue()\n+\n+        expected_output = \"\"\"\\\n+usage: manage.py tzkt_import [-h] [--version] [-v {0,1,2,3}] [--settings SETTINGS]\n+                             [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--force-color]\n+                             [--skip-checks]\n+                             blockchain target\n+\n+Import a contract from tzkt\n+Example usage:\n+    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+\"\"\"\n+\n+        self.assertEqual(help_output, expected_output)\n+\n     def test_outputwrapper_flush(self):\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..6e2f7bd 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,3 +1,4 @@\n+\n import os\n from datetime import datetime\n \n@@ -211,7 +212,31 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_with_encoder_and_id(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"output\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder, element_id=\"custom_id\"),\n+            '<script id=\"custom_id\" type=\"application/json\">{\"custom\": \"output\"}</script>',\n+        )\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n",
  "django__django-15790": "",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..0f2fd99 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -382,7 +382,24 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-        # Select related + filter on a related proxy of proxy field\n+from django.test import TestCase\n+from .models import CustomModel, ProxyCustomModel, AnotherModel\n+\n+class ProxyModelQueryTests(TestCase):\n+    def setUp(self):\n+        self.custom = CustomModel.objects.create(name=\"Custom1\")\n+        ProxyCustomModel.objects.create(name=\"ProxyCustom1\")\n+        self.another = AnotherModel.objects.create(custom=self.custom)\n+\n+    def test_select_related_only_proxy_model(self):\n+        \"\"\"\n+        Test select_related() with only() on proxy model fields.\n+        The issue reported a crash which this test ensures is fixed.\n+        \"\"\"\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = list(queryset)\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(result[0].custom.name, \"Custom1\")\n         resp = ProxyImprovement.objects.select_related().get(\n             associated_bug__summary__icontains=\"fix\"\n         )\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..9be8e33 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,6 +151,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_before_dbname(self):\n+        # Ensure parameters are passed before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n@@ -183,4 +190,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..8ff6fc8 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1900,8 +1900,13 @@ class AllValidTests(SimpleTestCase):\n \n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n+        import warnings\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.forms.formsets import formset_factory, BaseFormSet\n+        from django.test import override_settings\n+        from myapp.models import Choice  # Assuming Choice is defined in myapp.models\n \n+        # Existing test case checking deprecation warning for regular formsets\n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n         ), self.assertRaisesMessage(\n@@ -1909,4 +1914,15 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n+        \n+        # New test case ensuring no deprecation warning for management forms\n+        def test_no_management_form_warning(self):\n+            \"\"\"Ensure no default.html deprecation warning for ManagementForm rendering.\"\"\"\n+            with isolate_lru_cache(get_default_renderer), override_settings(\n+                FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+            ), self.assertNoLogs(warnings, level='WARN'):\n+                ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                formset = ChoiceFormSet()\n+                # Accessing the management_form should not trigger a warning\n+                _ = formset.management_form\n",
  "django__django-16041": "",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..12349d3 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,6 +161,10 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n     def test_decimal_subclass(self):\n         class EuroDecimal(Decimal):\n             \"\"\"\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..69de7e7 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,5 +1,8 @@\n+\n import datetime\n import re\n+import urllib.parse\n+from django.urls import reverse\n from unittest import mock\n \n from django.contrib.auth.forms import (\n@@ -892,7 +895,27 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.create_user(username=\"testuser\", password=\"password\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+        \n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        \n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+        \n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        \n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16255": "",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..1112d47 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -10,7 +11,8 @@ from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n-from .tests import AdminViewBasicTestCase\n+from .tests import AdminViewBasicTestCase, get_perm\n+from django.contrib.auth import get_permission_codename\n \n \n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n@@ -33,6 +35,40 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        # Give only change permission, not add.\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        # Give both add and change permissions.\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..4b2107e 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,20 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def test_alter_alter_field(self):\n+        \"\"\"\n+        Two AlterField operations should collapse into the last AlterField.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ]\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..c0ea487 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -55,6 +56,13 @@ class JoinTests(SimpleTestCase):\n         )\n         self.assertEqual(output, \"alpha & beta &amp; me\")\n \n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        output = self.engine.render_to_string(\n+            \"join_autoescape_off\", {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"var\": \"<br/>\"}\n+        )\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n+\n \n class FunctionTests(SimpleTestCase):\n     def test_list(self):\n@@ -78,4 +86,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..7e70af2 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -654,7 +654,45 @@ class BulkCreateTests(TestCase):\n     def test_update_conflicts_two_fields_no_unique_fields(self):\n         self._test_update_conflicts_two_fields([])\n \n-    def _test_update_conflicts_unique_two_fields(self, unique_fields):\n+    @skipUnlessDBFeature(\n+        \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n+    )\n+    def test_bulk_create_ids_returned_update_conflicts(self):\n+        # Create initial data\n+        initial_objects = [\n+            FieldsWithDbColumns(rank=1, name=\"initial_a\"),\n+            FieldsWithDbColumns(rank=3, name=\"initial_b\"),\n+        ]\n+        FieldsWithDbColumns.objects.bulk_create(initial_objects)\n+\n+        # Conflicting and new objects\n+        objects_to_create = [\n+            FieldsWithDbColumns(rank=1, name=\"conflict_a\"),  # Conflicts with rank 1\n+            FieldsWithDbColumns(rank=2, name=\"new_b\"),       # New entry\n+            FieldsWithDbColumns(rank=3, name=\"conflict_b\"),  # Conflicts with rank 3\n+        ]\n+\n+        # Bulk create with conflict update\n+        results = FieldsWithDbColumns.objects.bulk_create(\n+            objects_to_create,\n+            update_conflicts=True,\n+            unique_fields=[\"rank\"],\n+            update_fields=[\"name\"],\n+        )\n+\n+        # Ensure the IDs are returned and set in the instances\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n+        # Ensure data is correctly updated\n+        self.assertCountEqual(\n+            FieldsWithDbColumns.objects.values(\"rank\", \"name\"),\n+            [\n+                {\"rank\": 1, \"name\": \"conflict_a\"},  # Updated\n+                {\"rank\": 2, \"name\": \"new_b\"},       # New\n+                {\"rank\": 3, \"name\": \"conflict_b\"},  # Updated\n+            ],\n+        )\n         Country.objects.bulk_create(self.data)\n         self.assertEqual(Country.objects.count(), 4)\n \n@@ -816,4 +854,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..1307c6a 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1085,9 +1085,39 @@ def test_slider_reset():\n     slider.reset()\n     assert slider.val == 0.5\n \n+import numpy as np\n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib import widgets\n+\n+@pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\n+def test_range_slider_initialization(orientation):\n+    fig, ax = plt.subplots()\n+    \n+    # Test initialization with valid values\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Test Slider\", valmin=0.0, valmax=1.0, \n+        valinit=[0.2, 0.8], orientation=orientation\n+    )\n+    assert np.allclose(slider.val, [0.2, 0.8])\n+    \n+    # Test initialization with invalid values (value exceeds valmax)\n+    with pytest.raises(ValueError):\n+        widgets.RangeSlider(\n+            ax=ax, label=\"Test Slider\", valmin=0.0, valmax=1.0, \n+            valinit=[0.5, 1.5], orientation=orientation\n+        )\n+\n+    # Test initialization with invalid values (value less than valmin)\n+    with pytest.raises(ValueError):\n+        widgets.RangeSlider(\n+            ax=ax, label=\"Test Slider\", valmin=0.0, valmax=1.0, \n+            valinit=[-0.5, 0.5], orientation=orientation\n+        )\n \n @pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\n-def test_range_slider(orientation):\n+def test_range_slider_handle_movement(orientation):\n     if orientation == \"vertical\":\n         idx = [1, 0, 3, 2]\n     else:\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..b35f1a7 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -507,8 +507,31 @@ def test_rcparams_reset_after_fail():\n                 pass\n         assert mpl.rcParams['text.usetex'] is False\n \n-\n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+def test_get_backend_does_not_clear_figures():\n+    \"\"\"\n+    Test that calling get_backend() does not clear figures created\n+    within an rc_context if they are the first figures in Gcf.figs.\n+    \"\"\"\n+    # Ensure the Gcf is in a clean state\n+    plt.close('all')\n+\n+    with plt.rc_context():\n+        fig1 = plt.figure()\n+\n+    # Capture the state before calling get_backend()\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+    \n+    # Call get_backend\n+    get_backend()\n+\n+    # Capture the state after calling get_backend()\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    # Assert the state is unchanged, meaning the bug is fixed\n+    assert before == after, f'Figures were cleared. Before: {before}, After: {after}'\n+\n+    # Clean up\n+    plt.close('all')\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..ad09206 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,7 +21,18 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_set_visible(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_test.add_subplot(122, projection='3d')\n+    ax1.scatter(1, 1, 1, c='b')\n+    ax2.scatter(1, 1, 1, c='r')\n+    ax1.set_visible(False)\n+\n+    ax1_ref = fig_ref.add_subplot(121, projection='3d')\n+    ax2_ref = fig_ref.add_subplot(122, projection='3d')\n+    ax2_ref.scatter(1, 1, 1, c='r')\n+    # ax1_ref does not have any plots or scatter, simulating the hidden state.\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..d1d61c8 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,7 +774,32 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n-def test_get_set_draggable():\n+@pytest.mark.parametrize('initial, final', [(True, False), (False, True)])\n+def test_legend_update_draggable(initial, final):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='graph')\n+    leg = ax.legend(draggable=initial)\n+    assert leg.get_draggable() is initial\n+    leg.set_draggable(final)\n+    assert leg.get_draggable() is final\n+\n+@check_figures_equal()\n+def test_legend_draggable_non_interference(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+    \n+    # Create a plot\n+    x_data = range(10)\n+    ax_test.plot(x_data, label='test_line')\n+    ax_ref.plot(x_data, label='ref_line')\n+    \n+    # Set leg refs identically except for draggable\n+    ax_test.legend(draggable=True)\n+    ax_ref.legend(draggable=False)\n+\n+    # Check that draggable does not interfere with figure rendering.\n+    ax_ref.legend()\n+    assert fig_test == fig_ref\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..561e328 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -255,6 +255,38 @@ def test_linedash():\n \n     assert buf.tell() > 0\n \n+import io\n+from matplotlib.figure import Figure\n+\n+def test_empty_line_multiline_text():\n+    # This test checks that empty lines in multi-line text do not cause errors\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))  # Annotation with empty line\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')  # Test EPS format\n+    buf.seek(0)\n+    assert buf.tell() > 0  # Ensure something was written\n+\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='ps')  # Test PS format\n+    buf.seek(0)\n+    assert buf.tell() > 0  # Ensure something was written\n+\n+def test_empty_line_title():\n+    # This test checks that empty lines in title do not cause errors\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.set_title('\\nUpper Title\\n')  # Title with empty line\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')  # Test EPS format\n+    buf.seek(0)\n+    assert buf.tell() > 0  # Ensure something was written\n+\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='ps')  # Test PS format\n+    buf.seek(0)\n+    assert buf.tell() > 0  # Ensure something was written\n \n def test_no_duplicate_definition():\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..7768aca 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -653,6 +653,28 @@ def test_compressed1():\n     pos = axs[0, 0].get_position()\n     np.testing.assert_allclose(pos.x0, 0.06195, atol=1e-3)\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n+\n+@pytest.mark.parametrize('constrained', [True, False])\n+def test_user_warning_with_constrained_layout(constrained):\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+\n+    if not constrained:\n+        # When constrained_layout is False, no warning should be present.\n+        with pytest.warns(None) as record:\n+            plt.subplots_adjust(wspace=0)\n+        assert len(record) == 0\n+    else:\n+        # When constrained_layout is True, a warning might be present.\n+        with pytest.warns(UserWarning, match=\"This figure was using a layout engine that is incompatible with subplots_adjust\"):\n+            plt.subplots_adjust(wspace=0)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..210de90 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,26 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 4], label='Test Line')\n+    \n+    legend = ax.legend()\n+    legend.set_draggable(True)\n+    \n+    # Use pickle to serialize the figure\n+    pkl_data = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Ensure that there are no references to FigureCanvasAgg\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl_data)]\n+    \n+    # Deserialize to ensure pickling was successful\n+    loaded_fig = pickle.loads(pkl_data)\n+    assert loaded_fig is not None  # Check if loading was successful\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..c682dcb 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,32 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO  # Import needed for handling byte streams.\n \n @mpl.style.context(\"default\")\n+def test_pickle_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+    \n+    # Test if the figure can be pickled after calling align_labels\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    loaded = pickle.loads(pkl.getbuffer())  # Load from the pickled state\n+    assert loaded  # Basic check to ensure loading was successful\n+\n+    plt.close(loaded)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..9ce88fa 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,6 +9,7 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n \n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..0063f00 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -95,8 +95,19 @@ class TestContinuous:\n         cmap = color_palette(\"ch:\", as_cmap=True)\n         s = Continuous()._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n-\n-    def test_color_named_values(self, x):\n+    import pytest\n+    import pandas as pd\n+    import numpy as np\n+    from seaborn._core.scales import Continuous\n+    from seaborn._core.properties import IntervalProperty\n+    from seaborn.color_palette import color_palette\n+    from numpy.testing import assert_array_equal\n+    \n+    def test_interval_with_bools_and_color(self):\n+        # Test to verify that boolean data is handled correctly in the color mapping\n+        x = pd.Series([True, False, True])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 1])\n \n         cmap = color_palette(\"viridis\", as_cmap=True)\n         s = Continuous(\"viridis\")._setup(x, Color())\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..7195e22 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,3 +1,4 @@\n+\n import json\n import os\n import textwrap\n@@ -5,6 +6,7 @@ import textwrap\n import pytest\n \n import flask\n+import tomllib\n \n \n # config keys used for the TestConfig\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..139eecb 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,15 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import unittest\n+import pytest\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import RequestException, ConnectionError, Timeout\n+from requests.packages.urllib3.exceptions import DecodeError, ReadTimeoutError\n+\n+httpbin = lambda path: f'https://httpbin.org/{path}'\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1654,8 +1663,37 @@ def test_urllib3_retries():\n \n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n+def test_decode_error_wrapped():\n+    s = requests.Session()\n+    adapter = HTTPAdapter()\n+\n+    # Mock the sending process to raise a DecodeError\n+    def mock_send(*args, **kwargs):\n+        raise DecodeError(\"Fake decode error\")\n+\n+    adapter.send = mock_send\n+    s.mount('http://', adapter)\n+\n+    with pytest.raises(RequestException) as excinfo:\n+        s.get(httpbin('anything'))\n+\n+    assert \"Fake decode error\" in str(excinfo.value)\n+\n+def test_timeout_error_wrapped():\n+    s = requests.Session()\n+    adapter = HTTPAdapter()\n+\n+    # Mock the sending process to raise a ReadTimeoutError, which is analogous to urllib3's TimeoutError\n+    def mock_send(*args, **kwargs):\n+        raise ReadTimeoutError(None, None, \"Fake timeout error\")\n+\n+    adapter.send = mock_send\n+    s.mount('http://', adapter)\n+\n+    with pytest.raises(Timeout) as excinfo:\n+        s.get(httpbin('anything'))\n \n-def test_vendor_aliases():\n+    assert \"Fake timeout error\" in str(excinfo.value)\n     from requests.packages import urllib3\n     from requests.packages import chardet\n \n@@ -1663,4 +1701,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..dc39acc 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -88,8 +88,15 @@ class TestFixme(CheckerTestCase):\n             MessageTest(msg_id=\"fixme\", line=2, args=\"CODETAG\", col_offset=17)\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n-\n-    def test_issue_2321_should_not_trigger(self) -> None:\n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n@@ -119,4 +126,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..7177b71 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,47 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_recursive(self) -> None:\n+        \"\"\"Tests that ignore-paths are respected when using --recursive=y\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\", \n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_ignore_paths_recursive_with_pyproject_toml(self) -> None:\n+        \"\"\"Tests that ignore-paths from pyproject.toml are respected when using --recursive=y\"\"\"\n+        with _create_temp_pyproject_toml('''\n+            [tool.pylint.MASTER]\n+            ignore-paths = [ \"^subdirectory/.*\" ]\n+        '''):\n+            with _test_sys_path():\n+                sys.path = [\n+                    path\n+                    for path in sys.path\n+                    if not os.path.basename(path) == \"regrtest_data\"\n+                ]\n+                with _test_cwd():\n+                    os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                    self._runtest(\n+                        [\n+                            \".\", \n+                            \"--recursive=y\"\n+                        ],\n+                        code=0,\n+                    )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..0b40bce 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,25 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_lint_module_with_identically_named_submodule(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test if pylint succeeds even if a module contains an identically named submodule.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg.get('parse-error')\n+\n+def test_lint_import_error_with_identically_named_submodule(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test if pylint correctly identifies import errors with identically named submodule.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as r_file:\n+            r_file.write(\"from a import b\\n\")\n+        linter.check([\"r\", \"a\"])\n+    assert not linter.stats.by_msg.get('no-name-in-module')\n+    assert not linter.stats.by_msg.get('parse-error')\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +960,23 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_lint_module_with_identically_named_submodule(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test if pylint succeeds even if a module contains an identically named submodule.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg.get('parse-error')\n+\n+def test_lint_import_error_with_identically_named_submodule(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test if pylint correctly identifies import errors with identically named submodule.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as r_file:\n+            r_file.write(\"from a import b\\n\")\n+        linter.check([\"r\", \"a\"])\n+    assert not linter.stats.by_msg.get('no-name-in-module')\n+    assert not linter.stats.by_msg.get('parse-error')\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..70df714 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,7 +114,22 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n-def test_deprecation_set_output(recwarn):\n+def test_template_with_custom_braces(linter: PyLinter):\n+    # Verifying if custom braces in the message template work correctly.\n+    output = StringIO()\n+    linter.reporter.out = output\n+    # Set a custom message template with double braces\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\", \"Line\": \"{line}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+    \n+    # Add messages to be processed by PyLinter\n+    linter.add_message(\"C0301\", line=1)\n+    linter.add_message(\"W0123\", line=2)\n+    \n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\", \"Line\": \"1\" }'\n+    assert out_lines[2] == '{ \"Category\": \"warning\", \"Line\": \"2\" }'\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..c8d1ece 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -298,6 +298,35 @@ class TestImportPath:\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n+    def test_importlib_reimport_avoidance(self, tmp_path: Path) -> None:\n+        \"\"\"Test that importlib mode avoids re-importing modules.\"\"\"\n+        # Initial setup of module files and paths\n+        src_dir = tmp_path / \"sample_pkg\"\n+        src_dir.mkdir(parents=True)\n+        module_file = src_dir / \"submodule.py\"\n+        init_file = src_dir / \"__init__.py\"\n+        init_file.touch()\n+        module_file.write_text(\"VAR = 'initial'\", encoding=\"utf-8\")\n+\n+        # First import\n+        module = import_path(module_file, mode=\"importlib\", root=tmp_path)\n+        assert module.VAR == 'initial'\n+\n+        # Modify file to simulate a re-import need\n+        module_file.write_text(\"VAR = 'modified'\", encoding=\"utf-8\")\n+\n+        # Second import with `importlib` should not reflect changes immediately\n+        module_again = import_path(module_file, mode=\"importlib\", root=tmp_path)\n+        assert module_again.VAR == 'initial', \"Module re-imported unexpectedly\"\n+        \"\"\"`importlib` mode does not change sys.path.\"\"\"\n+        module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module.foo(2) == 42  # type: ignore[attr-defined]\n+        assert str(simple_module.parent) not in sys.path\n+        assert module.__name__ in sys.modules\n+        assert module.__name__ == \"_src.tests.mymod\"\n+        assert \"_src\" in sys.modules\n+        assert \"_src.tests\" in sys.modules\n+\n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n     ) -> None:\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..7800dec 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -6,7 +7,37 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+    # Test case for the updated logging format\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"django.db.backends\",\n+        level=logging.DEBUG,\n+        pathname=\"utils.py\",\n+        lineno=114,\n+        msg=\"(0.000) SELECT \\\"app_url\\\".\\\"id\\\", \\\"app_url\\\".\\\"created\\\", \\\"app_url\\\".\\\"url\\\" FROM \\\"app_url\\\" WHERE \\\"app_url\\\".\\\"id\\\" = 2; args=(2,)\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == (\n+        \"\\x1b[32mDEBUG   \\x1b[0m django.db.backends:utils.py:114 (0.000) SELECT \\\"app_url\\\".\\\"id\\\", \\\"app_url\\\".\\\"created\\\", \\\"app_url\\\".\\\"url\\\" FROM \\\"app_url\\\" WHERE \\\"app_url\\\".\\\"id\\\" = 2; args=(2,)\"\n+    )\n+\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == (\n+        \"DEBUG    django.db.backends:utils.py:114 (0.000) SELECT \\\"app_url\\\".\\\"id\\\", \\\"app_url\\\".\\\"created\\\", \\\"app_url\\\".\\\"url\\\" FROM \\\"app_url\\\" WHERE \\\"app_url\\\".\\\"id\\\" = 2; args=(2,)\"\n+    )\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..3e6ac5e 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -300,7 +300,32 @@ def callequal(left, right, verbose=False):\n     return plugin.pytest_assertrepr_compare(config, \"==\", left, right)\n \n \n+import pytest\n+\n class TestAssert_reprcompare:\n+    def test_bytes_diff(self):\n+        \"\"\"Test for special handling of bytes diff in assertions by comparing empty with non-empty byte strings\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+            \"?   ++\",\n+        ]\n+\n+    def test_bytes_diff_with_single_character(self):\n+        \"\"\"Test for special handling of bytes diff in assertions with a single character byte string\"\"\"\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+            \"?   +\",\n+        ]\n     def test_different_types(self):\n         assert callequal([0, 1], \"foo\") is None\n \n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..42371b7 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,4 +1,7 @@\n+\n import os\n+from datetime import datetime\n+import platform\n from xml.dom import minidom\n \n import py\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..d6d2a83 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,29 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute_repr():\n+    \"\"\"Test to ensure that saferepr can handle exceptions raised in __repr__ and __getattribute__.\"\"\"\n+    \n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Failure in __getattribute__\")\n+        \n+        def __repr__(self):\n+            raise RuntimeError(\"Failure in __repr__\")\n+    \n+    result = saferepr(SomeClass())\n+    assert result.startswith(\"<[RuntimeError('Failure in __repr__') raised in repr()] SomeClass object at 0x\")\n+    \n+def test_broken_only_repr():\n+    \"\"\"Test to ensure that saferepr can handle exceptions raised only in __repr__.\"\"\"\n+    \n+    class SomeClass:\n+        def __repr__(self):\n+            raise ValueError(\"Failure in __repr__\")\n+    \n+    result = saferepr(SomeClass())\n+    assert result.startswith(\"<[ValueError('Failure in __repr__') raised in repr()] SomeClass object at 0x\")\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +176,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..62d97f2 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -70,8 +70,31 @@ def test_make_hook_recorder(testdir) -> None:\n     recorder.hook.pytest_runtest_logreport(report=rep3)\n     pytest.raises(ValueError, recorder.getfailures)\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct.\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_parseconfig(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     config1 = testdir.parseconfig()\n     config2 = testdir.parseconfig()\n     assert config2 is not config1\n",
  "pytest-dev__pytest-7373": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..c723e29 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -152,8 +152,25 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n-\n-class TestXFail:\n+class TestSkipLocation:\n+    @pytest.mark.parametrize(\n+        \"test_input, expected_lines\",\n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_location_reporting(self, testdir, test_input, expected_lines):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+                import pytest\n+                @pytest.mark.skip\n+                def test_sample():\n+                    assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected_lines)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..3ff76b9 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,6 +1,8 @@\n+\n import sys\n \n import pytest\n+from _pytest.pytester import Testdir\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..4a3b33b 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -20,7 +21,8 @@ from _pytest.pathlib import register_cleanup_lock_removal\n from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n from _pytest.tmpdir import get_user\n-from _pytest.tmpdir import TempdirFactory\n+from _pytest.monkeypatch import MonkeyPatch\n+from _pytest.tmpdir import TempdirFactory, TempPathFactory\n from _pytest.tmpdir import TempPathFactory\n \n \n",
  "scikit-learn__scikit-learn-10297": "",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..afcf9b7 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -16,6 +16,8 @@ from sklearn.mixture import BayesianGaussianMixture\n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n from sklearn.exceptions import ConvergenceWarning\n from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n+from sklearn.utils.testing import assert_array_equal\n+from sklearn.exceptions import NotFittedError\n \n \n COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..0694006 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -272,8 +272,40 @@ def test_one_hot_encoder_no_categorical_features():\n     assert_array_equal(enc.get_feature_names(), expected_features)\n     assert enc.categories_ == []\n \n-\n-@pytest.mark.parametrize(\"output_dtype\", [np.int32, np.float32, np.float64])\n+import pytest\n+import numpy as np\n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_edge_case():\n+    train_data = np.array(['aaa', 'bb', 'c', 'dddddddd']).reshape((-1, 1))\n+    test_data = np.array(['ee', 'aaa', 'unknown']).reshape((-1, 1))\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(train_data)\n+    result = ohe.transform(test_data).toarray()\n+    # The known 'aaa' should match, 'ee' and 'unknown' are ignored, so should be all zeros\n+    expected = np.array([\n+        [0, 0, 0, 0],\n+        [1, 0, 0, 0],\n+        [0, 0, 0, 0]\n+    ])\n+    assert_array_equal(result, expected)\n @pytest.mark.parametrize(\"input_dtype\", [np.int32, np.float32, np.float64])\n def test_one_hot_encoder_dtype(input_dtype, output_dtype):\n     X = np.asarray([[0, 1]], dtype=input_dtype).T\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..89d80f3 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,28 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+import numpy as np\n+from sklearn.mixture import GaussianMixture\n+from numpy.testing import assert_array_equal\n+\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_consistency():\n+    # Additional test to verify consistency across different samples\n+    rng = np.random.RandomState(42)\n+    data_samples = [rng.randn(1000, 5) for _ in range(5)]  # create multiple samples\n+\n+    for X in data_samples:\n+        gm = GaussianMixture(n_components=5, n_init=10, random_state=0)\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..2b27b3c 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,4 +1,27 @@\n+\n+def test_kernel_pca_sign_indeterminacy():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+\n+    # Use different random seeds to ensure randomness does not affect signs\n+    random_states = [0, 1, 2, 3, 4]\n+    transformed_signs = []\n+\n+    for state in random_states:\n+        kpca = KernelPCA(n_components=7, kernel='rbf', random_state=state)\n+        transformed = kpca.fit_transform(X)\n+        # Normalize each component by its sign to simplify comparison\n+        signs = np.sign(transformed[0])\n+        transformed_signs.append(signs)\n+\n+    # Compare signs of the first component from each transformation to those from the first reference\n+    for i in range(1, len(transformed_signs)):\n+        # We check if the absolute values are equal or opposite\n+        assert_allclose(np.abs(transformed_signs[0]), np.abs(transformed_signs[i]),\n+                        err_msg=\"The sign of KernelPCA components should be equivalent in absolute terms across different random states\")\n+\n import numpy as np\n+from sklearn.utils.testing import assert_allclose\n import scipy.sparse as sp\n import pytest\n \n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..13ae2b0 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n@@ -297,6 +300,27 @@ def test_score_samples():\n \n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start_init():\n+    \"\"\"Test warm_start during initialization of IsolationForest.\"\"\"\n+\n+    rng = check_random_state(42)\n+    X = rng.randn(50, 2)\n+\n+    # Initialize with warm_start=True and n_estimators=15\n+    clf = IsolationForest(n_estimators=15, warm_start=True, random_state=rng)\n+    clf.fit(X)\n+    n_estimators_first_fit = len(clf.estimators_)\n+    assert n_estimators_first_fit == 15\n+\n+    # Increment n_estimators and fit more trees\n+    clf.set_params(n_estimators=25)\n+    clf.fit(X)\n+    n_estimators_second_fit = len(clf.estimators_)\n+    assert n_estimators_second_fit == 25\n+\n+    # Ensure that the additional trees were added and none got overwritten\n+    assert n_estimators_second_fit > n_estimators_first_fit\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n     X = [[0.0], [1.0]]\n     clf = IsolationForest()\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..1861a78 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -195,6 +195,27 @@ def test_mutual_info_options():\n                            random_state=0)\n \n         assert_array_equal(mi_1, mi_2)\n+\n+        # Test with boolean mask that matches the number of features\n+        discrete_mask = [True, False, True]\n+        mi_5 = mutual_info(X, y, discrete_features=discrete_mask, random_state=0)\n+\n+        # Test with integer array specifying feature indices\n+        discrete_indices = [0, 2]\n+        mi_6 = mutual_info(X, y, discrete_features=discrete_indices, random_state=0)\n+\n+        # Ensure the results are the same for equivalent specifications\n+        assert_array_equal(mi_5, mi_6)\n+\n+        # Test with incompatible boolean mask length\n+        assert_raises(ValueError, mutual_info, X, y, discrete_features=[True, False])\n+\n+        # Test with incompatible integer indices\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[0, 4])\n+\n+        # Also ensuring that 'auto' still produces valid results\n+        mi_auto = mutual_info(X, y, discrete_features='auto', random_state=0)\n+        assert_array_equal(mi_auto, mi_1)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..5904137 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -215,7 +216,13 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n     set_config(print_changed_only=False)\n \n \n-def test_pipeline():\n+def test_logistic_regression_cv_array_param():\n+    \"\"\"Test LogisticRegressionCV with np.array in parameters when print_changed_only=True\"\"\"\n+    set_config(print_changed_only=True)\n+    lr_cv = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    repr_output = repr(lr_cv)\n+    assert \"Cs=array([0.1, 1])\" in repr_output\n+    set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..753ff36 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -497,8 +498,36 @@ def test_transform():\n         ('lr', clf1), ('rf', clf2), ('gnb', clf3)],\n         voting='soft',\n         flatten_transform=False).fit(X, y)\n-\n-    assert_array_equal(eclf1.transform(X).shape, (4, 6))\n+    \n+    @pytest.mark.parametrize(\n+        \"dataset_loader, voter_class, model_set_params\",\n+        [\n+            (\n+                datasets.load_iris,\n+                VotingClassifier,\n+                lambda voter: voter.set_params(lr=None),\n+            ),\n+            (\n+                datasets.make_regression,\n+                VotingRegressor,\n+                lambda voter: voter.set_params(lr=None),\n+            ),\n+        ],\n+    )\n+    def test_none_estimator_with_sample_weights(dataset_loader, voter_class, model_set_params):\n+        X, y = dataset_loader(return_X_y=True)\n+        voter = voter_class(\n+            estimators=[\n+                ('lr', LogisticRegression()),\n+                ('rf', RandomForestClassifier(n_estimators=5))\n+            ]\n+        )\n+        sample_weight = np.ones(y.shape[0])\n+        voter.fit(X, y, sample_weight=sample_weight)\n+        model_set_params(voter)\n+        voter.fit(X, y, sample_weight=sample_weight)\n+        y_pred = voter.predict(X)\n+        assert y_pred.shape[0] == y.shape[0]\n     assert_array_equal(eclf2.transform(X).shape, (4, 6))\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..f49d26c 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,36 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+import pytest\n+import numpy as np\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+from sklearn.utils._testing import assert_raises, assert_raise_message\n \n-def test_transformation_dimensions():\n+def test_valid_numpy_types():\n+    # Test that valid numpy types do not raise errors\n+    X = np.arange(12).reshape(4, 3)\n+    y = [1, 1, 2, 2]\n+    params = [\n+        ('n_components', np.int32(2)),\n+        ('max_iter', np.int32(100)),\n+        ('tol', np.float32(0.0001))\n+    ]\n+\n+    for param, value in params:\n+        nca = NeighborhoodComponentsAnalysis(**{param: value})\n+        nca.fit(X, y)\n+\n+def test_invalid_numpy_int_type_tol():\n+    # Test that numpy int type for `tol` raises TypeError\n+    X = np.arange(12).reshape(4, 3)\n+    y = [1, 1, 2, 2]\n+    assert_raises(TypeError, NeighborhoodComponentsAnalysis(tol=np.int64(1)).fit, X, y)\n+\n+def test_invalid_numpy_int_type_n_components():\n+    # Test that numpy int type for `n_components` raises TypeError\n+    X = np.arange(12).reshape(4, 3)\n+    y = [1, 1, 2, 2]\n+    assert_raises(TypeError, NeighborhoodComponentsAnalysis(n_components=np.int64(2)).fit, X, y)\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..076ee91 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,30 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the issue regarding ZeroDivisionError in _sparse_fit\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([\n+        [0, 1, 0, 0],\n+        [0, 0, 0, 1],\n+        [0, 0, 1, 0],\n+        [0, 0, 0, 1]\n+    ])\n+    \n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+\n+    model = svm.SVR(C=316.227766017, kernel='linear', max_iter=15000)\n+    model.fit(X_train, y_train)\n+    \n+    # Assert that the support vectors are empty\n+    assert model.support_ is not None\n+    assert model.support_vectors_.shape[0] == 0\n+    assert model.dual_coef_ is not None\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..9093bbf 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,6 +972,9 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n @ignore_warnings\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n@@ -980,7 +983,26 @@ def test_repeated_cv_value_errors():\n         assert_raises(ValueError, cv, n_repeats=1.5)\n \n \n-def test_repeated_kfold_determinstic_split():\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    expected_repr = (\n+        \"{}(n_repeats={}, n_splits={}, random_state=None)\"\n+        .format(repeated_cv.__class__.__name__, n_repeats, n_splits)\n+    )\n+    assert expected_repr == repr(repeated_cv)\n+\n+    # Test with explicit random_state\n+    random_state = 42\n+    repeated_cv_with_random_state = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    expected_repr_with_random_state = (\n+        \"{}(n_repeats={}, n_splits={}, random_state={})\"\n+        .format(repeated_cv_with_random_state.__class__.__name__, n_repeats, n_splits, random_state)\n+    )\n+    assert expected_repr_with_random_state == repr(repeated_cv_with_random_state)\n     X = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n     random_state = 258173307\n     rkf = RepeatedKFold(\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..86e05f9 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -668,7 +669,26 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_cv_with_pandas():\n+    \"\"\"Test CalibratedClassifierCV with transform_output='pandas' setting.\"\"\"\n+    from sklearn import set_config\n+    from sklearn.calibration import CalibratedClassifierCV\n+    from sklearn.linear_model import SGDClassifier\n+\n+    # Set the configuration to output pandas DataFrames\n+    set_config(transform_output=\"pandas\")\n+\n+    # Create a simple dataset\n+    X = np.arange(90).reshape(30, 3)\n+    y = np.arange(30) % 2\n+\n+    # Initialize and fit the CalibratedClassifierCV\n+    model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\n+    model.fit(X, y)\n+\n+    # Ensure that predict does not raise an exception\n+    predictions = model.predict(X)\n+    assert predictions is not None\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..61501c6 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2128,4 +2128,49 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+\n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+\n+    Non-regression test for gh-25487\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\"])\n+\n+\n+def test_pipeline_with_empty_categorical_features():\n+    \"\"\"Test that pipeline works with empty categorical features.\"\"\"\n+    X = pd.DataFrame(data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]], columns=[\"a\", \"b\", \"c\", \"d\"])\n+    y = np.array([0, 1])\n+    categorical_features = []\n+    numerical_features = [\"a\", \"b\", \"c\"]\n+    model_preprocessing = (\"preprocessing\",\n+                           ColumnTransformer([\n+                               ('categorical', 'passthrough', categorical_features),\n+                               ('numerical', Pipeline([(\"scaler\", RobustScaler()),\n+                                                       (\"imputer\", SimpleImputer(strategy=\"median\"))\n+                                                       ]), numerical_features),\n+                           ], remainder='drop'))\n+    pipeline = Pipeline([model_preprocessing, (\"classifier\", RandomForestClassifier())]).set_output(transform=\"pandas\")\n+    pipeline.fit(X, y)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..e319eec 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -113,6 +113,24 @@ def test_automodule_special_members(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_exclusion(app):\n+    options = {'members': None, 'undoc-members': None, 'inherited-members': 'Base'}\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert 'Base.inheritedclassmeth' in str(actual)\n+    assert 'Base.inheritedstaticmeth' in str(actual)\n+    assert 'Base.inheritedmeth' in str(actual)\n+    assert 'list.append' not in str(actual)  # Assuming list methods should be excluded\n+    assert 'set.update' not in str(actual)   # Assuming set methods should be excluded\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_inclusion(app):\n+    options = {'members': None, 'undoc-members': None, 'inherited-members': 'Derived, list'}\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert 'Derived.inheritedmeth' in str(actual)\n+    assert 'list.append' in str(actual)      # Methods inherited from list should be included\n+    assert 'set.update' not in str(actual)   # Assuming set methods should be excluded\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n                                                             'missing_package1',\n@@ -125,4 +143,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 21b6a7e..fffb1f6 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -714,6 +714,21 @@ def test_autodoc_type_aliases(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases_with_variables_and_attributes(app):\n+    # Configure type aliases to map `String` to `example.MyString`\n+    app.config.autodoc_type_aliases = {'String': 'example.MyString'}\n+\n+    # Test for module-level variable aliasing\n+    options = {\"members\": None, \"undoc-members\": True}\n+    actual = do_autodoc(app, 'module', 'example', options)\n+    assert '.. py:data:: var' in actual\n+    assert '   :type: example.MyString' in actual\n+\n+    # Test for class attribute aliasing\n+    assert '.. py:attribute:: MyString.var' in actual\n+    assert '   :type: example.MyString' in actual\n+\n     # define aliases\n     app.config.autodoc_type_aliases = {'myint': 'myint'}\n     actual = do_autodoc(app, 'module', 'target.annotations', options)\n@@ -736,6 +751,21 @@ def test_autodoc_type_aliases(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases_with_variables_and_attributes(app):\n+    # Configure type aliases to map `String` to `example.MyString`\n+    app.config.autodoc_type_aliases = {'String': 'example.MyString'}\n+\n+    # Test for module-level variable aliasing\n+    options = {\"members\": None, \"undoc-members\": True}\n+    actual = do_autodoc(app, 'module', 'example', options)\n+    assert '.. py:data:: var' in actual\n+    assert '   :type: example.MyString' in actual\n+\n+    # Test for class attribute aliasing\n+    assert '.. py:attribute:: MyString.var' in actual\n+    assert '   :type: example.MyString' in actual\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_autodoc_default_options(app):\n",
  "sphinx-doc__sphinx-8506": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..a604292 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,21 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from sphinx.ext.autodoc import ModuleDocumenter\n+import pytest\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_autodoc(app):\n+    # This test case checks if the empty __all__ attribute leads to no members being documented\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..9e32448 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -10,6 +11,7 @@\n \n import sys\n from numbers import Integral\n+from struct import Struct\n from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar,\n                     Union)\n \n@@ -39,6 +41,7 @@ class BrokenType:\n \n \n def test_restify():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(int) == \":class:`int`\"\n     assert restify(str) == \":class:`str`\"\n     assert restify(None) == \":obj:`None`\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..e747332 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,40 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_section(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other Parameters\n+----------------\n+y : float\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:Other Parameters: **y** (*float*)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:param y:\n+:type y: float\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..fa1793f 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -60,8 +60,29 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/c/' in stuff\n     assert 'http://foobar/cpp/' in stuff\n \n+import pytest\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_default(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Check that module pages are not created for epub by default.\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Check that module pages are created when viewcode_enable_epub is True.\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+    # This test explicitly specifies the viewcode_enable_epub=False\n+    # and verifies that module pages are not created.\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..3774322 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,8 +354,22 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+def test_non_disjoint_cycles():\n+    # This should construct the identity permutation as both cycles cancel each other out.\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n \n-def test_Cycle():\n+    # This should apply the two cycles [[0, 1], [0, 2]] and result in [1, 2, 0]\n+    assert Permutation([[0, 1], [0, 2]])._array_form == [1, 2, 0]\n+\n+    # With three cycles, ensure they apply correctly: \n+    # First cycle swaps 0 and 1, then 1 and 2, should result in [2, 0, 1]\n+    assert Permutation([[0, 1], [1, 2], [0, 2]])._array_form == [2, 0, 1]\n+\n+    # Another mix of non-disjoint cycles which should result in a permutation [2, 1, 0]\n+    assert Permutation([[0, 1, 2], [0, 1]])._array_form == [2, 1, 0]\n+\n+    # A case where duplicate cycles are given, should still result in identity\n+    assert Permutation([[0, 1], [1, 0], [0, 1]]) == Permutation([0, 1])\n     assert str(Cycle()) == '()'\n     assert Cycle(Cycle(1,2)) == Cycle(1, 2)\n     assert Cycle(1,2).copy() == Cycle(1,2)\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..e5add8e 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -312,6 +313,21 @@ def test_sparse_matrix():\n                       [7, 2, 6]])\n     Ainv = SparseMatrix(Matrix(A).inv())\n     assert A*Ainv == sparse_eye(3)\n+\n+    # Tests for hstack and vstack with zero dimensions\n+    sparse_matrices_zero_row = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_zero_row).shape == (0, 6)\n+\n+    sparse_matrices_zero_col = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_zero_col).shape == (6, 0)\n+\n+    sparse_matrices_mixed = [\n+        SparseMatrix.zeros(0, 0),\n+        SparseMatrix.zeros(0, 1),\n+        SparseMatrix.zeros(0, 2),\n+        SparseMatrix.zeros(0, 3)\n+    ]\n+    assert SparseMatrix.hstack(*sparse_matrices_mixed).shape == (0, 6)\n     assert A.inv(method=\"CH\") == Ainv\n     assert A.inv(method=\"LDL\") == Ainv\n \n@@ -320,6 +336,21 @@ def test_sparse_matrix():\n                       [5, 2, 6]])\n     Ainv = SparseMatrix(Matrix(A).inv())\n     assert A*Ainv == sparse_eye(3)\n+\n+    # Tests for hstack and vstack with zero dimensions\n+    sparse_matrices_zero_row = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_zero_row).shape == (0, 6)\n+\n+    sparse_matrices_zero_col = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_zero_col).shape == (6, 0)\n+\n+    sparse_matrices_mixed = [\n+        SparseMatrix.zeros(0, 0),\n+        SparseMatrix.zeros(0, 1),\n+        SparseMatrix.zeros(0, 2),\n+        SparseMatrix.zeros(0, 3)\n+    ]\n+    assert SparseMatrix.hstack(*sparse_matrices_mixed).shape == (0, 6)\n     assert A.inv(method=\"CH\") == Ainv\n     assert A.inv(method=\"LDL\") == Ainv\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..459b45f 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -100,7 +100,18 @@ def test_core_symbol():\n         check(c)\n \n \n-def test_core_numbers():\n+from sympy import symbols\n+from sympy.core.add import Add\n+from sympy.core.numbers import Float\n+import sys\n+import pickle\n+\n+def test_pickle_python2_to_python3_float_expression():\n+    x = symbols(\"x\")\n+    expr = x + 1.0\n+    serialized_expr = pickle.dumps(expr, protocol=2)\n+    deserialized_expr = pickle.loads(serialized_expr)\n+    assert expr == deserialized_expr\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n \n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..ef647e2 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -279,7 +279,26 @@ def test_coth_series():\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n \n-def test_csch():\n+def test_issue_coth_log_tan_subs():\n+    from sympy import coth, log, tan, Symbol, I, pi\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Testing the problematic integral values\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n+    \n+    # Original test cases for consistency\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..ff28dd3 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,25 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643():\n+    # This test corresponds to issue 13643 where the col_insert\n+    # method did not behave as expected.\n+    import sympy as sm\n+\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..c6b0dbc 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -614,10 +614,24 @@ def test_latex_Range():\n     assert latex(Range(oo, -2, -2)) == r'\\left\\{\\infty, \\ldots, 2, 0\\right\\}'\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n-\n+from sympy import symbols, oo, SeqFormula, SeqPer, SeqAdd, SeqMul\n \n def test_latex_sequences():\n-    s1 = SeqFormula(a**2, (0, oo))\n+    a, n = symbols('a n')\n+    s1 = SeqFormula(n**2, (n, 0, oo))  # modifying to fit the issue context\n+\n+    # Verify that the output does not have backslash-escaped brackets\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s1) == latex_str\n+\n+    # Additional test cases\n+    s2 = SeqFormula(n, (n, 0, 3)) # Testing a finite sequence with non-square brackets\n+    latex_str_2 = r'[0, 1, 2, 3]'\n+    assert latex(s2) == latex_str_2\n+\n+    s3 = SeqFormula(n**2, (n, -3, 0))  # Testing negative indices\n+    latex_str_3 = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(s3) == latex_str_3\n     s2 = SeqPer((1, 2))\n \n     latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..d135656 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -188,6 +189,18 @@ def test_Domain_preprocess():\n \n     raises(OptionError, lambda: Domain.preprocess('Z()'))\n \n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+    # Add the following line to specifically test the case causing the issue\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]\n+\n     assert Domain.preprocess('Z(x)') == ZZ.frac_field(x)\n     assert Domain.preprocess('Q(x)') == QQ.frac_field(x)\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..5109b0f 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,10 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import Symbol, MatrixSymbol, pretty\n+from sympy.core.sympify import SympifyError\n+from sympy.abc import x, n, a\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n@@ -6122,7 +6126,19 @@ def test_MatrixSymbol_printing():\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n \n-def test_degree_printing():\n+def test_issue_14814_sympify_error_in_matadd():\n+    # Test for issue #14814\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    assert pretty(x + y_star) == \"x + y*\"\n+    assert pretty(-a*x - 2*y_star*y_star) == \"-a*x - 2*y**y*\"\n+    \n+    # Additional test cases to verify no sympification issues\n+    y_dash = MatrixSymbol('y-', n, n)\n+    z = MatrixSymbol('z', n, n)\n+    assert pretty(x + y_dash) == \"x + y-\"\n+    assert pretty(x + z) == \"x + z\"\n+    assert pretty(-x + y_dash) == \"y- - x\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..a209fe6 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -725,6 +725,30 @@ def test_dummification():\n     lam = lambdify((alpha, t), 2*alpha + t)\n     assert lam(2, 1) == 5\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n+\n+def test_curly_matrix_symbol():\n+    # Original test for issue with curly braces in MatrixSymbol\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    lam = lambdify(curlyv, curlyv)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+    lam = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+\n+def test_various_curly_matrix_symbols():\n+    # Larger MatrixSymbol dimensions\n+    curlyv_large = MatrixSymbol(\"{v}\", 3, 2)\n+    lam_large = lambdify(curlyv_large, curlyv_large)\n+    assert lam_large([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n+    lam_large = lambdify(curlyv_large, curlyv_large, dummify=True)\n+    assert lam_large([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n+    \n+    # Testing matrix operation\n+    curlyv_op = MatrixSymbol(\"{v}\", 2, 1)\n+    expression = 2 * curlyv_op + 1\n+    lam_op = lambdify(curlyv_op, expression)\n+    assert lam_op([[1], [0]]) == [[3], [1]]\n+    lam_op = lambdify(curlyv_op, expression, dummify=True)\n+    assert lam_op([[1], [0]]) == [[3], [1]]\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..b28453c 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -29,6 +30,24 @@ def test_Function():\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n \n+def test_Max_Min():\n+    # Original test case as provided\n+    assert mcode(Max(x, y, z)*Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n+    # New test cases based on the issue description\n+    # Ensuring correct output for Max when one is a constant\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"  # To ensure format is consistent regardless of argument order\n+\n+    # Test Max with multiple constant and symbol arguments\n+    assert mcode(Max(5, x, 3, y, 7)) == \"Max[5, x, 3, y, 7]\"\n+\n+    # Edge case: same variable\n+    assert mcode(Max(x, x)) == \"Max[x, x]\"\n+\n+    # Test with Min for assurance it is unaffected\n+    assert mcode(Min(x, y, 5)) == \"Min[x, y, 5]\"\n+\n \n def test_Pow():\n     assert mcode(x**3) == \"x^3\"\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..2c936b2 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,16 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n+def test_indexed_matrix_expression_latex():\n+    # Reproduce the conditions mentioned in the issue\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Assert on the expected behavior to ensure the fix works as expected\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..14f3b4c 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,20 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test cases derived from the reported issue\n+    # Test: idiff with Eq()\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x).simplify() == (x + 1)*exp(x - y)/(y + 1)\n+\n+    # Test: idiff with function f(x) instead of y\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    \n+    # Verify multi-variable idiff\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..b22ecd0 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,29 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_ccode_unused_array_arg():\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.codegen import codegen\n+    from sympy.utilities.codegen import CCodeGen\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..716b33d 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,21 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Symbol, Eq, Intersection, S, FiniteSet\n \n-def test_issue_9623():\n+def test_issue_intersection_duplicates():\n+    x = Symbol('x')\n+    \n+    # Basic intersection case with duplicates\n+    assert Intersection({1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    \n+    # Case where there should be no intersection because x != 1\n+    assert Intersection({x}, {1}) == S.EmptySet\n+\n+    # More complex intersection cases\n+    assert Intersection({1}, {1}, {1}) == FiniteSet(1)\n+    assert Intersection({1, 2}, {2, 1}, {1}) == FiniteSet(1)\n+    assert Intersection({x}, {x}, {1}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..6795dcb 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -10,7 +11,10 @@ from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayPermuteDims, CodegenArrayElementwiseAdd)\n from sympy.printing.lambdarepr import NumPyPrinter\n \n-from sympy.utilities.pytest import warns_deprecated_sympy\n+from sympy.matrices import MatrixSymbol, Identity\n+from sympy.utilities.pytest import warns_deprecated_sympy, skip, raises\n+from sympy import symbols\n+import numpy as np\n from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..b0b4c80 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,17 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n-def test_issue_7971():\n+def test_issue_17137():\n+    x = Symbol('x')\n+    # Test cases from the original patch\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    \n+    # Additional test cases\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(sin(x)**(1 + 2*I)) == sin(x)**(1 + 2*I)\n+    assert simplify(tan(x)**I) == tan(x)**I\n+    assert simplify(exp(I*x)) == exp(I*x)\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..82c1ea6 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -7,6 +8,17 @@ from sympy.utilities.pytest import raises, warns\n \n \n def test_point():\n+    # Test case for issue: multiplication by sympify(2.0)\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+\n+    # Expected to work without exception\n+    result1 = point1 + point2 * sympify(2.0)\n+    result2 = point1 + sympify(2.0) * point2\n+\n+    # Verify that both expressions yield the same result\n+    assert result1 == Point(2, 2)\n+    assert result2 == Point(2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..2c046e3 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,12 +1894,54 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, sympify\n+from sympy.core.symbol import Symbol\n+from sympy.testing.pytest import raises\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n \n \n-def test_ExprBuilder():\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+def test_repr_evaluation_issue():\n+    x = symbols('x')\n+\n+    # Reproducible test case for the specific issue\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    \n+    # This should not raise an AttributeError\n+    assert (x == C()) is False\n+\n+    # Related issue: an unknown object whose repr is `x` should not compare as equal\n+    class C2:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (x == C2()) is False\n+    assert (x != C2()) is True\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..b8559d2 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,6 +547,21 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n+    # Test for issue with symbol ordering and permute=True in diophantine\n+    from sympy import symbols\n+    x, y = symbols('x y', integer=True)\n+    # Original test from the issue\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    # Add an additional symbol order check\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n     # issue 18122\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..7a222dc 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,8 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy import Basic, Symbol\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -61,7 +63,7 @@ def test_PostIncrement():\n \n \n def test_sizeof():\n-    typename = 'unsigned int'\n+    typename = String('unsigned int')\n     sz = sizeof(typename)\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..3d855cd 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,28 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_blockdiagmatrix_one_element_to_matrix():\n+    from sympy import Matrix, BlockDiagMatrix\n+    # Test conversion with a single matrix element\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_blockdiagmatrix_two_elements_to_matrix():\n+    from sympy import Matrix, BlockDiagMatrix\n+    # Test conversion with two matrix elements\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B == expected\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..1be40d4 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -83,7 +84,19 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_block_index_symbolic_issue_case():\n+    from sympy import BlockMatrix, MatrixSymbol, symbols\n+\n+    # Defining symbols for matrix dimensions\n+    n, i = symbols('n i', integer=True)\n+\n+    # Defining individual and block matrices\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+\n+    # Test the indexing with symbolic index\n+    assert C[i, 0] == MatrixElement(C, i, 0), \"Indexing failed with symbolic index\"\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..8ea6289 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -200,7 +200,29 @@ def test_im():\n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n \n-def test_sign():\n+from sympy import Symbol, Abs, Piecewise, sign, S, Eq\n+\n+def test_sign_rewrite_abs():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    f = Function('f')\n+    \n+    # Test rewrite of sign to Abs\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x)/Abs(f(x)), True))\n+\n+    # Test for zero explicitly\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(0.0).rewrite(Abs) == 0\n+\n+    # Test for complex number\n+    z = -2 + 3*I\n+    assert sign(z).rewrite(Abs).simplify() == z / Abs(z)\n+\n+    # Ensure original behavior with specific cases\n+    p = Symbol('p', positive=True)\n+    assert sign(p).rewrite(Abs) == Piecewise((0, Eq(p, 0)), (p/Abs(p), True))\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..a78d130 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -472,6 +472,14 @@ def test_multiset_permutations():\n \n \n def test_partitions():\n+    assert all(id(p) != id(q) for p, q in zip(partitions(5), partitions(5))), \\\n+        \"Distinct partitions should not reference the same dictionary instance.\"\n+    assert all(id(p) != id(q) for p, q in zip(partitions(5, k=2), partitions(5, k=2))), \\\n+        \"Distinct partitions with k=2 should not reference the same dictionary instance.\"\n+    assert all(id(p) != id(q) for p, q in zip(partitions(5, m=2), partitions(5, m=2))), \\\n+        \"Distinct partitions with m=2 should not reference the same dictionary instance.\"\n+    assert all(id(p) != id(q) for p, q in zip(partitions(5, m=2, k=2), partitions(5, m=2, k=2))), \\\n+        \"Distinct partitions with m=2 and k=2 should not reference the same dictionary instance.\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..89f340d 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,6 +254,9 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n+from sympy import S, oo, power\n+from sympy.core import Pow\n+\n def test_zero():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -266,8 +269,11 @@ def test_zero():\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n-\n-def test_pow_as_base_exp():\n+def test_issue_19572():\n+    # Test issue 19572 - Ensure `0**-oo` is evaluated to `zoo`\n+    assert 0**-S.Infinity == S.ComplexInfinity\n+    assert power(0, -oo) == S.ComplexInfinity\n+    assert Pow(0, -oo) == S.ComplexInfinity\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..523203f 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -29,8 +30,30 @@ def test_eq():\n     assert 10*m == 10*m\n     assert 10*m != 10*s\n \n+from sympy import Mul, Pow\n+from sympy.physics.units import joule\n \n def test_convert_to():\n+    # Test for the issue with orthogonal units conversion\n+    expr = joule * second\n+    # Expected to return the original expression, without alteration\n+    conv = convert_to(expr, joule)\n+    assert conv == expr, f\"Expected {expr}, but got {conv}\"\n+\n+    # Adding additional test cases related to this issue\n+    # Testing conversion of a compound unit to itself\n+    conv_same_units = convert_to(expr, expr)\n+    assert conv_same_units == expr, f\"Expected {expr}, but got {conv_same_units}\"\n+\n+    # Testing conversion of the expression to base units\n+    base_units = kg * m**2 / s\n+    conv_base_units = convert_to(expr, base_units)\n+    assert conv_base_units == base_units, f\"Expected {base_units}, but got {conv_base_units}\"\n+\n+    # Testing conversion to minutes\n+    conv_to_minutes = convert_to(expr, minute)\n+    expected_minutes_expr = expr * minute / second\n+    assert conv_to_minutes == expected_minutes_expr, f\"Expected {expected_minutes_expr}, but got {conv_to_minutes}\"\n     q = Quantity(\"q1\")\n     q.set_global_relative_scale_factor(S(5000), meter)\n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..18dfbd6 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,20 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from sympy.testing.pytest import raises\n+\n+\n+def test_symbol_no_dict_attribute():\n+    # Ensure that Symbol does not have a __dict__ by default\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"__dict__ unexpectedly found in Symbol instance\"\n+\n+    # Check that __slots__ is defined and only contains 'name'\n+    with raises(AttributeError):\n+        s.__dict__\n+    assert s.__slots__ == ('name',)\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..c868342 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo, refine)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,24 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_refine_complex_arguments():\n+    # Test cases according to the issue description\n+    a = Symbol('a')\n+    x = Symbol('x', real=True)\n+    assert refine(arg(a), Q.positive(a)) == 0\n+\n+    J = Integral(sin(x)*exp(-a*x), (x, 0, oo)).doit()\n+    refined_J = refine(J, Q.positive(a))\n+    \n+    # Expression should be simplified for positive a\n+    assert refined_J == 1/(a**2 + 1)\n+\n+    # Additional checks to ensure refactoring does not break when assumptions are used\n+    assert refine(Abs(a), Q.positive(a)) == a\n+    assert refine(arg(a), Q.positive(a)) == 0\n+\n+    # Default behavior without assumptions\n+    assert refine(arg(a)) == arg(a)\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/functions/elementary/tests/test_piecewise.py b/sympy/functions/elementary/tests/test_piecewise.py\nindex 400b22e..9047956 100644\n--- a/sympy/functions/elementary/tests/test_piecewise.py\n+++ b/sympy/functions/elementary/tests/test_piecewise.py\n@@ -165,6 +165,38 @@ def test_piecewise1():\n     assert isinstance(p, Piecewise) and p.is_commutative is True\n \n \n+def test_issue_21373():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy import exp, symbols, Piecewise\n+    \n+    x, y, z = symbols('x y z', real=True)\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    \n+    # Test for substitution of integers with floats\n+    result = expr.subs({1: 1.0})\n+    assert result == exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+\n+    # Additional test cases with variations in the expression\n+    expr_alt1 = exp(sinh(Piecewise((x, y > x), (y, True))))\n+    result_alt1 = expr_alt1.subs({1: 1.0})\n+    assert result_alt1 == exp(sinh(Piecewise((x, y > x), (y, True))))\n+\n+    expr_alt2 = sinh(Piecewise((x, y > x), (y, True)) / z)\n+    result_alt2 = expr_alt2.subs({1: 1.0})\n+    assert result_alt2 == sinh(Piecewise((x, y > x), (y, True)) / z)\n+\n+    expr_alt3 = sinh(Piecewise((x, y > x), (y, True)))\n+    result_alt3 = expr_alt3.subs({1: 1.0})\n+    assert result_alt3 == sinh(Piecewise((x, y > x), (y, True)))\n+\n+    expr_alt4 = exp(Piecewise((x, y > x), (y, True)) / z)\n+    result_alt4 = expr_alt4.subs({1: 1.0})\n+    assert result_alt4 == exp(Piecewise((x, y > x), (y, True)) / z)\n+\n+    expr_alt5 = sinh(x/z + y/z)\n+    result_alt5 = expr_alt5.subs({1: 1.0})\n+    assert result_alt5 == sinh(x/z + y/z)\n+\n def test_piecewise_free_symbols():\n     f = Piecewise((x, a < 0), (y, True))\n     assert f.free_symbols == {x, y, a}\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..e1f7769 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,5 +1,6 @@\n+\n from sympy.core.add import Add\n-from sympy.core.kind import NumberKind, UndefinedKind\n+from sympy.core.kind import NumberKind, UndefinedKind, MatrixKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n@@ -39,7 +40,12 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n-def test_Matrix_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    d1 = Derivative(comm_x, comm_x)\n+    assert d1.kind is NumberKind\n+    d2 = Derivative(A, comm_x)\n+    assert d2.kind is MatrixKind(NumberKind)\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n         m = cls.zeros(3, 2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..74cebb2 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,6 +131,30 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n+    # Additional test cases for checking the issue with itermonomials and min_degrees\n+\n+    # Test with three variables to ensure monomials of total degree 3 are returned\n+    from sympy import symbols\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3,\n+        x1*x2**2, x2**2*x3, x1*x3**2, x2*x3**2,\n+        x1*x2*x3, x1*x2**2, x1**2*x3, x3**2*x1, x2*x1**2\n+    }\n+\n+    # Test to verify that increasing max_degrees still includes all of min_degrees\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) >= {\n+        x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3,\n+        x1*x2**2, x2**2*x3, x1*x3**2, x2*x3**2,\n+        x1*x2*x3, x1*x2**2, x1**2*x3, x3**2*x1, x2*x1**2\n+    }\n+    \n+    # Test for monomials with degree lists instead of total degrees\n+    assert set(itermonomials([x1, x2], [2, 2], [1, 1])) == {\n+        x1*x2, x1**2*x2, x1*x2**2, x1**2*x2**2,\n+        x2, x1, x1**2, x2**2\n+    }\n+\n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..13c78fd 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -48,6 +49,13 @@ def test_solve_poly_system():\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], (x, y)))\n+    # Additional verification for related scenarios\n+    assert solve_poly_system([x - 1], x) == [(S.One,)]  # Confirm existing functionality\n+    assert solve_poly_system([y - 1], y) == [(S.One,)]  # Sanity check for y only\n \n \n def test_solve_biquadratic():\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..b7f5d8b 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,8 +10,18 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n+def test_issue_22684():\n+    # Used to give an error previously\n+    with evaluate(False):\n+        Point(1, 2)\n+        \n+    # Test the same condition with Point2D explicitly\n+    with evaluate(False):\n+        Point2D(1, 2)\n+\n \n def test_point():\n     x = Symbol('x', real=True)\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..8b761f0 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -337,6 +337,22 @@ def test_cse_Indexed():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+def test_issue_56_cse_matrixsymbol_behavior():\n+    from sympy import symbols, MatrixSymbol, cse\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    # Simple check with a single indexed element\n+    assert cse(A[0, 0] * A[0, 1] + A[0, 0] * A[0, 1] * A[0, 2]) == (\n+        [(x0, A[0, 0]*A[0, 1])], [x0*A[0, 2] + x0])\n+        \n+    # Example with more complex indexing and repetition\n+    B = MatrixSymbol(\"B\", 3, 1)\n+    expr = A[0, 0]*B[0, 0] + A[1, 0]*B[1, 0] + A[2, 0]*B[2, 0] + A[0, 1]*B[0, 0]\n+    cse_subs, cse_reduced = cse(expr)\n+\n+    # Verify that there are substitutions that simplify the expression by reducing repetitions\n+    assert len(cse_subs) > 0\n+    assert cse_reduced[0] == A[2, 0]*B[2, 0] + A[0, 1]*B[0, 0] + x0\n+\n \n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n@@ -356,6 +372,22 @@ def test_cse_MatrixExpr():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+def test_issue_56_cse_matrixsymbol_behavior():\n+    from sympy import symbols, MatrixSymbol, cse\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    # Simple check with a single indexed element\n+    assert cse(A[0, 0] * A[0, 1] + A[0, 0] * A[0, 1] * A[0, 2]) == (\n+        [(x0, A[0, 0]*A[0, 1])], [x0*A[0, 2] + x0])\n+        \n+    # Example with more complex indexing and repetition\n+    B = MatrixSymbol(\"B\", 3, 1)\n+    expr = A[0, 0]*B[0, 0] + A[1, 0]*B[1, 0] + A[2, 0]*B[2, 0] + A[0, 1]*B[0, 0]\n+    cse_subs, cse_reduced = cse(expr)\n+\n+    # Verify that there are substitutions that simplify the expression by reducing repetitions\n+    assert len(cse_subs) > 0\n+    assert cse_reduced[0] == A[2, 0]*B[2, 0] + A[0, 1]*B[0, 0] + x0\n+\n     replacements, reduced_exprs = cse([expr1 + expr2, expr1])\n     assert replacements\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..36e94d8 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -10,6 +11,14 @@ from sympy.tensor.array.sparse_ndim_array import (\n \n from sympy.abc import x, y\n \n+def test_empty_array_creation():\n+    # Ensure that creating an empty array does not raise an error\n+    for ArrayType in array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n+\n array_types = [\n     ImmutableDenseNDimArray,\n     ImmutableSparseNDimArray,\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..189714f 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,33 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n+def test_lambdify_tuple_with_one_element():\n+    \"\"\"Test tuples with one element in lambdify.\"\"\"\n+    # Generate code for tuple with one element\n+    f = lambdify([], (1,))\n+    # Check the source code for the correct tuple representation\n+    assert inspect.getsource(f) == \"def _lambdifygenerated():\\n    return (1,)\\n\"\n+\n+    # Test execution of generated function\n+    assert f() == (1,)\n+\n+    # Also check correct behavior for tuple with two elements for completeness\n+    f2 = lambdify([], (1, 2))\n+    assert inspect.getsource(f2) == \"def _lambdifygenerated():\\n    return (1, 2)\\n\"\n+    assert f2() == (1, 2)\n+\n+    # Ensure that the existing functionality is not compromised\n+    f3 = lambdify(['x'], 'x')  # Use 'sympy' module to mimic previous behavior\n+    assert f3(5) == 5\n+\n+    # Adding more cases to check tuples with different data types and structures\n+    f4 = lambdify([], ('a',))\n+    assert f4() == ('a',)\n+    assert inspect.getsource(f4) == \"def _lambdifygenerated():\\n    return ('a',)\\n\"\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..c093b92 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,8 +528,27 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n-    from sympy.core.numbers import E\n+from sympy import exp\n+from sympy.core.numbers import E\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.physics.units import energy\n     u = Quantity('u')\n     v = Quantity('v')\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..98e6908 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,38 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_issue_24142():\n+    # Test cases to verify the issue described in #24142\n+    \n+    # Import necessary modules\n+    from sympy.physics.quantum import TensorProduct as TP\n+    from sympy.physics.quantum import Operator\n+    \n+    # Basic test cases as described in the issue\n+    A = Operator('A')\n+    B = Operator('B')\n+    C = Operator('C')\n+\n+    # This should fully expand correctly\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    \n+    # More complex scenarios to cover additional edge cases\n+    # Tensor factor with multiplication\n+    assert TP(2*A*B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+    \n+    # Ensuring terms with subtraction in between\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    \n+    # Checking case with zero tensors that should return zero\n+    U = Operator('U')\n+    assert TP(U - U, U + C).expand(tensorproduct=True) == 0\n+    \n+    # Ensuring the fix does not impact commutative factors in mixed multiplication\n+    assert TP(2*U - A, U + B).expand(tensorproduct=True) == \\\n+        2 * TP(U, U) + 2 * TP(U, B) - TP(A, U) - TP(A, B)\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..98babec 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -10,7 +11,7 @@ from sympy.functions.elementary.exponential import (exp, log)\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.functions.elementary.trigonometric import sin\n from sympy.integrals.integrals import integrate\n-from sympy.physics.units import (amount_of_substance, area, convert_to, find_unit,\n+from sympy.physics.units import (Quantity, time, velocity, acceleration, second, meter, amount_of_substance, area, convert_to, find_unit,\n                                  volume, kilometer, joule, molar_gas_constant,\n                                  vacuum_permittivity, elementary_charge, volt,\n                                  ohm)\n@@ -561,8 +562,44 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    from sympy.physics.units.systems.si import SI\n+    \n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n \n-def test_prefixed_property():\n+def test_equivalent_dimensions_addition():\n+    from sympy.physics.units.systems.si import SI\n+\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 3 * meter / second)\n+    \n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, 9.8 * meter / second**2)\n+    \n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 1 * second)\n+\n+    expr = A2*T2 + V2\n+    # Since A2*T2 has velocity dimension which matches with V2,\n+    # the function should not raise an error\n+    SI._collect_factor_and_dimension(expr)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..9b6b74c 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,13 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+def test_milli_prefix():\n+    # Validate correct behavior of milli prefix\n+    assert milli * W == W / 1000  # mW\n+    assert milli * W == milli * W\n+    assert W * milli == W / 1000  # W * milli should also be mW\n+    assert milli * volt == volt / 1000  # Test with another unit, mV\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..8a158ba 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -185,6 +185,8 @@ class GrandParent(models.Model):\n \n \n class Parent(GrandParent):\n+    class Meta:\n+        ordering = [\"-pk\"]\n     pass\n \n \n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..4a0a6e7 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,34 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        from operator import attrgetter\n+        from django.db.models import F\n+\n+        # Create Authors with self-referential ForeignKey Editors\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        editor_1 = Author.objects.create(name=\"Editor 1\", editor=author_1)\n+        editor_2 = Author.objects.create(name=\"Editor 2\", editor=author_2)\n+\n+        # Create Articles linked to authors with editors\n+        a1 = Article.objects.create(headline=\"Article 1\", author=editor_1)\n+        a2 = Article.objects.create(headline=\"Article 2\", author=editor_2)\n+\n+        # Checking order with self-referential FK column by editor\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Different order_by format\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter(\"headline\")\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +381,34 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referential_fk(self):\n+        from operator import attrgetter\n+        from django.db.models import F\n+\n+        # Create Authors with self-referential ForeignKey Editors\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        editor_1 = Author.objects.create(name=\"Editor 1\", editor=author_1)\n+        editor_2 = Author.objects.create(name=\"Editor 2\", editor=author_2)\n+\n+        # Create Articles linked to authors with editors\n+        a1 = Article.objects.create(headline=\"Article 1\", author=editor_1)\n+        a2 = Article.objects.create(headline=\"Article 2\", author=editor_2)\n+\n+        # Checking order with self-referential FK column by editor\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Different order_by format\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter(\"headline\")\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..e9c1e1c 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3189,7 +3189,23 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n \n         self.assertEqual(SomeForm()['field'].id_for_label, 'id_field')\n \n-    def test_boundfield_id_for_label_override_by_attrs(self):\n+    def test_boundwidget_id_for_label_with_checkbox_select_multiple(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label correctly uses the ID specified in widget\n+        attributes when using CheckboxSelectMultiple.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n+        self.assertNotEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertNotEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n         \"\"\"\n         If an id is provided in `Widget.attrs`, it overrides the generated ID,\n         unless it is `None`.\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..1224db5 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,11 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm, Normalize\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..d557a70 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_unstacked_dataset_single_dim_variable(self):\n+        # single dimension: regression test for issue with single-dim variables\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..2922da2 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,37 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+from .util import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app: SphinxTestApp):\n+    # Create a new test case for the issue described\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..6acb840 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,6 +358,23 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n+def test_issue_trigsimp_with_rationals():\n+    # Test the original issue where sin and cos with Rational can't be simplified\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    \n+    # Check if the trigsimp simplifies the expressions correctly\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == cos(S(1)/25 - S(1)/50)\n+\n+    # Test acos of the dot product\n+    r3 = acos(r1)\n+    # Due to the nature of acos, we can't directly simplify the expression,\n+    # but we should at least ensure the computation does not fail\n+    assert isinstance(r3, acos)  # Ensure it's an instance of acos\n+\n \n def test_exptrigsimp():\n     def valid(a, b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..d4098a5 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4863,7 +4863,35 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert upretty(expr) == ucode_str\n \n \n-def test_units():\n+def test_sum_alignment():\n+    from sympy import Sum, oo\n+    from sympy.abc import x\n+    \n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ascii_str = \\\n+\"\"\"\\\n+  oo     \\n\\\n+ ____    \\n\\\n+ \\\\   `   \\n\\\n+  \\\\    x \\n\\\n+  /    + 3\\n\\\n+ /___,   \\n\\\n+x = 1    \\\n+\"\"\"\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e      \\n\\\n+ ____    \\n\\\n+ \u2572       \\n\\\n+  \u2572    x \\n\\\n+  \u2571    + 3\\n\\\n+ \u2571       \\n\\\n+ \u203e\u203e\u203e\u203e    \\n\\\n+x = 1    \\\n+\"\"\")\n+    \n+    assert pretty(expr) == ascii_str\n+    assert upretty(expr) == ucode_str\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..1f7ed4b 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,44 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    \n+    # Original test cases\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Additional test cases for thorough testing\n+    g = [1, 2, 2, 3, 3, 3, 4]\n+    with raises(RuntimeError):\n+        for i in uniq(g):\n+            g.remove(i)\n+    \n+    h = [1, 2, 3] * 10  # Testing with larger-size list\n+    with raises(RuntimeError):\n+        for i in uniq(h):\n+            if i in h:\n+                h.remove(i)\n+    \n+    i = ['a', 'b', 'a', 'c']  # Non-numeric example\n+    with raises(RuntimeError):\n+        for char in uniq(i):\n+            i.remove(char)\n+    \n+    j = [(1,), (2,), (1,)]  # Tuple-based elements in list\n+    with raises(RuntimeError):\n+        for item in uniq(j):\n+            j.remove(item)\n+    \n+    k = ['apple', 'banana', 'apple', 'cherry']  # String elements\n+    with raises(RuntimeError):\n+        for fruit in uniq(k):\n+            k.remove(fruit)\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..b50247b 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -8,6 +9,7 @@ from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n+from django.db.models import Max\n \n from .models import (\n     Article, Author, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..3b08b6f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -536,8 +536,30 @@ class BasicExpressionsTests(TestCase):\n             qs.query.annotations['is_ceo'],\n             qs.query.annotations['small_company'],\n         )\n-\n-    def test_in_subquery(self):\n+    def test_subquery_sql(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        \n+    def test_subquery_with_explicit_selection(self):\n+        # Test Subquery.as_sql() with explicit fields\n+        subquery = Subquery(App.objects.values('id', 'name'))\n+        self.assertIs(subquery.query.subquery, True)\n+        compiler = subquery.query.get_compiler(connection=connection)\n+        sql, _ = subquery.as_sql(compiler, connection)\n+        self.assertTrue(sql.startswith('(SELECT '))\n+        self.assertTrue(sql.endswith(')'))\n+\n+    def test_subquery_remain_independent(self):\n+        # Ensure setting subquery=true doesn't change original queryset subquery state\n+        queryset = App.objects.all()\n+        subquery = Subquery(queryset)\n+        self.assertIs(subquery.query.subquery, True)\n+        self.assertIs(queryset.query.subquery, False) # Original queryset should remain unchanged\n         # This is a contrived test (and you really wouldn't write this query),\n         # but it is a succinct way to test the __in=Subquery() construct.\n         small_companies = Company.objects.filter(num_employees__lt=200).values('pk')\n",
  "django__django-15819": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 0ecd041..418fc4f 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -420,7 +420,10 @@ class InspectDBTestCase(TestCase):\n     def test_introspection_errors(self):\n         \"\"\"\n         Introspection errors should not crash the command, and the error should\n-        be visible in the output.\n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import TransactionTestCase\n+from unittest import mock\n         \"\"\"\n         out = StringIO()\n         with mock.patch(\n@@ -434,7 +437,22 @@ class InspectDBTestCase(TestCase):\n         self.assertIn(\"# The error was:\", output)\n \n \n-class InspectDBTransactionalTests(TransactionTestCase):\n+class RelatedNameGenerationTests(TransactionTestCase):\n+    available_apps = [\"inspectdb\"]\n+    \n+    def test_related_name_generation(self):\n+        \"\"\"Test that inspectdb generates related_name for self-referential and unresolved clashes in relations.\"\"\"\n+        out = StringIO()\n+        with mock.patch(\n+            \"django.db.connection.introspection.get_table_list\",\n+            return_value=[TableInfo(name=\"inspectdb_message\", type=\"t\")],\n+        ):\n+            call_command(\"inspectdb\", stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"from_field = models.ForeignKey('InspectdbPeople', models.CASCADE, db_column='from_id', related_name='message_from_fields')\",\n+            output,\n+        )\n     available_apps = [\"inspectdb\"]\n \n     def test_include_views(self):\n",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..eda9015 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,7 +153,35 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            pools = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                ).select_related('tournament_pool')\n+            )\n+        # Attempting to fix the issue with the wrong related object\n+        self.assertEqual(pools[0].pool.tournament, pools[0].tournament_pool.tournament)\n+\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            pools = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(pools[0].tournament_pool.tournament, pools[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            tournaments = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(tournaments[0].style.another_pool, self.p3)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +192,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..a52d117 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -5,7 +6,7 @@ from pathlib import Path\n import platform\n from threading import Timer\n from types import SimpleNamespace\n-import warnings\n+import pickle\n \n import numpy as np\n import pytest\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..e8bc698 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -8,6 +9,10 @@ import pytest\n from numpy.testing import assert_array_equal\n \n from seaborn.external.version import Version\n+import seaborn as sns\n+import pandas as pd\n+import pytest\n+from seaborn import PairGrid\n from seaborn.palettes import color_palette\n \n from seaborn.relational import (\n@@ -1623,6 +1628,19 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n+    def test_pairgrid_hue_issue(self):\n+        \"\"\"Test PairGrid with hue assigned in map behaves correctly.\"\"\"\n+        iris = sns.load_dataset(\"iris\")\n+\n+        # Check if mapping hue directly while creating PairGrid causes issue\n+        g = PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            assert True\n+        except Exception as e:\n+            pytest.fail(f\"PairGrid with hue assignment raised an exception: {e}\")\n+\n     def test_linewidths(self, long_df):\n \n         f, ax = plt.subplots()\n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..e384842 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -346,8 +346,17 @@ def test_excinfo_str():\n     assert s.endswith(\"ValueError\")\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n+import pytest\n+\n+def test_str_on_raises_context_var():\n+    # Test using 'str()' on an exception caught by 'pytest.raises'\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+\n+    assert str(excinfo.value) == \"A\\nB\\nC\", \"str(excinfo.value) should match 'A\\\\nB\\\\nC'\"\n \n-def test_excinfo_for_later():\n+    # Document that str(excinfo) behaves as expected by the issue description\n+    assert str(excinfo) != str(excinfo.value), \"Direct str(excinfo) should not equal the exception message\"\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..c7a8397 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,32 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Sum, ask, Q, assuming, refine\n+from sympy.matrices import MatrixSymbol\n \n-def test_Identity_doit():\n+def test_identity_matrix_sum():\n+    i, j = symbols('i j', integer=True)\n+    n = Symbol('n', integer=True, positive=True)\n+    M = MatrixSymbol('M', n, n)\n+\n+    with assuming(Q.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+    # Check identity matrix properties\n+    assert e[0, 0] == 1\n+    assert e[0, 1] == 0\n+    assert e[1, 0] == 0\n+    assert e[1, 1] == 1\n+\n+    # Verify diagonal and integer elements properties\n+    assert ask(Q.diagonal(e))\n+    assert ask(Q.integer_elements(e))\n+\n+    # Verify sum of diagonal elements is 'n'\n+    assert Sum(e[i, i], (i, 0, n-1)).doit() == n\n+\n+    # Verify total sum of all elements is 'n'\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex b711aa3..298a654 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -515,6 +515,11 @@ class Point(object):\n         >>> p1.vel(N)\n         10*N.x\n \n+        Notes\n+        =====\n+        The method can derive the velocity from position's time derivative if:\n+        - The position from another point to this point is defined.\n+        - The other point's velocity is known in the given frame.\n         \"\"\"\n \n         _check_frame(frame)\n",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..c0f4349 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -245,6 +245,10 @@ GOOD_PAIRS = [\n     (r\"5^0 - 4^0\", _Add(_Pow(5, 0), _Mul(-1, _Pow(4, 0)))),\n ]\n \n+def test_issue_fix_21537():\n+    from sympy.parsing.latex import parse_latex\n+    assert str(parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")) == \"((a**3 + b)/c)/(1/(c**2))\"\n+\n \n def test_parseable():\n     from sympy.parsing.latex import parse_latex\n"
}