{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..cc369a0 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,35 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+@pytest.mark.parametrize(\"nested_compound_model, expected_result\", [\n+    (\n+        m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5)),\n+        (np.array([[True,  True, False, False],\n+                   [True,  True, False, False],\n+                   [False, False, True,  False],\n+                   [False, False, False, True]]))\n+    ),\n+    (\n+        (m.Linear1D(10) & m.Linear1D(5)) & m.Pix2Sky_TAN(),\n+        (np.array([[True,  False, False, False],\n+                   [False, True,  False, False],\n+                   [False, False, True,  True],\n+                   [False, False, True,  True]]))\n+    ),\n+    (\n+        m.Pix2Sky_TAN() & m.Scale(1.0) & (m.Linear1D(5) & m.Linear1D(5)),\n+        (np.array([\n+                   [True,  True, False, False, False],\n+                   [True,  True, False, False, False],\n+                   [False, False, True,  False,  False],\n+                   [False, False, False, True,  False],\n+                   [False, False, False, False, True]\n+                  ]))\n+    )\n+])\n+def test_separable_nested(nested_compound_model, expected_result):\n+    result_matrix = separability_matrix(nested_compound_model)\n+    assert_allclose(result_matrix, expected_result)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..df12c28 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,10 +1,13 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n-\n-from .common import assert_almost_equal, assert_equal\n+from astropy.table import QTable\n+import astropy.units as u\n+import numpy as np\n+from io import StringIO\n \n \n def assert_equal_splitlines(arg1, arg2):\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..1f1ec83 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -43,6 +43,47 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n \n+import pytest\n+import numpy as np\n+from astropy.table import Table\n+from astropy.utils.exceptions import AstropyUserWarning\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_case_insensitive_command(tmp_path, lowercase):\n+    qdp_content = \"\"\"\n+    ! This is a comment block\n+    READ SERR 1 2\n+    1 0.5 NO 0.5\n+    2 0.3 NO 0.3\n+    NO NO NO NO\n+    \"\"\"\n+    if lowercase:\n+        qdp_content = lowercase_header(qdp_content)\n+\n+    path = str(tmp_path / \"test_case_insensitive.qdp\")\n+    with open(path, \"w\") as fp:\n+        fp.write(qdp_content)\n+\n+    with pytest.warns(None) as record:\n+        table = Table.read(path, format='ascii.qdp')\n+\n+    # Ensure the table is read successfully\n+    assert \"READ SERR 1 2\" in qdp_content.upper() or \"read serr 1 2\" in qdp_content\n+    assert \"MJD\" in table.colnames\n+\n+    # Ensure no warnings produced due to case sensitivity\n+    assert all(\"Unrecognized QDP line\" not in str(warning.message) for warning in record)\n+\n def test_roundtrip(tmp_path):\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..21bc2d0 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,43 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..6a244f1 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,26 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_column_d_format_exponent_replacement(self):\n+        \"\"\"Test if 'E' in exponents is correctly replaced with 'D' in format 'D'.\"\"\"\n+        import numpy as np\n+        from astropy.io import fits\n+        from numpy.core.records import fromarrays\n+\n+        r1 = np.array([11.23456, 12.78901])\n+        c1 = fits.Column(name='exponent', format='D', array=r1)\n+\n+        # Create a table with the columns\n+        hdu = fits.TableHDU.from_columns([c1])\n+        filepath = self.temp('test_column_d_format_exponent_replacement.fits')\n+        hdu.writeto(filepath, overwrite=True)\n+\n+        # Read file and check text replacement\n+        with open(filepath, 'r') as f:\n+            content = f.read()\n+            assert '11.23456D+00' in content or '0.1123456D+02' in content\n+            assert '12.78901D+00' in content or '0.1278901D+02' in content\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..c7a0ea3 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,6 +1093,14 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Test that the default file permissions are set to 0o644 when\n+        FILE_UPLOAD_PERMISSIONS is not explicitly set.\n+        \"\"\"\n+        from django.core.files.storage import default_storage\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..43b627e 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,8 +237,27 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\n',\n+            'trailingnewline\\n',\n         ]\n+\n+    def test_unicode_validator_trailing_newline(self):\n+        # Test cases for usernames with a trailing newline in Unicode validator\n+        invalid_usernames = ['normalusername\\n', 'joe\\n', 'Ren\u00e9\\n', '\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        # Test cases for usernames with a trailing newline in ASCII validator\n+        invalid_usernames = ['glenn\\n', 'GLEnN\\n', 'jean-marc\\n', '\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +277,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..24ed618 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -464,6 +466,22 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User should be able to be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_set_pk_none_for_different_model(self):\n+        a = Avatar.objects.create(desc='test_avatar')\n+        # Avatar should be able to be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(a))\n+        a.delete()\n+        self.assertIsNone(a.pk)\n+\n     def test_fast_delete_qs(self):\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..421a216 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.test.utils import captured_stdout\n \n from .models import Proxy, UserProxy\n \n@@ -140,7 +142,33 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_duplicate_permissions(self):\n+        \"\"\"\n+        Test that migrating with existing permissions for proxy models does not\n+        cause duplicate key errors and logs the appropriate message.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        # Create a permission that should already exist.\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        # This is the duplicate permission manually added to simulate the issue.\n+        duplicate_permission, created = Permission.objects.get_or_create(\n+            content_type=proxy_model_content_type,\n+            codename='duplicate_permission',\n+            defaults={'name': 'Duplicate Permission'},\n+        )\n+        # Ensure the setup simulates the condition of existing duplicate permissions.\n+        if not created:\n+            print(\"Duplicate permission already existed in the setup.\")\n+        \n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        \n+        # Verify that an appropriate message is output indicating possible issues with proxy permissions\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..38838fa 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -132,8 +132,52 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         del module.__spec__\n         self.assertEqual(autoreload.iter_modules_and_files((module,), frozenset()), frozenset())\n \n+class TestManagePyTracking(SimpleTestCase):\n+    def test_main_module_is_resolved(self):\n+        import sys\n+        main_module = sys.modules['__main__']\n+        self.assertFileFound(Path(main_module.__file__))\n \n-class TestCommonRoots(SimpleTestCase):\n+    def test_changes_in_manage_py_triggers_reload(self):\n+        \"\"\"\n+        Test that modifications to the `manage.py` file trigger the autoreload mechanism.\n+        \"\"\"\n+        # Simulate running the server with manage.py as the main module\n+        import sys\n+        import tempfile\n+        import shutil\n+        import os\n+        from pathlib import Path\n+        from django.utils import autoreload\n+\n+        original_manage_py = sys.modules['__main__'].__file__\n+        temp_dir = tempfile.mkdtemp()\n+        self.addCleanup(lambda: shutil.rmtree(temp_dir))\n+        temp_manage_py = Path(temp_dir) / 'manage.py'\n+\n+        # Copy the manage.py content to a temp location for testing\n+        with open(original_manage_py, 'r') as f:\n+            content = f.read()\n+        with open(temp_manage_py, 'w') as f:\n+            f.write(content)\n+\n+        # Override the main module's file attribute to point to the temporary manage.py\n+        sys.modules['__main__'].__file__ = str(temp_manage_py)\n+\n+        # Create a mock for the autoreload trigger function\n+        with mock.patch('django.utils.autoreload.trigger_reload', autospec=True) as mock_trigger_reload:\n+            # Modify the manage.py\n+            with open(temp_manage_py, 'a') as f:\n+                f.write(\"\\nprint('Modified manage.py')\\n\")\n+\n+            # Manually invoke the file change checker\n+            autoreload.check_changes()\n+\n+            # Ensure the trigger_reload was called due to the change in manage.py\n+            mock_trigger_reload.assert_called_once()\n+\n+        # Restore the original __main__ file\n+        sys.modules['__main__'].__file__ = original_manage_py\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..af441b7 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1,5 +1,30 @@\n import importlib\n import inspect\n+class CustomPathConverter(IntConverter):\n+    def to_python(self, value):\n+        raise Http404\n+\n+class Technical404TestCase(SimpleTestCase):\n+    def setUp(self):\n+        self.url = '/path-post/1/'\n+\n+    def test_technical_404_converter_raise_404(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get(self.url)\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_custom_path_converter_raises_404(self):\n+        with mock.patch('django.urls.converters.get_converter', return_value=CustomPathConverter):\n+            response = self.client.get(self.url)\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_404_debug_information_present(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            with self.settings(DEBUG=True):\n+                response = self.client.get(self.url)\n+                self.assertContains(response, 'Page not found', status_code=404)\n+                self.assertNotContains(response, 'A server error occurred. Please contact the administrator.')\n+\n import os\n import re\n import sys\n@@ -7,6 +32,8 @@ import tempfile\n import threading\n from io import StringIO\n from pathlib import Path\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from unittest import mock\n \n from django.core import mail\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..a7d6feb 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -97,6 +97,44 @@ class CharFieldTests(SimpleTestCase):\n \n         field = Model._meta.get_field('field')\n         self.assertEqual(field.check(), [])\n+    \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ]\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')])\n+                ]\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n \n     def test_missing_max_length(self):\n         class Model(models.Model):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..09fb17b 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -257,6 +257,24 @@ class WriterTests(SimpleTestCase):\n             A = 'a-value'\n             B = 'value-b'\n \n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        # Check Enum serialization with translations involved\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"(\\'a-value\\', migrations.test_writer.TextTranslatedEnum[\\'A\\']), \"\n+            \"(\\'value-b\\', migrations.test_writer.TextTranslatedEnum[\\'B\\'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum[\\'A\\'])\"\n+        )\n+        \n         class BinaryEnum(enum.Enum):\n             A = b'a-value'\n             B = b'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..5b0087e 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -324,7 +326,26 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_year_less_than_70(self):\n+\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_edge_cases(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        \n+        # Situation when current year is 2023\n+        utcnow_1 = datetime(2023, 11, 6, 8, 49, 37)\n+\n+        # A year 50 years in the future from the mocked current year (2023)\n+        self._test_rfc850_case(mocked_datetime, utcnow_1, 'Tuesday, 31-Dec-73 08:49:37 GMT', datetime(1973, 12, 31, 8, 49, 37))\n+        \n+        # Another boundary test beyond 50 years from current mocked date\n+        self._test_rfc850_case(mocked_datetime, utcnow_1, 'Tuesday, 31-Dec-74 08:49:37 GMT', datetime(2074, 12, 31, 8, 49, 37))\n+\n+    def _test_rfc850_case(self, mocked_datetime, utcnow, rfc850str, expected_date):\n+        with self.subTest(rfc850str=rfc850str):\n+            mocked_datetime.utcnow.return_value = utcnow\n+            parsed = parse_http_date(rfc850str)\n+            self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..f968de7 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,10 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.db import models\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n@@ -63,7 +67,15 @@ class ChoicesTests(SimpleTestCase):\n         self.assertEqual(Vehicle.TRUCK.label, 'Truck')\n         self.assertEqual(Vehicle.JET_SKI.label, 'Jet Ski')\n \n-    def test_integerchoices_empty_label(self):\n+    def test_enum_member_str_conversion(self):\n+        \"\"\"\n+        Test to ensure that the __str__ method returns the correct value\n+        for both TextChoices and IntegerChoices.\n+        \"\"\"\n+        for test_enum in [Gender, YearInSchool]:\n+            for member in test_enum:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(member), member.value)\n         self.assertEqual(Vehicle.choices[0], (None, '(Unknown)'))\n         self.assertEqual(Vehicle.labels[0], '(Unknown)')\n         self.assertEqual(Vehicle.values[0], None)\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..e132c69 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,8 +148,21 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.test import SimpleTestCase\n+from django.db import models\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 7b8648d..189728d 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -68,7 +68,29 @@ class SimplifiedURLTests(SimpleTestCase):\n                     r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n                 )\n \n-    def test_path_lookup_with_inclusion(self):\n+    def test_optional_format_url_with_none(self):\n+        match = resolve('/module/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {})\n+        self.assertEqual(match.args, ())\n+\n+    def test_optional_format_url_with_html(self):\n+        match = resolve('/module/html/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'html'})\n+        self.assertEqual(match.args, ())\n+\n+    def test_optional_format_url_with_json(self):\n+        match = resolve('/module/json/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'json'})\n+        self.assertEqual(match.args, ())\n+\n+    def test_optional_format_url_with_xml(self):\n+        match = resolve('/module/xml/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'xml'})\n+        self.assertEqual(match.args, ())\n         match = resolve('/included_urls/extra/something/')\n         self.assertEqual(match.url_name, 'inner-extra')\n         self.assertEqual(match.route, 'included_urls/extra/<extra>/')\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..48dd44a 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,6 @@\n+\n+import django\n+\n import pickle\n \n from django import forms\n@@ -148,7 +151,49 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+class InheritedChoicesDisplayTests(TestCase):\n+    def test_inherited_field_display(self):\n+        class BaseModel(models.Model):\n+            foo = models.CharField(\n+                max_length=254, choices=[('A', 'Base A'), ('B', 'Base B')]\n+            )\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(BaseModel):\n+            foo = models.CharField(\n+                max_length=254, choices=[('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')]\n+            )\n+\n+        # Test original choices from base class\n+        obj_a = ChildModel(foo='A')\n+        self.assertEqual(obj_a.get_foo_display(), 'Child A')\n+\n+        obj_b = ChildModel(foo='B')\n+        self.assertEqual(obj_b.get_foo_display(), 'Child B')\n+\n+        # Test new choice added in child class\n+        obj_c = ChildModel(foo='C')\n+        self.assertEqual(obj_c.get_foo_display(), 'Child C')\n+\n+    def test_missing_choice_inherited_field_display(self):\n+        # Testing a value not found in the choices to check fallback behavior\n+        class BaseModel(models.Model):\n+            foo = models.CharField(\n+                max_length=254, choices=[('A', 'Base A')]\n+            )\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(BaseModel):\n+            foo = models.CharField(\n+                max_length=254, choices=[('A', 'Child A'), ('B', 'Child B')]\n+            )\n+\n+        obj_invalid = ChildModel(foo='Z')\n+        self.assertEqual(obj_invalid.get_foo_display(), 'Z')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..db401fa 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,7 +76,41 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_valid_variant_with_base_language(self):\n+        # Test that sublanguages are resolved to their base language\n+        valid_variants = ['de-at', 'es-419', 'fr-CA', 'ca-ES-valencia']\n+        for tag in valid_variants:\n+            with self.subTest(tag=tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('en', 'English'),\n+            ('fr', 'French'),\n+        ],\n+    )\n+    def test_invalid_variant_without_base_language(self):\n+        # Test that an error occurs if a variant is used without the base language available\n+        invalid_variants = ['fr-CA', 'fr-419', 'de-at']\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        for tag in invalid_variants:\n+            with self.subTest(tag=tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [\n+                    Error(msg, id='translation.E004'),\n+                ])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..b6b7ccf 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -187,7 +187,26 @@ class UtilsTests(SimpleTestCase):\n         self.assertEqual(display_value, '12345')\n \n     @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n-    def test_number_formats_with_thousand_separator_display_for_field(self):\n+    def test_json_display_for_field(self):\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            # Test with valid JSON that should be serialized correctly\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),\n+            # Test with nested JSON object\n+            ({\"outer\": {\"inner\": \"value\"}}, '{\"outer\": {\"inner\": \"value\"}}'),\n+            # Test with list of dictionaries\n+            ([{\"key1\": \"value1\"}, {\"key2\": \"value2\"}], '[{\"key1\": \"value1\"}, {\"key2\": \"value2\"}]'),\n+            # Invalid JSON but as a string representation\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # This should still be invalid JSON and thus the expectation here is a string of the dict\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12,345.6789')\n \n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..618543a 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,94 @@\n+\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_foreign_key_ordering(self):\n+        # Test deserialization order dependency with foreign keys.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_no_foreign_key(self):\n+        # Test deserialization when no foreign key references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(id=2)\n+        self.assertIsNone(obj.obj_ref)\n+\n+    def test_multiple_objects(self):\n+        # Test deserialization of multiple objects with correct references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 2, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": null}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 3,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj1 = Object.objects.get(pk=1)\n+        obj_ref2 = ObjectReference.objects.get(pk=2)\n+        obj_ref3 = ObjectReference.objects.get(pk=3)\n+        self.assertEqual(obj1.obj_ref, obj_ref2)\n+        self.assertEqual(obj_ref3.obj, obj1)\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +97,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..986fd91 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -128,6 +128,33 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_incorrect_hint_for_m2m_intermediary_model(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            first_entity = models.ForeignKey(Person, models.CASCADE, related_name='first')\n+            second_entity = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+            third_entity = models.ForeignKey(Group, models.CASCADE, related_name='third')\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by 'invalid_models_tests.Group.field', \"\n+                \"but it has more than one foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_ambiguous_relationship_model(self):\n \n         class Person(models.Model):\n@@ -159,6 +186,33 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_incorrect_hint_for_m2m_intermediary_model(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            first_entity = models.ForeignKey(Person, models.CASCADE, related_name='first')\n+            second_entity = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+            third_entity = models.ForeignKey(Group, models.CASCADE, related_name='third')\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by 'invalid_models_tests.Group.field', \"\n+                \"but it has more than one foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..f75db75 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,7 +1249,91 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n-    def test_request_meta_filtering(self):\n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_recursive_dict_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            \"foo\": \"value\",\n+            \"secret\": \"value\",\n+            \"token\": \"value\",\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": \"value\"},\n+                {\"token\": \"value\"},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            \"foo\": \"value\",\n+            \"secret\": reporter_filter.cleansed_substitute,\n+            \"token\": reporter_filter.cleansed_substitute,\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": reporter_filter.cleansed_substitute},\n+                {\"token\": reporter_filter.cleansed_substitute},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..9d5bc30 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -529,8 +529,27 @@ class DeletionTests(TestCase):\n         deleted, deleted_objs = R.objects.all().delete()\n         for k, v in existed_objs.items():\n             self.assertEqual(deleted_objs[k], v)\n+    def test_queryset_delete_no_objects_to_delete(self):\n+        \"\"\"\n+        QuerySet.delete() should return a consistent result when no objects are deleted.\n+        Test both scenarios: with and without foreign keys.\n+        \"\"\"\n+        # Test with a model that has foreign key dependencies\n+        existed_objs_with_fk = {\n+            'my_app.FileAccess': 0,  # Assuming these are models related via FK\n+            'my_app.File': 0\n+        }\n+        deleted_with_fk, deleted_objs_with_fk = MyForeignKeyModel.objects.filter(id=999).delete()  # Assuming this filter matches no objects\n+        self.assertEqual(deleted_with_fk, 0)\n+        self.assertEqual(deleted_objs_with_fk, existed_objs_with_fk)\n \n-    def test_model_delete_returns_num_rows(self):\n+        # Test with a \"simple\" model without foreign keys\n+        existed_objs_without_fk = {\n+            'my_app.BlockLibrary': 0  # Assuming this model doesn't use FK\n+        }\n+        deleted_without_fk, deleted_objs_without_fk = MySimpleModel.objects.filter(id=999).delete()  # Assuming this filter matches no objects\n+        self.assertEqual(deleted_without_fk, 0)\n+        self.assertEqual(deleted_objs_without_fk, existed_objs_without_fk)\n         \"\"\"\n         Model.delete() should return the number of deleted rows and a\n         dictionary with the number of deletions for each object type.\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..7e0b632 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,47 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_response_existing_file(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/existing-file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+\n+        existing_file_path = TEST_STATIC_ROOT / 'existing-file.txt'\n+        with open(existing_file_path, 'rb') as file:\n+            file_content = file.read()\n+        \n+        stat = existing_file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(file_content)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"existing-file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], file_content)\n+\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_static_file_response_non_existent_file(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/non-existent-file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..0e39a64 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,14 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Test cases verifying issue fix: Stripping leading/trailing underscores and dashes\n+            (\"___This is a test ---\", \"this-is-a-test\", False),\n+            (\"--Hello--World--\", \"hello-world\", False),\n+            (\"__leading-underscore\", \"leading-underscore\", False),\n+            (\"trailing-underscore__\", \"trailing-underscore\", False),\n+            (\"__multiple___underscores_and---dashes___\", \"multiple-underscores-and-dashes\", False),\n+            (\"---\", \"\", False),  # Only dashes should result in an empty string\n+            (\"___\", \"\", False),  # Only underscores should result in an empty string\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..f6854ea 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -237,6 +238,30 @@ class QuerySetSetOperationTests(TestCase):\n         with self.assertRaisesMessage(DatabaseError, msg):\n             list(qs1.order_by('id').union(qs2))\n \n+    def test_union_none(self):\n+        # Test that calling none() on a union of two non-overlapping querysets returns an empty result.\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertSequenceEqual(qs3.none(), [])\n+        # Also assert the original queryset works as expected\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n+    def test_union_none_with_non_empty_result(self):\n+        # Test applying none() to a union query that would otherwise return results.\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=5)\n+        with self.assertNumQueries(1):\n+            self.assertSequenceEqual(qs1.union(qs2).none(), [])\n+\n+    def test_union_none_with_empty_qs(self):\n+        # Test a union with one part already being none().\n+        qs1 = Number.objects.none()\n+        qs2 = Number.objects.filter(num__gte=2)\n+        qs3 = qs1.union(qs2)\n+        self.assertSequenceEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [2, 3, 4, 5, 6, 7, 8, 9], ordered=False)\n+\n     @skipIfDBFeature('supports_select_intersection')\n     def test_unsupported_intersection_raises_db_error(self):\n         qs1 = Number.objects.all()\n@@ -313,4 +338,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..91691f8 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2829,6 +2829,74 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Setup characters\n+        marley = Character.objects.create(username='Marley', last_action=timezone.now())\n+        threepwood = Character.objects.create(username='Threepwood', last_action=timezone.now())\n+\n+        # Setup jokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        # The form and its fields\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n+\n+\n+from django.test import TestCase\n+from django import forms\n+from .models import Character, StumpJoke\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n",
  "django__django-13321": "",
  "django__django-13401": "",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..8b1d7e3 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n+from .models import IntegerUsernameUser\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,6 +40,27 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..938a454 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,6 +19,8 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n@@ -29,7 +31,7 @@ from django.core.management.commands.testserver import (\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n-    LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n+    LiveServerTestCase, SimpleTestCase, TestCase, override_settings, captured_stdout, captured_stderr\n )\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n@@ -1866,6 +1868,19 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('verbosity', 1)]\" % option_b\n         )\n \n+class ExecuteFromCommandLineTestCase(SimpleTestCase):\n+    def test_prog_name_is_correctly_set(self):\n+        \"\"\"\n+        Ensure that the CommandParser uses the provided program name\n+        from argv instead of defaulting to sys.argv[0].\n+        \"\"\"\n+        cli_args = ['my-custom-admin', 'migrate']\n+        with mock.patch('sys.argv', [None]):\n+            with captured_stdout() as out, captured_stderr() as err:\n+                execute_from_command_line(cli_args)\n+        self.assertIn('usage: my-custom-admin migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n \n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..baff110 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -7,8 +8,50 @@ from django.core.management import CommandError, call_command\n from django.test import SimpleTestCase\n from django.test.utils import captured_stdin, captured_stdout\n \n+import select\n \n class ShellCommandTestCase(SimpleTestCase):\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32', \n+        \"Windows select() doesn't support file descriptors.\"\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32', \n+        \"Windows select() doesn't support file descriptors.\"\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n \n     def test_command_option(self):\n         with self.assertLogs('test', 'INFO') as cm:\n@@ -49,4 +92,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..a339573 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -962,6 +962,12 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n         response = self.client.get(self.change_url)\n         self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n \n+from django.urls import reverse\n+from django.test import RequestFactory, TestCase, override_settings\n+from django.contrib.admin.sites import site as admin_site\n+from django.contrib.admin.options import ModelAdmin, TabularInline\n+from .models import Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile, ProfileCollection\n+from django.contrib.auth.models import User\n \n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n@@ -1013,6 +1019,35 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n+    def test_verbose_name_default_plural_inline(self):\n+        \"\"\"Test that verbose_name_plural defaults to verbose_name when verbose_name_plural is not set.\"\"\"\n+        class DefaultPluralInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Singular name'\n+\n+        class DefaultPluralWithOverrideInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Singular override'\n+            verbose_name_plural = 'Plural override'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [DefaultPluralInline, DefaultPluralWithOverrideInline]\n+        \n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        \n+        # Check default pluralization\n+        self.assertContains(response, '<h2>Singular names</h2>')\n+        self.assertContains(response, 'Add another Singular name')\n+\n+        # Check explicit verbose_name_plural override\n+        self.assertContains(response, '<h2>Plural override</h2>')\n+        self.assertContains(response, 'Add another Singular override')\n+\n+\n     def test_both_verbose_names_inline(self):\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..f18d58e 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -582,14 +582,37 @@ class TestQuerying(TestCase):\n \n     def test_isnull_key(self):\n         # key__isnull=False works the same as has_key='key'.\n+        # Test cases for KeyTransform with __isnull=True on JSONField 'j'.\n+\n+        # Verify that filtering for isnull=True only returns objects without the key 'j'.\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n             self.objs[:3] + self.objs[5:],\n         )\n+        # Test cases for KeyTransform with __isnull=True on JSONField 'j'.\n+\n+        # Verify that filtering for isnull=True only returns objects without the key 'j'.\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=False),\n+            # Additional test to ensure that JSON null values are not matched by __j__isnull=True.\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+            \"Ensure that JSON null does not match __j__isnull=True.\"\n+        )\n+        # Additional test to ensure correct behavior of JSON null in SQLite and Oracle.\n+        json_null_obj = NullableJSONModel.objects.create(value={'j': None})\n+        # Test cases for KeyTransform with __isnull=True on JSONField 'j'.\n+\n+        # Verify that filtering for isnull=True only returns objects without the key 'j'.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # json_null_obj should not be included\n+            \"Ensure JSON null objects are not matched by __j__isnull=True.\"\n             [self.objs[3], self.objs[4]],\n         )\n+        # Test cases for KeyTransform with __isnull=True on JSONField 'j'.\n+\n+        # Verify that filtering for isnull=True only returns objects without the key 'j'.\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n",
  "django__django-13768": "",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..1e28b6f 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -409,9 +409,31 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n     @isolate_apps('check_framework.apps.CheckPKConfig', kwarg_name='apps')\n-    def test_app_default_auto_field(self, apps):\n+    def test_explicit_inherited_explicit_pk_on_parent(self):\n+        class Parent(models.Model):\n+            id = models.BigAutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(\n+            checks.run_checks(app_configs=self.apps.get_app_configs()), []\n+        )\n+\n+    def test_inheritance_with_explicit_o2o_field(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(\n+            checks.run_checks(app_configs=self.apps.get_app_configs()), []\n+        )\n+\n+    def test_auto_created_pk(self):\n         class ModelWithPkViaAppConfig(models.Model):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..59204a9 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,6 +282,11 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+from .asserts import AssertFormErrorsMixin\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n@@ -307,4 +312,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..9a2c04c 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,6 +550,30 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_with_empty_pk(self):\n+        # Create an unsaved parent instance and set it on the child\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        # Change the parent's primary key after assignment\n+        parent.name = \"dynamic-key\"\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        # The child's parent should reflect the correct instance\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_with_initial_pk(self):\n+        # Create a parent instance with an initial primary key and set it on the child\n+        parent = ParentStringPrimaryKey(name=\"initial-key\")\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        # The child's parent should reflect the correct instance\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n     def test_fk_to_bigautofield(self):\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..943e800 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -8,6 +9,13 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n \n+    def test_dict_keys_with_or_operator(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n     def test_combine_and_both_empty(self):\n         self.assertEqual(Q() & Q(), Q())\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..02db903 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,12 +28,14 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n+from django.db.models import Exists, OuterRef, Q\n from django.utils.functional import SimpleLazyObject\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n     RemoteEmployee, Result, SimulationRun, Time,\n )\n+from django.db.models import Exists, OuterRef, Q\n \n \n class BasicExpressionsTests(TestCase):\n@@ -43,6 +45,30 @@ class BasicExpressionsTests(TestCase):\n             name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n             ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=10)\n         )\n+\n+    def test_q_and_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        # New test case for Q(...) & Exists(...)\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() & Exists(is_ceo)),\n+            []\n+        )\n+\n+        # Another permutation with additional filters\n+        ceo_and_poc = Q(firstname=\"Frank\") & Exists(is_ceo)\n+        poc_or_ceo = Q(lastname=\"Smith\") | Exists(is_ceo)\n+\n+        # Ensure no TypeError is raised and correct behavior is observed\n+        self.assertCountEqual(\n+            Employee.objects.filter(ceo_and_poc),\n+            [self.foobar_ltd.ceo]\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(poc_or_ceo),\n+            [self.example_inc.ceo, self.foobar_ltd.ceo]\n+        )\n         cls.foobar_ltd = Company.objects.create(\n             name=\"Foobar Ltd.\", num_employees=3, num_chairs=4, based_in_eu=True,\n             ceo=Employee.objects.create(firstname=\"Frank\", lastname=\"Meyer\", salary=20)\n@@ -792,6 +818,30 @@ class BasicExpressionsTests(TestCase):\n                 output_field=BooleanField(),\n             ),\n         )\n+\n+    def test_q_and_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        # New test case for Q(...) & Exists(...)\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() & Exists(is_ceo)),\n+            []\n+        )\n+\n+        # Another permutation with additional filters\n+        ceo_and_poc = Q(firstname=\"Frank\") & Exists(is_ceo)\n+        poc_or_ceo = Q(lastname=\"Smith\") | Exists(is_ceo)\n+\n+        # Ensure no TypeError is raised and correct behavior is observed\n+        self.assertCountEqual(\n+            Employee.objects.filter(ceo_and_poc),\n+            [self.foobar_ltd.ceo]\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(poc_or_ceo),\n+            [self.example_inc.ceo, self.foobar_ltd.ceo]\n+        )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n     def test_boolean_expression_combined(self):\n@@ -803,6 +853,30 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_ceo) | Exists(is_poc)),\n             [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n         )\n+\n+    def test_q_and_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        # New test case for Q(...) & Exists(...)\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() & Exists(is_ceo)),\n+            []\n+        )\n+\n+        # Another permutation with additional filters\n+        ceo_and_poc = Q(firstname=\"Frank\") & Exists(is_ceo)\n+        poc_or_ceo = Q(lastname=\"Smith\") | Exists(is_ceo)\n+\n+        # Ensure no TypeError is raised and correct behavior is observed\n+        self.assertCountEqual(\n+            Employee.objects.filter(ceo_and_poc),\n+            [self.foobar_ltd.ceo]\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(poc_or_ceo),\n+            [self.example_inc.ceo, self.foobar_ltd.ceo]\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_ceo) & Exists(is_poc)),\n             [self.max],\n",
  "django__django-14155": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..663ca93 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -74,7 +75,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.apps.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.apps.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n         class Model(models.Model):\n@@ -91,7 +112,27 @@ class TestDefaultPK(SimpleTestCase):\n         m2m_pk = M2MModel._meta.get_field('m2m').remote_field.through._meta.pk\n         self.assertIsInstance(m2m_pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.apps.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.apps.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_m2m_app_default_auto_field(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..21fb383 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2206,7 +2206,26 @@ class StartApp(AdminScriptTestCase):\n             \"another directory.\"\n         )\n \n-    def test_overlaying_app(self):\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_trailing_slash_in_target_app_directory_name_when_directory_not_exist(self):\n+        # Directory should be created without errors when it doesn't pre-exist\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2')\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app2', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+        \n+    def test_no_trailing_slash_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app3')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app3')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n         # Use a subdirectory so it is outside the PYTHONPATH.\n         os.makedirs(os.path.join(self.test_dir, 'apps/app1'))\n         self.run_django_admin(['startapp', 'app1', 'apps/app1'])\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..90e0286 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,23 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_label_for_read_only_password_hash_widget(self):\n+        from django.forms import Form\n+        from django.forms.fields import ReadOnlyPasswordHashField\n+\n+        class TestForm(Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+\n+        # Check that id_for_label returns None\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        \n+        # Check that the label tag does not include a for attribute\n+        label_html = bound_field.label_tag()\n+        self.assertEqual(label_html, '<label>Hash field:</label>')\n+        self.assertNotIn('for=\"', label_html)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..0937d2a 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>',\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +361,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>',\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +988,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>',\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..882e078 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -9,6 +9,8 @@ from .models import (\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n     Relationship, SymmetricalFriendship,\n )\n+from django.test import TestCase\n+from .models import Event, Invitation, PersonChild, Person\n \n \n class M2mThroughTests(TestCase):\n@@ -20,7 +22,12 @@ class M2mThroughTests(TestCase):\n         cls.rock = Group.objects.create(name='Rock')\n         cls.roll = Group.objects.create(name='Roll')\n \n-    def test_retrieve_intermediate_items(self):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n         Membership.objects.create(person=self.jim, group=self.rock)\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..409145a 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -293,6 +293,30 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+    def test_serialize_result_with_extra_field(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                # Adding an extra 'notes' field to the output\n+                return {**super().serialize_result(obj, to_field_name), 'notes': getattr(obj, 'notes', '')}\n+\n+        # Create sample data with an extra 'notes' field\n+        Question.objects.create(question='Question 1', notes='Note 1')\n+        Question.objects.create(question='Question 2', notes='Note 2')\n+\n+        request = self.factory.get(self.url, {'term': 'Question', **self.opts})\n+        request.user = self.superuser\n+        \n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        \n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'notes': q.notes} for q in Question.objects.order_by('pk')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..e44e50c 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5094,6 +5094,71 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n \n     def test_readonly_foreignkey_links(self):\n+        \"\"\"\n+        Test to ensure the generated URL for foreign key readonly fields \n+        on custom admin sites uses the correct admin site path.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test Language')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+\n+        response = self.client.get(\n+            reverse('namespaced_admin:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        self.assertContains(response, '/namespaced-admin/admin_views/language/')\n+        self.assertContains(response, '/namespaced-admin/auth/user/')\n+        \n+    def test_readonly_foreignkey_links_custom_admin_site_language_url(self):\n+        \"\"\"\n+        Verify the URL for the Language link in a custom admin site \n+        readonly foreign key field.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Another Chapter',\n+            content='Another content',\n+            book=Book.objects.create(name='Book 2'),\n+        )\n+        language = Language.objects.create(iso='_50', name='Another Test Language')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+\n+        response = self.client.get(\n+            reverse('namespaced_admin:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        self.assertContains(response, reverse('namespaced_admin:admin_views_language_change', args=(language.pk,)))\n+\n+    def test_readonly_foreignkey_links_custom_admin_site_user_url(self):\n+        \"\"\"\n+        Verify the URL for the User link in a custom admin site \n+        readonly foreign key field.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Third Chapter',\n+            content='Third content',\n+            book=Book.objects.create(name='Book 3'),\n+        )\n+        language = Language.objects.create(iso='_60', name='Third Test Language')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+\n+        response = self.client.get(\n+            reverse('namespaced_admin:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        self.assertContains(response, reverse('namespaced_admin:auth_user_change', args=(self.superuser.pk,)))\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n         registered in admin.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..80aa8ac 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,7 +793,48 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n-    def test_rename_m2m_target_model(self):\n+    def test_rename_model_with_db_table_noop(self):\n+        \"\"\"Test that RenameModel with db_table is a noop.\"\"\"\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_no_db_table(self):\n+        \"\"\"Test that RenameModel without db_table performs rename.\"\"\"\n+        app_label = 'test_rrmodel'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Player', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Player', 'Gamer')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            # Expect some queries because actual renaming should occur.\n+            with self.assertNumQueriesGreaterThan(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueriesGreaterThan(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15061": "",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..99fae1c 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -115,6 +115,19 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.clean('')\n \n+    def test_urlfield_clean_value_error_issue(self):\n+        f = URLField()\n+        # This test case corresponds to the issue where ValueError was raised instead of ValidationError\n+        tests = [\n+            '////]@N.AN',\n+            '#@A.bO',\n+        ]\n+        msg = \"'Enter a valid URL.'\"\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(value)\n+\n     def test_urlfield_clean_not_required(self):\n         f = URLField(required=False)\n         self.assertEqual(f.clean(None), '')\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..55b6063 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -681,6 +681,41 @@ class NonAggregateAnnotationTestCase(TestCase):\n         with self.assertRaisesMessage(TypeError, msg % ', '.join([str(BooleanField()), 'True'])):\n             Book.objects.annotate(BooleanField(), Value(False), is_book=True)\n \n+    def test_expression_wrapper_not_q_empty_list(self):\n+        \"\"\"\n+        Test the behavior of ExpressionWrapper with a negated Q object having\n+        an empty list.\n+        \"\"\"\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_expression_wrapper_not_q_combination(self):\n+        \"\"\"\n+        Test the behavior of ExpressionWrapper with a more complex Q condition.\n+        \"\"\"\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]) & Q(price__gte=25), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books if book.price >= 25))\n+        self.assertTrue(all(not book.selected for book in books if book.price < 25))\n+\n+    def test_expression_wrapper_not_q_with_values_query(self):\n+        \"\"\"\n+        Test the negation of Q and see the effect when it is used with values().\n+        \"\"\"\n+        values_qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        ).values('pk', 'selected')\n+        \n+        self.assertEqual(len(values_qs), Book.objects.count())\n+        for entry in values_qs:\n+            self.assertTrue(entry['selected'])\n+\n     def test_chaining_annotation_filter_with_m2m(self):\n         qs = Author.objects.filter(\n             name='Adrian Holovaty',\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..cf73d49 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -10,6 +11,7 @@ from django.contrib.messages.storage.cookie import (\n from django.test import SimpleTestCase, override_settings\n from django.utils.crypto import get_random_string\n from django.utils.safestring import SafeData, mark_safe\n+from django.utils.safestring import SafeData, mark_safe\n \n from .base import BaseTests\n \n@@ -163,7 +165,36 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_empty_extra_tags(self):\n+        \"\"\"\n+        Test that a message with empty extra_tags remains intact after encoding and decoding.\n+        \"\"\"\n+        storage = self.get_storage()\n+        message = Message(constants.DEBUG, \"Test message\", extra_tags=\"\")\n+        encoded_message = storage._encode(message)\n+        decoded_message = storage._decode(encoded_message)\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n+\n+    def test_none_extra_tags(self):\n+        \"\"\"\n+        Test that a message with None extra_tags remains intact after encoding and decoding.\n+        \"\"\"\n+        storage = self.get_storage()\n+        message = Message(constants.DEBUG, \"Test message\", extra_tags=None)\n+        encoded_message = storage._encode(message)\n+        decoded_message = storage._decode(encoded_message)\n+        self.assertIsNone(decoded_message.extra_tags)\n+\n+    def test_non_empty_extra_tags(self):\n+        \"\"\"\n+        Test that a message with non-empty extra_tags remains intact after encoding and decoding.\n+        \"\"\"\n+        storage = self.get_storage()\n+        extra_tags = \"some tags\"\n+        message = Message(constants.DEBUG, \"Test message\", extra_tags=extra_tags)\n+        encoded_message = storage._encode(message)\n+        decoded_message = storage._decode(encoded_message)\n+        self.assertEqual(decoded_message.extra_tags, extra_tags)\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..d24a95d 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -74,7 +74,22 @@ class TemplateReloadTests(SimpleTestCase):\n             'BACKEND': 'django.template.backends.django.DjangoTemplates',\n         }]\n     )\n-    def test_template_dirs_normalized_to_paths(self):\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [ROOT],  # Simulating BASE_DIR added to DIRS\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_non_template_file_change_with_base_dir_in_template_dirs(self, mock_reset):\n+        \"\"\"\n+        Test that a change in a non-template file does not trigger a template reload\n+        when BASE_DIR is added to the TEMPLATES[0]['DIRS'].\n+        \"\"\"\n+        # Simulate a change to a Python file, which should not cause template reload.\n+        self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n+        # Assert reset_loaders is not called when a non-template file is modified.\n+        mock_reset.assert_not_called()\n         self.assertSetEqual(\n             autoreload.get_template_directories(),\n             {\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..99a53cf 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,44 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty string for the 'If-Modified-Since' header is handled correctly.\n+        Previously, it raised an exception; it should now handle it gracefully.\n+        \"\"\"\n+        self.assertFalse(was_modified_since(\"\", mtime=1))\n+\n+    def test_was_modified_since_none(self):\n+        \"\"\"\n+        Test that None for the 'If-Modified-Since' header returns True,\n+        meaning the resource was modified.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(None, mtime=1))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Test that an invalid date string for 'If-Modified-Since' header does not raise an exception.\n+        It should handle it gracefully and return True (consider the resource modified).\n+        \"\"\"\n+        self.assertTrue(was_modified_since(\"invalid-date\", mtime=1))\n+\n+    def test_was_modified_since_valid_date_in_past(self):\n+        \"\"\"\n+        Test that a valid date string from the past for 'If-Modified-Since' header\n+        returns False, meaning the resource was not modified since that date.\n+        \"\"\"\n+        mtime = 1343416141  # Example timestamp\n+        header = http_date(mtime - 86400)  # 1 day before\n+        self.assertFalse(was_modified_since(header, mtime))\n+\n+    def test_was_modified_since_valid_date_in_future(self):\n+        \"\"\"\n+        Test that a valid future date string for 'If-Modified-Since' header\n+        returns True, meaning the resource was modified since that date.\n+        \"\"\"\n+        mtime = 1343416141  # Example timestamp\n+        header = http_date(mtime + 86400)  # 1 day after\n+        self.assertTrue(was_modified_since(header, mtime))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..a566a52 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -8,6 +9,7 @@ from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n+from django.core.management import CommandParser\n from django.core.management.utils import (\n     find_command,\n     get_random_secret_key,\n@@ -411,7 +413,30 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_command_help_formatter(self):\n+        \"\"\"\n+        Test that the help output of a command formats multi-line help text correctly.\n+        \"\"\"\n+        help_text = '''Import a contract from tzkt.\n+        Example usage:\n+            ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+        '''\n+        \n+        class TestCommand(BaseCommand):\n+            help = help_text\n+        \n+        command = TestCommand()\n+        parser = command.create_parser(\"manage.py\", \"tzkt_import\")\n+        \n+        with StringIO() as output:\n+            parser.print_help(output)\n+            help_output = output.getvalue()\n+        \n+        expected_output_snippet = \"\"\"Import a contract from tzkt.\n+        Example usage:\n+            ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\"\"\n+        \n+        self.assertIn(expected_output_snippet, help_output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..b14125f 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,11 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n+from django.core.serializers.json import SerializerDoesNotExist\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -211,7 +214,24 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n+    def test_json_script_default_encoder(self):\n+        data = {\"key\": datetime(2020, 1, 1, 12, 0)}\n+        expected_output = (\n+            '<script type=\"application/json\">{\"key\": \"2020-01-01T12:00:00\"}</script>'\n+        )\n+        self.assertHTMLEqual(json_script(data), expected_output)\n+\n+    def test_json_script_with_none(self):\n+        expected_output = '<script type=\"application/json\">null</script>'\n+        self.assertHTMLEqual(json_script(None), expected_output)\n+\n+    def test_json_script_with_empty_dict(self):\n+        expected_output = '<script type=\"application/json\">{}</script>'\n+        self.assertHTMLEqual(json_script({}), expected_output)\n+\n+    def test_json_script_with_invalid_encoder(self):\n+        with self.assertRaises(TypeError):\n+            json_script({\"key\": \"value\"}, encoder=object)\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n",
  "django__django-15790": "",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..b09e188 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,7 +395,29 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n-    def test_eq(self):\n+    def test_select_related_only_proxy(self):\n+        # Create instances for testing\n+        custom_model_instance = CustomModel.objects.create(name=\"Test Name\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom_model_instance)\n+\n+        # Perform a select_related() followed by only() on the proxy model\n+        # Expect no ValueError to be raised\n+        try:\n+            qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+            result = qs.get()\n+            self.assertEqual(result, another_model_instance)\n+        except ValueError as ve:\n+            self.fail(f\"select_related and only caused a ValueError: {ve}\")\n+\n+    def test_select_related_only_direct_model(self):\n+        # This test ensures that using select_related and only directly on the real model works\n+        real_model_instance = CustomModel.objects.create(name=\"Direct Test Name\")\n+        other_instance = AnotherModel.objects.create(custom=real_model_instance)\n+\n+        # We should be able to select_related and only without encountering issues\n+        qs = AnotherModel.objects.select_related('custom').only('custom__name')\n+        result = qs.get()\n+        self.assertEqual(result, other_instance)\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..7ce4f6d 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -3,6 +3,8 @@ import signal\n import subprocess\n import sys\n from pathlib import Path\n+import os\n+import signal\n from unittest import mock, skipUnless\n \n from django.db import connection\n@@ -154,7 +156,30 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n-            ([\"psql\", \"dbname\", \"--help\"], None),\n+            ([\"psql\", \"--help\", \"dbname\"], None),\n+        )\n+\n+    def test_custom_command_before_dbname(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n+    def test_custom_command_with_options(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\n+                    \"NAME\": \"dbname\",\n+                    \"USER\": \"testuser\",\n+                    \"HOST\": \"localhost\",\n+                    \"PORT\": \"5432\",\n+                },\n+                [\"-c\", \"SELECT version();\"],\n+            ),\n+            (\n+                [\"psql\", \"-U\", \"testuser\", \"-h\", \"localhost\", \"-p\", \"5432\", \"-c\", \"SELECT version();\", \"dbname\"],\n+                None\n+            ),\n         )\n \n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n@@ -183,4 +208,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..032a13c 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,7 +1901,33 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.test import SimpleTestCase, override_settings\n+        from django.forms import formset_factory, BaseFormSet\n+        from myapp.forms import Choice\n+        from django.core.cache import cache\n+        from django.test import TestCase\n+        from django.utils.deprecation import RemovedInDjango50Warning\n+        from django.forms.renderers import get_default_renderer\n+        from django.test.utils import isolate_lru_cache\n+\n+    def test_no_management_form_warning(self):\n+        \"\"\"\n+        Test to ensure no deprecation warning is raised for management forms.\n+        \"\"\"\n+        with isolate_lru_cache(get_default_renderer), self.settings(\n+            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+        ):\n+            ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+            formset = ChoiceFormSet()\n+            with self.assertRaises(AssertionError, msg=\"Deprecation warning should not be raised for management forms\"):\n+                with self.assertRaisesMessage(RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG):\n+                    # Render the management form, which should not trigger a warning\n+                    str(formset.management_form)\n \n+    def test_deprecation_warning_other_case(self):\n+        \"\"\"\n+        Test that deprecation warning is properly raised in other scenarios.\n+        \"\"\"\n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n         ), self.assertRaisesMessage(\n@@ -1909,4 +1935,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..579839c 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -179,7 +179,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n \n-    def test_formset_validation(self):\n+    def test_formset_empty_permitted_key_error(self):\n+        \"\"\"\n+        Test to ensure no KeyError occurs when 'empty_permitted' is passed in form_kwargs\n+        and empty_form still behaves correctly.\n+        \"\"\"\n+        ModelFormSet = modelformset_factory(MyModel, fields=['a_field'])\n+        formset = ModelFormSet(queryset=MyModel.objects.none(), form_kwargs={\"empty_permitted\": True})\n+        try:\n+            empty_form_html = formset.empty_form.as_table()  # or as_p/as_ul\n+            self.assertIn('a_field', empty_form_html)\n+        except KeyError:\n+            self.fail(\"KeyError was raised when rendering an empty_form with empty_permitted in form_kwargs.\")\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n         formset = self.make_choiceformset([(\"Calexico\", \"\")])\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..a7abf1f 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,23 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_null_input_handling(self):\n+        # Test null/None input\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_empty_string_input_handling(self):\n+        # Test empty string input\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+\n+    def test_negative_number_format(self):\n+        # Test negative numbers\n+        self.assertEqual(nformat(-1234, \".\"), \"-1234\")\n+        self.assertEqual(nformat(-1234.56, \".\"), \"-1234.56\")\n+        self.assertEqual(nformat(-0.56, \".\"), \"-0.56\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..6ae9666 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,7 @@\n+\n import datetime\n+import urllib.parse\n+from django.urls import reverse\n import re\n from unittest import mock\n \n@@ -881,7 +884,25 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.create(username=\"testuser\", password=\"testpassword\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            kwargs={'object_id': user.pk, '_to_field': 'uuid'},\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..a7fbd26 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,37 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.contrib.sitemaps import Sitemap\n+from django.test import TestCase\n+from django.urls import path\n+from django.utils import timezone\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+class SitemapTestsBase(TestCase):\n+    urls = \"tests.sitemaps_tests.urls.http\"\n+\n+class AdditionalSitemapTests(SitemapTestsBase):\n+    def test_callable_lastmod_no_items_handling(self):\n+        \"\"\" Ensure that Sitemap with callable lastmod and no items does not throw ValueError \"\"\"\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertEqual(response.status_code, 200)\n+        expected_content_index = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '  <sitemap>'\n+            '<loc>http://example.com/callable-lastmod-no-items/sitemap.xml</loc>'\n+            '</sitemap>\\n'\n+            '</sitemapindex>'\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content_index)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..e5dc99d 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,7 +1,11 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n import io\n+import unittest\n+from unittest import mock\n+from django.core.cache import cache\n import os\n import pickle\n import re\n@@ -1755,7 +1759,46 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n-    def test_empty_cache_file_considered_expired(self):\n+    def test_has_key_race_handling(self):\n+        # Ensure initial add is successful\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        \n+        # Mock the open function to raise FileNotFoundError\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_has_key_multiple_threads(self):\n+        # Create a key and let it expire\n+        cache.add(\"racy_key\", \"expiring_value\", timeout=1)\n+        \n+        # Introduce a small delay to ensure the key is expired\n+        import time\n+        time.sleep(1.1)\n+\n+        # Mock the open function to raise FileNotFoundError to simulate simultaneous expiry\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            def check_key():\n+                self.assertIs(cache.has_key(\"racy_key\"), False)\n+            \n+            threads = [threading.Thread(target=check_key) for _ in range(10)]\n+            \n+            for thread in threads:\n+                thread.start()\n+            \n+            for thread in threads:\n+                thread.join()\n+\n+            self.assertEqual(mocked_open.call_count, 10)\n+\n+    def test_has_key_deleted_file_after_exists_check(self):\n+        # Scenario where the file is deleted after checking exists\n+        cache.add(\"transient_key\", \"transient_value\")\n+        \n+        with mock.patch(\"os.path.exists\", return_value=True), \\\n+             mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"transient_key\"), False)\n+            mocked_open.assert_called_once()\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n             fh.write(b\"\")\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..14e13f6 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -7,6 +8,8 @@ from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..0dacef3 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,33 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def test_alter_alter_field(self):\n+        \"\"\"AlterField should collapse into the last AlterField in sequence.\"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=256, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+            [\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+        )\n+\n+    def test_multiple_alterfields_with_addfield(self):\n+        \"\"\"AddField and subsequent AlterFields should reduce to the last AlterField if there is one.\"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddField(\"Book\", \"title\", models.CharField(max_length=256, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+            [\n+                migrations.AddField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..4b73282 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -60,7 +61,24 @@ class FunctionTests(SimpleTestCase):\n     def test_list(self):\n         self.assertEqual(join([0, 1, 2], \"glue\"), \"0glue1glue2\")\n \n-    def test_autoescape(self):\n+    @setup({\n+        \"join_autoescape_off\": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'\n+    })\n+    def test_join_autoescape_off(self):\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off\", {\"some_list\": some_list, \"some_var\": some_var})\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n+\n+    @setup({\n+        \"join_autoescape_on\": '{{ some_list|join:some_var }}'\n+    })\n+    def test_join_autoescape_on(self):\n+        from django.template.defaultfilters import escape\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_on\", {\"some_list\": some_list, \"some_var\": some_var})\n+        self.assertEqual(output, escape(some_var.join(some_list)))\n         self.assertEqual(\n             join([\"<a>\", \"<img>\", \"</a>\"], \"<br>\"),\n             \"&lt;a&gt;&lt;br&gt;&lt;img&gt;&lt;br&gt;&lt;/a&gt;\",\n@@ -78,4 +96,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..3fa709a 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -578,6 +578,42 @@ class BulkCreateTests(TestCase):\n         )\n         self.assertEqual(TwoFields.objects.count(), 2)\n \n+        results = FieldsWithDbColumns.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"rank\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=unique_fields,\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"pk\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=unique_fields,\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n         conflicting_objects = [\n             TwoFields(f1=1, f2=1, name=\"c\"),\n             TwoFields(f1=2, f2=2, name=\"d\"),\n@@ -623,6 +659,42 @@ class BulkCreateTests(TestCase):\n \n         obj1 = TwoFields.objects.get(f1=1)\n         obj2 = TwoFields.objects.get(f1=2)\n+        results = FieldsWithDbColumns.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"rank\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=unique_fields,\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"pk\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=unique_fields,\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n         conflicting_objects = [\n             TwoFields(pk=obj1.pk, f1=3, f2=3, name=\"c\"),\n             TwoFields(pk=obj2.pk, f1=4, f2=4, name=\"d\"),\n@@ -658,6 +730,15 @@ class BulkCreateTests(TestCase):\n         Country.objects.bulk_create(self.data)\n         self.assertEqual(Country.objects.count(), 4)\n \n+        results = Country.objects.bulk_create(\n+            new_data,\n+            update_conflicts=True,\n+            update_fields=[\"description\"],\n+            unique_fields=unique_fields,\n+        )\n+        self.assertEqual(len(results), len(new_data))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n         new_data = [\n             # Conflicting countries.\n             Country(\n@@ -738,6 +819,42 @@ class BulkCreateTests(TestCase):\n         )\n         self.assertEqual(UpsertConflict.objects.count(), 3)\n \n+        results = FieldsWithDbColumns.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"rank\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=unique_fields,\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"pk\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=unique_fields,\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n         conflicting_objects = [\n             UpsertConflict(number=1, rank=4, name=\"Steve\"),\n             UpsertConflict(number=2, rank=2, name=\"Olivia\"),\n@@ -799,6 +916,42 @@ class BulkCreateTests(TestCase):\n         )\n         self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n \n+        results = FieldsWithDbColumns.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"rank\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=unique_fields,\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"pk\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=unique_fields,\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n         conflicting_objects = [\n             FieldsWithDbColumns(rank=1, name=\"c\"),\n             FieldsWithDbColumns(rank=2, name=\"d\"),\n@@ -816,4 +969,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..79c8912 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1119,6 +1119,31 @@ def test_range_slider(orientation):\n     slider.reset()\n     assert_allclose(slider.val, [0.1, 0.34])\n \n+def test_range_slider_initial_values():\n+    fig, ax = plt.subplots()\n+    # Test initial values within bounds\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Slider\", valmin=0.0, valmax=1.0, valinit=[0.2, 0.8]\n+    )\n+    assert_allclose(slider.val, (0.2, 0.8))\n+\n+    # Test initial values with one boundary at valmin\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Slider\", valmin=0.0, valmax=1.0, valinit=[0.0, 0.3]\n+    )\n+    assert_allclose(slider.val, (0.0, 0.3))\n+\n+    # Test initial values with one boundary at valmax\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Slider\", valmin=0.0, valmax=1.0, valinit=[0.7, 1.0]\n+    )\n+    assert_allclose(slider.val, (0.7, 1.0))\n+\n+    # Test initial values with out of bounds values clamped\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Slider\", valmin=0.0, valmax=1.0, valinit=[-0.1, 1.1]\n+    )\n+    assert_allclose(slider.val, (0.0, 1.0))\n \n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..2e56c50 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,34 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+def test_get_backend_rc_context_does_not_clear_figs():\n+    # First, make sure that the scenario without any additional operations\n+    # behaves as expected (clears fig2 if the figure is created in rc_context).\n+    with rc_context():\n+        fig2 = plt.figure()\n+    before_clear = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after_clear = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    assert before_clear == after_clear, '\\nUnexpected clearing of figures:\\n' + before_clear + '\\n' + after_clear\n+\n+    # Now, express that ensuring either a prior figure or interactive mode\n+    # prevents the clearing behavior, as outlined in the bug report.\n+    plt.figure()  # Create a prior figure\n+    plt.ion()     # Enable interactive mode\n+    with rc_context():\n+        fig2 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    assert before == after, '\\nFigures should not be cleared:\\n' + before + '\\n' + after\n+\n+    # Clean up\n+    plt.close('all')\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..a484b96 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -20,8 +20,21 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n-\n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_subplot_visibility(fig_test, fig_ref):\n+    # Create a 3d subplot in fig_test and make it invisible. \n+    ax1 = fig_test.add_subplot(1, 2, 1, projection='3d')\n+    ax1.scatter(1, 1, 1)\n+    ax1.set_visible(False)\n+    \n+    ax2 = fig_ref.add_subplot(1, 2, 1, projection='3d')\n+    ax2.scatter(1, 1, 1)\n+    \n+    ax1_ref = fig_ref.add_subplot(1, 2, 2, projection='3d')\n+    ax1_ref.scatter(1, 1, 1)\n+\n+    ax1 = fig_test.add_subplot(1, 2, 2, projection='3d')\n+    ax1.scatter(1, 1, 1)\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..b6cd442 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,56 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+import numpy as np\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='shabnams')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_draggable_modification(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='draggable_mod')\n+    leg = ax.legend(draggable=draggable)\n+    # Test initial state\n+    assert leg.get_draggable() is draggable\n+    # Modify the state\n+    leg.set_draggable(not draggable)\n+    assert leg.get_draggable() is not draggable\n+\n+\n+@pytest.mark.parametrize('drag_params', [(True, 'loc'), (True, 'bbox'), (False, 'loc'), (False, 'bbox')])\n+def test_draggable_with_params(drag_params):\n+    state, update = drag_params\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='draggable_params')\n+    leg = ax.legend(draggable=state)\n+    assert leg.get_draggable() is state\n+    leg.set_draggable(state, update=update)\n+    # Check the draggable state is consistent\n+    assert leg.get_draggable() is state\n+\n+# Ensure imports are correct\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_uniqueness_of_legend_instance_with_draggable_kwarg(draggable):\n+    fig1, ax1 = plt.subplots()\n+    ax1.plot(range(10), label='first')\n+    leg1 = ax1.legend(draggable=draggable)\n+\n+    fig2, ax2 = plt.subplots()\n+    ax2.plot(range(10), label='second')\n+    leg2 = ax2.legend(draggable=not draggable)\n+\n+    # Ensure the draggable state is correctly set per instance\n+    assert leg1.get_draggable() is draggable\n+    assert leg2.get_draggable() is not draggable\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..54eb088 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -650,9 +650,22 @@ def test_compressed1():\n     fig.colorbar(pc, ax=axs)\n     fig.draw_without_rendering()\n \n-    pos = axs[0, 0].get_position()\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@pytest.mark.filterwarnings('error')\n+def test_no_userwarning_with_constrained_layout_false():\n+    a = np.linspace(0, 2*np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    plt.subplots_adjust(wspace=0)\n+    plt.close(fig)\n     np.testing.assert_allclose(pos.x0, 0.06195, atol=1e-3)\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..53aee6c 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,6 +90,7 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..2f19917 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,32 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n \n @mpl.style.context(\"default\")\n+def test_pickle_with_aligned_labels():\n+    # Prepare a figure with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    \n+    fig.align_labels()  # The line causing pickling to fail in the issue\n+\n+    try:\n+        pkl = pickle.dumps(fig)\n+        loaded_fig = pickle.loads(pkl)\n+        loaded_fig.canvas.draw()\n+        print(\"Pickling succeeded with aligned labels.\")\n+    except Exception as e:\n+        print(\"Pickling failed:\", e)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..028238c 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -707,9 +707,27 @@ class TestFacetGrid:\n                     assert mpl.colors.same_color(tick.tick2line.get_color(), color)\n                     assert tick.get_pad() == pad\n \n+import numpy as np\n+import pandas as pd\n+import seaborn as sns\n+import matplotlib.pyplot as plt\n \n class TestPairGrid:\n \n+    def test_pairplot_column_multiindex(self):\n+        # Test case from the issue description: Using a MultiIndex DataFrame\n+        data = {\n+            (\"A\", \"1\"): np.random.rand(100),\n+            (\"A\", \"2\"): np.random.rand(100),\n+            (\"B\", \"1\"): np.random.rand(100),\n+            (\"B\", \"2\"): np.random.rand(100),\n+        }\n+        df = pd.DataFrame(data)\n+        # Trying pairplot on a MultiIndex DataFrame without flattening columns\n+        g = sns.pairplot(df)\n+        # Check if the pairplot diagonal variables match the DataFrame columns\n+        assert g.diag_vars == list(df.columns)\n+\n     rs = np.random.RandomState(sum(map(ord, \"PairGrid\")))\n     df = pd.DataFrame(dict(x=rs.normal(size=60),\n                            y=rs.randint(0, 4, size=(60)),\n",
  "pallets__flask-4992": "",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..787a3d7 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1662,5 +1662,35 @@ def test_vendor_aliases():\n     with pytest.raises(ImportError):\n         from requests.packages import webbrowser\n \n-if __name__ == '__main__':\n-    unittest.main()\n+def test_urllib3_decode_error():\n+    import requests\n+    from requests.adapters import HTTPAdapter\n+    from requests.exceptions import ConnectionError, RequestException\n+    from urllib3.exceptions import DecodeError\n+    \n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter(max_retries=0))  # No retries to fail fast.\n+\n+    # Assume the server is setup to respond with a content-encoding that doesn't match the actual content.\n+    try:\n+        s.get('http://example.com/broken-content-encoding')\n+    except RequestException as e:\n+        assert isinstance(e, ConnectionError)\n+        assert isinstance(e.__cause__, DecodeError)\n+\n+def test_urllib3_timeout_error():\n+    import requests\n+    from requests.adapters import HTTPAdapter\n+    from requests.exceptions import Timeout, RequestException\n+    from urllib3.exceptions import TimeoutError  # Although not exposed at the top level\n+    \n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter(max_retries=0))  # No retries to trigger the timeout.\n+\n+    try:\n+        # This would be a real server configured not to respond.\n+        s.get('http://10.255.255.1/', timeout=0.001)\n+    except RequestException as e:\n+        assert isinstance(e, Timeout)\n+        assert isinstance(e.__cause__, TimeoutError)\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..b50807a 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,37 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_iter_content_handles_unicode_correctly(self):\n+        \"\"\"\n+        Ensure iter_content with decode_unicode=True returns unicode strings\n+        and that iter_content with decode_unicode=False returns bytes.\n+        \"\"\"\n+        import io\n+        r = requests.Response()\n+\n+        # Case 1: encoding is set; verify Unicode output\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Expected all chunks to be str when decode_unicode is True\"\n+\n+        # Case 2: encoding is None; should remain bytes since it can't decode\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = None\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"Expected all chunks to be bytes when encoding is None\"\n+\n+        # Case 3: when explicitly not decoding, should be bytes\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"Expected all chunks to be bytes when decode_unicode is False\"\n+\n+        # Case 4: Different encoding\n+        r.raw = io.BytesIO('\u03c0\u03c1\u03bf\u03ca\u03cc\u03bd'.encode('iso-8859-7')) # Greek word meant to test different encoding\n+        r.encoding = 'iso-8859-7'\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Expected all chunks to be str when decode_unicode is True and using a different encoding\"\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..39d7989 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -731,8 +731,49 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             })\n \n             return args\n+from requests.models import Request\n \n-        for service in SERVICES:\n+def test_register_multiple_hooks_through_constructor():\n+    \"\"\"Test registering multiple hooks through constructor's hooks parameter.\"\"\"\n+    def add_alpha_header(args):\n+        if not args.get('headers'):\n+            args['headers'] = {}\n+\n+        args['headers'].update({\n+            'X-Alpha': 'alpha'\n+        })\n+\n+        return args\n+\n+    def add_beta_header(args):\n+        if not args.get('headers'):\n+            args['headers'] = {}\n+\n+        args['headers'].update({\n+            'X-Beta': 'beta'\n+        })\n+\n+        return args\n+\n+    def assert_hooks_are_callable(hooks):\n+        for h in hooks['args']:\n+            assert callable(h)\n+\n+    hooks = [add_alpha_header, add_beta_header]\n+\n+    r = Request(hooks={'args': hooks})\n+\n+    assert_hooks_are_callable(r.hooks)\n+\n+    # Verify hooks are executed\n+    test_args = {}\n+    for hook in r.hooks['args']:\n+        test_args = hook(test_args)\n+\n+    assert 'X-Alpha' in test_args['headers']\n+    assert 'X-Beta' in test_args['headers']\n+\n+    for service in SERVICES:\n             url = service('headers')\n \n             response = get(url=url,\n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..517fc5e 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -34,6 +34,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_todo_without_message(self) -> None:\n         code = \"\"\"a = 1\n                 # TODO\n@@ -43,6 +53,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_xxx_without_space(self) -> None:\n         code = \"\"\"a = 1\n                 #XXX\n@@ -52,6 +72,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_xxx_middle(self) -> None:\n         code = \"\"\"a = 1\n                 # midle XXX\n@@ -59,6 +89,16 @@ class TestFixme(CheckerTestCase):\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_without_space_fixme(self) -> None:\n         code = \"\"\"a = 1\n                 #FIXME\n@@ -68,6 +108,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     @set_config(notes=[])\n     def test_absent_codetag(self) -> None:\n         code = \"\"\"a = 1\n@@ -78,6 +128,16 @@ class TestFixme(CheckerTestCase):\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     @set_config(notes=[\"CODETAG\"])\n     def test_other_present_codetag(self) -> None:\n         code = \"\"\"a = 1\n@@ -89,11 +149,31 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_issue_2321_should_not_trigger(self) -> None:\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_issue_2321_should_trigger(self) -> None:\n         code = \"# TODO this should not trigger a fixme\"\n         with self.assertAddsMessages(\n@@ -106,6 +186,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_dont_trigger_on_todoist(self) -> None:\n         code = \"\"\"\n         # Todoist API: What is this task about?\n@@ -119,4 +209,14 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..773b983 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -72,11 +72,13 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n \n \n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n-    \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n-    with pytest.raises(_UnrecognizedOptionError):\n+    \"\"\"Check that we correctly raise a message on an unknown short option without traceback.\"\"\"\n+    with pytest.raises(SystemExit):  # Now expecting SystemExit instead of the internal error\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"usage:\" in output.out  # Check that a usage message is present\n+    assert \"Traceback\" not in output.out  # Ensure no traceback is printed\n \n \n def test_unknown_confidence(capsys: CaptureFixture) -> None:\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..6747350 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1341,6 +1341,36 @@ class TestRunTC:\n             ]\n             with _test_cwd():\n                 os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+\n+    def test_ignore_path_recursive_subdir(self) -> None:\n+        \"\"\"Tests that --recursive=y does not ignore paths in ignore-paths setting.\"\"\"\n+        with _test_sys_path():\n+            # pytest is including directory HERE/regrtest_data to sys.path which causes\n+            # astroid to believe that directory is a package.\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                regrtest_data = join(HERE, \"regrtest_data\")  # The test root directory\n+                gen_dir = join(regrtest_data, \"gen\")  # Ignored directory by pattern\n+                os.makedirs(gen_dir, exist_ok=True)\n+                with open(join(gen_dir, \"dummy.py\"), \"w\") as f:\n+                    f.write(\"# This is a dummy python file.\")\n+                # Change directory to regrtest_data\n+                os.chdir(regrtest_data)\n+\n+                # Create a pyproject.toml with ignore-paths setting\n+                with open(\"pyproject.toml\", \"w\") as f:\n+                    f.write(\"[tool.pylint.MASTER]\\n\")\n+                    f.write(\"ignore-paths=['^gen/.*$']\\n\")\n+\n+                # Run pylint with --recursive=y and verify that gen/ is ignored\n+                self._runtest(\n+                    [\"--recursive=y\", \"--ignore-paths=^gen/.*\"],\n+                    code=0,\n+                )\n                 self._test_output(\n                     [\".\"],\n                     expected_output=\"No such file or directory\",\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..4040b75 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,32 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint handles package with a module of the same name correctly.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"package/package.py\", \"package/other_module.py\"])\n+        # Ensure pylint runs without errors on this structure\n+        linter.check([\"package\"])\n+    assert not linter.stats.by_msg.get(\"parse-error\"), \"Parse error encountered\"\n+    assert \"deprecated-module\" not in linter.stats.by_msg\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint handles package with a module of the same name correctly.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"package/package.py\", \"package/other_module.py\"])\n+        # Ensure pylint runs without errors on this structure\n+        linter.check([\"package\"])\n+    assert not linter.stats.by_msg.get(\"parse-error\"), \"Parse error encountered\"\n+    assert \"deprecated-module\" not in linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..fa1bf4f 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -112,10 +113,26 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[1] == \"my_mod:1::()\"\n     assert out_lines[2] == \"my_mod:2::()\"\n \n+from _pytest.recwarn import WarningsRecorder\n+\n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    \"\"\"Test that custom braces in the message template work correctly without warning.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"test_module\")\n+\n+    linter.add_message(\"C0301\", line=1)\n+    linter.add_message(\"E0001\", line=2)\n+    linter.add_message(\"C0103\", line=3)\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n+    assert out_lines[3] == '{ \"Category\": \"convention\" }'\n \n-def test_deprecation_set_output(recwarn):\n-    \"\"\"TODO remove in 3.0.\"\"\"\n-    reporter = BaseReporter()\n+def test_deprecation_set_output(recwarn: WarningsRecorder) -> None:\n     # noinspection PyDeprecation\n     reporter.set_output(sys.stdout)\n     warning = recwarn.pop()\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..9b74fa4 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -5,6 +6,39 @@ import py.io\n from _pytest.logging import ColoredLevelFormatter\n \n \n+def test_coloredlogformatter_with_module_name():\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=logging.INFO,\n+        pathname=\"dummy_module_path\",\n+        lineno=20,\n+        msg=\"Module Test Message\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == (\n+        \"\\x1b[32mINFO    \\x1b[0m dummy_module:dummy_module_path:20 Module Test Message\"\n+    )\n+\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == (\n+        \"INFO     dummy_module:dummy_module_path:20 Module Test Message\"\n+    )\n+\n+\n def test_coloredlogformatter():\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..c4d08e7 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -463,6 +463,26 @@ class TestAssert_reprcompare:\n         expl = callequal({0, 1}, {0, 2})\n         assert len(expl) > 1\n \n+    def test_byte_strings_diff(self):\n+        \"\"\"Test case for byte string comparison issue.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n+\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+        ]\n+\n     def test_frozenzet(self):\n         expl = callequal(frozenset([0, 1]), {0, 2})\n         assert len(expl) > 1\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..0b25614 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,4 +1,7 @@\n+\n import os\n+from datetime import datetime\n+import platform\n from xml.dom import minidom\n \n import py\n@@ -139,7 +142,30 @@ class TestPython:\n         node = dom.find_first_by_tag(\"testsuite\")\n         node.assert_attr(name=\"pytest\", errors=1, failures=2, skipped=1, tests=5)\n \n-    def test_timing_function(self, testdir):\n+    \n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+    \n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n         testdir.makepyfile(\n             \"\"\"\n             import time, pytest\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..f656dbc 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -153,4 +153,32 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+\n+\n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_exception_in_repr():\n+    \"\"\"Test for INTERNALERROR handling when exception is raised in __repr__.\"\"\"\n+\n+    class FaultyRepr:\n+        def __repr__(self):\n+            raise ValueError(\"Faulty __repr__\")\n+\n+    assert saferepr(FaultyRepr()).startswith(\n+        \"<[ValueError('Faulty __repr__') raised in repr()] FaultyRepr object at 0x\"\n+    )\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..c06d0a5 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -70,8 +70,31 @@ def test_make_hook_recorder(testdir) -> None:\n     recorder.hook.pytest_runtest_logreport(report=rep3)\n     pytest.raises(ValueError, recorder.getfailures)\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct.\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_parseconfig(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     config1 = testdir.parseconfig()\n     config2 = testdir.parseconfig()\n     assert config2 is not config1\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..d33bce3 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -2,8 +2,8 @@ import os\n import sys\n from unittest import mock\n \n+import os\n import pytest\n-from _pytest.config import ExitCode\n from _pytest.mark import EMPTY_PARAMETERSET_OPTION\n from _pytest.mark import MarkGenerator as Mark\n from _pytest.nodes import Collector\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..109fcc6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -153,6 +153,10 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n+import pytest\n+import os\n+from _pytest.pytester import Pytester\n+\n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n@@ -372,6 +376,21 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n+    def test_skip_location_reporting_with_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason='unconditional skip')\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_location_reporting_with_runxfail.py:3: unconditional skip\", \"*1 skipped*\"])\n+\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_location_reporting_with_runxfail.py:3: unconditional skip\", \"*1 skipped*\"])\n+\n     def test_dynamic_xfail_no_run(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..994c326 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..b045083 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,7 +1,21 @@\n+\n import os\n import stat\n+def test_tmp_path_factory_handles_invalid_dir_characters(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    # Simulate a username with characters invalid for directory names\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    # Reset cache for _basetemp and _given_basetemp\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    # Get the base temp path and validate the result\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n import sys\n from pathlib import Path\n+from _pytest.monkeypatch import MonkeyPatch\n from typing import Callable\n from typing import cast\n from typing import List\n",
  "scikit-learn__scikit-learn-10297": "",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..0a2442c 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,7 +5,8 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_raise_message, assert_array_equal\n+from sklearn.metrics.cluster import adjusted_rand_score\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..f883cb0 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,44 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+from sklearn.preprocessing import OneHotEncoder\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+import pytest\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_handle_different_lengths():\n+    train = np.array(['one', 'two', 'three']).reshape((-1, 1))\n+    test = np.array(['four', 'one']).reshape((-1, 1))\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(train)\n+    transformed = ohe.transform(test).toarray()\n+    expected = np.array([[0., 0., 0.], [1., 0., 0.]])\n+    assert_array_equal(transformed, expected)\n+\n+def test_one_hot_encoder_unknown_category_transformed_as_zeros():\n+    train = np.array(['cat', 'dog', 'fish']).reshape((-1, 1))\n+    test = np.array(['bird', 'cat']).reshape((-1, 1))\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(train)\n+    transformed = ohe.transform(test).toarray()\n+    expected = np.array([[0., 0., 0.], [1., 0., 0.]])\n+    assert_array_equal(transformed, expected)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..1bd5e56 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..2dbeeaa 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -70,8 +71,21 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n+from sklearn.utils.testing import assert_allclose\n+\n+def test_kernel_pca_sign_invariance():\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(10, 10)\n+\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    transformed_X = kpca.fit_transform(X)\n+\n+    # Re-run with same settings to check for deterministic behavior\n+    kpca2 = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    transformed_X2 = kpca2.fit_transform(X)\n \n-def test_kernel_pca_sparse():\n+    # Check if the results are the same up to sign flip\n+    assert_allclose(np.abs(transformed_X), np.abs(transformed_X2))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..bb2be08 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1070,4 +1070,30 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+def test_pipeline_len():\n+    \"\"\"Test the length of the pipeline.\"\"\"\n+    from sklearn import svm\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.pipeline import Pipeline\n+\n+    # Preparing sample data\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+    # Creating a pipeline with two steps\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    # Assert that the length of the pipeline is equal to the number of steps\n+    assert len(pipe) == 2\n+\n+    # Test creating a pipeline with no steps\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0\n+\n+    # Test creating a pipeline with one step\n+    single_step_pipe = Pipeline([('anova', anova_filter)])\n+    assert len(single_step_pipe) == 1\n+\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..f9b1c96 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,9 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n@@ -297,6 +301,48 @@ def test_score_samples():\n \n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_with_and_without_warm_start():\n+    \"\"\"Test IsolationForest behavior with and without warm_start\"\"\"\n+\n+    rng = check_random_state(42)\n+    X = rng.randn(50, 3)\n+\n+    # Without warm_start\n+    clf_no_warm_start = IsolationForest(n_estimators=10, warm_start=False, random_state=rng)\n+    clf_no_warm_start.fit(X)\n+    predictions_no_warm_start = clf_no_warm_start.decision_function(X)\n+\n+    # With warm_start\n+    clf_warm_start = IsolationForest(n_estimators=5, warm_start=True, random_state=rng)\n+    clf_warm_start.fit(X)\n+    clf_warm_start.set_params(n_estimators=10)\n+    clf_warm_start.fit(X)\n+    predictions_warm_start = clf_warm_start.decision_function(X)\n+\n+    # Check if both models have the same number of trees\n+    assert len(clf_no_warm_start.estimators_) == len(clf_warm_start.estimators_)\n+\n+    # Ensure predictions differ due to incremental fitting\n+    assert not np.allclose(predictions_no_warm_start, predictions_warm_start)\n+\n+def test_iforest_warm_start_incremental():\n+    \"\"\"Test that warm_start allows incremental fitting of new trees.\"\"\"\n+\n+    rng = check_random_state(0)\n+    X = rng.randn(20, 2)\n+\n+    # fit first 10 trees\n+    clf = IsolationForest(n_estimators=10, max_samples=20, random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    # remember the 1st tree\n+    tree_1 = clf.estimators_[0]\n+    # fit another 10 trees\n+    clf.set_params(n_estimators=20)\n+    clf.fit(X)\n+    # expecting 20 fitted trees and no overwritten trees\n+    assert len(clf.estimators_) == 20\n+    assert clf.estimators_[0] is tree_1\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n     X = [[0.0], [1.0]]\n     clf = IsolationForest()\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..bc33462 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import pytest\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -213,6 +216,18 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n     assert imputer.__repr__() == expected\n \n     set_config(print_changed_only=False)\n+    \n+\n+def test_logistic_regression_cv_array_param():\n+    # Check that array parameters do not throw errors\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_result = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        assert \"Cs=array([0.1, 1.])\" in repr_result  # Verify correct repr\n+    except ValueError:\n+        pytest.fail(\"The 'print_changed_only=True' config caused a ValueError with array parameters.\")\n+    finally:\n+        set_config(print_changed_only=False)\n \n \n def test_pipeline():\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..c5a8a36 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -10,6 +11,8 @@ from sklearn.utils.testing import assert_raise_message\n from sklearn.exceptions import NotFittedError\n from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.ensemble import RandomForestClassifier\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n from sklearn.model_selection import GridSearchCV\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..d63003e 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,23 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n-\n-def test_transformation_dimensions():\n+@pytest.mark.parametrize('param, value', [\n+    ('n_components', np.int64(3)),\n+    ('max_iter', np.int64(100)),\n+    ('tol', np.float64(0.0001)),\n+    ('tol', 0.1),  # checking float tolerance\n+    ('tol', 1),    # checking integer tolerance\n+])\n+def test_nca_with_numpy_and_python_types(param, value):\n+    # check that no error is raised when parameters have numpy integer or\n+    # floating types, as well as their Python equivalents\n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n+\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    # This should not raise any error\n+    nca.fit(X, y)\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..c5475a0 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,32 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue with sparse SVM and empty support vectors\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([\n+        [0, 1, 0, 0],\n+        [0, 0, 0, 1],\n+        [0, 0, 1, 0],\n+        [0, 0, 0, 1]\n+    ])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+\n+    model = svm.SVR(kernel='linear')\n+\n+    # Before the fix, this would raise a ZeroDivisionError\n+    model.fit(X_train, y_train)\n+\n+    # Ensure the resulting model has empty support vectors and dual_coef_\n+    assert not model.support_vectors_.data.size, \\\n+        \"support_vectors_ should be empty for this test case\"\n+    assert not model.dual_coef_.data.size, \\\n+        \"dual_coef_ should be empty for this test case\"\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..7475c7a 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,4 +1,8 @@\n+\n import warnings\n+from sklearn import set_config\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n import numpy as np\n import pickle\n import copy\n@@ -678,5 +682,21 @@ def test_get_feature_names_out(shape):\n     iso = IsotonicRegression().fit(X, y)\n     names = iso.get_feature_names_out()\n     assert isinstance(names, np.ndarray)\n+\n+\n+def test_calibrated_classifier_cv_with_pandas_output():\n+    \"\"\"Test CalibratedClassifierCV with transform_output set to pandas.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    np = pytest.importorskip(\"numpy\")\n+\n+    X = np.arange(90).reshape(30, -1)\n+    y = np.arange(30) % 2\n+\n+    with set_config(transform_output=\"pandas\"):\n+        model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\n+        model.fit(X, y)\n+        predictions = model.predict(X)\n+\n+    assert predictions is not None\n     assert names.dtype == object\n     assert_array_equal([\"isotonicregression0\"], names)\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..d57f2bd 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -113,6 +113,10 @@ def test_automodule_special_members(app):\n     ]\n \n \n+import sys\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n                                                             'missing_package1',\n@@ -125,4 +129,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..9a76e91 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -90,6 +90,55 @@ def test_get_full_qualified_name():\n     node = nodes.reference(reftype='option', reftarget='-l', **kwargs)\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.util.docutils import new_document\n+from sphinx.util import restructuredtext\n+\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index, \n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '-j'],\n+                                                                      [addnodes.desc_addname, '[=N]'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index, \n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[enable'],\n+                                                                      [addnodes.desc_addname, '=]PATTERN'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+\n+def test_cmd_option_with_multiple_brackets(app):\n+    text = \".. option:: [disable=]|[enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index, \n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[disable=]|[enable'],\n+                                                                      [addnodes.desc_addname, '=]PATTERN'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[disable=]|[enable', '[disable=]|[enable', 'cmdoption', 'index', 'cmdoption-arg-disable-enable', 1) in objects\n+\n+\n+def test_cmd_option_with_optional_and_positional_args(app):\n+    text = \".. option:: --set[=<value>] <property>\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index, \n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '--set'],\n+                                                                      [addnodes.desc_addname, '[=<value>] <property>'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--set', '--set', 'cmdoption', 'index', 'cmdoption-set', 1) in objects\n+\n \n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..0b43403 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..98bb479 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -115,7 +117,8 @@ def test_restify_type_ForwardRef():\n     assert restify(ForwardRef(\"myint\")) == \":class:`myint`\"\n \n \n-def test_restify_broken_type_hints():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..331273e 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,40 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_respects_napoleon_use_param(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other parameters\n+----------------\n+y : float\n+\"\"\"\n+\n+        # Test when napoleon_use_param is False (default for 'Other Parameters')\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:Other Parameters: **y** (*float*)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test when napoleon_use_param is True for 'Other Parameters'\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:param y:\n+:type y: float\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..79149e7 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -60,8 +60,15 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/c/' in stuff\n     assert 'http://foobar/cpp/' in stuff\n \n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..fdfc303 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -350,6 +350,13 @@ def test_args():\n            # enclosing brackets needed on 0\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n+    \n+    # New test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # identity permutation\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([1, 0])  # swap 0 and 1\n+    assert Permutation([[0, 2], [2, 3], [1, 3]]) == Permutation([3, 2, 0, 1])  # complex non-disjoint\n+    assert Permutation([[0], [1, 2], [2, 1]]) == Permutation([0, 1, 2])  # identity permutation with redundant cycles\n+    assert Permutation([[0, 1], [2, 1], [1, 3]]) == Permutation([1, 2, 3, 0])  # mixed non-disjoint\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..af155c2 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -449,6 +450,20 @@ def test_sparse_matrix():\n     assert SparseMatrix.eye(2).nnz() == 2\n \n \n+def test_hstack_vstack():\n+    # Test hstack with sparse matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n+\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n+\n+    sparse_matrices = [SparseMatrix.zeros(1, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(1, 6, [])\n+\n+    sparse_matrices = [SparseMatrix.zeros(n, 1) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 1, [])\n+\n def test_transpose():\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n         SparseMatrix(((1, 3), (2, 4)))\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..5d9cfd2 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -82,6 +82,24 @@ def check(a, exclude=[], check_attr=True):\n #================== core =========================\n \n \n+import pickle\n+import sys\n+import subprocess\n+import sympy\n+from sympy import Float, symbols, Add\n+\n+def test_pickle_cross_version_float():\n+    x = symbols(\"x\")\n+    # pickle an expression in Python 2\n+    pickled_expr = subprocess.check_output([\n+        sys.executable, \"-c\",\n+        'import pickle; import sympy; x = sympy.symbols(\"x\"); '\n+        'print(pickle.dumps(x + 1.0, 2))'\n+    ])\n+    # unpickle the expression in Python 3\n+    expr = pickle.loads(pickled_expr)\n+    assert expr == x + 1.0\n+\n def test_core_basic():\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..d5b8876 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -265,6 +265,21 @@ def test_coth():\n \n     assert coth(2 + 3*I) == coth(2 + 3*I)\n \n+def test_coth_log_tan_issue():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    assert e.subs(x, 2)  # Should not raise NameError\n+    assert e.subs(x, 3)  # Should not raise NameError\n+    assert e.subs(x, 5)  # Should not raise NameError\n+    assert e.subs(x, 6)  # Should not raise NameError\n+    assert e.subs(x, 8)  # Should not raise NameError\n+    assert e.subs(x, 9)  # Should not raise NameError\n+    assert e.subs(x, 11)  # Should not raise NameError\n+    assert e.subs(x, 12)  # Should not raise NameError\n+    assert e.subs(x, 13)  # Should not raise NameError\n+    assert e.subs(x, 15)  # Should not raise NameError\n+    assert e.subs(x, 18)  # Should not raise NameError\n+\n     assert coth(x*I) == -cot(x)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..2e44502 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,39 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643_col_insert():\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    # Original scenario\n+    assert M.col_insert(3, V) == sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]])\n+\n+    # Additional tests with different matrix sizes and insert positions\n+    N = sm.eye(3)\n+    W = sm.ones(3, 2)\n+    assert N.col_insert(1, W) == sm.Matrix([\n+        [1, 1, 1, 0],\n+        [0, 1, 1, 1],\n+        [0, 1, 1, 0]])\n+\n+    # Insert at the beginning\n+    assert N.col_insert(0, W) == sm.Matrix([\n+        [1, 1, 1, 1, 0],\n+        [1, 1, 0, 1, 0],\n+        [1, 1, 0, 0, 1]])\n+\n+    # Insert at the end\n+    assert N.col_insert(3, W) == sm.Matrix([\n+        [1, 0, 1, 1],\n+        [0, 1, 1, 1],\n+        [0, 0, 1, 1]])\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..ae06ccb 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,35 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n-\n-def test_latex_sequences():\n+from sympy import latex, symbols, SeqFormula, SeqPer, SeqAdd, SeqMul, oo, S\n+\n+def test_latex_seqformula_brackets():\n+    n = symbols('n', integer=True)\n+    \n+    # Test that the brackets are not backslash-escaped in the output\n+    seq = SeqFormula(n**2, (n, 0, oo))\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(seq) == latex_str\n+\n+    seq_finite = SeqFormula(n**2, (n, 0, 2))\n+    latex_str_finite = r'[0, 1, 4]'\n+    assert latex(seq_finite) == latex_str_finite\n+\n+    seq_neg_inf = SeqFormula(n**2, (n, -oo, 0))\n+    latex_str_neg_inf = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(seq_neg_inf) == latex_str_neg_inf\n+\n+    seq_per = SeqPer((1, 2))\n+    latex_str_per = r'[1, 2, 1, 2, \\ldots]'\n+    assert latex(seq_per) == latex_str_per\n+\n+    seq_mul = SeqMul(seq, seq_per)\n+    latex_str_mul = r'[0, 2, 4, 18, \\ldots]'\n+    assert latex(seq_mul) == latex_str_mul\n+\n+    seq_add = SeqAdd(seq, seq_per)\n+    latex_str_add = r'[1, 3, 5, 11, \\ldots]'\n+    assert latex(seq_add) == latex_str_add\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..e938495 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, EX, RR, CC\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..571012b 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -300,6 +301,12 @@ def test_latex_functions():\n     assert latex(asin(x)**2) == r\"\\operatorname{asin}^{2}{\\left (x \\right )}\"\n     assert latex(asin(x)**2, inv_trig_style=\"full\") == \\\n         r\"\\arcsin^{2}{\\left (x \\right )}\"\n+        \n+    # Test cases for acsc and asec with inv_trig_style=\"full\"\n+    assert latex(acsc(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n     assert latex(asin(x)**2, inv_trig_style=\"power\") == \\\n         r\"\\sin^{-1}{\\left (x \\right )}^{2}\"\n     assert latex(asin(x**2), inv_trig_style=\"power\",\n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..6e027be 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,7 +6111,19 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n-def test_MatrixSymbol_printing():\n+from sympy import MatrixSymbol\n+from sympy.printing import pretty\n+\n+def test_MatrixSymbol_pretty_printing():\n+    # Additional test cases for issue #14814\n+    n = 3  # Example dimension for matrices\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    a = MatrixSymbol('a', n, n)\n+    \n+    # Test pretty printing of MatAdd with special character in symbol names\n+    assert pretty(x + y_star) == \"x + y*\"\n+    assert pretty(-a*x + -2*y_star*y_star) == \"-a*x - 2*y**y*\"\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..71cad77 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -720,6 +720,44 @@ def test_dummification():\n     lam = lambdify((F(t), G(t)), some_expr)\n     assert lam(3, 9) == 2\n     lam = lambdify(sin(t), 2 * sin(t)**2)\n+\n+def test_curly_matrix_symbol_issue_15009():\n+    # Import sympy functions\n+    from sympy import symbols, MatrixSymbol, lambdify\n+    # Create symbols and matrix symbols\n+    curlyx = symbols(\"{x}\")\n+    v = MatrixSymbol(\"v\", 2, 1)\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    \n+    # Function creation that should succeed\n+    curlyScalarId = lambdify(curlyx, curlyx)\n+    vectorId = lambdify(v, v)\n+    \n+    # Test that these functions work correctly\n+    assert curlyScalarId(1) == 1\n+    assert (vectorId([[1], [2]]) == [[1], [2]])\n+\n+    # Test for SyntaxError in cases that should fail without the fix\n+    try:\n+        curlyVectorId = lambdify(curlyv, curlyv)\n+        assert False, \"Expected SyntaxError for curlyv without dummify\"\n+    except SyntaxError:\n+        pass\n+\n+    try:\n+        curlyVectorIdDummified = lambdify(curlyv, curlyv, dummify=True)\n+        assert False, \"Expected SyntaxError for curlyv with dummify=True\"\n+    except SyntaxError:\n+        pass\n+    \n+    # Post-fix: Ensure no SyntaxError with dummify=True\n+    # Assuming the issue is fixed, these should no longer raise SyntaxError\n+    try:\n+        curlyVectorIdDummified = lambdify(curlyv, curlyv, dummify=True)\n+        result = curlyVectorIdDummified([[1], [2]])\n+        assert (result == [[1], [2]]), \"Function output mismatch\"\n+    except SyntaxError:\n+        assert False, \"Unexpected SyntaxError for curlyv with dummify=True after fix\"\n     assert lam(F(t)) == 2 * F(t)**2\n     #Test that \\alpha was properly dummified\n     lam = lambdify((alpha, t), 2*alpha + t)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..5816d67 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,23 @@\n+\n+def test_Max_Min():\n+    # Test cases for Max\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    \n+    # Test cases for Min\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+    assert mcode(Min(x, y, 2)) == \"Min[x, y, 2]\"\n+\n+    # Original test case also relevant to this issue\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..60ee9d6 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,16 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    # Test case for the issue with indexed matrix-expression LaTeX printer\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Ensures that the LaTeX output does not contain incorrect double subscripts\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..11c944d 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -21,7 +22,37 @@ def test_idiff():\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n \n-def test_intersection():\n+def test_idiff_additional():\n+    f = Function('f')\n+    g = Function('g')\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+\n+    # Original test cases from the patch\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Additional test cases for thorough verification\n+    # Testing with Eq class instead of direct expression\n+    expr = Eq(y*exp(y), x*exp(x))\n+    assert idiff(expr, y, x).simplify() == (x + 1) * exp(x - y)/(y + 1)\n+\n+    # Using a simple equality to test support for Eq class\n+    simple_eq = Eq(f(x), x**2 + y)\n+    assert idiff(simple_eq, f(x), x) == 2*x\n+\n+    # Checking interaction with trigonometric functions\n+    trig_expr = Eq(f(x), x**3 + S(1)/Function('cos')(x))\n+    assert idiff(trig_expr, f(x), x).simplify() == 3*x**2 + Function('sin')(x)/Function('cos')(x)**2\n+\n+    # Complex nested functions\n+    complex_expr = Eq(f(x)*exp(f(x)**2), x**2 + y)\n+    assert idiff(complex_expr, f(x), x).is_Function\n+\n+    # Confirming the function raises an error for unsupported expressions\n+    raises(ValueError, lambda: idiff('not_an_eq', f(x), x))\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..271a186 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,20 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, FiniteSet, Symbol, Eq, S, Piecewise\n \n-def test_issue_9623():\n+def test_intersection_remove_duplicates():\n+    x = Symbol('x')\n+    \n+    # Case 1: Intersection with duplicate numeric elements and symbolic\n+    assert Intersection({1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    # Case 2: Intersection with no duplicates\n+    assert Intersection({1}, {2}, {x}) == S.EmptySet\n+    # Case 3: Intersection without symbolic element\n+    assert Intersection({1}, {1}) == FiniteSet(1)\n+    # Case 4: Unevaluated intersection to check attribute storage\n+    uneval_intersection = Intersection({1}, {1}, {x}, evaluate=False)\n+    assert uneval_intersection.args == ({1}, {1}, {x})\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..6b608d0 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -10,13 +11,28 @@ from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayPermuteDims, CodegenArrayElementwiseAdd)\n from sympy.printing.lambdarepr import NumPyPrinter\n \n-from sympy.utilities.pytest import warns_deprecated_sympy\n+from sympy.utilities.pytest import warns_deprecated_sympy, skip, raises\n+from sympy.matrices import MatrixSymbol, Identity\n+from sympy import symbols\n from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n np = import_module('numpy')\n+def test_issue_identity_matrix():\n+    if not np:\n+        skip(\"NumPy not installed\")\n \n-def test_numpy_piecewise_regression():\n+    # Test with fixed size matrix\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+    assert (f(ma) == mr).all()\n+\n+    # Test with symbolic sized matrix\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"M\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..09fa6f2 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,16 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n-def test_issue_7971():\n+def test_issue_17137():\n+    from sympy import I, cos, log, pi, simplify, Symbol\n+    x = Symbol('x')\n+    # These should not raise an error\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional checks for more complex expressions\n+    assert simplify((cos(x)**I) * (cos(x)**-I)) == 1\n+    assert simplify((cos(x)**I) * (cos(x)**I)) == cos(x)**(2*I)\n+    assert simplify(cos(x)**(I/2)) == cos(x)**(I/2)\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..d3485d6 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,6 +92,11 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    # Test multiplication of Point with scalar in both orders\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert point1 + point2 * S(2.0) == Point(2.0, 2.0)\n+    assert point1 + S(2.0) * point2 == Point(2.0, 2.0)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..27fc52f 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,45 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import Symbol, symbols, sympify, Eq, Unequality\n+from sympy.testing.pytest import raises\n+\n+def test_non_string_equality():\n+    # Check for expressions not comparing equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Ensure repr raising exceptions doesn't affect equality\n+    class BadRepr:\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+    # Ensure that an unknown object whose repr is 'x' does not compare equal\n+    class C:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    # Ensure objects without reprs leading to valid sympy expressions\n+    # do not compare equal\n+    class D:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    assert (x == D()) is False\n+    assert (x != D()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1941,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..18e73ad 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,6 +547,14 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n+    # test issue 18186\n+    from sympy.abc import n, m\n+    # Verify that the output is independent of the order of symbols when permute is True\n+    eq = n**4 + m**4 - 2**4 - 3**4\n+    expected_sol = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(eq, syms=(n, m), permute=True) == expected_sol\n+    assert diophantine(eq, syms=(m, n), permute=True) == expected_sol\n+\n     # issue 18122\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..b5b2908 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String, Basic\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -65,6 +66,7 @@ def test_sizeof():\n     sz = sizeof(typename)\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n     assert not sz.is_Atom\n     assert all(atom == typename for atom in sz.atoms())\n \n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..0a3d2f8 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,32 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_blockdiagmatrix_single_element():\n+    # Test conversion of BlockDiagMatrix with one Matrix back to Matrix\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_issue_blockdiagmatrix_multiple_elements():\n+    # Test conversion of BlockDiagMatrix with multiple Matrices back to Matrix\n+    from sympy import Matrix, BlockDiagMatrix, zeros\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B == expected\n+\n+def test_issue_18618():\n+    A = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+    assert A == Matrix(BlockDiagMatrix(A))\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..f9318d4 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -288,6 +288,22 @@ def test_sign():\n     assert (sign(nz)**3).args == (sign(nz), 3)\n \n     assert sign(Symbol('x', nonnegative=True)).is_nonnegative\n+    \n+    # New test cases for sign.rewrite(Abs)\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    f = Function('f')\n+    \n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+    assert sign(0).rewrite(Abs) == 0  # Ensure sign(0) is still 0, not NaN\n+    assert sign(1).rewrite(Abs) == 1\n+    assert sign(-1).rewrite(Abs) == -1\n+    assert sign(I).rewrite(Abs) == I\n+    assert sign(-I).rewrite(Abs) == -I\n+    assert sign(2 + 2*I).rewrite(Abs) == (2 + 2*I) / Abs(2 + 2*I)\n+    assert sign(x + I).rewrite(Abs) == (x + I) / Abs(x + I)\n     assert sign(Symbol('x', nonnegative=True)).is_nonpositive is None\n     assert sign(Symbol('x', nonpositive=True)).is_nonnegative is None\n     assert sign(Symbol('x', nonpositive=True)).is_nonpositive\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..c1727d8 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,15 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n \n def test_partitions():\n+    # Test if partitions are distinct objects\n+    parts = list(partitions(5))\n+    for i, p1 in enumerate(parts):\n+        for j, p2 in enumerate(parts):\n+            if i != j:\n+                assert p1 is not p2, \"Partitions should not be the same object in memory\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..5ff6965 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -266,8 +266,12 @@ def test_zero():\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n+from sympy import S, oo, powdenest, zoo, symbols\n \n-def test_pow_as_base_exp():\n+def test_issue_19572():\n+    # Test cases specifically for the issue 19572\n+    assert Pow(0, -oo) == zoo\n+    assert 0**-oo == zoo\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..f402182 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n-                                 volume, kilometer)\n+                                 volume, kilometer, joule)\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..92b500c 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,22 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import pytest\n+from sympy import Symbol, Basic\n+\n+def test_symbol_no_dict():\n+    \"\"\"Test that Symbol instances do not have a __dict__ attribute.\"\"\"\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol instance should not have __dict__\"\n+    with pytest.raises(AttributeError):\n+        _ = s.__dict__\n+\n+def test_symbol_slots():\n+    \"\"\"Test that Symbol instances use __slots__.\"\"\"\n+    s = Symbol('s')\n+    assert hasattr(s, '__slots__'), \"Symbol instance should have __slots__\"\n+    assert 'name' in s.__slots__, \"'name' should be in __slots__ of Symbol\"\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..bf838df 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n                    atan, atan2, nan, Symbol, re, im, sign)\n from sympy.abc import w, x, y, z\n@@ -6,7 +7,18 @@ from sympy.functions.elementary.piecewise import Piecewise\n from sympy.matrices.expressions.matexpr import MatrixSymbol\n \n \n-def test_Abs():\n+def test_arg():\n+    a = Symbol('a', real=True)\n+    assert refine(arg(a), Q.positive(a)) == 0\n+    assert refine(arg(a), Q.negative(a)) == pi\n+    assert refine(arg(a), Q.positive(-a)) == pi\n+    assert refine(arg(a), Q.negative(-a)) == 0\n+\n+def test_integral_with_refine():\n+    a, x = symbols('a x', real=True)\n+    J = Integral(sin(x)*exp(-a*x), (x, 0, oo)).doit()\n+    refined_J = refine(J, Q.positive(a))\n+    assert refined_J == 1/(a**2 + 1)\n     assert refine(Abs(x), Q.positive(x)) == x\n     assert refine(1 + Abs(x), Q.positive(x)) == 1 + x\n     assert refine(Abs(x), Q.negative(x)) == -x\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..e0a3f23 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -34,7 +35,61 @@ def test_subs_Matrix():\n     # Does not raise a TypeError, see comment on the MatAdd postprocessor\n     assert Add(Matrix([[3]]), x).subs(x, 2.0) == Add(Matrix([[3]]), 2.0)\n \n-def test_subs_AccumBounds():\n+def test_issue_21373():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+    x_r, y_r, z = symbols('x_r y_r z', real=True)\n+    \n+    # Test case that verifies the fix for PolynomialError with Piecewise\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    try:\n+        result = expr.subs({1: 1.0})\n+        assert result is not None  # Ensure no error is raised and result is valid\n+    except PolynomialError:\n+        assert False, \"Unexpected PolynomialError was raised\"\n+        \n+    # Additional test cases to ensure the issue is resolved and variabilities are addressed\n+    expr = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    result = expr.subs({1: 1.0})\n+    assert result is not None\n+\n+    expr = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    result = expr.subs({1: 1.0})\n+    assert result is not None\n+\n+    # Verify other mathematical functions do not break with the same structure\n+    expr = exp(sin(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    result = expr.subs({1: 1.0})\n+    assert result is not None\n+\n+    expr = exp(log(Piecewise((x_r, y_r > x_r), (y_r, True)) / z + 2))\n+    result = expr.subs({1: 1.0})\n+    assert result is not None\n+    \n+    # Piecewise division without exp\n+    expr = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    result = expr.subs({1: 1.0})\n+    assert result is not None\n+\n+    # Edge case with no division\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    result = expr.subs({1: 1.0})\n+    assert result is not None\n+\n+    # Non-real z case\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    z = symbols('z')\n+\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    result = expr.subs({1: 1.0})\n+    assert result is not None\n+\n+    # Ensure cache clearing doesn't affect the fix\n+    from sympy.core.cache import clear_cache\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    result = expr.subs({1: 1.0})\n+    assert result is not None\n     e = x\n     e = e.subs(x, AccumBounds(1, 3))\n     assert e == AccumBounds(1, 3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..fe8efeb 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,9 +1,11 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n-from sympy.core.symbol import Symbol\n+from sympy.core.function import Derivative\n+from sympy.matrices import MatrixSymbol, MatrixKind\n from sympy.integrals.integrals import Integral\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..4ef7f80 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,6 +131,10 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n+    assert set(itermonomials([x, y, z], 3, 3)) == {x**3, x**2*y, x**2*z, x*y**2, x*y*z, x*z**2, y**3, y**2*z, y*z**2, z**3, x*y*z, x*y**2, x*z**2, y*z**2, y*x*z}\n+    assert set(itermonomials([x, y, z], 4)) == {S.One, x, y, z, x**2, x*y, x*z, y**2, y*z, z**2, x**3, x**2*y, x**2*z, x*y**2, x*y*z, x*z**2, y**3, y**2*z, y*z**2, z**3, x**4, x**3*y, x**3*z, x**2*y**2, x**2*y*z, x**2*z**2, x*y**3, x*y**2*z, x*y*z**2, x*z**3, y**4, y**3*z, y**2*z**2, y*z**3, z**4}\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2, x2**3, x2**2*x3, x2*x3**2, x3**3}\n+    \n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..68394eb 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,8 +50,12 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n-\n-def test_solve_biquadratic():\n+def test_infinite_solution_detection():\n+    # Testing for system with one equation in y (should be NotImplementedError)\n+    raises(NotImplementedError, lambda: solve_poly_system([y - 1], x, y))\n+    \n+    # Testing for system with one equation in x (should be NotImplementedError)\n+    raises(NotImplementedError, lambda: solve_poly_system([x - 1], x, y))\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n \n     f_1 = (x - 1)**2 + (y - 1)**2 - r**2\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..0872e83 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n@@ -440,7 +442,19 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Verify that Point2D does not raise error with evaluate=False\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert p.x == 1\n+        assert p.y == 2\n+\n+    # Check Point2D with complex coordinates outside evaluate(False)\n+    raises(ValueError, lambda: Point2D(1 + I, 2))\n+\n+    # Ensure evaluate=False does not simplify erroneous input\n+    with evaluate(False):\n+        raises(ValueError, lambda: Point2D(1 + I, 2))\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..699a9d2 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -346,8 +346,31 @@ def test_cse_MatrixSymbol():\n     n = symbols('n', integer=True)\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n-\n-def test_cse_MatrixExpr():\n+def test_cse_MatrixSymbol_issue():\n+    from sympy import MatrixSymbol, symbols, cse, Matrix\n+    from sympy.utilities.codegen import CCodeGen\n+\n+    def sub_in_matrixsymbols(exp, matrices):\n+        for matrix in matrices:\n+            for i in range(matrix.shape[0]):\n+                for j in range(matrix.shape[1]):\n+                    name = \"%s_%d_%d\" % (matrix.name, i, j)\n+                    sym = symbols(name)\n+                    exp = exp.subs(sym, matrix[i, j])\n+        return exp\n+\n+    def t44(name):\n+        return Matrix(4, 4, lambda i, j: symbols('%s_%d_%d' % (name, i, j)))\n+\n+    a = t44(\"a\")\n+    b = t44(\"b\")\n+    e = a * b\n+    e2 = sub_in_matrixsymbols(e, [MatrixSymbol(\"a\", 4, 4), MatrixSymbol(\"b\", 4, 4)])\n+    cse_subs, cse_reduced = cse(e2)\n+\n+    # Ensure correct substitution and reduction\n+    assert len(cse_subs) > 0\n+    assert isinstance(cse_reduced[0], Matrix)\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..6c9e7ca 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -9,6 +10,8 @@ from sympy.tensor.array.sparse_ndim_array import (\n     ImmutableSparseNDimArray, MutableSparseNDimArray)\n \n from sympy.abc import x, y\n+from sympy.tensor.array.dense_ndim_array import MutableDenseNDimArray, ImmutableDenseNDimArray\n+from sympy.tensor.array.sparse_ndim_array import MutableSparseNDimArray, ImmutableSparseNDimArray\n \n array_types = [\n     ImmutableDenseNDimArray,\n@@ -37,8 +40,12 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n-\n-def test_issue_18361():\n+def test_issue_17851():\n+    for ArrayType in array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n     C = Array([(x + x**2)/(x*sin(y)**2 + x*cos(y)**2), 2*sin(x)*cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..7097d1b 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,28 @@ def test_scipy_polys():\n \n \n \n+def test_lambdify_single_element_tuple():\n+    # Test with a single element tuple\n+    f = lambdify([], (1,))\n+    assert inspect.getsource(f) == 'def _lambdifygenerated():\\n    return (1,)\\n'\n+    assert f() == (1,)\n+\n+def test_lambdify_two_element_tuple():\n+    # Test with a two-element tuple to ensure normal operation\n+    f = lambdify([], (1, 2))\n+    assert inspect.getsource(f) == 'def _lambdifygenerated():\\n    return (1, 2)\\n'\n+    assert f() == (1, 2)\n+\n+def test_lambdify_empty_tuple():\n+    # Test with an empty tuple\n+    f = lambdify([], ())\n+    assert inspect.getsource(f) == 'def _lambdifygenerated():\\n    return ()\\n'\n+    assert f() == ()\n+\n+import inspect\n+from sympy import lambdify\n+from sympy import Dummy\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..db41f0a 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,47 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import exp, impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    # Define quantities and their dimensions\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    # Expression to test\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    # Test expression involving exp\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+    \n+    # Additional test cases to ensure thorough testing\n+    # Testing with another dimensionaless expression\n+    expr2 = (R * C) / T\n+    dim2 = SI._collect_factor_and_dimension(expr2)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim2)\n+\n+    exp_expr2 = 1 + exp(expr2)\n+    assert SI._collect_factor_and_dimension(exp_expr2) == (1 + E, Dimension(1))\n+\n+    # Testing direct application of exp function\n+    assert SI.get_dimension_system().is_dimensionless(SI._collect_factor_and_dimension(exp(expr))[1])\n+    assert SI.get_dimension_system().is_dimensionless(SI._collect_factor_and_dimension(exp(expr2))[1])\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..80d1c92 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -32,6 +32,14 @@ def test_tensor_product_dagger():\n         TensorProduct(Dagger(mat1), Dagger(mat2))\n \n \n+from sympy import symbols\n+from sympy.physics.quantum import Operator, TensorProduct as TP\n+\n+A, B, C = symbols('A B C', commutative=False)\n+x = symbols('x')\n+U = Operator('U')\n+V = Operator('V')\n+\n def test_tensor_product_abstract():\n \n     assert TP(x*A, 2*B) == x*2*TP(A, B)\n@@ -53,7 +61,27 @@ def test_tensor_product_commutator():\n         TP(A, B)*TP(B, C) - TP(B, C)*TP(A, B)\n \n \n-def test_tensor_product_simp():\n+def test_tensor_product_issue():\n+\n+    # Original tests from issue description\n+    assert TP(2*U - V, U + V).expand(tensorproduct=True) == \\\n+        2*TP(U, U) + 2*TP(U, V) - TP(V, U) - TP(V, V)\n+    \n+    # Original test patch\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2*TP(A, A) + 2*TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2*A*B + A, A + B).expand(tensorproduct=True) == \\\n+        2*TP(A*B, A) + 2*TP(A*B, B) + TP(A, A) + TP(A, B)\n+    \n+    # Additional test cases to ensure completeness of the expansion\n+    assert TP(3*A + 2*B, C).expand(tensorproduct=True) == \\\n+        3*TP(A, C) + 2*TP(B, C)\n+    assert TP(U, 2*A + B).expand(tensorproduct=True) == \\\n+        2*TP(U, A) + TP(U, B)\n+    assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n+        TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n     # tests for Pow-expressions\n     assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..60f973e 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,42 @@\n+\n+from sympy.physics.units import Quantity, velocity, acceleration, time, meter, second\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_equivalent_dimension_detection():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1*t1 + v1\n+    # should not raise ValueError as dimensions are equivalent\n+    try:\n+        SI._collect_factor_and_dimension(expr1)\n+        print(\"Test passed: No ValueError raised for equivalent dimensions.\")\n+    except ValueError as e:\n+        print(f\"Test failed: {e}\")\n+\n import warnings\n \n from sympy.core.add import Add\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..8ee3126 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,12 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Additional tests for verifying the issue with milli prefix\n+    assert milli * W == W / 1000  # Checking if milli*W evaluates to milliWatt\n+    assert W * milli == W / 1000  # Symmetric check for W*milli\n+    assert milli * Quantity('volt') == Quantity('volt') / 1000 # Similar test for volts\n+    assert Quantity('volt') * milli == Quantity('volt') / 1000 # Symmetric check for volt*milli\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..e015417 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -15,7 +15,19 @@ undefined -- not random, just undefined.\n \n from django.db import models\n \n+class OneModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n \n+    class Meta:\n+        ordering = ('-id',)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+    \n class Author(models.Model):\n     name = models.CharField(max_length=63, null=True, blank=True)\n \n",
  "django__django-13265": "",
  "django__django-14534": "",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..05f5f3e 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,10 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.colors import LogNorm, Normalize\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -658,7 +662,24 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n-def test_colorbar_get_ticks_2():\n+def test_colorbar_update_after_norm_change():\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots(1, 1)\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+    \n+    # Change the norm and ensure the colorbar updates correctly\n+    new_norm = LogNorm(vmin=img.min(), vmax=img.max())\n+    plot.set_norm(new_norm)\n+    \n+    # Trigger a redraw to ensure the colorbar updates\n+    fig.canvas.draw_idle()\n+    \n+    # Verify the colorbar's scale matches the LogNorm scale\n+    assert cb.ax.yaxis.get_scale() == 'log'\n+    \n+    # Further checks could be added here to ensure the ticks and labels update correctly\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..b3c25f5 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,33 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_transformer_output():\n+    \"\"\"Test FeatureUnion with a transformer that outputs pandas DataFrame.\"\"\"\n+    \n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion\n+    \n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(name=\"sum_value\")\n+\n+    union = FeatureUnion([(\"my_trans\", MyTransformer())])\n+    union.set_output(transform=\"pandas\")\n+    \n+    result = union.fit_transform(data)\n+    expected_dates = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"D\").date\n+    expected_values = [240] * 4\n+    \n+    assert isinstance(result, pd.DataFrame), \"Result should be a pandas DataFrame\"\n+    assert list(result[\"date\"]) == list(expected_dates), \"Dates should match expected aggregation\"\n+    assert list(result[\"sum_value\"]) == expected_values, \"Values should match expected aggregation\"\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..79d44cc 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -132,6 +132,34 @@ def test_decorators(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_annotation_only_attribute(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_only',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_only',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_only',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n     options = {\"members\": None}\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..aedf857 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -358,6 +359,29 @@ def test_issue_2827_trigsimp_methods():\n     assert exptrigsimp(eq) == eq\n \n \n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+def test_issue_15129_additional_cases():\n+    r = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert simplify(r) == cos(S(1)/50)\n+    assert trigsimp(r) == cos(S(1)/50)\n+\n+    r_matrix = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0]).dot(\n+               Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0]))\n+    assert simplify(r_matrix) == cos(S(1)/50)\n+    assert trigsimp(r_matrix) == cos(S(1)/50)\n+\n+    acos_expr = acos(sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25)))\n+    assert simplify(acos_expr) == acos(cos(S(1)/50))\n+    assert trigsimp(acos_expr) == acos(cos(S(1)/50))\n+\n def test_exptrigsimp():\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..01aee45 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4344,8 +4344,25 @@ def test_pretty_no_wrap_line():\n def test_settings():\n     raises(TypeError, lambda: pretty(S(4), method=\"garbage\"))\n \n+from sympy import Sum, symbols, oo\n+from sympy.printing.pretty.pretty import upretty\n \n-def test_pretty_sum():\n+def test_pretty_fixed_sum():\n+    x = symbols('x')\n+\n+    # Issue-specific test\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    expected_output = \\\n+u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571     \\n\\\n+ \u203e\u203e\u203e  + 3\\n\\\n+x = 1   \\\n+\"\"\")\n+    assert upretty(expr) == expected_output\n     from sympy.abc import x, a, b, k, m, n\n \n     expr = Sum(k**k, (k, 0, n))\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..88aefba 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -705,7 +705,32 @@ def test_uniq():\n         [2, 3, 4, [2], [1], [3]]\n \n \n-def test_kbins():\n+def test_modify_while_iterating():\n+    from sympy.utilities.iterables import uniq\n+    from sympy.testing.pytest import raises\n+\n+    # Test with a simple list containing unique elements.\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    # Test with a nested list to ensure it handles different data structures.\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    # Additional tests to check various modifications during iteration\n+    f = [1, 2, 3, 4]\n+    raises(RuntimeError, lambda: [f.pop(0) for i in uniq(f)])\n+    \n+    f = ['a', 'b', 'c']\n+    raises(RuntimeError, lambda: [f.append('d') for i in uniq(f)])\n+\n+    # Ensure that iterating without modification does not raise an error\n+    f = [1, 2, 3, 4]\n+    try:\n+        for i in uniq(f):\n+            pass  # Just iterate, no modification\n+    except RuntimeError:\n+        assert False, \"Unexpected RuntimeError raised\"\n     assert len(list(kbins('1123', 2, ordered=1))) == 24\n     assert len(list(kbins('1123', 2, ordered=11))) == 36\n     assert len(list(kbins('1123', 2, ordered=10))) == 10\n",
  "django__django-11797": "",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..9279033 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,6 +546,28 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n+    def test_subquery_sql_generation(self):\n+        # Import necessary modules\n+        from django.db import connection\n+        from apps.models import App\n+        # Create a Subquery instance\n+        subquery_instance = Subquery(App.objects.all())\n+        # Assert that subquery attribute is set to True\n+        self.assertTrue(subquery_instance.query.subquery)\n+        # Get SQL compiler\n+        compiler = subquery_instance.query.get_compiler(connection=connection)\n+        # Generate SQL and check correctness\n+        generated_sql, _ = subquery_instance.as_sql(compiler, connection)\n+        expected_start = '(SELECT '\n+        expected_end = ' FROM \"apps_app\")'\n+        # Assert SQL starts with '(SELECT ' and ends with ')'\n+        self.assertTrue(generated_sql.startswith(expected_start))\n+        self.assertTrue(generated_sql.endswith(expected_end))\n+        # Verify that no unintentional changes occurred to the base query\n+        base_query_sql = str(App.objects.all().query)\n+        self.assertIn('SELECT', base_query_sql)\n+        self.assertIn('FROM \"apps_app\"', base_query_sql)\n+\n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n",
  "django__django-15819": "",
  "django__django-16408": "",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..b8accc8 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -9,12 +10,16 @@ import warnings\n \n import numpy as np\n import pytest\n+import platform\n from PIL import Image\n \n import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+import pickle\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n+from matplotlib.figure import Figure\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..fc18540 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,4 +1,8 @@\n+\n from itertools import product\n+import seaborn as sns\n+from seaborn._oldcore import categorical_order\n+import pytest\n import numpy as np\n import matplotlib as mpl\n import matplotlib.pyplot as plt\n@@ -1623,7 +1627,23 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_scatterplot_with_categorical_hue(self):\n+        # Load iris dataset\n+        iris = sns.load_dataset(\"iris\")\n+        \n+        # Create a PairGrid\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        \n+        try:\n+            # Attempt to map scatterplot with a categorical hue\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            error_occurred = False\n+        except TypeError:\n+            error_occurred = True\n+        \n+        # Assert no TypeError occurs\n+        assert not error_occurred, \"TypeError should not occur when mapping scatterplot with categorical hue.\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..19a4cfa 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,6 +323,8 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n+import pytest\n+\n def test_excinfo_exconly():\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n@@ -347,7 +349,17 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n-def test_excinfo_for_later():\n+def test_str_with_pytest_raises():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+    assert str(excinfo) == repr(excinfo), \"The str of excinfo should match its repr unless .value is used\"\n+\n+def test_normal_exception_catch():\n+    try:\n+        raise LookupError(\"A\\nB\\nC\")\n+    except LookupError as e:\n+        assert str(e) == \"A\\nB\\nC\"\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..bbd34e9 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -404,6 +404,12 @@ class TestCustomConftests:\n         testdir.makepyfile(\"def test_x(): pass\")\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+    def test_shortcut_collect_only(self, testdir):\n+        testdir.makepyfile(\"def test_y(): pass\")\n+        result = testdir.runpytest(\"-co\")\n+        result.stdout.fnmatch_lines([\"*test_y*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n@@ -434,6 +440,12 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+    def test_shortcut_collect_only(self, testdir):\n+        testdir.makepyfile(\"def test_y(): pass\")\n+        result = testdir.runpytest(\"-co\")\n+        result.stdout.fnmatch_lines([\"*test_y*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..62bd34d 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -90,6 +90,17 @@ def missing_attr(c,\n     # type: (...) -> str\n     return a + (b or \"\")\n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n \n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n@@ -98,4 +109,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..a12e6d3 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,22 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import symbols, Sum\n+from sympy.matrices import MatrixSymbol, Identity\n \n-def test_Identity_doit():\n+def test_identity_matrix_sum():\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+    \n+    # Sum of all elements in the identity matrix should be 'n'\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n+    # Specific checks for smaller matrices\n+    In_3 = Identity(3)\n+    assert Sum(Sum(In_3[i, j], (i, 0, 2)), (j, 0, 2)).doit() == 3\n+\n+    In_2 = Identity(2)\n+    assert Sum(Sum(In_2[i, j], (i, 0, 1)), (j, 0, 1)).doit() == 2\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..fdb1e52 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,6 +251,12 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n+def test_issue_latex_fraction_parsing():\n+    from sympy.parsing.latex import parse_latex\n+    expected = ((a**3 + b)/c)/(1/(c**2))\n+    parsed_expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    assert parsed_expr == expected, f\"Expected: {expected}, but got: {parsed_expr}\"\n+\n # These bad LaTeX strings should raise a LaTeXParsingError when parsed\n BAD_STRINGS = [\n     r\"(\",\n"
}