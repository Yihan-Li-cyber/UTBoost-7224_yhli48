{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..afe9d88 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -52,7 +52,20 @@ compound_models = {\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n-            )\n+            ),\n+    'nested_cm1': ((m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5))),\n+                   (np.array([False, False, True, True]),\n+                    np.array([[True,  True, False, False],\n+                              [True,  True, False, False],\n+                              [False, False, True,  False],\n+                              [False, False, False, True]]))),\n+    'nested_cm2': ((m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)),\n+                   (np.array([False, False, True, True, True]),\n+                    np.array([[True,  True, False, False, False],\n+                              [True,  True, False, False, False],\n+                              [False, False, True,  False, False],\n+                              [False, False, False, True,  False],\n+                              [False, False, False, False, True]])))\n }\n \n \n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..b51f64f 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,13 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+from astropy.table import QTable\n+import astropy.units as u\n+import numpy as np\n+from io import StringIO\n \n from .common import assert_almost_equal, assert_equal\n \n@@ -184,4 +189,44 @@ Col1      Col2 Col3 Col4\n  2.4 's worlds    2    2\n ==== ========= ==== ====\n \"\"\",\n-    )\n+    )\n+\n+\n+def test_rst_write_with_header_rows():\n+    \"\"\"Test writing a table with header_rows specified for RST format\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.count})\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    expected = [\n+        \"===== ========\",\n+        \" wave response\",\n+        \"  nm      ct  \",\n+        \"===== ========\",\n+        \"350.0      0.7\",\n+        \"950.0      1.2\",\n+        \"===== ========\",\n+    ]\n+    assert out.getvalue().splitlines() == expected\n+\n+def test_rst_round_trip_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified for RST format\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..a5a43a8 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -43,7 +43,23 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n \n-def test_roundtrip(tmp_path):\n+import pytest\n+import numpy as np\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip(tmp_path, lowercase):\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..d1d667b 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,47 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+from astropy.nddata import NDDataRef\n+import numpy as np\n+import pytest\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # Check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..3815404 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,24 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_d_exponent_replacement_in_ascii(self):\n+        \"\"\"\n+        Test to ensure that D exponents are properly handled in ascii tables.\n+        This specifically checks if E is correctly replaced by D in floating point\n+        numbers when the format contains a 'D'.\n+        \"\"\"\n+        # Create a simple table with a floating point column\n+        r1 = np.array([11.0, 12.0])\n+        c1 = fits.Column(name='col1', format='D12.4', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+        hdu.writeto(self.temp('test_d_exponent_replacement.fits'), overwrite=True)\n+        \n+        with open(self.temp('test_d_exponent_replacement.fits')) as f:\n+            content = f.read()\n+            # Check for the presence of 'D' in the ASCII representation\n+            assert '1.1000D+01' in content\n+            assert '1.2000D+01' in content\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..30ae60e 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -67,6 +67,25 @@ class TestSerialization(SimpleTestCase):\n \n class TestValidation(SimpleTestCase):\n \n+    def test_invalid_formats(self):\n+        field = models.DurationField()\n+        invalid_values = [\n+            '14:00',  # Interpreted as minutes and should raise error if seconds are required\n+            '01:15:',  # Missing seconds\n+            '1 :15:30',  # Extra space\n+            '1:15:30:2',  # Too many components\n+            '1 01:15:30.',  # Trailing dot\n+        ]\n+        for value in invalid_values:\n+            with self.assertRaises(exceptions.ValidationError) as cm:\n+                field.clean(value, None)\n+            self.assertEqual(cm.exception.code, 'invalid')\n+            self.assertEqual(\n+                cm.exception.message % cm.exception.params,\n+                f\"'{value}' value has an invalid format. \"\n+                \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+            )\n+\n     def test_invalid_string(self):\n         field = models.DurationField()\n         with self.assertRaises(exceptions.ValidationError) as cm:\n@@ -75,7 +94,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +103,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..5ffa606 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,7 +238,17 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\u000A',\n         ]\n+        invalid_usernames_with_trailing_newline = [\n+            'validUsername\\n',\n+            'anotherValidUser\\n',\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames_with_trailing_newline:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -251,11 +261,29 @@ class UsernameValidatorsTests(SimpleTestCase):\n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames_with_trailing_newline = [\n+            'validAscii\\n',\n+            'glenn\\n',\n+            \"en\\u2013dash\", 'trailingnewline\\u000A',\n+        ]\n+        invalid_usernames_with_trailing_newline = [\n+            'validUsername\\n',\n+            'anotherValidUser\\n',\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames_with_trailing_newline:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames_with_trailing_newline:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n                 v(valid)\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..59c6988 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,10 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..8d0e1c1 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -464,7 +466,33 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Test that deleting a model instance without dependencies clears its PK\n+        u = User.objects.create()\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))  # Ensure the model can be fast-deleted\n+        u.delete()\n+        self.assertIsNone(u.pk)  # Verify the PK is set to None after deletion\n+\n+    def test_delete_instance_with_no_dependencies(self):\n+        # Test the deletion of a model with no FK dependencies leads to PK being None\n+        user = User.objects.create(username=\"testuser\")\n+        self.assertIsNotNone(user.pk)\n+        user.delete()\n+        # Assert the PK is set to None once the user is deleted\n+        self.assertIsNone(user.pk)\n+\n+    def test_delete_instance_with_no_dependencies_after_refresh(self):\n+        # Test the deletion and re-fetching of a model with no dependencies\n+        user = User.objects.create(username=\"testuser\")\n+        self.assertIsNotNone(user.pk)\n+        user_id = user.pk\n+        user.delete()\n+        self.assertIsNone(user.pk)\n+\n+        # Try to fetch the user again\n+        fetched_user = User.objects.filter(pk=user_id).first()\n+        self.assertIsNone(fetched_user)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..6d1d5d0 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.db.utils import IntegrityError\n \n from .models import Proxy, UserProxy\n \n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..6a0d710 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -3,6 +3,9 @@ import os\n import py_compile\n import shutil\n import sys\n+import os\n+import sys\n+import shutil\n import tempfile\n import threading\n import time\n@@ -133,7 +136,32 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((module,), frozenset()), frozenset())\n \n \n-class TestCommonRoots(SimpleTestCase):\n+class TestManagePyReload(SimpleTestCase):\n+    def setUp(self):\n+        # Create a temporary manage.py file\n+        self.manage_py = self.temporary_file('manage.py')\n+        self.manage_py.write_text(\n+            \"def main():\\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\\n    print('Initial run')\\n\"\n+        )\n+\n+    def test_modify_manage_py_triggers_reload(self):\n+        \"\"\"\n+        Ensure modifying manage.py triggers a reload.\n+        \"\"\"\n+        # Ensure the file is initially found\n+        self.assertFileFound(self.manage_py)\n+\n+        # Simulate running manage.py\n+        main_module = sys.modules['__main__']\n+        main_module.__file__ = str(self.manage_py)\n+\n+        # Modify manage.py\n+        self.manage_py.write_text(\n+            \"def main():\\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\\n    print('Modified run')\\n\"\n+        )\n+\n+        # Ensure the change is detected\n+        self.assertFileFound(self.manage_py)\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..44ef238 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -136,11 +136,42 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         main_module = sys.modules['__main__']\n         self.assertFileFound(Path(main_module.__file__))\n \n-    def test_main_module_without_file_is_not_resolved(self):\n+    def test_path_with_embedded_null_bytes(self):\n+        for path in (\n+            'embedded_null_byte\\x00.py',\n+            'di\\x00rectory/embedded_null_byte.py',\n+            '/Userz/kez/invalid\\x00path/',\n+        ):\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+\n+    def test_path_without_null_bytes(self):\n+        paths = (\n+            '/Userz/validpath/file1.py',\n+            '/Userz/another_validpath/file2.py',\n+        )\n+        expected_paths = {Path(p).resolve(strict=False).absolute() for p in paths}\n+        actual_paths = autoreload.iter_modules_and_files((), frozenset(paths))\n+        self.assertEqual(actual_paths, expected_paths)\n+\n+    def test_module_without_file_ignores_null_byte(self):\n+        fake_main = types.ModuleType('__main__')\n+        fake_main.__file__ = 'fake\\x00path/fake.py'\n+        results = autoreload.iter_modules_and_files((fake_main,), frozenset())\n+        self.assertEqual(results, frozenset())\n         fake_main = types.ModuleType('__main__')\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n+import sys\n+import types\n+from pathlib import Path\n+from django.test import SimpleTestCase\n+from django.utils import autoreload\n+\n class TestCommonRoots(SimpleTestCase):\n     def test_common_roots(self):\n         paths = (\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..ea8690c 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -8,6 +8,9 @@ import threading\n from io import StringIO\n from pathlib import Path\n from unittest import mock\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n+from django.test import override_settings\n \n from django.core import mail\n from django.core.files.uploadedfile import SimpleUploadedFile\n@@ -242,6 +245,28 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n+    @override_settings(DEBUG=True)\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        When DEBUG is True, raising Http404 in a path converter's\n+        to_python method should result in a technical 404 response.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+            self.assertContains(response, 'Technical details:', status_code=404)\n+\n+    @override_settings(DEBUG=False)\n+    def test_plain_404_converter_raise_404(self):\n+        \"\"\"\n+        When DEBUG is False, raising Http404 in a path converter's\n+        to_python method should result in a plain 404 response.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertNotContains(response, 'Technical details:')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n     def test_handle_db_exception(self):\n         \"\"\"\n         Ensure the debug view works when a database exception is raised by\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..3f9fa7b 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -98,7 +98,31 @@ class CharFieldTests(SimpleTestCase):\n         field = Model._meta.get_field('field')\n         self.assertEqual(field.check(), [])\n \n-    def test_missing_max_length(self):\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n         class Model(models.Model):\n             field = models.CharField()\n \n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..753f1e1 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -307,7 +308,30 @@ class ETagProcessingTests(unittest.TestCase):\n         self.assertEqual(quote_etag('W/\"etag\"'), 'W/\"etag\"')  # quoted, weak\n \n \n+from unittest import mock\n+\n class HttpDateProcessingTests(unittest.TestCase):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_edge_cases(self, mocked_datetime):\n+        # This test checks the specific edge cases for the two-digit year rule.\n+        \n+        # Possible current dates for mocking\n+        recent_datetime_2023 = datetime(2023, 11, 6, 8, 49, 37)\n+        recent_datetime_2050 = datetime(2050, 11, 6, 8, 49, 37)\n+        \n+        # Set different current years to test against the two-digit future year rule.\n+        test_cases = [\n+            (recent_datetime_2023, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (recent_datetime_2023, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (recent_datetime_2050, 'Wednesday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (recent_datetime_2050, 'Friday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+        ]\n+\n+        for current_datetime, rfc850_string, expected_date in test_cases:\n+            with self.subTest(rfc850_string=rfc850_string):\n+                mocked_datetime.utcnow.return_value = current_datetime\n+                parsed = parse_http_date(rfc850_string)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n     def test_http_date(self):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n",
  "django__django-11964": "",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..c65f7f4 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,7 +168,18 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n-    def test_iterator_choices(self):\n+    def test_overriding_FIELD_display(self):\n+        \"\"\"\n+        Test if get_FIELD_display can be overridden in Django 2.2+\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"\n         get_choices() works with Iterators.\n         \"\"\"\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..06b81e3 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -14,4 +14,5 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.modules_view, name='modules'),\n+]\n",
  "django__django-12284": "",
  "django__django-12286": "",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..c0d3871 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -170,7 +170,16 @@ class UtilsTests(SimpleTestCase):\n         expected = '<img src=\"%sadmin/img/icon-unknown.svg\" alt=\"None\" />' % settings.STATIC_URL\n         self.assertHTMLEqual(display_value, expected)\n \n-        display_value = display_for_field(None, models.DecimalField(), self.empty_value)\n+    def test_jsonfield_display_for_field_readonly(self):\n+        # A test for JSONField when marked as readonly to verify correct JSON representation\n+        tests = [\n+            ({\"foo\": \"bar\"}, json.dumps({\"foo\": \"bar\"})),\n+            ({\"a\": [1, 2, 3]}, json.dumps({\"a\": [1, 2, 3]})),\n+            ({\"a\": {\"nested\": \"dict\"}}, json.dumps({\"a\": {\"nested\": \"dict\"}})),\n+        ]\n+        for value, expected in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(display_for_field(value, models.JSONField(), self.empty_value), expected)\n         self.assertEqual(display_value, self.empty_value)\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..c9926fe 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +6,8 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TransactionTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -17,8 +19,60 @@ def get_connection_copy():\n     )\n     return test_connection\n \n+class TestDeserializeDbFromString(TransactionTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"related_objects\": [], \"obj_ref\": 1}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_foreign_key_integrity_error(self):\n+        # Test that foreign keys are respected and no integrity errors occur.\n+        # This should pass with the application of transaction.atomic.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        # Simulate the serialized-db loading and ensure FK integrity is maintained.\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=1)\n+        obj_ref = ObjectReference.objects.get(pk=1)\n+        self.assertIsNotNone(obj)\n+        self.assertEqual(obj_ref.obj, obj)\n \n-class TestDbSignatureTests(SimpleTestCase):\n+    def test_empty_serialized_data(self):\n+        # Test deserialization with empty data, should not raise errors.\n+        connection.creation.deserialize_db_from_string(\"[]\")\n+        self.assertFalse(Object.objects.exists())\n+        self.assertFalse(ObjectReference.objects.exists())\n     def test_default_name(self):\n         # A test db name isn't set.\n         prod_name = 'hodor'\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..b8ca7a2 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,7 +159,42 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_relationship_model_with_foreign_key_to_wrong_model(self):\n+    def test_corrected_many_to_many_relationship_hint(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through=\"IntermediaryModel\")\n+\n+        class IntermediaryModel(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        errors = field.check(from_model=Group)\n+        self.assertTrue(any(\n+            error.hint == 'If you want to create a recursive relationship, use ManyToManyField(\"self\", through=\"IntermediaryModel\").'\n+            for error in errors\n+        ))\n+\n+    def test_correct_hint_on_through_field_missing(self):\n+        class Author(models.Model):\n+            pass\n+\n+        class Book(models.Model):\n+            authors = models.ManyToManyField('Author', through=\"MissingThroughFieldsModel\")\n+\n+        class MissingThroughFieldsModel(models.Model):\n+            author1 = models.ForeignKey(Author, models.CASCADE, related_name='author1')\n+            author2 = models.ForeignKey(Author, models.CASCADE, related_name='author2')\n+\n+        field = Book._meta.get_field('authors')\n+        errors = field.check(from_model=Book)\n+        self.assertTrue(any(\n+            \"through_fields\" in error.hint\n+            for error in errors\n+        ))\n         class WrongModel(models.Model):\n             pass\n \n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..dc49969 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1240,6 +1240,86 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleanse_setting('password', 'super_secret'),\n             reporter_filter.cleansed_substitute,\n         )\n+    \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_lists(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": \"value\"},\n+                {\"token\": \"value\"},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": reporter_filter.cleansed_substitute},\n+                {\"token\": reporter_filter.cleansed_substitute},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n \n     def test_cleanse_setting_recurses_in_dictionary(self):\n         reporter_filter = SafeExceptionReporterFilter()\n@@ -1248,6 +1328,86 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleanse_setting('SETTING_NAME', initial),\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n+    \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_lists(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": \"value\"},\n+                {\"token\": \"value\"},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": reporter_filter.cleansed_substitute},\n+                {\"token\": reporter_filter.cleansed_substitute},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n \n     def test_request_meta_filtering(self):\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n@@ -1256,6 +1416,86 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.get_safe_request_meta(request)['HTTP_SECRET_HEADER'],\n             reporter_filter.cleansed_substitute,\n         )\n+    \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_lists(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": \"value\"},\n+                {\"token\": \"value\"},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": reporter_filter.cleansed_substitute},\n+                {\"token\": reporter_filter.cleansed_substitute},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n \n     def test_exception_report_uses_meta_filtering(self):\n         response = self.client.get('/raises500/', HTTP_SECRET_HEADER='super_secret')\n@@ -1265,6 +1505,86 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             HTTP_SECRET_HEADER='super_secret',\n             HTTP_ACCEPT='application/json',\n         )\n+    \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_lists(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": \"value\"},\n+                {\"token\": \"value\"},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": reporter_filter.cleansed_substitute},\n+                {\"token\": reporter_filter.cleansed_substitute},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n         self.assertNotIn(b'super_secret', response.content)\n \n \n",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..c0175aa 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -66,7 +66,8 @@ class MigrationTestBase(TransactionTestCase):\n                 ),\n             )\n \n-    def assertIndexNotExists(self, table, columns):\n+    def assertIndexNotExists(self, table, columns, value=False, using='default', index_type=None):\n+        self.assertIndexExists(table, columns, value, using, index_type)\n         return self.assertIndexExists(table, columns, False)\n \n     def assertConstraintExists(self, table, name, value=True, using='default'):\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..29f53e7 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,6 +697,26 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n+    def test_query_set_delete_inconsistent_results(self):\n+        \"\"\"\n+        Test whether the QuerySet.delete method returns consistent results when no objects are deleted,\n+        regardless of foreign key existence.\n+        \"\"\"\n+        # Case 1: Model with foreign keys\n+        Parent.objects.create(name=\"parent1\")\n+        Child.objects.create(name=\"child1\", parent_id=1)\n+        \n+        deleted, deleted_objs = Parent.objects.filter(name=\"nonexistent\").delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {})\n+\n+        # Case 2: Model without foreign keys\n+        SimpleModel.objects.create(name=\"simple1\")\n+        \n+        deleted, deleted_objs = SimpleModel.objects.filter(name=\"nonexistent\").delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.SimpleModel': 0})\n+\n     def test_fast_delete_combined_relationships(self):\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..d037aec 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -94,6 +94,70 @@ class ASGITest(SimpleTestCase):\n             ),\n         )\n         await communicator.send_input({'type': 'http.request'})\n+\n+from pathlib import Path\n+from django.contrib.staticfiles.handlers import ASGIStaticFilesHandler\n+from django.core.handlers.asgi import ASGIHandler\n+from django.test import AsyncRequestFactory, SimpleTestCase, modify_settings, override_settings\n+from django.utils.http import http_date\n+from channels.testing import ApplicationCommunicator\n+\n+TEST_STATIC_ROOT = Path(__file__).parent / 'project' / 'static'\n+\n+class TestASGIStaticFilesHandler(SimpleTestCase):\n+    async_request_factory = AsyncRequestFactory()\n+\n+    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.staticfiles'})\n+    @override_settings(\n+        STATIC_URL='/static/',\n+        STATIC_ROOT=TEST_STATIC_ROOT,\n+        STATICFILES_DIRS=[TEST_STATIC_ROOT],\n+        STATICFILES_FINDERS=[\n+            'django.contrib.staticfiles.finders.FileSystemFinder',\n+        ],\n+    )\n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(ASGIHandler())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n         response_start = await communicator.receive_output()\n         self.assertEqual(response_start['type'], 'http.response.start')\n         self.assertEqual(response_start['status'], 200)\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..6dfc4c4 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,14 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # New tests for slugify improvements: strip leading/trailing dashes and underscores\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('___This_is_a_test ---', 'this-is-a-test', False),\n+            ('---strip-leading-dashes', 'strip-leading-dashes', False),\n+            ('strip-trailing-dashes---', 'strip-trailing-dashes', False),\n+            ('__strip-leading-underscores', 'strip-leading-underscores', False),\n+            ('strip-trailing-underscores__', 'strip-trailing-underscores', False),\n+            ('__strip-leading-trailing--__', 'strip-leading-trailing', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..9966405 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -99,6 +100,22 @@ class QuerySetSetOperationTests(TestCase):\n         self.assertEqual(len(qs2.union(qs2)), 0)\n         self.assertEqual(len(qs3.union(qs3)), 0)\n \n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertQuerysetEqual(qs3.none(), [], ordered=False)\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n+    def test_combined_union_queries_added_none_behavior(self):\n+        qs1 = Number.objects.filter(num__lte=2)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        union_qs = qs1.union(qs2)\n+        # Verify that `none()` on a union queryset returns an empty result, not all.\n+        self.assertQuerysetEqual(union_qs.none(), [])\n+        # Verify the normal behavior when not using none().\n+        self.assertNumbersEqual(union_qs, [0, 1, 2, 8, 9], ordered=False)\n+\n     def test_limits(self):\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n@@ -313,4 +330,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..fd8c07a 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -8,10 +8,35 @@ from django.db import models\n from django.test import SimpleTestCase\n from django.test.utils import isolate_apps\n \n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n-    def test_single_parent(self):\n+    def test_abstract_inherited_fields_inequality(self):\n+        \"\"\"Test that fields from different models inheriting from an \n+        abstract model are not considered equal.\"\"\"\n+        \n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n \n@@ -347,4 +372,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/models/__init__.py b/tests/auth_tests/models/__init__.py\nindex c6505e4..d1b0da6 100644\n--- a/tests/auth_tests/models/__init__.py\n+++ b/tests/auth_tests/models/__init__.py\n@@ -1,3 +1,4 @@\n+\n from .custom_permissions import CustomPermissionsUser\n from .custom_user import (\n     CustomUser, CustomUserWithoutIsActiveField, ExtensionUser,\n@@ -9,6 +10,7 @@ from .no_password import NoPasswordUser\n from .proxy import Proxy, UserProxy\n from .uuid_pk import UUIDUser\n from .with_foreign_key import CustomUserWithFK, Email\n+from .with_custom_email_field import CustomEmailField\n from .with_integer_username import IntegerUsernameUser\n from .with_last_login_attr import UserWithDisabledLastLoginField\n from .with_many_to_many import (\n@@ -22,4 +24,4 @@ __all__ = (\n     'IntegerUsernameUser', 'IsActiveTestUser1', 'MinimalUser',\n     'NoPasswordUser', 'Organization', 'Proxy', 'UUIDUser', 'UserProxy',\n     'UserWithDisabledLastLoginField',\n-)\n+)\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..83dfbe9 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,6 +19,8 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n@@ -37,7 +39,21 @@ custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates\n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n-class AdminScriptTestCase(SimpleTestCase):\n+class CommandParserTests(SimpleTestCase):\n+\n+    def test_command_parser_uses_argv_properly(self):\n+        \"\"\"\n+        Ensure that the CommandParser in ManagementUtility uses the passed argv\n+        argument rather than sys.argv for the program name.\n+        \"\"\"\n+        custom_argv = ['custom-admin', 'runserver']\n+        \n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None, 'fakecommand']):\n+                execute_from_command_line(custom_argv)\n+        \n+        self.assertIn('usage: custom-admin runserver', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n     def setUp(self):\n         tmpdir = tempfile.TemporaryDirectory()\n         self.addCleanup(tmpdir.cleanup)\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..b612346 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -21,6 +22,52 @@ class ShellCommandTestCase(SimpleTestCase):\n             )\n         self.assertEqual(cm.records[0].getMessage(), __version__)\n \n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        # Test to verify that global variables contain __name__ upon execution.\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        # Test to check that inline function calls work as expected.\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        # Similar test using stdin reads.\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        # Check inline function execution through stdin.\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n     @mock.patch('django.core.management.commands.shell.select')\n     def test_stdin_read(self, select):\n@@ -49,4 +96,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..8b0b7d0 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,7 +1013,22 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_default_verbose_name_plural_from_verbose_name(self):\n+        class DefaultVerboseProfileInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Custom Profile'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [DefaultVerboseProfileInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        \n+        # Since verbose_name_plural is not explicitly set, it should default to the plural form of verbose_name\n+        self.assertContains(response, '<h2>Custom Profiles</h2>')  # Assuming default Django behavior of adding 's'\n+        self.assertContains(response, 'Add another Custom Profile')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..b7ba31e 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -582,18 +582,57 @@ class TestQuerying(TestCase):\n \n     def test_isnull_key(self):\n         # key__isnull=False works the same as has_key='key'.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n             self.objs[:3] + self.objs[5:],\n         )\n+        # Additional test to specifically catch JSON null behavior on SQLite and Oracle.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__k__isnull=True),\n+            self.objs[:3] + self.objs[5:],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=False),\n             [self.objs[3], self.objs[4]],\n         )\n+        # Additional test to specifically catch JSON null behavior on SQLite and Oracle.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__k__isnull=True),\n+            self.objs[:3] + self.objs[5:],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n         )\n+        # Additional test to specifically catch JSON null behavior on SQLite and Oracle.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__k__isnull=True),\n+            self.objs[:3] + self.objs[5:],\n+        )\n \n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n",
  "django__django-13768": "",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..5befcd2 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -401,6 +401,26 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             pass\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+    def test_explicit_inherited_pk_subclass(self):\n+        class GrandParent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Parent(GrandParent):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_pk_non_auto_primary_key(self):\n+        class Parent(models.Model):\n+            my_id = models.BigAutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n     def test_explicit_pk(self):\n         class Model(models.Model):\n@@ -414,4 +434,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..2737b3f 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -297,6 +297,22 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n+        \n+    def test_modelchoicefield_value_placeholder(self):\n+        # Test to ensure the invalid value is provided in the error message\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        # Use an invalid value that is not in the queryset\n+        # Expect the error message to include the invalid value\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n \n         # ModelMultipleChoiceField\n         e = {\n@@ -307,4 +323,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..8633af9 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -77,8 +77,11 @@ class ChildNullableParent(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n \n \n-class ToFieldChild(models.Model):\n-    parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n \n \n # Multiple paths to the same model (#7110, #7125)\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..7cd9922 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,14 +1,46 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n \n class QTests(SimpleTestCase):\n-    def test_combine_and_empty(self):\n+    def test_dict_keys_with_q(self):\n+        dict_keys_example = {}.keys()\n+        q = Q(x__in=dict_keys_example)\n+        \n+        # Test combining with empty Q using AND\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        \n+        # Test combining with empty Q using OR\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+        \n+        # Test combining with another non-empty Q using OR\n+        q2 = Q(y=2)\n+        combined_q = q | q2\n+        self.assertNotEqual(combined_q, q)\n+        self.assertNotEqual(combined_q, q2)\n+        \n+        # Also ensure no exceptions are raised for these cases\n         q = Q(x=1)\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n \n-    def test_combine_and_both_empty(self):\n+    def test_dict_keys_non_pickleable(self):\n+        # Ensure that non-pickleable types like dict_keys do not raise exceptions\n+        try:\n+            q = Q(x__in={}.keys())\n+            combined_q = q | Q()  # should not raise an error\n+            self.assertEqual(combined_q, q)\n+        except TypeError as e:\n+            self.fail(f\"Combining Q with dict_keys should not raise TypeError, got: {e}\")\n+\n+        try:\n+            combined_q = Q() | q  # should not raise an error\n+            self.assertEqual(combined_q, q)\n+        except TypeError as e:\n+            self.fail(f\"Combining Q with dict_keys should not raise TypeError, got: {e}\")\n         self.assertEqual(Q() & Q(), Q())\n \n     def test_combine_or_empty(self):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..8a7a63c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,6 +28,7 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n+from django.db.models import Exists, OuterRef, Q\n from django.utils.functional import SimpleLazyObject\n \n from .models import (\n@@ -794,6 +795,25 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n+    def test_q_exists_combination_order(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        conditions_and = Q() & Exists(is_ceo)\n+        conditions_or = Q() | Exists(is_poc)\n+\n+        # Test & (AND) commutative property\n+        self.assertCountEqual(\n+            Employee.objects.filter(conditions_and),\n+            Employee.objects.filter(Exists(is_ceo) & Q()),\n+        )\n+\n+        # Test | (OR) commutative property\n+        self.assertCountEqual(\n+            Employee.objects.filter(conditions_or),\n+            Employee.objects.filter(Exists(is_poc) | Q()),\n+        )\n+\n     def test_boolean_expression_combined(self):\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..62e6c34 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1146,6 +1146,11 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import resolve\n+from django.test import SimpleTestCase, override_settings\n+from . import views\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..a104fed 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -67,6 +69,26 @@ class TestDefaultPK(SimpleTestCase):\n                 pass\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -83,6 +105,26 @@ class TestDefaultPK(SimpleTestCase):\n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..966f663 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2217,6 +2217,16 @@ class StartApp(AdminScriptTestCase):\n             \"won't replace conflicting files.\"\n         )\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test that `django-admin startapp` can handle a trailing slash in the target directory.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n     def test_template(self):\n         out, err = self.run_django_admin(['startapp', 'new_app'])\n         self.assertNoOutput(err)\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..1f62650 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,27 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    class ReadOnlyPasswordHashWidgetTest(SimpleTestCase):\n+\n+        def test_label_without_for(self):\n+            \"\"\"Test that the label for ReadOnlyPasswordHashWidget has no 'for' attribute.\"\"\"\n+            class TestForm(forms.Form):\n+                hash_field = ReadOnlyPasswordHashField(widget=ReadOnlyPasswordHashWidget())\n+\n+            bound_field = TestForm()['hash_field']\n+            self.assertIsNone(bound_field.field.widget.id_for_label('id'))\n+            self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n+        def test_widget_render(self):\n+            \"\"\"Test that ReadOnlyPasswordHashWidget renders correctly as non-editable text.\"\"\"\n+            widget = ReadOnlyPasswordHashWidget()\n+            output = widget.render('hash_field', 'some_hashed_value')\n+            self.assertIn('<div', output)\n+            self.assertIn('some_hashed_value', output)\n+            self.assertNotIn('<input', output)\n+            self.assertNotIn('<textarea', output)\n+            self.assertNotIn('<select', output)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..2193405 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,43 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_serialize_type_model(self):\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set()),\n+        )\n+\n+    def test_serialize_custom_field_and_mixin(self):\n+        \"\"\"\n+        Test that custom fields and mixins are serialized correctly with required imports.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+        \n+        class Migration(migrations.Migration):\n+            initial = True\n+            dependencies = []\n+            operations = [\n+                migrations.CreateModel(\n+                    name='MyModel',\n+                    fields=[\n+                        ('name', models.Field(primary_key=True)),\n+                    ],\n+                    options={\n+                        'abstract': False,\n+                    },\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ]\n+        \n+        serialized_migration = MigrationWriter.serialize(Migration)\n+        self.assertIn(\"from django.db import models\", serialized_migration)\n+        self.assertIn(\"('name', models.Field(primary_key=True))\", serialized_migration)\n+        self.assertIn(\"bases=(MyMixin, models.Model)\", serialized_migration)\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..54e8746 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -31,6 +31,18 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n+    def test_reverse_m2m_through_fields_list_hashable(self):\n+        # Retrieve the ManyToManyField from Person\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        # Verify the 'through_fields' is preserved as a list\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        # Create a PersonChild (proxy model)\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        # Verify the inheritance preserves the 'through_fields' correctly\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        # Check hashability\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n+    \n     def test_get_on_intermediate_model(self):\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..aa7c6cd 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -281,7 +281,29 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n+\n+    def test_serialize_result_customization(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n         request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n         request.user = self.superuser\n         with model_admin(Question, PKOrderingQuestionAdmin):\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..6cdc296 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,31 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to check URLs of readonly foreign key fields in different admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,)))\n+        self.assertContains(response, f'href=\"/{admin_site}/admin_views/language/{language.pk}/change/\"')\n+        self.assertContains(response, f'href=\"/{admin_site}/auth/user/{self.superuser.pk}/change/\"')\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        self._test_readonly_foreignkey_links('custom-admin')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..01e8dee 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,13 +1,15 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n \n-from .models import Article, Author, Book, Category, Writer\n+from .models import Article, Author, Book, Category, Writer # Ensure this part stays unchanged as we only add.\n \n \n class ModelChoiceFieldTests(TestCase):\n@@ -341,7 +343,26 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_hashable_in_dict(self):\n+        \"\"\" Test using ModelChoiceIteratorValue as dictionary keys. \"\"\"\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        show_fields = {value_1: ['first_name', 'last_name']}\n+        self.assertIn(value_1, show_fields)\n+        self.assertEqual(show_fields[value_1], ['first_name', 'last_name'])\n+\n+    def test_usage_in_set(self):\n+        \"\"\" Test using ModelChoiceIteratorValue in a set to ensure hashability. \"\"\"\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        values_set = {value_1, value_2}\n+        self.assertIn(value_1, values_set)\n+        self.assertIn(value_2, values_set)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..f66f6b2 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,6 +154,11 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n+    def test_multivaluefield_label(self):\n+        from django.forms import MultiWidget, TextInput\n+        widget = MultiWidget(widgets=[TextInput()])\n+        self.assertEqual(widget.id_for_label('id_test_0'), 'id_test_0')\n+\n     def test_form_as_table_data(self):\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..69835da 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -75,6 +75,18 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             with self.subTest(url=url):\n                 self.assertEqual(f.clean(url), expected)\n \n+    def test_urlfield_clean_malformed(self):\n+        f = URLField()\n+        tests = [\n+            '////]@N.AN',  # Malformed URL causing ValueError\n+            '#@A.bO',      # Another malformed case\n+        ]\n+        msg = 'Enter a valid URL.'\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(value)\n+\n     def test_urlfield_clean_invalid(self):\n         f = URLField()\n         tests = [\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..f014adf 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -197,6 +197,23 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_expressionwrapper_with_inverted_empty_q(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_expressionwrapper_with_inverted_nonempty_q(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[self.b1.pk]), output_field=BooleanField())\n+        )\n+        book_values = {book.pk: book.selected for book in books}\n+        self.assertTrue(all(book_values[pk] for pk in book_values if pk != self.b1.pk))\n+        self.assertFalse(book_values[self.b1.pk])\n+\n     def test_empty_expression_annotation(self):\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..488a7e5 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,6 @@\n+\n+from django.utils.safestring import SafeData, mark_safe\n+\n import json\n import random\n \n@@ -143,7 +146,17 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_extra_tags_preservation(self):\n+        \"\"\"\n+        Test that extra_tags is correctly preserved during encode/decode.\n+        \"\"\"\n+        storage = self.get_storage()\n+        for extra_tags in ['', None, 'some tags']:\n+            with self.subTest(extra_tags=extra_tags):\n+                message = Message(constants.INFO, 'Test message', extra_tags=extra_tags)\n+                encoded = storage._encode(message)\n+                decoded = storage._decode(encoded)\n+                self.assertEqual(decoded.extra_tags, extra_tags)\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..ce03dc6 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -4,8 +4,10 @@ from unittest import mock\n from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n+from pathlib import Path\n \n ROOT = Path(__file__).parent.absolute()\n+BASE_DIR = ROOT  # Assuming BASE_DIR is the same as ROOT\n EXTRA_TEMPLATES_DIR = ROOT / \"templates_extra\"\n \n \n",
  "django__django-15400": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\nindex f0097c4..20687e6 100644\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -331,8 +331,33 @@ class SimpleLazyObjectTestCase(LazyObjectTestCase):\n             self.lazy_wrap(None)\n         finally:\n             sys.settrace(old_trace_func)\n-\n-    def test_none(self):\n+    \n+    def test_radd_with_lazy_and_non_lazy(self):\n+        obj1 = self.lazy_wrap(1)\n+        non_lazy_operand = 5\n+        # Testing 5 + SimpleLazyObject(1)\n+        self.assertEqual(non_lazy_operand + obj1, 6)\n+        \n+        obj2 = self.lazy_wrap(10)\n+        # Testing SimpleLazyObject(10) + SimpleLazyObject(1)\n+        self.assertEqual(obj2 + obj1, 11)\n+        \n+    def test_radd_commutative_property(self):\n+        obj1 = self.lazy_wrap(3)\n+        obj2 = self.lazy_wrap(7)\n+        # Testing commutative property SimpleLazyObject(3) + SimpleLazyObject(7)\n+        self.assertEqual(obj1 + obj2, obj2 + obj1)  # should both equal 10\n+\n+    def test_radd_with_zero(self):\n+        obj1 = self.lazy_wrap(0)\n+        # Testing 0 + SimpleLazyObject(0)\n+        self.assertEqual(0 + obj1, 0)\n+        \n+    def test_radd_with_negative_numbers(self):\n+        obj1 = self.lazy_wrap(-10)\n+        non_lazy_operand = -5\n+        # Testing -5 + SimpleLazyObject(-10)\n+        self.assertEqual(non_lazy_operand + obj1, -15)\n         i = [0]\n \n         def f():\n",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..5947abd 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,36 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test handling of an empty string for If-Modified-Since header.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(\"\", mtime=1))\n+\n+    def test_was_modified_since_valid_date(self):\n+        \"\"\"\n+        Test If-Modified-Since header with a valid date.\n+        \"\"\"\n+        valid_mtime = 1343416141.107817\n+        valid_header = http_date(valid_mtime)\n+        # Assuming the mtime is later than the header's date, it should return True\n+        self.assertTrue(was_modified_since(valid_header, mtime=valid_mtime + 1))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Test If-Modified-Since header with an invalid date.\n+        \"\"\"\n+        invalid_header = \"invalid-date-format\"\n+        # Invalid date should not cause an exception and should be ignored\n+        self.assertTrue(was_modified_since(invalid_header, mtime=1))\n+\n+    def test_was_modified_since_missing_header(self):\n+        \"\"\"\n+        Test behavior when If-Modified-Since header is missing (None).\n+        \"\"\"\n+        # Missing header should be treated like an empty header, returning True\n+        self.assertTrue(was_modified_since(None, mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..0302625 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,7 +1,11 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n \n+import unittest\n+from argparse import ArgumentDefaultsHelpFormatter\n+from django.core.management import CommandParser\n from admin_scripts.tests import AdminScriptTestCase\n \n from django.apps import apps\n@@ -411,7 +415,32 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_formatter_applied(self):\n+        \"\"\"Test that the ArgumentParser uses the custom formatter provided.\"\"\"\n+\n+        class CustomCommand(BaseCommand):\n+            help = '''\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+            '''\n+\n+        custom_formatter = ArgumentDefaultsHelpFormatter\n+        parser = CustomCommand().create_parser(prog_name=\"manage.py\", subcommand=\"tzkt_import\", formatter_class=custom_formatter)\n+\n+        # Use a custom description that includes multiline help and example usage,\n+        # and verify that the newline character handling keeps these lines separate.\n+        help_output = parser.format_help()\n+        \n+        # Check that the help output is as expected.\n+        expected_help_message = (\n+            \"usage: manage.py tzkt_import [-h] [--version] [-v {0,1,2,3}] [--settings SETTINGS] \"\n+            \"[--pythonpath PYTHONPATH] [--traceback] [--no-color] [--force-color] [--skip-checks] \"\n+            \"blockchain target\\n\\nImport a contract from tzkt.\\nExample usage:\\n    ./manage.py tzkt_import 'Tezos Mainnet' \"\n+            \"KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+        )\n+\n+        self.assertIn(expected_help_message, help_output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..d8158f5 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -216,8 +219,25 @@ class TestUtilsHtml(SimpleTestCase):\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"custom\": \"output\"})\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"output\"}</script>',\n+        )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_with_id_and_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"custom\": \"with_id\"})\n+\n+        self.assertHTMLEqual(\n+            json_script({}, element_id=\"test_id\", encoder=CustomDjangoJSONEncoder),\n+            '<script id=\"test_id\" type=\"application/json\">{\"custom\": \"with_id\"}</script>',\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..c76c1e4 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -205,5 +205,13 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             \"check_framework.template_test_apps.different_tags_app\",\n         ]\n     )\n-    def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+    def test_template_tags_with_different_configuration_success(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"different_tags_app.templatetags.different_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..b45c0ae 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -390,6 +390,19 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n+    def test_select_related_only_with_proxy_model(self):\n+        # Setup test data\n+        custom_instance = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom_instance)\n+\n+        # Use select_related and only\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+\n+        # This should not raise any exception and return the expected instance\n+        result = qs.get()\n+        self.assertEqual(result, another_model_instance)\n+        self.assertEqual(result.custom.name, \"Test Name\")\n+\n     def test_proxy_load_from_fixture(self):\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..2f7ab8a 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,6 +151,12 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_new_parameter_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n@@ -183,4 +189,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..23c9bf2 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,12 +1901,33 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+from django.test import TestCase\n+from django.forms.formsets import formset_factory, BaseFormSet\n+from .models import Choice\n \n+...\n+\n+class ManagementFormDeprecationWarningTests(TestCase):\n+    def test_no_management_form_warning(self):\n+        \"\"\"\n+        Ensure no deprecation warning is raised for ManagementForm with the new div template.\n+        \"\"\"\n+        with isolate_lru_cache(get_default_renderer), self.settings(\n+            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+        ):\n+            ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+            formset = ChoiceFormSet()\n+            management_form_str = str(formset.management_form)\n+            # Asserts no deprecation warning is raised during management form rendering\n+\n+    def test_formset_does_not_raise_warning(self):\n+        \"\"\"\n+        Ensure no deprecation warning for entire formset rendering.\n+        \"\"\"\n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n-        ), self.assertRaisesMessage(\n-            RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            formset_str = str(formset)\n+            # Asserts no deprecation warning is raised during formset rendering\n",
  "django__django-16041": "",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..0d64818 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,32 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_whitespace_string(self):\n+        # Check how the function behaves with a whitespace string\n+        self.assertEqual(nformat(\" \", \".\"), \" \") \n+        \n+    def test_integer_zero(self):\n+        # Test zero as input\n+        self.assertEqual(nformat(0, \".\"), \"0\")\n+\n+    def test_float_zero(self):\n+        # Test zero as input but as a float type\n+        self.assertEqual(nformat(0.0, \".\"), \"0.0\")\n+\n+    def test_negative_zero(self):\n+        # Test negative zero as input\n+        self.assertEqual(nformat(-0.0, \".\"), \"0.0\")  # Negative zero should produce \"0.0\" \n+\n+    def test_invalid_type(self):\n+        # Check for how the function behaves with an unsupported type (e.g., lists, dicts)\n+        with self.assertRaises(TypeError):\n+            nformat([], \".\")\n+        with self.assertRaises(TypeError):\n+            nformat({}, \".\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..fbb45da 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,5 +1,8 @@\n+\n import datetime\n import re\n+import urllib.parse\n+from django.urls import reverse\n from unittest import mock\n \n from django.contrib.auth.forms import (\n@@ -882,6 +885,54 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n \n         self.assertTrue(form.is_valid())\n         # original hashed password contains $\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field_with_uuid(self):\n+        user = User.objects.get(username=\"testclient\")\n+        user.uuid = \"22222222-3333-4444-5555-666677778888\"  # Mimicking a UUID field\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        expected_pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.uuid,),\n+        )\n+\n+        expected_pw_change_url_with_pk = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+\n+        self.assertEqual(joined_url, expected_pw_change_url)\n+        self.assertNotEqual(joined_url, expected_pw_change_url_with_pk)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_pk(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via pk.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..554c38e 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,7 +508,24 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n-# RemovedInDjango50Warning\n+from django.test import TestCase\n+from django.urls import reverse\n+from .urls.http import CallableLastmodNoItemsSitemap\n+\n+class SitemapIssueTests(TestCase):\n+    def test_callable_lastmod_no_items(self):\n+        \"\"\"\n+        Test to verify no ValueError is raised when sitemap has no items\n+        and the lastmod is callable.\n+        \"\"\"\n+        index_response = self.client.get(reverse('django.contrib.sitemaps.views.index', \n+                                          kwargs={\"sitemaps\": {\"callable-lastmod\": CallableLastmodNoItemsSitemap}}))\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = (\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n\"\"\"\n+                                  \"\"\"<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n\"\"\"\n+                                  \"\"\"<sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\\n\"\"\"\n+                                  \"\"\"</sitemapindex>\"\"\")\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..0496fe1 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,5 +1,8 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n+import unittest\n+from unittest import mock\n import copy\n import io\n import os\n@@ -1755,7 +1758,37 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n-    def test_empty_cache_file_considered_expired(self):\n+    def test_has_key_race_handling(self):\n+        # Verify that if a FileNotFoundError is encountered, the cache behaves correctly.\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_has_key_concurrent_expiry(self):\n+        # Simulate concurrent access where the file might get deleted by _is_expired.\n+        self.assertIs(cache.add(\"concurrent_key\", \"value\"), True)\n+        original_is_expired = cache._is_expired\n+\n+        def side_effect_expired(file):\n+            # Simulate deletion by concurrently expiring the file.\n+            os.remove(cache._key_to_file(\"concurrent_key\"))\n+            return original_is_expired(file)\n+\n+        with mock.patch.object(cache, \"_is_expired\", side_effect=side_effect_expired):\n+            self.assertIs(cache.has_key(\"concurrent_key\"), False)\n+\n+    def test_has_key_expiry_removal(self):\n+        # Directly test that _is_expired removes the file and has_key returns False afterward.\n+        self.assertIs(cache.add(\"remove_key\", \"value\"), True)\n+        cache_file = cache._key_to_file(\"remove_key\")\n+\n+        # Manually expire the cache by writing an old timestamp.\n+        with open(cache_file, \"wb\") as fh:\n+            fh.write(pickle.dumps((0, \"old_value\")))\n+\n+        self.assertIs(cache.has_key(\"remove_key\"), False)\n+        self.assertFalse(os.path.exists(cache_file))\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n             fh.write(b\"\")\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..8501005 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,6 +1,9 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n@@ -33,7 +36,38 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        # Adding only change permission\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        \n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        # Adding both add and change permissions\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..5698a31 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -26,7 +27,12 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n+    @setup({\"join09\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join09(self):\n+        output = self.engine.render_to_string(\n+            \"join09\", {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"var\": \"<br/>\"}\n+        )\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +84,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..f0db3c6 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -814,6 +814,35 @@ class BulkCreateTests(TestCase):\n             FieldsWithDbColumns.objects.values(\"rank\", \"name\"),\n             [\n                 {\"rank\": 1, \"name\": \"c\"},\n-                {\"rank\": 2, \"name\": \"d\"},\n+                {\"rank\": 2, \"name\": \"d\"} \n             ],\n-        )\n+        )\n+    def test_bulk_create_with_update_conflicts_returns_ids(self):\n+        \"\"\"Test that bulk_create with update_conflicts returns IDs\"\"\"\n+        objs = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        \n+        # Initially create objects\n+        created_objs = TwoFields.objects.bulk_create(objs)\n+        self.assertEqual(len(created_objs), 2)\n+        for obj in created_objs:\n+            self.assertIsNotNone(obj.pk, \"Newly created objects should have a primary key\")\n+\n+        # Update the same objects with conflicts\n+        objs_with_conflict = [\n+            TwoFields(pk=created_objs[0].pk, f1=1, f2=1, name=\"updated_a\"),\n+            TwoFields(pk=created_objs[1].pk, f1=2, f2=2, name=\"updated_b\"),\n+        ]\n+        updated_objs = TwoFields.objects.bulk_create(\n+            objs_with_conflict, \n+            update_conflicts=True, \n+            update_fields=['name'], \n+            unique_fields=['f1', 'f2']\n+        )\n+        \n+        self.assertEqual(len(updated_objs), 2)\n+        for obj in updated_objs:\n+            self.assertIsNotNone(obj.pk, \"Updated objects should retain primary keys\")\n+            self.assertIn(obj.name, [\"updated_a\", \"updated_b\"], \"Names should be updated as specified\")\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..c70bb6a 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1085,8 +1085,28 @@ def test_slider_reset():\n     slider.reset()\n     assert slider.val == 0.5\n \n+import pytest\n+import numpy as np\n+from matplotlib import pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib.widgets import RangeSlider\n+from numpy.testing import assert_allclose\n \n @pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\n+def test_range_slider_initial_value_issue(orientation):\n+    fig, ax = plt.subplots()\n+    initial_val = [0.0, 0.0]\n+    slider = RangeSlider(ax, \"Test Slider\", valmin=0.0, valmax=1.0, valinit=initial_val, orientation=orientation)\n+    \n+    # Verify that initializing with valinit does not cause an error and is properly set\n+    assert_allclose(slider.val, initial_val)\n+    expected_positions = (initial_val\n+                          if orientation == \"horizontal\"\n+                          else list(reversed(initial_val)))\n+\n+    # Check if the handles are positioned at the initial values for horizontal or vertical sliders\n+    handle_positions = [h.get_xdata()[0] for h in slider._handles] if orientation == \"horizontal\" else [h.get_ydata()[0] for h in slider._handles]\n+    assert_allclose(handle_positions, expected_positions)\n def test_range_slider(orientation):\n     if orientation == \"vertical\":\n         idx = [1, 0, 3, 2]\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..7c56740 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -495,8 +495,24 @@ def test_keymaps():\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n-\n-def test_rcparams_reset_after_fail():\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n+def test_figures_persistence_with_get_backend():\n+    # Test to ensure figures created within rc_context persist after calling get_backend\n+    with rc_context():\n+        fig2 = plt.figure()\n+        figure_id_before = id(plt._pylab_helpers.Gcf.figs)\n+        figures_before = dict(plt._pylab_helpers.Gcf.figs)\n+    \n+    get_backend()\n+    \n+    figure_id_after = id(plt._pylab_helpers.Gcf.figs)\n+    figures_after = dict(plt._pylab_helpers.Gcf.figs)\n+    \n+    assert figure_id_before == figure_id_after, \"Gcf.figs should not be re-instantiated\"\n+    assert figures_before == figures_after, \"Figures created in rc_context should persist\"\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..00cc538 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,6 +15,7 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n@@ -28,7 +29,19 @@ def test_aspect_equal_error():\n         ax.set_aspect('equal')\n \n \n-@mpl3d_image_comparison(['bar3d.png'])\n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_axes_3d(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+\n+    ax_test.plot([1, 2, 3], [1, 2, 3], [1, 2, 3])\n+    ax_ref.plot([], [], [])\n+\n+    ax_test.set_visible(False)\n+\n+    # Axes are still present to retain the space allocated by subplots, but no content from the invisible axes is drawn.\n+    # We expect the effect on the figure to be like the reference subplot with no data plotted.\n+    fig_ref.subplots_adjust(wspace=1)  # Ensure figures have the same layout\n def test_bar3d():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..7b19bf1 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1787,6 +1787,43 @@ def test_text_3d(fig_test, fig_ref):\n \n \n @check_figures_equal(extensions=[\"png\"])\n+def test_line3d_no_attribute_verts3d():\n+    # This test replicates the bug situation where _verts3d attribute was missing\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    # Initial valid state\n+    x_s_0 = np.array([0, 1])\n+    x_e_0 = np.array([1, 2])\n+    y_s_0 = np.array([0, 1])\n+    y_e_0 = np.array([1, 2])\n+    z_s_0 = np.array([0, 1])\n+    z_e_0 = np.array([1, 2])\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection=\"3d\")\n+\n+    # First rendering with array-like input\n+    ax.plot(x_s_0, x_e_0, zdir='z')\n+    plt.close(fig)\n+\n+    # Second state with integer inputs\n+    x_s_0 = np.array([1, 2])\n+    x_e_0 = np.array([2, 3])\n+    y_s_0 = np.array([1, 2])\n+    y_e_0 = np.array([2, 3])\n+    z_s_0 = np.array([1, 2])\n+    z_e_0 = np.array([2, 3])\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection=\"3d\")\n+\n+    try:\n+        ax.plot(x_s_0, y_s_0, z_e_0, zdir='z')\n+        plt.close(fig)\n+    except AttributeError as e:\n+        if \"_verts3d\" in str(e):\n+            raise AssertionError(\"Line3D object should handle dynamic input change without AttributeError\")\n def test_pathpatch_3d(fig_test, fig_ref):\n     ax = fig_ref.add_subplot(projection=\"3d\")\n     path = Path.unit_rectangle()\n",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..6381c7c 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -773,8 +773,24 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n     for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n         assert mpl.colors.same_color(text.get_color(), color)\n \n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='Sample Data')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n+def test_draggable_state_toggle():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='Toggle Test')\n+    leg = ax.legend(draggable=False)\n+    assert not leg.get_draggable()\n+    \n+    leg.set_draggable(True)\n+    assert leg.get_draggable()\n \n-def test_get_set_draggable():\n+    leg.set_draggable(False)\n+    assert not leg.get_draggable()\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..f388b9d 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -255,6 +255,28 @@ def test_linedash():\n \n     assert buf.tell() > 0\n \n+import io\n+from matplotlib.figure import Figure\n+\n+def test_empty_line():\n+    # Test case for an empty line in multi-line text annotation\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.getvalue() != b\"\"  # Ensures output is generated\n+\n+def test_title_empty_line():\n+    # Test case for an empty line in title\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.set_title('\\nLower title')\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.getvalue() != b\"\"  # Ensures output is generated\n \n def test_no_duplicate_definition():\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..1113fd4 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,20 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+# New test function to verify the absence of UserWarning when constrained_layout=False\n+@pytest.mark.parametrize('constrained, expect_warning', [\n+    (False, False),\n+    (True, True),\n+])\n+def test_constrained_layout_warning(constrained, expect_warning):\n+    import warnings\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained)\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        plt.subplots_adjust(wspace=0)\n+        assert (len(w) > 0) == expect_warning\n+        if expect_warning:\n+            assert issubclass(w[-1].category, UserWarning)\n+            assert \"incompatible with subplots_adjust\" in str(w[-1].message)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..c016714 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -30,7 +30,19 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n-def test_resampled():\n+import matplotlib.pyplot as plt\n+import pytest\n+from numpy.testing import assert_array_equal\n+import numpy as np\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_colormap_no_deprecation_warnings(dtype):\n+    cm = plt.get_cmap('viridis')\n+    # Use dtype to ensure dtype handling does not trigger deprecation warnings\n+    with pytest.warns(None) as record:\n+        _ = cm(dtype(0))\n+    # Ensure no warnings of any kind were raised\n+    assert len(record) == 0\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..52cef86 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,27 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+\n+def test_figure_with_draggable_legend():\n+    # Create the figure and plot\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2, 3, 4], [40, 43, 45, 47, 48], label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    \n+    # Try to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Check that \"FigureCanvasAgg\" is not in the pickle stream, which would indicate a problem\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Attempt to unpickle to verify the figure can be reconstituted\n+    loaded = pickle.loads(pkl)\n+    loaded.canvas.draw()\n+    plt.close(loaded)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..c3ed1f8 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -90,6 +90,31 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n+def test_pickle_aligned_labels_figure():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    loaded_fig = pickle.loads(pkl.getbuffer())\n+    loaded_fig.canvas.draw()\n+    plt.close(loaded_fig)\n+\n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..2d8b12c 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -445,8 +445,28 @@ def test_paddedbox():\n     pb = PaddedBox(ta, pad=10, patch_attrs={'facecolor': 'b'})\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mplcursors\n+\n+def test_mplcursor_with_matplotlib_3_7_1():\n+    \"\"\" Test mplcursor with matplotlib 3.7.1 for AttributeError \"\"\"\n+    x = np.arange(1, 11)\n+    y1 = x\n \n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+    \n+    mplcursors.cursor(ax)\n+    \n+    # Simulate clicks and check if AttributeError is raised\n+    try:\n+        for _ in range(5):  # arbitrary number of trials to simulate multiple clicks\n+            fig.canvas.draw()\n+        assert True, \"No error triggered\"\n+    except AttributeError as e:\n+        assert False, f\"AttributeError encountered: {e}\"\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..81542d3 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,8 +9,44 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n+    \n+    def test_missing_data(self, df):\n+        groupby = GroupBy([\"group\"])\n+        \n+        # Create a copy of df and introduce NaN values in a section\n+        df_missing = df.copy()\n+        df_missing.iloc[5:10] = np.nan\n+        \n+        # Compute results with and without NaN values\n+        res_with_nan = PolyFit()(df_missing[[\"x\", \"y\"]], groupby, \"x\", {})\n+        res_without_nan = PolyFit()(df_missing[[\"x\", \"y\"]].dropna(), groupby, \"x\", {})\n+        \n+        # Compare results\n+        assert_frame_equal(res_with_nan, res_without_nan)\n+\n+    def test_all_missing_data(self, df):\n+        groupby = GroupBy([\"group\"])\n+        \n+        # Create a copy of df and set all values in 'x' to NaN\n+        df_all_missing = df.copy()\n+        df_all_missing[\"x\"] = np.nan\n+        \n+        # Test PolyFit with all NaN in 'x'\n+        res_with_all_nan = PolyFit()(df_all_missing[[\"x\", \"y\"]], groupby, \"x\", {})\n+        \n+        # Expect empty result\n+        assert res_with_all_nan.empty\n+\n+    def test_no_missing_data(self, df):\n+        groupby = GroupBy([\"group\"])\n+        \n+        # Ensure that PolyFit works without any missing data\n+        original_res = PolyFit()(df[[\"x\", \"y\"]], groupby, \"x\", {})\n+        copy_res = PolyFit()(df[[\"x\", \"y\"]].copy(), groupby, \"x\", {})\n+        assert_frame_equal(original_res, copy_res)\n \n     @pytest.fixture\n     def df(self, rng):\n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..283b158 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -1439,6 +1439,22 @@ class TestPairGrid:\n         g1 = ag.pairplot(self.df, hue=\"a\")\n         assert isinstance(g1.legend, mpl.legend.Legend)\n \n+    def test_pairplot_column_multiindex(self):\n+        # Define a MultiIndex for columns\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        # Create a DataFrame using the MultiIndex columns\n+        df = pd.DataFrame(self.df[[\"x\", \"y\"]].values, columns=cols)\n+        # Attempt to create a pairplot with the MultiIndex DataFrame\n+        g = ag.pairplot(df)\n+        # Assert that the diagonal variables are recognized correctly\n+        assert g.diag_vars == list(cols)\n+        # Ensure the pairplot is created without KeyErrors\n+        for ax in g.diag_axes:\n+            assert ax.has_data()\n+        for ax_row in g.axes:\n+            for ax in ax_row:\n+                assert ax.has_data()\n+\n         g2 = ag.pairplot(self.df)\n         assert g2.legend is None\n \n",
  "pallets__flask-4992": "",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..7f4b4cc 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,34 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import pytest\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import DecodeError, Timeout\n+from requests.packages.urllib3.exceptions import ProtocolError\n+\n+def httpbin(endpoint):\n+    \"\"\"A helper function to create URLs for httpbin.org endpoints.\"\"\"\n+    return f'http://httpbin.org/{endpoint}'\n+\n+def test_decode_error():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+    \n+    with pytest.raises(DecodeError):\n+        # We're going to fake a DecodeError by manually raising it,\n+        # as true server responses aren't easily faked for a unit test.\n+        raise DecodeError(\"This is a fake DecodeError\")\n+\n+def test_timeout_error():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    with pytest.raises(Timeout):\n+        # Simulate a Timeout by causing a real timeout. \n+        # httpbin.org's delay endpoint can delay response; we set a timeout of 1 second.\n+        s.get(httpbin('delay/3'), timeout=1)\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1691,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..7439a3b 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,41 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_iter_content_when_content_is_json(self):\n+        \"\"\"\n+        Verifies that iter_content returns unicode chunks for a JSON content-type.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'{\"key\": \"value\"}')\n+        r.encoding = 'utf-8'\n+        r.headers['Content-Type'] = 'application/json'\n+\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"All chunks should be unicode strings\"\n+        \n+    def test_response_iter_content_without_encoding(self):\n+        \"\"\"\n+        Checks if iter_content still works as expected when encoding is None.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = None\n+\n+        chunks = r.iter_content(decode_unicode=True)\n+        # In this case, without encoding, chunks will be bytes since decoding isn't possible\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"All chunks should be bytes\"\n+\n+    def test_response_iter_content_utf16_encoding(self):\n+        \"\"\"\n+        Verifies that iter_content correctly decodes with different encodings like utf-16.\n+        \"\"\"\n+        content = '\u6587\u5b57\u5316\u3051'.encode('utf-16')\n+        r = requests.Response()\n+        r.raw = io.BytesIO(content)\n+        r.encoding = 'utf-16'\n+\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"All chunks should be unicode strings (utf-16)\"\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..812e4e1 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -744,6 +744,46 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             assert 'foo' in response.text\n             assert 'bar' in response.text\n \n+    def test_combine_single_and_list_hooks(self):\n+        \"\"\"Test combining single hook functions and list of hooks\"\"\"\n+        \n+        def hook_to_upper(args):\n+            if 'text' in args:\n+                args['text'] = args['text'].upper()\n+            return args\n+\n+        def hook_to_lower(args):\n+            if 'text' in args:\n+                args['text'] = args['text'].lower()\n+            return args\n+\n+        hooks = {\n+            'args': [\n+                add_foo_header,       # From original test\n+                add_bar_header,       # From original test\n+                hook_to_upper\n+            ]\n+        }\n+\n+        single_hook = hook_to_lower\n+\n+        r = requests.models.Request(hooks=hooks)\n+        r.register_hook('args', single_hook)\n+\n+        callable_hooks = r.hooks['args']\n+        for hook in callable_hooks:\n+            assert callable(hook), f\"Hook {hook} should be callable\"\n+\n+        # Simulate arguments with an initial `text` value\n+        args = {'headers': {}, 'text': 'Hello'}\n+        for hook in callable_hooks:\n+            args = hook(args)\n+        \n+        # Verifying that all hooks applied their transformations correctly\n+        assert args['headers']['X-Foo'] == 'foo'\n+        assert args['headers']['X-Bar'] == 'bar'\n+        assert args['text'] == 'HELLO'  # Upper case is the last transformation\n+\n     def test_session_persistent_cookies(self):\n \n         s = requests.session()\n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..6f10cf9 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -19,6 +19,7 @@\n \"\"\"Tests for the misc checker.\"\"\"\n \n from pylint.checkers import misc\n+from pylint.testutils import set_config\n from pylint.testutils import CheckerTestCase, MessageTest, _tokenize_str, set_config\n \n \n@@ -119,4 +120,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..37d7499 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -56,6 +56,14 @@ reports = \"yes\"\n     check_configuration_file_reader(runner)\n \n \n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from _pytest.capture import CaptureFixture\n+from pathlib import Path\n+\n+EMPTY_MODULE = Path(__file__).parent / \"empty_module.py\"\n+\n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..706b838 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,27 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self):\n+        \"\"\"Verify that 'ignore-paths' works with '--recursive=y'.\"\"\"\n+        with _test_sys_path():\n+            # Removing unwanted paths \n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                base_dir = join(HERE, \"regrtest_data\", \"directory\")\n+                os.chdir(base_dir)\n+                self._runtest(\n+                    [\n+                        \".\", \n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..bd278f3 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,18 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_module_with_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test linting on a module with the same name as its containing directory.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create directory and files\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Run pylint on the directory\n+        linter.check([\"a\"])\n+    # Ensure that no linting error on not finding __init__.py\n+    # As the issue was related to parsing errors due to missing __init__.py\n+    assert 'parse-error' not in linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +953,16 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_module_with_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test linting on a module with the same name as its containing directory.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create directory and files\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Run pylint on the directory\n+        linter.check([\"a\"])\n+    # Ensure that no linting error on not finding __init__.py\n+    # As the issue was related to parsing errors due to missing __init__.py\n+    assert 'parse-error' not in linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..aa56f16 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,6 +114,23 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\n+        \"line-too-long\", line=2, end_lineno=2, end_col_offset=4, args=(3, 4)\n+    )\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"convention\" }'\n+    assert not any(\"}\" not in line for line in out_lines[1:3])\n+\n def test_deprecation_set_output(recwarn):\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..ecab0fc 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -289,6 +289,15 @@ class TestImportPath:\n         return fn\n \n     def test_importmode_importlib(self, simple_module: Path, tmp_path: Path) -> None:\n+        \"\"\"Ensure that a module imported using importlib is not imported multiple times.\"\"\"\n+        module1 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        # Try importing the module again\n+        module2 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+\n+        # Ensure the same module object is returned both times\n+        assert module1 is module2\n+\n+        # Also, existing tests should remain valid:\n         \"\"\"`importlib` mode does not change sys.path.\"\"\"\n         module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n         assert module.foo(2) == 42  # type: ignore[attr-defined]\n",
  "pytest-dev__pytest-5227": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 1ebe9d0..01f354c 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..8cda103 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -299,8 +299,52 @@ def callequal(left, right, verbose=False):\n     config.verbose = verbose\n     return plugin.pytest_assertrepr_compare(config, \"==\", left, right)\n \n+import pytest\n \n class TestAssert_reprcompare:\n+    def test_bytes_diff_empty_vs_nonempty(self):\n+        \"\"\"Test bytes diff with one empty and one nonempty byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n+\n+    def test_bytes_diff_nonempty_vs_empty(self):\n+        \"\"\"Test bytes diff with one nonempty and one empty byte strings.\"\"\"\n+        diff = callequal(b\"42\", b\"\")\n+        assert diff == [\n+            \"b'42' == b''\",\n+            \"Left contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b'42'\",\n+            \"+ b''\",\n+        ]\n+\n+    def test_bytes_diff_same_length(self):\n+        \"\"\"Test bytes diff with byte strings of the same length.\"\"\"\n+        diff = callequal(b\"12\", b\"34\")\n+        assert diff == [\n+            \"b'12' == b'34'\",\n+            \"At index 0 diff: b'1' != b'3'\",\n+            \"Full diff:\",\n+            \"- b'12'\",\n+            \"+ b'34'\",\n+        ]\n+\n+    def test_bytes_diff_different_lengths(self):\n+        \"\"\"Test bytes diff with byte strings of different lengths.\"\"\"\n+        diff = callequal(b\"1\", b\"1234\")\n+        assert diff == [\n+            \"b'1' == b'1234'\",\n+            \"Right contains more items, first extra item: 50\",\n+            \"Full diff:\",\n+            \"- b'1'\",\n+            \"+ b'1234'\",\n+        ]\n     def test_different_types(self):\n         assert callequal([0, 1], \"foo\") is None\n \n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..dec40e1 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,4 +1,7 @@\n+\n import os\n+import platform\n+from datetime import datetime\n from xml.dom import minidom\n \n import py\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..793a297 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -144,6 +144,47 @@ def test_repr_on_newstyle():\n     assert saferepr(Function())\n \n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145).\n+    \"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    result = saferepr(SomeClass())\n+    assert result.startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n+def test_broken_repr():\n+    \"\"\"saferepr() should handle objects with __repr__ raising exceptions.\"\"\"\n+    class SomeClass:\n+        def __repr__(self):\n+            raise ValueError(\"Error in repr\")\n+\n+    result = saferepr(SomeClass())\n+    assert result.startswith(\n+        \"<[ValueError('Error in repr') raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n+def test_no_active_exception_for_reraise():\n+    \"\"\"Ensure that saferepr doesn't fail when there's no active exception to reraise.\"\"\"\n+    class SomeClass:\n+        def __repr__(self):\n+            raise\n+\n+    result = saferepr(SomeClass())\n+    assert result.startswith(\n+        \"<[RuntimeError('No active exception to reraise') raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n def test_unicode():\n     val = \"\u00a3\u20ac\"\n     reprval = \"'\u00a3\u20ac'\"\n@@ -153,4 +194,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..d37c059 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -70,8 +70,28 @@ def test_make_hook_recorder(testdir) -> None:\n     recorder.hook.pytest_runtest_logreport(report=rep3)\n     pytest.raises(ValueError, recorder.getfailures)\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"Test that pytest reports file paths correctly when the cwd has changed inside a fixture.\"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_parseconfig(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'temp_dir'\n+            os.makedirs(out_dir, exist_ok=True)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     config1 = testdir.parseconfig()\n     config2 = testdir.parseconfig()\n     assert config2 is not config1\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..b032664 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -41,8 +41,35 @@ class TestMark:\n         with pytest.raises(AttributeError):\n             mark._some_name\n \n+def test_reevaluate_dynamic_expr(self, testdir):\n+    \"\"\"#7360\"\"\"\n+    py_file1 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr1=\"\"\"\n+        import pytest\n+\n+        skip = True\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_skip():\n+            assert True\n+        \"\"\"\n+    )\n+    py_file2 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr2=\"\"\"\n+        import pytest\n+\n+        skip = False\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_not_skip():\n+            assert True\n+        \"\"\"\n+    )\n \n-def test_marked_class_run_twice(testdir):\n+    file_name1 = os.path.basename(py_file1.strpath)\n+    file_name2 = os.path.basename(py_file2.strpath)\n+    reprec = testdir.inline_run(file_name1, file_name2)\n+    reprec.assertoutcome(passed=1, skipped=1)\n     \"\"\"Test fails file is run twice that contains marked class.\n     See issue#683.\n     \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..5d3c0ce 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -154,6 +154,26 @@ class TestEvaluation:\n \n \n class TestXFail:\n+    @pytest.mark.parametrize(\n+        \"cmd_options, expected_output\",\n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_location_with_runxfail(self, testdir, cmd_options, expected_output):\n+        # Creating a simple test file that will be skipped\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*cmd_options)\n+        result.stdout.fnmatch_lines(expected_output)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..cea446c 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -447,7 +448,30 @@ class TestXFail:\n         result = testdir.runpytest(p)\n         result.stdout.fnmatch_lines([matchline])\n \n-    def test_strict_sanity(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir):\n+        # Test for dynamically marking xfail during the test, expected to xfail.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir):\n+        # Test for dynamically marking xfail with strict, expected to fail due to pass.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         \"\"\"sanity check for xfail(strict=True): a failing test should behave\n         exactly like a normal xfail.\n         \"\"\"\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..464b28c 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,7 +1,10 @@\n+\n import os\n import stat\n import sys\n from pathlib import Path\n+from _pytest.monkeypatch import MonkeyPatch\n+from _pytest.tmpdir import TempPathFactory\n from typing import Callable\n from typing import cast\n from typing import List\n@@ -433,6 +436,36 @@ def test_basetemp_with_read_only_files(pytester: Pytester) -> None:\n         import os\n         import stat\n \n+def test_tmp_path_factory_handles_invalid_dir_characters(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    # _basetemp / _given_basetemp are cached/set in parallel runs, patch them\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+def test_tmp_path_factory_fallback_to_unknown_user(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    # Simulate a scenario where getpass.getuser fails\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: None)\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+def test_tmp_path_factory_with_valid_username(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    # Simulate a valid username scenario\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"valid_username\")\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-valid_username\" in str(p)\n+\n         def test(tmp_path):\n             fn = tmp_path / 'foo.txt'\n             fn.write_text('hello')\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..44ed175 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,29 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+from sklearn.linear_model import RidgeClassifierCV\n+import numpy as np\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    X_train = np.random.normal(scale=3.0, size=(100, 10))\n+    y_train = np.where(np.random.normal(size=100) > 0, 1, -1)\n+\n+    alphas = [0.1, 1.0, 10.0]\n+    clf = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    clf.fit(X_train, y_train)\n+\n+    n_samples = X_train.shape[0]\n+    n_alphas = len(alphas)\n+    assert clf.cv_values_.shape == (n_samples, n_alphas)\n \n-def test_ridgecv_store_cv_values():\n+    # Multi-output case\n+    y_train_multiclass = np.random.randint(0, 2, size=(100, 2))\n+    clf.fit(X_train, y_train_multiclass)\n+    n_responses = y_train_multiclass.shape[1]\n+    assert clf.cv_values_.shape == (n_samples, n_responses, n_alphas)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..01de2b5 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -418,4 +418,21 @@ def test_invariant_translation():\n \n             assert_almost_equal(bgmm1.means_, bgmm2.means_ - 100)\n             assert_almost_equal(bgmm1.weights_, bgmm2.weights_)\n+\n+def test_bayesian_mixture_labels_():\n+    # Test if BayesianGaussianMixture stores labels_ after fitting.\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng)\n+    for prior_type in PRIOR_TYPE:\n+        for covar_type in COVARIANCE_TYPE:\n+            X = rand_data.X[covar_type]\n+            bgmm = BayesianGaussianMixture(\n+                n_components=rand_data.n_components,\n+                random_state=rng,\n+                weight_concentration_prior_type=prior_type,\n+                covariance_type=covar_type)\n+            bgmm.fit(X)\n+            # Check if labels_ attribute is created and correct\n+            assert hasattr(bgmm, 'labels_')\n+            assert_array_equal(bgmm.labels_, bgmm.predict(X))\n             assert_almost_equal(bgmm1.covariances_, bgmm2.covariances_)\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..09bd880 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,8 +260,18 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n-    X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n+def test_one_hot_encoder_handle_unknown_strings_long_and_short():\n+    train = np.array(['aaaaa', 'b', 'ccc', 'dddd']).reshape((-1, 1))\n+    test = np.array(['eeeee', 'b']).reshape((-1, 1))\n+\n+    ohe = OneHotEncoder(dtype=bool, handle_unknown='ignore')\n+    ohe.fit(train)\n+    \n+    enc_test = ohe.transform(test).toarray()\n+    expected_result = np.array([[False, False, False, False],  # 'eeeee' is unknown\n+                                [False, True, False, False]])  # 'b' is known at index 1\n+    \n+    assert_array_equal(enc_test, expected_result)\n \n     cat = [False, False, False]\n     enc = OneHotEncoder(categorical_features=cat)\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..2dcf0ff 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,17 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+import numpy as np\n+from sklearn.mixture import GaussianMixture\n+from numpy.testing import assert_array_equal\n+\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..039f643 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,28 @@\n+\n+def test_kernel_pca_sign_consistency():\n+    \"\"\"Test to ensure KernelPCA outputs consistent component signs.\"\"\"\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(10, 10)\n+    \n+    transformed_results = []\n+    \n+    for _ in range(10):\n+        kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+        transformed_X = kpca.fit_transform(X)\n+        transformed_results.append(transformed_X)\n+    \n+    # Check if all transformations have the same sign structure as the first result\n+    for transformed_X in transformed_results[1:]:\n+        # Here, we only care about the sign consistency, so we use np.sign\n+        assert_allclose(np.sign(transformed_X), np.sign(transformed_results[0]))\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -15,6 +33,7 @@ from sklearn.metrics.pairwise import rbf_kernel\n \n \n def test_kernel_pca():\n+    ...\n     rng = np.random.RandomState(0)\n     X_fit = rng.random_sample((5, 4))\n     X_pred = rng.random_sample((2, 4))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..2e18321 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,34 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n-\n-def test_make_pipeline_memory():\n+def test_pipeline_len():\n+    from sklearn import svm\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.pipeline import Pipeline\n+\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    # Test: Check the length of the pipeline\n+    assert len(pipe) == 2\n+\n+    # Test: Check the length of an empty pipeline\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0\n+\n+    # Test: Check length with 'passthrough' step\n+    pipe_with_passthrough = Pipeline([('anova', 'passthrough'), ('svc', clf)])\n+    assert len(pipe_with_passthrough) == 2\n+\n+    # Test: Check length with None step (should be considered 'passthrough')\n+    pipe_with_none = Pipeline([('anova', None), ('svc', clf)])\n+    assert len(pipe_with_none) == 2\n+\n+    # Test: Check length with a single step\n+    single_step_pipe = Pipeline([('svc', clf)])\n+    assert len(single_step_pipe) == 1\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1096,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..ab184b0 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,21 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+    # New test cases for discrete_features as array of indices or boolean mask\n+    discrete_indices = [0, 2]\n+    discrete_mask = [True, False, True]\n+\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test with array of indices\n+        mi_indices = mutual_info(X, y, discrete_features=discrete_indices, random_state=0)\n+        # Test with boolean mask\n+        mi_mask = mutual_info(X, y, discrete_features=discrete_mask, random_state=0)\n+\n+        # Assert that both approaches yield the same result\n+        assert_array_equal(mi_indices, mi_mask)\n+\n+        # Test scenarios with incorrect discrete_features length\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False, True, False])\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..6e129a6 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,5 +1,8 @@\n+\n import re\n from pprint import PrettyPrinter\n+from sklearn.linear_model import LogisticRegressionCV\n+import sklearn\n \n import numpy as np\n \n@@ -214,8 +217,16 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_array_parameter():\n+    \"\"\"Test LogisticRegressionCV with array-like parameter and print_changed_only=True.\"\"\"\n+    sklearn.set_config(print_changed_only=True)\n+    # Ensure no ValueError is raised when using array parameter\n+    try:\n+        repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    except ValueError as e:\n+        assert False, f\"Unexpected ValueError: {e}\"\n \n-def test_pipeline():\n+    sklearn.set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..6a804fb 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -503,6 +504,27 @@ def test_transform():\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n+\n+\n+# Additional test case to ensure NoneType estimator with weights does not fail\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(datasets.load_iris(return_X_y=True), VotingClassifier(\n+        [('lr', LogisticRegression()), ('rf', RandomForestClassifier(n_estimators=5))]))]\n+)\n+def test_none_estimator_with_weights_and_sample_weight(X_y, voter):\n+    # Issue: Voting estimator fail at fit if weights are passed and an estimator is None\n+    # The following test ensures that we can set an estimator to None and still pass sample weights\n+    X, y = X_y\n+    sample_weight = np.ones(y.shape)\n+    voter.fit(X, y, sample_weight=sample_weight)\n+    voter.set_params(lr=None)\n+    try:\n+        voter.fit(X, y, sample_weight=sample_weight)  # This should not raise an exception\n+        y_pred = voter.predict(X)\n+        assert y_pred.shape == y.shape\n+    except AttributeError as e:\n+        pytest.fail(f\"Unexpected AttributeError: {e}\")\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..fba3aec 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -161,6 +161,21 @@ def test_params_validation():\n                          NCA(n_components=n_components).fit, X, y)\n \n \n+@pytest.mark.parametrize('param, value', [\n+    ('n_components', np.int64(3)),\n+    ('max_iter', np.int64(100)),\n+    ('tol', np.float64(1.0))\n+])\n+def test_nca_parameters_with_numpy_types(param, value):\n+    \"\"\"Test that NeighborhoodComponentsAnalysis accepts numpy types.\"\"\"\n+    X = np.random.random_sample((10, 4))\n+    y = np.random.randint(0, 2, size=10)\n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n+    try:\n+        nca.fit(X, y)\n+    except Exception as e:\n+        pytest.fail(f\"NCA raised {type(e).__name__} unexpectedly!\")\n+\n def test_transformation_dimensions():\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..ea33909 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,36 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([\n+        [0, 1, 0, 0],\n+        [0, 0, 0, 1],\n+        [0, 0, 1, 0],\n+        [0, 0, 0, 1]\n+    ])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+\n+    # Ensure support_vectors_ is empty, meaning no support vectors were found\n+    assert not model.support_vectors_.data.size\n+\n+    # Ensure dual_coef_ is empty when no support vectors are found\n+    assert not model.dual_coef_.data.size\n+\n+    # Additional check that no error arises with different model parameters\n+    model = svm.SVR(kernel='linear', C=0.1)\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..5b0e5a9 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -5,7 +6,10 @@ import copy\n \n import pytest\n \n-from sklearn.datasets import make_regression\n+from sklearn.datasets import make_regression, make_classification\n+from sklearn import set_config\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n from sklearn.isotonic import (\n     check_increasing,\n     isotonic_regression,\n@@ -668,7 +672,24 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_with_isotonic_regression_and_pandas_output():\n+    \"\"\"Test CalibratedClassifierCV with isotonic regression and pandas output.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    X, y = make_classification(n_samples=30, n_features=3, random_state=42)\n+    \n+    set_config(transform_output=\"pandas\")\n+    \n+    model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\n+    model.fit(X, y)\n+    \n+    # Ensure predict works without crashing\n+    predictions = model.predict(X)\n+    assert predictions is not None\n+    \n+    # Ensure predict_proba works without crashing\n+    prob_predictions = model.predict_proba(X)\n+    assert prob_predictions is not None\n+    assert isinstance(prob_predictions, np.ndarray)\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..b6201bc 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2120,12 +2120,46 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     # not define the method.\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n+import pytest\n+import numpy as np\n+from pandas.testing import assert_frame_equal\n+from sklearn.compose import ColumnTransformer\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.utils._testing import assert_array_equal\n \n-    # The feature names are prefixed because verbose_feature_names_out=True is default\n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+\n+    Non-regression test for gh-25487\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    expected_output = pd.DataFrame([[ 1.,  1.], [-1., -1.]], columns=[\"numerical__a\", \"numerical__b\"])\n+    assert_frame_equal(X_out, expected_output)\n+    \n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    expected_output.columns = [\"a\", \"b\"]\n+    assert_frame_equal(X_out, expected_output)\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n     assert_array_equal(X_trans_df0.columns, expected_verbose_names)\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..4c09e7b 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -112,17 +112,290 @@ def test_automodule_special_members(app):\n         '',\n     ]\n \n-\n-@pytest.mark.sphinx('html', testroot='ext-autodoc',\n-                    confoverrides={'autodoc_mock_imports': ['missing_module',\n-                                                            'missing_package1',\n-                                                            'missing_package2',\n-                                                            'missing_package3',\n-                                                            'sphinx.missing_module4']})\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_classes(app):\n+    # Test case for inherited-members option accepting multiple classes with selective ignoring\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base, tuple',\n+        'ignore-inheritance': 'list'  # hypothetical option to ignore certain bases\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList%s' % getattr(list, '__doc__', '()'),\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n @pytest.mark.usefixtures(\"rollback_sysmodules\")\n def test_subclass_of_mocked_object(app):\n     sys.modules.pop('target', None)  # unload target module to clear the module cache\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..405b851 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,10 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+from sphinx.testing.util import assert_node\n+from sphinx.util.docutils import parse_rst\n+from sphinx.addnodes import desc, desc_signature, desc_name, desc_addname, desc_content\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..558fc91 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -46,7 +47,9 @@ def test_restify():\n     assert restify(Any) == \":obj:`Any`\"\n \n \n-def test_restify_type_hints_containers():\n+def test_restify_struct():\n+    from struct import Struct\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(List) == \":class:`List`\"\n     assert restify(Dict) == \":class:`Dict`\"\n     assert restify(List[int]) == \":class:`List`\\\\ [:class:`int`]\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..8636a0f 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1435,6 +1435,59 @@ class NumpyDocstringTest(BaseDocstringTest):\n         \"\"\")\n         self.assertEqual(expected, actual)\n \n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_mixed_parameters_and_other_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other Parameters\n+----------------\n+y : float\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x** (*int*)\n+:Other Parameters: **y** (*float*)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+:param y:\n+:type y: float\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n@@ -1447,6 +1500,59 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n :Parameters: **param1** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_mixed_parameters_and_other_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other Parameters\n+----------------\n+y : float\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x** (*int*)\n+:Other Parameters: **y** (*float*)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+:param y:\n+:type y: float\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1455,6 +1561,59 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_mixed_parameters_and_other_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other Parameters\n+----------------\n+y : float\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x** (*int*)\n+:Other Parameters: **y** (*float*)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+:param y:\n+:type y: float\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..d97d319 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,9 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from pathlib import Path\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..d11ecd9 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -355,7 +355,24 @@ def test_args():\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n \n-def test_Cycle():\n+def test_non_disjoint_cycles():\n+    from sympy.combinatorics.permutations import Permutation\n+\n+    # Test with direct non-disjoint cycles (should result in identity)\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # Test with overlapping cycles which are non-disjoint\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 2], [0, 1]]) == Permutation([2, 0, 1])\n+\n+    # Edge case with empty cycles (should result in identity)\n+    assert Permutation([[], []]) == Permutation([])\n+\n+    # Test with overlapping and non-overlapping cycles\n+    assert Permutation([[0, 1], [1, 2], [3, 4]]) == Permutation([1, 2, 0, 4, 3])\n+\n+    # Test with longer cycles containing overlaps\n+    assert Permutation([[0, 1, 2], [1, 0, 3]]) == Permutation([1, 3, 0, 2])\n     assert str(Cycle()) == '()'\n     assert Cycle(Cycle(1,2)) == Cycle(1, 2)\n     assert Cycle(1,2).copy() == Cycle(1,2)\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex fa86bc3..5962d64 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -254,6 +254,33 @@ def test_power():\n     assert A**5.0 == Matrix([[168,  72,  89], [291, 144, 161], [572, 267, 329]])\n     assert A**5.0 == A**5\n \n+from sympy import Matrix\n+\n+def test_hstack_vstack_zero_rows():\n+    # Test hstack with zero-row matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    result = Matrix.hstack(M1, M2, M3, M4)\n+    assert result.shape == (0, 6), f\"Expected (0, 6), got {result.shape}\"\n+\n+    # Test vstack with zero-column matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(1, 0)\n+    M3 = Matrix.zeros(2, 0)\n+    M4 = Matrix.zeros(3, 0)\n+    result = Matrix.vstack(M1, M2, M3, M4)\n+    assert result.shape == (6, 0), f\"Expected (6, 0), got {result.shape}\"\n+\n+    # Additional edge cases (e.g., single matrix input)\n+    M = Matrix.zeros(0, 3)\n+    result = Matrix.hstack(M)\n+    assert result.shape == (0, 3), f\"Expected (0, 3), got {result.shape}\"\n+\n+    M = Matrix.zeros(3, 0)\n+    result = Matrix.vstack(M)\n+    assert result.shape == (3, 0), f\"Expected (3, 0), got {result.shape}\"\n \n def test_creation():\n     raises(ValueError, lambda: Matrix(5, 5, range(20)))\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..b25f1bc 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -121,7 +121,27 @@ def test_core_add():\n         check(c)\n \n \n-def test_core_mul():\n+import sys\n+import pickle\n+import sympy\n+from sympy import Add, Float, symbols\n+\n+def test_pickle_sympy_expression_float_py2_to_py3():\n+    # Simulate the pickling in Python 2 and unpickling in Python 3 process\n+    x = symbols(\"x\")\n+    expr = x + 1.0\n+\n+    # Pickle the expression using Python 2's pickle protocol\n+    pickled_data_py2 = pickle.dumps(expr, protocol=2)\n+\n+    # Unpickle the data in the current Python environment (assumed to be Python 3)\n+    unpickled_expr = pickle.loads(pickled_data_py2)\n+\n+    # Verify the unpickled expression matches the original\n+    assert unpickled_expr == expr\n+\n+    # Additional test: Ensure the Float part is correctly interpreted\n+    assert isinstance(unpickled_expr.args[1], Float)\n     x = Symbol(\"x\")\n     for c in (Mul, Mul(x, 4)):\n         check(c)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..44da33d 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -279,7 +279,20 @@ def test_coth_series():\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n \n-def test_csch():\n+def test_coth_log_tan_subs():\n+    from sympy import Symbol, log, tan, coth\n+    \n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    \n+    test_vals = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    \n+    for val in test_vals:\n+        try:\n+            e.subs(x, val)\n+            print(f\"Substitution successful for x = {val}\")\n+        except Exception as err:\n+            print(f\"Error for x = {val}: {err}\")\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..511fb50 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,50 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import eye, Matrix, ones\n+\n+    # Reproduce the issue\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected, \"Matrix.col_insert() did not work as expected.\"\n+\n+    # Additional checks - inserting at different positions\n+    M2 = eye(3)\n+    V2 = ones(3, 1) * 5\n+    result2 = M2.col_insert(0, V2)\n+    expected2 = Matrix([\n+        [5, 1, 0, 0],\n+        [5, 0, 1, 0],\n+        [5, 0, 0, 1]\n+    ])\n+    assert result2 == expected2, \"Insertion at the beginning failed.\"\n+\n+    result3 = M2.col_insert(3, V2)\n+    expected3 = Matrix([\n+        [1, 0, 0, 5],\n+        [0, 1, 0, 5],\n+        [0, 0, 1, 5]\n+    ])\n+    assert result3 == expected3, \"Insertion at the end failed.\"\n+\n+    # Check edge cases\n+    result4 = M2.col_insert(-1, V2)\n+    expected4 = Matrix([\n+        [1, 0, 5, 0],\n+        [0, 1, 5, 0],\n+        [0, 0, 5, 1]\n+    ])\n+    assert result4 == expected4, \"Insertion at position -1 failed.\"\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..722ec24 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -662,8 +662,20 @@ def test_latex_sequences():\n     latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n-\n-def test_latex_FourierSeries():\n+    # Additional test cases for different ranges and sequences\n+    s7 = SeqFormula(a**2, (0, 3))\n+    s8 = SeqFormula(a**3, (1, 4))\n+    s9 = SeqFormula(a**4, (-3, 2))\n+\n+    # Ensure no backslash-escaped brackets in LaTeX strings\n+    latex_str = r'[0, 1, 4, 9]'\n+    assert latex(s7) == latex_str\n+    \n+    latex_str = r'[1, 8, 27, 64]'\n+    assert latex(s8) == latex_str\n+    \n+    latex_str = r'[81, 16, 1, 0, 1]'\n+    assert latex(s9) == latex_str\n     latex_str = r'2 \\sin{\\left (x \\right )} - \\sin{\\left (2 x \\right )} + \\frac{2}{3} \\sin{\\left (3 x \\right )} + \\ldots'\n     assert latex(fourier_series(x, (x, -pi, pi))) == latex_str\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..1df04de 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, EX, RR, CC\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -186,8 +187,22 @@ def test_Domain_preprocess():\n     assert Domain.preprocess('ZZ[x,y]') == ZZ[x, y]\n     assert Domain.preprocess('QQ[x,y]') == QQ[x, y]\n \n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n     raises(OptionError, lambda: Domain.preprocess('Z()'))\n \n+    # New tests based on the issue\n+    assert Domain.preprocess('R[y,z]') == RR[y, z]\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]\n+    raises(OptionError, lambda: Domain.preprocess('G[x]'))  # Invalid domain\n+\n     assert Domain.preprocess('Z(x)') == ZZ.frac_field(x)\n     assert Domain.preprocess('Q(x)') == QQ.frac_field(x)\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..ef7df42 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6121,8 +6121,36 @@ def test_MatrixSymbol_printing():\n     assert pretty(A - B) == \"-B + A\"\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n-\n-def test_degree_printing():\n+from sympy import MatrixSymbol, pretty\n+\n+def test_matadd_pretty_printing_issue_14814():\n+    # issue #14814\n+    n = 3\n+    # Original test cases\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    assert pretty(x + y) == \"x + y*\"\n+    assert pretty(-x + -2*y) == \"-x - 2*y*\"\n+\n+    # Additional test cases\n+    # Testing with more complex symbolic names\n+    z = MatrixSymbol('z$', n, n)\n+    assert pretty(x + z) == \"x + z$\"\n+\n+    # Testing with multiple MatAdd arguments\n+    a = MatrixSymbol('a', n, n)\n+    b = MatrixSymbol('b', n, n)\n+    assert pretty(x + y + z + a + b) == \"a + b + x + y* + z$\"\n+\n+    # Ensure correct behavior with negative terms\n+    assert pretty(-a*x + -2*y*y) == \"-a*x - 2*y**2\"\n+\n+    # Test with negative leading term\n+    assert pretty(-x + y) == \"-x + y*\"\n+\n+    # Test with a case that previously caused a SyntaxError\n+    # Ensure that the fix prevents sympify on invalid names from being called\n+    assert pretty(-x) == \"-x\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..068a76f 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -720,6 +720,35 @@ def test_dummification():\n     lam = lambdify((F(t), G(t)), some_expr)\n     assert lam(3, 9) == 2\n     lam = lambdify(sin(t), 2 * sin(t)**2)\n+\n+def test_curly_matrix_symbol_issue_15009():\n+    import sympy as sy\n+    # Testing for issue #15009 with curly braces in MatrixSymbol names\n+    curlyx = sy.symbols(\"{x}\")\n+    v = sy.MatrixSymbol(\"v\", 2, 1)\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # Verify that lambdify works with curly brace in scalar symbol\n+    curlyScalarId = sy.lambdify(curlyx, curlyx)\n+    assert curlyScalarId(5) == 5\n+\n+    # Verify that lambdify works with MatrixSymbol without curly brace\n+    vectorId = sy.lambdify(v, v)\n+    result = vectorId([[1], [2]])\n+    assert result.shape == (2, 1)\n+    assert result[0, 0] == 1 and result[1, 0] == 2\n+\n+    # Verify issue was resolved for MatrixSymbol with curly brace\n+    curlyVectorId = sy.lambdify(curlyv, curlyv)\n+    result_curly = curlyVectorId([[1], [2]])\n+    assert result_curly.shape == (2, 1)\n+    assert result_curly[0, 0] == 1 and result_curly[1, 0] == 2\n+\n+    # Verify dummification also works\n+    curlyVectorIdDummified = sy.lambdify(curlyv, curlyv, dummify=True)\n+    result_dummified = curlyVectorIdDummified([[1], [2]])\n+    assert result_dummified.shape == (2, 1)\n+    assert result_dummified[0, 0] == 1 and result_dummified[1, 0] == 2\n     assert lam(F(t)) == 2 * F(t)**2\n     #Test that \\alpha was properly dummified\n     lam = lambdify((alpha, t), 2*alpha + t)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..02e5b72 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n@@ -1726,7 +1728,12 @@ def test_latex_UnevaluatedExpr():\n     assert latex(x*he) == r\"x \\frac{1}{x}\"\n \n \n-def test_MatrixElement_printing():\n+def test_issue_indexed_matrix_expression():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Test the LaTeX output of an indexed matrix product\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n     # test cases for issue #11821\n     A = MatrixSymbol(\"A\", 1, 3)\n     B = MatrixSymbol(\"B\", 1, 3)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..f40f3df 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,17 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test for support with Eq\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x) == (x + 1) * exp(x - y)/(y + 1)\n+    assert idiff(Eq(f(x)*exp(f(x)) - x*exp(x), 0), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+\n+    # Test for support with functions as dependent variables\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..3b6d1db 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,39 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n+def test_autowrap_unused_array_arg_cython():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in the expression\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, \"Expected result to be 1.0 when x is unused in the expression\"\n+\n+def test_codegen_unused_array_arg():\n+    from sympy.utilities.codegen import codegen\n+    from sympy.codegen.cfunctions import CCodeGen\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected, \"Generated source does not match expected output\"\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..4525f74 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,9 +342,27 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n-\n-def test_issue_9623():\n-    n = Symbol('n')\n+from sympy import symbols, Intersection, Eq, Piecewise, S, FiniteSet\n+\n+def test_intersection_remove_duplicates():\n+    x = symbols('x')\n+    # Explicit duplicates\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    \n+    # Piecewise answer with variable overlap\n+    assert Intersection({1}, {1}, {x}).simplify() == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {x}).simplify() == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+\n+    # Additional test cases for combinations\n+    assert Intersection({1, 2, 3}, {2, 3}, {3}).simplify() == {3}\n+    assert Intersection(FiniteSet(1, 2, 3), FiniteSet(2, 3), FiniteSet(3)).simplify() == FiniteSet(3)\n+    assert Intersection(FiniteSet(1, x), FiniteSet(x)).simplify() == Piecewise((FiniteSet(x), Eq(x, 1)), (S.EmptySet, True))\n+\n+    # Verify singleton against empty set\n+    assert Intersection(FiniteSet(1), S.EmptySet).simplify() == S.EmptySet\n+\n+    # No common elements should result in an empty set\n+    assert Intersection({1, 2}, {3, 4}).simplify() == S.EmptySet\n \n     a = S.Reals\n     b = Interval(0, oo)\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..a80b78c 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -10,13 +11,28 @@ from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayPermuteDims, CodegenArrayElementwiseAdd)\n from sympy.printing.lambdarepr import NumPyPrinter\n \n-from sympy.utilities.pytest import warns_deprecated_sympy\n+from sympy.utilities.pytest import warns_deprecated_sympy, raises\n+from sympy.matrices import MatrixSymbol, Identity\n from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n np = import_module('numpy')\n+def test_issue_lambdify_identity_matrix():\n+    if not np:\n+        skip(\"NumPy not installed\")\n \n-def test_numpy_piecewise_regression():\n+    # Test with a fixed-size identity matrix\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+    assert (f(ma) == mr).all()\n+\n+    # Test with a symbolic-size identity matrix, expecting an error\n+    from sympy import symbols\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..38d41df 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,17 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n+def test_issue_17137():\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional test cases for complex exponentiation with different trigonometric functions\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(sin(x)**(1 + I)) == sin(x)**(1 + I)\n+    assert simplify(exp(I*x)) == exp(I*x)\n+    assert simplify(tan(x)**I) == tan(x)**I\n+\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..315f67e 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -93,6 +94,11 @@ def test_point():\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n+    # Test for issue with multiplication ordering\n+    scalar = sympify(2.0)\n+    assert (p3 + p4 * scalar) == Point(2, 2)\n+    assert (p3 + scalar * p4) == Point(2, 2)  # Ensure this works same as above\n+\n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n     # Point differences should be simplified\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..630c0c9 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,30 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols\n+from sympy.core.sympify import sympify\n+from sympy.testing.pytest import raises\n+\n+def test_issue_equality_eval_repr():\n+    # Test case for the issue where __eq__ improperly evaluates repr results\n+    x = symbols('x')\n+    \n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    # Ensure no AttributeError occurs\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+    \n+    class C2:\n+        def __repr__(self):\n+            return 'x'\n+\n+    # Ensure proper comparison without evaluating 'repr'\n+    assert (x == C2()) is False\n+    assert (x != C2()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1926,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..b986242 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -540,6 +540,21 @@ def test_diophantine():\n     # solvers have not been written for every type\n     raises(NotImplementedError, lambda: diophantine(x*y**2 + 1))\n \n+    # Test for issue with differing solutions based on symbol ordering\n+    # Original issue demonstration\n+    # Expected to pass if the issue is fixed\n+\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m,n), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n,m), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    \n+    # Additional tests for consistent symbol ordering\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(x,y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(y,x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n     # rational expressions\n     assert diophantine(1/x) == set()\n     assert diophantine(1/x + 1/y - S.Half)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..76c22f8 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n from sympy.codegen.ast import Declaration, Variable, float64, int64\n@@ -66,7 +67,14 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    # Ensure atoms returns elements with no args\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n+    \n+def test_union_atoms():\n+    typename = 'int'\n+    u = union('example_union', [Variable(x, type=int64), Variable(y, type=float64)])\n+    # The atoms should be the name of the union and the types used\n+    assert u.atoms() == {String('example_union'), int64, float64}\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..827c7d7 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,13 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element_conversion():\n+    # Test the issue with BlockDiagMatrix of a single element\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M  # Ensure the conversion works correctly\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..c4bdb6f 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -83,7 +84,25 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_block_index_symbolic_issue():\n+    from sympy.matrices.expressions import MatrixElement, BlockMatrix, MatrixSymbol\n+    # We will reproduce the original issue description and verify the expected behavior.\n+    n, i = symbols('n, i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+\n+    # Ensure C[i, 0] is not simplified over-aggressively.\n+    # It should remain a MatrixElement wrapping the block matrix.\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+    \n+    # For explicit indices out of A's bounds and within B's bounds, \n+    # it should resolve to the appropriate element if the dimensions are known.\n+    A_explicit = MatrixSymbol('A', 2, 2)\n+    B_explicit = MatrixSymbol('B', 3, 2)\n+    D = BlockMatrix([[A_explicit], [B_explicit]])\n+    \n+    assert D[3, 1] == B_explicit[1, 1]\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..f1ebad7 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -316,8 +316,45 @@ def test_sign():\n     d = p - q\n     assert sign(d).func is sign or sign(d) == 0\n \n+def test_sign_rewrite_abs():\n+    # Test the basic rewrite of sign to Abs\n+    x = Symbol('x')\n+    y = Symbol('y', real=True)\n+    z = Symbol('z', complex=True)\n+\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(z).rewrite(Abs) == Piecewise((0, Eq(z, 0)), (z/Abs(z), True))\n+\n+    # Test when x is known to be non-zero\n+    x_nonzero = Symbol('x_nonzero', nonzero=True)\n+    assert sign(x_nonzero).rewrite(Abs) == x_nonzero / Abs(x_nonzero)\n+\n+    # Test complex numbers\n+    a = 3 + 4*I\n+    assert sign(a).rewrite(Abs).simplify() == sign(a)\n+\n+    # Test symbolic function\n+    f = Function('f')\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x)/Abs(f(x)), True))\n+\n+    # Test when the input is zero\n+    zero = S.Zero\n+    assert sign(zero).rewrite(Abs) == 0\n+\n+    # Additional test for nan handling\n+    nan_expr = sign(nan).rewrite(Abs)\n+    assert nan_expr == nan\n+\n+    # Test with ABS of symbol\n+    assert sign(Abs(x)).rewrite(Abs) == Piecewise((0, Eq(Abs(x), 0)), (Abs(x)/Abs(Abs(x)), True))\n \n-def test_as_real_imag():\n+    # Test on vectors and matrices\n+    v = Matrix([x, -x, 0])\n+    vsign = v.applyfunc(sign)\n+    assert vsign.rewrite(Abs).applyfunc(lambda e: e.simplify()) == Matrix([Piecewise((0, Eq(x, 0)), (x/Abs(x), True)), \n+                                                                          Piecewise((0, Eq(x, 0)), (-x/Abs(x), True)),\n+                                                                          0])\n     n = pi**1000\n     # the special code for working out the real\n     # and complex parts of a power with Integer exponent\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..068d5f3 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,28 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n+from sympy import S\n \n def test_partitions():\n+    # Test to ensure partitions() doesn't reuse the same dictionary object\n+    results = list(partitions(5))\n+    # Modify one of the returned dictionaries\n+    results[0][1] = 1000\n+    # Ensure the modification doesn't affect other dictionaries\n+    assert results[1] != {1: 1000}, \"Reused dictionary was modified across partitions\"\n+\n+    # Test with size=True option\n+    results = list(partitions(5, size=True))\n+    assert all(isinstance(x, tuple) and len(x) == 2 for x in results), \"Size option didn't return expected tuples\"\n+    # Ensure that modifying the dictionary doesn't affect other results\n+    results[0][1][1] = 1000\n+    assert results[1][1] != {1: 1000}, \"Reused dictionary was modified when size=True\"\n+\n+    # Test list(partitions()) for consistent outputs\n+    results1 = list(partitions(5))\n+    results2 = list(partitions(5))\n+    assert results1 == results2, \"Inconsistent results between successive calls\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..5610193 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -265,6 +265,14 @@ def test_zero():\n     assert 0**(x - 2) != S.Infinity**(2 - x)\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n+    \n+    # Test issue 19572: Verify that 0 raised to the power of -oo returns zoo (ComplexInfinity)\n+    from sympy import oo, S\n+    assert 0**-oo is S.ComplexInfinity\n+    assert (S.Zero**-oo) is S.ComplexInfinity\n+    # Additional test to ensure behaviour stays consistent for positive infinity\n+    assert 0**oo is S.Zero\n+    assert S.Zero**oo is S.Zero\n \n \n def test_pow_as_base_exp():\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..a6a6c96 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n-                                 volume, kilometer)\n+                                 volume, kilometer, joule, minute, kg, m, s)\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n@@ -46,7 +47,29 @@ def test_convert_to():\n     assert speed_of_light.convert_to(m) == speed_of_light\n \n \n-def test_Quantity_definition():\n+def test_convert_to_joule_second():\n+    expr = joule * second\n+    conv = convert_to(expr, joule)\n+    # The expected behaviour is that it should return the original expression\n+    assert conv == expr, f\"Expected {expr}, but got {conv}\"\n+\n+def test_convert_to_joule_second_multiple_units():\n+    expr = joule * second\n+    conv = convert_to(expr, [joule, second])\n+    # The expected behaviour is that it should return the original expression\n+    assert conv == expr, f\"Expected {expr}, but got {conv}\"\n+\n+def test_convert_to_joule_alternative_units():\n+    expr = joule * second\n+    alternative_expr = kg * m**2 / s\n+    conv = convert_to(expr, alternative_expr)\n+    assert conv == alternative_expr, f\"Expected {alternative_expr}, but got {conv}\"\n+\n+def test_convert_to_joule_minute():\n+    expr = joule * second\n+    expected_expr = joule * minute / 60\n+    conv = convert_to(expr, minute)\n+    assert conv == expected_expr, f\"Expected {expected_expr}, but got {conv}\"\n     q = Quantity(\"s10\", abbrev=\"sabbr\")\n     q.set_global_relative_scale_factor(10, second)\n     u = Quantity(\"u\", abbrev=\"dam\")\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..e1fab21 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,16 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    assert s.__slots__ == ('name',)\n+    with raises(AttributeError):\n+        s.__dict__\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..09345c3 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,26 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_refine_complex_arguments():\n+    # Test refine with complex arguments under certain assumptions\n+    a = Symbol('a', real=True)  # 'a' is a real symbol\n+    x = Symbol('x', complex=True)  # 'x' is a complex symbol\n+    \n+    # Integral related test\n+    J = Integral(sin(x)*exp(-a*x), (x, 0, oo))\n+    J_do = J.doit()\n+    assert refine(J_do, Q.positive(a)) == 1/(a**2 + 1)\n+    \n+    # Test refine for arg with real, positive assumption\n+    assert refine(arg(a), Q.positive(a)) == 0\n+    assert refine(arg(x), Q.positive(x)) == 0\n+    assert refine(arg(x), Q.negative(x)) == pi\n+\n+    # Additional test cases for complex numbers\n+    b = Symbol('b', positive=True)\n+    negative_b = Symbol('negative_b', negative=True)\n+    assert refine(arg(b), Q.positive(b)) == 0\n+    assert refine(arg(negative_b), Q.negative(negative_b)) == pi\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..d407d0e 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,6 +8,31 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+def test_issue_21373():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    x, y, z = symbols('x y z')\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) is not None\n+\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr.subs({1: 1.0}) is not None\n+\n+    # Additional variations based on issue analysis\n+    x, y = symbols('x y')  # No real=True\n+    expr = exp(cosh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) is not None\n+\n+    expr = exp(tanh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) is not None\n+\n+    expr = sinh(Piecewise((x, y > x), (y, True)) / z)\n+    assert expr.subs({1: 1.0}) is not None\n+\n+    expr = exp(Piecewise((x, y > x), (y, True)) / z)\n+    assert expr.subs({1: 1.0}) is not None\n \n def test_subs():\n     n3 = Rational(3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..5e2d540 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,9 +1,11 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n+from sympy.core.function import Derivative\n from sympy.integrals.integrals import Integral\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n@@ -45,7 +47,10 @@ def test_Matrix_kind():\n         m = cls.zeros(3, 2)\n         assert m.kind is MatrixKind(NumberKind)\n \n-def test_MatMul_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n     assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..0626451 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,6 +131,19 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n+    # Test case from issue description\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, \n+        x1*x2**2, x1**2*x2, x1*x3**2, \n+        x2*x3**2, x2**2*x3, x1**2*x3, \n+        x1*x2*x3, x1*x2*x2, x2*x3*x3, \n+        x2*x1*x1, x3*x1*x1, x3*x2*x2,\n+        x1*x1*x3, x1*x3*x3, \n+        x2*x2*x1, x3*x3*x1, x3*x3*x2,\n+        x1**2, x2**2, x3**2\n+    }\n+\n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7e0b222 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,9 +10,34 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n+def test_issue_22684():\n+    # Test to ensure Point2D works without crashing in evaluate(False) context\n+    with evaluate(False):\n+        pt = Point2D(1, 2)\n+        assert pt == Point2D(1, 2)\n+        \n+    # Test with Point using sympify and evaluate False\n+    with evaluate(False):\n+        pt = sympify('Point2D(1,2)')\n+        assert pt == Point2D(1, 2)\n+\n+    # Ensure it doesn't raise an error\n+    with evaluate(False):\n+        pt = sympify('Point(1,2)')\n+        assert pt == Point(1, 2)\n+        \n+    # Confirm handling of imaginary numbers still raises an error\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        pt = Point(1 + I, 2)\n+\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        with evaluate(False):\n+            pt = sympify('Point(1 + I, 2)')\n+\n def test_point():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..e4f800c 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -339,6 +339,13 @@ def test_cse_Indexed():\n \n \n def test_cse_MatrixSymbol():\n+    # Test case for verifying CSE behavior with indexed MatrixSymbol expressions\n+    A = MatrixSymbol(\"A\", 4, 4)\n+    B = MatrixSymbol(\"B\", 4, 4)\n+    expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0] + A[0, 2] * B[2, 0] + A[0, 3] * B[3, 0]\n+    replacements, reduced_exprs = cse(expr)\n+    assert len(replacements) > 0\n+    assert reduced_exprs == [replacements[0][0] + replacements[1][0] + replacements[2][0] + replacements[3][0]]\n     # MatrixSymbols have non-Basic args, so make sure that works\n     A = MatrixSymbol(\"A\", 3, 3)\n     assert cse(A) == ([], [A])\n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..62c31db 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -38,7 +39,17 @@ def test_array_negative_indices():\n         assert test_array[-1, -1] == 10\n \n \n-def test_issue_18361():\n+def test_issue_empty_array():\n+    for ArrayType in array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n+\n+def test_empty_matrix_creation():\n+    M = Matrix([])\n+    assert M.tolist() == []\n+    assert M.shape == (0, 0)\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n     C = Array([(x + x**2)/(x*sin(y)**2 + x*cos(y)**2), 2*sin(x)*cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..3d7d6ca 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,34 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify, symbols\n+\n+def test_single_element_tuple_output():\n+    # Test the issue is fixed\n+    f2b = lambdify([], (1,))  # gh-23224\n+    assert f2b() == (1,)\n+\n+    # Verify the generated source contains the correct tuple comma\n+    source_code = inspect.getsource(lambdify([], (1,)))\n+    assert 'return (1,)' in source_code\n+\n+    # Test with a symbolic single-element tuple\n+    a = symbols('a')\n+    f_symbolic = lambdify([], (a,))\n+    assert f_symbolic(2) == (2,)\n+\n+    # Verify the generated source for symbolic tuple\n+    source_code_symbolic = inspect.getsource(lambdify([], (a,)))\n+    assert 'return (a,)' in source_code_symbolic\n+\n+    # Test with more complex types as single-element tuples\n+    complex_f = lambdify([], ([1, 2, 3],))\n+    assert complex_f() == ([1, 2, 3],)\n+\n+    source_code_complex = inspect.getsource(lambdify([], ([1, 2, 3],)))\n+    assert 'return ([1, 2, 3],)' in source_code_complex\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..78434c3 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,28 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+from sympy.core.numbers import E\n+from sympy import exp\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import Quantity\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..1b8429e 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -52,6 +52,34 @@ def test_tensor_product_commutator():\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n         TP(A, B)*TP(B, C) - TP(B, C)*TP(A, B)\n \n+def test_tensor_product_issue_24142():\n+    # Original test patch cases\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    \n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    \n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test cases\n+    # Test when one of the tensor factors is 0\n+    assert TP(A - A, B + C).expand(tensorproduct=True) == \\\n+        0\n+    assert TP(A, B - B).expand(tensorproduct=True) == \\\n+        0\n+\n+    # Test with multiple scalar multiplication\n+    assert TP(3*A - B, 2*B).expand(tensorproduct=True) == \\\n+        6 * TP(A, B) - 2 * TP(B, B)\n+\n+    # Test symmetry with respect to the order of expansion\n+    assert TP(A + B, 2*C - D).expand(tensorproduct=True) == \\\n+        2 * TP(A, C) - TP(A, D) + 2 * TP(B, C) - TP(B, D)\n+    \n+    assert TP(2*C - D, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(C, A) + 2 * TP(C, B) - TP(D, A) - TP(D, B)\n \n def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..f731df1 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -10,10 +11,12 @@ from sympy.functions.elementary.exponential import (exp, log)\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.functions.elementary.trigonometric import sin\n from sympy.integrals.integrals import integrate\n-from sympy.physics.units import (amount_of_substance, area, convert_to, find_unit,\n+from sympy.physics.units import (Quantity, time, velocity, acceleration, second, meter,\n+                                 amount_of_substance, area, convert_to, find_unit,\n                                  volume, kilometer, joule, molar_gas_constant,\n                                  vacuum_permittivity, elementary_charge, volt,\n                                  ohm)\n+from sympy.physics.units.systems.si import SI\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n@@ -561,8 +564,39 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+    \n+    expr = A1*T1 + V1\n+    # The following call should not raise a ValueError if the issue is fixed\n+    SI._collect_factor_and_dimension(expr)\n \n-def test_prefixed_property():\n+    # Additional case with different scale factors\n+    v2 = Quantity('v2')\n+    SI.set_quantity_dimension(v2, velocity)\n+    SI.set_quantity_scale_factor(v2, 2 * meter / second)\n+    \n+    a2 = Quantity('a2')\n+    SI.set_quantity_dimension(a2, acceleration)\n+    SI.set_quantity_scale_factor(a2, -9.8 * meter / second**2)\n+    \n+    t2 = Quantity('t2')\n+    SI.set_quantity_dimension(t2, time)\n+    SI.set_quantity_scale_factor(t2, 5 * second)\n+    \n+    expr2 = a2 * t2 + v2\n+    # This should also work without raising errors\n+    SI._collect_factor_and_dimension(expr2)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..085bd47 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, V, milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -19,7 +20,13 @@ def test_prefix_operations():\n \n     assert m * k == 1\n     assert k * k == M\n-    assert 1 / m == k\n+    # Test the problematic case with milli prefix\n+    assert milli * W == W / 1000  # mW should be equivalent to W/1000\n+    assert milli * V == V / 1000  # mV should be equivalent to V/1000\n+\n+    # Test reverse order multiplication\n+    assert W * milli == W / 1000  # W*milli should also be mW\n+    assert V * milli == V / 1000  # V*milli should also be mV\n     assert k / m == M\n \n     assert dodeca * dodeca == 144\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..ac84e94 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -171,7 +171,10 @@ class Base(models.Model):\n \n \n class SubBase(Base):\n-    sub_id = models.IntegerField(primary_key=True)\n+    pass\n+\n+    class Meta:\n+        ordering = [\"-pk\"]\n \n \n class GrandParent(models.Model):\n",
  "django__django-13033": "",
  "django__django-13265": "",
  "django__django-14534": "",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..e5a48e9 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,10 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.colors import LogNorm, Normalize\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -658,7 +662,30 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n-def test_colorbar_get_ticks_2():\n+def test_update_colorbar_after_changing_norm():\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Ensure initial scale is linear\n+    assert cb.ax.yaxis.get_scale() == 'linear'\n+\n+    # Change the normalization to LogNorm\n+    plot.set_norm(LogNorm(vmin=img.min(), vmax=img.max()))\n+    cb.update_normal(plot)\n+\n+    # Check if scale has updated to log after changing the norm\n+    assert cb.ax.yaxis.get_scale() == 'log'\n+\n+    # Update the canvas\n+    fig.canvas.draw()\n+\n+    # Verify the colorbar ticks are correctly scaled\n+    expected_ticks = np.logspace(np.log10(img.min()), np.log10(img.max()), num=5)\n+    actual_ticks = [float(label.get_text().replace('\u2212', '-')) for label in cb.ax.yaxis.get_ticklabels()]\n+    np.testing.assert_allclose(actual_ticks, expected_ticks, rtol=1e-2)\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..b1b40fd 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -131,9 +131,55 @@ def test_decorators(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_members_in_superclass(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_only',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_only',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_only',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_slots_attribute(app):\n+def test_annotation_only_members_undoc_option(app):\n+    options = {\"members\": None, \"inherited-members\": True, \"undoc-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_only',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_only',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_only',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'class', 'target.slots.Bar', options)\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..b73d623 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -9,8 +10,25 @@ from sympy.utilities.pytest import XFAIL\n from sympy.abc import x, y, z, t, a, b, c, d, e, f, g, h, i, k\n \n \n-\n-def test_trigsimp1():\n+def test_issue_rational_simplification():\n+    # Test simplification of trigonometric expressions with Rational angles\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    \n+    # Test dot product of trigonometric vectors\n+    r = t1.dot(t2)\n+    simplified_r = trigsimp(r)\n+    assert simplified_r == cos(Rational(1, 50 - 1, 25)), \"Expected cos(1/50 - 1/25)\"\n+    \n+    # Test direct trigonometric expression\n+    r_exp = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    simplified_r_exp = trigsimp(r_exp)\n+    assert simplified_r_exp == cos(Rational(1, 50 - 1, 25)), \"Expected cos(1/50 - 1/25)\"\n+\n+    # Additional check using acos representation\n+    acos_r = acos(r_exp)\n+    simplified_acos_r = acos(trigsimp(r_exp))\n+    assert simplify(acos_r) == simplify(simplified_acos_r), \"acos simplification mismatch\"\n     x, y = symbols('x,y')\n \n     assert trigsimp(1 - sin(x)**2) == cos(x)**2\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..06a6ebb 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,36 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_pretty_sum_with_addition():\n+    from sympy.abc import x\n+    from sympy import Sum, oo, pprint\n+    from sympy.printing.pretty import pretty\n \n-def test_units():\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ascii_str = \\\n+\"\"\"\\\n+  oo      \\n\\\n+ ___      \\n\\\n+ \\\\  `     \\n\\\n+  \\\\     x \\n\\\n+  /    + 3\\n\\\n+ /__,     \\n\\\n+x = 1     \\\n+\"\"\"\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e       \\n\\\n+ ___      \\n\\\n+ \u2572        \\n\\\n+  \u2572     x \\n\\\n+  \u2571    + 3\\n\\\n+ \u2571        \\n\\\n+ \u203e\u203e\u203e      \\n\\\n+x = 1     \\\n+\"\"\")\n+\n+    assert pretty(expr) == ascii_str\n+    assert pprint(expr) == ucode_str\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..b336ae0 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -701,6 +701,23 @@ def test_uniq():\n     assert list(uniq([[1], [2, 1], [1]])) == [[1], [2, 1]]\n     assert list(uniq(permutations(i for i in [[1], 2, 2]))) == \\\n         [([1], 2, 2), (2, [1], 2), (2, 2, [1])]\n+\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    # Additional test cases to cover more scenarios\n+    f = [1, 2, 2, 3]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = ['a', 'b', 'c', 'a']\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = ['apple', 'banana', 'apple']\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+\n+    f = list('abcabc')\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n     assert list(uniq([2, 3, 2, 4, [2], [1], [2], [3], [1]])) == \\\n         [2, 3, 4, [2], [1], [3]]\n \n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..200d6e4 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -6,6 +7,7 @@ from operator import attrgetter\n from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n+from django.db.models import Max\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n \n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..f4ad814 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,6 +546,19 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n+    def test_subquery_initialization(self):\n+        # Test that when a Subquery is initialized, its query has subquery set to True\n+        apps_queryset = App.objects.all()\n+        subquery_instance = Subquery(apps_queryset)\n+        self.assertIs(subquery_instance.query.subquery, True, \"Subquery initialization should set query.subquery to True\")\n+\n+        # Check the SQL generated is correctly wrapped with brackets\n+        with connection.cursor() as cursor:\n+            compiler = subquery_instance.query.get_compiler(connection=connection)\n+            sql, _ = subquery_instance.as_sql(compiler, connection)\n+            self.assertTrue(sql.startswith('(SELECT'), \"The SQL should start with '(SELECT'\")\n+            self.assertTrue(sql.endswith(')'), \"The SQL should end with ')'\")\n+\n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..5373b19 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,15 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +173,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..9d7a076 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+import seaborn as sns\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,19 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_hue_in_map(self):\n+        iris = sns.load_dataset(\"iris\")\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\",\"sepal_width\"], x_vars=[\"petal_length\",\"petal_width\"])\n+        \n+        # The error was observed with this configuration in version 0.11.1\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            success = True\n+        except Exception as e:\n+            success = False\n+\n+        assert success, \"PairGrid with hue in map should not raise an error\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..44915f1 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -347,7 +347,17 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n-def test_excinfo_for_later():\n+def test_excinfo_with_raises_str():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\n+            \"A\\n\"\n+            \"B\\n\"\n+            \"C\"\n+        )\n+    # Test that str(excinfo) does not behave like the caught exception's str\n+    assert str(excinfo) != \"A\\nB\\nC\"\n+    # Test that str(excinfo.value) behaves like a caught exception's str\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..9735b9f 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,10 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Test using the hypothetical single-character shortcut '-C'\n+        result = testdir.runpytest(\"-C\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -436,6 +440,10 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n+        # Test using the hypothetical single-character shortcut '-C'\n+        result = testdir.runpytest(\"-C\")\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+\n \n class TestSession:\n     def test_parsearg(self, testdir):\n",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..8996361 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,20 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, Sum, symbols\n+from sympy.matrices.expressions.matexpr import Identity\n \n-def test_Identity_doit():\n+def test_identity_matrix_sum():\n+    n = Symbol('n', integer=True, positive=True)\n+    In = Identity(n)\n+    i, j = symbols('i j', integer=True)\n+    \n+    # Assert that the total sum of all elements in the identity matrix is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n+    # Test with specific sizes to check for correctness\n+    assert Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit() == 3\n+    assert Sum(Sum(In[i, j], (i, 0, 4)), (j, 0, 4)).doit() == 5\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..5bb7428 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,17 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_21537_latex_parsing():\n+    from sympy.parsing.latex import parse_latex\n+    from sympy import Symbol, Rational, Pow, Mul, Add\n+    \n+    a, b, c = Symbol('a'), Symbol('b'), Symbol('c')\n+    expected_expression = Mul(\n+        Pow(Add(Pow(a, 3), b), 1), \n+        Pow(c, 1), evaluate=False\n+    ) / Pow(c, 2)\n+    parsed_expression = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    assert parsed_expression == expected_expression, f\"Expected {expected_expression}, got {parsed_expression}\"\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}