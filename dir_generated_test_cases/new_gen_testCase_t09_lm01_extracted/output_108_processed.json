{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..261a5c6 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -128,6 +128,24 @@ def test_arith_oper():\n     with pytest.raises(ModelDefinitionError, match=r\"Unsupported operands for arithmetic operator: .*\"):\n         _arith_oper(sh1, map1)\n \n+from astropy.modeling import models\n+from astropy.modeling.separable import separability_matrix\n+\n+\n+def test_nested_compound_models_separability():\n+    # Testing nested compound model with separability_matrix\n+    cm = models.Linear1D(10) & models.Linear1D(5)\n+    nested_cm = models.Pix2Sky_TAN() & cm\n+    \n+    expected_separability = np.array([\n+        [ True,  True, False, False],\n+        [ True,  True, False, False],\n+        [False, False,  True,  True],\n+        [False, False,  True,  True]\n+    ])\n+    \n+    assert_allclose(separability_matrix(nested_cm), expected_separability)\n+\n \n @pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n def test_separable(compound_model, result):\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..1c38bb7 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,59 @@\n+\n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing a table with multiple header rows in RST format\"\"\"\n+\n+    # Define a simple QTable with units\n+    tbl = QTable({\n+        'wave': [350, 950] * u.nm,\n+        'response': [0.7, 1.2] * u.ct,\n+        'ints': [1, 2]\n+    })\n+    \n+    # Expected lines after writing with header rows\n+    expected_lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \" 350.0      0.7    1\",\n+        \" 950.0      1.2    2\",\n+        \"======= ======== ====\",\n+    ]\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == expected_lines\n+\n+\n+def test_write_rst_no_header_rows():\n+    \"\"\"Test writing a table in RST format without extra header rows\"\"\"\n+    \n+    tbl = QTable({\n+        'wave': [350, 950] * u.nm,\n+        'response': [0.7, 1.2] * u.ct,\n+    })\n+    \n+    # Expected lines without header rows\n+    expected_lines = [\n+        \"===== ========\",\n+        \" wave response\",\n+        \"===== ========\",\n+        \"350.0      0.7\",\n+        \"950.0      1.2\",\n+        \"===== ========\",\n+    ]\n+    \n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\")\n+    assert out.getvalue().splitlines() == expected_lines\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..af0c659 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -33,8 +33,37 @@ def test_get_tables_from_qdp_file(tmp_path):\n \n     with open(path, \"w\") as fp:\n         print(example_qdp, file=fp)\n+import pytest\n+import numpy as np\n+from astropy.utils.exceptions import AstropyUserWarning\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_case_insensitivity(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Sample QDP file\n+    READ SERR 1 2\n+    1 0.5 1 0.5\n+    \"\"\"\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"test_case_sensitive.qdp\")\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n \n-    table0 = _read_table_qdp(fp.name, names=[\"MJD\", \"Rate\"], table_id=0)\n+    table = _read_table_qdp(path)\n+    assert np.isclose(table[\"col1\"][0], 1.0)\n+    assert np.isclose(table[\"col2\"][0], 0.5)\n     assert table0.meta[\"initial_comments\"][0].startswith(\"Swift\")\n     assert table0.meta[\"comments\"][0].startswith(\"WT -- hard data\")\n     table2 = _read_table_qdp(fp.name, names=[\"MJD\", \"Rate\"], table_id=2)\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..39cb78a 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,46 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+from astropy.nddata import NDDataRef\n+import numpy as np\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "",
  "django__django-10914": "",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..ff77e16 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -375,6 +375,33 @@ class BasicExpressionsTests(TestCase):\n             company_ceo_set__num_employees=F('company_ceo_set__num_employees')\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 2)\n+    \n+    def test_order_by_multiline_sql(self):\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN status in ('accepted', 'verification')\n+                     THEN 2 ELSE 1 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN status in ('accepted', 'verification')\n+                     THEN (accepted_datetime, preferred_datetime)\n+                     ELSE null END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN status not in ('accepted', 'verification')\n+                     THEN (accepted_datetime, preferred_datetime, created_at)\n+                     ELSE null END\n+            ''', []).desc()\n+        )\n+        for qs in (\n+            MyModel.objects.all(),\n+            MyModel.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                self.assertQuerysetEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [repr(obj) for obj in expected_objects]\n+                )\n \n     def test_order_by_exists(self):\n         mary = Employee.objects.create(firstname='Mary', lastname='Mustermann', salary=20)\n",
  "django__django-11039": "",
  "django__django-11049": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..54e812f 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,21 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_trailing_newline_in_username(self):\n+        invalid_usernames = [\n+            'username\\n',  # trailing newline\n+            'username\\r\\n',  # trailing carriage return and newline\n+            'validusername\\n\\n',  # multiple trailing newlines\n+        ]\n+        ascii_validator = validators.ASCIIUsernameValidator()\n+        unicode_validator = validators.UnicodeUsernameValidator()\n+\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    ascii_validator(invalid)\n+                with self.assertRaises(ValidationError):\n+                    unicode_validator(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +272,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..172151e 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -366,6 +366,29 @@ class HttpResponseTests(unittest.TestCase):\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n+    def test_memoryview_empty(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_large_content(self):\n+        large_content = b'x' * 10**6  # 1 MB content\n+        r = HttpResponse(memoryview(large_content))\n+        self.assertEqual(r.content, large_content)\n+\n+    def test_memoryview_partial_content(self):\n+        full_content = b'PartialContentTest'\n+        partial_view = memoryview(full_content)[:7]  # Get 'Partial'\n+        r = HttpResponse(partial_view)\n+        self.assertEqual(r.content, b'Partial')\n+\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_iter_content(self):\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..9f5250d 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,3 +1,5 @@\n+\n+from django.db.models.deletion import Collector\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n@@ -464,7 +466,34 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        \"\"\"Test that deleting a model instance with no dependencies sets its PK to None.\"\"\"\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_not_fast_deletable(self):\n+        \"\"\"Test that deleting a model instance with dependencies doesn't set its PK to None.\"\"\"\n+        parent = Parent.objects.create()\n+        Child.objects.create(parent=parent)\n+        # Parent cannot be fast-deleted due to dependency on Child.\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(parent))\n+        parent.delete()\n+        # PK should not be None as the instance has dependencies.\n+        self.assertIsNotNone(parent.pk)\n+\n+    def test_delete_instance_with_dependency(self):\n+        \"\"\"Ensure deleting an instance with model dependencies does not set PK to None.\"\"\"\n+        user_with_avatar = User.objects.create(avatar=Avatar.objects.create(desc='avatar'))\n+        # User cannot be fast-deleted due to dependency on avatar.\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(user_with_avatar))\n+        user_with_avatar.delete()\n+        self.assertIsNotNone(user_with_avatar.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..7b11d9d 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -13,6 +13,7 @@ from importlib import import_module\n from pathlib import Path\n from unittest import mock, skip, skipIf\n \n+import sys\n from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n@@ -132,8 +133,25 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         del module.__spec__\n         self.assertEqual(autoreload.iter_modules_and_files((module,), frozenset()), frozenset())\n \n-\n-class TestCommonRoots(SimpleTestCase):\n+    def test_main_module_is_resolved(self):\n+        \"\"\"\n+        Ensure that the main module is included in the list of files to be watched.\n+        This simulates detecting changes in manage.py.\n+        \"\"\"\n+        main_module = sys.modules['__main__']\n+        main_module_path = Path(main_module.__file__).resolve()\n+        \n+        # Ensure the path is being tracked\n+        self.assertFileFound(main_module_path)\n+\n+        # Simulate a change in the main module\n+        with open(main_module_path, 'a') as f:\n+            f.write(\"# test change\\n\")\n+\n+        # Check if the simulated change is detected (in reality this would restart server)\n+        # This part is mock/test demonstration, details for autoreload mechanism might be different.\n+        self.clear_autoreload_caches()\n+        self.assertFileFound(main_module_path)\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..c9cb71e 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -17,6 +17,8 @@ from django.template import TemplateDoesNotExist\n from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.utils.functional import SimpleLazyObject\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n@@ -242,7 +244,33 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n-    def test_handle_db_exception(self):\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test to ensure that when Http404 is raised in a path converter's\n+        to_python method, a technical 404 page is shown if DEBUG=True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            # The contained text can be specific to the framework's default 404 response in debug\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_technical_404_for_value_error_in_converter(self):\n+        \"\"\"\n+        Test when ValueError is raised in a path converter's to_python method,\n+        the URL does not match and returns a 404 without a technical page.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=ValueError):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Not Found', status_code=404)\n+    \n+    def test_successful_path_conversion(self):\n+        \"\"\"\n+        Test to verify that the path conversion is successful when to_python works correctly.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', return_value=1):\n+            response = self.client.get('/path-post/1/')\n+            # Assuming this should be a success when path conversion is correct\n+            self.assertEqual(response.status_code, 200)\n         \"\"\"\n         Ensure the debug view works when a database exception is raised by\n         performing an invalid query and passing the exception to the debug view.\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..950b23f 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -190,8 +190,45 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E005',\n             ),\n         ])\n+    def test_choices_max_length_too_small(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('TOO_LONG', 'Too Long Value'), \n+                    ('OK', 'Good')\n+                ]\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (8 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n \n-    def test_iterable_of_iterable_choices(self):\n+    def test_choices_named_group_max_length_too_small(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=5, \n+                choices=[\n+                    ('Group1', [\n+                        ('SHORT', 'Short'), \n+                        ('LARGEVALUE', 'Long Value')\n+                    ])\n+                ]\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (10 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n         class ThingItem:\n             def __init__(self, value, display):\n                 self.value = value\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..e83dfae 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -261,6 +261,18 @@ class WriterTests(SimpleTestCase):\n             A = b'a-value'\n             B = b'value-b'\n \n+        class TranslatedEnum(enum.Enum):\n+            ALPHA = _('alpha')\n+            BETA = _('beta')\n+\n+        # Test that Enum object uses its name, not translated value\n+        model_field = models.CharField(default=TranslatedEnum.ALPHA, max_length=128)\n+        string = MigrationWriter.serialize(model_field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(default=migrations.test_writer.TranslatedEnum['ALPHA'], max_length=128)\"\n+        )\n+\n         class IntEnum(enum.IntEnum):\n             A = 1\n             B = 2\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..4b92676 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,30 @@\n+\n+class ParseHttpDateTests(unittest.TestCase):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n import unittest\n from datetime import datetime\n+import calendar\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..6f21f44 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -39,9 +39,30 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n+from django.db import models\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTestCase(TestCase):\n+    def setUp(self):\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n \n-class ChoicesTests(SimpleTestCase):\n-    def test_integerchoices(self):\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.get(pk=self.my_object.pk)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n         self.assertEqual(Suit.values, [1, 2, 3, 4])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..c7be6cf 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,6 +148,42 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.db import models\n+from django.test import TestCase\n+\n+class OverridingGetFieldDisplayTests(TestCase):\n+\n+    def test_overriding_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+    \n+    def test_overriding_get_FIELD_display_with_different_value(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'another value'\n+\n+        f = FooBar(foo_bar=2)\n+        self.assertEqual(f.get_foo_bar_display(), 'another value')\n+\n+    def test_ensure_override_works_with_no_choices(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField()\n+\n+            def get_foo_bar_display(self):\n+                return 'no choices'\n+\n+        f = FooBar(foo_bar='any value')\n+        self.assertEqual(f.get_foo_bar_display(), 'no choices')\n+\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n     def test_choices_and_field_display(self):\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..4bf77fa 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,6 @@\n+\n+from django.test import TestCase\n+\n import pickle\n \n from django import forms\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..52dcf73 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..0ee6c57 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -18,7 +20,52 @@ def get_connection_copy():\n     return test_connection\n \n \n-class TestDbSignatureTests(SimpleTestCase):\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_no_circular_reference(self):\n+        # Test deserialization cases with no circular references to ensure standard behavior.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=1)\n+        obj_ref = ObjectReference.objects.get(pk=2)\n+        self.assertIsNone(obj.obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n     def test_default_name(self):\n         # A test db name isn't set.\n         prod_name = 'hodor'\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..b548c5d 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -152,7 +152,7 @@ class RelativeFieldTests(SimpleTestCase):\n                 \"keyword argument.\",\n                 hint=(\n                     'If you want to create a recursive relationship, use '\n-                    'ForeignKey(\"self\", symmetrical=False, through=\"AmbiguousRelationship\").'\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n                 ),\n                 obj=field,\n                 id='fields.E335',\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..d7278a4 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1248,8 +1248,52 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleanse_setting('SETTING_NAME', initial),\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n+    def test_cleanse_nested_structures(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'list_of_dicts': [\n+                {'password': 'secret123'},\n+                {'token': 'token_value'},\n+            ],\n+            'tuple_of_dicts': (\n+                {'SECRET_KEY': 'secret_key_value'},\n+                {'api_key': 'api_key_value'},\n+            ),\n+            'nested_lists': [\n+                [\n+                    {'database_password': 'db_pass'},\n+                    {'signature': 'sign_value'},\n+                ]\n+            ],\n+            'safe_key': [\n+                {'random_key': 'random_value'},\n+            ],\n+        }\n \n-    def test_request_meta_filtering(self):\n+        expected = {\n+            'list_of_dicts': [\n+                {'password': reporter_filter.cleansed_substitute},\n+                {'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'tuple_of_dicts': (\n+                {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+                {'api_key': reporter_filter.cleansed_substitute},\n+            ),\n+            'nested_lists': [\n+                [\n+                    {'database_password': reporter_filter.cleansed_substitute},\n+                    {'signature': reporter_filter.cleansed_substitute},\n+                ]\n+            ],\n+            'safe_key': [\n+                {'random_key': 'random_value'},\n+            ],\n+        }\n+\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            expected,\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..80b6e6f 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,44 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together_edge_cases(self):\n+        app_label = 'test_alter_index_together_remove_wunto_edge'\n+        table_name = '%s_pony' % app_label\n+\n+        # Setting up the initial state with unique_together and index_together on the same fields\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Attempt to remove index_together but leave unique_together intact\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Attempt to add index back using the new Options.indexes feature\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        options_indexes = [models.Index(fields=['pink', 'weight'], name='idx_pink_weight')]\n+        new_state.models[app_label, 'pony'].options['indexes'] = options_indexes\n+        with connection.schema_editor() as editor:\n+            operation = migrations.AlterModelOptions('Pony', options={'indexes': options_indexes})\n+            operation.state_forwards(app_label, new_state)\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..f648ccc 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,39 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_consistent_delete_result_with_foreign_keys(self):\n+        \"\"\"\n+        Test that the result of delete() is consistent for models with foreign keys.\n+        \"\"\"\n+        # Define models with foreign key relationships\n+        r = R.objects.create()\n+        HiddenUser.objects.create(r=r)\n+\n+        # Perform deletion\n+        deleted, deleted_objs = R.objects.all().delete()\n+\n+        # Assert result format consistency\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {\n+            R._meta.label: 0,\n+            HiddenUser._meta.label: 0\n+        })\n+\n+    def test_consistent_delete_result_without_foreign_keys(self):\n+        \"\"\"\n+        Test that the result of delete() is consistent for models without foreign keys.\n+        \"\"\"\n+        # Define a simple model without any foreign keys\n+        block_library = BlockLibrary.objects.create(name='Test Library')\n+\n+        # Perform deletion\n+        deleted, deleted_objs = BlockLibrary.objects.filter(pk=block_library.pk).delete()\n+\n+        # Assert result format consistency\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {\n+            BlockLibrary._meta.label: 0\n+        })\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "",
  "django__django-12915": "",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..b1cc757 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,18 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\t whitespace-in-value \\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore-in-value', False),\n+            ('__strip__underscore-value___', 'strip-underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('hello---world__foo', 'hello-world-foo', False),\n+            ('--hello--world--', 'hello-world', False),\n+            ('___underscores---and---dashes__', 'underscores-and-dashes', False),\n+            ('__mixed_case-Dashes_and__underscores___', 'mixed-case-dashes-and-underscores', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..81b3a4e 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -45,6 +46,22 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lte=4)\n         self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n \n+    def test_union_none_behavior(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs_combined = qs1.union(qs2)\n+        none_qs = qs_combined.none()\n+        self.assertEqual(len(none_qs), 0)\n+        self.assertNumbersEqual(qs_combined, [0, 1, 8, 9], ordered=False)\n+\n+    def test_union_none_with_values(self):\n+        qs1 = Number.objects.filter(num__lte=1).values('num')\n+        qs2 = Number.objects.filter(num__gte=8).values('num')\n+        qs_combined = qs1.union(qs2)\n+        none_qs = qs_combined.none()\n+        self.assertEqual(len(none_qs), 0)\n+        self.assertCountEqual(qs_combined, [{'num': 0}, {'num': 1}, {'num': 8}, {'num': 9}])\n+\n     def test_union_distinct(self):\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n@@ -313,4 +330,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..e18bb9a 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2829,8 +2829,61 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+from django.test import TestCase\n+from .models import Character, StumpJoke\n+from django import forms\n+from django.db.models import Q\n+\n+class ForeignKeyLimitChoicesTests(TestCase):\n+    def setUp(self):\n+        # Create characters\n+        self.marley = Character.objects.create(username=\"Marley\", last_action=\"2023-10-15\")\n+        self.threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2023-10-15\")\n+        \n+        # Create stump jokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        # Add has_fooled_today references\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+    def test_no_duplicate_options_for_foreignkey(self):\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_fk_1',\n+            )\n+        \n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+        \n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(form.fields['character1'].queryset, [self.marley, self.threepwood])\n+        \n+    def test_second_foreign_key_variant(self):\n+        class CharacterDetails2(models.Model):\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={'jokes__funny': True, 'jokes_today__funny': True},\n+                related_name='details_fk_2',\n+            )\n+\n+        class CharacterDetailsForm2(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails2\n+                fields = '__all__'\n \n-class FormFieldCallbackTests(SimpleTestCase):\n+        form = CharacterDetailsForm2()\n+        self.assertCountEqual(form.fields['character2'].queryset, [self.marley, self.threepwood])\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..d55fb91 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -97,7 +97,28 @@ class BasicFieldTests(SimpleTestCase):\n         field._get_default\n         pickle.dumps(field)\n \n-    def test_deconstruct_nested_field(self):\n+    def test_abstract_inherited_field_equality(self):\n+        \"\"\"Test that fields inherited from abstract models are unequal across different concrete models.\"\"\"\n+        \n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+            \n+            class Meta:\n+                abstract = True\n+        \n+        class ConcreteModel1(AbstractModel):\n+            pass\n+        \n+        class ConcreteModel2(AbstractModel):\n+            pass\n+        \n+        field_cm1 = ConcreteModel1._meta.get_field('field')\n+        field_cm2 = ConcreteModel2._meta.get_field('field')\n+        \n+        self.assertNotEqual(field_cm1, field_cm2)\n+        self.assertFalse(field_cm1 == field_cm2)\n+        self.assertTrue(field_cm1 < field_cm2 or field_cm2 < field_cm1)  # They must order consistently\n+        self.assertNotEqual(hash(field_cm1), hash(field_cm2))\n         \"\"\"deconstruct() uses __qualname__ for nested class support.\"\"\"\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..1fc8205 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,7 +45,21 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n-    def test_available_apps(self):\n+\n+    def test_app_list_contains_model(self):\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n+\n+        # Check that the model class is included in the app_list\n+        admin_views = apps[0]\n+        article = admin_views['models'][0]\n+        self.assertEqual(article['object_name'], 'Article')\n+        self.assertEqual(article['model'], Article)\n+\n+        auth = apps[1]\n+        user = auth['models'][0]\n+        self.assertEqual(user['object_name'], 'User')\n+        self.assertEqual(user['model'], User)\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..54a4f62 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField, IntegerUsernameUser\n+from django.contrib.auth.models import User\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +40,39 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n+    def test_token_remains_valid_without_email_change(self):\n+        \"\"\"Token remains valid if the user email address is not changed.\"\"\"\n+        user = User.objects.create_user(\n+            'stableuser', \n+            'stable@example.com', \n+            password='testpw'\n+        )\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+        user.save()  # Save without changing email.\n+        self.assertIs(p0.check_token(user, tk1), True)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..5b5ddfb 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..6a87a6c 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,7 +19,9 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n-from django.core.management.commands.loaddata import Command as LoaddataCommand\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n@@ -1867,7 +1869,30 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+class CommandLineExecutionTests(SimpleTestCase):\n+\n+    def test_custom_prog_name(self):\n+        \"\"\"\n+        Test that the program name is computed from the execute_from_command_line() argv\n+        and not from sys.argv.\n+        \"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['incorrect_prog'] + args):\n+                execute_from_command_line(['correct_prog'] + args)\n+        self.assertIn('usage: correct_prog ', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_none_sys_argv(self):\n+        \"\"\"\n+        Test that execute_from_command_line uses argv[0] when sys.argv[0] is None.\n+        \"\"\"\n+        args = ['runserver']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin ', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..ff04a5d 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -6,6 +7,7 @@ from django import __version__\n from django.core.management import CommandError, call_command\n from django.test import SimpleTestCase\n from django.test.utils import captured_stdin, captured_stdout\n+import select\n \n \n class ShellCommandTestCase(SimpleTestCase):\n@@ -30,14 +32,96 @@ class ShellCommandTestCase(SimpleTestCase):\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    def setUp(self):\n+        self.script_globals = 'print(\"__name__\" in globals())'\n+        self.script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    def setUp(self):\n+        self.script_globals = 'print(\"__name__\" in globals())'\n+        self.script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n         select.return_value = ([], [], [])\n@@ -49,4 +133,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..7f96f34 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,7 +1013,23 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_explicit_verbose_name_plural_overrides_default(self):\n+        class ExplicitVerboseNamePluralInline(TabularInline):\n+            model = ExplicitVerboseNameProfile\n+            verbose_name = 'Singular Verbose Name'\n+            verbose_name_plural = 'Custom Plural Verbose Name'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [ExplicitVerboseNamePluralInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        \n+        # Assert that the explicit verbose_name_plural is used\n+        self.assertContains(response, '<h2>Custom Plural Verbose Name</h2>')\n+        self.assertContains(response, 'Add another Singular Verbose Name')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n",
  "django__django-13757": "",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..f7dda50 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -162,16 +162,38 @@ class DispatcherTests(SimpleTestCase):\n         self.assertTestIsClean(a_signal)\n \n     def test_send_robust_fail(self):\n+        from django.dispatch import receiver\n+        from django.dispatch import Signal\n+        from types import TracebackType\n+        import logging\n+\n         def fails(val, **kwargs):\n             raise ValueError('this')\n         a_signal.connect(fails)\n-        result = a_signal.send_robust(sender=self, val=\"test\")\n-        err = result[0][1]\n-        self.assertIsInstance(err, ValueError)\n-        self.assertEqual(err.args, ('this',))\n-        self.assertTrue(hasattr(err, '__traceback__'))\n-        self.assertIsInstance(err.__traceback__, TracebackType)\n-        a_signal.disconnect(fails)\n+        # Create a test logger\n+        logger = logging.getLogger('django.dispatch')\n+        logger.setLevel(logging.ERROR)\n+\n+        a_signal.connect(fails)\n+        try:\n+            with self.assertLogs('django.dispatch', level='ERROR') as cm:\n+                result = a_signal.send_robust(sender=self, val=\"test\")\n+            \n+            err = result[0][1]\n+            self.assertIsInstance(err, ValueError)\n+            self.assertEqual(err.args, ('this',))\n+            self.assertTrue(hasattr(err, '__traceback__'))\n+            self.assertIsInstance(err.__traceback__, TracebackType)\n+\n+            # Verify that an error was logged\n+            log_record = cm.records[0]\n+            self.assertIn('Error calling ', log_record.getMessage())\n+            self.assertIsNotNone(log_record.exc_info)\n+            _, exc_value, _ = log_record.exc_info\n+            self.assertIsInstance(exc_value, ValueError)\n+            self.assertEqual(str(exc_value), 'this')\n+        finally:\n+            a_signal.disconnect(fails)\n         self.assertTestIsClean(a_signal)\n \n     def test_disconnection(self):\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..2fef66c 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -298,6 +298,15 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n+        # Additional test for ModelChoiceField to check invalid choice value interpolation\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n+\n         # ModelMultipleChoiceField\n         e = {\n             'required': 'REQUIRED',\n@@ -307,4 +316,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..5e88fc1 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -60,6 +60,14 @@ class Second(models.Model):\n # Protect against repetition of #1839, #2415 and #2536.\n class Third(models.Model):\n     name = models.CharField(max_length=20)\n+\n+\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n@@ -70,6 +78,14 @@ class Parent(models.Model):\n \n class Child(models.Model):\n     name = models.CharField(max_length=20)\n+\n+\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n     parent = models.ForeignKey(Parent, models.CASCADE)\n \n \n@@ -85,6 +101,14 @@ class ToFieldChild(models.Model):\n class Category(models.Model):\n     name = models.CharField(max_length=20)\n \n+\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n     def __str__(self):\n         return self.name\n \n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..694f502 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -19,11 +20,24 @@ class QTests(SimpleTestCase):\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n+    def test_q_object_with_dict_keys(self):\n+        # Testing with an empty dict_keys\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+        \n+        # Testing with a non-empty dict_keys\n+        q = Q(x__in={'a': 1, 'b': 2}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n     def test_combine_not_q_object(self):\n         obj = object()\n         q = Q(x=1)\n-        with self.assertRaisesMessage(TypeError, str(obj)):\n-            q | obj\n         with self.assertRaisesMessage(TypeError, str(obj)):\n             q & obj\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..4fdb0f8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -25,6 +25,7 @@ from django.db.models.functions import (\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.db.models import Exists, Q, OuterRef\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n",
  "django__django-14155": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..73ae150 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,7 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import isolate_apps\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -66,6 +69,17 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n@@ -82,6 +96,17 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..4c6a40c 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2217,6 +2217,20 @@ class StartApp(AdminScriptTestCase):\n             \"won't replace conflicting files.\"\n         )\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        # Create a base directory to house the app.\n+        app_base_dir = os.path.join(self.test_dir, 'apps', 'app_with_trailing_slash')\n+        os.makedirs(app_base_dir)\n+        \n+        # Use django-admin startapp with a trailing slash in the directory name.\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app_with_trailing_slash', '')])\n+\n+        # Ensure no output error occurs.\n+        self.assertNoOutput(err)\n+\n+        # Verify that the apps.py file is created, indicating the app was successfully created.\n+        self.assertIs(os.path.exists(os.path.join(app_base_dir, 'apps.py')), True)\n+\n     def test_template(self):\n         out, err = self.run_django_admin(['startapp', 'new_app'])\n         self.assertNoOutput(err)\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..ba270b7 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -2,6 +2,7 @@ import datetime\n import re\n from unittest import mock\n \n+from django.forms import forms\n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n     PasswordResetForm, ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget,\n@@ -1020,7 +1021,19 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonlypasswordhashwidget_label_for_attribute(self):\n+        \"\"\"\n+        Test that ReadOnlyPasswordHashWidget does not have a 'for' attribute\n+        in its <label> because it doesn't have any labelable elements.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        form = TestForm()\n+        bound_field = form['hash_field']\n+        label_tag = bound_field.label_tag()\n+        self.assertNotIn('for=\"', label_tag)\n+        self.assertEqual(label_tag, '<label>Hash field:</label>')\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..5d8df70 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -657,8 +657,26 @@ class WriterTests(SimpleTestCase):\n \n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n-\n-    def test_simple_migration(self):\n+    \n+    def test_serialize_model_with_custom_field_and_mixin(self):\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+        \n+        # Serialize MyModel\n+        serialized_my_model = MigrationWriter.serialize(MyModel)\n+        self.assertIn(\"models\", serialized_my_model)\n+        self.assertIn(\"MyMixin\", serialized_my_model)\n+        self.assertIn(\"MyField\", serialized_my_model)\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..f8fcf9b 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,8 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        error_list = ErrorList(['Please submit at most 1 form.'], error_class='nonform')\n+        self.assertEqual(str(formset.non_form_errors()), str(error_list))\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +359,8 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        error_list = ErrorList(['Please submit at least 3 forms.'], error_class='nonform')\n+        self.assertEqual(str(formset.non_form_errors()), str(error_list))\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +984,8 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        error_list = ErrorList(['You may only specify a drink once.'], error_class='nonform')\n+        self.assertEqual(str(formset.non_form_errors()), str(error_list))\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..3f53b53 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -293,6 +293,42 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+    def test_serialize_result_extended_field(self):\n+        class ExtendedAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'extra_field': getattr(obj, 'extra_field', ''),\n+                }\n+\n+        # Adding test data\n+        Question.objects.create(question='Extended Question 1', extra_field='Extra Info 1')\n+        Question.objects.create(question='Extended Question 2', extra_field='Extra Info 2')\n+\n+        request = self.factory.get(self.url, {'term': 'extended', **self.opts})\n+        request.user = self.superuser\n+        response = ExtendedAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        \n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'extra_field': q.extra_field}\n+                for q in Question.objects.order_by('pk')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+        request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n+        request.user = self.superuser\n+        with model_admin(Question, PKOrderingQuestionAdmin):\n+            response = AutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[PAGINATOR_SIZE:]],\n+            'pagination': {'more': False},\n+        })\n+\n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-14787": "",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..350b8cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..5f52c20 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,29 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop_additional_check(self):\n+        app_label = 'test_rmwdbtn_additional_check'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..5d96005 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,7 +154,22 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n-    def test_form_as_table_data(self):\n+    def test_form_with_multivalues(self):\n+        class TestMultiValueForm(Form):\n+            field = MultiValueField(\n+                fields=[CharField(max_length=10), IntegerField()],\n+                widget=MultiWidget(widgets=[TextInput(), TextInput()]),\n+            )\n+\n+        form = TestMultiValueForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_field_0\">Field:</label></th>\n+            <td><input type=\"text\" name=\"field_0\" id=\"id_field_0\" required>\n+            <input type=\"text\" name=\"field_1\" id=\"id_field_1\" required></td></tr>\n+            \"\"\"\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..3d5ac07 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,6 +70,12 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            'http://[::1]:80',  # valid IPv6 address with port\n+            'http://[::1]',  # valid IPv6 address without port\n+            # URL with leading slashes and malformed IPv6 part\n+            '////]@N.AN',\n+            # URL with empty hostname after auth part\n+            '#@A.bO',\n         ]\n         for url, expected in tests:\n             with self.subTest(url=url):\n@@ -100,6 +106,12 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            'http://[::1]:80',  # valid IPv6 address with port\n+            'http://[::1]',  # valid IPv6 address without port\n+            # URL with leading slashes and malformed IPv6 part\n+            '////]@N.AN',\n+            # URL with empty hostname after auth part\n+            '#@A.bO',\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..e9bcb1f 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -197,7 +197,14 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n-    def test_empty_expression_annotation(self):\n+    def test_expression_wrapper_with_empty_negated_q(self):\n+        # Test case for the issue described where negating an empty Q object inside ExpressionWrapper causes a crash.\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        # Check if the query executes and returns all books with selected set to True\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n         )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..68d3086 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -143,7 +144,37 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that a message's extra_tags attribute is correctly serialized\n+        and deserialized, particularly when the extra_tags is an empty string.\n+        \"\"\"\n+        storage = self.get_storage()\n+\n+        # Test with extra_tags as an empty string.\n+        message = Message(constants.INFO, \"Test message with empty extra_tags\", extra_tags=\"\")\n+        storage.add(message.level, message.message, extra_tags=message.extra_tags)\n+        response = self.get_response()\n+        storage.update(response)\n+\n+        decoded_message = storage._decode(response.cookies['messages'].value)[0]\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n+\n+        # Test with extra_tags as None.\n+        message_with_none = Message(constants.INFO, \"Test message with None extra_tags\", extra_tags=None)\n+        storage.add(message_with_none.level, message_with_none.message, extra_tags=message_with_none.extra_tags)\n+        storage.update(response)\n+\n+        decoded_message_with_none = storage._decode(response.cookies['messages'].value)[0]\n+        self.assertIsNone(decoded_message_with_none.extra_tags)\n+\n+        # Test with non-empty extra_tags.\n+        message_with_tags = Message(constants.INFO, \"Test message with extra_tags\", extra_tags=\"tag1 tag2\")\n+        storage.add(message_with_tags.level, message_with_tags.message, extra_tags=message_with_tags.extra_tags)\n+        storage.update(response)\n+\n+        decoded_message_with_tags = storage._decode(response.cookies['messages'].value)[0]\n+        self.assertEqual(decoded_message_with_tags.extra_tags, \"tag1 tag2\")\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..99cd4a9 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -39,7 +39,21 @@ class TemplateReloadTests(SimpleTestCase):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n         mock_reset.assert_not_called()\n \n-    def test_watch_for_template_changes(self):\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [BASE_DIR],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_base_dir_in_templates_dirs(self, mock_reset):\n+        \"\"\"\n+        Test that when BASE_DIR is included in TEMPLATES[0]['DIRS'],\n+        the template_changed detection works as expected.\n+        \"\"\"\n+        template_path = BASE_DIR / 'some_template.html'\n+        self.assertTrue(autoreload.template_changed(None, template_path))\n+        mock_reset.assert_called_once()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n@@ -88,7 +102,21 @@ class TemplateReloadTests(SimpleTestCase):\n @require_jinja2\n @override_settings(INSTALLED_APPS=['template_tests'])\n class Jinja2TemplateReloadTests(SimpleTestCase):\n-    def test_watch_for_template_changes(self):\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [BASE_DIR],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_base_dir_in_templates_dirs(self, mock_reset):\n+        \"\"\"\n+        Test that when BASE_DIR is included in TEMPLATES[0]['DIRS'],\n+        the template_changed detection works as expected.\n+        \"\"\"\n+        template_path = BASE_DIR / 'some_template.html'\n+        self.assertTrue(autoreload.template_changed(None, template_path))\n+        mock_reset.assert_called_once()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..e778180 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,13 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty string for If-Modified-Since header does not raise an exception \n+        and treats the resource as modified. This verifies the fix for handling empty strings.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..a94ec1e 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,7 +1,9 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n \n+from argparse import ArgumentDefaultsHelpFormatter\n from admin_scripts.tests import AdminScriptTestCase\n \n from django.apps import apps\n@@ -411,6 +413,44 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+    def test_custom_help_formatter(self):\n+        \"\"\"\n+        Test that the custom Command uses the ArgumentDefaultsHelpFormatter\n+        and check if the help output formatting is as expected.\n+        \"\"\"\n+        description = '''\n+        Import a contract from tzkt.\n+        Example usage:\n+            ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+        '''\n+        epilog = '''\n+        Example usage:\n+            ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+        '''\n+\n+        class ImportContractCommand(BaseCommand):\n+            help = description\n+\n+            def create_parser(self, *args, **kwargs):\n+                kwargs.setdefault('formatter_class', ArgumentDefaultsHelpFormatter)\n+                return super().create_parser(*args, **kwargs)\n+\n+        command = ImportContractCommand()\n+        parser = command.create_parser(\"prog_name\", \"tzkt_import\", epilog=epilog)\n+        \n+        # Capture the help output\n+        output = StringIO()\n+        with mock.patch('sys.stdout', output):\n+            parser.print_help()\n+        \n+        help_output = output.getvalue()\n+\n+        expected_description = \"Import a contract from tzkt\"\n+        expected_usage_line = \"Example usage:\\n    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+\n+        self.assertIn(expected_description, help_output)\n+        self.assertIn(expected_usage_line, help_output)\n+\n     def test_outputwrapper_flush(self):\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..536e12f 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,5 +1,7 @@\n+\n import os\n from datetime import datetime\n+import json\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n@@ -217,7 +219,44 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder_with_different_content(self):\n+        # Custom encoder that changes any input to a fixed JSON string\n+        class StaticJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"static_key\": \"static_value\"})\n+\n+        self.assertHTMLEqual(\n+            json_script({\"random\": \"data\"}, encoder=StaticJSONEncoder),\n+            '<script type=\"application/json\">{\"static_key\": \"static_value\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_modifying_data(self):\n+        # Custom encoder that modifies the data by adding a new key-value pair\n+        class ModifyJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                if isinstance(o, dict):\n+                    o = o.copy()\n+                    o[\"added_key\"] = \"added_value\"\n+                return super().encode(o)\n+\n+        self.assertHTMLEqual(\n+            json_script({\"original_key\": \"original_value\"}, encoder=ModifyJSONEncoder),\n+            '<script type=\"application/json\">{\"original_key\": \"original_value\", \"added_key\": \"added_value\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_advanced(self):\n+        # Custom encoder that handles complex objects\n+        class AdvancedJSONEncoder(DjangoJSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.isoformat()\n+                return super().default(obj)\n+\n+        now = datetime.now()\n+        self.assertHTMLEqual(\n+            json_script({\"date\": now}, encoder=AdvancedJSONEncoder),\n+            f'<script type=\"application/json\">{{\"date\": \"{now.isoformat()}\"}}</script>',\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..a895389 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -142,6 +142,30 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             [self.error_same_tags],\n         )\n \n+    def test_empty_templates_setting(self):\n+        with self.settings(TEMPLATES=[]):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n+    def test_single_template_with_no_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[{\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+                \"OPTIONS\": {\n+                    \"libraries\": {}\n+                }\n+            }]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n+    def test_multiple_templates_with_unique_library_names(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\"unique_tag_1\", \"unique_app_1.templatetags.unique_tag\"),\n+                self.get_settings(\"unique_tag_2\", \"unique_app_2.templatetags.unique_tag\"),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n     def test_template_tags_with_same_library_name(self):\n         with self.settings(\n             TEMPLATES=[\n@@ -206,4 +230,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..5a24bf8 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,12 +398,19 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n-\n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n-    @classmethod\n-    def setUpTestData(cls):\n-        cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n+    def test_select_related_only_on_proxy_models(self):\n+        # Creating objects for test\n+        custom_model_instance = CustomModel.objects.create(name=\"Custom Name\")\n+        proxy_model_instance = ProxyCustomModel.objects.get(pk=custom_model_instance.pk)\n+        AnotherModel.objects.create(custom=proxy_model_instance)\n+        \n+        # Test queryset with select_related and only on proxy model\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        obj = queryset.first()\n+        \n+        # Assert that object is fetched correctly\n+        self.assertIsNotNone(obj)\n+        self.assertEqual(obj.custom.name, \"Custom Name\")\n         cls.tu1 = ProxyTrackerUser.objects.create(name=\"Django Pony\", status=\"emperor\")\n         cls.i1 = Issue.objects.create(summary=\"Pony's Issue\", assignee=cls.tu1)\n \n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..12852e1 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,11 +152,23 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        # Test with parameters that should precede the dbname for PostgreSQL.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n+            ([\"psql\", \"--help\", \"dbname\"], None),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_with_command(self):\n+        # Ensure additional parameters include commands placed before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n@@ -183,4 +195,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..af5745c 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,22 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form_true(self):\n+        # Test case when form_kwargs is set with 'empty_permitted': True\n+        # Ensure that it does not affect empty_form\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        self.assertTrue(hasattr(formset.empty_form, \"empty_permitted\"))\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_ignored_empty_form_false(self):\n+        # Test case when form_kwargs is set with 'empty_permitted': False\n+        # Ensure that it does not affect empty_form\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertTrue(hasattr(formset.empty_form, \"empty_permitted\"))\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..98a383e 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,26 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_null_input(self):\n+        # Test when the input is None\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_empty_string_input(self):\n+        # Test when the input is an empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+\n+    def test_zero_input(self):\n+        # Test when the input is zero\n+        self.assertEqual(nformat(0, \".\"), \"0\")\n+\n+    def test_negative_zero_input(self):\n+        # Test negative zero to see if it behaves as expected\n+        self.assertEqual(nformat(-0, \".\"), \"0\")\n+        \n+    def test_float_input(self):\n+        # Check typical float input format\n+        self.assertEqual(nformat(0.0001, \".\"), \"0.0001\")\n+        self.assertEqual(nformat(-0.0001, \".\"), \"-0.0001\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..9518bb1 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -892,15 +893,47 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n-        class CustomUserChangeForm(UserChangeForm):\n-            class Meta(UserChangeForm.Meta):\n-                model = ExtensionUser\n-                fields = (\n-                    \"username\",\n-                    \"password\",\n-                    \"date_of_birth\",\n-                )\n+    from django.urls import reverse\n+    import urllib.parse\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_user_admin_access_with_to_field(self):\n+        user = User.objects.create(username=\"uuid_test_user\", id=2)\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        admin_user_change_url = reverse(\n+            f\"admin:auth_user_change\",\n+            args=(user.id,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:auth_user_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n \n         user = User.objects.get(username=\"testclient\")\n         data = {\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..6621a25 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,8 +507,37 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from datetime import datetime\n+from django.contrib.sitemaps import Sitemap\n+from django.test import TestCase\n+from django.urls import path, reverse\n+from django.utils.decorators import override_settings\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = '/location/'\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class CallableLastmodTests(TestCase):\n \n-# RemovedInDjango50Warning\n+    def setUp(self):\n+        self.client = self.client_class()\n+        self.site_map_url = reverse('django.contrib.sitemaps.views.index', kwargs={'sitemaps': {'callable-lastmod-no-items': CallableLastmodNoItemsSitemap}})\n+\n+    def test_callable_lastmod_no_items(self):\n+        index_response = self.client.get(self.site_map_url)\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '<sitemap><loc>http://testserver/location/</loc></sitemap>\\n'\n+            '</sitemapindex>\\n'\n+        )\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..bf4f24b 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,9 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock\n+import unittest\n import io\n import os\n import pickle\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..814bcf2 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,9 +1,12 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n from django.contrib.auth.admin import UserAdmin\n+from .tests import get_perm\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n@@ -33,7 +36,39 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_requires_add_permission(self):\n+        # User with only change permission should not see \"save as new\"\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permissions should see \"save as new\"\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "",
  "django__django-16873": "",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..ba76aa2 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -654,7 +654,40 @@ class BulkCreateTests(TestCase):\n     def test_update_conflicts_two_fields_no_unique_fields(self):\n         self._test_update_conflicts_two_fields([])\n \n-    def _test_update_conflicts_unique_two_fields(self, unique_fields):\n+    def test_bulk_create_with_update_conflicts_returns_ids(self):\n+        # Setting up the initial data\n+        UpsertConflict.objects.bulk_create([\n+            UpsertConflict(number=1, rank=1, name=\"John\"),\n+            UpsertConflict(number=2, rank=2, name=\"Mary\"),\n+        ])\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+        \n+        # Conflicting objects\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=3, name=\"Steve\"),\n+            UpsertConflict(number=2, rank=4, name=\"Lucy\"),\n+        ]\n+        \n+        # Perform bulk_create with update_conflicts\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"rank\", \"name\"],\n+            unique_fields=[\"number\"],\n+        )\n+        \n+        # Check that all result instances have their primary key (ID) set\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        \n+        # Validation: Check that expected updates happened\n+        self.assertCountEqual(\n+            UpsertConflict.objects.values(\"number\", \"rank\", \"name\"),\n+            [\n+                {\"number\": 1, \"rank\": 3, \"name\": \"Steve\"},\n+                {\"number\": 2, \"rank\": 4, \"name\": \"Lucy\"},\n+            ],\n+        )\n         Country.objects.bulk_create(self.data)\n         self.assertEqual(Country.objects.count(), 4)\n \n@@ -816,4 +849,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..901507a 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,12 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+import pytest\n+import sys\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n@@ -508,7 +514,20 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+def test_get_backend_does_not_clear_figs():\n+    # Test for the bug where `get_backend` clears figures from `Gcf` if they were created in an `rc_context`.\n+    # Ensures figures are not removed from `Gcf`'s registry due to context switching.\n+    \n+    # Create a figure inside an rc_context\n+    with rc_context():\n+        fig1 = plt.figure()\n+\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    # Assert that the figures remain the same before and after calling `get_backend`\n+    assert before == after, f'Figures were removed from Gcf: {before} != {after}'\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..7fb52ee 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -20,8 +20,31 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n+import pytest\n+from matplotlib.axes._base import _AxesBase\n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d_projection(fig_test, fig_ref):\n+    # Test with 3d projection that `set_visible(False)` makes the axis invisible\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+    \n+    # Reference should have no 3D subplot essentially\n+    ax_ref = fig_ref.add_subplot()\n+    ax_ref.set_axis_off()\n+\n+    assert isinstance(ax_test, _AxesBase)\n+    assert ax_test.get_visible() is False\n+    \n+def test_invisible_axes_event_handling_3d():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    \n+    # Test that events do not trigger on invisible 3d axes\n+    ax.set_visible(False)\n+    # inaxes should return None when called with any event position\n+    assert fig.canvas.inaxes((200, 200)) is None\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..82585b8 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,21 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+def test_set_draggable_explicit():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test')\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    assert leg.get_draggable() is True\n+    leg.set_draggable(False)\n+    assert leg.get_draggable() is False\n+\n+def test_legend_draggable_default_false():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='default test')\n+    leg = ax.legend()\n+    assert leg.get_draggable() is False\n+    \n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..360f178 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -246,7 +246,27 @@ def test_fonttype(fonttype):\n \n def test_linedash():\n     \"\"\"Test that dashed lines do not break PS output\"\"\"\n-    fig, ax = plt.subplots()\n+import io\n+from matplotlib.figure import Figure\n+import matplotlib.pyplot as plt\n+\n+def test_empty_line_bug():\n+    # Test case for multiline text containing empty lines which raised an error previously\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('Title with empty line\\n\\nNext line')\n+    ax.annotate(text='\\nLower label with leading newline', xy=(0.5, 0.5))\n+    ax.annotate(text='Label with trailing newline\\n', xy=(0.2, 0.2))\n+    ax.annotate(text='Multiple\\n\\nNewlines', xy=(0.8, 0.8))\n+    \n+    buf_ps = io.BytesIO()\n+    buf_eps = io.BytesIO()\n+\n+    fig.savefig(buf_ps, format='ps')\n+    fig.savefig(buf_eps, format='eps')\n+    \n+    assert buf_ps.tell() > 0\n+    assert buf_eps.tell() > 0\n \n     ax.plot([0, 1], linestyle=\"--\")\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..dfb3eb6 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,26 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import warnings\n+\n+@pytest.mark.parametrize('constrained', [False])\n+def test_no_userwarning_with_subplots_adjust(constrained):\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+\n+        # Create a plot with constrained_layout set to False\n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained)\n+        a = np.linspace(0, 2 * np.pi, 100)\n+        b = np.sin(a)\n+        c = np.cos(a)\n+        ax[0].plot(a, b)\n+        ax[1].plot(a, c)\n+        plt.subplots_adjust(wspace=0)\n+\n+        # Check that no warning is raised\n+        assert len(w) == 0, f\"Unexpected warnings: {w}\"\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..e21e8fc 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,34 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time=[0,1,2,3,4]\n+    speed=[40,43,45,47,48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure there's no reference to FigureCanvasAgg in the pickle stream\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Reload the pickled figure and ensure basic properties remain consistent\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_ax = loaded_fig.axes[0]\n+\n+    assert loaded_ax.get_legend().get_texts()[0].get_text() == \"speed\"\n+    assert loaded_ax.lines[0].get_label() == \"speed\"\n+    loaded_fig.canvas.draw()\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..6495345 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,29 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pytest\n+import pickle\n+from io import BytesIO\n \n-@mpl.style.context(\"default\")\n+@pytest.mark.parametrize(\"align_function\", [\"align_labels\", \"align_xlabels\", \"align_ylabels\"])\n+def test_pickle_with_aligned_labels(align_function):\n+    fig, axs = plt.subplots(2, 1)\n+    axs[0].set_ylabel(\"speed\")\n+    axs[0].plot([0, 1, 2, 3, 4], [40000, 4300, 4500, 4700, 4800])\n+    axs[1].set_ylabel(\"acc\")\n+    axs[1].plot([0, 1, 2, 3, 4], [10, 11, 12, 13, 14])\n+\n+    align_method = getattr(fig, align_function)\n+    align_method()\n+    \n+    pkl = BytesIO()\n+    try:\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        assert True, \"Pickling was successful.\"\n+    except Exception as e:\n+        pytest.fail(f\"Pickling failed with aligned labels: {e}\")\n+    plt.close(fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..4e8b751 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -449,4 +449,26 @@ def test_paddedbox():\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+\n+def test_mplcursor_with_matplotlib():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    x = np.arange(1, 11)\n+    y = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y)\n+    \n+    cursor = mplcursors.cursor()\n+    plt.show()\n+\n+    # Emulate clicks on data points\n+    for x_val in x:\n+        event = MouseEvent('button_press_event', ax.figure.canvas, x_val, x_val, key=None)\n+        cursor._onpick(event)\n+\n+    # Verify no AttributeError occurs after interactions\n+    assert cursor is not None\n+    ax.add_artist(ab)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..cdded2a 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -707,6 +707,20 @@ class TestFacetGrid:\n                     assert mpl.colors.same_color(tick.tick2line.get_color(), color)\n                     assert tick.get_pad() == pad\n \n+    def test_pairplot_column_multiindex(self):\n+        # Setup a dataframe with MultiIndex columns\n+        cols = pd.MultiIndex.from_arrays([[\"A\", \"A\", \"B\", \"B\"], [\"1\", \"2\", \"1\", \"2\"]])\n+        df = pd.DataFrame(self.rs.random((60, 4)), columns=cols)\n+\n+        # Test pairplot on MultiIndex dataframe\n+        g = ag.pairplot(df)\n+        expected_vars = [(\"A\", \"1\"), (\"A\", \"2\"), (\"B\", \"1\"), (\"B\", \"2\")]\n+        assert g.diag_vars == expected_vars\n+\n+        # Check that the plot renders without raising KeyError\n+        for ax in g.diag_axes:\n+            assert len(ax.patches) > 0\n+\n \n class TestPairGrid:\n \n@@ -1455,6 +1469,20 @@ class TestPairGrid:\n                     assert mpl.colors.same_color(tick.tick2line.get_color(), color)\n                     assert tick.get_pad() == pad\n \n+    def test_pairplot_column_multiindex(self):\n+        # Setup a dataframe with MultiIndex columns\n+        cols = pd.MultiIndex.from_arrays([[\"A\", \"A\", \"B\", \"B\"], [\"1\", \"2\", \"1\", \"2\"]])\n+        df = pd.DataFrame(self.rs.random((60, 4)), columns=cols)\n+\n+        # Test pairplot on MultiIndex dataframe\n+        g = ag.pairplot(df)\n+        expected_vars = [(\"A\", \"1\"), (\"A\", \"2\"), (\"B\", \"1\"), (\"B\", \"2\")]\n+        assert g.diag_vars == expected_vars\n+\n+        # Check that the plot renders without raising KeyError\n+        for ax in g.diag_axes:\n+            assert len(ax.patches) > 0\n+\n \n class TestJointGrid:\n \n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..eb193bb 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,10 @@\n+\n import json\n import os\n import textwrap\n-\n+import errno\n import pytest\n+import tomllib\n \n import flask\n \n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..acff3e7 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1655,7 +1655,40 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n-def test_vendor_aliases():\n+def test_urllib3_decode_error():\n+    import requests\n+    from requests.adapters import HTTPAdapter\n+    from requests.exceptions import ContentDecodingError\n+\n+    # Mock a session to raise DecodeError\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def send(self, request, **kwargs):\n+            from requests.packages.urllib3.exceptions import DecodeError\n+            raise DecodeError(\"Decoding failed\")\n+\n+    s = requests.Session()\n+    s.mount('http://', MockHTTPAdapter())\n+\n+    with pytest.raises(ContentDecodingError):\n+        s.get('http://mocked.url/status/200')\n+\n+\n+def test_urllib3_timeout_error():\n+    import requests\n+    from requests.adapters import HTTPAdapter\n+    from requests.exceptions import Timeout\n+\n+    # Mock a session to raise TimeoutError\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def send(self, request, **kwargs):\n+            from requests.packages.urllib3.exceptions import TimeoutError\n+            raise TimeoutError(\"Connection timed out\")\n+\n+    s = requests.Session()\n+    s.mount('http://', MockHTTPAdapter())\n+\n+    with pytest.raises(Timeout):\n+        s.get('http://mocked.url/timeout')\n     from requests.packages import urllib3\n     from requests.packages import chardet\n \n@@ -1663,4 +1696,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..2c650cd 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -950,7 +950,8 @@ class TestRequests:\n \n     def test_response_is_iterable(self):\n         r = requests.Response()\n-        io = StringIO.StringIO('abc')\n+        import io\n+        import requests\n         read_ = io.read\n \n         def read_mock(amt, decode_content=None):\n@@ -980,7 +981,46 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_iter_content_with_decode_unicode_true(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True to ensure it returns unicode strings.\n+        \"\"\"\n+        # Mock a Response object for application/json with default UTF-8 encoding\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = b'{\"key\": \"value\"}'\n+        r.encoding = 'utf-8'\n+\n+        # Test when content is already consumed\n+        chunks = r.iter_content(4, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"All chunks should be unicode strings (str)\"\n+\n+        # Test raw streaming mode\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'{\"key\": \"value\"}')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(4, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"All chunks should be unicode strings (str)\"\n+\n+    def test_iter_content_with_different_encodings(self):\n+        \"\"\"\n+        Test iter_content with different encodings to check proper decoding.\n+        \"\"\"\n+        # Testing with UTF-16 encoded content\n+        r = requests.Response()\n+        utf16_content = '\u3053\u3093\u306b\u3061\u306f'.encode('utf-16')\n+        r._content_consumed = True\n+        r._content = utf16_content\n+        r.encoding = 'utf-16'\n+        chunks = r.iter_content(2, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"All chunks should be unicode strings (str)\"\n+\n+        # Testing raw streaming mode with ISO-8859-1 encoding\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'\\xe9l\\xe8ve')  # \"\u00e9l\u00e8ve\" in ISO-8859-1\n+        r.encoding = 'ISO-8859-1'\n+        chunks = r.iter_content(2, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"All chunks should be unicode strings (str)\"\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..a638b39 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,6 +743,31 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    def test_register_multiple_hooks_through_constructor(self):\n+        \"\"\"Test that multiple hooks can be registered through the constructor.\"\"\"\n+\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'X-Foo': 'foo'})\n+            return args\n+\n+        def add_bar_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'X-Bar': 'bar'})\n+            return args\n+\n+        def assert_hooks_called_with_args(hooks, headers):\n+            for hook in hooks['args']:\n+                result = hook({'headers': {}})\n+                for key, value in headers.items():\n+                    assert result['headers'].get(key) == value\n+\n+        hooks = [add_foo_header, add_bar_header]\n+        r = requests.models.Request(hooks={'args': hooks})\n+        \n+        assert_hooks_called_with_args(r.hooks, {'X-Foo': 'foo', 'X-Bar': 'bar'})\n \n     def test_session_persistent_cookies(self):\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6a26875 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -411,7 +411,33 @@ def test_groupby_repr_datetime(obj):\n     assert actual == expected\n \n \n-def test_groupby_drops_nans():\n+def test_groupby_no_trailing_whitespace():\n+    ds = xr.Dataset(\n+        {\"foo\": ((\"x\", \"y\"), np.random.rand(4, 3))},\n+        coords={\"x\": [10, 20, 30, 40], \"letters\": (\"x\", list(\"abba\"))},\n+    )\n+    actual = str(ds.groupby(\"letters\"))\n+    expected = \"DatasetGroupBy, grouped over 'letters'\\n2 groups with labels 'a', 'b'.\"\n+    assert actual == expected\n+\n+def test_groupby_no_trailing_whitespace_corner_cases():\n+    # Test with corner case where each label is unique\n+    ds = xr.Dataset(\n+        {\"foo\": (\"x\", np.random.rand(4))},\n+        coords={\"x\": [0, 1, 2, 3], \"letters\": (\"x\", list(\"abcd\"))},\n+    )\n+    actual = str(ds.groupby(\"letters\"))\n+    expected = \"DatasetGroupBy, grouped over 'letters'\\n4 groups with labels 'a', 'b', 'c', 'd'.\"\n+    assert actual == expected\n+\n+    # Test with repeated labels and only one group\n+    ds = xr.Dataset(\n+        {\"foo\": (\"x\", np.random.rand(4))},\n+        coords={\"x\": [0, 1, 2, 3], \"letters\": (\"x\", list(\"aaaa\"))},\n+    )\n+    actual = str(ds.groupby(\"letters\"))\n+    expected = \"DatasetGroupBy, grouped over 'letters'\\n1 groups with labels 'a'.\"\n+    assert actual == expected\n     # GH2383\n     # nan in 2D data variable (requires stacking)\n     ds = xr.Dataset(\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..972b41d 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -78,6 +78,16 @@ class TestFixme(CheckerTestCase):\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_punctuation_only_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                # ???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     @set_config(notes=[\"CODETAG\"])\n     def test_other_present_codetag(self) -> None:\n         code = \"\"\"a = 1\n@@ -119,4 +129,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..586e8cc 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -60,23 +60,27 @@ def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n     output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n     assert \"Command line:1:0: E0012: Bad option value for --disable.\" in output.out\n \n \n def test_unknown_option_name(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown option.\"\"\"\n-    with pytest.raises(_UnrecognizedOptionError):\n+    with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--unknown-option=yes\"], exit=False)\n     output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n     assert \"E0015: Unrecognized option found: unknown-option=yes\" in output.out\n \n \n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n-    with pytest.raises(_UnrecognizedOptionError):\n+    with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err\n \n \n def test_unknown_confidence(capsys: CaptureFixture) -> None:\n@@ -84,6 +88,7 @@ def test_unknown_confidence(capsys: CaptureFixture) -> None:\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n     output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n     assert \"argument --confidence: UNKNOWN_CONFIG should be in\" in output.err\n \n \n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..9416801 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,25 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_respected_with_recursive(self):\n+        \"\"\"Tests that --recursive respects ignore-paths setting in pyproject.toml\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..aff074e 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,15 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_lint_directory_module_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that a directory and a module within it having the same name does not cause linting to fail.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create files to simulate the issue\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +950,13 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_lint_directory_module_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that a directory and a module within it having the same name does not cause linting to fail.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create files to simulate the issue\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..a06a8bc 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,8 @@\n+\n+from pylint.lint import PyLinter\n+from io import StringIO\n+from _pytest.recwarn import WarningsRecorder\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..6254d7a 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -289,7 +289,7 @@ class TestImportPath:\n         return fn\n \n     def test_importmode_importlib(self, simple_module: Path, tmp_path: Path) -> None:\n-        \"\"\"`importlib` mode does not change sys.path.\"\"\"\n+        \"\"\"`importlib` mode does not change sys.path and avoids repeated imports.\"\"\"\n         module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n         assert module.foo(2) == 42  # type: ignore[attr-defined]\n         assert str(simple_module.parent) not in sys.path\n",
  "pytest-dev__pytest-5227": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 1ebe9d0..01f354c 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..8f0ad5c 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -301,6 +301,30 @@ def callequal(left, right, verbose=False):\n \n \n class TestAssert_reprcompare:\n+    \n+    def test_bytes_diff_empty_vs_nonempty(self):\n+        \"\"\"Test assertion comparison messages for an empty byte string against a non-empty byte string.\"\"\"\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+            \"?  +\"\n+        ]\n+\n+    def test_bytes_diff_empty_vs_longer(self):\n+        \"\"\"Test assertion comparison messages for an empty byte string against a longer non-empty byte string.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+            \"?  ++\"\n+        ]\n     def test_different_types(self):\n         assert callequal([0, 1], \"foo\") is None\n \n",
  "pytest-dev__pytest-5692": "",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..0b76e9f 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,47 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n+def test_broken_repr():\n+    \"\"\"Test saferepr() with broken __repr__ only.\"\"\"\n+\n+    class OtherClass:\n+        def __repr__(self):\n+            raise ValueError(\"broken repr\")\n+\n+    assert saferepr(OtherClass()).startswith(\n+        \"<[ValueError('broken repr') raised in repr()] OtherClass object at 0x\"\n+    )\n+\n+\n+def test_no_attr_access():\n+    \"\"\"Test saferepr() when no attributes can be accessed.\"\"\"\n+\n+    class NoAttrClass:\n+        def __getattribute__(self, attr):\n+            raise AttributeError(\"can't access attributes\")\n+\n+        def __repr__(self):\n+            return \"<NoAttrClass>\"\n+\n+    assert saferepr(NoAttrClass()) == \"<NoAttrClass>\"\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +194,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..1d58493 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -70,8 +70,30 @@ def test_make_hook_recorder(testdir) -> None:\n     recorder.hook.pytest_runtest_logreport(report=rep3)\n     pytest.raises(ValueError, recorder.getfailures)\n \n+def test_failure_with_changed_cwd(testdir) -> None:\n+    \"\"\"Test failure lines should use absolute paths if cwd has changed since\n+    invocation, ensuring paths are correct.\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_parseconfig(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     config1 = testdir.parseconfig()\n     config2 = testdir.parseconfig()\n     assert config2 is not config1\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..1bb28a8 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -41,8 +41,30 @@ class TestMark:\n         with pytest.raises(AttributeError):\n             mark._some_name\n \n-\n-def test_marked_class_run_twice(testdir):\n+def test_dynamic_skipif_caching_issue(testdir):\n+    \"\"\"Test the caching issue with skipif when conditions are dynamic.\"\"\"\n+    py_file1 = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+        skip = True\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_skip():\n+            assert False\n+        \"\"\"\n+    )\n+    py_file2 = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+        skip = False\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_not_skip():\n+            assert True\n+        \"\"\"\n+    )\n+    file_name1 = os.path.basename(py_file1.strpath)\n+    file_name2 = os.path.basename(py_file2.strpath)\n+    reprec = testdir.inline_run(file_name1, file_name2)\n+    reprec.assertoutcome(skipped=1, passed=1)\n     \"\"\"Test fails file is run twice that contains marked class.\n     See issue#683.\n     \"\"\"\n",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..1765ebb 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -153,7 +154,33 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n+from _pytest.pytester import Testdir\n+\n class TestXFail:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..60a931e 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,10 +1,44 @@\n+\n import os\n import stat\n+def test_tmp_path_factory_handles_invalid_dir_characters(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    # Simulate a username with special characters that are invalid in paths\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    # _basetemp / _given_basetemp are cached / set in parallel runs, patch them\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+def test_tmpdir_handles_invalid_characters(tmpdir_factory: TempdirFactory, monkeypatch: MonkeyPatch) -> None:\n+    # Simulate a username with characters invalid for directory names\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"user/name\")\n+    p = tmpdir_factory.mktemp(\"test\")\n+    # Check that the created temp directory path does not contain the invalid characters\n+    assert \"user_name\" not in str(p)\n+    assert \"pytest-of\" in str(p)\n+\n+def test_tmp_path_factory_no_username(monkeypatch: MonkeyPatch, tmp_path_factory: TempPathFactory) -> None:\n+    # Simulate a scenario where getpass.getuser() returns None\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: None)\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+def test_tmpdir_factory_no_username(monkeypatch: MonkeyPatch, tmpdir_factory: TempdirFactory) -> None:\n+    # Simulate a scenario where getpass.getuser() returns None\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: None)\n+    p = tmpdir_factory.mktemp(\"foobar\")\n+    assert \"pytest-of-unknown\" in str(p)\n+\n import sys\n from pathlib import Path\n from typing import Callable\n from typing import cast\n-from typing import List\n+from _pytest.monkeypatch import MonkeyPatch\n \n import attr\n \n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..5ad9bed 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,36 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    from sklearn.linear_model import RidgeClassifierCV\n+    import numpy as np\n+    import pytest\n+    from numpy.testing import assert_equal\n+    \n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_alphas))\n+\n+    # with len(y.shape) == 2\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_targets, n_alphas))\n+\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..48897ba 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,7 +5,9 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_raise_message, assert_array_equal\n+from sklearn.metrics.cluster import adjusted_rand_score\n+from sklearn.exceptions import ConvergenceWarning, NotFittedError\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n@@ -21,8 +23,21 @@ from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n PRIOR_TYPE = ['dirichlet_process', 'dirichlet_distribution']\n \n-\n-def test_log_dirichlet_norm():\n+def test_bayesian_mixture_fit_predict_with_labels():\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng)\n+    for covar_type in COVARIANCE_TYPE:\n+        X = rand_data.X[covar_type]\n+        bgmm = BayesianGaussianMixture(\n+            n_components=rand_data.n_components,\n+            random_state=rng,\n+            covariance_type=covar_type)\n+        bgmm.fit(X)\n+        Y_pred = bgmm.predict(X)\n+        # Check if labels_ are stored and are consistent\n+        bgmm.fit_predict(X)\n+        assert_array_equal(bgmm.labels_, Y_pred)\n+        assert_greater_equal(adjusted_rand_score(rand_data.Y, Y_pred), .95)\n     rng = np.random.RandomState(0)\n \n     weight_concentration = rng.rand(2)\n",
  "scikit-learn__scikit-learn-12471": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..dd5913b 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,10 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+import numpy as np\n+from sklearn.mixture import GaussianMixture\n+from sklearn.utils.testing import assert_array_equal\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..68b05fc 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -5,8 +6,8 @@ import pytest\n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n                                    assert_raises)\n-\n from sklearn.decomposition import PCA, KernelPCA\n+from sklearn.utils.testing import assert_allclose\n from sklearn.datasets import make_circles\n from sklearn.linear_model import Perceptron\n from sklearn.pipeline import Pipeline\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..d30bbfd 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1070,4 +1070,26 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+def test_len_pipeline():\n+    from sklearn import svm\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.pipeline import Pipeline\n+\n+    # Generate some data\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    assert len(pipe) == 2\n+\n+    # Test with different length pipelines\n+    pipe_single = Pipeline([('anova', anova_filter)])\n+    assert len(pipe_single) == 1\n+\n+    pipe_empty = Pipeline([])\n+    assert len(pipe_empty) == 0\n+\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..f4289c2 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..5f1df96 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,20 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+    # New test cases for discrete_features with specific inputs\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Case: discrete_features as an array of indices (valid case)\n+        mi_index = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        assert_array_equal(mi_5, mi_index)\n+\n+        # Case: discrete_features as a boolean mask (valid case)\n+        mi_mask = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        assert_array_equal(mi_5, mi_mask)\n+\n+        # Case: incorrect discrete_features length for boolean mask\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False, True, False])\n+\n+        # Case: incorrect index in discrete_features\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..7c4ed2c 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,8 +217,18 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n-\n-def test_pipeline():\n+def test_logistic_regression_cv_array_param():\n+    # Test for issue with print_changed_only=True and array parameters\n+    set_config(print_changed_only=True)\n+    try:\n+        lr_cv = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+        repr_lr_cv = repr(lr_cv)\n+        # If there was an error, the above line would raise an exception.\n+        # We need to check that the repr includes 'Cs=array([0.1, 1])'\n+        assert 'Cs=array([0.1, 1])' in repr_lr_cv\n+    finally:\n+        # Reset config to ensure no side-effects for other tests\n+        set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..b03f2fe 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,32 @@\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(datasets.load_iris(return_X_y=True), \n+      VotingClassifier([('lr', LogisticRegression()), ('rf', RandomForestClassifier())])),\n+     (datasets.load_diabetes(return_X_y=True),\n+      VotingRegressor([('lr', LinearRegression()), ('rf', RandomForestRegressor())]))]\n+)\n+def test_none_estimator_with_weights(X_y, voter):\n+    X, y = X_y\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(datasets.load_iris(return_X_y=True), \n+      VotingClassifier([('lr', LogisticRegression()), ('rf', RandomForestClassifier())]))]\n+)\n+def test_none_estimator_no_weights(X_y, voter):\n+    X, y = X_y\n+    voter.fit(X, y)\n+    voter.set_params(lr=None)\n+    voter.fit(X, y)\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -9,6 +38,8 @@ from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n from sklearn.exceptions import NotFittedError\n from sklearn.linear_model import LogisticRegression\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..00a8eef 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -130,6 +130,38 @@ def test_params_validation():\n     assert_raises(TypeError, NCA(max_iter='21').fit, X, y)\n     assert_raises(TypeError, NCA(verbose='true').fit, X, y)\n     assert_raises(TypeError, NCA(tol=1).fit, X, y)\n+    # New test case for GridSearchCV with correct type conversions\n+    import numpy as np\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.model_selection import GridSearchCV\n+    from sklearn.datasets import load_iris\n+    from sklearn.neighbors import KNeighborsClassifier\n+    from sklearn.utils._testing import assert_almost_equal\n+    \n+    def test_nca_with_gridsearchcv():\n+        # Load iris dataset\n+        iris = load_iris()\n+        X, y = iris.data, iris.target\n+        \n+        # Create pipeline\n+        nca = NeighborhoodComponentsAnalysis()\n+        knn = KNeighborsClassifier()\n+        pipe = Pipeline([('nca', nca), ('knn', knn)])\n+        \n+        # Parameters\n+        params = {\n+            'nca__tol': [0.1, 0.5, 1.0],  # Ensure 1 is converted to 1.0\n+            'nca__n_components': np.arange(1, 5).astype(int)  # np.int64 to int\n+        }\n+        \n+        # GridSearchCV\n+        gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+        gs.fit(X, y)\n+        assert gs.best_estimator_ is not None\n+        # Check if best params are within the original param grid\n+        assert_almost_equal(gs.best_params_['nca__tol'], 1.0, decimal=1)\n+\n+    test_nca_with_gridsearchcv()\n     assert_raises(TypeError, NCA(n_components='invalid').fit, X, y)\n     assert_raises(TypeError, NCA(warm_start=1).fit, X, y)\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..da91218 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,26 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for handling empty support vectors with sparse input\n+    from sklearn import svm\n+    from scipy import sparse\n+    import numpy as np\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(C=316.227766017, kernel='linear')\n+    model.fit(X_train, y_train)\n+\n+    # Check that support_vectors_ is empty\n+    assert model.support_vectors_.shape[0] == 0\n+    # Check that dual_coef_ is an empty sparse csr matrix\n+    assert model.dual_coef_.shape[1] == 0\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..bbc5adf 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,28 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=6, n_splits=2, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_custom_params_repr(RepeatedCV):\n+    n_splits, n_repeats, random_state = 3, 5, 42\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    repeated_cv_repr = ('{}(n_repeats=5, n_splits=3, random_state=42)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..dfb4d2f 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -144,8 +144,16 @@ def test_affinity_propagation_predict_non_convergence():\n     # Force non-convergence by allowing only a single iteration\n     af = assert_warns(ConvergenceWarning,\n                       AffinityPropagation(preference=-10, max_iter=1).fit, X)\n-\n-    # At prediction time, consider new samples as noise since there are no\n+def test_affinity_propagation_non_convergence_cluster_centers():\n+    # Test to verify that non-convergence results in empty cluster centers\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    # Check that cluster_centers_indices_ is an empty array\n+    assert_array_equal(np.array([], dtype=int), af.cluster_centers_indices_)\n+    # Check that labels_ are all -1 indicating noise\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n     # clusters\n     to_predict = np.array([[2, 2], [3, 3], [4, 4]])\n     y = assert_warns(ConvergenceWarning, af.predict, to_predict)\n",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..e47b000 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,5 +1,13 @@\n+\n import warnings\n import numpy as np\n+import pytest\n+from sklearn.utils._testing import assert_array_equal\n+from sklearn.datasets import make_classification\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn import set_config\n+import numpy as np\n import pickle\n import copy\n \n@@ -679,4 +687,14 @@ def test_get_feature_names_out(shape):\n     names = iso.get_feature_names_out()\n     assert isinstance(names, np.ndarray)\n     assert names.dtype == object\n-    assert_array_equal([\"isotonicregression0\"], names)\n+    assert_array_equal([\"isotonicregression0\"], names)\n+\n+def test_calibrated_classifier_cv_with_transform_output_pandas():\n+    \"\"\"Test CalibratedClassifierCV with transform_output set to pandas.\"\"\"\n+    set_config(transform_output=\"pandas\")\n+    X, y = make_classification(n_samples=30, n_features=3, random_state=42)\n+    model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\n+    # The test will pass if no exception is raised during fit and predict\n+    model.fit(X, y)\n+    predictions = model.predict(X)\n+    assert predictions.shape == (30,)\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 21b6a7e..7cf61df 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -738,6 +738,35 @@ def test_autodoc_type_aliases(app):\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_type_aliases_for_attributes(app):\n+    app.config.autodoc_type_aliases = {'myint': 'target.annotations.myint'}\n+    options = {\"members\": None, \"undoc-members\": True}\n+    \n+    actual = do_autodoc(app, 'module', 'target.annotations', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.annotations',\n+        '',\n+        '',\n+        '.. py:data:: variable',\n+        '   :module: target.annotations',\n+        '   :type: myint',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:class:: Foo()',\n+        '   :module: target.annotations',\n+        '',\n+        '   docstring',\n+        '',\n+        '   .. py:attribute:: Foo.attr',\n+        '      :module: target.annotations',\n+        '      :type: myint',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n def test_autodoc_default_options(app):\n     # no settings\n     actual = do_autodoc(app, 'class', 'target.enums.EnumCls')\n",
  "sphinx-doc__sphinx-8506": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..4156d46 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,10 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest  # Ensure pytest is imported for the test cases\n+\n+# Include the import for do_autodoc as mentioned in the guidelines\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -44,6 +48,64 @@ def do_autodoc(app, objtype, name, options=None):\n \n     return bridge.result\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_non_empty_all(app):\n+    # Create a test case where __all__ is not empty to ensure it behaves correctly\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.non_empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.non_empty_all',\n+        '',\n+        'docstring of non_empty_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.non_empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_no_all(app):\n+    # Create a test case where there is no __all__ attribute to test default behavior\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.no_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.no_all',\n+        '',\n+        'docstring of no_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.no_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: bar()',\n+        '   :module: target.no_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: baz()',\n+        '   :module: target.no_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n \n def make_directive_bridge(env):\n     options = Options(\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..9e32448 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -10,6 +11,7 @@\n \n import sys\n from numbers import Integral\n+from struct import Struct\n from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar,\n                     Union)\n \n@@ -39,6 +41,7 @@ class BrokenType:\n \n \n def test_restify():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(int) == \":class:`int`\"\n     assert restify(str) == \":class:`str`\"\n     assert restify(None) == \":obj:`None`\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..674a892 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,38 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    \n+    def test_other_parameters_section_with_napoleon_use_param_false(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+    \n+    def test_other_parameters_section_with_napoleon_use_param_true(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..ddf7ef4 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,7 +49,17 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n-@pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+    # Ensure that no module pages exist when viewcode_enable_epub is False\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+    # Ensure that module pages exist when viewcode_enable_epub is True\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n \n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..e48e44a 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -351,6 +351,12 @@ def test_args():\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n+    # Test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1, 2], [2, 1, 0]]) == Permutation([0, 1, 2])\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 1], [0, 2], [0, 3]]) == Permutation([1, 2, 3, 0])\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..8c8a0b4 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -448,6 +449,28 @@ def test_sparse_matrix():\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n \n+    # Test for issue with hstack and vstack\n+    # hstack with 0 x n matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # hstack with 1 x n matrices\n+    M5 = SparseMatrix.zeros(1, 0)\n+    M6 = SparseMatrix.zeros(1, 1)\n+    M7 = SparseMatrix.zeros(1, 2)\n+    M8 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(M5, M6, M7, M8).shape == (1, 6)\n+\n+    # vstack with n x 0 matrices\n+    M9 = SparseMatrix.zeros(0, 0)\n+    M10 = SparseMatrix.zeros(1, 0)\n+    M11 = SparseMatrix.zeros(2, 0)\n+    M12 = SparseMatrix.zeros(3, 0)\n+    assert SparseMatrix.vstack(M9, M10, M11, M12).shape == (6, 0)\n+\n \n def test_transpose():\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..f97fbea 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -99,6 +99,43 @@ def test_core_symbol():\n             Symbol(\"_issue_3130\", commutative=False), Wild, Wild(\"x\")):\n         check(c)\n \n+import sys\n+import os\n+import subprocess\n+\n+def test_pickle_cross_compatibility_py2_to_py3():\n+    # This test checks cross compatibility between Python 2 and Python 3 for pickling\n+    python2_code = (\n+        \"import pickle, sympy; \"\n+        \"x = sympy.symbols('x'); \"\n+        \"print(pickle.dumps(x + 1.0, protocol=2).hex())\"\n+    )\n+    python3_code = (\n+        \"import pickle, sys; \"\n+        \"data = bytes.fromhex(sys.stdin.read().strip()); \"\n+        \"expr = pickle.loads(data); \"\n+        \"print(expr)\"\n+    )\n+\n+    # Check if Python 2 is available in the environment\n+    try:\n+        python2_executable = subprocess.check_output([\"which\", \"python2\"]).strip()\n+    except subprocess.CalledProcessError:\n+        python2_executable = None\n+\n+    if python2_executable:\n+        # Run the Python 2 code to pickle the expression\n+        result_hex = subprocess.check_output(\n+            [python2_executable, \"-c\", python2_code]\n+        ).decode().strip()\n+\n+        # Now use Python 3 to unpickle the expression\n+        result = subprocess.check_output(\n+            [sys.executable, \"-c\", python3_code],\n+            input=result_hex.encode()\n+        ).decode().strip()\n+\n+        assert result == \"x + 1.0\", \"Unpickled result did not match expected expression\"\n \n def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..6057f99 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -279,7 +279,17 @@ def test_coth_series():\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n \n-def test_csch():\n+def test_issue_coth_log_tan_subs():\n+    from sympy import Symbol, coth, log, tan\n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+\n+    # Test substitution for values that caused previous issues\n+    for value in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        try:\n+            expr.subs(x, value)\n+        except Exception as e:\n+            assert False, f\"Substitution failed for x = {value} with exception: {e}\"\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..b7e4a94 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,47 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, ones, eye\n+    \n+    # Original issue test case\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected, \"Failed test for inserting 2*ones into identity matrix at position 3\"\n+\n+    # Additional test case 1: Insert at beginning\n+    result = M.col_insert(0, V)\n+    expected = Matrix([\n+        [2, 2, 1, 0, 0, 0, 0, 0],\n+        [2, 2, 0, 1, 0, 0, 0, 0],\n+        [2, 2, 0, 0, 1, 0, 0, 0],\n+        [2, 2, 0, 0, 0, 1, 0, 0],\n+        [2, 2, 0, 0, 0, 0, 1, 0],\n+        [2, 2, 0, 0, 0, 0, 0, 1]\n+    ])\n+    assert result == expected, \"Failed test for inserting 2*ones into identity matrix at position 0\"\n+\n+    # Additional test case 2: Insert at end\n+    result = M.col_insert(6, V)\n+    expected = Matrix([\n+        [1, 0, 0, 0, 0, 0, 2, 2],\n+        [0, 1, 0, 0, 0, 0, 2, 2],\n+        [0, 0, 1, 0, 0, 0, 2, 2],\n+        [0, 0, 0, 1, 0, 0, 2, 2],\n+        [0, 0, 0, 0, 1, 0, 2, 2],\n+        [0, 0, 0, 0, 0, 1, 2, 2]\n+    ])\n+    assert result == expected, \"Failed test for inserting 2*ones into identity matrix at position 6\"\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..e010d96 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,9 +615,26 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+def test_latex_seq_formula():\n+    n = symbols('n', integer=True)\n+    \n+    # Test case directly related to the reported issue\n+    s1 = SeqFormula(n**2, (n, 0, oo))\n+    latex_str = r'\\left[0, 1, 4, 9, \\ldots\\right]'\n+    assert latex(s1) == latex_str\n+\n+    # Additional test cases for different configurations\n+    s2 = SeqFormula(n**3, (n, 0, 3))\n+    latex_str = r'\\left[0, 1, 8, 27\\right]'\n+    assert latex(s2) == latex_str\n \n-def test_latex_sequences():\n-    s1 = SeqFormula(a**2, (0, oo))\n+    s3 = SeqFormula(n**2, (n, -3, 0))\n+    latex_str = r'\\left[9, 4, 1, 0\\right]'\n+    assert latex(s3) == latex_str\n+\n+    s4 = SeqFormula(n**2 - n, (n, 0, oo))\n+    latex_str = r'\\left[0, 0, 2, 6, \\ldots\\right]'\n+    assert latex(s4) == latex_str\n     s2 = SeqPer((1, 2))\n \n     latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..22f6342 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -195,6 +196,22 @@ def test_Domain_preprocess():\n     assert Domain.preprocess('QQ(x)') == QQ.frac_field(x)\n \n     assert Domain.preprocess('Z(x,y)') == ZZ.frac_field(x, y)\n+\n+    # Verify correct domain processing for real and complex numbers\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+    # Test for polynomial with domain 'RR[y,z]'\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]\n+\n+    # Checking error is raised for incorrect domains\n+    raises(OptionError, lambda: Domain.preprocess('RR(x,y)'))\n     assert Domain.preprocess('Q(x,y)') == QQ.frac_field(x, y)\n \n     assert Domain.preprocess('ZZ(x,y)') == ZZ.frac_field(x, y)\n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..70d997b 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -294,6 +295,17 @@ def test_latex_functions():\n     assert latex(sin(x), fold_func_brackets=True) == r\"\\sin {x}\"\n     assert latex(sin(2*x**2), fold_func_brackets=True) == \\\n         r\"\\sin {2 x^{2}}\"\n+\n+    # Test inverse trig functions with inv_trig_style=\"full\"\n+    assert latex(asin(x), inv_trig_style=\"full\") == r\"\\arcsin{\\left (x \\right )}\"\n+    assert latex(acos(x), inv_trig_style=\"full\") == r\"\\arccos{\\left (x \\right )}\"\n+    assert latex(atan(x), inv_trig_style=\"full\") == r\"\\arctan{\\left (x \\right )}\"\n+    assert latex(acsc(x), inv_trig_style=\"full\") == r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"full\") == r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n+    assert latex(acot(x), inv_trig_style=\"full\") == r\"\\operatorname{arccot}{\\left (x \\right )}\"\n+\n+    # Additional check for power style to ensure nothing is broken after the fix\n+    assert latex(acsc(x), inv_trig_style=\"power\") == r\"\\csc^{-1}{\\left (x \\right )}\"\n     assert latex(sin(x**2), fold_func_brackets=True) == \\\n         r\"\\sin {x^{2}}\"\n \n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..cab71f0 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,9 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty, symbols\n+from sympy.matrices.expressions.matexpr import MatAdd\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n@@ -6122,7 +6125,36 @@ def test_MatrixSymbol_printing():\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n \n-def test_degree_printing():\n+def test_issue_14814_pretty_printing():\n+    # Original test patch for issue #14814\n+    n = symbols('n')\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    a = symbols('a')\n+    assert pretty(x + y) == \"x + y*\"\n+    assert pretty(-a*x + -2*y*y) == \"-a*x -2*y**y*\"\n+\n+    # Additional test cases\n+    z = MatrixSymbol('z', n, n)\n+    assert pretty(-x + y) == \"-x + y*\"\n+    assert pretty(x - y) == \"x - y*\"\n+    assert pretty(z + y) == \"z + y*\"\n+\n+    # Ensure that an expression with multiple MatAdd terms works correctly\n+    expr = MatAdd(x, y, -z)\n+    assert pretty(expr) == \"x + y* -z\"\n+\n+    # Test with different complex symbols\n+    u = MatrixSymbol('u@', n, n)\n+    v = MatrixSymbol('v$', n, n)\n+    assert pretty(u + v) == \"u@ + v$\"\n+    assert pretty(-u - v) == \"-u@ - v$\"\n+\n+    # Edge case with only one element\n+    assert pretty(MatAdd(x)) == \"x\"\n+\n+    # Edge case with no MatAdd, should be regular symbol output\n+    assert pretty(y) == \"y*\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..5c07c54 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -722,6 +722,24 @@ def test_dummification():\n     lam = lambdify(sin(t), 2 * sin(t)**2)\n     assert lam(F(t)) == 2 * F(t)**2\n     #Test that \\alpha was properly dummified\n+\n+def test_curly_matrix_symbol():\n+    # Issue with MatrixSymbol names with curly braces\n+    import sympy as sy\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    # Test normal behavior without dummify\n+    try:\n+        lam = lambdify(curlyv, curlyv)\n+        assert lam([1, 0]) == [1, 0]\n+    except SyntaxError:\n+        assert False, \"lambdify raised a SyntaxError unexpectedly\"\n+    \n+    # Test with dummify=True\n+    try:\n+        lam_dummify = lambdify(curlyv, curlyv, dummify=True)\n+        assert lam_dummify([1, 0]) == [1, 0]\n+    except SyntaxError:\n+        assert False, \"lambdify with dummify=True raised a SyntaxError unexpectedly\"\n     lam = lambdify((alpha, t), 2*alpha + t)\n     assert lam(2, 1) == 5\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..0e78115 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,25 @@\n+\n+def test_Max_Min():\n+    # Original test patch\n+    assert mcode(Max(x,y,z)*Min(y,z)) == \"Max[x, y, z]*Min[y, z]\"\n+    \n+    # New test cases for Max function involving two arguments\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"  # Correct expected behavior\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"  # Check commutative property is respected in output\n+\n+    # New test cases for Min function\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+\n+    # Additional edge cases\n+    assert mcode(Max(1, 2, 3)) == \"Max[1, 2, 3]\"\n+    assert mcode(Min(1, 2, 3, 4)) == \"Min[1, 2, 3, 4]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..b8b196c 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,15 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex_compilable():\n+    # Test case for verifying that the indexed matrix expression is compilable\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..ab18ddd 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -21,7 +22,25 @@ def test_idiff():\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n \n-def test_intersection():\n+def test_idiff_issue():\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+    \n+    # Testing idiff with an Eq expression\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x).simplify() == (x + 1)*exp(x - y)/(y + 1)\n+\n+    # Testing idiff with a function expression\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x).simplify() == (x + 1)*exp(x - f(x))/(f(x) + 1)\n+\n+    # Ensure that replacing y with f(x) works consistently\n+    assert idiff(y*exp(y) - x*exp(x), y, x).simplify() == (x + 1)*exp(x - y)/(y + 1)\n+\n+    # Additional test cases from the original test\n+    assert idiff(f(x) - y*exp(x), [f(x), y], x).simplify() == (y + Derivative(y, x))*exp(x)\n+    assert idiff(f(x) - y*exp(x), [y, f(x)], x).simplify() == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x).simplify() == Derivative(g(x), x)\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..e1d059c 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -581,6 +581,55 @@ def test_ccode_cse():\n         '}\\n'\n     )\n     assert source == expected\n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen, CCodeGen\n+    from sympy import MatrixSymbol\n+    \n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_unused_array_arg_cython():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # Expression does not depend on x\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0], [2.0]]))\n+    expected = 1.0\n+    assert result == expected\n+\n+def test_autowrap_with_dependent_expr_cython():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # Expression depends on x\n+    expr = x[0, 0] + 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0], [2.0]]))\n+    expected = 2.0\n+    assert result == expected\n \n def test_empty_f_code():\n     code_gen = FCodeGen()\n",
  "sympy__sympy-16988": "",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..c394f16 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -15,8 +16,22 @@ from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n np = import_module('numpy')\n+from sympy import Identity, symbols\n+from sympy.utilities.pytest import raises\n+\n+def test_numpy_identity_matrix():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    x = MatrixSymbol(\"x\", 2, 2)\n+    f = lambdify(x, x + Identity(2), modules='numpy')\n+    input_matrix = np.array([[1, 2], [3, 4]])\n+    expected_output = np.array([[2, 2], [3, 5]])\n+    np.testing.assert_array_equal(f(input_matrix), expected_output)\n \n-def test_numpy_piecewise_regression():\n+    n = symbols('n', integer=True)\n+    y = MatrixSymbol(\"y\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(y, y + Identity(n)))\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..01deec3 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -801,7 +801,23 @@ def test_nc_simplify():\n     # commutative expressions should be returned without an error\n     assert nc_simplify(2*x**2) == 2*x**2\n \n-def test_issue_15965():\n+def test_issue_17137():\n+    # Test the specific issue with simplify(cos(x)**I)\n+    from sympy import Symbol, I, simplify, cos\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n+def test_simplification_with_complex_exponents():\n+    from sympy import Symbol, I, simplify, cos, sin, exp\n+\n+    x = Symbol('x')\n+    # Check simplification of other trigonometric functions with complex exponents\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(exp(I*x)) == exp(I*x)\n+    assert simplify(exp(I*x)*cos(x)**I) == exp(I*x)*cos(x)**I\n+    assert simplify((sin(x) + I)**2) == (sin(x) + I)**2\n+    assert simplify((cos(x) + I)**2) == (cos(x) + I)**2\n     A = Sum(z*x**y, (x, 1, a))\n     anew = z*Sum(x**y, (x, 1, a))\n     B = Integral(x*y, x)\n@@ -814,4 +830,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..ce811c9 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -91,6 +92,19 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+\n+    # Additional test cases for the issue with multiplication order\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert point1 + point2 * sympify(2.0) == Point(2.0, 2.0)\n+    assert point1 + sympify(2.0) * point2 == Point(2.0, 2.0)\n+\n+    # Testing with Point3D\n+    point3d = Point3D(1, 1, 1)\n+    assert point3d * sympify(3.0) == Point3D(3.0, 3.0, 3.0)\n+    assert sympify(3.0) * point3d == Point3D(3.0, 3.0, 3.0)\n+\n+    # Ensure existing functionality remains intact\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n@@ -168,6 +182,14 @@ def test_point3D():\n \n \n     assert p4 * 5 == Point3D(5, 5, 5)\n+\n+    # Additional test cases for the issue with multiplication order\n+    point1 = Point3D(0, 0, 0)\n+    point2 = Point3D(1, 1, 1)\n+    assert point1 + point2 * sympify(2.0) == Point3D(2.0, 2.0, 2.0)\n+    assert point1 + sympify(2.0) * point2 == Point3D(2.0, 2.0, 2.0)\n+\n+    # Ensure existing functionality remains intact\n     assert p4 / 5 == Point3D(0.2, 0.2, 0.2)\n \n     raises(ValueError, lambda: Point3D(0, 0, 0) + 10)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..10a7449 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,36 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, sympify, Symbol\n+\n+def test_sympy_issue_eval_repr_in_eq():\n+    # Test that objects with dangerous __repr__ don't cause issues in __eq__\n+    x = symbols('x')\n+\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    \n+    # The comparison should not use eval on the repr of C\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+    \n+    # C should not be considered equal to x\n+    assert (x == D()) is False\n+    assert (x != D()) is True\n+\n+    class BadRepr:\n+        def __repr__(self):\n+            raise RuntimeError\n+    \n+    # A class that raises an exception in __repr__ should not cause __eq__ to fail\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1932,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..338075a 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,17 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # issue 18186\n+    from sympy.abc import x, y\n+\n+    def test_issue_18186():\n+        eq = y**4 + x**4 - 2**4 - 3**4\n+        # Testing with symbols in (x, y) order\n+        assert diophantine(eq, syms=(x, y), permute=True) == \\\n+            set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+        # Testing with symbols in (y, x) order\n+        assert diophantine(eq, syms=(y, x), permute=True) == \\\n+            set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18532": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex f97b2ee..90d7ce5 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -136,7 +136,30 @@ def test_subs_with_unicode_symbols():\n     assert replaced.name == 'x'\n \n \n+from sympy import Symbol, Basic\n+\n def test_atoms():\n+    # Test with a basic object that has no .args\n+    atom = Basic()\n+    assert atom.atoms() == {atom}\n+\n+    # Test with a single symbol\n+    symbol_x = Symbol('x')\n+    assert symbol_x.atoms() == {symbol_x}\n+\n+    # Test with an expression involving multiple symbols\n+    expr = symbol_x + Symbol('y')\n+    assert expr.atoms() == {symbol_x, Symbol('y')}\n+\n+    # Test with a nested expression\n+    nested_expr = symbol_x * (symbol_x + Symbol('y'))\n+    assert nested_expr.atoms() == {symbol_x, Symbol('y')}\n+\n+    # Test with a more complex case\n+    a = Symbol('a')\n+    b = Symbol('b')\n+    complex_expr = a + b**2\n+    assert complex_expr.atoms() == {a, b}\n     assert b21.atoms() == set()\n \n \n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..fe0d978 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,26 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_one_element():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_BlockDiagMatrix_two_elements():\n+    from sympy import Matrix, BlockDiagMatrix, zeros\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B == expected\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex e067d64..a0a665d 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -179,7 +179,15 @@ def test_BlockDiagMatrix():\n     assert block_collapse(X*X) == BlockDiagMatrix(A*A, B*B, C*C)\n     #XXX: should be == ??\n     assert block_collapse(X + X).equals(BlockDiagMatrix(2*A, 2*B, 2*C))\n-    assert block_collapse(X*Y) == BlockDiagMatrix(A*A, 2*B*B, 3*C*C)\n+from sympy import MatrixElement, symbols, MatrixSymbol, BlockMatrix\n+\n+def test_issue_block_index_symbolic():\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    # The specific block cannot be determined; it should return a MatrixElement\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n     assert block_collapse(X + Y) == BlockDiagMatrix(2*A, 3*B, 4*C)\n \n     # Ensure that BlockDiagMatrices can still interact with normal MatrixExprs\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..2fc823b 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -302,7 +302,35 @@ def test_sign():\n     assert sign(x).rewrite(Heaviside) == 2*Heaviside(x, H0=S(1)/2) - 1\n     assert sign(y).rewrite(Heaviside) == sign(y)\n \n-    # evaluate what can be evaluated\n+    # Test rewrite of sign in terms of Abs\n+    from sympy import Abs, Piecewise, Eq, Function\n+\n+    # For a real variable\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    \n+    # For a non-zero real variable\n+    nonzero_x = Symbol('x', real=True, nonzero=True)\n+    assert sign(nonzero_x).rewrite(Abs) == nonzero_x / Abs(nonzero_x)\n+\n+    # For an abstract function\n+    f = Function('f')\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x)/Abs(f(x)), True))\n+\n+    # For positive, negative, and zero\n+    assert sign(5).rewrite(Abs) == 5 / Abs(5) == 1\n+    assert sign(-3).rewrite(Abs) == -3 / Abs(-3) == -1\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # For a complex number\n+    complex_z = 3 + 4*I\n+    assert sign(complex_z).rewrite(Abs) == complex_z / Abs(complex_z)\n+\n+    # For symbolic complex expression\n+    z = Symbol('z', complex=True, nonzero=True)\n+    assert sign(z).rewrite(Abs) == z / Abs(z)\n+\n+    # Existing issue with sign(0)\n+    assert sign(0).rewrite(Abs) == 0\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n     eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..cf42f16 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -712,8 +712,23 @@ def test_uniq():\n     f = [[1]]\n     raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n \n-\n-def test_kbins():\n+def test_partitions_reuse():\n+    # Test that the same dictionary is reused if it's not copied\n+    partitions_6_k2 = [p for p in partitions(6, k=2)]\n+    assert partitions_6_k2 == [{'1': 6}] * 4  # Reused dictionaries\n+\n+    # Ensure that the bug doesn't occur when dictionaries are copied\n+    partitions_6_k2_copied = [p.copy() for p in partitions(6, k=2)]\n+    expected = [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    assert partitions_6_k2_copied == expected\n+\n+    # Another test case with different parameters\n+    partitions_6_m2 = [p for p in partitions(6, m=2)]\n+    assert partitions_6_m2 == [{'1': 6}] * 4  # Reused dictionaries\n+\n+    partitions_6_m2_copied = [p.copy() for p in partitions(6, m=2)]\n+    expected_m2 = [{6: 1}, {1: 1, 5: 1}, {2: 1, 4: 1}, {3: 2}]\n+    assert partitions_6_m2_copied == expected_m2\n     assert len(list(kbins('1123', 2, ordered=1))) == 24\n     assert len(list(kbins('1123', 2, ordered=11))) == 36\n     assert len(list(kbins('1123', 2, ordered=10))) == 10\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..141fc84 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -253,8 +253,12 @@ def test_power_rewrite_exp():\n     assert all((1/func(x)).rewrite(exp) == 1/(func(x).rewrite(exp)) for func in\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n+from sympy import S, zoo, oo, power\n \n-def test_zero():\n+def test_issue_19572():\n+    # Test issue 19572: 0**-oo should produce zoo\n+    assert 0 ** -oo == zoo\n+    assert power(0, -oo) == zoo\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..765ab51 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -30,6 +31,25 @@ def test_eq():\n     assert 10*m != 10*s\n \n \n+def test_convert_to_issue():\n+    expr = joule*second\n+    \n+    # Test the specific issue where converting to joule gives joule**(7/9)\n+    conv_joule = convert_to(expr, joule)\n+    assert conv_joule == expr, f\"Expected {expr}, got {conv_joule}\"\n+\n+    # Test identity conversion (should return the same unit)\n+    conv_same = convert_to(expr, joule*second)\n+    assert conv_same == joule*second, f\"Expected joule*second, got {conv_same}\"\n+    \n+    # Test conversion to base units (kg*m**2/s)\n+    conv_base = convert_to(expr, kg*m**2/s)\n+    assert conv_base == kg*m**2/s, f\"Expected kg*m**2/s, got {conv_base}\"\n+\n+    # Test conversion with time units changing to minutes\n+    conv_mins = convert_to(expr, minute)\n+    assert conv_mins == joule*minute/60, f\"Expected J*mins/60, got {conv_mins}\"\n+\n def test_convert_to():\n     q = Quantity(\"q1\")\n     q.set_global_relative_scale_factor(S(5000), meter)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..fc1914a 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,13 +28,19 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import pytest\n+from sympy import Symbol\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n     assert bool(b1)\n \n-\n-def test_equality():\n+def test_symbol_slots_and_dict():\n+    s = Symbol('s')\n+    assert hasattr(s, '__slots__'), \"__slots__ should be defined\"\n+    assert s.__slots__ == ('name',), \"slots should be ('name',)\"\n+    assert not hasattr(s, '__dict__'), \"Symbols should not have __dict__ attribute\"\n     instances = [b1, b2, b3, b21, Basic(b1, b1, b1), Basic]\n     for i, b_i in enumerate(instances):\n         for j, b_j in enumerate(instances):\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..4eb8d7c 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,37 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_complex_argument_refinement():\n+    a = Symbol('a', complex=True)\n+    x = Symbol('x', real=True)\n+    \n+    # Test refining arg for a positive number\n+    assert refine(arg(a), Q.positive(a)) == 0\n+    \n+    # Test refinement for an integral involving a complex parameter\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    J_doit = J.doit()\n+    \n+    # Please note we're assuming that the fix implementation should handle these correctly.\n+    refined_result = refine(J_doit, Q.positive(a))\n+    expected = 1 / (a**2 + 1)\n+    \n+    assert refined_result == expected\n+\n+    # Test more cases for refining arg\n+    b = Symbol('b', complex=True)\n+    assert refine(arg(b), Q.positive(b)) == 0\n+    \n+    # Validate that refine recognizes arg of complex numbers under Q.negative\n+    assert refine(arg(b), Q.negative(b)) == pi\n+\n+    # Test with abs and a positive assumption\n+    assert refine(abs(a), Q.positive(a)) == a\n+    assert refine(abs(a), Q.negative(a)) == -a\n+\n+    # Test that refine still returns arg for non-positive or ambiguous assumptions\n+    assert refine(arg(a)) == arg(a)\n+    assert refine(arg(x), Q.real(x)) == arg(x)\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..2f91a72 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -9,6 +10,34 @@ from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n def test_subs():\n+    # Additional test cases for issue 21373\n+    from sympy import sinh, exp, Piecewise, symbols, clear_cache, PolynomialError\n+\n+    # Test cases to trigger and verify correction of the issue\n+    x, y, z = symbols('x y z')\n+\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    result_no_real = expr.subs({1: 1.0})\n+    assert result_no_real == expr.subs({1: 1.0})\n+\n+    # With real assumption\n+    clear_cache()\n+    x, y, z = symbols('x y z', real=True)\n+    expr_real = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    try:\n+        result_real = expr_real.subs({1: 1.0})\n+    except PolynomialError:\n+        result_real = None\n+    # The test will fail if the PolynomialError occurs\n+    assert result_real == expr_real.subs({1: 1.0})\n+\n+    # Verify with other functions and modifications\n+    expr_no_div = exp(sinh(Piecewise((x, y > x), (y, True))))\n+    assert expr_no_div.subs({1: 1.0}) == expr_no_div\n+\n+    expr_no_exp = sinh(Piecewise((x, y > x), (y, True)) / z)\n+    assert expr_no_exp.subs({1: 1.0}) == expr_no_exp\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..cd45dff 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -45,7 +47,14 @@ def test_Matrix_kind():\n         m = cls.zeros(3, 2)\n         assert m.kind is MatrixKind(NumberKind)\n \n-def test_MatMul_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n+    assert Derivative(A, noncomm_x).kind is MatrixKind(UndefinedKind)\n+    B = MatrixSymbol('B', 2, 2)\n+    assert Derivative(A + B, comm_x).kind is MatrixKind(NumberKind)\n+    assert Derivative(A * B, comm_x).kind is MatrixKind(NumberKind)\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n     assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..58468ee 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -130,8 +130,34 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 1])) == {S.One, x, y, x*y, x**2, x**2*y}\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n-\n-    i, j, k = symbols('i j k', commutative=False)\n+    # The following test cases are added to verify the issue described\n+    # regarding the min_degrees argument in itermonomials.\n+\n+    from sympy import symbols, itermonomials\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+\n+    # Test with three variables and fixed total degree min=max=3\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2,\n+        x1*x3**2, x1**2*x3, x2*x3**2, x2**2*x3,\n+        x1*x2*x3\n+    }\n+\n+    # Test with two variables with min_degrees and max_degrees both set\n+    assert set(itermonomials([x1, x2], 3, 2)) == {\n+        x1**2, x1*x2, x2**2, x1**3, x1**2*x2,\n+        x1*x2**2, x2**3\n+    }\n+\n+    # Test with larger range for max_degrees\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {\n+        x1**2, x1*x2, x1*x3, x2**2, x2*x3, x3**2,\n+        x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3,\n+        x1*x3**2, x2**3, x2**2*x3, x2*x3**2, x3**3\n+    }\n+\n+    # Test with a single variable and min equal to max degree\n+    assert set(itermonomials([x1], 3, 3)) == {x1**3}\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n     assert set(itermonomials([i, j, k], [0, 1, 0])) == {1, j}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..a40d458 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -48,6 +49,17 @@ def test_solve_poly_system():\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n+    \n+    # Test cases for checking the NotImplementedError for infinite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system([x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system([y - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(Poly(x - 1, x, y), (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(Poly(y - 1, x, y), (x, y)))\n+\n+    # Additional test cases for more complex infinite solution scenarios\n+    raises(NotImplementedError, lambda: solve_poly_system([x**2 + y**2 - 1], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system([x - 1, y**2 - 1], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system([x*y - 1], x, y))\n \n \n def test_solve_biquadratic():\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7057531 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..1fe1931 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -337,6 +337,17 @@ def test_cse_Indexed():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+    # Test for issues with MatrixSymbol indexing when using cse\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+    expr = a[0, 0] * b[0, 0] + a[0, 1] * b[1, 0]\n+    cse_subs, cse_reduced = cse(expr)\n+    # Check that we have meaningful substitutions and the reduced expression\n+    assert len(cse_subs) > 0\n+    assert len(cse_reduced) > 0\n+    assert all(isinstance(sub[0], Symbol) for sub in cse_subs)\n+    assert isinstance(cse_reduced[0], Basic)\n+\n \n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n@@ -356,6 +367,17 @@ def test_cse_MatrixExpr():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+    # Test for issues with MatrixSymbol indexing when using cse\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+    expr = a[0, 0] * b[0, 0] + a[0, 1] * b[1, 0]\n+    cse_subs, cse_reduced = cse(expr)\n+    # Check that we have meaningful substitutions and the reduced expression\n+    assert len(cse_subs) > 0\n+    assert len(cse_reduced) > 0\n+    assert all(isinstance(sub[0], Symbol) for sub in cse_subs)\n+    assert isinstance(cse_reduced[0], Basic)\n+\n     replacements, reduced_exprs = cse([expr1 + expr2, expr1])\n     assert replacements\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..ffdb898 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -38,6 +39,13 @@ def test_array_negative_indices():\n         assert test_array[-1, -1] == 10\n \n \n+def test_issue_17851():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n+\n def test_issue_18361():\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..842d1fe 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,19 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n+def test_single_element_tuple():\n+    # Create a lambdified function that should return a single-element tuple\n+    f = lambdify([], (1,))\n+    source_code = inspect.getsource(f)\n+    # Assert that the generated source code includes the correct single-element tuple syntax\n+    assert 'return (1,)' in source_code\n+\n+    # Test the function output\n+    assert f() == (1,)\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..38a168e 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,26 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+from sympy.core.numbers import E\n+from sympy.physics.units import exp, impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..da3ac5e 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -32,6 +32,34 @@ def test_tensor_product_dagger():\n         TensorProduct(Dagger(mat1), Dagger(mat2))\n \n \n+def test_tensor_product_issue_24142():\n+    # Original test cases from the patch\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional cases to test edge scenarios and ensure complete expansion\n+    assert TP(A, x*B + C).expand(tensorproduct=True) == \\\n+        x * TP(A, B) + TP(A, C)\n+    assert TP(0*A, A + B).expand(tensorproduct=True) == 0\n+    assert TP(A + B, x*C).expand(tensorproduct=True) == \\\n+        x * TP(A, C) + x * TP(B, C)\n+    assert TP(A + B, 2*C).expand(tensorproduct=True) == \\\n+        2 * TP(A, C) + 2 * TP(B, C)\n+    assert TP(A - A, A + B).expand(tensorproduct=True) == 0\n+\n+from sympy import *\n+from sympy.physics.quantum import *\n+\n+A = Operator('A')\n+B = Operator('B')\n+C = Operator('C')\n+x = symbols('x')\n+TP = TensorProduct\n+\n def test_tensor_product_abstract():\n \n     assert TP(x*A, 2*B) == x*2*TP(A, B)\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..8e81386 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -561,8 +562,43 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+    \n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+    \n+    expr = A1*T1 + V1\n+    \n+    # This should not throw ValueError if the issue is fixed\n+    SI._collect_factor_and_dimension(expr)\n+\n+    # Additional test: Use different but compatible units\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 3 * meter / second)\n+\n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, 9.8 * meter / second**2)\n+\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 1 * second)\n \n-def test_prefixed_property():\n+    expr2 = A2*T2 + V2\n+    # This should also not throw a ValueError if the issue is fixed\n+    SI._collect_factor_and_dimension(expr2)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..8715539 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n+from sympy.core.singleton import S\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,7 +29,16 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n-    m = Quantity(\"fake_meter\")\n+    # Additional tests for the milli prefix issue\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+    assert milli * volt == volt / 1000\n+    assert volt * milli == volt / 1000\n+\n+    # Ensure multiplying by milli gives expected prefixed units\n+    from sympy.physics.units import mW, mV\n+    assert milli * W == mW\n+    assert milli * volt == mV\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n \n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..f60a44f 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -183,13 +183,14 @@ class GrandParent(models.Model):\n     class Meta:\n         unique_together = ('first_name', 'last_name')\n \n+# Update Parent and Child models to include Meta with ordering\n \n class Parent(GrandParent):\n-    pass\n-\n+    class Meta:\n+        ordering = ['-pk']  # Add ordering to Parent\n \n class Child(Parent):\n-    pass\n+    pass  # Inherit ordering from Parent\n \n \n class GrandChild(Child):\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..677d0f4 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,7 +343,37 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_order_by_f_expression(self):\n+    def test_self_ref_fk_order_by_id(self):\n+        # Create and save Authors\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+\n+        # Create Articles with self-referencing foreign key\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1)\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2)\n+\n+        # Test ordering by the author's id, which is a self-referencing foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_self_ref_fk_order_by_root(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        author_3 = Author.objects.create(name=\"Author 3\", editor=author_1)\n+\n+        # Create Articles with self-referencing foreign key\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_3)\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2)\n+\n+        # Test ordering by author's editor, which is a self-referencing foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n                 \"Article 1\",\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..fb13f2b 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,8 +3201,23 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    \n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the id provided in the widget's attrs \n+        when rendering subwidgets of a widget of type CheckboxSelectMultiple.\n+        \"\"\"\n+        class CustomForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('1', 'Option 1'), ('2', 'Option 2')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n \n-    def test_boundfield_widget_type(self):\n+        form = CustomForm(auto_id='customprefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Verify that the custom id is used instead of the auto-generated one\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..875db6c 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,34 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+import unittest\n+from django.apps import apps\n+from django.contrib.auth.models import Permission\n+from django.core.management import call_command\n+from django.db import connections\n+from django.db.utils import OperationalError\n+from django.test import TestCase, override_settings\n+from io import StringIO\n+\n+class TestMigrateCommandWithDatabaseParameter(TestCase):\n+    databases = {'default', 'other'}\n+\n+    @override_settings(DATABASE_ROUTERS=['utils.tenant_db_router.TenantDatabaseRouter'])\n+    def test_migrate_command_respects_database_parameter(self):\n+        try:\n+            Permission.objects.using('other').delete()  # Ensure the other database is clean\n+            out = StringIO()\n+            call_command('migrate', database='other', stdout=out)\n+\n+            # Check that permissions are added to the 'other' DB\n+            permissions_in_other = Permission.objects.using('other').count()\n+            self.assertGreater(permissions_in_other, 0)\n+\n+            # Double check default DB to ensure no permissions were added there\n+            permissions_in_default = Permission.objects.using('default').count()\n+            self.assertEqual(permissions_in_default, 0)\n+        \n+        except OperationalError as e:\n+            self.fail(f\"OperationalError occurred: {e}\")\n",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..764c52b 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,35 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm\n+\n+...\n+\n+def test_colorbar_update_after_norm_change():\n+    # Create a random image with log-normal distribution\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots(1, 1)\n+    # Display the image\n+    plot = ax.imshow(img, cmap='gray')\n+    # Create the colorbar\n+    cb = fig.colorbar(plot, ax=ax)\n+    # Change the normalization to LogNorm\n+    plot.set_norm(LogNorm())\n+    \n+    # Redraw the figure to update the colorbar\n+    fig.canvas.draw()\n+    \n+    # Get the norm applied to the colorbar\n+    cbar_norm = cb.norm\n+    \n+    # Assert that the norm now reflects the updated LogNorm\n+    assert isinstance(cbar_norm, LogNorm)\n+    assert cbar_norm.vmin == img.min()\n+    assert cbar_norm.vmax == img.max()\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..8703acc 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,35 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output and custom transformer that aggregates data.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    \n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index()\n+\n+    # Create a FeatureUnion with pandas output\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    union.set_output(transform=\"pandas\")\n+\n+    # Fit and transform the data\n+    transformed_data = union.fit_transform(data)\n+\n+    # Assert the transformed data is as expected\n+    expected_index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", freq=\"D\")\n+    assert transformed_data.index.equals(expected_index)\n+\n+    expected_values = [240] * len(expected_index)\n+    assert (transformed_data[\"value\"] == expected_values).all()\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..062e89f 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -132,6 +132,34 @@ def test_decorators(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_annotation_only_attributes(app):\n+    # Testing that annotation-only attributes in the superclass are documented\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_only',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_only',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_only',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n     options = {\"members\": None}\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..76e9184 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n-    Symbol, coth, pi, log, count_ops, sqrt, E, expand, Piecewise)\n+    Symbol, coth, pi, log, count_ops, sqrt, E, expand, Piecewise, Rational, acos)\n \n from sympy.core.compatibility import long\n from sympy.utilities.pytest import XFAIL\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..93f4fa7 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,6 +4862,35 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_alignment():\n+    from sympy import Sum, oo\n+    from sympy.abc import x\n+\n+    # Test case for the issue described: Sum(x, (x, 1, oo)) + 3\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ascii_str = \\\n+\"\"\"\\\n+  oo    \\n\\\n+ ___    \\n\\\n+ \\\\  `   \\n\\\n+  \\\\    x\\n\\\n+  /   + 3\\n\\\n+ /__,  \\n\\\n+x = 1  \\\n+\"\"\"\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572    x\\n\\\n+  \u2571   + 3\\n\\\n+ \u2571      \\n\\\n+ \u203e\u203e\u203e    \\n\\\n+x = 1   \\\n+\"\"\")\n+    assert pretty(expr) == ascii_str\n+    assert upretty(expr) == ucode_str\n \n def test_units():\n     expr = joule\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..17fca0d 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -690,6 +690,18 @@ def test_reshape():\n     assert reshape(list(range(12)), [2, [3], {2}, (1, (3,), 1)]) == \\\n         [[0, 1, [2, 3, 4], {5, 6}, (7, (8, 9, 10), 11)]]\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n+\n+def test_uniq_modification():\n+    # Test that modifying the list during iteration raises RuntimeError\n+    from sympy.utilities.iterables import uniq\n+    f = [1, 2, 3, 4]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = ['a', 'b', 'c', 'b', 'a']\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1], [2], [3], [1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [1, 2, 1]\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n def test_uniq():\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..b50247b 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -8,6 +9,7 @@ from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n+from django.db.models import Max\n \n from .models import (\n     Article, Author, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n",
  "django__django-15320": "",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..454074b 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,7 +153,32 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+            ).select_related('tournament_pool'))\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +189,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..dca4fb7 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -9,12 +10,19 @@ import warnings\n \n import numpy as np\n import pytest\n-from PIL import Image\n+import pickle\n+from matplotlib.figure import Figure\n \n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n-from matplotlib.axes import Axes\n+def test_figure_dpi_unpickle():\n+    fig = Figure(dpi=200)\n+    for i in range(10):  # Test a few iterations to check DPI remains constant\n+        assert fig.dpi == 200, f\"Unexpected DPI: {fig.dpi} on iteration {i}\"\n+        pickled_fig = pickle.dumps(fig)\n+        fig = pickle.loads(pickled_fig)\n+    assert fig.dpi == 200, f\"Unexpected DPI after multiple unpickle operations: {fig.dpi}\"\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..a95cc52 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1623,7 +1624,20 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_scatterplot_categorical_hue(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+\n+        # Attempt to create a PairGrid with scatterplot using a categorical hue.\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\",\"sepal_width\"], x_vars=[\"petal_length\",\"petal_width\"])\n+        \n+        # This should work without raising an error.\n+        g.map(sns.scatterplot, hue=iris[\"species\"])\n+        g.map(sns.regplot, scatter=False)\n+\n+        # Checking if plots are created without error\n+        for ax in g.axes.flat:\n+            assert len(ax.collections) > 0, \"No scatterplots created in axes.\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..6dfdf5b 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -347,6 +347,14 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n+def test_pytest_raises_context_str_behavior():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    # Verify that str(excinfo) returns the shorter representation.\n+    assert '\"A\"' in str(excinfo)\n+    # Verify that str(excinfo.value) returns the full message.\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n def test_excinfo_for_later():\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..e8ae4a3 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Verify the new shorthand option works as expected\n+        result_short = testdir.runpytest(\"--co\")\n+        result_short.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Verify the new shorthand option works as expected\n+        result_short = testdir.runpytest(\"--co\")\n+        result_short.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..040ee79 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -91,11 +91,20 @@ def missing_attr(c,\n     return a + (b or \"\")\n \n \n-class _ClassWithDocumentedInit:\n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n     \"\"\"Class docstring.\"\"\"\n \n     def __init__(self, x: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..6ef3a87 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,32 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, MatrixSymbol, Identity, Sum, symbols\n+from sympy.assumptions.assume import assuming\n+from sympy.assumptions.refine import refine\n+from sympy.assumptions.ask import ask\n+from sympy.assumptions import Q as Query\n \n def test_Identity_doit():\n+    # Test case for verifying behavior of summing elements of an identity matrix\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+\n+    # Verify the sum of diagonal elements is n\n+    assert Sum(In[i, i], (i, 0, n-1)).doit() == n\n+\n+    # Verify total sum of all elements is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n+    # Additional case similar to issue context\n+    M = MatrixSymbol('M', n, n)\n+    with assuming(Query.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+        # Assert that when M is orthogonal, M.T * M results in an identity matrix\n+        assert e == In\n+        # Verify that our refined matrix behaves as an identity matrix\n+        assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..a9a4720 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,12 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_latex_parsing_fractions():\n+    from sympy.parsing.latex import parse_latex\n+    # Test for the issue with LaTeX fractions parsing\n+    expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    expected = ((a**3 + b)/c)/(1/(c**2))\n+    assert expr == expected, f\"Expected {expected}, but got {expr}\"\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}