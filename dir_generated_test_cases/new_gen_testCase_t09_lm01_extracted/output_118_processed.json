{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..28d1f31 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,28 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+def test_nested_compound_model_separable():\n+    from astropy.modeling.models import Pix2Sky_TAN, Linear1D\n+    from astropy.modeling.separable import separability_matrix\n+    import numpy as np\n+\n+    # Initial compound model\n+    cm = Linear1D(10) & Linear1D(5)\n+    # Nested compound model\n+    nested_cm = Pix2Sky_TAN() & cm\n+    expected_matrix = np.array([[True, True, False, False],\n+                                [True, True, False, False],\n+                                [False, False, True, False],\n+                                [False, False, False, True]])\n+    \n+    result_matrix = separability_matrix(nested_cm)\n+\n+    assert result_matrix.shape == expected_matrix.shape, (\n+        \"The shape of the separability matrix for nested compound model is incorrect\"\n+    )\n+    assert np.array_equal(result_matrix, expected_matrix), (\n+        \"The separability matrix for nested compound models is incorrect\"\n+    )\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..2de911e 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,10 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n@@ -184,4 +188,45 @@ Col1      Col2 Col3 Col4\n  2.4 's worlds    2    2\n ==== ========= ==== ====\n \"\"\",\n-    )\n+    )\n+\n+\n+def test_rst_with_header_rows_write():\n+    \"\"\"Test writing a table with header_rows specified\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.ct})\n+    expected_output = [\n+        \"===== ========\",\n+        \" wave response\",\n+        \"===== ========\",\n+        \"350.0      0.7\",\n+        \"950.0      1.2\",\n+        \"===== ========\",\n+    ]\n+    \n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    assert out.getvalue().splitlines() == expected_output\n+\n+def test_rst_with_header_rows_read_write_roundtrip():\n+    \"\"\"Test round-trip for reading and writing with header_rows\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    \n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+    \n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n",
  "astropy__astropy-14365": "",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..dcaf661 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,47 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+# Additional imports for the NDDataRef and numpy\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..a02964b 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,8 +1092,14 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n-\n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The FILE_UPLOAD_PERMISSIONS setting should default to 0o644 in\n+        the file_permissions_mode attribute of\n+        django.core.files.storage.default_storage.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..b01120a 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,9 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \n+            'trailingnewline\\n',  # Test case for trailing newline\n+            'trailingnewline\\n',  # Test case for trailing newline\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +260,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..c4058c2 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,10 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n@@ -365,6 +369,15 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n+    def test_memoryview_with_property(self):\n+        r = HttpResponse()\n+        r.content = memoryview(b'another view')\n+        self.assertEqual(r.content, b'another view')\n+\n+    def test_memoryview_sliced_content(self):\n+        data = memoryview(b'0123456789')\n+        r = HttpResponse(data[2:5])  # Should handle slices correctly\n+        self.assertEqual(r.content, b'234')\n \n     def test_iter_content(self):\n         r = HttpResponse(['abc', 'def', 'ghi'])\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..674ac21 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -471,6 +473,30 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # Verify the user instance can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        # Ensure the primary key is set to None after deletion.\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_non_fast_deletable_instance(self):\n+        parent = Parent.objects.create(name=\"Parent\")\n+        child = Child.objects.create(parent=parent, name=\"Child\")\n+        child.delete()\n+        # Verify that the child instance has its primary key set to None after deletion.\n+        self.assertIsNone(child.pk)\n+\n+    def test_delete_instance_with_m2m_relationship(self):\n+        m2m_to_instance = M2MTo.objects.create()\n+        m2m_from_instance = M2MFrom.objects.create()\n+        m2m_from_instance.m2m.add(m2m_to_instance)\n+        m2m_to_instance.delete()\n+        # Ensure the m2m_to_instance has its primary key set to None after deletion.\n+        self.assertIsNone(m2m_to_instance.pk)\n+\n     def test_fast_delete_joined_qs(self):\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n@@ -481,6 +507,30 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # Verify the user instance can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        # Ensure the primary key is set to None after deletion.\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_non_fast_deletable_instance(self):\n+        parent = Parent.objects.create(name=\"Parent\")\n+        child = Child.objects.create(parent=parent, name=\"Child\")\n+        child.delete()\n+        # Verify that the child instance has its primary key set to None after deletion.\n+        self.assertIsNone(child.pk)\n+\n+    def test_delete_instance_with_m2m_relationship(self):\n+        m2m_to_instance = M2MTo.objects.create()\n+        m2m_from_instance = M2MFrom.objects.create()\n+        m2m_from_instance.m2m.add(m2m_to_instance)\n+        m2m_to_instance.delete()\n+        # Ensure the m2m_to_instance has its primary key set to None after deletion.\n+        self.assertIsNone(m2m_to_instance.pk)\n+\n     def test_fast_delete_inheritance(self):\n         c = Child.objects.create()\n         p = Parent.objects.create()\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..88d3ca4 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,7 +1,10 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n-from django.contrib.auth.models import Permission, User\n+from django.contrib.auth.models import Permission, User, Group\n+from django.core.management import call_command\n+from django.test.utils import captured_stdout\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n \n@@ -140,7 +143,64 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Ensure migration does not fail when permissions already exist for proxy models.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_migrate_duplicate_permissions_issue_resolved(self):\n+        \"\"\"\n+        Test that the migration properly handles already existing proxy permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        # Simulate the situation of existing permissions before migration\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        \n+        # Attempt to run the migration\n+        try:\n+            call_command('migrate', verbosity=0)\n+        except Exception as e:\n+            self.fail(f\"Migrate command failed due to {str(e)}\")\n+\n+    def test_permissions_remain_unique_after_migration(self):\n+        \"\"\"\n+        Ensure no duplicate permissions exist after running migrations.\n+        \"\"\"\n+        # Prepare initial state\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        \n+        # Run the migration that could cause duplicates if unfixed\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+\n+        # Check for duplicates\n+        permissions = Permission.objects.filter(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+        )\n+        self.assertEqual(permissions.count(), 1)\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..8e962fa 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -9,6 +9,7 @@ import time\n import types\n import weakref\n import zipfile\n+import os\n from importlib import import_module\n from pathlib import Path\n from unittest import mock, skip, skipIf\n@@ -56,7 +57,33 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.addCleanup(shutil.rmtree, dirname)\n         return Path(dirname) / filename\n \n-    def test_paths_are_pathlib_instances(self):\n+    def test_manage_py_reload_triggers(self):\n+        \"\"\"\n+        Simulate changes to the manage.py file and verify that it triggers the autoreloader.\n+        \"\"\"\n+        manage_file = self.temporary_file('manage.py')\n+        manage_file.write_text(\"\"\"\n+def main():\n+    print('Hello, world!')\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ticket_30479.settings')\n+\"\"\")\n+        \n+        # This can simulate having 'manage.py' as the entry point\n+        main_module = types.ModuleType('__main__')\n+        main_module.__file__ = str(manage_file)\n+        sys.modules['__main__'] = main_module\n+\n+        self.assertFileFound(Path(main_module.__file__))\n+\n+        # Modify the file to simulate a change that should be detected.\n+        manage_file.write_text(\"\"\"\n+def main():\n+    print('File changed!')\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ticket_30479.settings')\n+\"\"\")\n+        \n+        # Re-assert the modified file is still found, which means change detection logic works.\n+        self.assertFileFound(Path(main_module.__file__))\n         for filename in autoreload.iter_all_python_module_files():\n             self.assertIsInstance(filename, Path)\n \n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..1c2b87e 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -141,7 +141,20 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n-class TestCommonRoots(SimpleTestCase):\n+\n+class TestEmbeddedNullBytes(SimpleTestCase):\n+    def test_paths_with_embedded_null_bytes(self):\n+        # Test if paths with embedded null bytes are correctly ignored\n+        test_paths = [\n+            'embedded_null_byte\\x00.py',\n+            'dir\\x00ectory/embedded_null_byte.py',\n+        ]\n+        for path in test_paths:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files([], frozenset([path])),\n+                    frozenset(),\n+                )\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..e913fdc 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -19,6 +19,9 @@ from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n from django.utils.functional import SimpleLazyObject\n from django.utils.safestring import mark_safe\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n+from django.test import Client\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n     Path as DebugPath, cleanse_setting, default_urlconf,\n@@ -242,6 +245,15 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test the behavior when Http404 is raised in a path converter's to_python method.\n+        \"\"\"\n+        client = Client()\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = client.get('/path/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n     def test_handle_db_exception(self):\n         \"\"\"\n         Ensure the debug view works when a database exception is raised by\n",
  "django__django-11742": "",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..c55627b 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+import calendar\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +318,33 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year_future(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Test case for date string with year appearing more than 50 years in the future\n+        utcnow_future = datetime(2095, 11, 6, 8, 49, 37)\n+        rfc850str_future = 'Saturday, 01-Jan-95 00:00:00 GMT'\n+        expected_date_future = datetime(1995, 1, 1, 0, 0, 0)\n+\n+        mocked_datetime.utcnow.return_value = utcnow_future\n+        parsed_future = parse_http_date(rfc850str_future)\n+        self.assertEqual(datetime.utcfromtimestamp(parsed_future), expected_date_future)\n+\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year_past(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Test case for date string from the past\n+        utcnow_past = datetime(2000, 11, 6, 8, 49, 37)\n+        rfc850str_past = 'Tuesday, 31-Dec-69 00:00:00 GMT'\n+        expected_date_past = datetime(2069, 12, 31, 0, 0, 0)\n+\n+        mocked_datetime.utcnow.return_value = utcnow_past\n+        parsed_past = parse_http_date(rfc850str_past)\n+        self.assertEqual(datetime.utcfromtimestamp(parsed_past), expected_date_past)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11964": "",
  "django__django-11999": "",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..9f7c3a6 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -12,6 +12,7 @@ urlpatterns = [\n     path('included_urls/', include('urlpatterns.included_urls')),\n     re_path(r'^regex/(?P<pk>[0-9]+)/$', views.empty_view, name='regex'),\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.empty_view, name='modules'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+]\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..5de7f46 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,9 +1,32 @@\n+\n+class TestInheritedChoices(TestCase):\n+    def test_inherited_choices_display(self):\n+        class A(models.Model):\n+            foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+            class Meta:\n+                abstract = True\n+        \n+        class B(A):\n+            foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\"), (\"C\", \"output3\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+        \n+        # Test cases for expected behavior\n+        instance_a = B(field_foo='A')\n+        instance_b = B(field_foo='B')\n+        instance_c = B(field_foo='C')\n+        \n+        self.assertEqual(instance_a.get_field_foo_display(), 'output1')\n+        self.assertEqual(instance_b.get_field_foo_display(), 'output2')\n+        self.assertEqual(instance_c.get_field_foo_display(), 'output3')\n+\n import pickle\n \n from django import forms\n from django.core.exceptions import ValidationError\n from django.db import models\n from django.test import SimpleTestCase, TestCase\n+from django.db import models\n from django.utils.functional import lazy\n \n from .models import (\n",
  "django__django-12286": "",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..52fd885 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -175,8 +175,19 @@ class UtilsTests(SimpleTestCase):\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n-\n-    def test_number_formats_display_for_field(self):\n+        \n+    def test_jsonfield_display_for_field(self):\n+        # Setup JSONField tests with expected display output\n+        tests = [\n+            ({'foo': 'bar'}, '{\"foo\": \"bar\"}'),  # Valid JSON\n+            (['foo', 'bar'], '[\"foo\", \"bar\"]'),  # List in JSON\n+            ('foo', '\"foo\"'),                    # String as JSON\n+            ({('foo',): 'bar'}, \"{('foo',): 'bar'}\"),  # Invalid JSON\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..6bb368c 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -18,6 +20,54 @@ def get_connection_copy():\n     return test_connection\n \n \n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+        \n+    def test_foreign_key_constraint_order(self):\n+        # Test foreign keys are respected and deserialization is atomic.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        # This should raise an integrity error if it weren't for the atomic block.\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=1)\n+        obj_ref = ObjectReference.objects.get(pk=1)\n+        self.assertEqual(obj_ref.obj, obj)\n+        self.assertIsNone(obj.obj_ref)\n+\n class TestDbSignatureTests(SimpleTestCase):\n     def test_default_name(self):\n         # A test db name isn't set.\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..245a0d5 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -130,6 +130,9 @@ class RelativeFieldTests(SimpleTestCase):\n \n     def test_ambiguous_relationship_model(self):\n \n+        from django.core.checks import Error\n+        from django.db import models\n+        \n         class Person(models.Model):\n             pass\n \n@@ -152,7 +155,7 @@ class RelativeFieldTests(SimpleTestCase):\n                 \"keyword argument.\",\n                 hint=(\n                     'If you want to create a recursive relationship, use '\n-                    'ForeignKey(\"self\", symmetrical=False, through=\"AmbiguousRelationship\").'\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n                 ),\n                 obj=field,\n                 id='fields.E335',\n@@ -163,6 +166,9 @@ class RelativeFieldTests(SimpleTestCase):\n         class WrongModel(models.Model):\n             pass\n \n+        from django.core.checks import Error\n+        from django.db import models\n+        \n         class Person(models.Model):\n             pass\n \n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..6f91cc7 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1248,8 +1248,48 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleanse_setting('SETTING_NAME', initial),\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n-\n-    def test_request_meta_filtering(self):\n+    \n+    def test_cleanse_setting_recurses_in_list_of_dicts(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {'secret': 'value', 'token': 'another_value'},\n+            {'nested_list': [\n+                {'API': 'value'},\n+                {'KEY': 'another_value'},\n+            ]}\n+        ]\n+        cleansed = [\n+            {'secret': reporter_filter.cleansed_substitute, 'token': reporter_filter.cleansed_substitute},\n+            {'nested_list': [\n+                {'API': reporter_filter.cleansed_substitute},\n+                {'KEY': reporter_filter.cleansed_substitute},\n+            ]}\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed\n+        )\n+    \n+    def test_cleanse_setting_recurses_in_tuple_of_dicts(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = (\n+            {'secret': 'value', 'token': 'another_value'},\n+            {'nested_tuple': (\n+                {'API': 'value'},\n+                {'KEY': 'another_value'},\n+            )}\n+        )\n+        cleansed = (\n+            {'secret': reporter_filter.cleansed_substitute, 'token': reporter_filter.cleansed_substitute},\n+            {'nested_tuple': (\n+                {'API': reporter_filter.cleansed_substitute},\n+                {'KEY': reporter_filter.cleansed_substitute},\n+            )}\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..75eadbe 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1758,8 +1758,33 @@ class OperationTests(OperationTestBase):\n     def test_alter_index_together_remove(self):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        # Test removal of index_together when unique_together is set on the same fields\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Assertions to verify that unique constraint still exists, but the index does not.\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12747": "",
  "django__django-12856": "",
  "django__django-12915": "",
  "django__django-12983": "",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..293c1ec 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -7,6 +7,8 @@ from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n from django.test import SimpleTestCase\n from django.test.utils import isolate_apps\n+from django.db import models\n+from django.test import SimpleTestCase\n \n \n @isolate_apps('model_inheritance')\n@@ -347,4 +349,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..a8082bd 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n@@ -5,6 +6,7 @@ from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -37,6 +39,33 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                \n+                # Assert that the token is initially valid.\n+                self.assertTrue(p0.check_token(user, tk1))\n+                \n+                # Change the user's email address, which should invalidate the token\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                \n+                # Assert that the token is now invalid\n+                self.assertFalse(p0.check_token(user, tk1))\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "",
  "django__django-13658": "",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..52fd500 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,9 +1,11 @@\n+\n import sys\n import unittest\n from unittest import mock\n \n from django import __version__\n-from django.core.management import CommandError, call_command\n+from django import __version__\n+from django.core.management import CommandError, call_command, management\n from django.test import SimpleTestCase\n from django.test.utils import captured_stdin, captured_stdout\n \n@@ -20,8 +22,24 @@ class ShellCommandTestCase(SimpleTestCase):\n                 ),\n             )\n         self.assertEqual(cm.records[0].getMessage(), __version__)\n+    \n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+    \n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n \n-    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch('django.core.management.commands.shell.select')\n     def test_stdin_read(self, select):\n         with captured_stdin() as stdin, captured_stdout() as stdout:\n@@ -29,15 +47,59 @@ class ShellCommandTestCase(SimpleTestCase):\n             stdin.seek(0)\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n+    \n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n+    \n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n         select.return_value = ([], [], [])\n@@ -49,4 +111,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..cb661f0 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,7 +1013,22 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_verbose_name_only_inline(self):\n+        class VerboseNameOnlyProfileInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Only verbose name child'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            VerboseNameOnlyProfileInline,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        self.assertContains(response, '<h2>Only verbose name childs</h2>')\n+        self.assertContains(response, 'Add another Only verbose name child')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..28a2858 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -595,7 +595,21 @@ class TestQuerying(TestCase):\n             [self.objs[4]],\n         )\n \n-    def test_isnull_key_or_none(self):\n+    def test_isnull_json_null(self):\n+        # This test verifies that a JSON null value is not matched with __isnull=True.\n+        # On SQLite and Oracle, this should not return objects where the key exists but value is null.\n+\n+        # Object with 'j' key set to None\n+        obj_with_json_null = NullableJSONModel.objects.create(value={'j': None})\n+\n+        # We expect obj_with_json_null NOT to be in the results where value__j__isnull=True\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+\n+        # Clean up\n+        obj_with_json_null.delete()\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..f576b1d 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -172,6 +172,34 @@ class DispatcherTests(SimpleTestCase):\n         self.assertTrue(hasattr(err, '__traceback__'))\n         self.assertIsInstance(err.__traceback__, TracebackType)\n         a_signal.disconnect(fails)\n+\n+    def test_send_robust_logs(self):\n+        import logging\n+        from django.dispatch import Signal\n+\n+        a_signal = Signal()\n+\n+        def fails(val, **kwargs):\n+            raise ValueError('this')\n+\n+        a_signal.connect(fails)\n+\n+        # Here we assert that an exception is logged\n+        with self.assertLogs('django.dispatch', level='ERROR') as cm:\n+            result = a_signal.send_robust(sender=self, val='test')\n+            err = result[0][1]\n+            self.assertIsInstance(err, ValueError)\n+            self.assertEqual(err.args, ('this',))\n+            self.assertTrue(hasattr(err, '__traceback__'))\n+            self.assertIsInstance(err.__traceback__, TracebackType)\n+\n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(), \n+            \"Error calling fails in Signal.send_robust() (this)\"\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        a_signal.disconnect(fails)\n         self.assertTestIsClean(a_signal)\n \n     def test_disconnection(self):\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..d9dbdca 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -395,6 +395,52 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_explicit_inherited_pk_warning(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        class GrandChild(Child):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_inherited_pk_with_default_auto_field_setting(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        class GrandChild(Child):\n+            pass\n+\n+        with override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField'):\n+            self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_inherited_pk_explicit_override(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            id = models.BigAutoField(primary_key=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_inherited_with_manual_o2o_link(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+            class Meta:\n+                app_label = 'check_framework.apps.CheckDefaultPKConfig'\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -414,4 +460,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..7d91d43 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,26 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from forms_tests.models import ChoiceModel\n+from django.utils.translation import gettext as _\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Setup the ModelChoiceField with a custom invalid_choice message\n+        error_message = _('\"%s\" is not one of the available choices.')\n+\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': error_message,\n+            }\n+        )\n+\n+        # Test with an invalid choice\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n+\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +325,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..add6985 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,9 +1,26 @@\n+\n from django.db.models import F, Q\n+from collections import UserDict\n from django.test import SimpleTestCase\n \n \n class QTests(SimpleTestCase):\n-    def test_combine_and_empty(self):\n+    def test_non_pickleable_keys(self):\n+        # Check that using dict_keys directly does not raise an error.\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        # Verify using the | operator\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+        # Additional test for dict_keys from a non-empty dictionary.\n+        d = {'a': 1, 'b': 2}\n+        q = Q(x__in=d.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         q = Q(x=1)\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..9bc9d98 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -793,8 +793,22 @@ class BasicExpressionsTests(TestCase):\n             ),\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n+    def test_q_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        tests = [\n+            (Exists(is_ceo) & Q(firstname='Joe'), ['Joe Smith']),\n+            (Q(firstname='Joe') & Exists(is_ceo), ['Joe Smith']),\n+            (Exists(is_ceo) | Q(firstname='Frank'), ['Joe Smith', 'Frank Meyer']),\n+            (Q(firstname='Frank') | Exists(is_ceo), ['Joe Smith', 'Frank Meyer']),\n+        ]\n \n-    def test_boolean_expression_combined(self):\n+        for conditions, expected_names in tests:\n+            with self.subTest(conditions=conditions):\n+                result = Employee.objects.filter(conditions)\n+                result_names = [f\"{emp.firstname} {emp.lastname}\" for emp in result]\n+                self.assertCountEqual(result_names, expected_names)\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..f58ab42 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1137,7 +1137,24 @@ class ResolverMatchTests(SimpleTestCase):\n         request = HttpRequest()\n         self.assertIsNone(request.resolver_match)\n \n-    def test_repr(self):\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_unwrapped_partial(self):\n+        view_func = functools.partial(views.empty_view, 'additional_arg')\n+        match = ResolverMatch(\n+            func=view_func,\n+            args=(),\n+            kwargs={},\n+            url_name='partial-view',\n+            app_names=[],\n+            namespaces=[],\n+            route='partial/',\n+        )\n+        expected_repr = (\n+            \"ResolverMatch(func=urlpatterns_reverse.views.empty_view, \"\n+            \"args=(), kwargs={}, url_name=partial-view, app_names=[], \"\n+            \"namespaces=[], route=partial/)\"\n+        )\n+        self.assertEqual(repr(match), expected_repr)\n         self.assertEqual(\n             repr(resolve('/no_kwargs/42/37/')),\n             \"ResolverMatch(func=urlpatterns_reverse.views.empty_view, \"\n@@ -1146,6 +1163,11 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import resolve, path, ResolverMatch\n+from django.test import SimpleTestCase, override_settings\n+from . import views\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_fields/test_autofield.py b/tests/model_fields/test_autofield.py\nindex bfbf1e8..66e9884 100644\n--- a/tests/model_fields/test_autofield.py\n+++ b/tests/model_fields/test_autofield.py\n@@ -22,7 +22,28 @@ class SmallAutoFieldTests(SmallIntegerFieldTests):\n     rel_db_type_class = models.SmallIntegerField\n \n \n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+class CustomBigAutoField(models.BigAutoField):\n+    pass\n+\n+class CustomSmallAutoField(models.SmallAutoField):\n+    pass\n+\n class AutoFieldInheritanceTests(SimpleTestCase):\n+    \n+    def test_custom_big_autofield_isinstance_of_autofield(self):\n+        self.assertIsInstance(CustomBigAutoField(), models.AutoField)\n+    \n+    def test_custom_small_autofield_isinstance_of_autofield(self):\n+        self.assertIsInstance(CustomSmallAutoField(), models.AutoField)\n+\n+    def test_custom_big_autofield_issubclass_of_autofield(self):\n+        self.assertTrue(issubclass(CustomBigAutoField, models.AutoField))\n+    \n+    def test_custom_small_autofield_issubclass_of_autofield(self):\n+        self.assertTrue(issubclass(CustomSmallAutoField, models.AutoField))\n \n     def test_isinstance_of_autofield(self):\n         for field in (models.BigAutoField, models.SmallAutoField):\n@@ -32,4 +53,4 @@ class AutoFieldInheritanceTests(SimpleTestCase):\n     def test_issubclass_of_autofield(self):\n         for field in (models.BigAutoField, models.SmallAutoField):\n             with self.subTest(field.__name__):\n-                self.assertTrue(issubclass(field, models.AutoField))\n+                self.assertTrue(issubclass(field, models.AutoField))\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..1a4698c 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2217,7 +2217,22 @@ class StartApp(AdminScriptTestCase):\n             \"won't replace conflicting files.\"\n         )\n \n-    def test_template(self):\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        # Test creation of an app with a trailing slash in the directory name\n+        app_dir = os.path.join(self.test_dir, 'apps', 'with_trailing_slash')\n+        os.makedirs(app_dir)\n+        \n+        # Run startapp with the trailing slash\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'with_trailing_slash', '')])\n+        \n+        # Assert that there is no error output\n+        self.assertNoOutput(err)\n+        \n+        # Confirm the app structure is created\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+        \n+        # Cleanup created app directory after test\n+        shutil.rmtree(app_dir)\n         out, err = self.run_django_admin(['startapp', 'new_app'])\n         self.assertNoOutput(err)\n         app_path = os.path.join(self.test_dir, 'new_app')\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..1de6426 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,7 @@\n import datetime\n import re\n from unittest import mock\n+from django.test import SimpleTestCase\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n@@ -1020,7 +1021,19 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_hash_widget_label(self):\n+        \"\"\"Additional tests for ReadOnlyPasswordHashWidget regarding labels.\"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        # Ensure the widget's id_for_label returns None\n+        self.assertIsNone(bound_field.field.widget.id_for_label('id'))\n+        # Ensure the label is correctly formatted without a 'for' attribute\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+        # Check the rendered HTML to ensure no 'for' id_linkage\n+        self.assertNotIn('for=\"', bound_field.label_tag())\n+        self.assertNotIn('id=\"', str(bound_field))\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-14580": "",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..51d21fa 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -335,8 +335,12 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        from django.forms.utils import ErrorList\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        # Verify the error is wrapped with the 'nonform' CSS class\n+        self.assertIsInstance(formset.non_form_errors(), ErrorList)\n+        expected_html = '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        self.assertEqual(str(formset.non_form_errors()), expected_html)\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -357,8 +361,12 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        from django.forms.utils import ErrorList\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        # Verify the error is wrapped with the 'nonform' CSS class\n+        self.assertIsInstance(formset.non_form_errors(), ErrorList)\n+        expected_html = '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        self.assertEqual(str(formset.non_form_errors()), expected_html)\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -981,8 +989,12 @@ class FormsFormsetTestCase(SimpleTestCase):\n             'drinks-1-name': 'Gin and Tonic',\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        from django.forms.utils import ErrorList\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        # Verify the error is wrapped with the 'nonform' CSS class\n+        self.assertIsInstance(formset.non_form_errors(), ErrorList)\n+        expected_html = '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        self.assertEqual(str(formset.non_form_errors()), expected_html)\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..612d293 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -10,6 +10,17 @@ from .models import (\n     Relationship, SymmetricalFriendship,\n )\n \n+from django.test import TestCase\n+from .models import Event, Invitation, Person\n+\n+class ManyToManyRelTests(TestCase):\n+    def test_through_fields_list_hashable(self):\n+        # Test that confirms the issue with unhashable 'through_fields' is fixed\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m), \n+                         \"Hashes of M2M relationships with through_fields should be equal and hashable\")\n+\n \n class M2mThroughTests(TestCase):\n     @classmethod\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..b7c6b71 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -281,15 +281,61 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n-        request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n+import json\n+from datetime import date\n+from django.http import JsonResponse\n+from django.urls import path\n+from django.contrib.admin import ModelAdmin\n+from django.contrib.auth.models import User\n+from .models import Question\n+\n+class TestAutocompleteJsonView(AdminSeleniumTestCase):\n+    \n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com'\n+        )\n+        self.factory = RequestFactory()\n+        self.url = '/admin/autocomplete/'\n+        self.opts = {'app_label': 'admin_views', 'model_name': 'question'}\n+\n+    def test_serialize_result_with_extra_field(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {**super().serialize_result(obj, to_field_name), 'posted': str(obj.posted)}\n+\n+        Question.objects.create(question='Question 1', posted=date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n         request.user = self.superuser\n-        with model_admin(Question, PKOrderingQuestionAdmin):\n-            response = AutocompleteJsonView.as_view(**self.as_view_args)(request)\n+\n+        response = CustomAutocompleteJsonView.as_view(admin_site=self.admin_site)(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n+    def test_serialize_result_without_extra_field(self):\n+        Question.objects.create(question='Basic Question 1', posted=date.today())\n+        Question.objects.create(question='Basic Question 2', posted=date.today())\n+\n+        request = self.factory.get(self.url, {'term': 'Basic', **self.opts})\n+        request.user = self.superuser\n+\n+        with model_admin(Question, ModelAdmin):\n+            response = AutocompleteJsonView.as_view(admin_site=self.admin_site)(request)\n+\n         self.assertEqual(response.status_code, 200)\n         data = json.loads(response.content.decode('utf-8'))\n         self.assertEqual(data, {\n-            'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[PAGINATOR_SIZE:]],\n+            'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()],\n             'pagination': {'more': False},\n         })\n \n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..b37e9c1 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,6 +426,59 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n+import functools\n+from django.test import TestCase\n+from django.utils.decorators import method_decorator, wraps\n+\n+class MethodDecoratorTests(TestCase):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+        \n+    def test_partial_function(self):\n+        \"\"\"Test method_decorator with a functools.partial function.\"\"\"\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return inner\n+        \n+        def original_func(x, y):\n+            \"\"\"Original function docstring.\"\"\"\n+            return x + y\n+\n+        partial_func = functools.partial(original_func, 1)\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return partial_func(2)\n+\n+        result = Test().method()\n+        self.assertEqual(result, 3)\n+        self.assertEqual(partial_func.__name__, 'original_func')\n+        self.assertEqual(partial_func.__module__, original_func.__module__)\n+        self.assertEqual(partial_func.__doc__, \"Original function docstring\")\n+\n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..ab41d80 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +343,24 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_hashable_in_dict(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        show_fields = {value_1: ['first_name', 'last_name']}\n+        self.assertIn(value_1, show_fields)\n+        self.assertEqual(show_fields[value_1], ['first_name', 'last_name'])\n+\n+    def test_hashable_in_set(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        set_values = {value_1}\n+        self.assertIn(value_1, set_values)\n+        value_2 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        self.assertIn(value_2, set_values)  # Same value should be in the set because of equal hash\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..73e9bac 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,7 +793,35 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n-    def test_rename_m2m_target_model(self):\n+    def test_rename_model_with_db_table_noop_schema_unchanged(self):\n+        app_label = 'test_rmwdbtn_schema'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"SELECT sql FROM sqlite_master WHERE type='table' AND name='rider';\")\n+            before_schema = cursor.fetchone()\n+\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"SELECT sql FROM sqlite_master WHERE type='table' AND name='rider';\")\n+            after_schema = cursor.fetchone()\n+\n+        self.assertEqual(before_schema, after_schema)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..93ee180 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -153,8 +153,23 @@ class MultiValueFieldTest(SimpleTestCase):\n             <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n             \"\"\",\n         )\n-\n-    def test_form_as_table_data(self):\n+    \n+    def test_multivaluefield_label_without_for_index(self):\n+        from django.forms import MultiWidget, TextInput\n+        from django.utils.html import escape\n+\n+        class CustomMultiWidget(MultiWidget):\n+            def __init__(self, attrs=None):\n+                widgets = [TextInput(), TextInput()]\n+                super().__init__(widgets, attrs)\n+\n+        widget = CustomMultiWidget()\n+        form_html = widget.render('multi', ['value1', 'value2'], attrs={'id': 'id_multi'})\n+        \n+        # We want to assert that the HTML for the labels does not contain incorrect `for` attribute endings like \"id_multi_0\" etc.\n+        self.assertNotIn('<label for=\"id_multi_0\">', escape(form_html))\n+        self.assertNotIn('<label for=\"id_multi_1\">', escape(form_html))\n+        # Instead, let's check it just contains the intended behavior, e.g., no 'for' attribute in labels or correct ones if exist.\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..6057bf8 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -90,6 +90,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://inv-.alid-.com',\n             'http://inv-.-alid.com',\n             '[a',\n+            # Incorrect issue case for ValueError\n+            '////]@N.AN',   # Invalid format that should raise ValidationError instead of ValueError\n+            '#@A.bO',       # Another invalid case to ensure consistent handling of malformed URLs\n             'http://[a',\n             # Non-string.\n             23,\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..34e696c 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -20,6 +20,26 @@ from .models import (\n \n \n class NonAggregateAnnotationTestCase(TestCase):\n+    \n+    def test_expression_wrapper_with_negated_empty_q(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_expression_wrapper_with_negated_empty_q_and_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    def test_aggregate_over_negated_empty_q_annotation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..2cee757 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,7 +1,9 @@\n+\n import json\n import random\n \n from django.conf import settings\n+from django.utils.safestring import SafeData, mark_safe\n from django.contrib.messages import constants\n from django.contrib.messages.storage.base import Message\n from django.contrib.messages.storage.cookie import (\n@@ -52,7 +54,30 @@ class CookieTests(BaseTests, SimpleTestCase):\n     def stored_messages_count(self, storage, response):\n         return stored_cookie_messages_count(storage, response)\n \n-    def test_get(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Testing that a Message's extra_tags are correctly preserved as an empty\n+        string when encoded and decoded, instead of being converted to None.\n+        \"\"\"\n+        storage = self.storage_class(self.get_request())\n+\n+        # Test with extra_tags as an empty string\n+        message = Message(constants.INFO, \"Test message with empty tags\", extra_tags=\"\")\n+        encoded_message = storage._encode(message)\n+        decoded_message = storage._decode(encoded_message)\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n+\n+        # Test with extra_tags as None\n+        message_none = Message(constants.INFO, \"Test message with None tags\", extra_tags=None)\n+        encoded_message_none = storage._encode(message_none)\n+        decoded_message_none = storage._decode(encoded_message_none)\n+        self.assertIsNone(decoded_message_none.extra_tags)\n+\n+        # Test with some tags\n+        message_some = Message(constants.INFO, \"Test message with some tags\", extra_tags=\"some tags\")\n+        encoded_message_some = storage._encode(message_some)\n+        decoded_message_some = storage._decode(encoded_message_some)\n+        self.assertEqual(decoded_message_some.extra_tags, \"some tags\")\n         storage = self.storage_class(self.get_request())\n         # Set initial data.\n         example_messages = ['test', 'me']\n",
  "django__django-15388": "",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..6cbd485 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,13 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that was_modified_since handles an empty If-Modified-Since header.\n+        This ensures no exception is raised and the correct behavior is maintained.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..4a694bb 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -8,6 +9,7 @@ from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management.utils import (\n     find_command,\n     get_random_secret_key,\n@@ -411,7 +413,33 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_command_help_formatting(self):\n+        \"\"\"\n+        Test that command help formatting keeps line breaks correctly.\n+        \"\"\"\n+        class TestCommand(BaseCommand):\n+            help = (\n+                'Import a contract from tzkt.\\n'\n+                'Example usage:\\n'\n+                '    ./manage.py tzkt_import \\'Tezos Mainnet\\' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe'\n+            )\n+\n+        command = TestCommand()\n+        parser = command.create_parser('manage.py', 'tzkt_import', formatter_class=ArgumentDefaultsHelpFormatter)\n+        help_output = parser.format_help()\n+\n+        expected_help = (\n+            'usage: manage.py tzkt_import [-h]\\n'\n+            '\\n'\n+            'Import a contract from tzkt.\\n'\n+            'Example usage:\\n'\n+            '    ./manage.py tzkt_import \\'Tezos Mainnet\\' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n'\n+            '\\n'\n+            'optional arguments:\\n'\n+            '  -h, --help            show this help message and exit\\n'\n+        )\n+\n+        self.assertIn(expected_help, help_output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..5e3a286 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,5 +1,8 @@\n+\n import os\n from datetime import datetime\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n",
  "django__django-15790": "",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..c14fb14 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,8 +398,24 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n-\n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n+from django.test import TestCase\n+from proxy_models.models import ProxyCustomModel, AnotherModel\n+\n+class ProxyModelSelectRelatedOnlyTests(TestCase):\n+    def test_select_related_only_with_proxy_model(self):\n+        # Set up initial data\n+        custom = ProxyCustomModel.objects.create(name=\"SampleName\")\n+        AnotherModel.objects.create(custom=custom)\n+        \n+        # Execute the problematic query\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        \n+        # Attempt to fetch the results, expecting no exception\n+        try:\n+            result = list(queryset)\n+            self.assertIsNotNone(result)\n+        except ValueError as e:\n+            self.fail(f\"The test failed due to an unexpected ValueError: {str(e)}\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..8bc6dd6 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,6 +152,14 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        # Test that additional parameters are properly passed before dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\"NAME\": \"dbname\"},\n+                [\"-c\", \"select * from some_table;\"]\n+            ),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +191,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..171ae06 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,16 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        # Test with an empty string, should return an empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        # Test with None, expecting it to return \"None\" (depending on how we want to handle None)\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_malformed_numbers(self):\n+        # Test with malformed number strings\n+        self.assertEqual(nformat(\"not_a_number\", \".\"), \"not_a_number\")\n+        self.assertEqual(nformat(\"1234-\", \".\"), \"1234-\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..39e486c 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -892,6 +893,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_link_with_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..4c80280 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,32 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.test import TestCase, override_settings\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.test.client import Client\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTests(TestCase):\n+    client = Client()\n+\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response.headers)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode().strip(), expected_content_index.strip())\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..bb33550 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,9 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock, TestCase\n+from django.core.cache import cache\n import io\n import os\n import pickle\n@@ -1755,6 +1758,41 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n+    def test_has_key_race_handling(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+    \n+    def test_has_key_with_expired_file(self):\n+        # Simulating a scenario where the file exists but is expired\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        cache_file = cache._key_to_file(\"key\")\n+\n+        # Manually create and expire the file\n+        with open(cache_file, \"wb\") as fh:\n+            fh.write(b\"test\")\n+        \n+        with mock.patch.object(cache, '_is_expired', return_value=True):\n+            self.assertIs(cache.has_key(\"key\"), False)\n+    \n+    def test_has_key_with_file_deleted_during_check(self):\n+        # Simulate a race condition where the file is deleted between exists() and open()\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        cache_file = cache._key_to_file(\"key\")\n+\n+        with open(cache_file, \"wb\") as fh:\n+            fh.write(b\"test\")\n+\n+        with mock.patch(\"os.path.exists\", side_effect=[True, False]):\n+            self.assertIs(cache.has_key(\"key\"), False)\n+\n+    def test_has_key_unexpected_exception(self):\n+        # Handle unexpected exceptions gracefully\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=IOError(\"Unexpected error\")):\n+            self.assertIs(cache.has_key(\"key\"), False)\n+\n     def test_empty_cache_file_considered_expired(self):\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..ae41a51 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -8,6 +9,8 @@ from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from .admin import ArticleAdmin, site\n from .models import Article, Question\n from .tests import AdminViewBasicTestCase\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..63f551f 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,4 +1,5 @@\n-from django.template.defaultfilters import join\n+\n+from django.template.defaultfilters import join, escape\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n \n@@ -26,7 +27,12 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ var_list|join:var_joiner }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        var_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        var_joiner = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off\", {\"var_list\": var_list, \"var_joiner\": var_joiner})\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +84,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..d28dfa7 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -779,7 +779,41 @@ class BulkCreateTests(TestCase):\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n-    def test_update_conflicts_unique_fields(self):\n+    @skipUnlessDBFeature(\"supports_update_conflicts\", \"can_return_rows_from_bulk_insert\")\n+    def test_update_conflicts_returning_ids(self):\n+        UpsertConflict.objects.bulk_create(\n+            [\n+                UpsertConflict(number=1, name=\"Alice\"),\n+                UpsertConflict(number=2, name=\"Bob\"),\n+            ]\n+        )\n+\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            UpsertConflict(number=1, name=\"Charlie\"),\n+            UpsertConflict(number=2, name=\"Dan\"),\n+            UpsertConflict(number=3, name=\"Eve\"),\n+        ]\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"number\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        \n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n+        self.assertCountEqual(\n+            UpsertConflict.objects.values(\"number\", \"name\"),\n+            [\n+                {\"number\": 1, \"name\": \"Charlie\"},\n+                {\"number\": 2, \"name\": \"Dan\"},\n+                {\"number\": 3, \"name\": \"Eve\"},\n+            ],\n+        )\n         self._test_update_conflicts(unique_fields=[\"number\"])\n \n     @skipUnlessDBFeature(\"supports_update_conflicts\")\n@@ -816,4 +850,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..591da72 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -455,8 +455,28 @@ class WriterTests(SimpleTestCase):\n             \"(datetime.date(1969, 11, 19), 'Second date')], \"\n             \"default=datetime.date(1969, 11, 19))\",\n         )\n-\n-    def test_serialize_nested_class(self):\n+    \n+    def test_serialize_nested_class_method_as_default(self):\n+        class SampleModel(models.Model):\n+            class SampleChoices(models.TextChoices):\n+                OPTION_A = \"A\", \"Option A\"\n+                OPTION_B = \"B\", \"Option B\"\n+                \n+                @classmethod\n+                def default(cls):\n+                    return [cls.OPTION_A]\n+\n+            choices_field = ArrayField(\n+                models.CharField(choices=SampleChoices.choices, max_length=200),\n+                default=SampleModel.SampleChoices.default,\n+                size=None,\n+            )\n+\n+        target = (\n+            \"migrations.test_writer.WriterTests.test_serialize_nested_class_method_as_default.<locals>.SampleModel.SampleChoices.default\",\n+            {\"import migrations.test_writer\"},\n+        )\n+        self.assertSerializedResultEqual(SampleModel.SampleChoices.default, target)\n         for nested_cls in [self.NestedEnum, self.NestedChoices]:\n             cls_name = nested_cls.__name__\n             with self.subTest(cls_name):\n@@ -1032,4 +1052,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..95e01b5 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1120,6 +1120,28 @@ def test_range_slider(orientation):\n     assert_allclose(slider.val, [0.1, 0.34])\n \n \n+@pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\n+def test_range_slider_initialization(orientation):\n+    fig, ax = plt.subplots()\n+    # Define initial values\n+    initial_values = [0.25, 0.75]\n+    # Create the RangeSlider with valinit\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Test Slider\", valmin=0.0, valmax=1.0,\n+        valinit=initial_values, orientation=orientation\n+    )\n+\n+    # Test if the slider values are initialized correctly\n+    assert_allclose(slider.val, initial_values)\n+\n+    # Also verify the positional aspect of the handles on the slider\n+    if orientation == \"vertical\":\n+        handle_positions = [pos[1] for pos in slider._handles]\n+    else:\n+        handle_positions = [pos[0] for pos in slider._handles]\n+\n+    assert_allclose(handle_positions, initial_values)\n+\n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n     \"\"\"\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..be2f11c 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,10 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+import pytest\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n@@ -508,7 +512,18 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+def test_get_backend_rc_context_figures():\n+    # Ensure the matplotlib Gcf retains figures created under rc_context \n+    # when get_backend() is called.\n+\n+    # No initial figures are created.\n+    with rc_context():\n+        fig2 = plt.figure()\n+        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+        get_backend()\n+        after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, '\\n' + before + '\\n' + after\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..66276c9 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,7 +21,18 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible(fig_test, fig_ref):\n+    # Test figure with the 3d subplot set to visible\n+    ax = fig_ref.add_subplot(projection='3d')\n+    ax.scatter(1, 1, 1)  # Add some data\n+    \n+    # Test figure with the 3d subplot set to invisible\n+    ax = fig_test.add_subplot(projection='3d')\n+    ax.scatter(1, 1, 1)  # Add some data\n+    ax.set_visible(False)\n+\n+    # At this point, fig_test should have an invisible 3d axis, unlike fig_ref\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..9ccf6df 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1785,7 +1785,54 @@ def test_text_3d(fig_test, fig_ref):\n     ax.add_artist(t3d)\n     assert t3d.get_position_3d() == (0.5, 0.5, 1)\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from mpl_toolkits.mplot3d import Axes3D\n+\n+def test_plot_3d_lines_with_integers():\n+    # Test plotting with integer values\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.plot([0, 1], [0, 1], [0, 1], 'r-')\n+    plt.close(fig)\n+\n+def test_plot_3d_lines_with_float_arrays():\n+    # Test plotting with float arrays\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    x = np.array([0.0, 1.0])\n+    y = np.array([0.0, 1.0])\n+    z = np.array([0.0, 1.0])\n+    ax.plot(x, y, z, 'g-')\n+    plt.close(fig)\n+\n+def test_plot_3d_lines_with_numpy_singleton():\n+    # Test plotting with numpy singleton dimension\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.plot(np.array([[0]]), np.array([[1]]), np.array([[2]]), 'b-')\n+    plt.close(fig)\n+\n+def test_plot_3d_lines_changing_data_types():\n+    # Test changing input data types between runs\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+\n+    # Use integer lists initially\n+    xs = [0, 1]\n+    ys = [0, 1]\n+    zs = [0, 1]\n+    ax.plot(xs, ys, zs, 'r-')\n+\n+    # Use numpy arrays thereafter\n+    xs = np.array([0, 1])\n+    ys = np.array([0, 1])\n+    zs = np.array([0, 1])\n+    ax.plot(xs, ys, zs, 'b-')\n+\n+    plt.close(fig)\n \n+# Ensures no residual state issues between different runs by checking kernel issues\n @check_figures_equal(extensions=[\"png\"])\n def test_pathpatch_3d(fig_test, fig_ref):\n     ax = fig_ref.add_subplot(projection=\"3d\")\n",
  "matplotlib__matplotlib-23913": "",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..5805c9a 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -252,7 +252,39 @@ def test_linedash():\n \n     buf = io.BytesIO()\n     fig.savefig(buf, format=\"ps\")\n+    assert buf.tell() > 0\n \n+def test_multiline_text_with_empty_line():\n+    # Test for multi-line text annotation with leading empty line\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='\\nMultiline text label with leading empty line', xy=(0.5, 0.5))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n+\n+def test_multiline_text_with_trailing_empty_line():\n+    # Test for multi-line text annotation with trailing empty line\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='Text label with trailing empty line\\n', xy=(0.5, 0.5))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n+\n+def test_multiline_text_with_internal_empty_lines():\n+    # Test for multi-line text annotation with empty lines in between\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='Line 1\\n\\nLine 3', xy=(0.5, 0.5))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n+    buf.seek(0)\n     assert buf.tell() > 0\n \n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..1c221b2 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,26 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+@pytest.mark.parametrize('constrained_layout_setting', [False, None])\n+def test_subplot_adjust_no_warning_when_constrained_layout_false(constrained_layout_setting):\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import io\n+    import warnings\n+\n+    a = np.linspace(0,2*np.pi,100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        \n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained_layout_setting)\n+        ax[0].plot(a, b)\n+        ax[1].plot(a, c)\n+        plt.subplots_adjust(wspace=0)\n+\n+        # Check that no warnings of the specific type are generated\n+        assert not any('layout engine that is incompatible' in str(warning.message) for warning in w)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..b9d6902 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -30,6 +30,23 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+import numpy as np\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_warnings(dtype):\n+    \"\"\"\n+    Test that no DeprecationWarnings are raised when using different dtypes with colormaps.\n+    \"\"\"\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        assert_array_equal(cm(dtype(0)), cm(0))\n+    # Ensure no warnings of any kind were raised\n+    assert len(record) == 0\n+\n def test_resampled():\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..a4e96d2 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -105,8 +106,29 @@ def test_complete(fig_test, fig_ref):\n \n     plt.close(loaded)\n \n+def test_pickle_figure_with_draggable_legend():\n+    import pickletools\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend(draggable=True)\n \n-def _pickle_load_subprocess():\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Check that 'FigureCanvasAgg' is not in the pickle stream\n+    assert 'FigureCanvasAgg' not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Attempt to unpickle the figure to ensure it's correctly pickled\n+    loaded = pickle.loads(pkl)\n+    loaded.canvas.draw()\n+\n+    plt.close(loaded)\n     import os\n     import pickle\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..4ba9c1c 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,34 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickle\n+import matplotlib.pyplot as plt\n+from io import BytesIO\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    # Reproduce the issue with aligning labels and pickling\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels, which previously caused pickling issues\n+    fig.align_labels()\n+\n+    # Try pickling the figure\n+    pkl = BytesIO()\n+    try:\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        assert True, \"Figure pickled successfully after aligning labels.\"\n+    except TypeError as e:\n+        assert False, f\"Pickle failed with TypeError: {e}\"\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..1d99d97 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -445,8 +445,33 @@ def test_paddedbox():\n     pb = PaddedBox(ta, pad=10, patch_attrs={'facecolor': 'b'})\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mplcursors\n+import pytest\n+\n \n-    ta = TextArea(\"foobar\")\n+def test_mplcursor_matplotlib_interaction():\n+    # This test is created to expose the issue with mplcursor and matplotlib 3.7.1.\n+    try:\n+        x = np.arange(1, 11)\n+        y1 = x\n+\n+        plt.scatter(x, y1)\n+\n+        cursor = mplcursors.cursor()\n+        @cursor.connect(\"add\")\n+        def on_add(sel):\n+            pass  # Simulate a selection without triggering errors\n+\n+        # This simulates a selection which should not raise an error with patch\n+        fig = plt.gcf()\n+        for _ in range(3):  # Simulate multiple clicks\n+            fig.canvas.callbacks.process('pick_event', None)\n+        \n+        # If there was an AttributeError, the test should catch it\n+    except AttributeError as e:\n+        pytest.fail(f\"A test failed due to an AttributeError: {e}\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "",
  "psf__requests-3362": "",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..cfd9c7c 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -731,18 +731,49 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             })\n \n             return args\n-\n-        for service in SERVICES:\n-            url = service('headers')\n-\n-            response = get(url=url,\n-                hooks={\n-                    'args': [add_foo_header, add_bar_header]\n-                }\n-            )\n-\n-            assert 'foo' in response.text\n-            assert 'bar' in response.text\n+import requests\n+from requests.models import Request\n+\n+def test_multiple_hooks_registration():\n+    def add_foo_header(args):\n+        if not args.get('headers'):\n+            args['headers'] = {}\n+        args['headers'].update({'X-Foo': 'foo'})\n+        return args\n+\n+    def add_bar_header(args):\n+        if not args.get('headers'):\n+            args['headers'] = {}\n+        args['headers'].update({'X-Bar': 'bar'})\n+        return args\n+        \n+    hooks = [add_foo_header, add_bar_header]\n+    \n+    # Test hooks via register_hook()\n+    r = Request()\n+    r.register_hook('args', hooks)\n+    \n+    assert len(r.hooks['args']) == 2\n+    assert callable(r.hooks['args'][0])\n+    assert callable(r.hooks['args'][1])\n+    \n+    # Test direct hooks initialization\n+    r2 = Request(hooks={'args': hooks})\n+    assert len(r2.hooks['args']) == 2\n+    assert callable(r2.hooks['args'][0])\n+    assert callable(r2.hooks['args'][1])\n+\n+def test_single_hook_registration():\n+    def add_foo_header(args):\n+        if not args.get('headers'):\n+            args['headers'] = {}\n+        args['headers'].update({'X-Foo': 'foo'})\n+        return args\n+\n+    # Test hooks with single function\n+    r = Request(hooks={'args': add_foo_header})\n+    assert len(r.hooks['args']) == 1\n+    assert callable(r.hooks['args'][0])\n \n     def test_session_persistent_cookies(self):\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..0503509 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -71,6 +71,14 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: unknown-option=yes\" in output.out\n \n \n+def test_unrecognized_option_does_not_print_traceback(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure no traceback is printed for an unrecognized option.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err\n+\n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n     with pytest.raises(_UnrecognizedOptionError):\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..b49e9ac 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,26 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_option(self):\n+        \"\"\"Test that the ignore-paths option works correctly when using recursive option.\"\"\"\n+        with _test_sys_path():\n+            # Adjust sys.path to avoid interference from pytest's modifications\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Set the working directory to simulate the environment\n+                os.chdir(join(HERE, \"regrtest_data\", \"src\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^gen/.*\",\n+                    ],\n+                    code=0,\n+                )\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..056d100 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,64 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_identically_named_module_with_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint succeeds when a directory contains a module with the same name.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create a directory 'x' with a module 'x.py' inside it\n+        create_files([\"x/x.py\", \"x/y.py\"])\n+        \n+        # Verify linting does not fail\n+        linter.check([\"x\"])\n+        \n+    assert not linter.stats.by_msg\n+\n+def test_lint_issue3819_additional_scenario(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test additional scenarios for the issue to ensure comprehensive coverage.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+        \n+        assert 'parse-error' not in linter.stats.by_msg, \"Should not have parse error for missing __init__.py\"\n+\n+        create_files([\"a/__init__.py\"])  # Adding init.py should not change outcome\n+        linter.check([\"a\"])\n+        \n+    assert not linter.stats.by_msg\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_identically_named_module_with_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint succeeds when a directory contains a module with the same name.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create a directory 'x' with a module 'x.py' inside it\n+        create_files([\"x/x.py\", \"x/y.py\"])\n+        \n+        # Verify linting does not fail\n+        linter.check([\"x\"])\n+        \n+    assert not linter.stats.by_msg\n+\n+def test_lint_issue3819_additional_scenario(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test additional scenarios for the issue to ensure comprehensive coverage.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+        \n+        assert 'parse-error' not in linter.stats.by_msg, \"Should not have parse error for missing __init__.py\"\n+\n+        create_files([\"a/__init__.py\"])  # Adding init.py should not change outcome\n+        linter.check([\"a\"])\n+        \n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..6bc6917 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,7 +114,21 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n-def test_deprecation_set_output(recwarn):\n+def test_custom_braces_in_template(linter: PyLinter) -> None:\n+    \"\"\"Test handling custom braces in message template with Pylint.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"test_mod\")\n+    \n+    # Adding messages to test the custom template\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E0401\", line=2, args=(3, 4))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/acceptance_test.py b/testing/acceptance_test.py\nindex 0cc5057..63455a0 100644\n--- a/testing/acceptance_test.py\n+++ b/testing/acceptance_test.py\n@@ -1306,6 +1306,78 @@ def test_no_brokenpipeerror_message(pytester: Pytester) -> None:\n     popen.stderr.close()\n \n \n+from pathlib import Path\n+import sys\n+import pytest\n+from pytest import Pytester\n+import importlib\n+\n+def test_doctest_and_normal_imports_with_importlib(pytester: Pytester) -> None:\n+    \"\"\"\n+    Regression test for #10811: previously import_path with ImportMode.importlib would\n+    not return a module if already in sys.modules, resulting in modules being imported\n+    multiple times, which causes problems with modules that have import side effects.\n+    \"\"\"\n+    # Uses the exact reproducer from #10811, given it is very minimal\n+    # and illustrates the problem well.\n+    pytester.makepyfile(\n+        **{\n+            \"pmxbot/commands.py\": \"from . import logging\",\n+            \"pmxbot/logging.py\": \"\",\n+            \"tests/__init__.py\": \"\",\n+            \"tests/test_commands.py\": \"\"\"\n+                import importlib\n+                from pmxbot import logging\n+\n+                class TestCommands:\n+                    def test_boo(self):\n+                        assert importlib.import_module('pmxbot.logging') is logging\n+                \"\"\",\n+        }\n+    )\n+    pytester.makeini(\n+        \"\"\"\n+        [pytest]\n+        addopts =\n+            --doctest-modules\n+            --import-mode importlib\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_subprocess()\n+    result.stdout.fnmatch_lines(\"*1 passed*\")\n+\n+def test_importing_same_module_twice(pytester: Pytester) -> None:\n+    \"\"\"\n+    Ensure that importing the same module twice does not lead to different instances\n+    when using importlib, which should resolve the issue of having two different 'pmxbot.logging'.\n+    \"\"\"\n+    pytester.makepyfile(\n+        **{\n+            \"pmxbot/logging.py\": \"class Logger:\\n    store = None\\n\",\n+            \"tests/__init__.py\": \"\",\n+            \"tests/test_re_import.py\": \"\"\"\n+                import sys\n+                import importlib\n+                from pmxbot import logging\n+\n+                def test_logger_re_import():\n+                    logging.Logger.store = 'test value'\n+                    mod = importlib.import_module('pmxbot.logging')\n+                    assert mod is logging\n+                    assert mod.Logger.store == 'test value'\n+                \"\"\",\n+        }\n+    )\n+    pytester.makeini(\n+        \"\"\"\n+        [pytest]\n+        addopts =\n+            --import-mode importlib\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_subprocess()\n+    result.stdout.fnmatch_lines(\"*1 passed*\")\n+\n def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n@@ -1314,4 +1386,4 @@ def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     \"\"\"\n     )\n     res = pytester.runpytest()\n-    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n+    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\nindex 82f0458..cc463f7 100644\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -256,7 +256,37 @@ def test_log_cli_enabled_disabled(testdir, enabled):\n         assert msg not in result.stdout.str()\n \n \n-def test_log_cli_default_level(testdir):\n+def test_log_cli_new_format(testdir):\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        logger = logging.getLogger(\"sample_module\")\n+        logger.setLevel(logging.DEBUG)\n+\n+        def test_logging_format():\n+            logger.debug(\"Debug message\")\n+            logger.info(\"Info message\")\n+            logger.warning(\"Warning message\")\n+            logger.error(\"Error message\")\n+            logger.critical(\"Critical message\")\n+        \"\"\"\n+    )\n+\n+    result = testdir.runpytest(\"-o\", \"log_cli_level=DEBUG\", \"--log-format=%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\")\n+\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"test_logging_format.py::test_logging_format \",\n+            \"*-- live log call --*\",\n+            \"DEBUG    sample_module:test_logging_format.py:6 Debug message\",\n+            \"INFO     sample_module:test_logging_format.py:7 Info message\",\n+            \"WARNING  sample_module:test_logging_format.py:8 Warning message\",\n+            \"ERROR    sample_module:test_logging_format.py:9 Error message\",\n+            \"CRITICAL sample_module:test_logging_format.py:10 Critical message\",\n+            \"PASSED*\",\n+        ]\n+    )\n     # Default log file level\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..af5243b 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -299,6 +299,29 @@ def callequal(left, right, verbose=False):\n     config.verbose = verbose\n     return plugin.pytest_assertrepr_compare(config, \"==\", left, right)\n \n+def test_bytes_empty_vs_nonempty():\n+    \"\"\"Test handling comparison between empty and non-empty byte strings.\"\"\"\n+    diff = callequal(b\"\", b\"42\")\n+    assert diff == [\n+        \"b'' == b'42'\",\n+        \"Right contains more items, first extra item: 52\",\n+        \"Full diff:\",\n+        \"- b''\",\n+        \"+ b'42'\",\n+        \"?  ++\"\n+    ]\n+\n+def test_bytes_empty_vs_single_byte():\n+    \"\"\"Test handling comparison between empty and single-byte strings.\"\"\"\n+    diff = callequal(b\"\", b\"1\")\n+    assert diff == [\n+        \"b'' == b'1'\",\n+        \"Right contains more items, first extra item: 49\",\n+        \"Full diff:\",\n+        \"- b''\",\n+        \"+ b'1'\",\n+        \"?  +\"\n+    ]\n \n class TestAssert_reprcompare:\n     def test_different_types(self):\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..94d78c1 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,9 +1,12 @@\n+\n import os\n from xml.dom import minidom\n \n import py\n \n import pytest\n+import platform\n+from datetime import datetime\n from _pytest.junitxml import LogXML\n from _pytest.reports import BaseReport\n \n@@ -157,7 +160,29 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..781f02a 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -68,6 +68,32 @@ def test_make_hook_recorder(testdir) -> None:\n     recorder.unregister()\n     recorder.clear()\n     recorder.hook.pytest_runtest_logreport(report=rep3)\n+\n+\n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test that failure paths reflect the original path of the test module\n+    even when the working directory is changed in a fixture, to ensure\n+    editors can correctly locate the file (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile('''\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+    ''')\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p.basename) + \":*: AssertionError\", \"*1 failed in *\"])\n     pytest.raises(ValueError, recorder.getfailures)\n \n \n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..bbe409b 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,6 +1,6 @@\n import os\n import sys\n-from unittest import mock\n+import os\n \n import pytest\n from _pytest.config import ExitCode\n@@ -41,8 +41,37 @@ class TestMark:\n         with pytest.raises(AttributeError):\n             mark._some_name\n \n+def test_reevaluate_dynamic_expr(testdir):\n+    \"\"\"Test to check that the skipif condition is re-evaluated with the correct globals context.\"\"\"\n+\n+    py_file1 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr1=\"\"\"\n+        import pytest\n+\n+        skip = True\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_skip():\n+            assert False  # This test should be skipped\n+    \"\"\"\n+    )\n+\n+    py_file2 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr2=\"\"\"\n+        import pytest\n+\n+        skip = False\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_not_skip():\n+            assert True  # This test should run and pass\n+    \"\"\"\n+    )\n \n-def test_marked_class_run_twice(testdir):\n+    file_name1 = os.path.basename(py_file1.strpath)\n+    file_name2 = os.path.basename(py_file2.strpath)\n+    reprec = testdir.inline_run(file_name1, file_name2)\n+    reprec.assertoutcome(passed=1, skipped=1)\n     \"\"\"Test fails file is run twice that contains marked class.\n     See issue#683.\n     \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..a287543 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -153,6 +153,23 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n+class TestSkipRunXFail:\n+    @pytest.mark.parametrize(\"options, expected_output\", [\n+        ([\"-rs\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+        ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+    ])\n+    def test_skip_location_reporting(self, testdir, options, expected_output):\n+        test_sample = \"\"\"\n+            import pytest\n+\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+        \"\"\"\n+        testdir.makepyfile(test_sample)\n+        result = testdir.runpytest(*options)\n+        result.stdout.fnmatch_lines(expected_output)\n+\n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..ffb15f6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -382,7 +383,35 @@ class TestXFail:\n         \"\"\"\n         )\n \n-    def xtest_dynamic_xfail_set_during_setup(self, testdir):\n+    def test_dynamic_xfail_set_during_func_execution(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"runtime xfail\"))\n+                assert 0\n+            def test_that(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"runtime xfail\", strict=True))\n+                pass\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*1 xfailed*\", \"*XPASS*test_that*\", \"*1 xpassed*\"])\n+\n+    def test_dynamic_xfail_in_fixture(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.fixture\n+            def setup_fixture(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"in fixture xfail\"))\n+\n+            def test_using_fixture(setup_fixture):\n+                assert 0\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.stdout.fnmatch_lines([\"*XFAIL*test_using_fixture*\", \"*1 xfailed*\"])\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..cdd0649 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -9,6 +10,7 @@ from typing import List\n import attr\n \n import pytest\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest import pathlib\n from _pytest.config import Config\n from _pytest.pathlib import cleanup_numbered_dir\n@@ -441,7 +443,43 @@ def test_basetemp_with_read_only_files(pytester: Pytester) -> None:\n     \"\"\"\n     )\n     result = pytester.runpytest(\"--basetemp=tmp\")\n+\n+def test_tmp_path_factory_handles_invalid_dir_characters(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+\n+def test_tmp_dir_factory_with_invalid_user_character(tmpdir_factory, monkeypatch: MonkeyPatch):\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"invalid/\\\\username\")\n+    tmpdir_factory._basetemp = None\n+    tmpdir_factory._given_basetemp = None\n+    path = tmpdir_factory.mktemp(\"test\")\n+    assert path is not None  # At this point, we are mainly ensuring no error on temp dir creation\n+    assert \"pytest-of-unknown\" in str(path)\n     assert result.ret == 0\n     # running a second time and ensure we don't crash\n     result = pytester.runpytest(\"--basetemp=tmp\")\n+\n+def test_tmp_path_factory_handles_invalid_dir_characters(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+\n+def test_tmp_dir_factory_with_invalid_user_character(tmpdir_factory, monkeypatch: MonkeyPatch):\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"invalid/\\\\username\")\n+    tmpdir_factory._basetemp = None\n+    tmpdir_factory._given_basetemp = None\n+    path = tmpdir_factory.mktemp(\"test\")\n+    assert path is not None  # At this point, we are mainly ensuring no error on temp dir creation\n+    assert \"pytest-of-unknown\" in str(path)\n     assert result.ret == 0\n",
  "scikit-learn__scikit-learn-10297": "",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..4b1007c 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -21,8 +21,28 @@ from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n PRIOR_TYPE = ['dirichlet_process', 'dirichlet_distribution']\n \n-\n-def test_log_dirichlet_norm():\n+def test_bayesian_mixture_labels_and_fit_predict():\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng)\n+    \n+    for prior_type in PRIOR_TYPE:\n+        for covar_type in COVARIANCE_TYPE:\n+            X = rand_data.X[covar_type]\n+            \n+            bgmm = BayesianGaussianMixture(\n+                n_components=rand_data.n_components,\n+                random_state=rng,\n+                weight_concentration_prior_type=prior_type,\n+                covariance_type=covar_type\n+            )\n+\n+            # Fit the model and check for labels_\n+            bgmm.fit(X)\n+            assert hasattr(bgmm, \"labels_\"), \"BayesianGaussianMixture should have a 'labels_' attribute.\"\n+            \n+            # Check if fit_predict(X) is equivalent to fit(X).predict(X)\n+            labels = bgmm.fit_predict(X)\n+            assert_array_equal(labels, bgmm.predict(X))\n     rng = np.random.RandomState(0)\n \n     weight_concentration = rng.rand(2)\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..c2af4e9 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,11 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+import numpy as np\n+import pytest\n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n@@ -273,6 +278,22 @@ def test_one_hot_encoder_no_categorical_features():\n     assert enc.categories_ == []\n \n \n+\n+def test_one_hot_encoder_handle_unknown_strings_longer():\n+    X = np.array(['long_category_name', 'short', 'medium']).reshape((-1, 1))\n+    X2 = np.array(['unknown', 'short']).reshape((-1, 1))\n+\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_transformed = oh.transform(X2).toarray()\n+\n+    # Test that the 'unknown' category results in zero vector and 'short' results correctly\n+    expected = np.array([[0., 0., 0.], [0., 1., 0.]])\n+    assert_array_equal(X2_transformed, expected)\n+\n+    # Ensure transformed data was not modified in place\n+    assert_array_equal(X2, np.array(['unknown', 'short']).reshape((-1, 1)))\n+\n @pytest.mark.parametrize(\"output_dtype\", [np.int32, np.float32, np.float64])\n @pytest.mark.parametrize(\"input_dtype\", [np.int32, np.float32, np.float64])\n def test_one_hot_encoder_dtype(input_dtype, output_dtype):\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex 5f947fe..5f96e65 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -450,8 +450,17 @@ def test_bayesian_mixture_fit_predict(seed, max_iter, tol):\n         Y_pred2 = bgmm2.fit_predict(X)\n         assert_array_equal(Y_pred1, Y_pred2)\n \n-\n-def test_bayesian_mixture_predict_predict_proba():\n+from sklearn.mixture import BayesianGaussianMixture\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+\n+def test_bayesian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = BayesianGaussianMixture(n_components=5, n_init=10, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # this is the same test as test_gaussian_mixture_predict_predict_proba()\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..6b2e5c1 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,8 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n-\n-from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n-                                   assert_equal, assert_not_equal,\n-                                   assert_raises)\n+from sklearn.utils.testing import assert_allclose\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -13,8 +11,19 @@ from sklearn.pipeline import Pipeline\n from sklearn.model_selection import GridSearchCV\n from sklearn.metrics.pairwise import rbf_kernel\n \n+def test_kernel_pca_sign_invariance():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+\n+    for eigen_solver in ['auto', 'arpack', 'dense']:\n+        kpca = KernelPCA(n_components=7, kernel='rbf', eigen_solver=eigen_solver, random_state=0)\n+        X_transformed = kpca.fit_transform(X)\n+\n+        # Run fit_transform again and check if the sign of components can flip\n+        X_transformed_2 = kpca.fit_transform(X)\n \n-def test_kernel_pca():\n+        # Check if the absolute values are close, ignoring signs\n+        assert_allclose(np.abs(X_transformed_2), np.abs(X_transformed))\n     rng = np.random.RandomState(0)\n     X_fit = rng.random_sample((5, 4))\n     X_pred = rng.random_sample((2, 4))\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..34a6256 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,8 +8,9 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n-\n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..b32d81b 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,32 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+\n+def test_mutual_info_discrete_features_handling():\n+    X = np.array([[0, 0, 1],\n+                  [1, 0, 0],\n+                  [1, 1, 0],\n+                  [0, 1, 1]])\n+    y = np.array([0, 1, 1, 0])\n+\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test with list of indices\n+        mi_indices = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        \n+        # Test with boolean mask\n+        mi_bool_mask = mutual_info(X, y, discrete_features=[True, False, True],\n+                                   random_state=0)\n+\n+        assert_array_equal(mi_indices, mi_bool_mask)\n+\n+        # Test with invalid index\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[3])\n+        \n+        # Test with invalid boolean mask length\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False])\n+\n+        # Test with 'auto' setting, expecting no error\n+        mi_auto = mutual_info(X, y, discrete_features='auto', random_state=0)\n+        assert mi_auto is not None  # Just ensure it runs without errors\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..c7b90c9 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +217,18 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_array_param():\n+    \"\"\"Test that array parameters don't throw an error in repr with print_changed_only=True.\"\"\"\n+    set_config(print_changed_only=True)\n+    # Make sure the repr does not throw an error\n+    try:\n+        repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        print(\"repr output:\", repr_output)  # This line is just for demonstration; can be removed.\n+    except Exception as e:\n+        assert False, f\"repr raised an exception: {e}\"\n+    finally:\n+        set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..4d5121b 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,9 +1,12 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n@@ -499,6 +502,29 @@ def test_transform():\n         flatten_transform=False).fit(X, y)\n \n     assert_array_equal(eclf1.transform(X).shape, (4, 6))\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(datasets.load_iris(return_X_y=True), \n+      VotingClassifier([('lr', LogisticRegression()), ('rf', RandomForestClassifier())])),\n+     (datasets.make_regression(n_samples=100, n_features=4, noise=0.1), \n+      VotingRegressor([('lr', LinearRegression()), ('rf', RandomForestRegressor())]))]\n+)\n+def test_none_estimator_with_weights_additional_cases(X_y, voter):\n+    X, y = X_y\n+    # Fit with valid estimators and sample weights\n+    voter.fit(X, y, sample_weight=np.ones(len(y)))\n+    # Set multiple estimators to None and re-fit\n+    voter.set_params(lr=None, rf=None)\n+    voter.fit(X, y, sample_weight=np.ones(len(y)))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape[0] == X.shape[0]\n+\n+    # Set parameters back to originals and re-fit\n+    voter.set_params(lr=LogisticRegression(), rf=RandomForestClassifier())\n+    voter.fit(X, y, sample_weight=np.ones(len(y)))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape[0] == X.shape[0]\n     assert_array_equal(eclf2.transform(X).shape, (4, 6))\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..1fa3346 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,34 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+import pytest\n+import numpy as np\n+from sklearn.model_selection import GridSearchCV\n+from sklearn.pipeline import Pipeline\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis, KNeighborsClassifier\n \n-def test_transformation_dimensions():\n+def test_nca_with_grid_search():\n+    # Test that NCA works with GridSearchCV with integer and float types\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+                \n+    params = {'nca__tol': [0.1, 0.5, 1.0],  # using 1.0 to ensure it's a float\n+              'nca__n_components': np.arange(1, 10)}  # using numpy int types\n+          \n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    \n+    try:\n+        gs.fit(X, y)\n+        passed = True\n+    except TypeError:\n+        passed = False\n+\n+    assert passed, \"NCA should accept float and numpy int types in GridSearchCV\"\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..f6ea7ff 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,6 +679,39 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_with_no_support_vectors():\n+    # Test on sparse data with no support vectors\n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0.0, 0.0])\n+    model = svm.SVR(kernel='linear')\n+    try:\n+        model.fit(X_train, y_train)\n+        assert True\n+    except ZeroDivisionError:\n+        assert False\n+\n+def test_sparse_fit_with_regular_data():\n+    # Test on regular sparse data to ensure it works without issue\n+    X_train = sparse.csr_matrix([[1, 0, 2, 0],\n+                                 [0, 1, 0, 3]])\n+    y_train = np.array([1.0, 0.0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert model.support_vectors_.shape[0] > 0\n+\n \n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..0e47398 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,20 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+import pytest\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    expected_repr = (\n+        '{}(n_repeats=6, n_splits=2, random_state=None)'\n+        .format(repeated_cv.__class__.__name__)\n+    )\n+    assert repr(repeated_cv) == expected_repr\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..24228d1 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -12,6 +13,11 @@ from sklearn.isotonic import (\n     IsotonicRegression,\n     _make_unique,\n )\n+from sklearn import set_config\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn.utils._testing import assert_raises\n+from sklearn.exceptions import NotFittedError\n \n from sklearn.utils.validation import check_array\n from sklearn.utils._testing import (\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..45a8a5d 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2120,12 +2120,43 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     # not define the method.\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n+import pytest\n+import numpy as np\n+from sklearn.compose import ColumnTransformer\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.utils._testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+\n+    Non-regression test for issue with empty feature selectors\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n \n-    # The feature names are prefixed because verbose_feature_names_out=True is default\n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\"])\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n     assert_array_equal(X_trans_df0.columns, expected_verbose_names)\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..471a230 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -113,6 +113,64 @@ def test_automodule_special_members(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_classes(app):\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base, list'\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList%s' % args,\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+    \n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n                                                             'missing_package1',\n@@ -125,4 +183,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..a0ea7cf 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,7 +91,35 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n-def test_glossary(app):\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (nodes.index,\n+                          [nodes.desc, ([nodes.desc_signature, ([nodes.desc_name, '-j'],\n+                                                                [nodes.desc_addname, '[=N]'])],\n+                                        [nodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'option', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (nodes.index,\n+                          [nodes.desc, ([nodes.desc_signature, ([nodes.desc_name, '[enable'],\n+                                                                [nodes.desc_addname, '=]PATTERN'])],\n+                                        [nodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'option', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+def test_cmd_option_complex_syntax(app):\n+    text = \".. option:: [prefix=]--option=VALUE\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (nodes.index,\n+                          [nodes.desc, ([nodes.desc_signature, ([nodes.desc_name, '[prefix'],\n+                                                                [nodes.desc_addname, '=]--option=VALUE'])],\n+                                        [nodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[prefix', '[prefix', 'option', 'index', 'cmdoption-prefix-option', 1) in objects\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n             \"   term1\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..bcd3009 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,8 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,6 +47,36 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_non_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.non_empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.non_empty_all',\n+        '',\n+        'docsting of non_empty_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.non_empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..3015586 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -16,6 +17,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n import pytest\n \n from sphinx.util.typing import restify, stringify\n+from struct import Struct\n \n \n class MyClass1:\n@@ -46,6 +48,9 @@ def test_restify():\n     assert restify(Any) == \":obj:`Any`\"\n \n \n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n+\n def test_restify_type_hints_containers():\n     assert restify(List) == \":class:`List`\"\n     assert restify(Dict) == \":class:`Dict`\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..f561555 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,30 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_section_with_use_param(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+    Description of param2\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..02f2429 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -351,6 +351,12 @@ def test_args():\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n+    \n+    # Test for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # identity permutation\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])  # identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])  # left-right order\n+    assert Permutation([[1, 2], [0, 1]]) == Permutation([1, 0, 2])  # left-right order\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..003cb5e 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,4 +1,5 @@\n-from sympy import Abs, S, Symbol, I, Rational, PurePoly\n+\n+from sympy import Abs, S, Symbol, I, Rational, PurePoly, Matrix\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n@@ -447,9 +448,38 @@ def test_sparse_matrix():\n     assert A.row_list() == [(0, 0, 18), (0, 9, 12), (1, 4, 18), (2, 7, 16), (3, 9, 12), (4, 2, 19), (5, 7, 16), (6, 2, 12), (9, 7, 18)]\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n-\n-\n-def test_transpose():\n+def test_hstack_vstack_zero_matrices():\n+    # Test hstack with empty matrices having zero rows\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    result_hstack = Matrix.hstack(M1, M2, M3, M4)\n+    assert result_hstack.shape == (0, 6), f\"Expected shape (0, 6), got {result_hstack.shape}\"\n+\n+    # Test hstack with matrices having one row\n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(1, 2)\n+    M4 = Matrix.zeros(1, 3)\n+    result_hstack_1 = Matrix.hstack(M1, M2, M3, M4)\n+    assert result_hstack_1.shape == (1, 6), f\"Expected shape (1, 6), got {result_hstack_1.shape}\"\n+\n+    # Test vstack with empty matrices having zero columns\n+    M1 = Matrix.zeros(0, 1)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(2, 1)\n+    M4 = Matrix.zeros(3, 1)\n+    result_vstack = Matrix.vstack(M1, M2, M3, M4)\n+    assert result_vstack.shape == (6, 1), f\"Expected shape (6, 1), got {result_vstack.shape}\"\n+\n+    # Test vstack with matrices having one column\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(1, 0)\n+    M3 = Matrix.zeros(2, 0)\n+    M4 = Matrix.zeros(3, 0)\n+    result_vstack_1 = Matrix.vstack(M1, M2, M3, M4)\n+    assert result_vstack_1.shape == (6, 0), f\"Expected shape (6, 0), got {result_vstack_1.shape}\"\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n         SparseMatrix(((1, 3), (2, 4)))\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..4619696 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -100,7 +100,20 @@ def test_core_symbol():\n         check(c)\n \n \n-def test_core_numbers():\n+import sympy\n+import pickle\n+import sys\n+\n+def test_pickle_float_expression():\n+    # Simulate pickling a float expression in Python 2\n+    x = sympy.symbols(\"x\")\n+    expr = x + 1.0\n+    pickled_data = pickle.dumps(expr, protocol=2)\n+\n+    # Simulate unpickling in Python 3\n+    unpickled_expr = pickle.loads(pickled_data)\n+\n+    assert unpickled_expr == expr\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n \n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..b6bdb80 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -279,7 +279,27 @@ def test_coth_series():\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n \n-def test_csch():\n+def test_coth_subs_issue():\n+    from sympy import coth, log, tan\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    \n+    # Test cases for the specific issue\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n+\n+    # Verify the original test cases remain effective\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..05f4026 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,20 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import eye, ones, Matrix\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..f5b1cd0 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,30 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+import sympy as sp\n+from sympy import symbols, oo\n+from sympy.series.sequences import SeqFormula\n+from sympy.printing.latex import latex\n \n def test_latex_sequences():\n+    # Test for the issue described where square brackets should not be backslash-escaped\n+    n = symbols('n', integer=True)\n+    seq = SeqFormula(n**2, (n, 0, oo))\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(seq) == latex_str\n+\n+    # Additional sequences to ensure different sequences are rendering correctly\n+    seq_empty = SeqFormula(n**2, (n, 0, -1))  # an empty sequence\n+    latex_str = r'\\left[\\right]'  # assuming the representation for an empty sequence\n+    assert latex(seq_empty) == latex_str\n+\n+    seq_single = SeqFormula(n**2, (n, 0, 0))  # a single element sequence\n+    latex_str = r'\\left[0\\right]'\n+    assert latex(seq_single) == latex_str\n+\n+    seq_finite = SeqFormula(n**2, (n, 0, 3))  # a finite sequence\n+    latex_str = r'\\left[0, 1, 4, 9\\right]'\n+    assert latex(seq_finite) == latex_str\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..09a75f9 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,9 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n+from sympy.polys.polytools import Poly\n+from sympy.abc import x, y, z\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -186,6 +189,23 @@ def test_Domain_preprocess():\n     assert Domain.preprocess('ZZ[x,y]') == ZZ[x, y]\n     assert Domain.preprocess('QQ[x,y]') == QQ[x, y]\n \n+    # Adding test cases for polynomial domain issues\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+\n+    # Test cases for known issue with RR[y,z]\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]\n+\n+    # Additional tests for Poly with domain 'RR[y,z]'\n+    p1 = Poly(1.2*x*y*z, x)\n+    assert str(p1) == \"Poly(1.2*y*z*x, x, domain='RR[y,z]')\"\n+\n+    # This is the line that originally caused the OptionError\n+    p2 = Poly(1.2*x*y*z, x, domain='RR[y,z]')\n+    assert str(p2) == \"Poly(1.2*y*z*x, x, domain='RR[y,z]')\"\n+\n     raises(OptionError, lambda: Domain.preprocess('Z()'))\n \n     assert Domain.preprocess('Z(x)') == ZZ.frac_field(x)\n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..26ded8c 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,7 +6111,25 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty\n+from sympy.abc import n, a\n+\n def test_MatrixSymbol_printing():\n+    # Additional test cases for issue #14814\n+\n+    # Test with special character in MatrixSymbol name\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    assert pretty(x + y_star) == \"x + y*\"\n+\n+    # Test with negative coefficients\n+    y = MatrixSymbol('y', n, n)\n+    assert pretty(-a*x + -2*y*y) == \"-a*x -2*y*y\"\n+\n+    # Test with various cases including potentially problematic symbols\n+    z_dash = MatrixSymbol('z-', n, n)\n+    assert pretty(x + z_dash) == \"x + z-\"\n+    assert pretty(x - z_dash) == \"x - z-\"\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..c674af0 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,6 +728,26 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    lam = lambdify(curlyv, curlyv)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+    lam = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+\n+def test_curly_matrix_symbol_syntax_error():\n+    # Test to ensure SyntaxError is not raised\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    try:\n+        lam = lambdify(curlyv, curlyv)\n+    except SyntaxError:\n+        assert False, \"lambdify should not raise SyntaxError for curly brace named MatrixSymbol\"\n+    try:\n+        lam = lambdify(curlyv, curlyv, dummify=True)\n+    except SyntaxError:\n+        assert False, \"lambdify should not raise SyntaxError for curly brace named MatrixSymbol with dummify=True\"\n+\n def test_python_keywords():\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..d1d4384 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,6 +24,16 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n+def test_Max_Min():\n+    # Test for the issue with Max\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[x, 2]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(3, x, 2)) == \"Max[3, x, 2]\"\n+\n+    # Original test for Max/Min combination, ensuring it's not affected\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n \n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..93e0e12 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n@@ -1726,6 +1728,13 @@ def test_latex_UnevaluatedExpr():\n     assert latex(x*he) == r\"x \\frac{1}{x}\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # This is the original test case provided as the fix\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n def test_MatrixElement_printing():\n     # test cases for issue #11821\n     A = MatrixSymbol(\"A\", 1, 3)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..93b249e 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,17 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test cases for the issue with idiff not supporting Eq and f(x)\n+    # Test for handling of Eq and correct differentiation\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x).simplify() == (x + 1)*exp(x - y) / (y + 1)\n+    \n+    # Test for f(x) instead of y in idiff\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x).simplify() == (x + 1) * exp(x - f(x)) / (f(x) + 1)\n+\n+    # Additional original test cases\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..8752ec3 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,7 +582,35 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n-def test_empty_f_code():\n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_cython_autowrap_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..948f319 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -339,6 +339,17 @@ def test_intersection():\n \n     assert Intersection(S.Complexes, FiniteSet(S.ComplexInfinity)) == S.EmptySet\n \n+    # Added test cases for issue with duplicates in Intersection\n+    x = Symbol('x')\n+\n+    # Test case 1: Intersection with duplicates\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    assert Intersection({1}, {1}, {1}, {x}) == Intersection({1}, {x})\n+\n+    # Test case 2: Intersection with mixed numeric and symbolic duplicates\n+    assert Intersection({1, x}, {1}, {1, 2, x}) == Piecewise(({1}, Eq(x, 1)), ({x}, True))\n+    assert Intersection({1, 2, x}, {1, 3, x}, {1, 4, x}) == Piecewise(({1, x}, Eq(x, 1)), (EmptySet(), True))\n+\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..9952119 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -15,8 +16,21 @@ from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n np = import_module('numpy')\n+def test_issue_17006_numpy():\n+    if not np:\n+        skip(\"NumPy not installed\")\n \n-def test_numpy_piecewise_regression():\n+    n = symbols('n', integer=True)\n+    A = MatrixSymbol(\"A\", n, n)\n+    a = np.array([[1, 2], [3, 4]])\n+    f = lambdify(A, A + Identity(n))\n+    \n+    try:\n+        result = f(a)\n+    except Exception as e:\n+        result = str(e)\n+    \n+    assert result == \"array([[2, 2], [3, 5]])\", f\"Unexpected result for identity matrix addition: {result}\"\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..3e7886c 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -814,4 +814,16 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n+\n+def test_issue_17137():\n+    x = Symbol('x')\n+    # Original test cases for issue verification\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional test cases to further verify the fix\n+    assert simplify(cos(x)**(-I)) == cos(x)**(-I)\n+    assert simplify(cos(x)**(1 + I)) == cos(x)**(1 + I)\n+    assert simplify(cos(x)**(1 - I)) == cos(x)**(1 - I)\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(tan(x)**I) == tan(x)**I\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..fcb45da 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -95,6 +96,13 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n+    # Test multiplication symmetry between Point and numbers\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+    num = sympy.sympify(2.0)\n+    assert (p1 + p2 * num) == (p1 + num * p2)\n+    assert (p1 + 3 * p2) == (p1 + p2 * 3)\n+\n     # Point differences should be simplified\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..d502d0f 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,45 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, Symbol, sympify\n+import pytest\n+\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    \n+    # Ensure that the erroneous evaluation behavior does not occur\n+    with pytest.raises(AttributeError):  # Expect an AttributeError since 'y' is not an attribute of a Symbol\n+        _ = sympy.Symbol('x') == C()\n+\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+\n+    # Fix verification: ensure `sympy.Symbol('x')` does not equal an object with repr 'x'\n+    assert sympy.Symbol('x') != D()  # should succeed now\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1941,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..4319078 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,6 +547,25 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n+    # Test issue 18186\n+    # Verify that the output is consistent regardless of the order of symbols\n+    from sympy import symbols\n+\n+    x, y = symbols('x y', integer=True)\n+\n+    # Test case for verifying the resolution of the issue\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    # Additional test cases to verify the permutation and symmetry logic\n+    # in different orders\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n     # issue 18122\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n",
  "sympy__sympy-18532": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex f97b2ee..f0295e9 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -136,7 +136,16 @@ def test_subs_with_unicode_symbols():\n     assert replaced.name == 'x'\n \n \n+from sympy import Symbol, Integer, Function\n+from sympy.abc import a, b, c\n+\n def test_atoms():\n+    # Verify that basic atoms without args are returned\n+    assert Integer(1).atoms() == {Integer(1)}  # Integer is a leaf node\n+    assert Symbol('x').atoms() == {Symbol('x')}  # Symbol is a leaf node\n+    # Verify that a function does not count as an atom\n+    f = Function('f')(a, b, c)\n+    assert f.atoms() == {a, b, c}  # Arguments of the function are the atoms\n     assert b21.atoms() == set()\n \n \n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..e7cc733 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,31 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    # Test with a single matrix element\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_BlockDiagMatrix_multiple_element_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    # Test with multiple matrix elements\n+    M1 = Matrix([[1, 2], [3, 4]])\n+    M2 = Matrix([[5, 6], [7, 8]])\n+    D = BlockDiagMatrix(M1, M2)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 5, 6],\n+        [0, 0, 7, 8]\n+    ])\n+    assert B == expected\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..b05ea27 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,77 @@\n+\n+def test_block_index_issue_case():\n+    n, i = symbols('n, i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[i, 0] == MatrixElement(C, i, 0)  # This is the expected correct behavior\n+\n+def test_block_index_symbolic():\n+    # Note that these matrices may be zero-sized and indices may be negative, which causes\n+    # all naive simplifications given in the comments to be invalid\n+    A1 = MatrixSymbol('A1', n, k)\n+    A2 = MatrixSymbol('A2', n, l)\n+    A3 = MatrixSymbol('A3', m, k)\n+    A4 = MatrixSymbol('A4', m, l)\n+    A = BlockMatrix([[A1, A2], [A3, A4]])\n+    assert A[0, 0] == MatrixElement(A, 0, 0)  # Cannot be A1[0, 0]\n+    assert A[n - 1, k - 1] == A1[n - 1, k - 1]\n+    assert A[n, k] == A4[0, 0]\n+    assert A[n + m - 1, 0] == MatrixElement(A, n + m - 1, 0)  # Cannot be A3[m - 1, 0]\n+    assert A[0, k + l - 1] == MatrixElement(A, 0, k + l - 1)  # Cannot be A2[0, l - 1]\n+    assert A[n + m - 1, k + l - 1] == MatrixElement(A, n + m - 1, k + l - 1)  # Cannot be A4[m - 1, l - 1]\n+    assert A[i, j] == MatrixElement(A, i, j)\n+    assert A[n + i, k + j] == MatrixElement(A, n + i, k + j)  # Cannot be A4[i, j]\n+    assert A[n - i - 1, k - j - 1] == MatrixElement(A, n - i - 1, k - j - 1)  # Cannot be A1[n - i - 1, k - j - 1]\n+\n+def test_block_index_symbolic_nonzero():\n+    # All invalid simplifications from test_block_index_symbolic() that become valid if all\n+    # matrices have nonzero size and all indices are nonnegative\n+    k, l, m, n = symbols('k l m n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True, nonnegative=True)\n+    A1 = MatrixSymbol('A1', n, k)\n+    A2 = MatrixSymbol('A2', n, l)\n+    A3 = MatrixSymbol('A3', m, k)\n+    A4 = MatrixSymbol('A4', m, l)\n+    A = BlockMatrix([[A1, A2], [A3, A4]])\n+    assert A[0, 0] == A1[0, 0]\n+    assert A[n + m - 1, 0] == A3[m - 1, 0]\n+    assert A[0, k + l - 1] == A2[0, l - 1]\n+    assert A[n + m - 1, k + l - 1] == A4[m - 1, l - 1]\n+    assert A[i, j] == MatrixElement(A, i, j)\n+    assert A[n + i, k + j] == A4[i, j]\n+    assert A[n - i - 1, k - j - 1] == A1[n - i - 1, k - j - 1]\n+    assert A[2 * n, 2 * k] == A4[n, k]\n+\n+def test_block_index_large():\n+    n, m, k = symbols('n m k', integer=True, positive=True)\n+    i = symbols('i', integer=True, nonnegative=True)\n+    A1 = MatrixSymbol('A1', n, n)\n+    A2 = MatrixSymbol('A2', n, m)\n+    A3 = MatrixSymbol('A3', n, k)\n+    A4 = MatrixSymbol('A4', m, n)\n+    A5 = MatrixSymbol('A5', m, m)\n+    A6 = MatrixSymbol('A6', m, k)\n+    A7 = MatrixSymbol('A7', k, n)\n+    A8 = MatrixSymbol('A8', k, m)\n+    A9 = MatrixSymbol('A9', k, k)\n+    A = BlockMatrix([[A1, A2, A3], [A4, A5, A6], [A7, A8, A9]])\n+    assert A[n + i, n + i] == MatrixElement(A, n + i, n + i)\n+\n+@XFAIL\n+def test_block_index_symbolic_fail():\n+    # To make this work, symbolic matrix dimensions would need to be somehow assumed nonnegative\n+    # even if the symbols aren't specified as such.  Then 2 * n < n would correctly evaluate to\n+    # False in BlockMatrix._entry()\n+    A1 = MatrixSymbol('A1', n, 1)\n+    A2 = MatrixSymbol('A2', m, 1)\n+    A = BlockMatrix([[A1], [A2]])\n+    assert A[2 * n, 0] == A2[n, 0]\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..e9c2b21 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -295,6 +295,40 @@ def test_sign():\n     assert sign(Symbol('x', real=True)).is_nonpositive is None\n     assert sign(Symbol('x', real=True, zero=False)).is_nonpositive is None\n \n+    from sympy import Symbol, Piecewise, Abs, Eq, Function, sin, cos, log, oo, AccumBounds\n+\n+    def test_issue_rewrite_sign_as_abs():\n+        x = Symbol('x')\n+        y = Symbol('y')\n+        f = Function('f')\n+\n+        # Basic test for the rewrite.\n+        assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+        assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+\n+        # Function argument\n+        assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+\n+        # Test with known values, including zero\n+        assert sign(0).rewrite(Abs) == 0\n+        assert sign(2).rewrite(Abs) == 1\n+        assert sign(-3).rewrite(Abs) == -1\n+\n+        # Ensure complex numbers maintain the correct behavior\n+        assert sign(2 + 3*I).rewrite(Abs).simplify() == sign(2 + 3*I)\n+        assert sign(2*I).rewrite(Abs) == I\n+        assert sign(-2*I).rewrite(Abs) == -I\n+\n+        # Check for handling of symbolic zero\n+        zero = Symbol('zero', zero=True)\n+        assert sign(zero).rewrite(Abs) == 0\n+\n+        # Test expressions involving `sign` and `Abs`\n+        expr = (7*x*cos(x) - 12*log(x)**3) * (-log(x)**4 + 2*sin(x) + 1)**2 / \\\n+               (2*(x*cos(x) - 2*log(x)**3)*(3*log(x)**4 - 7*sin(x) + 3)**2)\n+        assert expr.subs(x, oo) == AccumBounds(-oo, oo)\n+        assert (sin(x) + cos(x)).subs(x, oo) == AccumBounds(-2, 2)\n+\n     x, y = Symbol('x', real=True), Symbol('y')\n     assert sign(x).rewrite(Piecewise) == \\\n         Piecewise((1, x > 0), (-1, x < 0), (0, True))\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..1f3511b 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -514,6 +514,24 @@ def test_partitions():\n         assert i == RGS_enum(n)\n \n \n+def test_additional_partitions_cases():\n+    # Check if the partitions function is correctly copying dictionaries.\n+    partitions_list = list(partitions(6, k=2))\n+    assert partitions_list == [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    assert all(id(dic) != id(partitions_list[0]) for dic in partitions_list[1:])\n+\n+    partitions_list = list(partitions(6, k=3))\n+    assert partitions_list == [{3: 2}, {1: 1, 2: 1, 3: 1}, {1: 3, 3: 1}, {2: 3}, \n+                               {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    assert all(id(dic) != id(partitions_list[0]) for dic in partitions_list[1:])\n+\n+    # Check that modifying one partition doesn't affect another due to reusing\n+    part_gen = partitions(6, k=2)\n+    first_part = next(part_gen)\n+    first_part[2] = 0\n+    second_part = next(part_gen)\n+    assert second_part == {1: 2, 2: 2}  # should not be affected by first_part\n+\n def test_binary_partitions():\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..f59336b 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -255,6 +255,7 @@ def test_power_rewrite_exp():\n \n \n def test_zero():\n+    from sympy import S, oo\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n@@ -264,10 +265,21 @@ def test_zero():\n     assert (0**(2 - x)).as_base_exp() == (0, 2 - x)\n     assert 0**(x - 2) != S.Infinity**(2 - x)\n     assert 0**(2*x*y) == 0**(x*y)\n+    # Test issue 19572\n+    assert 0**-oo == S.ComplexInfinity\n+    assert (0**-oo).is_comparable == False  # Ensure it's not mistakenly seen as a numeric 0\n+    assert (0**-oo).as_base_exp() == (0, -oo)\n+\n+    # Confirm that 0**oo is NaN since it oscillates\n+    assert 0**oo == S.NaN\n+    assert (0**oo).is_comparable == False\n+    assert (0**oo).as_base_exp() == (0, oo)\n+\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n \n def test_pow_as_base_exp():\n+    from sympy import S, oo\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..843123a 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -27,8 +27,22 @@ def test__aresame():\n     assert not _aresame(Basic([]), Basic(()))\n     assert not _aresame(Basic(2), Basic(2.))\n \n+import sympy\n+from sympy import Symbol\n+from sympy.testing.pytest import raises\n \n-def test_structure():\n+def test_symbol_dict_and_slots():\n+    # Check if Symbol instances have __dict__ attribute in version 1.7+\n+    s = Symbol('s')\n+    if hasattr(s, '__dict__'):\n+        assert s.__dict__ == {}  # __dict__ exists and is empty\n+    else:\n+        with raises(AttributeError):\n+            getattr(s, '__dict__')\n+\n+    # Verify that Symbol class still uses __slots__\n+    assert hasattr(s, '__slots__')\n+    assert s.__slots__ == ('name',)\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n     assert bool(b1)\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..97cb35d 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Abs, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -160,8 +161,16 @@ def test_sign():\n     x = Symbol('x', complex=True)\n     assert refine(sign(x), Q.zero(x)) == 0\n \n+def test_refine_complex_integral():\n+    a, x = symbols('a x', real=True)\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    # Test if refine simplifies the integral correctly for positive 'a'\n+    assert refine(J.doit(), Q.positive(a)) == 1 / (a**2 + 1)\n \n-def test_func_args():\n+def test_arg():\n+    x = Symbol('x', complex=True)\n+    assert refine(arg(x), Q.positive(x)) == 0\n+    assert refine(arg(x), Q.negative(x)) == pi\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..1588c9a 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -34,7 +36,10 @@ def test_Symbol_kind():\n     assert comm_x.kind is NumberKind\n     assert noncomm_x.kind is UndefinedKind\n \n-def test_Integral_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..1a65ca0 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,6 +131,31 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n+    # Test with three variables and total degree constraints\n+    from sympy import symbols\n+    from sympy.polys.monomials import itermonomials\n+    from sympy.polys.orderings import monomial_key\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2], 3, 3)) == {x1**3, x1**2*x2, x1*x2**2, x2**3}\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2,\n+        x2**3, x2**2*x3, x2*x3**2, x3**3\n+    }\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {\n+        x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2,\n+        x2**3, x2**2*x3, x2*x3**2, x3**3,\n+        x1**2, x1*x2, x1*x3, x2**2, x2*x3, x3**2\n+    }\n+\n+    # Test with list of degrees for each variable\n+    assert set(itermonomials([x1, x2], [2, 2], [1, 1])) == {\n+        x1*x2, x1**2, x2**2, x1*x2**2, x1**2*x2\n+    }\n+\n+    # Test with edge cases of degrees\n+    assert set(itermonomials([x1], 0, 0)) == {1}\n+    assert set(itermonomials([x1, x2], 1, 1)) == {x1, x2}\n+\n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..f111b26 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -48,6 +49,10 @@ def test_solve_poly_system():\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], (x, y)))\n \n \n def test_solve_biquadratic():\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7057531 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..dd67f6d 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -338,7 +338,32 @@ def test_cse_Indexed():\n     assert len(replacements) > 0\n \n \n+from sympy import Matrix, MatrixSymbol, symbols\n+from sympy.simplify import cse\n+\n def test_cse_MatrixSymbol():\n+    # Test case to evaluate cse on matrix multiplication with stored symbols\n+    def t44(name):\n+        return Matrix(4, 4, lambda i, j: symbols('%s_%d_%d' % (name, i, j)))\n+\n+    a = t44(\"a\")\n+    b = t44(\"b\")\n+    e = a * b\n+    a_sym = MatrixSymbol(\"a\", 4, 4)\n+    b_sym = MatrixSymbol(\"b\", 4, 4)\n+\n+    # Replace with MatrixSymbol to simulate the issue scenario\n+    sub_in_matrixsymbols = [\n+        (symbols('a_%d_%d' % (i, j)), a_sym[i, j]) for i in range(4) for j in range(4)\n+    ] + [\n+        (symbols('b_%d_%d' % (i, j)), b_sym[i, j]) for i in range(4) for j in range(4)\n+    ]\n+    e2 = e.subs(sub_in_matrixsymbols)\n+\n+    cse_subs, cse_reduced = cse(e2)\n+\n+    # The test checks that cse() does not introduce unnecessary assignments\n+    assert (cse_subs, cse_reduced) == ([], [e2])\n     # MatrixSymbols have non-Basic args, so make sure that works\n     A = MatrixSymbol(\"A\", 3, 3)\n     assert cse(A) == ([], [A])\n",
  "sympy__sympy-23117": "",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..ed01e09 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,27 @@ def test_scipy_polys():\n \n \n \n+def test_python_code_printer_singleton_tuple():\n+    # Test that lambdify with a single-item tuple returns a tuple (with comma).\n+    f2b = lambdify([], (1,))  # This should generate code with a tuple\n+    assert f2b() == (1,)\n+\n+    # Verify the source code output includes the comma, indicating a tuple\n+    source_code = inspect.getsource(lambdify([], (1,)))\n+    assert \"return (1,)\" in source_code\n+\n+def test_python_code_printer_multiple_element_tuple():\n+    # Test that lambdify with a multi-item tuple correctly returns the tuple.\n+    f2c = lambdify([], (1, 2))\n+    assert f2c() == (1, 2)\n+\n+    # Verify the source code output\n+    source_code = inspect.getsource(lambdify([], (1, 2)))\n+    assert \"return (1, 2)\" in source_code\n+\n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..8bd87ac 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,25 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_issue_fix():\n+    assert TP(2*A - B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) - TP(B, A) - TP(B, B)\n+    \n+    assert TP(0, A + B).expand(tensorproduct=True) == 0\n+    \n+    assert TP(A - A, A + B).expand(tensorproduct=True) == 0\n \n-def test_tensor_product_commutator():\n+    nested_expansion = TP(2*A, TP(B, C + D)).expand(tensorproduct=True)\n+    assert nested_expansion == 2 * TP(A, B, C) + 2 * TP(A, B, D)\n+\n+    assert TP(A, B + C*D).expand(tensorproduct=True) == TP(A, B) + TP(A, C*D)\n+\n+    # Tests that involve more complex nested structures\n+    assert TP(2*A - B, TP(A, B)).expand(tensorproduct=True) == \\\n+        2 * TP(A, A, B) - TP(B, A, B)\n+\n+    assert TP(TP(A + B, C), A + B).expand(tensorproduct=True) == \\\n+        TP(A, C, A) + TP(A, C, B) + TP(B, C, A) + TP(B, C, B)\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..37f73af 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -561,8 +562,26 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_collect_factor_and_dimension_equivalent_dimensions():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, meter, second\n+    from sympy.physics.units.systems.si import SI\n+\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n \n-def test_prefixed_property():\n+    expr1 = a1 * t1 + v1\n+    # This should not raise a ValueError if the issue is fixed\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+    assert dimension == SI.get_dimension_system().equivalent_dims(acceleration * time, velocity)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..204a022 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, kilo, Prefix\n+from sympy.core.singleton import S\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -17,7 +19,10 @@ def test_prefix_operations():\n \n     dodeca = Prefix('dodeca', 'dd', 1, base=12)\n \n-    assert m * k == 1\n+    assert m * k == S.One\n+    assert m * W == W / 1000  # Test case for milli prefix with W (Watt)\n+    assert milli * W == W / 1000  # Additional test for the issue with Milli and Watt\n+    assert milli * kilo == S.One / 1000  # Checking milli and kilo cancellation\n     assert k * k == M\n     assert 1 / m == k\n     assert k / m == M\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..6ea0389 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -1,5 +1,7 @@\n from operator import attrgetter\n \n+from .models import Parent, Child\n+\n from django.core.exceptions import FieldError, ValidationError\n from django.db import connection, models\n from django.test import SimpleTestCase, TestCase\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..3565a02 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,43 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referencing_fk_ordering(self):\n+        # Set up test data for OneModel\n+        root_model_1 = OneModel.objects.create(oneval=1)\n+        root_model_2 = OneModel.objects.create(oneval=2)\n+        \n+        # Create self-referencing entries\n+        one_model_1 = OneModel.objects.create(root=root_model_1, oneval=3)\n+        one_model_2 = OneModel.objects.create(root=root_model_2, oneval=4)\n+\n+        # Related TwoModel entries\n+        two_model_1 = TwoModel.objects.create(record=one_model_1, twoval=10)\n+        two_model_2 = TwoModel.objects.create(record=one_model_2, twoval=20)\n+\n+        # Test case for ordering by self-referencing FK\n+        queryset = TwoModel.objects.filter(record__oneval__in=[3, 4]).order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            queryset,\n+            [two_model_1, two_model_2],\n+            lambda x: x\n+        )\n+\n+        # Test case with incorrect DESCENDING order due to issue\n+        queryset_desc = TwoModel.objects.filter(record__oneval__in=[3, 4]).order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            queryset_desc,\n+            [two_model_2, two_model_1],\n+            lambda x: x\n+        )\n+\n+        # Working around the issue using annotation\n+        queryset_annotate = TwoModel.objects.filter(record__oneval__in=[3, 4]).annotate(root_id=models.F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertQuerysetEqual(\n+            queryset_annotate,\n+            [two_model_1, two_model_2],\n+            lambda x: x\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..4229701 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,42 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the id from widget data['attrs']['id']\n+        when set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        # Custom auto_id format\n+        form = SomeForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+\n+        # Ensure that the custom ID is reflected in the subwidget's id_for_label\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n+\n+    def test_boundwidget_id_for_label_without_auto_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label falls back to auto-generated ID when\n+        auto_id is not provided.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id=False)\n+        subwidgets = form['field'].subwidgets\n+\n+        # Default behavior without auto_id should be auto-generated\n+        self.assertEqual(subwidgets[0].id_for_label, 'id_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'id_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..701bb45 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -658,7 +658,30 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n-def test_colorbar_get_ticks_2():\n+def test_update_colorbar_after_changing_norm():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.colors import LogNorm, Normalize\n+    \n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots(1, 1)\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Initially the scale should be linear\n+    assert cb.ax.yaxis.get_scale() == 'linear'\n+\n+    # Change the norm of the mappable to LogNorm\n+    plot.set_norm(LogNorm())\n+    \n+    # Force the colorbar to update\n+    cb.update_normal(plot)\n+    \n+    # Now the scale should be logarithmic\n+    assert cb.ax.yaxis.get_scale() == 'log'\n+\n+    plt.close(fig)\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..a9d23e9 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3020,8 +3020,20 @@ class TestDataset:\n \n         y = D.to_stacked_array(\"features\", sample_dims, name=name)\n         assert y.name == name\n-\n-    def test_to_stacked_array_dtype_dims(self):\n+import numpy as np\n+import xarray as xr\n+from xarray.testing import assert_identical\n+\n+class TestToStackedArray:\n+    ...\n+\n+    def test_to_unstacked_dataset_single_dim(self):\n+        # single dimension: regression test for the issue\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # make a two dimensional dataset\n         a, b = create_test_stacked_array()\n         D = xr.Dataset({\"a\": a, \"b\": b})\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..adc8216 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -251,12 +251,111 @@ def test_set_output_mro():\n \n     class A(Base):\n         pass\n+import pandas as pd\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn.pipeline import make_union\n+from sklearn import set_config\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X, y=None):\n+        return self\n \n+    def transform(self, X):\n+        return pd.DataFrame(X[\"value\"].groupby(X[\"date\"]).sum())\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output and a transformer that aggregates data.\"\"\"\n+    \n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+    \n+    # Configure the global output for transformations to pandas\n+    set_config(transform_output=\"pandas\")\n+\n+    # Create a feature union with the custom transformer\n+    union = make_union(MyTransformer())\n+\n+    # This should not raise an error\n+    transformed_data = union.fit_transform(data)\n+    \n+    # Expected output is a DataFrame with summed values for each unique date\n+    expected_output = pd.DataFrame({'value': [240, 240, 240, 240]}, index=pd.Index(['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04'], name='date'))\n+    \n+    assert transformed_data.equals(expected_output), \"The transformed output does not match the expected output.\"\n     class B(Base):\n         def transform(self, X):\n             return \"B\"\n+import pandas as pd\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn.pipeline import make_union\n+from sklearn import set_config\n+import pytest\n+from numpy.testing import assert_array_equal\n \n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X, y=None):\n+        return self\n+\n+    def transform(self, X):\n+        return pd.DataFrame(X[\"value\"].groupby(X[\"date\"]).sum())\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output and a transformer that aggregates data.\"\"\"\n+    \n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+    \n+    # Configure the global output for transformations to pandas\n+    set_config(transform_output=\"pandas\")\n+\n+    # Create a feature union with the custom transformer\n+    union = make_union(MyTransformer())\n+\n+    # This should not raise an error\n+    transformed_data = union.fit_transform(data)\n+    \n+    # Expected output is a DataFrame with summed values for each unique date\n+    expected_output = pd.DataFrame({'value': [240, 240, 240, 240]}, index=pd.Index(['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04'], name='date'))\n+    \n+    assert transformed_data.equals(expected_output), \"The transformed output does not match the expected output.\"\n     class C(A, B):\n         pass\n+import pandas as pd\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn.pipeline import make_union\n+from sklearn import set_config\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X, y=None):\n+        return self\n \n-    assert C().transform(None) == \"B\"\n+    def transform(self, X):\n+        return pd.DataFrame(X[\"value\"].groupby(X[\"date\"]).sum())\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output and a transformer that aggregates data.\"\"\"\n+    \n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+    \n+    # Configure the global output for transformations to pandas\n+    set_config(transform_output=\"pandas\")\n+\n+    # Create a feature union with the custom transformer\n+    union = make_union(MyTransformer())\n+\n+    # This should not raise an error\n+    transformed_data = union.fit_transform(data)\n+    \n+    # Expected output is a DataFrame with summed values for each unique date\n+    expected_output = pd.DataFrame({'value': [240, 240, 240, 240]}, index=pd.Index(['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04'], name='date'))\n+    \n+    assert transformed_data.equals(expected_output), \"The transformed output does not match the expected output.\"\n+    assert C().transform(None) == \"B\"\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..3b0eb98 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,34 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_inheritance(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n@@ -115,6 +143,34 @@ def test_decorators(app):\n         '',\n     ]\n \n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_inheritance(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n     actual = do_autodoc(app, 'class', 'target.decorator.Qux')\n     assert list(actual) == [\n         '',\n@@ -132,6 +188,34 @@ def test_decorators(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_inheritance(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n     options = {\"members\": None}\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..e67bc9f 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,6 +358,28 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n+def test_issue_15129_trigsimp_methods():\n+    # Original test case from the provided patch\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+    # Additional test cases to ensure proper simplification\n+    r3 = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    assert trigsimp(r3) == cos(S(1)/50)  # Assert trigsimp works outside of Matrix context\n+\n+    r4 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), Rational(1)])\n+    r5 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), Rational(1)])\n+    r6 = r4.dot(r5)\n+    assert trigsimp(r6) == cos(S(1)/50) + Rational(1)  # Ensure it simplifies without affecting Rational terms\n+\n+    expr = acos(sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25)))\n+    assert trigsimp(expr) == acos(cos(S(1)/50))  # Check if acos also simplifies correctly\n+\n \n def test_exptrigsimp():\n     def valid(a, b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..48aed4b 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4346,6 +4346,26 @@ def test_settings():\n \n \n def test_pretty_sum():\n+    from sympy import Sum, oo, pprint, Add\n+    from sympy.abc import x\n+\n+    # Test case specifically for the issue described with Sum pretty print\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    # The x and +3 should be aligned vertically\n+    expected_output = \\\n+u(\"\"\"\\\n+  \u221e       \\n\\\n+ ____     \\n\\\n+ \u2572        \\n\\\n+  \u2572   x + 3\\n\\\n+  \u2571       \\n\\\n+ \u2571        \\n\\\n+ \u203e\u203e\u203e\u203e     \\n\\\n+x = 1     \\\n+\"\"\")\n+    \n+    pretty_output = upretty(expr)\n+    assert pretty_output == expected_output, f\"Expected:\\n{expected_output}\\nGot:\\n{pretty_output}\"\n     from sympy.abc import x, a, b, k, m, n\n \n     expr = Sum(k**k, (k, 0, n))\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..7a9d6e8 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,17 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    # Test case for modifying the list during iteration to ensure RuntimeError is raised\n+    f = [1, 2, 3]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Another test case using nested lists\n+    f = [[1], [2], [1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..c49374d 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,6 +8,7 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-15320": "",
  "django__django-15819": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 0ecd041..4cb35b2 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -434,10 +434,49 @@ class InspectDBTestCase(TestCase):\n         self.assertIn(\"# The error was:\", output)\n \n \n+from django.core.management import call_command\n+from django.test import TransactionTestCase\n+from io import StringIO\n+from unittest import mock\n+from django.db.backends.base.introspection import TableInfo\n+\n+\n class InspectDBTransactionalTests(TransactionTestCase):\n     available_apps = [\"inspectdb\"]\n \n-    def test_include_views(self):\n+    def test_related_name_for_same_model_relations(self):\n+        \"\"\"Check related_name generation for multiple foreign keys to the same model.\"\"\"\n+        out = StringIO()\n+        # Simulate inspectdb with specific table having multiple FKs to the same model\n+        with mock.patch(\n+            \"django.db.connection.introspection.get_table_list\",\n+            return_value=[TableInfo(name=\"custom_table\", type=\"t\")],\n+        ), mock.patch(\n+            \"django.db.connection.introspection.get_relations\",\n+            return_value={\n+                1: (1, \"related_model\"), # Simulate FK to a related model\n+                2: (1, \"related_model\"), # Another FK to the same model\n+            },\n+        ), mock.patch(\n+            \"django.db.connection.introspection.get_field_type\",\n+            return_value=\"ForeignKey\",\n+        ), mock.patch(\n+            \"django.db.connection.introspection.get_field_names\",\n+            return_value=[\"field1\", \"field2\"],\n+        ):\n+            call_command(\"inspectdb\", stdout=out)\n+        \n+        output = out.getvalue()\n+        \n+        # Check the related_name is autogenerated uniquely for both fields\n+        self.assertIn(\n+            \"field1 = models.ForeignKey('RelatedModel', models.DO_NOTHING, related_name='customtable_field1_set')\",\n+            output,\n+        )\n+        self.assertIn(\n+            \"field2 = models.ForeignKey('RelatedModel', models.DO_NOTHING, related_name='customtable_field2_set')\",\n+            output,\n+        )\n         \"\"\"inspectdb --include-views creates models for database views.\"\"\"\n         with connection.cursor() as cursor:\n             cursor.execute(\n",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..a2d2f87 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -28,6 +29,26 @@ class ExistingRelatedInstancesTests(TestCase):\n             name=\"T1 Pool 1/3 Style\", pool=cls.p1, another_pool=cls.p3\n         )\n \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_foreign_key(self):\n         with self.assertNumQueries(2):\n             tournament = Tournament.objects.get(pk=self.t1.pk)\n@@ -163,4 +184,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..69bbe5d 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -7,6 +8,8 @@ from threading import Timer\n from types import SimpleNamespace\n import warnings\n \n+import pickle\n+import matplotlib.pyplot as plt\n import numpy as np\n import pytest\n from PIL import Image\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..a65837d 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,8 +1,10 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n import matplotlib.pyplot as plt\n-from matplotlib.colors import same_color, to_rgba\n+from seaborn import PairGrid\n+import seaborn as sns\n \n import pytest\n from numpy.testing import assert_array_equal\n@@ -1623,7 +1625,17 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_scatterplot_with_categorical_hue(self):\n+        iris = sns.load_dataset(\"iris\")\n+        try:\n+            g = PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            # If we reach here, the test is successful and no error was raised\n+            assert True\n+        except Exception as e:\n+            # If there's any exception, the test fails\n+            pytest.fail(f\"PairGrid with categorical hue raised an error: {e}\")\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..9ebf247 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,7 +323,28 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n-def test_excinfo_exconly():\n+import pytest\n+\n+def test_excinfo_raises_context_var_str():\n+    # Testing that str(excinfo) does not provide the full message unless str(excinfo.value) is used\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\n+            f\"A\\n\"\n+            f\"B\\n\"\n+            f\"C\"\n+        )\n+    assert str(excinfo) == repr(excinfo)  # str(excinfo) should match its representation\n+    assert str(excinfo.value) == \"A\\nB\\nC\"  # Check that value contains the full message\n+\n+    # Comparing it with normal exception handling\n+    try:\n+        raise LookupError(\n+            f\"A\\n\"\n+            f\"B\\n\"\n+            f\"C\"\n+        )\n+    except LookupError as e:\n+        assert str(e) == \"A\\nB\\nC\"\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n     with pytest.raises(ValueError) as excinfo:\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..4773f9d 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -402,9 +402,15 @@ class TestCustomConftests:\n         )\n         testdir.mkdir(\"sub\")\n         testdir.makepyfile(\"def test_x(): pass\")\n+        # Test the original full-length argument\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Test the hypothetical shortcut \"-c\" if implemented\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -433,7 +439,13 @@ class TestCustomConftests:\n         p = testdir.makepyfile(\"def test_x(): pass\")\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n+        # Test the original full-length argument\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Test the hypothetical shortcut \"-c\" if implemented\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..755b630 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,18 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, MatrixSymbol, Identity, Sum, symbols\n+from sympy.assumptions import assuming, Q as Query\n+from sympy.matrices.expressions.matexpr import ask\n \n-def test_Identity_doit():\n+def test_Identity_sum_elements():\n+    n = Symbol('n', integer=True, positive=True)\n+    In = Identity(n)\n+    i, j = symbols('i j', integer=True)\n+\n+    # Check the sum of all elements in an identity matrix\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n, f\"Expected sum to be {n}, but got {total_sum}\"\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": ""
}