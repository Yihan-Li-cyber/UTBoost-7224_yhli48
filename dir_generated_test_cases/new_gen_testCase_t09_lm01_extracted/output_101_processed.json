{
  "astropy__astropy-12907": "",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..36468d4 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,10 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+from astropy.table import QTable\n+import numpy as np\n+import astropy.units as u\n \n from astropy.io import ascii\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..b445b7f 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -33,8 +33,43 @@ def test_get_tables_from_qdp_file(tmp_path):\n \n     with open(path, \"w\") as fp:\n         print(example_qdp, file=fp)\n+import pytest\n+import numpy as np\n+from astropy.utils.exceptions import AstropyUserWarning\n+from astropy.table import Table\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_example_read_serr(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Test QDP lowercase\n+    READ SERR 1 2\n+    ! Example data\n+    1 0.5 1 0.5\n+    NO NO NO NO NO\n+    \"\"\"\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"test_lower.qdp\")\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+\n+    table = Table.read(path, format='ascii.qdp')\n \n-    table0 = _read_table_qdp(fp.name, names=[\"MJD\", \"Rate\"], table_id=0)\n+    assert np.isclose(table['col1'][0], 1)\n+    assert np.isclose(table['col2'][0], 0.5)\n+    assert np.isclose(table['col1_err'][0], 1)\n+    assert np.isclose(table['col2_err'][0], 0.5)\n     assert table0.meta[\"initial_comments\"][0].startswith(\"Swift\")\n     assert table0.meta[\"comments\"][0].startswith(\"WT -- hard data\")\n     table2 = _read_table_qdp(fp.name, names=[\"MJD\", \"Rate\"], table_id=2)\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..57f1ea0 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,6 +28,48 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # Additional check: mask propagation with bitwise operations\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n+\n # Test with Data covers:\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..ca00545 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -251,9 +251,21 @@ class TestTableFunctions(FitsTestCase):\n         assert (t[1].data.field(0) == np.array([1, 2])).all()\n \n         # When there are scaled columns, the raw data are in data._parent\n-\n         t.close()\n \n+    def test_column_d_exponent_replacement(self):\n+        # Test if the 'D' exponent is being handled correctly.\n+        r1 = np.array([1.0e+10, 1.5e+12])\n+        c2 = fits.Column(name='def', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c2])\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+        \n+        # Read the file back and verify that the exponent is 'D' instead of 'E'\n+        with open(self.temp('test_d_exponent.fits')) as f:\n+            content = f.read()\n+            assert '1.0000000000000000D+10' in content\n+            assert '1.5000000000000000D+12' in content\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..df9f97d 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,7 +1093,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        When FILE_UPLOAD_PERMISSIONS is not explicitly configured, the default\n+        file_permissions_mode should be 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..be18054 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -514,6 +514,22 @@ class MigrateTests(MigrationTestBase):\n             out.getvalue()\n         )\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_for_non_transactional_databases(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support\n+        transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_plan_app_label_no_migrations(self):\n         out = io.StringIO()\n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..8130101 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,29 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n+\n+    def test_invalid_format_without_seconds(self):\n+        field = models.DurationField()\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean('1:00', None)  # Testing input without seconds\n+        self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+            \"'1:00' value has an invalid format. \"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n+\n+    def test_invalid_format_incorrect_order(self):\n+        field = models.DurationField()\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean('60:00:00', None)  # Testing if input like '60:00:00' is invalid\n+        self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+            \"'60:00:00' value has an invalid format. \"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +106,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..4405d4f 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -234,10 +234,10 @@ class NumericPasswordValidatorTest(SimpleTestCase):\n class UsernameValidatorsTests(SimpleTestCase):\n     def test_unicode_validator(self):\n         valid_usernames = ['joe', 'Ren\u00e9', '\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30', '\u0623\u062d\u0645\u062f']\n-        invalid_usernames = [\n+        invalid_usernames = [\"trailingnewline\\n\",\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\"\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +250,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +258,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..59c6988 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,10 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..32b15f9 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,3 +1,4 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n@@ -471,7 +472,13 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n-    def test_fast_delete_joined_qs(self):\n+    def test_fast_delete_instance_no_dependencies_sets_pk_none(self):\n+        \"\"\"Test that deleting an instance with no dependencies sets PK to None.\"\"\"\n+        for model in [Avatar, M, T]:  # Assuming these models have no dependencies.\n+            instance = model.objects.create()\n+            self.assertIsNotNone(instance.pk, f\"{model.__name__}: pk should not be None before delete.\")\n+            instance.delete()\n+            self.assertIsNone(instance.pk, f\"{model.__name__}: pk should be None after delete.\")\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n         u2 = User.objects.create()\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..b05e0a7 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,3 +1,4 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n@@ -6,6 +7,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n+from django.test.utils import captured_stdout\n \n update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')\n \n@@ -140,6 +142,52 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Test migration where permissions for proxy models already exist to ensure they update correctly.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        \n+        # Create permissions for the proxy model\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        \n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+    \n+    def test_migrate_concrete_to_proxy(self):\n+        \"\"\"\n+        Test migration for a model changed from concrete to proxy ensuring permissions update correctly.\n+        \"\"\"\n+        concrete_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=True)\n+        \n+        # Assign a concrete type permission (simulating prior to proxy transition)\n+        Permission.objects.create(\n+            content_type=concrete_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+\n+        # Perform update\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        \n+        # Ensure permissions now link to the proxy model type\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        self.assertTrue(Permission.objects.filter(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy'\n+        ).exists())\n+\n     def test_user_keeps_same_permissions_after_migrating_backward(self):\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..cb7923d 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -17,7 +17,10 @@ from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n-from django.utils.autoreload import WatchmanUnavailable\n+from django.utils.autoreload import WatchmanUnavailable, StatReloader\n+import sys\n+import os\n+from unittest.mock import patch\n \n from .utils import on_macos_with_hfs\n \n@@ -132,8 +135,29 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         del module.__spec__\n         self.assertEqual(autoreload.iter_modules_and_files((module,), frozenset()), frozenset())\n \n+class TestManagePyReload(SimpleTestCase):\n+    @patch('django.utils.autoreload.StatReloader.run')\n+    def test_modify_manage_py_triggers_reload(self, mock_run):\n+        \"\"\"\n+        Test that modifying manage.py triggers the autoreloader.\n+        \"\"\"\n+        # Simulate the behavior of running 'manage.py runserver'\n+        manage_py_path = Path(__file__).resolve()\n+        with patch('sys.modules', { '__main__': sys.modules[__name__] }):\n+            sys.modules[__name__].__file__ = str(manage_py_path)\n+\n+            reloader = StatReloader()\n+            reloader.run(lambda: None)\n+\n+            # Modify the file to simulate a change\n+            with open(manage_py_path, 'a') as f:\n+                f.write('\\n# Modify manage.py')\n+\n+            # Force reloader to check for updates\n+            reloader.run(lambda: None)\n \n-class TestCommonRoots(SimpleTestCase):\n+            # Check that the reloader picks up changes\n+            mock_run.assert_called()\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..6064207 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -18,6 +18,8 @@ from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n from django.utils.functional import SimpleLazyObject\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..ff8ca47 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -97,8 +97,32 @@ class CharFieldTests(SimpleTestCase):\n \n         field = Model._meta.get_field('field')\n         self.assertEqual(field.check(), [])\n-\n-    def test_missing_max_length(self):\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good') \n+                ], \n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]), \n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+        \n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n         class Model(models.Model):\n             field = models.CharField()\n \n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..df94830 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -257,6 +257,25 @@ class WriterTests(SimpleTestCase):\n             A = 'a-value'\n             B = 'value-b'\n \n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        # Ensure that the default value uses the Enum name, not the translated value.\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n+        # Original test cases\n         class BinaryEnum(enum.Enum):\n             A = b'a-value'\n             B = b'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..6f45179 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,31 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_fifty_year_rule(self, mocked_datetime):\n+        # Mock the current datetime to control the \"current year\".\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Starting from a known year, 2049 in this case\n+        current_year = 2049\n+        mocked_datetime.utcnow.return_value = datetime(current_year, 1, 1)\n+\n+        tests = (\n+            # A two-digit year of '00' should be interpreted as 2000\n+            ('Saturday, 01-Jan-00 10:00:00 GMT', datetime(2000, 1, 1, 10, 0, 0)),\n+            # A two-digit year of '49' should be interpreted as 2049 (not 1949, since it matches the current year)\n+            ('Saturday, 01-Jan-49 10:00:00 GMT', datetime(2049, 1, 1, 10, 0, 0)),\n+            # A two-digit year of '50' should be interpreted as 1950 (as 2050 is more than 50 years in the future)\n+            ('Sunday, 01-Jan-50 10:00:00 GMT', datetime(1950, 1, 1, 10, 0, 0)),\n+            # A two-digit year of '99' should be interpreted as 1999 (as 2099 is more than 50 years in the future)\n+            ('Thursday, 31-Dec-99 23:59:59 GMT', datetime(1999, 12, 31, 23, 59, 59)),\n+        )\n+\n+        for date_str, expected_date in tests:\n+            with self.subTest(date_str=date_str):\n+                parsed = parse_http_date(date_str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11964": "",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..39547bc 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,7 +148,20 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.db import models\n+from django.test import SimpleTestCase\n+\n class GetFieldDisplayTests(SimpleTestCase):\n+    \n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+            \n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..13e96dd 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -14,4 +14,5 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.modules, name='modules'),\n+]\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..1b9a7b6 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,27 @@\n+\n+class OverriddenChoicesTests(TestCase):\n+\n+    def test_inherited_and_overridden_choices_display(self):\n+        \"\"\"\n+        Test that get_FIELD_display() works correctly with inherited models that override choices.\n+        \"\"\"\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A'), ('B', 'Base B')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')])\n+\n+        # Check that the overridden choices displays correctly.\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+        # Check the new choice added in the subclass.\n+        self.assertEqual(Child(foo='C').get_foo_display(), 'Child C')\n+        # Check invalid choice.\n+        self.assertEqual(Child(foo='D').get_foo_display(), 'D')\n+\n import pickle\n \n from django import forms\n@@ -148,6 +172,8 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.test import SimpleTestCase, TestCase\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n     def test_choices_and_field_display(self):\n",
  "django__django-12286": "",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..8bf7e6e 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,74 @@\n+\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+class SerializedRollbackTests(TransactionTestCase):\n+    serialized_rollback = True\n+\n+    def test_restore_objects_with_foreign_keys(self):\n+        # Create an ObjectReference and Object with a foreign key relationship.\n+        obj = Object.objects.create()\n+        obj_ref = ObjectReference.objects.create(obj=obj)\n+\n+        # Verify they exist.\n+        self.assertTrue(Object.objects.exists())\n+        self.assertTrue(ObjectReference.objects.exists())\n+\n+        # Serialize the database state.\n+        serialized_data = serialize('json', Object.objects.all())\n+        serialized_data_ref = serialize('json', ObjectReference.objects.all())\n+\n+        # Mock full database serialization as done in practice.\n+        combined_serialized_data = f\"[{serialized_data.strip('[]')}, {serialized_data_ref.strip('[]')}]\"\n+\n+        # Delete the records to simulate a fresh state.\n+        ObjectReference.objects.all().delete()\n+        Object.objects.all().delete()\n+\n+        # Restore the serialized state.\n+        connection.creation.deserialize_db_from_string(combined_serialized_data)\n+\n+        # Verify the objects are restored correctly.\n+        restored_obj = Object.objects.get(pk=obj.pk)\n+        restored_obj_ref = ObjectReference.objects.get(pk=obj_ref.pk)\n+        \n+        self.assertEqual(restored_obj_ref.obj, restored_obj)\n+\n+    def test_handle_integrity_error_during_deserialization(self):\n+        # Create and serialize objects separately.\n+        obj = Object.objects.create()\n+        serialized_data = serialize('json', [obj])\n+\n+        # Attempt to deserialize with a foreign key pointing to non-existent object.\n+        corrupted_data = f\"[{serialized_data.strip('[]')}, {{\\\"model\\\": \\\"backends.objectreference\\\", \\\"pk\\\": 1, \\\"fields\\\": {{\\\"obj\\\": 9999}}}}]\"\n+\n+        # Ensure deserialization fails with an IntegrityError.\n+        with self.assertRaises(IntegrityError):\n+            with transaction.atomic(using=connection.alias):\n+                connection.creation.deserialize_db_from_string(corrupted_data)\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +76,10 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TransactionTestCase\n+from ..models import Object, ObjectReference\n+from django.core.serializers import serialize\n+from django.db import transaction, IntegrityError\n \n \n def get_connection_copy():\n",
  "django__django-12497": "",
  "django__django-12700": "",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..96c2821 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -68,6 +68,13 @@ class MigrationTestBase(TransactionTestCase):\n \n     def assertIndexNotExists(self, table, columns):\n         return self.assertIndexExists(table, columns, False)\n+    def assertUniqueConstraintExists(self, table, columns, value=True, using='default'):\n+        with connections[using].cursor() as cursor:\n+            constraints = connections[using].introspection.get_constraints(cursor, table).values()\n+            self.assertEqual(\n+                value,\n+                any(c['unique'] for c in constraints if c['columns'] == list(columns)),\n+            )\n \n     def assertConstraintExists(self, table, name, value=True, using='default'):\n         with connections[using].cursor() as cursor:\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..797e1e5 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,27 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_zero_deletions_with_foreign_key(self):\n+        \"\"\"\n+        Test deleting a QuerySet that yields zero deletions for\n+        models with foreign key dependencies. Expect (0, {}) as per the issue.\n+        \"\"\"\n+        # Assuming HiddenUser is a model with a foreign key dependency\n+        self.assertEqual(\n+            HiddenUser.objects.filter(r__isnull=True).delete(),\n+            (0, {})\n+        )\n+    \n+    def test_zero_deletions_without_foreign_key(self):\n+        \"\"\"\n+        Test deleting a QuerySet that yields zero deletions for\n+        models without foreign key dependencies. Expect (0, {}) as per the issue.\n+        \"\"\"\n+        # Assuming BlockLibrary is a model without dependencies\n+        self.assertEqual(\n+            BlockLibrary.objects.filter(name='NonExistent').delete(),\n+            (0, {})\n+        )\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..a46c813 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,50 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_response_existing(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request for an existing file.\n+        scope = self.async_request_factory._base_scope(path='/static/existing-file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Content and stat simulation.\n+        file_path = TEST_STATIC_ROOT / 'existing-file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"existing-file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_static_file_response_not_found(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request for a non-existing file.\n+        scope = self.async_request_factory._base_scope(path='/static/not-found.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Expecting a 404 status.\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], b'')\n+        await communicator.wait()\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..c6c349a 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,13 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Tests for the reported issue\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('_leading_underscore', 'leading-underscore', False),\n+            ('trailing_underscore_', 'trailing-underscore', False),\n+            ('--leading-dash', 'leading-dash', False),\n+            ('trailing-dash---', 'trailing-dash', False),\n+            ('__mixed--leading-trailing__--', 'mixed-leading-trailing', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..e771c5e 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2818,8 +2818,65 @@ class LimitChoicesToTests(TestCase):\n     def test_fields_for_model_applies_limit_choices_to(self):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-10')\n+        marley = Character.objects.create(username='Marley', last_action='2023-10-10')\n+        \n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        \n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13321": "",
  "django__django-13401": "",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..37a8003 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -64,6 +64,10 @@ class SiteEachContextTest(TestCase):\n         user = auth['models'][0]\n         self.assertEqual(user['object_name'], 'User')\n \n+        # New Test Case: Verify model class in the dictionary\n+        self.assertEqual(article['model'], Article)\n+        self.assertEqual(user['model'], User)\n+\n         self.assertEqual(auth['app_url'], '/test_admin/admin/auth/')\n         self.assertIs(auth['has_module_perms'], True)\n \n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..e1b856b 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,4 +1,7 @@\n+\n from datetime import datetime, timedelta\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomUser\n \n from django.conf import settings\n from django.contrib.auth.models import User\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..615dcdf 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -6,6 +7,7 @@ from copy import deepcopy\n from decimal import Decimal\n from unittest import mock\n \n+from collections import namedtuple\n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..9f8b708 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,7 +19,8 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n-from django.core.management.commands.loaddata import Command as LoaddataCommand\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n@@ -38,7 +39,27 @@ SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n class AdminScriptTestCase(SimpleTestCase):\n-    def setUp(self):\n+    def test_program_name_from_explicitly_passed_argv(self):\n+        \"\"\"\n+        Test that a program name passed explicitly through argv is correctly used in CommandParser.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['my-django-admin'] + args)\n+        self.assertIn('usage: my-django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_from_missing_argv(self):\n+        \"\"\"\n+        Test that when argv is not provided, sys.argv is used.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['django-admin'] + args):\n+                execute_from_command_line(None)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n         tmpdir = tempfile.TemporaryDirectory()\n         self.addCleanup(tmpdir.cleanup)\n         # os.path.realpath() is required for temporary directories on macOS,\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..65e882d 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -21,7 +22,47 @@ class ShellCommandTestCase(SimpleTestCase):\n             )\n         self.assertEqual(cm.records[0].getMessage(), __version__)\n \n-    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch('django.core.management.commands.shell.select')\n     def test_stdin_read(self, select):\n         with captured_stdin() as stdin, captured_stdout() as stdout:\n@@ -49,4 +90,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..51ad314 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -963,11 +963,35 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n         self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n \n \n+from django.urls import reverse\n+from django.test import TestCase, override_settings, RequestFactory\n+from django.contrib.admin.sites import AdminSite\n+from admin_inlines.models import Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile, ProfileCollection\n+from django.contrib.admin import ModelAdmin, TabularInline\n+\n+admin_site = AdminSite()\n+\n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n \n-    def test_verbose_name_plural_inline(self):\n+    def test_verbose_name_default_to_plural(self):\n+        class InlineWithVerboseNameOnly(TabularInline):\n+            model = Profile\n+            verbose_name = 'Child'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [InlineWithVerboseNameOnly]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        \n+        # Check that the plural is based on the verbose_name\n+        self.assertContains(response, '<h2>Children</h2>')\n+        self.assertContains(response, 'Add another Child')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name_plural = 'Non-verbose childs'\n@@ -1072,6 +1096,14 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertNotContains(response, 'Add another Model with both - name')\n \n \n+from django.urls import reverse\n+from django.test import TestCase, override_settings, RequestFactory\n+from django.contrib.admin.sites import AdminSite\n+from admin_inlines.models import Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile, ProfileCollection\n+from django.contrib.admin import ModelAdmin, TabularInline\n+\n+admin_site = AdminSite()\n+\n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n \n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..29b3225 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -582,14 +582,26 @@ class TestQuerying(TestCase):\n \n     def test_isnull_key(self):\n         # key__isnull=False works the same as has_key='key'.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n             self.objs[:3] + self.objs[5:],\n         )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=False),\n             [self.objs[3], self.objs[4]],\n         )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..751b15e 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -172,6 +172,38 @@ class DispatcherTests(SimpleTestCase):\n         self.assertTrue(hasattr(err, '__traceback__'))\n         self.assertIsInstance(err.__traceback__, TracebackType)\n         a_signal.disconnect(fails)\n+\n+    def test_send_robust_logging_exception(self):\n+        import logging\n+        from django.dispatch import Signal\n+        from types import TracebackType\n+        class LoggerTests(SimpleTestCase):\n+            def test_logging_exception_in_send_robust(self):\n+                self.patched_logger = self.patch_logger('django.dispatch', 'ERROR')\n+                def fails(val, **kwargs):\n+                    raise ValueError('this')\n+                a_signal = Signal()\n+                a_signal.connect(fails)\n+                try:\n+                    with self.assertLogs('django.dispatch', 'ERROR') as cm:\n+                        result = a_signal.send_robust(sender=self, val='test')\n+                    err = result[0][1]\n+                    self.assertIsInstance(err, ValueError)\n+                    self.assertEqual(err.args, ('this',))\n+                    self.assertTrue(hasattr(err, '__traceback__'))\n+                    self.assertIsInstance(err.__traceback__, TracebackType)\n+\n+                    log_record = cm.records[0]\n+                    self.assertEqual(\n+                        log_record.getMessage(),\n+                        f'Error calling {fails} in Signal.send_robust() (this)',\n+                    )\n+                    self.assertIsNotNone(log_record.exc_info)\n+                    _, exc_value, _ = log_record.exc_info\n+                    self.assertIsInstance(exc_value, ValueError)\n+                    self.assertEqual(str(exc_value), 'this')\n+                finally:\n+                    a_signal.disconnect(fails)\n         self.assertTestIsClean(a_signal)\n \n     def test_disconnection(self):\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..968e0fc 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -395,6 +395,45 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_explicit_inherited_primary_key(self):\n+        \"\"\"\n+        Test that inheriting an explicit primary key doesn't trigger W042.\n+        \"\"\"\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+        \n+    def test_inherited_primary_key_with_explicit_db_field(self):\n+        \"\"\"\n+        Test for setting the primary key with an explicit db_column in inheritance.\n+        \"\"\"\n+        class Parent(models.Model):\n+            custom_id = models.AutoField(primary_key=True, db_column='custom_id_column')\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+        \n+    def test_multiple_inheritance_with_explicit_primary_key(self):\n+        \"\"\"\n+        Test primary key inheritance with multiple-parent classes.\n+        \"\"\"\n+        class Parent1(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Parent2(models.Model):\n+            name = models.CharField(max_length=50)\n+\n+        class Child(Parent1, Parent2):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -414,4 +453,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..38bd201 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,45 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+from .utils import AssertFormErrorsMixin\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n+    def test_modelmultiplechoicefield_value_placeholder(self):\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        f = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not a valid choice.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"4\" is not a valid choice.'],\n+            f.clean,\n+            ['4'],\n+        )\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +344,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..b4c5492 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -80,8 +80,11 @@ class ChildNullableParent(models.Model):\n class ToFieldChild(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n \n-# Multiple paths to the same model (#7110, #7125)\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n class Category(models.Model):\n     name = models.CharField(max_length=20)\n \n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..2fbb58d 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,9 +1,19 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n+from django.test import SimpleTestCase\n \n \n class QTests(SimpleTestCase):\n-    def test_combine_and_empty(self):\n+    def test_combine_with_empty_keys(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        \n+    def test_combine_or_with_empty_keys(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         q = Q(x=1)\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..87faa37 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,7 +28,8 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n-from django.utils.functional import SimpleLazyObject\n+from django.db.models import Q, Exists, OuterRef\n+from django.test import TestCase\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n@@ -797,6 +798,22 @@ class BasicExpressionsTests(TestCase):\n     def test_boolean_expression_combined(self):\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+\n+        tests = [\n+            (Exists(is_ceo) & Q(), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Q() & Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_ceo) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Q() | Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Exists(is_poc) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Q() | Exists(is_poc), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+        ]\n+\n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n         self.gmbh.save()\n         self.assertCountEqual(\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..84531e2 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1128,7 +1128,28 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n \n-    def test_resolver_match_on_request(self):\n+    from functools import partial\n+\n+    def test_resolver_match_on_partial_view(self):\n+        def example_view(request, template_name):\n+            pass\n+\n+        # Create a partial function\n+        partial_view = partial(example_view, template_name='example.html')\n+\n+        # Assuming resolve('/partial/') returns a ResolverMatch with the partial function\n+        resolver_match = ResolverMatch(\n+            func=partial_view,\n+            args=(),\n+            kwargs={},\n+            url_name='partial',\n+            route='partial/',\n+        )\n+        expected_repr = (\n+            \"ResolverMatch(func=__main__.example_view, args=(), kwargs={}, \"\n+            \"url_name=partial, app_names=[], namespaces=[], route=partial/)\"\n+        )\n+        self.assertEqual(repr(resolver_match), expected_repr)\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..ee80254 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +103,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..5dc83a4 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -8,6 +8,7 @@ from django.contrib.auth.forms import (\n     SetPasswordForm, UserChangeForm, UserCreationForm,\n )\n from django.contrib.auth.models import User\n+from django.forms import forms\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n from django.core import mail\n",
  "django__django-14580": "",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..7a28cf4 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +361,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +988,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..51c944d 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -281,8 +281,52 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n-        request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n+import datetime\n+import json\n+from django.urls import path\n+from django.http import JsonResponse\n+from django.test import RequestFactory\n+from django.contrib.admin import AdminSite\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from ..models import Question\n+\n+class ExtendedAutocompleteJsonView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj), 'posted': str(obj.posted)}\n+\n+class CustomAutocompleteJsonViewTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        cls.factory = RequestFactory()\n+\n+    def test_serialize_result_extra_field(self):\n+        class AutocompleteJsonSerializeResultView(ExtendedAutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'new_field': 'extra',\n+                }\n+\n+        # Creating sample data\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        request = self.factory.get('/autocomplete/', {'term': 'question'})\n+        request.user = self.superuser\n+\n+        response = AutocompleteJsonSerializeResultView.as_view(admin_site=AdminSite())(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted), 'new_field': 'extra'}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n         request.user = self.superuser\n         with model_admin(Question, PKOrderingQuestionAdmin):\n             response = AutocompleteJsonView.as_view(**self.as_view_args)(request)\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..1b7d139 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -425,8 +425,31 @@ class MethodDecoratorTests(SimpleTestCase):\n                 def __module__(cls):\n                     return \"tests\"\n \n+    def test_partial_function(self):\n+        \"\"\"@method_decorator correctly preserves wrapper assignments for partial objects.\"\"\"\n+        from functools import partial, wraps\n+        from django.utils.decorators import method_decorator\n+\n+        # Custom decorator similar to logger in the issue description.\n+        def my_decorator(func):\n+            @wraps(func)\n+            def wrapper(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return wrapper\n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+        class MyClass:\n+            @method_decorator(my_decorator)\n+            def my_method(self, x):\n+                return x\n+\n+        partial_my_method = partial(MyClass().my_method, 5)\n+        \n+        # Test whether attributes are correctly set\n+        self.assertEqual(partial_my_method.__name__, 'my_method')\n+\n+        # Call the method to ensure it works\n+        result = partial_my_method()\n+        self.assertEqual(result, 5)\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..6a74807 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5083,6 +5083,39 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n     def test_user_password_change_limited_queryset(self):\n         su = User.objects.filter(is_superuser=True)[0]\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n+\n+    def _test_readonly_foreignkey_links(self, admin_site_name):\n+        \"\"\"\n+        Helper function to test readonly ForeignKey URL generation in custom admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1')\n+        )\n+        language = Language.objects.create(iso='_40', name='Test Language')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser\n+        )\n+        \n+        # Fetch the change page for the ReadOnlyRelatedField object in the specified admin site.\n+        response = self.client.get(reverse(f'{admin_site_name}:admin_views_readonlyrelatedfield_change', args=(obj.pk,)))\n+        self.assertContains(response, reverse(f'{admin_site_name}:admin_views_language_change', args=(language.pk,)))\n+        self.assertContains(response, reverse(f'{admin_site_name}:admin_views_chapter_change', args=(chapter.pk,)))\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields in a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom_admin')\n         self.assertEqual(response.status_code, 404)\n \n     def test_change_form_renders_correct_null_choice_value(self):\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..350b8cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "",
  "django__django-15061": "",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..ca66263 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -90,6 +90,8 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://inv-.alid-.com',\n             'http://inv-.-alid.com',\n             '[a',\n+            # Test case for invalid IPv6 URL ValueError conversion to ValidationError\n+            '////]@N.AN',\n             'http://[a',\n             # Non-string.\n             23,\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..2bf634d 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -198,6 +198,20 @@ class NonAggregateAnnotationTestCase(TestCase):\n         self.assertEqual(b.combined, combined)\n \n     def test_empty_expression_annotation(self):\n+        # Test case for the issue: ExpressionWrapper(~Q(pk__in=[]))\n+        # This should not break the query and return the correct results.\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+        # Additional test with a filtered queryset\n+        books = Book.objects.filter(publisher=self.p1).annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.filter(publisher=self.p1).count())\n+        self.assertTrue(all(book.selected for book in books))\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n         )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..52a020b 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -163,7 +164,16 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_message_extra_tags_empty_string(self):\n+        \"\"\"\n+        Ensure that a message with extra_tags as an empty string\n+        is serialized and deserialized correctly.\n+        \"\"\"\n+        storage = self.get_storage()\n+        message = Message(constants.INFO, \"Test message\", extra_tags=\"\")\n+        encoded = storage._encode(message)\n+        decoded_message = storage._decode(encoded)\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..b7ae130 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -2,6 +2,7 @@ from pathlib import Path\n from unittest import mock\n \n from django.template import autoreload\n+from django.utils.autoreload import file_changed\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n \n@@ -28,12 +29,14 @@ EXTRA_TEMPLATES_DIR = ROOT / \"templates_extra\"\n         },\n     }])\n class TemplateReloadTests(SimpleTestCase):\n+    @mock.patch('django.utils.autoreload.file_changed.send')\n     @mock.patch('django.template.autoreload.reset_loaders')\n     def test_template_changed(self, mock_reset):\n         template_path = Path(__file__).parent / 'templates' / 'index.html'\n         self.assertTrue(autoreload.template_changed(None, template_path))\n         mock_reset.assert_called_once()\n \n+    @mock.patch('django.utils.autoreload.file_changed.send')\n     @mock.patch('django.template.autoreload.reset_loaders')\n     def test_non_template_changed(self, mock_reset):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..e889ed8 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,13 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test was_modified_since with an empty string for the If-Modified-Since header.\n+        Before the fix, an empty string would raise an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..dae045d 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -8,6 +9,7 @@ from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n+from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter\n from django.core.management.utils import (\n     find_command,\n     get_random_secret_key,\n@@ -411,7 +413,25 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_create_parser_with_custom_formatter(self):\n+        \"\"\"Test BaseCommand.create_parser() with a custom formatter class.\"\"\"\n+        epilog = \"An explanation about this command.\"\n+        test_help = \"This is a test command.\"\n+\n+        class CustomFormatter(ArgumentDefaultsHelpFormatter):\n+            def _format_action_invocation(self, action):\n+                return ' %s [CustomTrial]' % action.dest\n+\n+        command = BaseCommand()\n+        command.help = test_help\n+        parser = command.create_parser(\"prog_name\", \"subcommand\", epilog=epilog, formatter_class=CustomFormatter)\n+        \n+        self.assertEqual(parser.formatter_class, CustomFormatter)\n+        self.assertIn(\"An explanation about this command.\", parser.epilog)\n+        self.assertIn(\"This is a test command.\", parser.description)\n+        # Check the specific format style applied by CustomFormatter\n+        actions = parser._actions\n+        self.assertTrue(any(\" [CustomTrial]\" in fmt for action in actions for fmt in parser.format_usage()))\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..e7f2b7a 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -217,6 +220,34 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"value\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_with_default_encoder(self):\n+        # Ensures default encoding behavior hasn't changed.\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_with_custom_non_dict_encoder(self):\n+        # Test a custom encoder that outputs non-dict JSON.\n+        class ListEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '[\"one\", \"two\", \"three\"]'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=ListEncoder),\n+            '<script type=\"application/json\">[\"one\", \"two\", \"three\"]</script>',\n+        )\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..1173d88 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -119,6 +119,53 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             id=E003.id,\n         )\n \n+    def test_template_tags_same_module_different_library_name(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"first_tag\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+                self.get_settings(\n+                    \"second_tag\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            # No error should occur because the library name is different.\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n+    \n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\",\n+            \"check_framework.template_test_apps.different_app_same_tag\",\n+        ]\n+    )\n+    def test_different_apps_same_template_tag_name(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tag\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+                self.get_settings(\n+                    \"same_tag\", \"different_app_same_tag.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            # An error should occur because the same library name has different paths across apps.\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'same_tag'\",\n+                            \"'check_framework.template_test_apps.same_tags_app_1.templatetags.same_tags', \"\n+                            \"'check_framework.template_test_apps.different_app_same_tag.templatetags.same_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ]\n+            )\n+\n     @staticmethod\n     def get_settings(module_name, module_path):\n         return {\n@@ -130,6 +177,7 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             },\n         }\n \n+    \n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -142,6 +190,53 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             [self.error_same_tags],\n         )\n \n+    def test_template_tags_same_module_different_library_name(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"first_tag\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+                self.get_settings(\n+                    \"second_tag\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            # No error should occur because the library name is different.\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n+    \n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\",\n+            \"check_framework.template_test_apps.different_app_same_tag\",\n+        ]\n+    )\n+    def test_different_apps_same_template_tag_name(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tag\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+                self.get_settings(\n+                    \"same_tag\", \"different_app_same_tag.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            # An error should occur because the same library name has different paths across apps.\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'same_tag'\",\n+                            \"'check_framework.template_test_apps.same_tags_app_1.templatetags.same_tags', \"\n+                            \"'check_framework.template_test_apps.different_app_same_tag.templatetags.same_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ]\n+            )\n+\n     def test_template_tags_with_same_library_name(self):\n         with self.settings(\n             TEMPLATES=[\n@@ -158,6 +253,7 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 [self.error_same_tags],\n             )\n \n+    \n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n     )\n@@ -199,6 +295,7 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ):\n             self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n \n+    \n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -206,4 +303,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..fa7bce2 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,6 +395,22 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n+    def test_select_related_only_on_proxy(self):\n+        ProxyCustomModel.objects.create(name=\"Sample\")\n+        AnotherModel.objects.create(custom_id=1)\n+\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        obj = qs.get()\n+        self.assertEqual(obj.custom.name, \"Sample\")\n+\n+    def test_select_related_only_on_proxy_with_id_check(self):\n+        custom = ProxyCustomModel.objects.create(name=\"Sample\")\n+        AnotherModel.objects.create(custom=custom)\n+\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\", \"custom_id\")\n+        obj = qs.get()\n+        self.assertEqual(obj.custom_id, custom.id)\n+\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..60e74f1 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,6 +152,11 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        # Test with parameters where they appear before database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +188,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..0c1004b 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,33 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        # Test using an empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        # Test using None - typically this will return the string 'None'\n+        # Replace with expected behavior when an appropriate solution is decided\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_null_values(self):\n+        # Test a broader context where nformat might expect null-like values\n+        # Ensure defensive coding practices are followed\n+        \n+        # Confirm empty string handling\n+        self.assertEqual(nformat(\"\", \".\", decimal_pos=2), \"0.00\")\n+        \n+        # Check None with a decimal position defined; expected result could vary\n+        self.assertEqual(nformat(None, \".\", decimal_pos=2), \"None\")\n+        \n+        # Confirm negative empty handling (e.g., number format edge case)\n+        self.assertEqual(nformat(0, \".\", decimal_pos=2), \"0.00\")\n+        self.assertEqual(nformat(-0, \".\", decimal_pos=2), \"0.00\")\n+        \n+        # Further checks can compare None input in a safe, comprehensible way\n+        try:\n+            # If None is passed, decide if 'loose typing' accepts this as a valid input\n+            nformat(None, \".\", decimal_pos=3)\n+        except Exception as e:\n+            self.fail(f\"nformat raised an exception on None: {e}\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..e2370b7 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -13,6 +14,8 @@ from django.contrib.auth.forms import (\n     UserChangeForm,\n     UserCreationForm,\n )\n+from django.urls import reverse\n+import urllib.parse\n from django.contrib.auth.models import User\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n@@ -31,6 +34,8 @@ from .models.custom_user import (\n     CustomUserWithoutIsActiveField,\n     ExtensionUser,\n )\n+from django.urls import reverse\n+import urllib.parse\n from .models.with_custom_email_field import CustomEmailField\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n@@ -884,7 +889,25 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n-    def test_bug_19349_bound_password_field(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n         # When rendering the bound password field,\n",
  "django__django-16255": "",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..ebb5a43 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,6 +1,8 @@\n+\n import datetime\n \n-from django.contrib.admin import ModelAdmin\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n@@ -16,6 +18,38 @@ from .tests import AdminViewBasicTestCase\n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n     request_factory = RequestFactory()\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_submit_row(self):\n         \"\"\"\n         submit_row template tag should pass whole context.\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..e7409ee 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,34 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def _test_alter_alter_field(self, alter_foo, alter_bar):\n+        \"\"\"\n+        Two AlterField operations should collapse into the second.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                alter_foo,\n+                alter_bar,\n+            ],\n+            [\n+                alter_bar,\n+            ],\n+        )\n+\n+    def test_alter_alter_field_scenario(self):\n+        # Test case for the issue described. AlterField should reduce to the most recent one.\n+        self._test_alter_alter_field(\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..6054c21 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -60,7 +61,12 @@ class FunctionTests(SimpleTestCase):\n     def test_list(self):\n         self.assertEqual(join([0, 1, 2], \"glue\"), \"0glue1glue2\")\n \n-    def test_autoescape(self):\n+    @setup({\"join09\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join09(self):\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join09\", {\"a\": some_list, \"var\": some_var})\n+        self.assertEqual(output, some_var.join(some_list))\n         self.assertEqual(\n             join([\"<a>\", \"<img>\", \"</a>\"], \"<br>\"),\n             \"&lt;a&gt;&lt;br&gt;&lt;img&gt;&lt;br&gt;&lt;/a&gt;\",\n@@ -78,4 +84,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..62492ea 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1088,6 +1088,33 @@ def test_slider_reset():\n \n @pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\n def test_range_slider(orientation):\n+    \"\"\"\n+    Test the initial and updated values of the RangeSlider widget\n+    with various edge cases.\n+    \"\"\"\n+    # Test initialization with valinit that is out of bounds\n+    fig, ax = plt.subplots()\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Test Init\", valmin=0.0, valmax=1.0, orientation=orientation\n+    )\n+    \n+    # Test initialization with default valinit that should set value to (0.0, 0.0)\n+    slider.set_val([0.5, 0.5])\n+    assert_allclose(slider.val, (0.5, 0.5))\n+\n+    # Test the scenario when valinit is equal to boundary values\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"\", valmin=0.0, valmax=1.0, orientation=orientation,\n+        valinit=[0.0, 1.0]\n+    )\n+    assert_allclose(slider.val, (0.0, 1.0))\n+    \n+    # Test the widget with an initial overlapping range value\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"\", valmin=0.0, valmax=1.0, orientation=orientation,\n+        valinit=[0.4, 0.4]\n+    )\n+    assert_allclose(slider.val, (0.4, 0.4))\n     if orientation == \"vertical\":\n         idx = [1, 0, 3, 2]\n     else:\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..ef00f8f 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,12 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib._pylab_helpers import Gcf\n+import pytest\n+import sys\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n@@ -507,6 +513,27 @@ def test_rcparams_reset_after_fail():\n                 pass\n         assert mpl.rcParams['text.usetex'] is False\n \n+def test_get_backend_rc_context_issue():\n+    # Test to verify that get_backend() does not clear figures from Gcf\n+    # when they are created under an rc_context.\n+    \n+    # Ensure there's no backend switch initially\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+\n+    # Start in an rc_context\n+    with rc_context():\n+        # Create a figure inside rc_context\n+        fig = plt.figure()\n+    \n+        before = f'{id(Gcf)} {Gcf.figs!r}'\n+        \n+        # Call get_backend\n+        get_backend()\n+        \n+        after = f'{id(Gcf)} {Gcf.figs!r}'\n+        \n+        # Assert that the figures have not been cleared\n+        assert before == after, f'\\n{before}\\n{after}'\n \n @pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n def test_backend_fallback_headless(tmpdir):\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..cd3e3a2 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,6 +15,17 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+import pytest\n+\n+def test_invisible_axes_3d():\n+    fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\n+    ax1.scatter(1, 1, 1)\n+    ax1.set_visible(False)\n+    fig.canvas.draw()\n+\n+    # Assert that the ax1 is not considered during event processing\n+    assert fig.canvas.inaxes((0, 0)) is not ax1\n+    assert fig.canvas.inaxes((400, 400)) is not ax1\n \n \n mpl3d_image_comparison = functools.partial(\n",
  "matplotlib__matplotlib-23562": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..3c2a12c 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1809,6 +1809,32 @@ def test_scatter_spiral():\n     sc = ax.scatter(np.sin(th), np.cos(th), th, s=(1 + th * 5), c=th ** 2)\n \n     # force at least 1 draw!\n+\n+def test_Poly3DCollection_get_facecolor_no_error():\n+    # Ensure that get_facecolor does not raise an AttributeError\n+    y, x = np.ogrid[1:10:100j, 1:10:100j]\n+    z2 = np.cos(x) ** 3 - np.sin(y) ** 2\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111, projection='3d')\n+    r = ax.plot_surface(x, y, z2, cmap='hot')\n+    try:\n+        facecolor = r.get_facecolor()\n+        assert facecolor is not None  # Check to make sure it returns something\n+    except AttributeError:\n+        pytest.fail(\"get_facecolor raised AttributeError unexpectedly\")\n+\n+def test_Poly3DCollection_get_edgecolor_no_error():\n+    # Ensure that get_edgecolor does not raise an AttributeError\n+    y, x = np.ogrid[1:10:100j, 1:10:100j]\n+    z2 = np.cos(x) ** 3 - np.sin(y) ** 2\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111, projection='3d')\n+    r = ax.plot_surface(x, y, z2, cmap='hot')\n+    try:\n+        edgecolor = r.get_edgecolor()\n+        assert edgecolor is not None  # Check to make sure it returns something\n+    except AttributeError:\n+        pytest.fail(\"get_edgecolor raised AttributeError unexpectedly\")\n     fig.canvas.draw()\n \n \n",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..9385ea0 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -773,6 +773,15 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n     for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n         assert mpl.colors.same_color(text.get_color(), color)\n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='shabnams')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n \n def test_get_set_draggable():\n     legend = plt.legend()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..cc1ec8e 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -256,6 +256,34 @@ def test_linedash():\n     assert buf.tell() > 0\n \n \n+def test_multiline_text_with_empty_line():\n+    # Test for multiline text with an empty line in EPS format\n+    fig = Figure()\n+    fig.text(0.5, 0.5, \"Line 1\\n\\nLine 3\")\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    assert buf.tell() > 0\n+    \n+    # Test for multiline text with an empty line in PS format\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='ps')\n+    assert buf.tell() > 0\n+\n+\n+def test_annotation_with_empty_line():\n+    # Test for annotation containing a newline with an empty line\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text=\"Line 1\\n\\nLine 3\", xy=(0.5, 0.5))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    assert buf.tell() > 0\n+\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='ps')\n+    assert buf.tell() > 0\n+\n+\n def test_no_duplicate_definition():\n \n     fig = Figure()\n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..6bac6c7 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -649,10 +649,27 @@ def test_compressed1():\n \n     fig.colorbar(pc, ax=axs)\n     fig.draw_without_rendering()\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    pos = axs[0, 0].get_position()\n+@pytest.mark.parametrize('constrained', [False, True])\n+def test_no_user_warning_with_subplots_adjust(constrained):\n+    \"\"\"\n+    Test that no UserWarning is produced by subplots_adjust when\n+    constrained_layout is set to False.\n+    \"\"\"\n+    with pytest.warns(None) as r:\n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained)\n+        ax[0].plot(np.linspace(0, 2*np.pi, 100), np.sin(np.linspace(0, 2*np.pi, 100)))\n+        ax[1].plot(np.linspace(0, 2*np.pi, 100), np.cos(np.linspace(0, 2*np.pi, 100)))\n+        plt.subplots_adjust(wspace=0)\n+    if not constrained:\n+        assert len(r) == 0, \"Expected no warnings when constrained_layout=False.\"\n+    else:\n+        assert any(isinstance(warning.message, UserWarning) for warning in r)\n     np.testing.assert_allclose(pos.x0, 0.06195, atol=1e-3)\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..e2e2da0 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -29,8 +29,27 @@ def test_create_lookup_table(N, result):\n     data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n+import numpy as np\n+import pytest\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal\n \n-def test_resampled():\n+@pytest.mark.parametrize(\"value\", [257, 256, 258, -1, 270])\n+def test_no_deprecation_warnings(value):\n+    \"\"\"\n+    Test that certain integer values do not cause deprecation warnings \n+    due to out-of-bound conversion for uint8 in Matplotlib colormaps.\n+    \"\"\"\n+    with pytest.warns(None) as record:\n+        cmap = mpl.colormaps['viridis']\n+        result = cmap(np.array([value], dtype=np.uint8))\n+    assert len(record) == 0, \"Deprecation warning was raised!\"\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype(dtype):\n+    # We use subtraction in the indexing, so need to verify that uint8 works\n+    cm = mpl.colormaps[\"viridis\"]\n+    assert_array_equal(cm(dtype(0)), cm(0))\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..cd70699 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,6 +90,29 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+def test_draggable_legend_pickle():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    ax.plot(time, speed, label=\"speed\")\n+    legend = ax.legend()\n+    legend.set_draggable(True)\n+    \n+    # Try pickling the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Assert that \"FigureCanvasQTAgg\" is not in the pickle stream\n+    import pickletools\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Try unpickling\n+    loaded_fig = pickle.loads(pkl)\n+    \n+    # Close the figures to prevent resource warning in tests\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n+\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..6e0abe3 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,10 +89,37 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n+from io import BytesIO\n \n-@mpl.style.context(\"default\")\n-@check_figures_equal(extensions=[\"png\"])\n-def test_complete(fig_test, fig_ref):\n+@pytest.mark.parametrize('protocol', range(pickle.HIGHEST_PROTOCOL + 1))\n+def test_pickle_with_aligned_labels(protocol):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Ensure we test the fix by keeping this line\n+\n+    # Serialize the figure to a bytes object using the pickle protocol specified by the parameter\n+    pkl_data = pickle.dumps(fig, protocol=protocol)\n+\n+    # Load the figure back from the serialized data\n+    loaded_fig = pickle.loads(pkl_data)\n+\n+    # Check the loaded figure is an instance of matplotlib.figure.Figure\n+    assert isinstance(loaded_fig, plt.Figure)\n+\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n     _generate_complete_test_figure(fig_ref)\n     # plotting is done, now test its pickle-ability\n     pkl = BytesIO()\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..d0539e8 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,61 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+def test_mplcursor_selection():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+\n+    cursor = mplcursors.cursor()\n+    \n+    # Simulate picking some points\n+    for _ in range(5):  # Simulate clicks\n+        mplcursors.datacursormanager.select(cursor, 0) \n+    \n+    # Test that selecting does not crash\n+    assert True  # If no exception was raised, the test is passed\n+\n+def test_draggable_annotations():\n+    fig, ax = plt.subplots()\n+    an = ax.annotate(\"foo\", (.5, .5))\n+    an.draggable(True)\n+    an.remove()\n+    fig.canvas.draw()  # Ensure canvas can be drawn after removal\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_mplcursor_selection():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+\n+    cursor = mplcursors.cursor()\n+    \n+    # Simulate picking some points\n+    for _ in range(5):  # Simulate clicks\n+        mplcursors.datacursormanager.select(cursor, 0) \n+    \n+    # Test that selecting does not crash\n+    assert True  # If no exception was raised, the test is passed\n+\n+def test_draggable_annotations():\n+    fig, ax = plt.subplots()\n+    an = ax.annotate(\"foo\", (.5, .5))\n+    an.draggable(True)\n+    an.remove()\n+    fig.canvas.draw()  # Ensure canvas can be drawn after removal\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..85a1fe8 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -102,7 +102,32 @@ class TestContinuous:\n         s = Continuous(\"viridis\")._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n-    def test_color_tuple_values(self, x):\n+    def test_color_mapping_with_boolean(self):\n+        import numpy as np\n+        import pandas as pd\n+        from seaborn._core.properties import Color\n+        from seaborn._core.scales import Continuous\n+        from numpy.testing import assert_array_equal\n+\n+        # Create a Series of boolean values\n+        x = pd.Series([True, False, True, False])\n+        \n+        # Setup a Continuous scale with color, to simulate issue scenario\n+        s = Continuous()._setup(x, Color())\n+        \n+        # Generate expected outputs assuming a binary color map\n+        # True should map to one color extreme, and False to another (e.g. [1, 0] in normalized color space)\n+        # Using cmap equivalent to sns.color_palette(\"ch:\", as_cmap=True) which defaults to coolwarm\n+        expected_output = np.array([\n+            # Assumes a normalization to a binary scale for boolean, checks if True and False are handled\n+            [0.2298057, 0.29871797, 0.75368315],\n+            [0.70567316, 0.01555616, 0.15023281],\n+            [0.2298057, 0.29871797, 0.75368315],\n+            [0.70567316, 0.01555616, 0.15023281]\n+        ])\n+        \n+        # Assert that the scaled output matches the expected boolean mapping\n+        assert_array_equal(np.round(s(x), decimals=7), np.round(expected_output, decimals=7))\n \n         cmap = color_palette(\"blend:b,g\", as_cmap=True)\n         s = Continuous((\"b\", \"g\"))._setup(x, Color())\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..24e1afc 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,9 @@\n+\n import json\n import os\n import textwrap\n-\n import pytest\n+import tomllib\n \n import flask\n \n@@ -17,8 +18,16 @@ def common_object_test(app):\n     assert app.config[\"TEST_KEY\"] == \"foo\"\n     assert \"TestConfig\" not in app.config\n \n-\n-def test_config_from_pyfile():\n+def test_config_from_file_toml_binary():\n+    \"\"\"Test loading a TOML file with binary mode using from_file.\"\"\"\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    toml_file_path = os.path.join(current_dir, \"static\", \"config.toml\")\n+    \n+    # Ensure file exists in static, or adjust the test setup accordingly\n+    app.config.from_file(toml_file_path, tomllib.load, mode=\"rb\")\n+    \n+    common_object_test(app)\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n     common_object_test(app)\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..e4ca86b 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1635,8 +1635,40 @@ def test_prepared_request_complete_copy():\n     )\n     assert_copy(p, p.copy())\n \n+def test_decode_error_handling():\n+    from requests.packages.urllib3.exceptions import DecodeError\n \n-def test_prepare_unicode_url():\n+    s = requests.Session()\n+    adapter = HTTPAdapter()\n+    s.mount('http://', adapter)\n+\n+    # Monkey-patch the adapter to raise a DecodeError\n+    def mock_send(*args, **kwargs):\n+        raise DecodeError(\"Failed to decode!\")\n+\n+    adapter.send = mock_send\n+\n+    # Test if DecodeError is reraised as a requests.exceptions.HTTPError\n+    with pytest.raises(ConnectionError) as e:\n+        s.get(httpbin('status/200'))\n+    assert \"Failed to decode!\" in str(e.value)\n+\n+def test_timeout_handling():\n+    from requests.packages.urllib3.exceptions import TimeoutError\n+\n+    s = requests.Session()\n+    adapter = HTTPAdapter()\n+    s.mount('http://', adapter)\n+\n+    # Monkey-patch the adapter to raise a TimeoutError\n+    def mock_send(*args, **kwargs):\n+        raise TimeoutError(\"A timeout occurred!\")\n+\n+    adapter.send = mock_send\n+\n+    # Test if TimeoutError is reraised as a requests.exceptions.Timeout\n+    with pytest.raises(Timeout):\n+        s.get(httpbin('status/200'))\n     p = PreparedRequest()\n     p.prepare(\n         method='GET',\n@@ -1663,4 +1695,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..ab453ba 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,6 +980,27 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n+    def test_response_iter_text_vs_content(self):\n+        \"\"\"\n+        Verify that iter_content with decode_unicode=True and accessing .text provide consistent unicode output.\n+        \"\"\"\n+\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'some json content')\n+        r.encoding = 'utf-8'\n+\n+        # Check text attribute for unicode\n+        text_result = r.text\n+        assert isinstance(text_result, str), \"Expected text to be unicode (str), got type: {}\".format(type(text_result))\n+\n+        # Compare with iter_content(decode_unicode=True)\n+        chunks = list(r.iter_content(decode_unicode=True))\n+        iter_content_result = ''.join(chunks)\n+        assert isinstance(iter_content_result, str), \"Expected iter_content to yield unicode (str), got type: {}\".format(type(iter_content_result))\n+\n+        # Ensure both methods give the same result\n+        assert text_result == iter_content_result, \"Mismatch between text and iter_content(decode_unicode=True)\"\n+\n     def test_response_chunk_size_int(self):\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..18a0c93 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,8 +743,53 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    \n+    def test_hooks_registration_with_empty_list(self):\n+        \"\"\"Test that passing an empty list as hooks doesn't raise an error\"\"\"\n+        r = requests.models.Request(hooks={'args': []})\n+        assert isinstance(r.hooks['args'], list)\n+        assert len(r.hooks['args']) == 0\n+\n+    def test_registering_non_callable_hook_raises_error(self):\n+        \"\"\"Test registering a non-callable hook raises an error\"\"\"\n+        r = requests.models.Request()\n+        non_callable_hook = \"I am not callable\"\n \n-    def test_session_persistent_cookies(self):\n+        try:\n+            r.register_hook('args', non_callable_hook)\n+            assert False, \"register_hook should raise an error for non-callable hooks\"\n+        except AssertionError:\n+            pass  # An acceptable failure in test when error is raised for non-callable\n+\n+    def test_passing_non_list_hooks_argument(self):\n+        \"\"\"Test hooks argument with non-list but valid callable\"\"\"\n+        def simple_hook(args):\n+            return args\n+\n+        r = requests.models.Request(hooks={'args': simple_hook})\n+        assert callable(r.hooks['args'][0])\n+\n+    def test_multiple_hooks_called_in_order(self):\n+        \"\"\"Ensure multiple hooks are called in the order they are listed\"\"\"\n+\n+        call_order = []\n+\n+        def first_hook(args):\n+            call_order.append(\"first\")\n+            return args\n+\n+        def second_hook(args):\n+            call_order.append(\"second\")\n+            return args\n+\n+        hooks = [first_hook, second_hook]\n+        r = requests.models.Request(hooks={'args': hooks})\n+\n+        # Simulating the hook call during a request\n+        for hook in r.hooks['args']:\n+            hook({})\n+\n+        assert call_order == [\"first\", \"second\"]\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..49de444 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -73,10 +73,11 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n \n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n-    with pytest.raises(_UnrecognizedOptionError):\n+    with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err\n \n \n def test_unknown_confidence(capsys: CaptureFixture) -> None:\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..83b4e58 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,35 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_option(self) -> None:\n+        \"\"\"Test that the --recursive option respects the ignore-paths setting.\"\"\"\n+        with _test_sys_path():\n+            # Ensure the test environment is set up without unwanted paths\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Navigate to a directory with subdirectories to test ignoring paths\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory_to_ignore/.*\",\n+                        \"--msg-template='{path}:{line}:{category}:{msg}'\",\n+                    ],\n+                    code=0,\n+                )\n+\n+                # Validate that a specific file in the ignored subdirectory is not checked\n+                ignored_file = \"regrtest_data/directory/subdirectory_to_ignore/file.py\"\n+                assert not any(\n+                    ignored_file in output_line\n+                    for output_line in self._captured_output()\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..0995448 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,50 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    # Test case for the issue where a module with the same name as its parent module causes linting to fail\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"module_a/module_a.py\", \"module_a/b.py\"])\n+        linter.check([\"module_a\"])\n+    assert not linter.stats.by_msg\n+\n+\n+def test_import_from_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    # Test case for ensuring imports work correctly with identically named nested modules\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"module_a/module_a.py\", \"module_a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from module_a import b\\n\")\n+        linter.check([\"r\"])\n+    assert not linter.stats.by_msg\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    # Test case for the issue where a module with the same name as its parent module causes linting to fail\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"module_a/module_a.py\", \"module_a/b.py\"])\n+        linter.check([\"module_a\"])\n+    assert not linter.stats.by_msg\n+\n+\n+def test_import_from_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    # Test case for ensuring imports work correctly with identically named nested modules\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"module_a/module_a.py\", \"module_a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from module_a import b\\n\")\n+        linter.check([\"r\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..da5fdf9 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -14,7 +15,7 @@ from json import dumps\n from typing import TYPE_CHECKING\n \n import pytest\n-\n+from _pytest.recwarn import WarningsRecorder\n from pylint import checkers\n from pylint.interfaces import HIGH\n from pylint.lint import PyLinter\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "",
  "pytest-dev__pytest-5227": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 1ebe9d0..01f354c 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..663148e 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,4 +1,7 @@\n+\n import os\n+import platform\n+from datetime import datetime\n from xml.dom import minidom\n \n import py\n@@ -157,7 +160,37 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        # Run the testdir with JUnit XML output and parse the result\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+\n+        # Assert hostname is included and correct\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        # Capture the time before running the test\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+\n+        # Check that the timestamp attribute is present and in the correct format\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+\n+        # Verify that the timestamp falls within the expected range\n+        assert start_time <= timestamp <= datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..901cc9c 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,8 +143,47 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+from _pytest._io.saferepr import saferepr\n+\n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_exception_in_repr():\n+    \"\"\"saferepr() handles exceptions raised in __repr__ correctly\"\"\"\n+    class AnotherClass:\n+        def __repr__(self):\n+            raise ValueError(\"An error occurred in __repr__\")\n+\n+    result = saferepr(AnotherClass())\n+    assert result.startswith(\"<[ValueError('An error occurred in __repr__'\") \n+\n+def test_multiple_exceptions_in_repr_and_getattribute():\n+    \"\"\"saferepr() handles exceptions in both __repr__ and __getattribute__\"\"\"\n+    class ComplexClass:\n+        def __getattribute__(self, attr):\n+            if attr == \"trigger\":\n+                raise AttributeError(\"Cannot access\")\n+\n+        def __repr__(self):\n+            raise TypeError(\"Problem in __repr__\")\n+\n+    obj = ComplexClass()\n+    with pytest.raises(AttributeError):\n+        _ = obj.trigger\n \n-def test_unicode():\n+    result = saferepr(obj)\n+    assert result.startswith(\"<[TypeError('Problem in __repr__'\")\n     val = \"\u00a3\u20ac\"\n     reprval = \"'\u00a3\u20ac'\"\n     assert saferepr(val) == reprval\n@@ -153,4 +192,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..4539197 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -88,6 +88,30 @@ def test_testdir_runs_with_plugin(testdir) -> None:\n     result = testdir.runpytest()\n     result.assert_outcomes(passed=1)\n \n+def test_failure_with_changed_cwd(testdir) -> None:\n+    \"\"\"Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n \n def test_testdir_with_doctest(testdir):\n     \"\"\"Check that testdir can be used within doctests.\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..e593b26 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+import os\n from unittest import mock\n \n import pytest\n@@ -9,7 +10,38 @@ from _pytest.mark import MarkGenerator as Mark\n from _pytest.nodes import Collector\n from _pytest.nodes import Node\n \n+def test_skipif_caching_correctness(testdir):\n+    \"\"\"Test that skipif conditions are correctly re-evaluated based on context.\"\"\"\n+    py_file1 = testdir.makepyfile(\n+        test_module_1=\"\"\"\n+        import pytest\n+        \n+        skip = True\n+        \n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_skip():\n+            assert False\n+        \"\"\"\n+    )\n+    \n+    py_file2 = testdir.makepyfile(\n+        test_module_2=\"\"\"\n+        import pytest\n+        \n+        skip = False\n+        \n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_not_skip():\n+            assert True\n+        \"\"\"\n+    )\n+\n+    # Run both test files together\n+    reprec = testdir.inline_run(py_file1, py_file2)\n+    # Assert that one test is skipped and one test passes\n+    reprec.assertoutcome(skipped=1, passed=1)\n \n+# Adding the new test into the current test class for better organization\n class TestMark:\n     @pytest.mark.parametrize(\"attr\", [\"mark\", \"param\"])\n     @pytest.mark.parametrize(\"modulename\", [\"py.test\", \"pytest\"])\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..c8f6ee4 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -235,6 +235,23 @@ class TestXFail:\n             [\"*def test_func():*\", \"*assert 0*\", \"*1 failed*1 pass*\"]\n         )\n \n+    def test_skip_with_runxfail(self, testdir):\n+        \"\"\"Test that --runxfail does not affect pytest.mark.skip location reporting.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.skip(reason=\"unconditional skip\")\n+            def test_skip():\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_with_runxfail.py:3: unconditional skip\"])\n+        \n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_with_runxfail.py:3: unconditional skip\"])\n+\n     def test_xfail_evalfalse_but_fails(self, testdir):\n         item = testdir.getitem(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..77cddb2 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,6 +1,8 @@\n+\n import sys\n \n import pytest\n+from _pytest.pytester import Testdir\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n@@ -382,7 +384,32 @@ class TestXFail:\n         \"\"\"\n         )\n \n-    def xtest_dynamic_xfail_set_during_setup(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+    \n+    def test_dynamic_xfail_set_during_runtest_passed_strict(\n+        self, testdir: Testdir\n+    ) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..00c97cb 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -21,6 +22,7 @@ from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n from _pytest.tmpdir import get_user\n from _pytest.tmpdir import TempdirFactory\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest.tmpdir import TempPathFactory\n \n \n@@ -440,6 +442,35 @@ def test_basetemp_with_read_only_files(pytester: Pytester) -> None:\n             os.chmod(str(fn), mode & ~stat.S_IREAD)\n     \"\"\"\n     )\n+\n+def test_tmp_path_factory_handles_invalid_dir_characters(tmp_path_factory: TempdirFactory, monkeypatch: MonkeyPatch) -> None:\n+    # Test with Windows-specific illegal characters\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"user<name?\")\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p1 = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p1)\n+\n+    # Test with Unix-specific illegal characters\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"user/name:\")\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p2 = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p2)\n+\n+    # Test with cross-platform illegal characters\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"user*|name\")\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p3 = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p3)\n+\n+    # Test with no illegal characters to ensure normal operation\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"username\")\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p4 = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-username\" in str(p4)\n     result = pytester.runpytest(\"--basetemp=tmp\")\n     assert result.ret == 0\n     # running a second time and ensure we don't crash\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..793728b 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,24 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+from sklearn.linear_model import RidgeClassifierCV\n \n-def test_ridgecv_store_cv_values():\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute\n+    rng = np.random.RandomState(42)\n+\n+    # Generate random data\n+    n_samples, n_features = 100, 30\n+    X = rng.randn(n_samples, n_features)\n+    y = rng.choice([0, 1], size=(n_samples,))\n+\n+    # Set alphas and fit the model\n+    alphas = np.arange(0.1, 10, 0.1)\n+    clf = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    clf.fit(X, y)\n+\n+    # The shape of cv_values_ should align with (n_samples, n_alphas)\n+    assert clf.cv_values_.shape == (n_samples, len(alphas))\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..1785e26 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -16,12 +16,43 @@ from sklearn.mixture import BayesianGaussianMixture\n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n from sklearn.exceptions import ConvergenceWarning\n from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n+import numpy as np\n+from sklearn.exceptions import NotFittedError\n+from sklearn.utils.testing import assert_raise_message\n \n \n COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n PRIOR_TYPE = ['dirichlet_process', 'dirichlet_distribution']\n \n \n+def test_bayesian_mixture_labels():\n+    \"\"\"Test that BayesianGaussianMixture stores labels_ attribute.\"\"\"\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng, scale=7)\n+    n_components = 2 * rand_data.n_components\n+\n+    for covar_type in COVARIANCE_TYPE:\n+        bgmm = BayesianGaussianMixture(n_components=n_components,\n+                                       max_iter=100, random_state=rng,\n+                                       tol=1e-3, reg_covar=0.1,\n+                                       covariance_type=covar_type)\n+        X = rand_data.X[covar_type]\n+\n+        # Ensure labels_ attribute does not exist before fitting\n+        try:\n+            _ = bgmm.labels_\n+            raise AssertionError(\"labels_ should not be accessible before fitting\")\n+        except AttributeError:\n+            pass  # This is expected behavior\n+        \n+        # Fit the model\n+        bgmm.fit(X)\n+        \n+        # Check that labels_ attribute is present and has correct shape\n+        assert hasattr(bgmm, \"labels_\"), \"BayesianGaussianMixture should store labels_ after fitting\"\n+        assert bgmm.labels_.shape == (X.shape[0],), \"labels_ should have the same number of samples as X\"\n+        \n+\n def test_log_dirichlet_norm():\n     rng = np.random.RandomState(0)\n \n",
  "scikit-learn__scikit-learn-12471": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..d36b276 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -596,9 +596,17 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         Y_pred2 = g.fit_predict(X)\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n-\n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    import numpy as np\n+    from sklearn.mixture import GaussianMixture\n+    from numpy.testing import assert_array_equal\n+\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..372e7db 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -13,8 +14,18 @@ from sklearn.pipeline import Pipeline\n from sklearn.model_selection import GridSearchCV\n from sklearn.metrics.pairwise import rbf_kernel\n \n+def test_kernel_pca_sign_indeterminacy():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+\n+    transformed = kpca.fit_transform(X)\n \n-def test_kernel_pca():\n+    # Transform the same data multiple times to see if there is any sign difference\n+    for _ in range(10):\n+        transformed_again = kpca.fit_transform(X)\n+        # Check if the absolute values of results remain the same, allowing sign flips\n+        assert_allclose(np.abs(transformed), np.abs(transformed_again))\n     rng = np.random.RandomState(0)\n     X_fit = rng.random_sample((5, 4))\n     X_pred = rng.random_sample((2, 4))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..f90a34f 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1070,4 +1070,23 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n+\n+\n+def test_pipeline_len():\n+    # Test case to verify the implementation of __len__ for Pipeline\n+\n+    # Test with no steps\n+    pipe_empty = Pipeline([])\n+    assert len(pipe_empty) == 0, \"Expected length 0 for empty pipeline\"\n+\n+    # Test with one step\n+    pipe_single = Pipeline([('svc', SVC())])\n+    assert len(pipe_single) == 1, \"Expected length 1 for single step pipeline\"\n+\n+    # Test with two steps\n+    pipe_double = Pipeline([('transform', DummyTransf()), ('svc', SVC())])\n+    assert len(pipe_double) == 2, \"Expected length 2 for two step pipeline\"\n+\n+    # Ensure accessing length works with slicing\n+    assert pipe_double[:len(pipe_double)], \"Slicing with length should not raise errors\"\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..f4289c2 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..ef56fbd 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -195,6 +195,16 @@ def test_mutual_info_options():\n                            random_state=0)\n \n         assert_array_equal(mi_1, mi_2)\n+\n+        # Additional test cases for validating different forms of discrete_features\n+        assert_raises(ValueError, mutual_info, X, y, discrete_features='manual')\n+        assert_raises(ValueError, mutual_info, X_csr, y, discrete_features=[True, False, True])\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False, True, False])\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n+\n+        mi_5 = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        mi_6 = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        assert_array_equal(mi_5, mi_6)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..8a10696 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,9 +1,12 @@\n+\n import re\n from pprint import PrettyPrinter\n \n import numpy as np\n \n from sklearn.utils._pprint import _EstimatorPrettyPrinter\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n@@ -214,6 +217,17 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_array_parameter():\n+    # Ensure that using array parameters doesn't raise ValueError when print_changed_only is True\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        assert isinstance(repr_output, str)\n+    except ValueError as e:\n+        pytest.fail(f\"Test failed due to an unexpected ValueError: {e}\")\n+    finally:\n+        set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..2bf7a09 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -118,8 +118,33 @@ def test_finite_differences():\n     rel_diff = check_grad(fun, grad, M.ravel()) / np.linalg.norm(grad(M))\n     np.testing.assert_almost_equal(rel_diff, 0., decimal=5)\n \n+import numpy as np\n+\n+def test_nca_with_np_types_in_gridsearch():\n+    # Test that the NCA works with np.number types in a GridSearchCV\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.model_selection import GridSearchCV\n+    from sklearn.neighbors import NeighborhoodComponentsAnalysis, KNeighborsClassifier\n+    \n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n \n-def test_params_validation():\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+                \n+    params = {\n+        'nca__tol': [0.1, 0.5, 1, np.float32(1.0)],  # include np.float32\n+        'nca__n_components': np.arange(1, 10, dtype=np.int64)  # np.int64 range\n+    }\n+          \n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n+    \n+    # Check if the best parameters are set and within the expected range\n+    assert 'nca__tol' in gs.best_params_\n+    assert 'nca__n_components' in gs.best_params_\n     # Test that invalid parameters raise value error\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n",
  "scikit-learn__scikit-learn-14894": "",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..cc1108e 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,20 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = (\n+        '{}(n_repeats=6, n_splits=2, random_state=None)'\n+        .format(repeated_cv.__class__.__name__)\n+    )\n+    assert repeated_cv_repr == repr(repeated_cv)\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..5232d53 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -668,7 +669,24 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_isotonic_with_pandas_output():\n+    \"\"\"Test CalibratedClassifierCV with isotonic regression and pandas output.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")  # Ensure pandas is available\n+    X, y = make_classification(n_samples=30, n_features=3, random_state=42)\n+    set_config(transform_output=\"pandas\")\n+\n+    model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\n+\n+    # Fit the model and predict\n+    model.fit(X, y)\n+    predictions = model.predict(X)\n+\n+    # Check that predictions are a numpy ndarray, not a pandas DataFrame\n+    assert isinstance(predictions, np.ndarray)\n+\n+    # Check predict_proba does not raise an exception and returns numpy array\n+    proba = model.predict_proba(X)\n+    assert isinstance(proba, np.ndarray)\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..56690ca 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -113,16 +113,255 @@ def test_automodule_special_members(app):\n     ]\n \n \n-@pytest.mark.sphinx('html', testroot='ext-autodoc',\n-                    confoverrides={'autodoc_mock_imports': ['missing_module',\n-                                                            'missing_package1',\n-                                                            'missing_package2',\n-                                                            'missing_package3',\n-                                                            'sphinx.missing_module4']})\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_multiple_inheritance(app):\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base,AnotherBase'\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance_multiple', options)\n+    assert '.. py:class:: MultiDerived()' in actual\n+    assert '.. py:method:: MultiDerived.inheritedmeth_from_base()' in actual\n+    assert '.. py:method:: MultiDerived.method_from_anotherbase()' in actual\n+    assert '.. py:method:: MultiDerived.method_to_exclude()' not in actual\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_excluding_builtin_bases(app):\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'MyCustomBase'\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance_with_builtins', options)\n+    assert '.. py:class:: CustomDerived()' in actual\n+    assert '.. py:method:: CustomDerived.method_from_mycustombase()' in actual\n+    assert '.. py:method:: CustomDerived.method_ignored()' not in actual\n @pytest.mark.usefixtures(\"rollback_sysmodules\")\n def test_subclass_of_mocked_object(app):\n     sys.modules.pop('target', None)  # unload target module to clear the module cache\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..fd90acb 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,62 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+import pytest\n+from sphinx import addnodes\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util.docutils import new_document\n+from docutils.parsers.rst import Parser\n+from sphinx.util.nodes import make_refnode\n+from sphinx.domains.std import StandardDomain\n+from sphinx.testing.util import assert_node\n+\n+def restructuredtext_parse(app: SphinxTestApp, text: str):\n+    \"\"\"Helper function to parse reStructuredText text to a docutils doctree.\"\"\"\n+    document = new_document('<test>', settings=app.env.settings)\n+    parser = Parser()\n+    parser.parse(text, document)\n+    return document\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext_parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '-j'],\n+                                                    [addnodes.desc_addname, '[=N]'])],\n+                                  [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext_parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[enable'],\n+                                                    [addnodes.desc_addname, '=]PATTERN'])],\n+                                  [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+def test_cmd_option_with_spaces_and_symbols(app):\n+    text = \".. option:: --name=<value>\"\n+    doctree = restructuredtext_parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '--name'],\n+                                                    [addnodes.desc_addname, '=<value>'])],\n+                                  [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--name', '--name', 'cmdoption', 'index', 'cmdoption-name', 1) in objects\n+\n+def test_cmd_option_with_multiple_equals(app):\n+    text = \".. option:: --file=path=name\"\n+    doctree = restructuredtext_parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '--file'],\n+                                                    [addnodes.desc_addname, '=path=name'])],\n+                                  [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--file', '--file', 'cmdoption', 'index', 'cmdoption-file', 1) in objects\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..32c3391 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -44,8 +44,41 @@ def do_autodoc(app, objtype, name, options=None):\n \n     return bridge.result\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_no_members(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_with_all_option(app):\n+    options = {'members': True, 'show_inheritance': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n \n-def make_directive_bridge(env):\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_inherit_members(app):\n+    options = {'members': True, 'inherited_members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n     options = Options(\n         inherited_members = False,\n         undoc_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..d2b97f4 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -16,6 +17,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n import pytest\n \n from sphinx.util.typing import restify, stringify\n+from struct import Struct\n \n \n class MyClass1:\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..c77c1b5 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1435,6 +1435,37 @@ class NumpyDocstringTest(BaseDocstringTest):\n         \"\"\")\n         self.assertEqual(expected, actual)\n \n+    def test_other_parameters_with_napoleon_use_param_false(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        # Test with napoleon_use_param set to False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_napoleon_use_param_true(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        # Test with napoleon_use_param set to True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n@@ -1447,6 +1478,37 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n :Parameters: **param1** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_napoleon_use_param_false(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        # Test with napoleon_use_param set to False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_napoleon_use_param_true(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        # Test with napoleon_use_param set to True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1455,6 +1517,37 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_napoleon_use_param_false(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        # Test with napoleon_use_param set to False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_napoleon_use_param_true(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        # Test with napoleon_use_param set to True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..0d2f66a 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -60,8 +60,19 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/c/' in stuff\n     assert 'http://foobar/cpp/' in stuff\n \n+import pytest\n+from pathlib import Path\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_default(app, status, warning):\n+    app.builder.build_all()\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..03d5232 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -322,6 +322,27 @@ def test_mul():\n         assert h == h2\n \n \n+def test_non_disjoint_cycles():\n+    # Non-disjoint cycles should apply in left-to-right order\n+    # [[0, 1], [0, 1]] should result in identity, as they negate each other\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # [[0, 1], [1, 2]] should apply [0, 1] first, then [1, 2]\n+    # Resulting in 1 -> 2, 0 -> 1, 2 -> 0\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+\n+    # Testing larger cycles with overlap\n+    # [[0, 1, 2], [1, 2, 3]] applies [0, 1, 2] then [1, 2, 3]\n+    # Resulting in 0 -> 1 -> 2 -> 3 -> 0\n+    assert Permutation([[0, 1, 2], [1, 2, 3]]) == Permutation([1, 3, 0, 2])\n+\n+    # Identity from non-disjoint application\n+    assert Permutation([[0, 2], [2, 0]]) == Permutation([0, 1, 2])\n+\n+    # Test with size specified\n+    assert Permutation([[0, 1], [0, 1]], size=3) == Permutation([0, 1, 2])\n+\n+# Existing test\n def test_args():\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..230df44 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,4 +1,5 @@\n-from sympy import Abs, S, Symbol, I, Rational, PurePoly\n+\n+from sympy import Abs, S, Symbol, I, Rational, PurePoly, Matrix\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n@@ -448,6 +449,28 @@ def test_sparse_matrix():\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n \n+def test_matrix_hstack_vstack():\n+    # Original test patch for horizontal stacking of sparse matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n+    \n+    # Vertical stacking\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n+\n+    # Additional tests for Matrix.hstack with different dimensions\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (0, 6)  # Expected shape for empty rows\n+\n+    # Test for non-empty matrices\n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(1, 2)\n+    M4 = Matrix.zeros(1, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (1, 6)  # Expected shape for one row\n \n def test_transpose():\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..c2e9f7c 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -114,8 +114,20 @@ def test_core_relational():\n               StrictLessThan(x, y), Unequality, Unequality(x, y)):\n         check(c)\n \n+import pickle\n+import sys\n+from sympy import symbols, Float\n+\n+def test_pickle_float_expression_python2_to_python3():\n+    # Simulate a pickled expression from Python 2\n+    # Here, '1L' should be converted to an integer in Python 3\n+    pickled_data = pickle.dumps(Float((0, '1L', 0, 1)))\n+\n+    # Simulate loading the pickled expression in Python 3\n+    loaded_data = pickle.loads(pickled_data)\n \n-def test_core_add():\n+    # Verify that the loaded data is correctly interpreted as a Float\n+    assert loaded_data == Float((0, '1', 0, 1))\n     x = Symbol(\"x\")\n     for c in (Add, Add(x, 4)):\n         check(c)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..d6ada56 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -263,6 +263,17 @@ def test_coth():\n     assert coth(pi*I/105) == -cot(pi/105)*I\n     assert coth(-pi*I/105) == cot(pi/105)*I\n \n+def test_coth_log_tan():\n+    x = Symbol('x')\n+    # Test cases to ensure the subs method doesn't produce errors for integral values\n+    e = coth(log(tan(x)))\n+    for value in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        try:\n+            result = e.subs(x, value)\n+            assert isinstance(result, (Basic, float, complex)), f\"Failed for value: {value}\"\n+        except Exception as ex:\n+            assert False, f\"Exception {ex} for value: {value}\"\n+\n     assert coth(2 + 3*I) == coth(2 + 3*I)\n \n     assert coth(x*I) == -cot(x)*I\n",
  "sympy__sympy-13647": "",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..3d85013 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -616,50 +616,52 @@ def test_latex_Range():\n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n \n+from sympy import symbols, oo, SeqFormula, SeqPer, SeqAdd, SeqMul, latex\n+\n def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n     assert latex(s1) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n+    latex_str = r'[1, 2, 1, 2, \\ldots]'\n     assert latex(s2) == latex_str\n \n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4\\right\\]'\n+    latex_str = r'[0, 1, 4]'\n     assert latex(s3) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1\\right\\]'\n+    latex_str = r'[1, 2, 1]'\n     assert latex(s4) == latex_str\n \n     s5 = SeqFormula(a**2, (-oo, 0))\n     s6 = SeqPer((1, 2), (-oo, 0))\n \n-    latex_str = r'\\left\\[\\ldots, 9, 4, 1, 0\\right\\]'\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n     assert latex(s5) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 2, 1, 2, 1\\right\\]'\n+    latex_str = r'[\\ldots, 2, 1, 2, 1]'\n     assert latex(s6) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5, 11, \\ldots\\right\\]'\n+    latex_str = r'[1, 3, 5, 11, \\ldots]'\n     assert latex(SeqAdd(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5\\right\\]'\n+    latex_str = r'[1, 3, 5]'\n     assert latex(SeqAdd(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 11, 5, 3, 1\\right\\]'\n+    latex_str = r'[\\ldots, 11, 5, 3, 1]'\n     assert latex(SeqAdd(s5, s6)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4, 18, \\ldots\\right\\]'\n+    latex_str = r'[0, 2, 4, 18, \\ldots]'\n     assert latex(SeqMul(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4\\right\\]'\n+    latex_str = r'[0, 2, 4]'\n     assert latex(SeqMul(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n+    latex_str = r'[\\ldots, 18, 4, 2, 0]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..f47ca8f 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..3cf2884 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6121,8 +6121,17 @@ def test_MatrixSymbol_printing():\n     assert pretty(A - B) == \"-B + A\"\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n-\n-def test_degree_printing():\n+from sympy import MatrixSymbol, MatAdd, symbols\n+from sympy.printing.pretty import pretty\n+\n+def test_pretty_print_MatAdd_issue_14814():\n+    # Test case for issue #14814\n+    n = symbols('n')\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    \n+    assert pretty(x + y_star) == \"x + y*\"\n+    assert pretty(-x + -2*y_star) == \"-x -2*y*\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..c37b5a6 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,6 +728,22 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    import sympy as sy\n+    curlyx = sy.symbols(\"{x}\")\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    lam_scalar = lambdify(curlyx, curlyx)\n+    assert lam_scalar(1) == 1\n+\n+    # The following should work without error, indicating the issue is resolved\n+    lam_vector = lambdify(curlyv, curlyv)\n+    assert (lam_vector([[1], [0]]) == [[1], [0]]).all()\n+\n+    # Testing with dummify=True\n+    lam_vector_dummify = lambdify(curlyv, curlyv, dummify=True)\n+    assert (lam_vector_dummify([[1], [0]]) == [[1], [0]]).all()\n+\n def test_python_keywords():\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..62a3e7b 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -29,8 +30,12 @@ def test_Function():\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n \n-\n-def test_Pow():\n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(y, x, 2)) == \"Max[y, x, 2]\"\n+    assert mcode(Max(x, y) + Min(y, z)) == \"Max[x, y] + Min[y, z]\"\n+    assert mcode(Max(x + y, 2)) == \"Max[x + y, 2]\"\n     assert mcode(x**3) == \"x^3\"\n     assert mcode(x**(y**3)) == \"x^(y^3)\"\n     assert mcode(1/(f(x)*3.5)**(x - y**x)/(x**2 + y)) == \\\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..1b945d7 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..7901e33 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,11 +1,30 @@\n+\n from sympy import Symbol, sqrt, Derivative, S\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n from sympy.utilities.pytest import raises\n \n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n \n def test_idiff():\n+    # Import necessary functionality\n+    f = Function('f')\n+    g = Function('g')\n+    \n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+\n+    # Test using Eq(y*exp(y), x*exp(x)) syntax\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x).simplify() == (x + 1)*exp(x - y)/(y + 1)\n+\n+    # Test using f(x) syntax rather than y\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x).simplify() == (x + 1)*exp(x - f(x))/(f(x) + 1)\n+\n+    # Original tests provided in patch\n+    assert idiff(f(x) - y*exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y*exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..1346d85 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -581,8 +581,27 @@ def test_ccode_cse():\n         '}\\n'\n     )\n     assert source == expected\n-\n-def test_empty_f_code():\n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen, CCodeGen\n+    from sympy.matrices.expressions.matexpr import MatrixSymbol\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..fbeba35 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,9 +342,24 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, Piecewise, Eq, S\n+from sympy.abc import x\n \n-def test_issue_9623():\n-    n = Symbol('n')\n+\n+def test_intersection_duplicates():\n+    # Test if Intersection with duplicates works as expected\n+    result = Intersection({1}, {1}, {x})\n+    expected = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert result == expected\n+\n+    result = Intersection({1}, {x}, {1})\n+    assert result == expected\n+\n+    result = Intersection({1}, {1}, {1})\n+    assert result == Intersection({1})\n+\n+    result = Intersection({x}, {x}, {x})\n+    assert result == Intersection({x})\n \n     a = S.Reals\n     b = Interval(0, oo)\n",
  "sympy__sympy-17022": "",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_fu.py b/sympy/simplify/tests/test_fu.py\nindex 135b4cd..48d122e 100644\n--- a/sympy/simplify/tests/test_fu.py\n+++ b/sympy/simplify/tests/test_fu.py\n@@ -67,6 +67,11 @@ def test_TR3():\n         j = TR3(i)\n         assert verify_numerically(i, j) and i.func != j.func\n \n+def test_issue_17137():\n+    x = symbols('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n \n def test__TR56():\n     h = lambda x: 1 - x\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..777e8af 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,10 +1,24 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n-\n+import sympy\n+\n+def test_issue_multiplication_order():\n+    from sympy import geometry as ge\n+    point1 = ge.Point(0, 0)\n+    point2 = ge.Point(1, 1)\n+    \n+    # Test adding point and multiplied result - original order\n+    result1 = point1 + point2 * sympy.sympify(2.0)\n+    assert result1 == ge.Point(2, 2)\n+    \n+    # Test adding point and multiplied result - swapped order\n+    result2 = point1 + sympy.sympify(2.0) * point2\n+    assert result2 == ge.Point(2, 2)\n \n def test_point():\n     x = Symbol('x', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..acc65fe 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,32 @@ def test_normal():\n     assert e.normal() == e\n \n \n+import pytest\n+import sympy\n+from sympy import symbols, Symbol, sympify, Eq, Ne\n+from sympy.core.sympify import SympifyError\n+from sympy.testing.pytest import raises\n+\n+def test_repr_eval_issue():\n+    # Reproducing the original reported issue\n+    x = symbols('x')\n+\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    \n+    # Ensure x is not equal to C(), avoiding eval on repr 'x.y'\n+    result = (x == C())\n+    assert result is False, \"x should not equal C(), and should not attempt to eval x.y\"\n+\n+    # Related issue: Handle string representations that look like valid symbol names\n+    class C2:\n+        def __repr__(self):\n+            return 'x'\n+    \n+    # Assert that a Symbol and an object with repr 'x' are not equal\n+    assert x != C2(), \"Symbol x should not incorrectly equate to an object with repr 'x'\"\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1928,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..9d60ba4 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,6 +553,18 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+    # Test issue: diophantine returns incomplete results depending on syms order with permute=True\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    # Additional check with permute=False to ensure base solution consistency\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(x, y), permute=False) == \\\n+        set([(2, 3)])\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(y, x), permute=False) == \\\n+        set([(3, 2)])\n+\n \n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..ef094f0 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,7 +67,7 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert sz.atoms() == {String(typename), String('sizeof')}\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..3afec5a 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,42 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+    # Test that a BlockDiagMatrix with one matrix element can be converted to a regular matrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_BlockDiagMatrix_multiple_elements_conversion():\n+    from sympy import Matrix, BlockDiagMatrix, zeros\n+    # Test conversion with multiple elements\n+    M = Matrix([[1, 2], [3, 4]])\n+    Z = zeros(2, 2)  # Zero matrix for block diagonal test\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B == expected\n+\n+    # Additional test with a larger mixed block matrix\n+    D = BlockDiagMatrix(M, Z, M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0, 0, 0],\n+        [3, 4, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0],\n+        [0, 0, 1, 2, 0, 0],\n+        [0, 0, 3, 4, 0, 0]\n+    ])\n+    assert B == expected\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..6eea16c 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -83,7 +84,20 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_issue_blockmatrix_symbolic_index():\n+    n, i = symbols('n, i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+\n+    # Assert that C[i, 0] is not simplified to (A)[i, 0] incorrectly\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+\n+    # Additional test cases for correct indexing with symbolic indices\n+    # Ensure that specific indices resolve correctly\n+    assert C[0, 0] == A[0, 0]\n+    assert C[1, 0] == B[0, 0]\n+    assert C[n - 1, 0] == B[n - 1, 0]\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..1976455 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -302,7 +302,38 @@ def test_sign():\n     assert sign(x).rewrite(Heaviside) == 2*Heaviside(x, H0=S(1)/2) - 1\n     assert sign(y).rewrite(Heaviside) == sign(y)\n \n-    # evaluate what can be evaluated\n+    \n+    # Test rewrite of sign in terms of Abs\n+    from sympy import Abs, Piecewise, Eq, Function\n+    x, y = symbols('x y', complex=True)\n+    \n+    # Test for symbolic complex variable\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    \n+    # Test for symbolic function\n+    f = Function('f')\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x)/Abs(f(x)), True))\n+    \n+    # Test for zero values\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # Test for positive real numbers\n+    assert sign(5).rewrite(Abs) == 1\n+\n+    # Test for negative real numbers\n+    assert sign(-3).rewrite(Abs) == -1\n+\n+    # Test for positive imaginary numbers\n+    assert sign(4*I).rewrite(Abs) == I\n+\n+    # Test for negative imaginary numbers\n+    assert sign(-2*I).rewrite(Abs) == -I\n+\n+    # Test for non-zero combinations\n+    assert sign(3 + 4*I).rewrite(Abs) == (3 + 4*I)/5\n+\n+    # Test additional conditions where rewrite should match existing behavior\n+    assert sign(3*x).rewrite(Abs) == Piecewise((0, Eq(3*x, 0)), (x/Abs(x), True))\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n     eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..c184e44 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -514,7 +514,30 @@ def test_partitions():\n         assert i == RGS_enum(n)\n \n \n-def test_binary_partitions():\n+def test_partitions_reuse():\n+    # Check if partitions() reuses dictionaries by making simple modifications\n+    # to the returned dictionaries and seeing if subsequent yields are affected\n+    partition_generator = partitions(6, k=2)\n+    first_partition = next(partition_generator)\n+    first_partition[2] = 100  # Modify the first yielded dictionary\n+\n+    # Next call should yield a different dictionary for the second partition\n+    second_partition = next(partition_generator)\n+    assert second_partition != first_partition  # Ensure the modification didn't persist\n+\n+    # Check that list conversion (like what a user might do) doesn't result in all the same dictionary\n+    partition_list = list(partitions(6, k=2))\n+    assert partition_list == [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+\n+    # Check size option isn't affected\n+    partition_with_size = list(partitions(6, k=2, size=True))\n+    assert partition_with_size == [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]\n+\n+    # Iterate over partitions with modification\n+    for p in partitions(5, k=2):\n+        p[1] = 'modified'\n+    # Ensure no side-effect from the above iteration\n+    assert list(partitions(5, k=2)) == [{2: 2, 1: 1}, {2: 1, 1: 3}, {1: 5}]\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..1d6b671 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,7 +254,10 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n-def test_zero():\n+def test_issue_19572():\n+    # Test for the issue where 0**-oo should return zoo\n+    assert 0 ** -oo == S.ComplexInfinity\n+    assert Pow(0, -oo) == S.ComplexInfinity\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..e370e80 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,21 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_dict_absence():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__') or s.__dict__ == {}\n+\n+def test_symbol_slots():\n+    s = Symbol('s')\n+    assert hasattr(s, '__slots__') and s.__slots__ == ('name',)\n+\n+def test_symbol_property_access():\n+    s = Symbol('s')\n+    assert s.name == 's'\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..50bc289 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,24 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_refine_complex_arguments():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x')\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo)).doit()\n+\n+    # Test that an Integral with piecewise condition on arg(a) simplifies correctly\n+    refined_J = refine(J, Q.positive(a))\n+    assert refined_J == 1 / (a**2 + 1)\n+\n+    # Test arg function under the assumption that 'a' is positive\n+    assert refine(arg(a), Q.positive(a)) == 0\n+\n+    # Test a negative real number case\n+    assert refine(arg(a), Q.negative(a)) == pi\n+\n+    # Test other related functions\n+    assert refine(abs(a), Q.positive(a)) == a\n+    assert refine(abs(a), Q.negative(a)) == -a\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..5601493 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -8,7 +9,28 @@ from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n-def test_subs():\n+def test_issue_21373_subs_with_Piecewise():\n+    from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+    x, y, z = symbols('x y z', real=True)\n+\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    expr_cosh = exp(cosh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_cosh.subs({1: 1.0}) == expr_cosh.subs({1: 1.0})\n+\n+    expr_tanh = exp(tanh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_tanh.subs({1: 1.0}) == expr_tanh.subs({1: 1.0})\n+\n+    expr_without_div = exp(sinh(Piecewise((x, y > x), (y, True))))\n+    assert expr_without_div.subs({1: 1.0}) == expr_without_div.subs({1: 1.0})\n+\n+    expr_without_exp = sinh(Piecewise((x, y > x), (y, True)) / z)\n+    assert expr_without_exp.subs({1: 1.0}) == expr_without_exp.subs({1: 1.0})\n+\n+    expr_no_real = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_no_real.subs({1: 1.0}) == expr_no_real.subs({1: 1.0})\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..5752540 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -39,7 +41,10 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n-def test_Matrix_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2,2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n         m = cls.zeros(3, 2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..7328a51 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,6 +131,37 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n+    # Test case to verify the issue where itermonomials is expected to generate all monomials between min and max degrees\n+\n+    # Assert monomials with total degree exactly 3\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, \n+        x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, x3**2*x1, x3**2*x2,\n+        x1*x2*x3\n+    }\n+\n+    # Assert monomials with total degree between 2 and 3\n+    assert set(itermonomials([x1, x2], 3, 2)) == {\n+        x1**2, x2**2, x1*x2,\n+        x1**3, x1**2*x2, x1*x2**2, x2**3\n+    }\n+\n+    # Assert monomials with total degree between 2 and 2 (exactly 2)\n+    assert set(itermonomials([i, j, k], 2, 2)) == {\n+        i**2, j**2, k**2, \n+        i*j, i*k, j*k\n+    }\n+\n+    # Assert monomials with total degree between 2 and 3 for multiple variables\n+    assert set(itermonomials([a, b, c], 3, 2)) == {\n+        a**2, b**2, c**2, \n+        a*b, a*c, b*c,\n+        a**3, a**2*b, a**2*c, b**2*a, b**2*c, c**2*a, c**2*b, \n+        a*b**2, a*c**2, b*c**2,\n+        a*b*c\n+    }\n+\n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..1ff61e6 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,8 +50,25 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n+def test_issue_infinite_solution_detection():\n+    from sympy import Poly\n+    from sympy.abc import x, y\n \n-def test_solve_biquadratic():\n+    # Ensure NotImplementedError for possibly infinite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [Poly(x - 1, x, y)], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [Poly(y - 1, x, y)], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [Poly(x - 1, x, y, z)], (x, y, z)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [Poly(y - 1, x, y, z)], (x, y, z)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1, y - 1], (x, y)))\n+    \n+    # More complex cases to ensure coverage\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x*y - 1, x + y - 2], (x, y)))\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n \n     f_1 = (x - 1)**2 + (y - 1)**2 - r**2\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7057531 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..c3b7454 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -337,6 +337,19 @@ def test_cse_Indexed():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+def test_cse_MatrixSymbol_indexing():\n+    from sympy import symbols, MatrixSymbol\n+    from sympy.simplify.cse_main import cse\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+    expr = a * b\n+\n+    replacements, reduced_exprs = cse(expr)\n+    # Check that replacements for a and b do not exist\n+    # indicating that whole matrices were not copied\n+    for rep in replacements:\n+        assert not (rep[1] == a or rep[1] == b), f\"Unexpected replacement: {rep}\"\n+\n \n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n@@ -356,6 +369,19 @@ def test_cse_MatrixExpr():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+def test_cse_MatrixSymbol_indexing():\n+    from sympy import symbols, MatrixSymbol\n+    from sympy.simplify.cse_main import cse\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+    expr = a * b\n+\n+    replacements, reduced_exprs = cse(expr)\n+    # Check that replacements for a and b do not exist\n+    # indicating that whole matrices were not copied\n+    for rep in replacements:\n+        assert not (rep[1] == a or rep[1] == b), f\"Unexpected replacement: {rep}\"\n+\n     replacements, reduced_exprs = cse([expr1 + expr2, expr1])\n     assert replacements\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..628fdb3 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,6 +38,12 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n+def test_issue_17851():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n \n def test_issue_18361():\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..af1a133 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1198,7 +1201,20 @@ def test_issue_14941():\n     assert f3(2, 3) == [3, 2]\n \n \n-def test_lambdify_Derivative_arg_issue_16468():\n+def test_lambdify_tuple_one_element():\n+    # Test that lambdify correctly recognizes a tuple with one element\n+    f2b = lambdify([], (1,))  # based on gh-23224\n+    assert f2b() == (1,)\n+\n+    # Generate source code and check for correct tuple syntax\n+    source_code = inspect.getsource(lambdify([], tuple([1])))\n+    assert 'return (1,)' in source_code\n+\n+    # Test handling of tuple with more than one element (should be correct)\n+    f2c = lambdify([], (1, 2))\n+    assert f2c() == (1, 2)\n+    source_code_multiple = inspect.getsource(lambdify([], tuple([1, 2])))\n+    assert 'return (1, 2)' in source_code_multiple\n     f = Function('f')(x)\n     fx = f.diff()\n     assert lambdify((f, fx), f + fx)(10, 5) == 15\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..735ecc4 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,30 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy import exp\n+    from sympy.physics.units import Quantity, impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..bab329b 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -52,6 +52,25 @@ def test_tensor_product_commutator():\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n         TP(A, B)*TP(B, C) - TP(B, C)*TP(A, B)\n \n+def test_issue_24142_expansion():\n+    # Tests for fix of issue #24142\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+    \n+    # Additional tests that specifically check scalar multiplication\n+    U = Operator('U')\n+    V = Operator('V')\n+    P = TensorProduct(2*U - V, U + V)\n+    expected = 2 * TensorProduct(U, U) + 2 * TensorProduct(U, V) - TensorProduct(V, U) - TensorProduct(V, V)\n+    assert P.expand(tensorproduct=True) == expected\n+    \n+    # Check cases where one of the tensor factors is zero\n+    Z = Operator('0')\n+    assert TensorProduct(U-U, U+V).expand(tensorproduct=True) == TensorProduct(Z, U+V)\n \n def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n",
  "sympy__sympy-24213": "",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..50f36d9 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, kilo, volt\n+from sympy.physics.units import watt as watt_unit  # Imported to ensure W is recognized as watt\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -18,6 +20,16 @@ def test_prefix_operations():\n     dodeca = Prefix('dodeca', 'dd', 1, base=12)\n \n     assert m * k == 1\n+\n+    # Testing milli prefix with Watts and checking for correct scale\n+    assert milli * W == watt_unit / 1000 \n+    assert W * milli == watt_unit / 1000\n+    assert (milli * W).args == (watt_unit / 1000).args  # Ensure it structurally matches mW\n+    assert (W * milli).args == (watt_unit / 1000).args  # Ensure it structurally matches mW\n+\n+    # Also test with Volts to ensure it isn't just a Watts issue\n+    assert milli * volt == Quantity('milli', Rational(1, 1000), volt)\n+    assert volt * milli == Quantity('milli', Rational(1, 1000), volt)\n     assert k * k == M\n     assert 1 / m == k\n     assert k / m == M\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..d71e59b 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -204,8 +204,34 @@ class ModelInheritanceTests(TestCase):\n \n         self.assertEqual(A.attr.called, (A, 'attr'))\n \n+from .models import Parent, Child\n \n-class ModelInheritanceDataTests(TestCase):\n+class ModelInheritanceTests(TestCase):\n+    def test_inherited_ordering_pk_desc(self):\n+        # Create Parent instances\n+        p1 = Parent.objects.create(first_name='Joe', email='joe@email.com')\n+        p2 = Parent.objects.create(first_name='Jon', email='jon@email.com')\n+        # Create Child instances (which should inherit the ordering)\n+        c1 = Child.objects.create(first_name='Anna', email='anna@email.com')\n+        c2 = Child.objects.create(first_name='Elsa', email='elsa@email.com')\n+\n+        # Verify the ordering for Parent\n+        parent_qs = Parent.objects.all()\n+        self.assertSequenceEqual(parent_qs, [p2, p1])\n+        expected_parent_order_by_sql = 'ORDER BY %s.%s DESC' % (\n+            connection.ops.quote_name(Parent._meta.db_table),\n+            connection.ops.quote_name(Parent._meta.pk.column),\n+        )\n+        self.assertIn(expected_parent_order_by_sql, str(parent_qs.query))\n+\n+        # Verify the ordering for Child\n+        child_qs = Child.objects.all()\n+        self.assertSequenceEqual(child_qs, [c2, c1])\n+        expected_child_order_by_sql = 'ORDER BY %s.%s DESC' % (\n+            connection.ops.quote_name(Parent._meta.db_table),\n+            connection.ops.quote_name(Parent._meta.pk.column),\n+        )\n+        self.assertIn(expected_child_order_by_sql, str(child_qs.query))\n     @classmethod\n     def setUpTestData(cls):\n         cls.restaurant = Restaurant.objects.create(\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..1420774 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -333,6 +333,51 @@ class OrderingTests(TestCase):\n             article.author = author\n             article.save(update_fields={'author'})\n \n+    def test_order_by_self_referential_fk(self):\n+        # Create authors where each has an editor who is also an author\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\", editor=author_1)\n+        author_1.editor = author_2\n+        author_1.save()\n+\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1)\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2)\n+\n+        # Test ordering by self referential foreign key field\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+    def test_order_by_self_referential_fk_reverse(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\", editor=author_1)\n+        author_1.editor = author_2\n+        author_1.save()\n+\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1)\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2)\n+\n+        # Test ordering by reverse order of the self referential foreign key field\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n         self.assertQuerysetEqual(\n             Article.objects.order_by('author_id'), [\n                 \"Article 4\",\n",
  "django__django-13265": "",
  "django__django-14534": "",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..e12cf01 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -657,6 +657,31 @@ def test_colorbar_scale_reset():\n \n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n+def test_colorbar_update_after_norm_change():\n+    # Test updating colorbar after changing the norm of the mappable\n+    fig, ax = plt.subplots()\n+    data = np.random.rand(10, 10) * 100\n+    pcm = ax.pcolormesh(data, cmap='viridis', norm=Normalize(vmin=0, vmax=100))\n+    cbar = fig.colorbar(pcm, ax=ax)\n+\n+    # Change to LogNorm and update\n+    pcm.set_norm(LogNorm(vmin=1, vmax=100))\n+    cbar.update_normal(pcm)\n+    fig.canvas.draw()\n+\n+    # Verify that colorbar ticks are updated accordingly\n+    log_ticks = cbar.ax.yaxis.get_majorticklocs()  # should be log10 spaced\n+    assert np.allclose(log_ticks, [1, 10, 100], atol=1)\n+\n+    # Test behavior with update_bruteforce\n+    cb2 = fig.colorbar(pcm, ax=ax)\n+    cb2.update_bruteforce(pcm)  # should not raise ZeroDivisionError\n+    fig.canvas.draw()\n+\n+    # Verify tick update for this method too\n+    log_ticks_brute = cb2.ax.yaxis.get_majorticklocs()\n+    assert np.allclose(log_ticks_brute, [1, 10, 100], atol=1)\n+\n \n def test_colorbar_get_ticks_2():\n     plt.rcParams['_internal.classic_mode'] = False\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..ccafb0b 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,29 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_pandas_output_with_custom_aggregating_transformer():\n+    \"\"\"Test that FeatureUnion works with pandas output and a custom \n+    transformer that aggregates data.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.utils._set_output import _SetOutputMixin\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame()\n+\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    union.set_output(transform=\"pandas\")\n+    result = union.fit_transform(data)\n+    expected = data[\"value\"].groupby(data[\"date\"]).sum().to_frame()\n+    pd.testing.assert_frame_equal(result.reset_index(drop=True), expected.reset_index(drop=True))\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..2393eb5 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -131,9 +131,68 @@ def test_decorators(app):\n         '',\n     ]\n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+\n+def do_autodoc(app: SphinxTestApp, objtype: str, name: str, options: dict = None):\n+    # This is a placeholder for the real 'do_autodoc' function\n+    # which generates the autodoc documentation for the object.\n+    pass\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_slots_attribute(app):\n+def test_annotation_only_member_in_superclass(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_with_undoc_members(app):\n+    options = {\"members\": None, \"inherited-members\": True, \"undoc-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'class', 'target.slots.Bar', options)\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..057f9a9 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,6 +358,23 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n+def test_issue_trigsimp_with_rational():\n+    # Test simplified results for Rational arguments\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    \n+    # Verify that trigsimp simplifies the dot product correctly\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    # Verify trigsimp handles the same expression as above\n+    assert trigsimp(r2) == cos(S(1)/50)\n+\n+    # Check the acos function for trigsimp results\n+    r3 = acos(r2)\n+    # Verify trigsimp does not change the acos output because it doesn't simplify further correctly\n+    assert trigsimp(r3) == r3\n+\n \n def test_exptrigsimp():\n     def valid(a, b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..7a553f8 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4333,6 +4333,52 @@ def test_pretty_class():\n     assert pretty( D ) == str( D )\n \n \n+from sympy import Sum, oo, pprint\n+from sympy.abc import x\n+\n+def test_pretty_sum_with_addition():\n+    # Example inspired by the reported issue to test pretty printing with addition\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    # Unicode pretty print expected result after the fix\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571     \\n\\\n+ \u2571      \\n\\\n+ \u203e\u203e\u203e    \\n\\\n+x = 1   \\n\\\n+      + 3\\\n+\"\"\")\n+\n+    # Ensure the unicode pretty printing works correctly\n+    assert upretty(expr) == ucode_str\n+\n+    # ASCII pretty print expected result after the fix\n+    ascii_str = \\\n+\"\"\"\\\n+  oo   \\n\\\n+ ____  \\n\\\n+ \\\\   `\\n\\\n+  \\\\  x\\n\\\n+  /    \\n\\\n+ /     \\n\\\n+/___,  \\n\\\n+x = 1  \\n\\\n+    + 3\\\n+\"\"\"\n+\n+    # Ensure the ASCII pretty printing works correctly\n+    assert pretty(expr) == ascii_str\n+\n+# User may want to test pretty print directly\n+def test_pprint_sum_with_addition():\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    pprint(expr)  # This should display the output with corrected alignment\n+\n def test_pretty_no_wrap_line():\n     huge_expr = 0\n     for i in range(20):\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..62a3bf3 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -690,6 +690,16 @@ def test_reshape():\n     assert reshape(list(range(12)), [2, [3], {2}, (1, (3,), 1)]) == \\\n         [[0, 1, [2, 3, 4], {5, 6}, (7, (8, 9, 10), 11)]]\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n+\n+def test_uniq_modifies_list():\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [1, 2, 3, 4, 5]\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n def test_uniq():\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..c49374d 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,6 +8,7 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..bc5110a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -545,8 +545,23 @@ class BasicExpressionsTests(TestCase):\n         self.assertCountEqual(subquery_test, [self.foobar_ltd, self.gmbh])\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n-\n-    def test_uuid_pk_subquery(self):\n+    \n+    def test_subquery_sql_correctness(self):\n+        # Create a queryset for the Employee model\n+        employees = Employee.objects.all()\n+        # Create a Subquery instance from the queryset\n+        employees_subquery = Subquery(employees)\n+        # Ensure that the subquery attribute is set correctly\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        \n+        # Get the SQL compiler for the subquery\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        # Generate the SQL query\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        \n+        # Validate that the generated SQL is encapsulated correctly\n+        self.assertTrue(sql.startswith('(SELECT '))\n+        self.assertTrue(sql.endswith(')'))\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..c2baf99 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,38 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_multilevel_filtered_relation_select_related(self):\n+        with self.assertNumQueries(3):\n+            ps = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                )\n+                .select_related('tournament_pool', 'tournament_pool__tournament')\n+                .order_by('pk')\n+            )\n+            # Verify that the tournament related to the pool from the poolstyle matches the tournament_pool's tournament.\n+            self.assertEqual(ps[0].tournament_pool.tournament, ps[0].pool.tournament)\n+            \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +196,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..47dc2fc 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -10,6 +11,8 @@ import warnings\n import numpy as np\n import pytest\n from PIL import Image\n+import pickle\n+import matplotlib.pyplot as plt\n \n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..b4146c4 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -9,7 +10,7 @@ from numpy.testing import assert_array_equal\n \n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n-\n+import seaborn as sns\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1624,20 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_hue_in_map(self):\n+        \"\"\"Test PairGrid with hue specified in map for scatterplot.\"\"\"\n+        iris = sns.load_dataset(\"iris\")\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        # Try mapping scatterplot with hue specified directly\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            result = True\n+        except Exception as e:\n+            result = False\n+            print(e)\n+\n+        assert result, \"PairGrid failed when using hue in map with categorical variables\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..f9bb1a0 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -347,7 +347,20 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n-def test_excinfo_for_later():\n+import pytest\n+\n+def test_raises_context_variable_str():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\n+            f\"A\\n\"\n+            f\"B\\n\"\n+            f\"C\"\n+        )\n+    # Direct str call on the context variable should not be used to get the exception message\n+    # because str(excinfo) returns a representation of the ExceptionInfo object, not the exception message.\n+    assert str(excinfo) != \"A\\nB\\nC\"\n+    # Correct way to get the exception message\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..0bf8463 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -404,6 +404,11 @@ class TestCustomConftests:\n         testdir.makepyfile(\"def test_x(): pass\")\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # New test case for the single-character shortcut\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # New test case for the single-character shortcut\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..2ef8507 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,21 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import *\n+from sympy.matrices import MatrixSymbol, Identity, ZeroMatrix\n+from sympy.assumptions.assume import assuming\n+from sympy.assumptions import Q as Query\n \n-def test_Identity_doit():\n+def test_identity_total_sum():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+\n+    with assuming(Query.orthogonal(M)):\n+        e = (M.T * M).refine()\n+\n+    # Identity matrix should have a total sum equal to 'n'\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..c7192b1 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -245,6 +245,13 @@ GOOD_PAIRS = [\n     (r\"5^0 - 4^0\", _Add(_Pow(5, 0), _Mul(-1, _Pow(4, 0)))),\n ]\n \n+def test_issue_21537_latex_parsing():\n+    from sympy import parse_latex, Rational, symbols\n+    a, b, c = symbols('a b c')\n+    expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    expected_expr = ((a**3 + b)/c)/(1/(c**2))\n+    assert expr == expected_expr, f\"Expected: {expected_expr}, Got: {expr}\"\n+\n \n def test_parseable():\n     from sympy.parsing.latex import parse_latex\n"
}