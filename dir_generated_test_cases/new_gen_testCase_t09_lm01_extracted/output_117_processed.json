{
  "astropy__astropy-12907": "",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..0b3f51c 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,52 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n-from astropy.io import ascii\n+from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Test writing RST with header_rows option\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert_equal_splitlines(out.getvalue(), \"\\n\".join(lines))\n+\n+\n+def test_write_rst_with_header_rows():\n+    \"\"\"Test that writing with header_rows does not produce an error.\"\"\"\n+    tbl = QTable({\n+        'wave': [350, 950] * u.nm,\n+        'response': [0.7, 1.2] * u.count\n+    })\n+\n+    # Expected output\n+    expected_output = [\n+        \"===== ========\",\n+        \" wave response\",\n+        \"  nm       ct \",\n+        \"===== ========\",\n+        \"350.0      0.7\",\n+        \"950.0      1.2\",\n+        \"===== ========\",\n+    ]\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    assert_equal_splitlines(out.getvalue(), \"\\n\".join(expected_output))\n \n from .common import assert_almost_equal, assert_equal\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..12c4bbd 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -43,7 +43,50 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n \n-def test_roundtrip(tmp_path):\n+import pytest\n+from astropy.table import Table\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    READ TERR 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n+\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..55490fc 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -31,7 +31,33 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n # Test with Data covers:\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n-@pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddataref_mask_propagation_issue_coverage():\n+    # Prepare data and masks\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # Test multiplication case with no mask operand (mask * no mask)\n+    res_mask_no_mask = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\n+    np.testing.assert_equal(res_mask_no_mask, mask)\n+\n+    # Test multiplication case with constant and mask (mask * constant)\n+    res_mask_constant = nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\n+    np.testing.assert_equal(res_mask_constant, mask)\n+\n+    # Testing consistency against previous version behavior\n+    res_nomask_constant = nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask\n+    assert res_nomask_constant is None\n+    \n+    # Test mask * mask operation remains correct\n+    res_mask_mask = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask\n+    np.testing.assert_equal(res_mask_mask, mask)\n @pytest.mark.parametrize(\n     (\"data1\", \"data2\"),\n     [\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..b163f9d 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,29 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_d_exponent_conversion(self):\n+        \"\"\"Test to verify the D to E exponent conversion.\"\"\"\n+\n+        import numpy as np\n+        from astropy.io import fits\n+        \n+        # Create a table with 'D' format to test exponent replacement\n+        r1 = np.array([11.0, 12.0, 13.0])\n+        c1 = fits.Column(name='def', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+\n+        # Write to a temporary FITS file\n+        hdu.writeto(self.temp('test_d_exp.fits'), overwrite=True)\n+\n+        # Read the FITS file and check for 'D' in the string representation\n+        with open(self.temp('test_d_exp.fits')) as f:\n+            data = f.read()\n+            assert 'D' in data, \"Exponents are not properly converted to 'D' notation in the file.\"\n+        \n+        # Open the FITS file to ensure no unintentional edge cases occurred\n+        with fits.open(self.temp('test_d_exp.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data), \"Data integrity issue between original and written TableHDU.\"\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..fc39ee5 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1102,8 +1102,28 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertIsNone(default_storage.file_permissions_mode)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        By default, FILE_UPLOAD_PERMISSIONS should be 0o644.\n+        \"\"\"\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n+    def test_uploaded_file_permissions(self):\n+        \"\"\"\n+        Files uploaded should have permissions set to FILE_UPLOAD_PERMISSIONS.\n+        \"\"\"\n+        file_name = 'test_file.txt'\n+        content = ContentFile(\"File content\")\n+        saved_file = default_storage.save(file_name, content)\n+        file_path = default_storage.path(saved_file)\n+\n+        # Get actual file permissions\n+        actual_permissions = os.stat(file_path).st_mode & 0o777\n+\n+        self.assertEqual(actual_permissions, 0o644)\n \n-    def test_override_file_upload_directory_permissions(self):\n+        # Clean up created file\n+        default_storage.delete(saved_file)\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n         reflected in the directory_permissions_mode attribute of\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..c71a903 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -67,7 +67,21 @@ class TestSerialization(SimpleTestCase):\n \n class TestValidation(SimpleTestCase):\n \n-    def test_invalid_string(self):\n+    def test_invalid_duration_format(self):\n+        field = models.DurationField()\n+        test_values = [\n+            ('14:00', \"'14:00' value has an invalid format. It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"),\n+            ('00:14', \"'00:14' value has an invalid format. It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"),\n+            ('1:1:1', \"'1:1:1' value has an invalid format. It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"),\n+        ]\n+        for value, expected_message in test_values:\n+            with self.assertRaises(exceptions.ValidationError) as cm:\n+                field.clean(value, None)\n+            self.assertEqual(cm.exception.code, 'invalid')\n+            self.assertEqual(\n+                cm.exception.message % cm.exception.params,\n+                expected_message\n+            )\n         field = models.DurationField()\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n@@ -75,7 +89,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +98,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..2bd0c47 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,31 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = [\n+            \"trailingnewline\\n\",\n+            \"trailingwhitespace \\n\",\n+            \"newlineinmiddle\\nname\",\n+            \"newlineonly\\n\"\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        invalid_usernames = [\n+            \"trailingnewline\\n\",\n+            \"trailingwhitespace \\n\",\n+            \"newlineinmiddle\\nname\",\n+            \"newlineonly\\n\"\n+        ]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +282,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..937172e 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -366,6 +366,20 @@ class HttpResponseTests(unittest.TestCase):\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n+    def test_memoryview_content(self):\n+        # Test handling of memoryview content\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+        # Test memoryview content via property\n+        r = HttpResponse()\n+        r.content = memoryview(b'another memoryview')\n+        self.assertEqual(r.content, b'another memoryview')\n+\n+        # Test empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n     def test_iter_content(self):\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..afe2e1c 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n@@ -471,7 +473,33 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n-    def test_fast_delete_joined_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_with_savepoint(self):\n+        with connection.savepoint():\n+            u = User.objects.create()\n+            collector = Collector(using='default')\n+            self.assertTrue(collector.can_fast_delete(u))\n+            u.delete()\n+            self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_not_in_transaction(self):\n+        original_autocommit = connection.get_autocommit()\n+        try:\n+            connection.set_autocommit(False)\n+            u = User.objects.create()\n+            collector = Collector(using='default')\n+            self.assertTrue(collector.can_fast_delete(u))\n+            u.delete()\n+            self.assertIsNone(u.pk)\n+        finally:\n+            connection.set_autocommit(original_autocommit)\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n         u2 = User.objects.create()\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..fac0d7c 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,12 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.db.utils import IntegrityError\n+from django.test.utils import captured_stdout\n \n from .models import Proxy, UserProxy\n \n@@ -140,7 +143,45 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Tests if permissions already exist for proxy models before the migration.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        \n+        # Create pre-existing permissions\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+            output = stdout.getvalue()\n+            # Check that appropriate warning or message is shown\n+            self.assertIn('A problem arose migrating proxy model permissions', output)\n+\n+    def test_integrity_error_on_duplicate_permissions_during_migration(self):\n+        \"\"\"\n+        Test if IntegrityError is raised when duplicate permissions exist during migration.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        \n+        # Manually create a permission that will cause a duplicate entry\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        \n+        with self.assertRaises(IntegrityError):\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..3e5b01f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -14,6 +14,7 @@ from pathlib import Path\n from unittest import mock, skip, skipIf\n \n from django.apps.registry import Apps\n+import shutil\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..9ca0ad7 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1,5 +1,19 @@\n import importlib\n import inspect\n+from django.test import SimpleTestCase\n+from unittest import mock\n+\n+class ConverterRaise404Tests(SimpleTestCase):\n+    def test_technical_404_converter_raise_404_with_debug_true(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/', HTTP_X_DEBUG=True)\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_technical_404_converter_raise_404_with_debug_false(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertNotContains(response, 'Page not found', status_code=404)\n+\n import os\n import re\n import sys\n@@ -18,6 +32,8 @@ from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n from django.utils.functional import SimpleLazyObject\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..538d567 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -84,7 +84,31 @@ class BinaryFieldTests(SimpleTestCase):\n @isolate_apps('invalid_models_tests')\n class CharFieldTests(SimpleTestCase):\n \n-    def test_valid_field(self):\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n         class Model(models.Model):\n             field = models.CharField(\n                 max_length=255,\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..885bce4 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -252,6 +252,23 @@ class WriterTests(SimpleTestCase):\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n+    def test_serialize_enum_with_translation(self):\n+        class Status(enum.Enum):\n+            GOOD = _('Good')  # Translatable string\n+            BAD = _('Bad')    # Translatable string\n+\n+        class Item(models.Model):\n+            status = models.CharField(default=Status.GOOD, max_length=128)\n+\n+        field = models.CharField(default=Status.GOOD, max_length=128)\n+        serialized_result = MigrationWriter.serialize(field)[0]\n+\n+        expected_result = (\n+            \"models.CharField(default=migrations.test_writer.Status['GOOD'], \"\n+            \"max_length=128)\"\n+        )\n+        self.assertEqual(serialized_result, expected_result)\n+        \n     def test_serialize_enums(self):\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..6928bcb 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,8 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n+import calendar\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -320,7 +323,25 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_asctime(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_boundary_cases(self, mocked_datetime):\n+        # Mock current date for tests\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        current_year = 2023\n+        mocked_datetime.utcnow.return_value = datetime(current_year, 1, 1)\n+        \n+        tests = [\n+            ('Saturday, 31-Dec-73 23:59:59 GMT', datetime(1973, 12, 31, 23, 59, 59)),\n+            ('Sunday, 01-Jan-74 00:00:00 GMT', datetime(1974, 1, 1, 0, 0, 0)),\n+            ('Saturday, 31-Dec-49 23:59:59 GMT', datetime(2049, 12, 31, 23, 59, 59)),\n+            ('Sunday, 01-Jan-50 00:00:00 GMT', datetime(1950, 1, 1, 0, 0, 0)),\n+        ]\n+        \n+        for rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..029c632 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,29 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+# Adding a temporary model and its test case for this issue\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class MyEnumTestCase(TestCase):\n+    def setUp(self):\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_choice_value(self):\n+        # Test the stored value is a string and correct\n+        self.assertIsInstance(self.my_object.my_str_value, str)\n+        self.assertEqual(self.my_object.my_str_value, MyChoice.FIRST_CHOICE)\n+\n+    def test_retrieved_object_choice_value(self):\n+        # Test the retrieved value is a string and correct\n+        retrieved_object = MyObject.objects.get(id=self.my_object.id)\n+        self.assertIsInstance(retrieved_object.my_str_value, str)\n+        self.assertEqual(retrieved_object.my_str_value, MyChoice.FIRST_CHOICE)\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..109b2d1 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,8 +148,38 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.test import TestCase\n+from django.db import models\n+\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_CHARFIELD_display(self):\n+        \"\"\"\n+        Test overriding get_foo_bar_display for CharField.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(max_length=10, choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something else'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something else')\n+\n+    def test_overriding_INTEGERFIELD_display(self):\n+        \"\"\"\n+        Test overriding get_foo_bar_display for IntegerField.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..c7536c2 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -147,9 +148,45 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.test import SimpleTestCase\n+from django.db import models\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overridden_choices_in_abstract_model(self):\n+        class BaseModel(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A'), ('B', 'Base B')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(BaseModel):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')])\n+\n+        instance_a = ChildModel(foo='A')\n+        instance_b = ChildModel(foo='B')\n+        instance_c = ChildModel(foo='C')\n+\n+        self.assertEqual(instance_a.get_foo_display(), 'Child A')\n+        self.assertEqual(instance_b.get_foo_display(), 'Child B')\n+        self.assertEqual(instance_c.get_foo_display(), 'Child C')\n+\n+    def test_display_with_unchanged_choices_in_subclass(self):\n+        class BaseModel(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A'), ('B', 'Base B')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(BaseModel):\n+            pass\n+\n+        instance_a = ChildModel(foo='A')\n+        instance_b = ChildModel(foo='B')\n+\n+        self.assertEqual(instance_a.get_foo_display(), 'Base A')\n+        self.assertEqual(instance_b.get_foo_display(), 'Base B')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..54debf4 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -74,8 +75,34 @@ class TranslationCheckTests(SimpleTestCase):\n                 self.assertEqual(check_setting_languages_bidi(None), [\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n+    @override_settings(USE_I18N=True)\n+    def test_sublanguage_with_base_language_available(self):\n+        # Test cases where sublanguage should fallback to the available base language\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with self.settings(LANGUAGE_CODE='pt-BR', LANGUAGES=[('pt', 'Portuguese')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with self.settings(LANGUAGE_CODE='en-gb', LANGUAGES=[('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n \n-    def test_inconsistent_language_settings(self):\n+        # Test cases with an available sublanguage or exactly matching language code\n+        with self.settings(LANGUAGE_CODE='es-ar', LANGUAGES=[('es', 'Spanish'), ('es-ar', 'Argentinian Spanish')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with self.settings(LANGUAGE_CODE='fr-ca', LANGUAGES=[('fr', 'French'), ('fr-ca', 'Canadian French')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+        \n+        # Sublanguage without matching base language should raise an error\n+        with self.settings(LANGUAGE_CODE='it-ch', LANGUAGES=[('it', 'Italian')]):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(\n+                    'You have provided a value for the LANGUAGE_CODE setting that is '\n+                    'not in the LANGUAGES setting.',\n+                    id='translation.E004',\n+                ),\n+            ])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "",
  "django__django-12453": "",
  "django__django-12497": "",
  "django__django-12700": "",
  "django__django-12708": "",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..0b6e0ab 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,7 +685,25 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n-    def test_fast_delete_empty_no_update_can_self_select(self):\n+    def test_zero_deletion_consistency(self):\n+        \"\"\"\n+        Ensure that the delete method returns consistent results when zero objects are deleted,\n+        regardless of whether the model has foreign key constraints or not.\n+        \"\"\"\n+        # Create models with a foreign key relationship\n+        r = R.objects.create()\n+        HiddenUser.objects.create(r=r)\n+        # Delete a filter that matches no objects\n+        deleted_with_fk, deleted_objs_with_fk = HiddenUser.objects.filter(r__id=-1).delete()\n+        # Create a model without foreign key constraints and test\n+        block_library = BlockLibrary.objects.create()\n+        deleted_without_fk, deleted_objs_without_fk = BlockLibrary.objects.filter(id=-1).delete()\n+        \n+        # Check for consistency in results when nothing is deleted\n+        self.assertEqual(deleted_with_fk, 0)\n+        self.assertEqual(deleted_without_fk, 0)\n+        self.assertDictEqual(deleted_objs_with_fk, {HiddenUser._meta.label: 0})\n+        self.assertDictEqual(deleted_objs_without_fk, {BlockLibrary._meta.label: 0})\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n         `no_update_can_self_select` feature should work even if the specified\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..34f55ea 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -73,12 +73,82 @@ class ASGITest(SimpleTestCase):\n                 (b'Content-Disposition', b'inline; filename=\"urls.py\"'),\n             },\n         )\n+    TEST_STATIC_ROOT = Path(__file__).parent / 'project' / 'static'\n+\n+    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.staticfiles'})\n+    @override_settings(\n+        STATIC_URL='/static/',\n+        STATIC_ROOT=TEST_STATIC_ROOT,\n+        STATICFILES_DIRS=[TEST_STATIC_ROOT],\n+        STATICFILES_FINDERS=[\n+            'django.contrib.staticfiles.finders.FileSystemFinder',\n+        ],\n+    )\n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n         response_body = await communicator.receive_output()\n         self.assertEqual(response_body['type'], 'http.response.body')\n         self.assertEqual(response_body['body'], test_file_contents)\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_not_found(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/not-found.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+\n+    ...\n+       \n+    class TestASGIStaticFilesHandler(SimpleTestCase):\n+        async_request_factory = AsyncRequestFactory()\n+\n+        @override_settings(\n+            STATIC_URL='/static/',\n+            STATICFILES_DIRS=[TEST_STATIC_ROOT],\n+        )\n+        async def test_get_async_response(self):\n+            request = self.async_request_factory.get('/static/test/file.txt')\n+            handler = ASGIStaticFilesHandler(ASGIHandler())\n+            response = await handler.get_response_async(request)\n+            response.close()\n+            self.assertEqual(response.status_code, 200)\n+\n+        @override_settings(\n+            STATIC_URL='/static/',\n+            STATICFILES_DIRS=[TEST_STATIC_ROOT],\n+        )\n+        async def test_get_async_response_not_found(self):\n+            request = self.async_request_factory.get('/static/test/not-found.txt')\n+            handler = ASGIStaticFilesHandler(ASGIHandler())\n+            response = await handler.get_response_async(request)\n+            self.assertEqual(response.status_code, 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..10b030d 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -198,7 +198,19 @@ class TestUtilsText(SimpleTestCase):\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n         )\n-        for value, output, is_unicode in items:\n+        additional_items = [\n+            # Test cases specifically related to the issue of stripping leading/trailing underscores and dashes\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('--leading-and-trailing--', 'leading-and-trailing', False),\n+            ('__underscores__', 'underscores', False),\n+            ('__mixed_case---', 'mixed-case', False),\n+            ('  --mixed_symbol _ - ', 'mixed-symbol', False),\n+        ]\n+        \n+        # Combine original and additional test cases\n+        combined_items = items + additional_items\n+\n+        for value, output, is_unicode in combined_items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n         # interning the result may be useful, e.g. when fed to Path.\n         self.assertEqual(sys.intern(text.slugify('a')), 'a')\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..4a6e6b0 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -2,6 +2,8 @@ from django.contrib.contenttypes.fields import (\n     GenericForeignKey, GenericRelation,\n )\n from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n+from django.test import SimpleTestCase\n from django.core.checks import Error\n from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n@@ -11,6 +13,37 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal across different concrete models.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+            class Meta:\n+                abstract = True\n+        \n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+        \n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+        \n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Ensure that fields are not considered equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Ensure hash values are different\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+        \n+        # Ensure ordering is working correctly\n+        self.assertLess(abstract_model_field.creation_counter, inherit1_model_field.creation_counter)\n+        self.assertLess(abstract_model_field.creation_counter, inherit2_model_field.creation_counter)\n+\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +380,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..939532a 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -72,6 +72,12 @@ class SiteEachContextTest(TestCase):\n         self.assertIs(user['perms']['change'], True)\n         self.assertIs(user['perms']['delete'], True)\n         self.assertEqual(user['admin_url'], '/test_admin/admin/auth/user/')\n+        # Verify that the model class is included in the app list context\n+        article = admin_views['models'][0]\n+        self.assertEqual(article['model'], Article)\n+\n+        # Verify for User model as well\n+        self.assertEqual(user['model'], User)\n         self.assertEqual(user['add_url'], '/test_admin/admin/auth/user/add/')\n         self.assertEqual(user['name'], 'Users')\n \n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..f39e183 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -37,6 +39,27 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..72eb3af 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -18,20 +18,125 @@ from django import conf, get_version\n from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n+    captured_stderr, captured_stdout,\n )\n+\n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_override(self):\n+        \"\"\"\n+        Test that prog name is correctly overridden when specified in argv,\n+        independent of sys.argv.\n+        \"\"\"\n+        args = ['my_script', 'runscript']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['sys_admin'] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin runscript', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n+    captured_stderr, captured_stdout,\n )\n+\n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_override(self):\n+        \"\"\"\n+        Test that prog name is correctly overridden when specified in argv,\n+        independent of sys.argv.\n+        \"\"\"\n+        args = ['my_script', 'runscript']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['sys_admin'] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin runscript', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n+    captured_stderr, captured_stdout,\n )\n+\n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_override(self):\n+        \"\"\"\n+        Test that prog name is correctly overridden when specified in argv,\n+        independent of sys.argv.\n+        \"\"\"\n+        args = ['my_script', 'runscript']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['sys_admin'] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin runscript', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from unittest import mock\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n+    captured_stderr, captured_stdout,\n )\n \n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_override(self):\n+        \"\"\"\n+        Test that prog name is correctly overridden when specified in argv,\n+        independent of sys.argv.\n+        \"\"\"\n+        args = ['my_script', 'runscript']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['sys_admin'] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin runscript', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..e2f17f6 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -6,6 +7,7 @@ from django import __version__\n from django.core.management import CommandError, call_command\n from django.test import SimpleTestCase\n from django.test.utils import captured_stdin, captured_stdout\n+import select\n \n \n class ShellCommandTestCase(SimpleTestCase):\n@@ -20,8 +22,47 @@ class ShellCommandTestCase(SimpleTestCase):\n                 ),\n             )\n         self.assertEqual(cm.records[0].getMessage(), __version__)\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select') \n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n \n-    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select') \n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch('django.core.management.commands.shell.select')\n     def test_stdin_read(self, select):\n         with captured_stdin() as stdin, captured_stdout() as stdout:\n@@ -49,4 +90,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..51917e5 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,6 +1013,24 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n+    def test_verbose_name_default_behavior_inline(self):\n+        class ProfileInlineWithVerboseOnly(TabularInline):\n+            model = Profile\n+            verbose_name = 'Specific Item'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [ProfileInlineWithVerboseOnly]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # The default behavior should set verbose_name_plural based on verbose_name.\n+        self.assertContains(response, '<h2>Specific Items</h2>')\n+        self.assertContains(response, 'Add another Specific Item')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n+\n     def test_both_verbose_names_inline(self):\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..681a78d 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -596,6 +596,20 @@ class TestQuerying(TestCase):\n         )\n \n     def test_isnull_key_or_none(self):\n+        # Test to ensure that `__isnull=True` does NOT match JSON null keys on SQLite and Oracle\n+        # For `value__j__isnull=True`, the key 'j' should not exist, not be null.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+\n+        # Test the combination of conditions involving `isnull` and values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__a__isnull=True, value__j__isnull=False),\n+            [self.objs[3]]\n+        )\n+\n+        # The existing test case with 'a' set to None should not be impacted\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..c06e8d2 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -298,6 +298,19 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n+        # Additional ModelChoiceField test to check invalid choice with value\n+        f_invalid_value = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not a valid choice.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"nonexistent\" is not a valid choice.'],\n+            f_invalid_value.clean,\n+            'nonexistent',\n+        )\n+\n         # ModelMultipleChoiceField\n         e = {\n             'required': 'REQUIRED',\n@@ -307,4 +320,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..a903667 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,6 +17,15 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n+    def test_pickleable_objects(self):\n+        # Verifying that the use of a Q object with a dict_keys doesn't raise a TypeError.\n+        q = Q(x__in={}.keys())\n+        # Test combinations with an empty Q object.\n+        self.assertEqual(q & Q(), q)  # Test combining with AND\n+        self.assertEqual(Q() & q, q)  # Test combining the other way with AND\n+        self.assertEqual(q | Q(), q)  # Test combining with OR\n+        self.assertEqual(Q() | q, q)  # Test combining the other way with OR\n+\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..3c44986 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,12 +28,14 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n+from django.db.models import Exists, OuterRef, Q\n from django.utils.functional import SimpleLazyObject\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n     RemoteEmployee, Result, SimulationRun, Time,\n )\n+from django.db.models import Exists, OuterRef, Q\n \n \n class BasicExpressionsTests(TestCase):\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..3e4228b 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1145,8 +1145,31 @@ class ResolverMatchTests(SimpleTestCase):\n             \"namespaces=[], route=^no_kwargs/([0-9]+)/([0-9]+)/$)\",\n         )\n \n-\n-@override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial_unwrap(self):\n+        tests = [\n+            ('partial_view', functools.partial(views.empty_view, template_name='partial.html')),\n+            ('partial_no_args', functools.partial(views.empty_view)),\n+        ]\n+        for name, func in tests:\n+            with self.subTest(name=name):\n+                # Create a ResolverMatch instance with the partial function\n+                match = resolve(f'/{name}/')\n+                # Directly set a partial in the ResolverMatch for the test scenario.\n+                match.func = func  \n+                expected_func_repr = f\"functools.partial({func.func.__module__}.{func.func.__name__}\"\n+                if func.args:\n+                    expected_func_repr += \", \" + \", \".join(repr(arg) for arg in func.args)\n+                if func.keywords:\n+                    if func.args:\n+                        expected_func_repr += \", \"\n+                    expected_func_repr += \", \".join(f\"{k}={v!r}\" for k, v in func.keywords.items())\n+                expected_func_repr += \")\"\n+                expected_repr = (\n+                    f\"ResolverMatch(func={expected_func_repr}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], route='{name}/')\"\n+                )\n+                self.assertEqual(repr(match), expected_repr)\n class ErroneousViewTests(SimpleTestCase):\n \n     def test_noncallable_view(self):\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..e0c3811 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -5,6 +6,23 @@ from django.test.utils import isolate_apps\n \n \n @isolate_apps('model_options')\n+class TestBigAutoFieldSubclass(SimpleTestCase):\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        from model_options.test_default_pk import MyBigAutoField\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+class TestSmallAutoFieldSubclass(SimpleTestCase):\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        from model_options.test_default_pk import MySmallAutoField\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n class TestDefaultPK(SimpleTestCase):\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.NonexistentAutoField')\n     def test_default_auto_field_setting_nonexistent(self):\n",
  "django__django-14382": "",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..f444315 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,22 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_widget_labeling(self):\n+        \"\"\"\n+        Ensure the label for ReadOnlyPasswordHashWidget does not include a for attribute\n+        since it labels a non-input element.\n+        \"\"\"\n+        class SampleForm(forms.Form):\n+            password = ReadOnlyPasswordHashField()\n+\n+        form = SampleForm()\n+        bound_field = form['password']\n+        # Ensure no 'for' attribute since it's labeling text, not a form element\n+        self.assertEqual(bound_field.label_tag(), '<label>Password:</label>')\n+        # Try rendering the widget directly and check its content\n+        widget_html = str(bound_field.field.widget.render(name='password', value=''))\n+        self.assertNotIn('for=\"', widget_html)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..dbbb5eb 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,39 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Tests that a proper import statement is added in migrations\n+        when using custom fields and mixins from models.\n+        \"\"\"\n+        # Set up a mock migration operation that uses a custom field\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        fields = {\n+            'name': MyField(primary_key=True),\n+        }\n+        \n+        options = {\n+            'abstract': False,\n+        }\n+        \n+        # Simulate MigrationWriter behavior\n+        writer = MigrationWriter(None)\n+        migration_code = writer.serialize(fields['name'])\n+        \n+        expected_import = \"from django.db import models\"\n+        self.assertIn(expected_import, migration_code)\n+        \n+        # Assuming the serialize method would need to return a tuple in reality:\n+        self.assertSerializedResultEqual(\n+            migration_code,\n+            (\"('app.models.MyField', {'from django.db import models'})\", set()),\n+        )\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..06be443 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>',\n+            \"FormSet did not properly apply the 'nonform' CSS class for non form errors\"\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +362,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>',\n+            \"FormSet did not properly apply the 'nonform' CSS class for non form errors\"\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +990,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>',\n+            \"FormSet did not properly apply the 'nonform' CSS class for non form errors\"\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..296872c 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -9,6 +9,9 @@ from .models import (\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n     Relationship, SymmetricalFriendship,\n )\n+from django.db import models\n+from django.core.checks import Error\n+from .models import Event, Invitation, PersonChild\n \n \n class M2mThroughTests(TestCase):\n@@ -20,6 +23,14 @@ class M2mThroughTests(TestCase):\n         cls.rock = Group.objects.create(name='Rock')\n         cls.roll = Group.objects.create(name='Roll')\n \n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        # Ensure hashing of ManyToMany fields with through_fields as list\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n+\n     def test_retrieve_intermediate_items(self):\n         Membership.objects.create(person=self.jim, group=self.rock)\n         Membership.objects.create(person=self.jane, group=self.rock)\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..238d2d4 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -294,6 +294,78 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n+import json\n+import datetime\n+from django.test import RequestFactory, TestCase\n+from django.urls import reverse, path\n+from django.http import JsonResponse\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.contrib.auth.models import User\n+from .models import Question   # Ensure this model exists in your test setup\n+\n+class AutocompleteJsonViewTests(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com'\n+        )\n+        cls.factory = RequestFactory()\n+        cls.url = reverse('admin:app_label_modelname_autocomplete')  # replace with actual URL name\n+        cls.opts = {'to_field_name': 'pk'}\n+\n+    def test_serialize_result_with_extra_field(self):\n+        \"\"\"\n+        Test the serialize_result method by adding an extra field 'posted' to the response.\n+        \"\"\"\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(\n+            data,\n+            {\n+                'results': [\n+                    {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                    for q in Question.objects.order_by('-posted')\n+                ],\n+                'pagination': {'more': False},\n+            }\n+        )\n+\n+    def test_default_serialize_result(self):\n+        \"\"\"\n+        Test the default serialize_result method without any customization.\n+        \"\"\"\n+        class DefaultAutocompleteJsonView(AutocompleteJsonView):\n+            pass\n+\n+        Question.objects.create(question='Default Question', posted=datetime.date(2021, 8, 7))\n+        request = self.factory.get(self.url, {'term': 'Default', **self.opts})\n+        request.user = self.superuser\n+        response = DefaultAutocompleteJsonView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(\n+            data,\n+            {\n+                'results': [\n+                    {'id': '1', 'text': 'Default Question'}\n+                ],\n+                'pagination': {'more': False},\n+            }\n+        )\n+\n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..31c3a5a 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,7 +426,55 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+from functools import wraps\n+\n+class MethodDecoratorTestCase(TestCase):\n+    def test_wrapper_assignments_are_preserved(self):\n+        \"\"\"@method_decorator should preserve wrapper assignments like __name__ and __module__.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def simple_decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class TestClass:\n+            @method_decorator(simple_decorator)\n+            def example_method(self):\n+                return \"example\"\n+\n+        # Call the decorated method\n+        TestClass().example_method()\n+        \n+        # Assert the name and module are preserved\n+        self.assertEqual(func_name, 'example_method')\n+        self.assertIsNotNone(func_module)\n+        \n+    def test_partial_function_decorator(self):\n+        \"\"\"Test that method_decorator handles functools.partial objects correctly.\"\"\"\n+        from functools import partial\n+\n+        def sample_decorator(func):\n+            \"\"\"A sample decorator.\"\"\"\n+            @wraps(func)\n+            def wrapper(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return wrapper\n+\n+        class TestPartial:\n+            @method_decorator(sample_decorator)\n+            def partial_method(self):\n+                return \"partial_method\"\n+\n+        # Assert the wrapped function retains its correct name and module\n+        partial_obj = partial(TestPartial().partial_method)\n+        self.assertEqual(partial_obj.func.__name__, 'partial_method')\n+        self.assertEqual(partial_obj.func.__module__, TestPartial.partial_method.__module__)\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "",
  "django__django-14915": "",
  "django__django-14999": "",
  "django__django-15061": "",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..af5165b 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,6 +70,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            # Test for former ValueError on invalid IPv6 URLs.\n+            '////]@N.AN',\n+            '#@A.bO',\n         ]\n         for url, expected in tests:\n             with self.subTest(url=url):\n@@ -100,6 +103,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # Test for former ValueError on invalid IPv6 URLs.\n+            '////]@N.AN',\n+            '#@A.bO',\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..473513c 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -262,7 +262,25 @@ class NonAggregateAnnotationTestCase(TestCase):\n             {'under_40': True, 'count_id': 6},\n         ])\n \n-    def test_aggregate_over_annotation(self):\n+    def test_full_expression_annotation(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_full_expression_annotation_with_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    def test_aggregate_over_full_expression_annotation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n         agg = Author.objects.annotate(other_age=F('age')).aggregate(otherage_sum=Sum('other_age'))\n         other_agg = Author.objects.aggregate(age_sum=Sum('age'))\n         self.assertEqual(agg['otherage_sum'], other_agg['age_sum'])\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..9723c04 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -143,7 +144,25 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that MessageEncoder and MessageDecoder correctly handle extra_tags.\n+        \"\"\"\n+        encoder = MessageEncoder()\n+        decoder = MessageDecoder()\n+        \n+        test_cases = [\n+            (\"Empty extra_tags\", \"\", \"\"),\n+            (\"None extra_tags\", None, None),\n+            (\"Some extra_tags\", \"some tags\", \"some tags\"),\n+        ]\n+        \n+        for description, input_extra_tags, expected_extra_tags in test_cases:\n+            with self.subTest(description=description):\n+                original_message = Message(constants.INFO, \"Test message\", extra_tags=input_extra_tags)\n+                encoded_message = encoder.encode(original_message)\n+                decoded_message = decoder.decode(encoded_message)\n+                self.assertEqual(decoded_message.extra_tags, expected_extra_tags, description)\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..4743fd7 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -74,6 +74,21 @@ class TemplateReloadTests(SimpleTestCase):\n             'BACKEND': 'django.template.backends.django.DjangoTemplates',\n         }]\n     )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_restart_with_basedir_in_dirs(self, mock_reset):\n+        with override_settings(\n+            TEMPLATES=[{\n+                'DIRS': [BASE_DIR],\n+                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            }]\n+        ):\n+            # Create a mock path representing a file within BASE_DIR\n+            base_dir_file = BASE_DIR / 'some_file.html'\n+            # Simulate file change\n+            self.assertTrue(autoreload.template_changed(None, base_dir_file))\n+            # Ensure reset loaders are called on change detection\n+            mock_reset.assert_called_once()\n+\n     def test_template_dirs_normalized_to_paths(self):\n         self.assertSetEqual(\n             autoreload.get_template_directories(),\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..29a4a21 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,14 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty string for If-Modified-Since header does not raise an exception \n+        and returns True indicating the resource was indeed modified since that timestamp.\n+        \"\"\"\n+        # An mtime of 1 should simulate a normal file modification time.\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..7163a1d 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,7 +1,9 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n \n+from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter\n from admin_scripts.tests import AdminScriptTestCase\n \n from django.apps import apps\n@@ -410,8 +412,32 @@ class CommandTests(SimpleTestCase):\n         epilog = \"some epilog text\"\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n-\n-    def test_outputwrapper_flush(self):\n+        \n+    def test_custom_formatter_in_parser(self):\n+        \"\"\"Test custom help formatter in BaseCommand.create_parser().\"\"\"\n+        class MyCommand(BaseCommand):\n+            help = '''\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+            '''\n+        command = MyCommand()\n+        parser = command.create_parser('prog_name', 'subcommand')\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+        \n+    def test_help_output_format(self):\n+        \"\"\"Test that help output retains the custom formatting.\"\"\"\n+        class MyCommand(BaseCommand):\n+            help = '''\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+            '''\n+        command = MyCommand()\n+        with mock.patch('sys.stdout', new=StringIO()) as out:\n+            management.call_command(command, \"--help\")\n+            self.assertIn(\"Example usage:\", out.getvalue())\n+            self.assertIn(\"\\n    ./manage.py tzkt_import 'Tezos Mainnet'\", out.getvalue())\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..fa69f8a 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,9 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -217,7 +219,42 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_with_default_encoder(self):\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_with_different_custom_encoder(self):\n+        class AnotherCustomEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"output\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=AnotherCustomEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"output\"}</script>',\n+        )\n+\n+    def test_json_script_with_nested_data_using_custom_encoder(self):\n+        class NestedCustomEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                # Mimicking encoding of nested objects\n+                return '{\"nested\": {\"key\": \"value\"}}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=NestedCustomEncoder),\n+            '<script type=\"application/json\">{\"nested\": {\"key\": \"value\"}}</script>',\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..a894060 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -97,6 +97,19 @@ class CheckTemplateStringIfInvalidTest(SimpleTestCase):\n         with self.settings(TEMPLATES=TEMPLATES):\n             self.assertEqual(check_string_if_invalid_is_string(None), [])\n \n+    @override_settings(\n+        INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n+    )\n+    def test_template_tags_same_library_in_installed_apps_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n     def test_string_if_invalid_not_specified(self):\n         TEMPLATES = deepcopy(self.TEMPLATES_STRING_IF_INVALID)\n         del TEMPLATES[1][\"OPTIONS\"][\"string_if_invalid\"]\n@@ -130,6 +143,39 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             },\n         }\n \n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\",\n+            \"check_framework.template_test_apps.same_tags_app_2\",\n+        ]\n+    )\n+    def test_multiple_template_tags_same_name_from_installed_apps_and_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\",\n+                    \"different_tags_app.templatetags.different_tags\",\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'same_tags'\",\n+                            \"'check_framework.template_test_apps.different_tags_app.\"\n+                            \"templatetags.different_tags', \"\n+                            \"'check_framework.template_test_apps.same_tags_app_1.\"\n+                            \"templatetags.same_tags', \"\n+                            \"'check_framework.template_test_apps.same_tags_app_2.\"\n+                            \"templatetags.same_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ],\n+            )\n+\n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -158,6 +204,39 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 [self.error_same_tags],\n             )\n \n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\",\n+            \"check_framework.template_test_apps.same_tags_app_2\",\n+        ]\n+    )\n+    def test_multiple_template_tags_same_name_from_installed_apps_and_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\",\n+                    \"different_tags_app.templatetags.different_tags\",\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'same_tags'\",\n+                            \"'check_framework.template_test_apps.different_tags_app.\"\n+                            \"templatetags.different_tags', \"\n+                            \"'check_framework.template_test_apps.same_tags_app_1.\"\n+                            \"templatetags.same_tags', \"\n+                            \"'check_framework.template_test_apps.same_tags_app_2.\"\n+                            \"templatetags.same_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ],\n+            )\n+\n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n     )\n@@ -199,6 +278,39 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ):\n             self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n \n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\",\n+            \"check_framework.template_test_apps.same_tags_app_2\",\n+        ]\n+    )\n+    def test_multiple_template_tags_same_name_from_installed_apps_and_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\",\n+                    \"different_tags_app.templatetags.different_tags\",\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'same_tags'\",\n+                            \"'check_framework.template_test_apps.different_tags_app.\"\n+                            \"templatetags.different_tags', \"\n+                            \"'check_framework.template_test_apps.same_tags_app_1.\"\n+                            \"templatetags.same_tags', \"\n+                            \"'check_framework.template_test_apps.same_tags_app_2.\"\n+                            \"templatetags.same_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ],\n+            )\n+\n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -206,4 +318,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..115b1e9 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -389,15 +389,90 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n-\n+from django.test import TestCase\n+from .models import CustomModel, ProxyCustomModel, AnotherModel\n+\n+class ProxyModelQuerySetTest(TestCase):\n+    def setUp(self):\n+        # Setup initial data for tests\n+        self.custom_model = CustomModel.objects.create(name=\"John Smith\")\n+        self.proxy_custom_model = ProxyCustomModel.objects.get(pk=self.custom_model.pk)\n+        self.another_model = AnotherModel.objects.create(custom=self.proxy_custom_model)\n+\n+    def test_select_related_only_on_proxy_model(self):\n+        # Test the original issue scenario\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        self.assertEqual(result.custom.name, \"John Smith\")\n+\n+    def test_only_on_proxy_model_base_field(self):\n+        # Test using only() on a field from base model\n+        qs = AnotherModel.objects.only(\"custom__id\")\n+        result = qs.get()\n+        self.assertEqual(result.custom.id, self.proxy_custom_model.id)\n+\n+    def test_select_related_only_on_inexistent_field(self):\n+        # Ensure proper handling of nonexistent proxy's field\n+        with self.assertRaises(FieldError):\n+            AnotherModel.objects.select_related(\"custom\").only(\"custom__inexistent_field\").get()\n     def test_proxy_load_from_fixture(self):\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n-\n+from django.test import TestCase\n+from .models import CustomModel, ProxyCustomModel, AnotherModel\n+\n+class ProxyModelQuerySetTest(TestCase):\n+    def setUp(self):\n+        # Setup initial data for tests\n+        self.custom_model = CustomModel.objects.create(name=\"John Smith\")\n+        self.proxy_custom_model = ProxyCustomModel.objects.get(pk=self.custom_model.pk)\n+        self.another_model = AnotherModel.objects.create(custom=self.proxy_custom_model)\n+\n+    def test_select_related_only_on_proxy_model(self):\n+        # Test the original issue scenario\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        self.assertEqual(result.custom.name, \"John Smith\")\n+\n+    def test_only_on_proxy_model_base_field(self):\n+        # Test using only() on a field from base model\n+        qs = AnotherModel.objects.only(\"custom__id\")\n+        result = qs.get()\n+        self.assertEqual(result.custom.id, self.proxy_custom_model.id)\n+\n+    def test_select_related_only_on_inexistent_field(self):\n+        # Ensure proper handling of nonexistent proxy's field\n+        with self.assertRaises(FieldError):\n+            AnotherModel.objects.select_related(\"custom\").only(\"custom__inexistent_field\").get()\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n-\n+from django.test import TestCase\n+from .models import CustomModel, ProxyCustomModel, AnotherModel\n+\n+class ProxyModelQuerySetTest(TestCase):\n+    def setUp(self):\n+        # Setup initial data for tests\n+        self.custom_model = CustomModel.objects.create(name=\"John Smith\")\n+        self.proxy_custom_model = ProxyCustomModel.objects.get(pk=self.custom_model.pk)\n+        self.another_model = AnotherModel.objects.create(custom=self.proxy_custom_model)\n+\n+    def test_select_related_only_on_proxy_model(self):\n+        # Test the original issue scenario\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        self.assertEqual(result.custom.name, \"John Smith\")\n+\n+    def test_only_on_proxy_model_base_field(self):\n+        # Test using only() on a field from base model\n+        qs = AnotherModel.objects.only(\"custom__id\")\n+        result = qs.get()\n+        self.assertEqual(result.custom.id, self.proxy_custom_model.id)\n+\n+    def test_select_related_only_on_inexistent_field(self):\n+        # Ensure proper handling of nonexistent proxy's field\n+        with self.assertRaises(FieldError):\n+            AnotherModel.objects.select_related(\"custom\").only(\"custom__inexistent_field\").get()\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..c22427b 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,6 +152,29 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        # Test when parameters are added after the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n+            ([\"psql\", \"dbname\", \"--help\"], None),\n+        )\n+\n+        # Test with custom command after fix: parameters before dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n+        # Test with multiple parameters\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--echo-all\", \"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"--echo-all\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n+        # Test with no parameters (only dbname)\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +206,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..b61d9d1 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1900,7 +1900,10 @@ class AllValidTests(SimpleTestCase):\n \n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n+        import warnings\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.forms.formsets import BaseFormSet\n+        from django.forms import formset_factory\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1912,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..49c0b1b 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,29 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_handle_empty_string(self):\n+        # Test whether the function gracefully handles an empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+\n+    def test_handle_none(self):\n+        # Test if the function handles None input gracefully\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_empty_with_grouping(self):\n+        # Test empty string with grouping parameters\n+        self.assertEqual(nformat(\"\", \".\", grouping=3, thousand_sep=\",\"), \"\")\n+\n+    def test_none_with_grouping(self):\n+        # Test None input with grouping parameters\n+        self.assertEqual(nformat(None, \".\", grouping=3, thousand_sep=\",\"), \"None\")\n+\n+    def test_negative_none(self):\n+        # Test how None and negative sign are handled together\n+        self.assertEqual(nformat(None, \".\", decimal_pos=2), \"None\")\n+\n+    def test_negative_empty_string(self):\n+        # Test scenario with a negative empty string equivalent \n+        self.assertEqual(nformat(\"\", \".\", decimal_pos=2), \"\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..0d55d9b 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -22,6 +23,8 @@ from django.core.mail import EmailMultiAlternatives\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n+import urllib.parse\n+from django.urls import reverse\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..9974705 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,6 +508,47 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n+from django.contrib.sitemaps import Sitemap\n+from django.test import TestCase\n+from django.urls import path\n+from django.utils.http import urlencode\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTestsBase(TestCase):\n+    @staticmethod\n+    def assertXMLEqual(a, b):\n+        assert a == b, f\"{a} != {b}\"\n+\n+class TestCallableLastmodNoItems(SitemapTestsBase):\n+    def setUp(self):\n+        self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+    \n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response.headers.get('Content-Type', ''))\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+<sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+</sitemapindex>\n+\"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+        \n+urlpatterns = [\n+    path(\n+        \"callable-lastmod-no-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": {\"callable-lastmod\": CallableLastmodNoItemsSitemap}},\n+    ),\n+]\n+\n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..f85e0a5 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,8 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock\n import io\n import os\n import pickle\n@@ -1755,7 +1757,31 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n-    def test_empty_cache_file_considered_expired(self):\n+    def test_has_key_race_handling(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_has_key_when_file_exists_but_expired(self):\n+        cache_file = cache._key_to_file(\"key\")\n+        with open(cache_file, \"wb\") as fh:\n+            fh.write(b\"expired content\")\n+        \n+        with mock.patch.object(cache, '_is_expired', return_value=True) as mock_is_expired, \\\n+             mock.patch(\"os.path.exists\", return_value=True):\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mock_is_expired.assert_called_once()\n+\n+    def test_has_key_when_file_exists_and_not_expired(self):\n+        cache_file = cache._key_to_file(\"key\")\n+        with open(cache_file, \"wb\") as fh:\n+            fh.write(b\"valid content\")\n+        \n+        with mock.patch.object(cache, '_is_expired', return_value=False) as mock_is_expired, \\\n+             mock.patch(\"os.path.exists\", return_value=True):\n+            self.assertIs(cache.has_key(\"key\"), True)\n+            mock_is_expired.assert_called_once()\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n             fh.write(b\"\")\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..68d818f 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import AdminViewBasicTestCase, get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,6 +36,44 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is True only when the user has both\n+        'add' and 'change' permissions.\n+        \"\"\"\n+        # User with only 'change' permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both 'add' and 'change' permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..871bc62 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -66,7 +67,19 @@ class FunctionTests(SimpleTestCase):\n             \"&lt;a&gt;&lt;br&gt;&lt;img&gt;&lt;br&gt;&lt;/a&gt;\",\n         )\n \n-    def test_autoescape_off(self):\n+    @setup({\"join09\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join09(self):\n+        a = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join09\", {\"a\": a, \"var\": var})\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n+\n+    @setup({\"join10\": \"{% autoescape off %}{{ a|join:var|lower }}{% endautoescape %}\"})\n+    def test_join10(self):\n+        a = [\"Alpha\", \"Beta & Me\", \"Gamma\"]\n+        var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join10\", {\"a\": a, \"var\": var})\n+        self.assertEqual(output, \"alpha<br/>beta & me<br/>gamma\")\n         self.assertEqual(\n             join([\"<a>\", \"<img>\", \"</a>\"], \"<br>\", autoescape=False),\n             \"<a>&lt;br&gt;<img>&lt;br&gt;</a>\",\n@@ -78,4 +91,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..23edf29 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -570,7 +570,7 @@ class BulkCreateTests(TestCase):\n             )\n \n     def _test_update_conflicts_two_fields(self, unique_fields):\n-        TwoFields.objects.bulk_create(\n+        results = TwoFields.objects.bulk_create(\n             [\n                 TwoFields(f1=1, f2=1, name=\"a\"),\n                 TwoFields(f1=2, f2=2, name=\"b\"),\n@@ -578,11 +578,16 @@ class BulkCreateTests(TestCase):\n         )\n         self.assertEqual(TwoFields.objects.count(), 2)\n \n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+\n         conflicting_objects = [\n             TwoFields(f1=1, f2=1, name=\"c\"),\n             TwoFields(f1=2, f2=2, name=\"d\"),\n         ]\n-        TwoFields.objects.bulk_create(\n+        results = TwoFields.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n             unique_fields=unique_fields,\n@@ -596,6 +601,16 @@ class BulkCreateTests(TestCase):\n                 {\"f1\": 2, \"f2\": 2, \"name\": \"d\"},\n             ],\n         )\n+        # Verify that the primary keys are set after bulk_create with update_conflicts=True\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n \n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n@@ -613,7 +628,7 @@ class BulkCreateTests(TestCase):\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n     def test_update_conflicts_unique_fields_pk(self):\n-        TwoFields.objects.bulk_create(\n+        results = TwoFields.objects.bulk_create(\n             [\n                 TwoFields(f1=1, f2=1, name=\"a\"),\n                 TwoFields(f1=2, f2=2, name=\"b\"),\n@@ -623,11 +638,16 @@ class BulkCreateTests(TestCase):\n \n         obj1 = TwoFields.objects.get(f1=1)\n         obj2 = TwoFields.objects.get(f1=2)\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+\n         conflicting_objects = [\n             TwoFields(pk=obj1.pk, f1=3, f2=3, name=\"c\"),\n             TwoFields(pk=obj2.pk, f1=4, f2=4, name=\"d\"),\n         ]\n-        TwoFields.objects.bulk_create(\n+        results = TwoFields.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n             unique_fields=[\"pk\"],\n@@ -641,6 +661,16 @@ class BulkCreateTests(TestCase):\n                 {\"f1\": 2, \"f2\": 2, \"name\": \"d\"},\n             ],\n         )\n+        # Verify that the primary keys are set after bulk_create with update_conflicts=True\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n \n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n@@ -709,6 +739,16 @@ class BulkCreateTests(TestCase):\n                 },\n             ],\n         )\n+        # Verify that the primary keys are set after bulk_create with update_conflicts=True\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n \n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n@@ -738,6 +778,11 @@ class BulkCreateTests(TestCase):\n         )\n         self.assertEqual(UpsertConflict.objects.count(), 3)\n \n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+\n         conflicting_objects = [\n             UpsertConflict(number=1, rank=4, name=\"Steve\"),\n             UpsertConflict(number=2, rank=2, name=\"Olivia\"),\n@@ -758,6 +803,16 @@ class BulkCreateTests(TestCase):\n                 {\"number\": 3, \"rank\": 1, \"name\": \"Hannah\"},\n             ],\n         )\n+        # Verify that the primary keys are set after bulk_create with update_conflicts=True\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n \n         UpsertConflict.objects.bulk_create(\n             conflicting_objects + [UpsertConflict(number=4, rank=4, name=\"Mark\")],\n@@ -775,6 +830,16 @@ class BulkCreateTests(TestCase):\n                 {\"number\": 4, \"rank\": 4, \"name\": \"Mark\"},\n             ],\n         )\n+        # Verify that the primary keys are set after bulk_create with update_conflicts=True\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n \n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n@@ -799,6 +864,11 @@ class BulkCreateTests(TestCase):\n         )\n         self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n \n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+\n         conflicting_objects = [\n             FieldsWithDbColumns(rank=1, name=\"c\"),\n             FieldsWithDbColumns(rank=2, name=\"d\"),\n@@ -816,4 +886,14 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n+        # Verify that the primary keys are set after bulk_create with update_conflicts=True\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..e723930 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1120,6 +1120,24 @@ def test_range_slider(orientation):\n     assert_allclose(slider.val, [0.1, 0.34])\n \n \n+@pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\n+def test_range_slider_initialization(orientation):\n+    fig, ax = plt.subplots()\n+\n+    # Trying to initialize with endpoint values\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"\", valmin=0.0, valmax=1.0, orientation=orientation,\n+        valinit=[0.0, 1.0]\n+    )\n+    assert_allclose(slider.val, (0.0, 1.0))\n+\n+    # Initialize with invalid values (out of bounds) and test clamping\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"\", valmin=0.0, valmax=1.0, orientation=orientation,\n+        valinit=[-0.1, 1.1]\n+    )\n+    assert_allclose(slider.val, (0.0, 1.0))\n+\n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n     \"\"\"\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..729a3ef 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -508,7 +508,37 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+@pytest.mark.parametrize(\"figure_creation_code\", [\n+    \"plt.figure()\",\n+    \"plt.ion()\",\n+])\n+def test_get_backend_rc_context_figure_removal(figure_creation_code):\n+    \"\"\"\n+    Test that calling get_backend() doesn't clear figures from Gcf\n+    if they were created under an rc_context.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    from matplotlib import rc_context, get_backend\n+    from matplotlib._pylab_helpers import Gcf\n+\n+    # Optionally create a figure or set interactive mode\n+    exec(figure_creation_code)\n+\n+    # Within rc_context, create a new figure\n+    with rc_context():\n+        fig2 = plt.figure()\n+\n+    # Capture the state of the Gcf figures before getting backend\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    # Call get_backend\n+    get_backend()\n+\n+    # Capture Gcf figures' state after getting backend\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    # Assert that the figures in Gcf remain same\n+    assert before == after, '\\n' + before + '\\n' + after\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..6bc6d76 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -20,6 +20,18 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d(fig_test, fig_ref):\n+    # Test for checking visibility in 3D plots\n+    ax1 = fig_test.add_subplot(1, 2, 1, projection='3d')\n+    ax2 = fig_test.add_subplot(1, 2, 2, projection='3d')\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1, c='r')\n+    ax1.set_visible(False)\n+\n+    ax1_ref = fig_ref.add_subplot(1, 2, 1, projection='3d')\n+    ax2_ref = fig_ref.add_subplot(1, 2, 2, projection='3d')\n+    ax2_ref.scatter(1, 1, 1, c='r')\n \n def test_aspect_equal_error():\n     fig = plt.figure()\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..1ed7eeb 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,7 +774,15 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n-def test_get_set_draggable():\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_init_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    line, = ax.plot(range(10), label='Test Line')\n+    legend = ax.legend(draggable=draggable)\n+    assert legend.get_draggable() == draggable\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..656d1a8 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -255,8 +255,30 @@ def test_linedash():\n \n     assert buf.tell() > 0\n \n+import io\n+from matplotlib.figure import Figure\n+\n+def test_empty_line_patch():\n+    # Testing fix for issue where empty lines in text raise an error.\n+    figure = Figure()\n+    buf = io.BytesIO()\n+\n+    # Case: Title with empty line\n+    figure.text(0.5, 0.5, \"\\nTitle with empty line\\n\")\n+    figure.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n+\n+    # Case: Annotation with empty lines\n+    buf = io.BytesIO()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\nLower label\\nAnother line\\n', xy=(0, 0))\n+    figure.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n \n-def test_no_duplicate_definition():\n+    # Note that these are smoke tests: We're merely checking that no exceptions are raised,\n+    # which is relevant here since the original bug would cause an exception.\n \n     fig = Figure()\n     axs = fig.subplots(4, 4, subplot_kw=dict(projection=\"polar\"))\n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..17dee68 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,35 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+@pytest.mark.filterwarnings('error')  # Turn warnings into errors for this test\n+def test_no_user_warning_with_constrained_layout_false():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+\n+    try:\n+        plt.subplots_adjust(wspace=0)\n+    except UserWarning:\n+        pytest.fail(\"UserWarning generated when constrained_layout=False should suppress it.\")\n+\n+def test_user_warning_constrained_layout_removed():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2))\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+\n+    with pytest.warns(UserWarning, match=\"This figure was using a layout engine that is incompatible\"):\n+        plt.subplots_adjust(wspace=0)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..f1e98d9 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5733,6 +5733,39 @@ def test_set_get_ticklabels():\n \n \n @check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_kwargs_valid_with_labels():\n+    \"\"\"\n+    When labels are provided, valid kwargs should be accepted and applied \n+    to the tick labels.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1]\n+    labels = [\"a\", \"b\"]\n+    ax.xaxis.set_ticks(ticks, labels=labels, alpha=0.5)\n+    for label in ax.get_xticklabels():\n+        assert label.get_alpha() == 0.5\n+\n+def test_set_ticks_invalid_kwargs_with_labels():\n+    \"\"\"\n+    When labels are provided, invalid kwargs should not be silently accepted.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1]\n+    labels = [\"a\", \"b\"]\n+    with pytest.raises(TypeError):\n+        ax.xaxis.set_ticks(ticks, labels=labels, non_existent_property='value')\n+\n+def test_set_ticks_kwargs_without_labels_no_kwargs():\n+    \"\"\"\n+    Ensure that no error is raised if no kwargs are passed and labels are not set.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1]\n+    ax.xaxis.set_ticks(ticks)  # Should work without error\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..e33294b 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,4 +1,6 @@\n+\n from io import BytesIO\n+import pickletools\n import ast\n import pickle\n \n@@ -89,8 +91,25 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n-@mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    \n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    \n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    \n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Check that 'FigureCanvasQTAgg' is not in the pickle stream\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    loaded_fig = pickle.loads(pkl)\n+    assert loaded_fig is not None  # Ensure the loaded figure is not None\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..0543a93 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,34 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n-@mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig, (ax1, ax2) = plt.subplots(2, 1)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        print(\"Pickling succeeded\")\n+    except Exception as e:\n+        print(f\"Pickling failed with exception: {e}\")\n+\n+    # test unpickling\n+    loaded_fig = pickle.loads(pickle_data)\n+    assert loaded_fig is not None, \"Unpickled figure is None\"\n+\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..35ab190 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,9 +9,41 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n \n+    def test_missing_data_handling(self, df):\n+        # Introduce missing data in the middle of the data\n+        df_with_nan = df.copy()\n+        df_with_nan.loc[10:20, 'x'] = np.nan\n+\n+        groupby = GroupBy([\"group\"])\n+\n+        # Attempt PolyFit on data with missing values\n+        try:\n+            res_missing = PolyFit()(df_with_nan[['x', 'y']], groupby, 'x', {})\n+            res_dropped = PolyFit()(df_with_nan.dropna()[['x', 'y']], groupby, 'x', {})\n+            # Compare only the non-missing parts of the result\n+            assert_frame_equal(res_missing.reset_index(drop=True), res_dropped.reset_index(drop=True))\n+        except Exception as e:\n+            pytest.fail(f\"PolyFit raised an exception on missing data: {e}\")\n+\n+    def test_no_nan_in_output(self, df):\n+        groupby = GroupBy([\"group\"])\n+        \n+        # Fit polynomial with entire data having no NaN\n+        res_no_nan = PolyFit()(df[['x','y']], groupby, 'x', {})\n+        assert not res_no_nan.isna().any().any(), \"The output of PolyFit should not contain NaN values.\"\n+\n+    # Original test function\n+    def test_missing_data(self, df):\n+        groupby = GroupBy([\"group\"])\n+        df.iloc[5:10] = np.nan\n+        res1 = PolyFit()(df[[\"x\", \"y\"]], groupby, \"x\", {})\n+        res2 = PolyFit()(df[[\"x\", \"y\"]].dropna(), groupby, \"x\", {})\n+        assert_frame_equal(res1, res2)\n+\n     @pytest.fixture\n     def df(self, rng):\n \n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..a689a46 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -707,6 +707,19 @@ class TestFacetGrid:\n                     assert mpl.colors.same_color(tick.tick2line.get_color(), color)\n                     assert tick.get_pad() == pad\n \n+import numpy as np\n+import pandas as pd\n+import pytest\n+import seaborn as sns\n+from matplotlib import pyplot as plt\n+from seaborn.axisgrid import PairGrid\n+from seaborn import scatterplot\n+from seaborn import histplot, kdeplot\n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib.legend import Legend\n+from numpy.testing import assert_array_equal\n+from seaborn.palettes import color_palette\n+from seaborn.utils import assert_plots_equal, get_legend_handles\n \n class TestPairGrid:\n \n@@ -722,6 +735,32 @@ class TestPairGrid:\n         g = ag.PairGrid(self.df)\n         assert g.data is self.df\n \n+    def test_pairplot_column_multiindex(self):\n+\n+        # Test with basic MultiIndex DataFrame\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df = self.df[[\"x\", \"y\"]].set_axis(cols, axis=1)\n+        g = sns.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+\n+        # Test with a more comprehensive MultiIndex DataFrame\n+        data = {\n+            (\"A\", \"1\"): np.random.rand(100),\n+            (\"A\", \"2\"): np.random.rand(100),\n+            (\"B\", \"1\"): np.random.rand(100),\n+            (\"B\", \"2\"): np.random.rand(100),\n+        }\n+        df_multi = pd.DataFrame(data)\n+        g_multi = sns.pairplot(df_multi)\n+        expected_vars = [(\"A\", \"1\"), (\"A\", \"2\"), (\"B\", \"1\"), (\"B\", \"2\")]\n+        assert g_multi.diag_vars == expected_vars\n+\n+        # Test that a MultiIndex with only one level also works\n+        cols_single_level = pd.MultiIndex.from_arrays([[\"x\", \"y\"]])\n+        df_single_level = self.df[[\"x\", \"y\"]].set_axis(cols_single_level, axis=1)\n+        g_single_level = sns.pairplot(df_single_level)\n+        assert g_single_level.diag_vars == list(cols_single_level)\n+\n     def test_ignore_datelike_data(self):\n \n         df = self.df.copy()\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..0a2d7c5 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,4 +1,8 @@\n+\n+import os\n import json\n+import pytest\n+import flask\n import os\n import textwrap\n \n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..1d9246b 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,25 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_iter_content_with_decode_unicode_true(self):\n+        \"\"\"\n+        Ensure that iter_content yields unicode strings when decode_unicode=True.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'some json content')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(chunk_size=8, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+\n+    def test_iter_content_with_decode_unicode_false(self):\n+        \"\"\"\n+        Ensure that iter_content yields bytes when decode_unicode=False.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'some json content')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(chunk_size=8, decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..b8958be 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -94,6 +94,16 @@ class TestFixme(CheckerTestCase):\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_issue_2321_should_trigger(self) -> None:\n         code = \"# TODO this should not trigger a fixme\"\n         with self.assertAddsMessages(\n@@ -119,4 +129,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..2f94958 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -73,10 +73,12 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n \n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n-    with pytest.raises(_UnrecognizedOptionError):\n+    with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err\n+    assert \"usage: pylint\" in output.err\n \n \n def test_unknown_confidence(capsys: CaptureFixture) -> None:\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..b385aad 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,29 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_path_recursive_with_pattern(self) -> None:\n+        \"\"\"Test if `ignore-paths` works with recursive flag. GitHub issue #6964.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+                self._runtest(\n+                    [\".\", \"--recursive=y\"],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..66ec973 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,11 +934,20 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n-\n-def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n+def test_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for modules having the same name as the directory\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the directory structure where a module has the same name as the directory\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Check the directory, which should not fail due to missing __init__.py\n+        linter.check([\"a\"])\n+    # Ensure there are no parse errors indicating a missing __init__.py\n+    assert \"parse-error\" not in linter.stats.by_msg\n+    assert not linter.stats.by_msg\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..3ec5103 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,6 +114,25 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n+def test_template_with_custom_braces(linter: PyLinter) -> None:\n+    \"\"\"\n+    Test using custom braces in the message template\n+    \"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    template = '{{ \"Category\": \"{category}\", \"Line\": \"{line}\" }}'\n+    linter.config.msg_template = template\n+    linter.open()\n+    linter.set_current_module(\"example_mod\")\n+\n+    linter.add_message(\"C0301\", line=1, args=(1,))\n+    linter.add_message(\"error\", line=2, args=(2,))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\", \"Line\": \"1\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\", \"Line\": \"2\" }'\n+\n+\n def test_deprecation_set_output(recwarn):\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..8155141 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -281,6 +281,10 @@ class TestImportPath:\n         with pytest.raises(ImportError):\n             import_path(tmp_path / \"invalid.py\", root=tmp_path)\n \n+    from pytest import Pytester\n+    import pytest\n+    import sys\n+    \n     @pytest.fixture\n     def simple_module(self, tmp_path: Path) -> Path:\n         fn = tmp_path / \"_src/tests/mymod.py\"\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\nindex 82f0458..1edd0e2 100644\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -257,6 +257,28 @@ def test_log_cli_enabled_disabled(testdir, enabled):\n \n \n def test_log_cli_default_level(testdir):\n+    \"\"\" \n+    Test to ensure the default logging format includes module and filename.\n+    \"\"\"\n+    testdir.makepyfile(\n+        test_log_cli=\"\"\"\n+        import logging\n+        def test_log_cli():\n+            logging.basicConfig(level=logging.DEBUG)\n+            logging.getLogger('custom.module').debug('Test message')\n+        \"\"\"\n+    )\n+\n+    result = testdir.runpytest('--log-cli-level=DEBUG')\n+\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"test_log_cli.py::test_log_cli \",\n+            \"*-- live log call --*\",\n+            \"DEBUG    custom.module:test_log_cli.py:4 Test message\",\n+        ]\n+    )\n+    assert result.ret == 0\n     # Default log file level\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..80c3c61 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,4 +1,7 @@\n+\n import os\n+import platform\n+from datetime import datetime\n from xml.dom import minidom\n \n import py\n@@ -139,7 +142,30 @@ class TestPython:\n         node = dom.find_first_by_tag(\"testsuite\")\n         node.assert_attr(name=\"pytest\", errors=1, failures=2, skipped=1, tests=5)\n \n-    def test_timing_function(self, testdir):\n+    \n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n         testdir.makepyfile(\n             \"\"\"\n             import time, pytest\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..770f79c 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,32 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_broken_repr():\n+    \"\"\"Test saferepr() handling of exceptions in __repr__ method.\"\"\"\n+\n+    class AnotherClass:\n+        def __repr__(self):\n+            raise ValueError(\"An error occurred\")\n+\n+    result = saferepr(AnotherClass())\n+    assert \"<[ValueError('An error occurred') raised in repr()] AnotherClass object at 0x\" in result\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +179,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..0cb8d41 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -305,6 +305,29 @@ def test_cwd_snapshot(testdir: Testdir) -> None:\n     bar.chdir()\n     assert py.path.local() == bar\n     snapshot.restore()\n+\n+def test_failure_with_changed_cwd(testdir) -> None:\n+    \"\"\"Test failure lines should use absolute paths if cwd has changed since invocation (#6428).\"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def change_cwd(tmpdir):\n+            original_dir = os.getcwd()\n+            new_dir = tmpdir.mkdir('new_dir')\n+            os.chdir(new_dir)\n+            yield new_dir\n+            os.chdir(original_dir)\n+\n+        def test_fail_with_changed_cwd(change_cwd):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    # We expect the output to reflect the original directory and not the changed one\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     assert py.path.local() == foo\n \n \n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..209692f 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -708,6 +708,65 @@ class TestFunctional:\n \n \n class TestKeywordSelection:\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360\"\"\"\n+        import os\n+\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+            \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+            \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+    def test_reevaluate_with_different_globals(self, testdir):\n+        py_file1 = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            condition = 1\n+\n+            @pytest.mark.skipif(\"condition == 1\")\n+            def test_global_condition_one():\n+                assert True\n+            \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            condition = 2\n+\n+            @pytest.mark.skipif(\"condition == 1\")\n+            def test_global_condition_two():\n+                assert True\n+            \"\"\"\n+        )\n+\n+        reprec = testdir.inline_run(py_file1, py_file2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n     def test_select_simple(self, testdir):\n         file_test = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..de91d90 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -219,6 +219,25 @@ class TestXFail:\n         assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"\n         assert not hasattr(callreport, \"wasxfail\")\n \n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_location_reporting(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n     def test_xfail_run_anyway(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..be5bf4c 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -411,6 +412,31 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*NOTRUN*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        \"\"\" Test dynamic xfail: test should xfail when assertion fails \"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        \"\"\" Test dynamic xfail with strict=True on passed test: should fail \"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_dynamic_xfail_set_during_funcarg_setup(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-8365": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..7915f7d 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,28 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Single target\n+    y = rng.choice([1, -1], size=n_samples)\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Multi-target case\n+    n_targets = 3\n+    y = rng.choice([1, -1], size=(n_samples, n_targets))\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..5bbd0a9 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,7 +5,7 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_raise_message, assert_array_equal\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n",
  "scikit-learn__scikit-learn-12471": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..d49c626 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,17 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    from sklearn.mixture import GaussianMixture\n+    from numpy.testing import assert_array_equal\n+    import numpy as np\n+\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..2817363 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -71,7 +72,31 @@ def test_kernel_pca_consistent_transform():\n     assert_array_almost_equal(transformed1, transformed2)\n \n \n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_flipping():\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(10, 10)\n+\n+    kpca1 = KernelPCA(n_components=7, kernel='rbf', random_state=42)\n+    kpca2 = KernelPCA(n_components=7, kernel='rbf', random_state=42)\n+\n+    X_transformed1 = kpca1.fit_transform(X)\n+    X_transformed2 = kpca2.fit_transform(X)\n+\n+    # Check if the absolute values of the components are the same \n+    # even if the signs are flipped\n+    assert_allclose(np.abs(X_transformed1), np.abs(X_transformed2))\n+\n+    # Attempt to match the signs of both results\n+    signs1 = np.sign(X_transformed1)\n+    signs2 = np.sign(X_transformed2)\n+\n+    # We multiply components where signs differ to make them consistent\n+    for i in range(X_transformed1.shape[1]):\n+        if not np.all(signs1[:, i] == signs2[:, i]):\n+            X_transformed2[:, i] *= -1\n+\n+    # Ensure both are now exactly equal\n+    assert_allclose(X_transformed1, X_transformed2)\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..dfba535 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,6 +1058,28 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n+def test_pipeline_len():\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.svm import SVC\n+    from sklearn.pipeline import Pipeline\n+\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipeline = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    # Check that len(pipeline) returns the number of steps\n+    assert len(pipeline) == 2\n+\n+    # Check a pipeline with a single step\n+    single_step_pipeline = Pipeline([('anova', anova_filter)])\n+    assert len(single_step_pipeline) == 1\n+\n+    # Check an empty pipeline raises an appropriate error\n+    empty_pipeline = Pipeline([])\n+    assert len(empty_pipeline) == 0\n+\n+\n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n@@ -1070,4 +1092,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..27fb1a7 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils.validation import check_random_state\n \n import numpy as np\n \n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..70f17de 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,24 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+    # Additional test cases for issue verification\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test with 'manual' as discrete_features, which should raise ValueError\n+        assert_raises(ValueError, mutual_info, X_csr, y,\n+                      discrete_features='manual')\n+        \n+        # Test with a valid boolean mask\n+        mi_5 = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        # Test with an equivalent array of indices\n+        mi_6 = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        assert_array_equal(mi_5, mi_6)\n+\n+        # Test with boolean mask of incorrect length should raise IndexError\n+        assert_raises(IndexError, mutual_info, X, y,\n+                      discrete_features=[True, False, True, False])\n+\n+        # Test with invalid indices should raise IndexError\n+        assert_raises(IndexError, mutual_info, X, y,\n+                      discrete_features=[1, 4])\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..6dca61e 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +217,18 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_with_array_param():\n+    # Test that LogisticRegressionCV with array parameter works with print_changed_only=True\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        assert \"Cs=array([0.1, 1. ])\" in repr_output, \"Unexpected repr output\"\n+    except Exception as e:\n+        assert False, f\"An exception was raised: {e}\"\n+    finally:\n+        # Reset the config to default to avoid side effects\n+        set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..ab98790 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -9,6 +10,8 @@ from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n from sklearn.exceptions import NotFittedError\n from sklearn.linear_model import LogisticRegression\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n@@ -503,6 +506,20 @@ def test_transform():\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n+    # Additional test case for VotingRegressor with None estimator and weights\n+    X_r, y_r = datasets.make_regression(n_samples=50, n_features=4, noise=0.5, random_state=1)\n+    voter_regressor = VotingRegressor(\n+        estimators=[\n+            ('lr', LinearRegression()),\n+            ('rf', RandomForestRegressor(n_estimators=5))\n+        ]\n+    )\n+    voter_regressor.fit(X_r, y_r, sample_weight=np.ones(y_r.shape))\n+    voter_regressor.set_params(lr=None)\n+    voter_regressor.fit(X_r, y_r, sample_weight=np.ones(y_r.shape))\n+    y_pred_reg = voter_regressor.predict(X_r)\n+    assert y_pred_reg.shape == (y_r.shape[0],)\n+\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..f86ad89 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,26 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n-\n-def test_transformation_dimensions():\n+import pytest\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+import numpy as np\n+from sklearn.utils._testing import assert_no_warnings\n+\n+@pytest.mark.parametrize('param, value', [\n+    ('n_components', np.int64(3)),    # Check with numpy int64\n+    ('max_iter', np.int64(100)),      # Check with numpy int64\n+    ('tol', np.float32(0.0001))       # Check with numpy float32\n+])\n+def test_parameters_numpy_types(param, value):\n+    # Ensures that parameters set as numpy data types are correctly handled\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+    \n+    # Create the NCA class with the numpy type parameters\n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n+    \n+    # Fit the model and verify no warnings occur\n+    assert_no_warnings(nca.fit, X, y)\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..6bc1dd9 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,38 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the issue with empty support vectors causing ZeroDivisionError\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size, \"Expected support_vectors_ to be empty\"\n+    assert not model.dual_coef_.data.size, \"Expected dual_coef_ to be empty\"\n+\n+\n+def test_sparse_fit_no_support_vectors():\n+    # Ensure that an SVM fit on sparse data with no support vectors does not fail\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn.svm import SVC\n+\n+    X = sparse.csr_matrix([[0, 0, 0], [0, 0, 0]])\n+    y = np.array([0, 1])\n+    model = SVC(kernel='linear')\n+    # Since the data is completely zero, no support vectors should be created\n+    model.fit(X, y)\n+    assert model.support_vectors_.shape[0] == 0, \"No support vectors expected\"\n+    assert model.dual_coef_.shape[1] == 0, \"Dual coefficients should be empty\"\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..47425ef 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,8 +972,26 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n-def test_repeated_cv_value_errors():\n+import pytest\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr_with_default(RepeatedCV):\n+    # Test the __repr__ with default parameters\n+    repeated_cv = RepeatedCV()\n+    expected_repr = \"{}(n_splits=5, n_repeats=10, random_state=None)\".format(repeated_cv.__class__.__name__)\n+    assert repr(repeated_cv) == expected_repr\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr_with_custom_params(RepeatedCV):\n+    # Test the __repr__ with custom parameters\n+    n_splits, n_repeats, random_state = 3, 7, 42\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    expected_repr = \"{}(n_splits={}, n_repeats={}, random_state={})\".format(\n+        repeated_cv.__class__.__name__, n_splits, n_repeats, random_state)\n+    assert repr(repeated_cv) == expected_repr\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n         assert_raises(ValueError, cv, n_repeats=0)\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..5f399e0 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,4 +1,10 @@\n+\n import warnings\n+import pytest\n+import numpy as np\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn import set_config\n import numpy as np\n import pickle\n import copy\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..d252b22 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2120,12 +2120,60 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     # not define the method.\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n+from sklearn.compose import ColumnTransformer\n+from sklearn.preprocessing import StandardScaler\n+import pytest\n+import numpy as np\n+from sklearn.utils._testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+\n+    Non-regression test for gh-25487\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\"])\n \n-    # The feature names are prefixed because verbose_feature_names_out=True is default\n+def test_no_features_in_one_transformer():\n+    \"\"\"Test case where one transformer has no features, ensuring it is ignored.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    \n+    X = pd.DataFrame(data=[[1.0, 2.0, 3.0], [4, 2, 2]], columns=[\"a\", \"b\", \"c\"])\n+    numerical_features = [\"a\", \"b\"]\n+    ct = ColumnTransformer(\n+        [\n+            ('categorical', 'passthrough', []),\n+            ('numerical', StandardScaler(), numerical_features),\n+        ],\n+        remainder='drop'\n+    ).set_output(transform=\"pandas\")\n+    \n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n     assert_array_equal(X_trans_df0.columns, expected_verbose_names)\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..2a99a16 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -112,17 +112,281 @@ def test_automodule_special_members(app):\n         '',\n     ]\n \n+import sys\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n-@pytest.mark.sphinx('html', testroot='ext-autodoc',\n-                    confoverrides={'autodoc_mock_imports': ['missing_module',\n-                                                            'missing_package1',\n-                                                            'missing_package2',\n-                                                            'missing_package3',\n-                                                            'sphinx.missing_module4']})\n-@pytest.mark.usefixtures(\"rollback_sysmodules\")\n-def test_subclass_of_mocked_object(app):\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_multiple_inherited_members(app):\n+    options = {'members': None,\n+               'undoc-members': None,\n+               'inherited-members': 'Base, list, set'}\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    expected = [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '.. py:class:: MyList(iterable=(), /)',\n+        '   :module: target.inheritance',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+    assert list(actual) == expected\n     sys.modules.pop('target', None)  # unload target module to clear the module cache\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..4af0c30 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,9 +1,20 @@\n+\n from __future__ import annotations\n \n from typing import overload\n+from typing import Type\n \n myint = int\n \n+#: This is an example variable\n+var: myint\n+\n+class ExampleClass:\n+    \"\"\"Example class for testing\"\"\"\n+\n+    #: This is an example attribute\n+    attr: myint\n+\n \n def sum(x: myint, y: myint) -> myint:\n     \"\"\"docstring\"\"\"\n@@ -22,4 +33,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..a5dda78 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -78,7 +78,51 @@ def test_get_full_qualified_name():\n     domain = StandardDomain(env)\n \n     # normal references\n-    node = nodes.reference()\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx import addnodes\n+from sphinx.util.docutils import SphinxDirective\n+\n+def test_cmd_option_various_syntaxes(app):\n+    # Test a variety of option syntaxes to ensure compatibility with Sphinx 3.2+\n+    \n+    # Case with no optional argument\n+    text1 = \".. option:: --option\"\n+    doctree1 = restructuredtext.parse(app, text1)\n+    assert_node(doctree1, (\n+        [desc, ([desc_signature, ([desc_name, '--option'])],\n+                [desc_content, ()])]))\n+\n+    # Case with optional value specified by brackets\n+    text2 = \".. option:: -j[=N]\"\n+    doctree2 = restructuredtext.parse(app, text2)\n+    assert_node(doctree2, (\n+        [desc, ([desc_signature, ([desc_name, '-j'],\n+                                  [desc_addname, '[=N]'])],\n+                [desc_content, ()])]))\n+\n+    # Case with optional value starting with a bracket\n+    text3 = \".. option:: [enable=]PATTERN\"\n+    doctree3 = restructuredtext.parse(app, text3)\n+    assert_node(doctree3, (\n+        [desc, ([desc_signature, ([desc_name, '[enable'],\n+                                  [desc_addname, '=]PATTERN'])],\n+                [desc_content, ()])]))\n+\n+    # Ensure no warnings for valid syntaxes\n+    assert 'Warning' not in app._status.getvalue()\n+\n+    # Objects should be registered correctly in the domain\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--option', '--option', 'cmdoption', 'index', 'cmdoption--option', 1) in objects\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+    # Introduce an intentionally malformed case to trigger a warning\n+    text4 = \".. option:: /invalid format\"\n+    try:\n+        doctree4 = restructuredtext.parse(app, text4)\n+    except Exception as e:\n+        assert \"Malformed option description\" in str(e)\n     assert domain.get_full_qualified_name(node) is None\n \n     # simple reference to options\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..f30c2cf 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -22,6 +22,9 @@ from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_op\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n \n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n try:\n     # Enable pyximport to test cython module\n     import pyximport\n@@ -45,6 +48,42 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_with_members_option(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_with_no_options(app):\n+    options = {}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_with_undoc_members(app):\n+    options = {'undoc-members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..44cda56 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -46,6 +48,9 @@ def test_restify():\n     assert restify(Any) == \":obj:`Any`\"\n \n \n+def test_restify_struct_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n+\n def test_restify_type_hints_containers():\n     assert restify(List) == \":class:`List`\"\n     assert restify(Dict) == \":class:`Dict`\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..2c5bd38 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,52 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_class_reference(self):\n+        # Test with napoleon_use_param set to False\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+other_param1 : :class:`MyOtherClass <name.space.MyOtherClass>` instance\n+\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **other_param1** (:class:`MyOtherClass <name.space.MyOtherClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param set to True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param other_param1:\n+:type other_param1: :class:`MyOtherClass <name.space.MyOtherClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+    def test_other_parameters_and_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+param1 : int\n+\n+Other Parameters\n+----------------\n+other_param1 : float\n+\"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param1:\n+:type param1: int\n+\n+:param other_param1:\n+:type other_param1: float\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..5ec2343 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -321,8 +321,26 @@ def test_mul():\n         h2 = _af_rmuln(*a[:i + 1])\n         assert h == h2\n \n-\n-def test_args():\n+def test_permutation_constructor_with_non_disjoint_cycles():\n+    # Non-disjoint cycles should be applied in left-to-right order\n+    # [[0, 1], [0, 1]] should result in identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    \n+    # Testing more complex non-disjoint cycles\n+    # Here, [0, 1, 2], [1, 2] should result in permutation [1, 2, 0]\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([1, 2, 0])\n+    \n+    # Edge case with overlapping cycles resulting in identity permutation\n+    assert Permutation([[2, 3, 4], [2, 4, 3]]) == Permutation([0, 1, 2, 3, 4])\n+\n+    # Disjoint cycles for sanity check\n+    assert Permutation([[0, 1], [2, 3]]) == Permutation([1, 0, 3, 2])\n+    \n+    # Single repeated element should not affect as a cycle\n+    assert Permutation([[0, 0]]) == Permutation([0])\n+    \n+    # Empty cycles should result in identity permutation\n+    assert Permutation([[]]) == Permutation([])\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n     assert Permutation(p) == p\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..fef7ad7 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,8 +1,30 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n+from sympy import Matrix\n \n def test_sparse_matrix():\n+    # Test horizontal stacking with matrices having zero rows and varying columns\n+    def test_hstack_zero_row():\n+        M1 = Matrix.zeros(0, 0)\n+        M2 = Matrix.zeros(0, 1)\n+        M3 = Matrix.zeros(0, 2)\n+        M4 = Matrix.zeros(0, 3)\n+        result = Matrix.hstack(M1, M2, M3, M4)\n+        assert result.shape == (0, 6)  # Expecting a shape of (0, 6)\n+\n+    # Test vertical stacking with matrices having zero columns and varying rows\n+    def test_vstack_zero_col():\n+        M1 = Matrix.zeros(0, 0)\n+        M2 = Matrix.zeros(1, 0)\n+        M3 = Matrix.zeros(2, 0)\n+        M4 = Matrix.zeros(3, 0)\n+        result = Matrix.vstack(M1, M2, M3, M4)\n+        assert result.shape == (6, 0)  # Expecting a shape of (6, 0)\n+    \n+    test_hstack_zero_row()\n+    test_vstack_zero_col()\n     def sparse_eye(n):\n         return SparseMatrix.eye(n)\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..d254f96 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -81,8 +81,20 @@ def check(a, exclude=[], check_attr=True):\n \n #================== core =========================\n \n+import pickle\n+from sympy import symbols, Float\n+\n+def test_pickle_float_expression_py2_to_py3():\n+    x = symbols(\"x\")\n+    expr = x + 1.0\n+\n+    # Simulating pickling in Python 2\n+    pickled_data = pickle.dumps(expr, protocol=2)\n+\n+    # Loading the pickled data in Python 3\n+    unpickled_expr = pickle.loads(pickled_data)\n \n-def test_core_basic():\n+    assert unpickled_expr == expr\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n               # XXX: dynamically created types are not picklable\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..6e66adb 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -273,7 +273,23 @@ def test_coth():\n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n \n-def test_coth_series():\n+def test_coth_substitution_errors():\n+    from sympy import coth, log, tan, Symbol\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Integral values that were causing errors in the issue description\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..25aa25a 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,60 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643():\n+    import sympy as sm\n+\n+    # Original test case from the issue\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Additional cases\n+    # Case 1: Inserting zero matrix\n+    Z = sm.zeros(6, 2)\n+    result = M.col_insert(3, Z)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 1, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 1, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 1, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 1, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Case 2: Inserting at the beginning\n+    result = M.col_insert(0, V)\n+    expected = sm.Matrix([\n+        [2, 2, 1, 0, 0, 0, 0, 0],\n+        [2, 2, 0, 1, 0, 0, 0, 0],\n+        [2, 2, 0, 0, 1, 0, 0, 0],\n+        [2, 2, 0, 0, 0, 1, 0, 0],\n+        [2, 2, 0, 0, 0, 0, 1, 0],\n+        [2, 2, 0, 0, 0, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Case 3: Inserting at the end\n+    result = M.col_insert(6, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 0, 0, 0, 2, 2],\n+        [0, 1, 0, 0, 0, 0, 2, 2],\n+        [0, 0, 1, 0, 0, 0, 2, 2],\n+        [0, 0, 0, 1, 0, 0, 2, 2],\n+        [0, 0, 0, 0, 1, 0, 2, 2],\n+        [0, 0, 0, 0, 0, 1, 2, 2]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..2aca5fb 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -662,8 +662,48 @@ def test_latex_sequences():\n     latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n+def test_latex_sequences_correct_brackets():\n+    s1 = SeqFormula(n**2, (n, 0, oo))\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s1) == latex_str\n+\n+    s2 = SeqPer((1, 2))\n+    latex_str = r'[1, 2, 1, 2, \\ldots]'\n+    assert latex(s2) == latex_str\n+\n+    s3 = SeqFormula(n**2, (n, 0, 3))\n+    latex_str = r'[0, 1, 4, 9]'\n+    assert latex(s3) == latex_str\n+\n+    s4 = SeqPer((1, 2), (0, 3))\n+    latex_str = r'[1, 2, 1, 2]'\n+    assert latex(s4) == latex_str\n+\n+    s5 = SeqFormula(n**2, (n, -oo, 0))\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(s5) == latex_str\n+\n+    s6 = SeqPer((1, 2), (-oo, 0))\n+    latex_str = r'[\\ldots, 2, 1, 2, 1]'\n+    assert latex(s6) == latex_str\n+\n+    latex_str = r'[1, 3, 5, 11, \\ldots]'\n+    assert latex(SeqAdd(s1, s2)) == latex_str\n+\n+    latex_str = r'[1, 3, 5]'\n+    assert latex(SeqAdd(s3, s4)) == latex_str\n+\n+    latex_str = r'[\\ldots, 11, 5, 3, 1]'\n+    assert latex(SeqAdd(s5, s6)) == latex_str\n+\n+    latex_str = r'[0, 2, 4, 18, \\ldots]'\n+    assert latex(SeqMul(s1, s2)) == latex_str\n \n-def test_latex_FourierSeries():\n+    latex_str = r'[0, 2, 4]'\n+    assert latex(SeqMul(s3, s4)) == latex_str\n+\n+    latex_str = r'[\\ldots, 18, 4, 2, 0]'\n+    assert latex(SeqMul(s5, s6)) == latex_str\n     latex_str = r'2 \\sin{\\left (x \\right )} - \\sin{\\left (2 x \\right )} + \\frac{2}{3} \\sin{\\left (3 x \\right )} + \\ldots'\n     assert latex(fourier_series(x, (x, -pi, pi))) == latex_str\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..98729a1 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -14,8 +15,31 @@ from sympy import Integer, Symbol, I, sqrt\n from sympy.utilities.pytest import raises\n from sympy.abc import x, y, z\n \n+from sympy import Poly\n \n def test_Options_clone():\n+    # Test valid domain specifications with RR and CC\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+    # Test the correct creation of Poly with RR and CC domains\n+    assert Poly(1.2*x*y*z, x).domain == RR[y, z]\n+    assert Poly(1.2*x*y*z, x, domain=RR[y, z]).domain == RR[y, z]\n+    assert Poly(1.2*x*y*z, x, domain='RR[y,z]').domain == RR[y, z]\n+\n+    assert Poly(1.2*x*y*z, x).domain == CC[y, z]\n+    assert Poly(1.2*x*y*z, x, domain=CC[y, z]).domain == CC[y, z]\n+    assert Poly(1.2*x*y*z, x, domain='CC[y,z]').domain == CC[y, z]\n+\n+    # Test incorrect domain specifications should raise OptionError\n+    raises(OptionError, lambda: Poly(1.2*x*y*z, x, domain='RR[z,]'))\n+    raises(OptionError, lambda: Poly(1.2*x*y*z, x, domain='CC[y,]'))\n     opt = Options((x, y, z), {'domain': 'ZZ'})\n \n     assert opt.gens == (x, y, z)\n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..e602e55 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -298,6 +299,24 @@ def test_latex_functions():\n         r\"\\sin {x^{2}}\"\n \n     assert latex(asin(x)**2) == r\"\\operatorname{asin}^{2}{\\left (x \\right )}\"\n+\n+    # Verify the fix for acsc and asec with full inverse trig function names\n+    assert latex(acsc(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n+\n+    # Test abbreviated style to ensure other styles are unaffected by the fix\n+    assert latex(acsc(x), inv_trig_style=\"abbreviated\") == \\\n+        r\"\\operatorname{acsc}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"abbreviated\") == \\\n+        r\"\\operatorname{asec}{\\left (x \\right )}\"\n+\n+    # Test power style to ensure other styles are unaffected by the fix\n+    assert latex(acsc(x), inv_trig_style=\"power\") == \\\n+        r\"\\csc^{-1}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"power\") == \\\n+        r\"\\sec^{-1}{\\left (x \\right )}\"\n     assert latex(asin(x)**2, inv_trig_style=\"full\") == \\\n         r\"\\arcsin^{2}{\\left (x \\right )}\"\n     assert latex(asin(x)**2, inv_trig_style=\"power\") == \\\n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..4c10b4d 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,9 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty, symbols, MatAdd\n+n, a = symbols('n a')\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n@@ -6122,7 +6125,34 @@ def test_MatrixSymbol_printing():\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n \n-def test_degree_printing():\n+def test_pretty_MatAdd():\n+    # The original test patch verifying the fix for the issue\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    \n+    # Ensure pretty printing does not run into sympify errors with special symbols\n+    assert pretty(x + y) == \"x + y*\"\n+    assert pretty(-a*x + -2*y*y) == \"-a*x -2*y**y*\"\n+\n+    # More comprehensive tests\n+    # Testing with negative coefficients and ensuring no parsing error occur\n+    z = MatrixSymbol('z', n, n)\n+    assert pretty(-x + y) == \"-x + y*\"\n+    assert pretty(-x) == \"-x\"\n+    assert pretty(x - y) == \"x - y*\"\n+    assert pretty(-x + (-y) + z) == \"-x -y* + z\"\n+    assert pretty(MatAdd(x, -y, z)) == \"x - y* + z\"\n+\n+    # Check behavior when combining positive and negative expressions\n+    assert pretty(MatAdd(-x, y, -z)) == \"-x + y* - z\"\n+    assert pretty(MatAdd(x, y, -z)) == \"x + y* - z\"\n+\n+    # Ensure no assumptions of form that break with different symbols\n+    t = MatrixSymbol('t-', n, n)\n+    assert pretty(MatAdd(x, t, y)) == \"x + t- + y*\"\n+\n+    # Check for nested MatAdd, ensuring consistent and correct expression\n+    assert pretty(MatAdd(MatAdd(x, -y), z)) == \"x - y* + z\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..0c071d2 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,6 +728,31 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n+def test_curly_matrix_symbol():\n+    # Issue with curly braces in MatrixSymbol names\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    lam = lambdify(curlyv, curlyv)\n+    assert lam([[1], [1]]) == [[1], [1]]\n+    lam = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam([[1], [1]]) == [[1], [1]]\n+\n+def test_curly_matrix_symbol_with_numpy():\n+    # Test with numpy module\n+    import numpy as np\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    lam = lambdify(curlyv, curlyv, modules=\"numpy\")\n+    assert np.array_equal(lam(np.array([[1], [1]])), np.array([[1], [1]]))\n+    lam = lambdify(curlyv, curlyv, modules=\"numpy\", dummify=True)\n+    assert np.array_equal(lam(np.array([[1], [1]])), np.array([[1], [1]]))\n+\n+def test_curly_matrix_symbol_with_different_modules():\n+    # Test with different modules including sympy\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    lam = lambdify(curlyv, curlyv, modules=\"sympy\")\n+    assert lam([[1], [1]]) == Matrix([[1], [1]])\n+    lam = lambdify(curlyv, curlyv, modules=[\"sympy\", \"math\"], dummify=True)\n+    assert lam([[1], [1]]) == Matrix([[1], [1]])\n+\n def test_python_keywords():\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..153b65b 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -24,6 +25,13 @@ def test_Rational():\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n \n+def test_Max():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y)) == \"Max[x, y]\"\n+    assert mcode(Max(2, y, x)) == \"Max[2, y, x]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+\n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..f546d12 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1739,6 +1739,39 @@ def test_MatrixElement_printing():\n     assert latex(F) == r\"\\left(A - B\\right)_{0, 0}\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n+def test_indexed_matrix_expression_latex():\n+    # Test for issue where indexed matrix-expression LaTeX printer was not compilable.\n+\n+    # Original test\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+    # Additional test cases to check if the problem is thoroughly resolved.\n+    \n+    # Test for non-square matrices\n+    P = MatrixSymbol(\"P\", k, k + 1)\n+    Q = MatrixSymbol(\"Q\", k + 1, k)\n+    assert latex((P*Q)[i, j]) == r'\\sum_{i_{1}=0}^{k} P_{i, i_{1}} Q_{i_{1}, j}'\n+    \n+    # Test to ensure the correct handling of dimensions in summation\n+    R = MatrixSymbol(\"R\", k + 1, k)\n+    S = MatrixSymbol(\"S\", k, k + 1)\n+    assert latex((R*S)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} R_{i, i_{1}} S_{i_{1}, j}'\n+\n+    # Test case with different symbol names and indices\n+    m, n, p = symbols(\"m n p\")\n+    X = MatrixSymbol(\"X\", n, m)\n+    Y = MatrixSymbol(\"Y\", m, p)\n+    assert latex((X*Y)[i, j]) == r'\\sum_{i_{1}=0}^{m - 1} X_{i, i_{1}} Y_{i_{1}, j}'\n+\n+    # Test with scalar multiplication inside the matrix multiplication\n+    alpha = symbols(\"alpha\")\n+    assert latex((alpha * M * N)[i, j]) == r'\\alpha \\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..3dfba62 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,24 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    # original issue test cases\n+    f = Function('f')\n+    g = Function('g')\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # additional test cases\n+    eq1 = Eq(y*exp(y), x*exp(x))\n+    assert idiff(eq1, y, x) == (x + 1)*exp(x - y)/(y + 1)\n+    eq2 = y*exp(y) - x*exp(x)\n+    assert idiff(eq2, y, x) == (x + 1)*exp(x - y)/(y + 1)\n+    eq3 = Eq(f(x)*exp(f(x)), x*exp(x))\n+    assert idiff(eq3, f(x), x) == (x + 1)*exp(x - f(x))/(f(x) + 1)\n+\n+    # ensure non-Eq functions are still working correctly\n+    assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..5335efc 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,29 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_ccode_unused_array_arg():\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.codegen import codegen\n+    from sympy.utilities.codegen import CCodeGen\n+    \n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..4c33ef9 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,21 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Symbol, Eq, Intersection, S\n+from sympy.sets import FiniteSet\n \n-def test_issue_9623():\n+def test_intersection_removes_duplicates_issue_16987():\n+    x = Symbol('x')\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    assert Intersection({1}, {1}, {x}).evalf() == Intersection({1}, {x}).evalf()\n+\n+    result = Intersection({1}, {1}, {x}).evalf()\n+    expected = S.EmptySet\n+    assert result == expected\n+\n+    result_piecewise = Intersection({1}, {x}).evalf()\n+    expected_piecewise = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert result_piecewise == expected_piecewise\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..3e204c0 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -10,7 +11,10 @@ from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayPermuteDims, CodegenArrayElementwiseAdd)\n from sympy.printing.lambdarepr import NumPyPrinter\n \n-from sympy.utilities.pytest import warns_deprecated_sympy\n+from sympy.utilities.pytest import warns_deprecated_sympy, skip, raises\n+from sympy.matrices import MatrixSymbol, Identity\n+from sympy import symbols\n+import numpy\n from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..849d574 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -801,7 +801,16 @@ def test_nc_simplify():\n     # commutative expressions should be returned without an error\n     assert nc_simplify(2*x**2) == 2*x**2\n \n-def test_issue_15965():\n+def test_issue_17137():\n+    x = Symbol('x')\n+    # Test simplification with imaginary exponent\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n+    # Additional test cases with more complex structures\n+    assert simplify(cos(x)**(-1 + I)) == cos(x)**(-1 + I)\n+    assert simplify((cos(x)*cos(x))**(I)) == (cos(x)**I)*(cos(x)**I)\n+    assert simplify((cos(x)**I)**I) == (cos(x)**I)**I\n     A = Sum(z*x**y, (x, 1, a))\n     anew = z*Sum(x**y, (x, 1, a))\n     B = Integral(x*y, x)\n@@ -814,4 +823,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..d5d023c 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,23 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n+import sympy\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n+def test_issue_geometry_point_multiplication():\n+    from sympy import geometry as ge\n+\n+    point1 = ge.Point(0, 0)\n+    point2 = ge.Point(1, 1)\n+\n+    # Test the original line which works fine\n+    assert (point1 + point2 * sympy.sympify(2.0)) == ge.Point(2, 2)\n \n-def test_point():\n+    # Test the line which raised an exception before the fix\n+    assert (point1 + sympy.sympify(2.0) * point2) == ge.Point(2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..cc9d5fa 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,7 +1894,40 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import Symbol, symbols, sympify, parse_expr, Expr\n+from sympy.core.sympify import SympifyError\n+from sympy.utilities.pytest import raises\n+\n def test_expr():\n+    # Test for issue where sympy incorrectly evaluates `repr` in __eq__\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    x = Symbol('x')\n+    \n+    # This should not raise an exception; it should return False\n+    assert (x == C()) is False\n+    \n+    # Now test when repr is 'x' (should return False, not True)\n+    class C2:\n+        def __repr__(self):\n+            return 'x'\n+    \n+    assert (x == C2()) is False\n+\n+    # Let's ensure that a sympy equation is not equal to a string expression\n+    assert (x + 1 == \"x + 1\") is False\n+\n+    # And ensure the sympify error is raised for invalid strings\n+    raises(SympifyError, lambda: sympify(\"invalid_string\"))\n+\n+    # Compare expr to a non-string object with a bad __repr__\n+    class BadRepr:\n+        def __repr__(self):\n+            raise RuntimeError\n+    \n+    assert (x == BadRepr()) is False\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n \n@@ -1902,4 +1935,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..831cd2a 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,21 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_diophantine_permute_syms_order():\n+    from sympy import diophantine\n+    from sympy.abc import x, y\n+\n+    # Test case for the issue where the order of symbols affects the result\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+\n+    # Additional test cases to ensure general behavior\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(y, x), permute=False) == \\\n+        {(3, 2)}\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..388a959 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String, Basic\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -60,7 +61,17 @@ def test_PostIncrement():\n     assert ccode(p) == '(x)++'\n \n \n-def test_sizeof():\n+def test_sizeof_atoms():\n+    typename = 'unsigned int'\n+    sz = sizeof(typename)\n+    # Check that atoms() returns only the 'typename'\n+    assert sz.atoms() == {String(typename)}\n+\n+def test_declaration_atoms():\n+    v = Variable('v', type=int64)\n+    dec = Declaration(v)\n+    # Check that atoms() for Declaration returns Strings and Types without args\n+    assert dec.atoms() == {'v', int64}  # Assuming the current behavior, expected to be updated per issue description\n     typename = 'unsigned int'\n     sz = sizeof(typename)\n     assert ccode(sz) == 'sizeof(%s)' % typename\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..d03b48b 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,27 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+    # Test conversion of a BlockDiagMatrix with a single matrix element back to a regular Matrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+    \n+def test_BlockDiagMatrix_two_element_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+    # Test conversion of a BlockDiagMatrix with two matrix elements\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    assert B == Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..194d524 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -83,7 +84,31 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_issue_block_matrix_index():\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    # Verify that C[i, 0] returns a MatrixElement which is not mistaken for A[i, 0]\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+    \n+    # Test with specific concrete indices\n+    assert C[0, 0] == A[0, 0]\n+    assert C[1, 0] == B[0, 0]\n+\n+def test_block_index_symbolic_edge_cases():\n+    # Testing symbolic edge cases with zero dimensions\n+    A1 = MatrixSymbol('A1', n, 0)\n+    A2 = MatrixSymbol('A2', 0, l)\n+    A3 = MatrixSymbol('A3', 0, 0)\n+    A4 = MatrixSymbol('A4', m, l)\n+    A = BlockMatrix([[A1, A3], [A2, A4]])\n+    \n+    # These indices correspond to elements in A4\n+    assert A[m, 0] == A4[0, 0]\n+    assert A[m + i, j] == MatrixElement(A, m + i, j)\n+\n+    # Negative indexing should not simplify incorrectly\n+    assert A[-1, l - 1] == MatrixElement(A, -1, l - 1)\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..9423c4a 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -302,7 +302,33 @@ def test_sign():\n     assert sign(x).rewrite(Heaviside) == 2*Heaviside(x, H0=S(1)/2) - 1\n     assert sign(y).rewrite(Heaviside) == sign(y)\n \n-    # evaluate what can be evaluated\n+    # Test for rewrite in terms of Abs\n+    x, y = symbols('x y')\n+\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(x*y).rewrite(Abs) == Piecewise((0, Eq(x*y, 0)), ((x*y)/Abs(x*y), True))\n+    assert sign(x - y).rewrite(Abs) == Piecewise((0, Eq(x - y, 0)), ((x - y)/Abs(x - y), True))\n+\n+    # Check symbolic zero handling\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # Test with a specific value\n+    val = Rational(3, 4)   # positive real number\n+    assert sign(val).rewrite(Abs).simplify() == 1\n+\n+    val = -Rational(3, 4) # negative real number\n+    assert sign(val).rewrite(Abs).simplify() == -1\n+\n+    val = I               # purely imaginary number\n+    assert sign(val).rewrite(Abs).simplify() == I\n+\n+    val = -I              # purely imaginary negative number\n+    assert sign(val).rewrite(Abs).simplify() == -I\n+\n+    # Test complex case\n+    val = 1 + I\n+    assert sign(val).rewrite(Abs) == val / Abs(val)\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n     eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..c417cba 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,19 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n def test_partitions():\n+    # Check for non-reuse of partition dictionaries\n+    part_gen = partitions(6, k=2)\n+    first_part = next(part_gen)\n+    second_part = next(part_gen)\n+    assert first_part is not second_part, \"Partition dictionaries should not be reused\"\n+\n+    part_gen = partitions(6, k=3)\n+    first_part_3 = next(part_gen)\n+    second_part_3 = next(part_gen)\n+    assert first_part_3 is not second_part_3, \"Partition dictionaries should not be reused\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..ed7dfcd 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -266,6 +266,18 @@ def test_zero():\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n+    # Test cases for issue with 0**-oo\n+    from sympy import oo, S, Pow\n+    # Direct calculation using the power operator\n+    assert 0**-oo == S.ComplexInfinity\n+    # Using the Pow class to instantiate the calculation\n+    assert Pow(0, -oo) == S.ComplexInfinity\n+    # Ensuring consistency with negative large exponents\n+    assert Pow(0, S.NegativeInfinity) == S.ComplexInfinity\n+    # Testing with symbolic negative infinity\n+    neg_inf = S.NegativeInfinity\n+    assert 0**neg_inf == S.ComplexInfinity\n+\n \n def test_pow_as_base_exp():\n     x = Symbol('x')\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..f578326 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -37,6 +38,17 @@ def test_convert_to():\n     assert q.convert_to(m) == 5000*m\n \n     assert speed_of_light.convert_to(m / s) == 299792458 * m / s\n+\n+    # Test for the issue with conversion of orthogonal units\n+    from sympy.physics.units import joule\n+    expr = joule * second\n+    # Check if convert_to(expr, joule) returns the expected result, which is no conversion\n+    assert convert_to(expr, joule) == expr\n+\n+    # Additional test cases for related correct behavior\n+    assert convert_to(joule * second, joule * second) == joule * second\n+    assert convert_to(joule * second, kg * m**2 / s) == kg * m**2 / s\n+    assert convert_to(joule * second, minute) == joule * minute / 60\n     # TODO: eventually support this kind of conversion:\n     # assert (2*speed_of_light).convert_to(m / s) == 2 * 299792458 * m / s\n     assert day.convert_to(s) == 86400*s\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..e5084e9 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,34 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol, raises\n+\n+def test_symbol_dict_absence():\n+    \"\"\"Test for absence of __dict__ in Symbol.\"\"\"\n+\n+    # Test that Symbol does not have __dict__ by default\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+\n+    # Test assignment to __dict__ raises AttributeError\n+    with raises(AttributeError):\n+        s.__dict__ = {}\n+\n+    # Test that __slots__ is defined for Symbol\n+    assert hasattr(s, '__slots__')\n+    assert s.__slots__ == ('name',)\n+\n+def test_symbol_dict_presence():\n+    \"\"\"Test for presence of empty __dict__ in Symbol if applicable.\"\"\"\n+\n+    # Attempt to verify the presence of __dict__ attribute\n+    s = Symbol('s')\n+    if hasattr(s, '__dict__'):  # Only proceed if __dict__ exists\n+        assert s.__dict__ == {}\n+        # Ensure no assignment to __dict__ raises an error\n+        s.__dict__['other'] = 'value'\n+        assert s.__dict__['other'] == 'value'\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..6d80cb8 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,12 +1,24 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n from sympy.matrices.expressions.matexpr import MatrixSymbol\n \n \n-def test_Abs():\n+def test_arg():\n+    x = Symbol('x', complex=True)\n+    a = Symbol('a', positive=True)\n+    assert refine(arg(x), Q.positive(x)) == 0\n+    assert refine(arg(x), Q.negative(x)) == pi\n+\n+def test_integral_refinement():\n+    x, a = symbols('x a', real=True)\n+    J = Integral(sin(x)*exp(-a*x), (x, 0, oo))\n+    assert refine(J.doit(), Q.positive(a)) == 1 / (a**2 + 1)\n+    assert refine(abs(a), Q.positive(a)) == a\n+    assert refine(arg(a), Q.positive(a)) == 0\n     assert refine(Abs(x), Q.positive(x)) == x\n     assert refine(1 + Abs(x), Q.positive(x)) == 1 + x\n     assert refine(Abs(x), Q.negative(x)) == -x\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..cc9bd07 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -9,6 +10,44 @@ from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n def test_subs():\n+    # Test for issue with unexpected PolynomialError in subs\n+    from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n+    from sympy.functions.elementary.miscellaneous import exp\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    x_r, y_r, z = symbols('x_r y_r z', real=True)\n+    expr_sinh = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    \n+    # Test for sinh - should not raise PolynomialError\n+    try:\n+        res_sinh = expr_sinh.subs({1: 1.0})\n+        assert res_sinh is not None\n+    except PolynomialError:\n+        assert False, \"PolynomialError raised unexpectedly for sinh with subs\"\n+\n+    # Test for cosh - should not raise PolynomialError\n+    try:\n+        res_cosh = expr_cosh.subs({1: 1.0})\n+        assert res_cosh is not None\n+    except PolynomialError:\n+        assert False, \"PolynomialError raised unexpectedly for cosh with subs\"\n+\n+    # Test for tanh - should not raise PolynomialError\n+    try:\n+        res_tanh = expr_tanh.subs({1: 1.0})\n+        assert res_tanh is not None\n+    except PolynomialError:\n+        assert False, \"PolynomialError raised unexpectedly for tanh with subs\"\n+\n+    # Additional checks for exp without sinh, cosh, tanh, to ensure no error\n+    expr_simple = exp(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    try:\n+        res_simple = expr_simple.subs({1: 1.0})\n+        assert res_simple is not None\n+    except PolynomialError:\n+        assert False, \"PolynomialError raised unexpectedly for simple exp with subs\"\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..1588c9a 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -34,7 +36,10 @@ def test_Symbol_kind():\n     assert comm_x.kind is NumberKind\n     assert noncomm_x.kind is UndefinedKind\n \n-def test_Integral_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..be79fcd 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -128,6 +128,19 @@ def test_monomials():\n \n     assert set(itermonomials([x, y], [2, 0])) == {S.One, x, x**2}\n     assert set(itermonomials([x, y], [2, 1])) == {S.One, x, y, x*y, x**2, x**2*y}\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+\n+    assert set(itermonomials([i, j, k], 2, 2)) == \\\n+        {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n+    assert set(itermonomials([i, j, k], 3, 2)) == \\\n+        {j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j,\n+         j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i,\n+         k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2,\n+         k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i,\n+         i*j*k, k*i\n+        }\n+\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..641cef9 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,5 @@\n+\n+from sympy.core.parameters import evaluate\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -11,8 +13,17 @@ from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n \n+def test_issue_22684():\n+    # Test when evaluate(False) is used\n+    with evaluate(False):\n+        # Check if Point2D can be created without ValueError\n+        assert Point2D(1, 2) == Point2D(Integer(1), Integer(2))\n+\n+    # Test without using evaluate context manager\n+    assert Point2D(1, 2) == Point2D(Integer(1), Integer(2))\n \n-def test_point():\n+    # Ensure no imaginary parts in the Point2D\n+    raises(ValueError, lambda: Point2D(1 + I, 2))\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..1048d98 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,7 +347,29 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n-def test_cse_MatrixExpr():\n+def test_cse_MatrixSymbol_indexing():\n+    # Test the cse function with indexed MatrixSymbol operations\n+    from sympy import MatrixSymbol, symbols, cse\n+    \n+    # Constructing a MatrixSymbol\n+    A = MatrixSymbol(\"A\", 4, 4)\n+    B = MatrixSymbol(\"B\", 4, 4)\n+    \n+    # Expression involving indexed elements of MatrixSymbols\n+    expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0] + A[0, 2] * B[2, 0] + A[0, 3] * B[3, 0]\n+    \n+    # Run common subexpression elimination\n+    cse_subs, cse_reduced = cse(expr)\n+    \n+    # Ensure that cse does not generate unnecessary copies\n+    assert cse_subs != [(symbols('x0'), A)]\n+    assert cse_subs != [(symbols('x1'), B)]\n+\n+    # Check that the result is as expected (no unnecessary matrix copies)\n+    assert len(cse_subs) == 0  # In ideal case, no subexpressions reduce this simplification\n+\n+    # Verify the reduced expression remains correct\n+    assert cse_reduced == [expr]\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..f9418a8 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -46,6 +47,13 @@ def test_issue_18361():\n     assert simplify(B) == Array([1, 0])\n     assert simplify(C) == Array([x + 1, sin(2*x)])\n \n+def test_issue_17851_empty_array():\n+    for ArrayType in array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n+\n def test_issue_20222():\n     A = Array([[1, 2], [3, 4]])\n     B = Matrix([[1,2],[3,4]])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..8fe6991 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,10 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+from sympy.core import Dummy\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1182,7 +1186,17 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_lambdify_tuple_single_element():\n+    # Test that lambdify correctly generates code for a single-element tuple\n+    f = lambdify([], (1,))\n+    assert f() == (1,)  # Check it returns a tuple (1,)\n+    source = inspect.getsource(f)\n+    assert 'return (1,)' in source  # Ensure the generated code is correct\n+\n+    f_multi = lambdify([], (1, 2))\n+    assert f_multi() == (1, 2)  # Check a multi-element tuple still works\n+    source_multi = inspect.getsource(f_multi)\n+    assert 'return (1, 2)' in source_multi  # Ensure multi-element tuple code is correct\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..f6ada37 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,7 +541,29 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.quantities import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    \n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..06878e6 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,35 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_expand_issue_fix():\n+    # Testing the issue and fix provided in the issue description\n+\n+    # The original test patch examples\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional tests for more coverage\n+\n+    # Testing with scalar multiplication and nested expansions\n+    assert TP(3*U - V, 2*V + U).expand(tensorproduct=True) == \\\n+        6*TP(U, V) + 3*TP(U, U) - 2*TP(V, V) - TP(V, U)\n+\n+    # Testing with zero in the expression\n+    assert TP(U - U, U + V).expand(tensorproduct=True) == \\\n+        0 * TP(U, U) + 0 * TP(U, V)\n+\n+    # Testing with more complex nested products\n+    assert TP(2*A, B + C).expand(tensorproduct=True) == \\\n+        2 * TP(A, B) + 2 * TP(A, C)\n+\n+    # Ensuring repeated expansions yield the same result\n+    expanded_once = TP(2*U - V, U + V).expand(tensorproduct=True)\n+    expanded_twice = expanded_once.expand(tensorproduct=True)\n+    assert expanded_once == expanded_twice\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..fab38c5 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,6 +563,33 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_equivalent_dimensions_in_addition():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    # Recreate the test scenario from the issue\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+\n+    # Should not throw a ValueError even though the dimension is velocity in both terms\n+    SI._collect_factor_and_dimension(expr1)\n+\n+    # Verify if the returned factor and dimension are correct\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+    assert dimension == velocity\n+    assert factor == 2 * meter / second - 9.8 * 5 * meter / second\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..be7478a 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, V, milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,19 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+def test_milli_unit_operations():\n+    # Test milli prefix with various units\n+    assert milli * W == W / 1000  # milli watts should be mW\n+    assert milli * V == V / 1000  # milli volts should be mV\n+    assert (milli * W).name == 'milliwatt'\n+    assert (milli * V).name == 'millivolt'\n+\n+    # Test if the multiplication keeps the prefix as part of the result\n+    result = W * milli\n+    assert result != 1\n+    assert result.name == 'milliwatt'\n+    assert str(result) == 'milliwatt'\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..a5162ec 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -333,6 +333,34 @@ class OrderingTests(TestCase):\n             article.author = author\n             article.save(update_fields={'author'})\n \n+    def test_self_referential_fk_ordering(self):\n+        # Setting up a self-referential foreign key scenario\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        \n+        # Create articles with self-referential FK setup\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1)\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2)\n+\n+        # Introducing self-referencing scenario\n+        author_1.editor = author_2\n+        author_1.save()\n+        author_2.editor = author_1\n+        author_2.save()\n+\n+        # Ordering by the self-referential field\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'), \n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n         self.assertQuerysetEqual(\n             Article.objects.order_by('author_id'), [\n                 \"Article 4\",\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..2fa05c7 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,6 +3202,23 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the ID provided in\n+        `ChoiceWidget.options` when rendering subwidgets.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        # These test cases validate the desired change:\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n+\n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n             first_name = CharField()\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..d77bcfc 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,30 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+def test_colorbar_norm_update():\n+    # Test that updating the norm of a mappable updates the colorbar scale\n+    x, y = np.ogrid[-4:4:31j, -4:4:31j]\n+    z = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots()\n+    pcm = ax.imshow(z, cmap='gray')\n+    cbar = fig.colorbar(pcm, ax=ax)\n+    old_ticks = cbar.ax.yaxis.get_ticklocs()\n+\n+    # Update the norm of the mappable\n+    pcm.set_norm(LogNorm())\n+    cbar.update_normal(pcm)\n+    new_ticks = cbar.ax.yaxis.get_ticklocs()\n+\n+    # Ensure that the ticks change, indicating the colorbar updated\n+    assert not np.array_equal(old_ticks, new_ticks)\n+\n+    # Ensure that the scale of the colorbar's y-axis is log\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+\n+    fig.canvas.draw()\n+    assert len(cbar.ax.yaxis.get_ticklabels()) > 0  # Verify presence of tick labels\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..50f5e83 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_unstacked_dataset_single_dim_variables(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..a735782 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,39 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_pandas_output_with_aggregation():\n+    \"\"\"Test FeatureUnion with pandas output and aggregation in custom transformer.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import make_union\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    # Test with default numpy output\n+    set_config(transform_output=\"default\")\n+    union_default = make_union(MyTransformer())\n+    result_default = union_default.fit_transform(data)\n+    # There should be no error, and result should have the expected shape\n+    assert result_default.shape == (1,)\n+\n+    # Test with pandas output\n+    set_config(transform_output=\"pandas\")\n+    union_pandas = make_union(MyTransformer())\n+    result_pandas = union_pandas.fit_transform(data)\n+    # There should be no error, and result should be a DataFrame with expected entries\n+    assert isinstance(result_pandas, pd.DataFrame)\n+    assert result_pandas.shape[0] == len(data[\"date\"].unique())\n+    assert result_pandas.iloc[0, 0] == 240  # sum for the first date should be 240\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..62f0870 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -132,7 +132,38 @@ def test_decorators(app):\n     ]\n \n \n+import sys\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.ext.autodoc import do_autodoc\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is required.')\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_inheritance(app: SphinxTestApp):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n def test_slots_attribute(app):\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'class', 'target.slots.Bar', options)\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..4b5813c 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,8 +358,30 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n-\n-def test_exptrigsimp():\n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    \n+    # Verify that trigsimp can simplify these expressions correctly\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+def test_issue_15129_additional_cases():\n+    # Additional test cases to ensure comprehensive coverage\n+    r = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    result_simplified = trigsimp(r)\n+    assert result_simplified == cos(S(1)/50 - S(1)/25)\n+    \n+    # Check the acos simplification\n+    acos_value = acos(result_simplified)\n+    assert trigsimp(acos_value) == acos(cos(S(1)/50 - S(1)/25))\n+\n+    # Edge case: Zero angle\n+    r_zero = sin(0)*sin(0) + cos(0)*cos(0)\n+    assert trigsimp(r_zero) == 1\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..4939ebd 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4344,8 +4344,25 @@ def test_pretty_no_wrap_line():\n def test_settings():\n     raises(TypeError, lambda: pretty(S(4), method=\"garbage\"))\n \n-\n-def test_pretty_sum():\n+from sympy import Sum, oo, pprint\n+from sympy.abc import x\n+\n+def test_pretty_sum_alignment():\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    result = upretty(expr)\n+    # This asserts that '+ 3' is aligned with 'x' in the output\n+    correct_output = \\\n+    u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571  + 3\\n\\\n+ \u2571      \\n\\\n+ \u203e\u203e\u203e    \\n\\\n+x = 1   \\\n+\"\"\")\n+    assert result == correct_output\n     from sympy.abc import x, a, b, k, m, n\n \n     expr = Sum(k**k, (k, 0, n))\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..58d8a43 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,6 +692,8 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.testing.pytest import raises\n+\n def test_uniq():\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n@@ -699,6 +701,16 @@ def test_uniq():\n     assert list(uniq('a')) == ['a']\n     assert list(uniq('ababc')) == list('abc')\n     assert list(uniq([[1], [2, 1], [1]])) == [[1], [2, 1]]\n+\n+    # Test that modifying the list during iteration raises RuntimeError\n+    f = [1, 4, 1, 5, 4]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = [['a'], ['b'], ['a']]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = ['a', 'b', 'a', 'c']\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n     assert list(uniq(permutations(i for i in [[1], 2, 2]))) == \\\n         [([1], 2, 2), (2, [1], 2), (2, 2, [1])]\n     assert list(uniq([2, 3, 2, 4, [2], [1], [2], [3], [1]])) == \\\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..4437aca 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -5,6 +6,7 @@ from operator import attrgetter\n \n from django.core.exceptions import FieldError\n from django.db import connection\n+from django.db.models import Max\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..1a5c3c0 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,6 +546,24 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n+    def test_subquery_sql(self):\n+        from django.db import connection\n+        from myapp.models import Employee  # Adjust import according to your app structure\n+\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        \n+        # Additional test case to verify the effect when subquery is explicitly False\n+        employees_subquery.query.subquery = False\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertNotIn('(SELECT ', sql)\n+        self.assertIn('SELECT ', sql)\n+\n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..fd91cca 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,36 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_wrong_select_related(self):\n+        # This test should expose the original issue where the related object might be incorrect.\n+        with self.assertNumQueries(3):\n+            pools = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                ).select_related('tournament_pool')\n+            )\n+            self.assertEqual(pools[0].pool.tournament, pools[0].tournament_pool.tournament)\n+\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +194,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..c1e8c6d 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -9,12 +10,20 @@ import warnings\n \n import numpy as np\n import pytest\n+import pickle\n from PIL import Image\n+from matplotlib.figure import Figure\n \n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n-from matplotlib.axes import Axes\n+def test_unpickle_dpi_stability():\n+    initial_dpi = 200\n+    fig = Figure(dpi=initial_dpi)\n+    \n+    for _ in range(10):  # Unpickle multiple times to check for stability\n+        fig = pickle.loads(pickle.dumps(fig))\n+        assert fig.dpi == initial_dpi, f\"Expected DPI: {initial_dpi}, but got {fig.dpi}\"\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..f27cd2b 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,8 +1,11 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n import matplotlib.pyplot as plt\n from matplotlib.colors import same_color, to_rgba\n+import seaborn as sns\n+from seaborn._oldcore import categorical_order\n \n import pytest\n from numpy.testing import assert_array_equal\n@@ -1623,7 +1626,18 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_scatterplot_with_categorical_hue(self):\n+        iris = sns.load_dataset(\"iris\")\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            plt.close(g.fig)  # Close plot to free resources\n+            success = True\n+        except Exception as e:\n+            print(f\"Unexpected error occurred: {e}\")\n+            success = False\n+        assert success, \"PairGrid with categorical hue in map caused an error\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..4c011d2 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -333,6 +333,21 @@ def test_excinfo_exconly():\n     assert msg.endswith(\"world\")\n \n \n+import pytest\n+\n+def test_raises_str_behavior():\n+    \"\"\"Test the behavior of `str()` on the pytest.raises context variable.\"\"\"\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+\n+    # Ensure the standard exception message can be accessed via `str(excinfo.value)`\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n+    # Ensure `str(excinfo)` does not return the full message but a representation string\n+    assert \"<console>\" in str(excinfo)\n+    assert \"LookupError\" in str(excinfo)\n+    assert \"A\" in str(excinfo)  # Because str(excinfo) includes a summary\n+\n def test_excinfo_repr():\n     excinfo = pytest.raises(ValueError, h)\n     s = repr(excinfo)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..1c11c9a 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,12 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+    def test_collect_only_shortcut(self, testdir):\n+        testdir.makepyfile(\"def test_y(): pass\")\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_y*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +440,12 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+    def test_collect_only_shortcut(self, testdir):\n+        testdir.makepyfile(\"def test_y(): pass\")\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_y*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..040ee79 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -91,11 +91,20 @@ def missing_attr(c,\n     return a + (b or \"\")\n \n \n-class _ClassWithDocumentedInit:\n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n     \"\"\"Class docstring.\"\"\"\n \n     def __init__(self, x: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..0166075 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -71,8 +71,28 @@ def test_ZeroMatrix_doit():\n     assert Znn.doit() == ZeroMatrix(2*n, n)\n     assert isinstance(Znn.doit().rows, Mul)\n \n+from sympy import Sum, refine, ask, Q as Query, Symbol, symbols\n+from sympy.matrices.expressions import MatrixSymbol\n \n def test_Identity():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+\n+    with assuming(Query.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+    # Verify that the refined result is an identity matrix\n+    assert e[0, 0] == 1\n+    assert e[0, 1] == 0\n+    assert e[1, 0] == 0\n+    assert e[1, 1] == 1\n+\n+    # Verify the sum of diagonal elements\n+    assert Sum(e[i, i], (i, 0, n-1)).doit() == n\n+\n+    # Test the total sum of elements\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..31cb47a 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,10 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_21537():\n+    from sympy.parsing.latex import parse_latex\n+    expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    assert str(expr) == '((a**3 + b)/c)/(1/(c**2))'\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}