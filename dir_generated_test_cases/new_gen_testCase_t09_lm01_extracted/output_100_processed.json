{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..ccee9b8 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,33 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+def test_issue_nested_compound_models():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    import numpy as np\n+    import pytest\n+    from numpy.testing import assert_allclose\n+\n+    # Complex compound model with no nesting\n+    complex_model = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+    expected_separability_complex = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    assert_allclose(separability_matrix(complex_model), expected_separability_complex)\n+    \n+    # Nested compound model\n+    linear_model = m.Linear1D(10) & m.Linear1D(5)\n+    nested_model = m.Pix2Sky_TAN() & linear_model\n+    expected_separability_nested = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, True],\n+        [False, False, True, True]\n+    ])\n+    assert_allclose(separability_matrix(nested_model), expected_separability_nested)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..2a46ca2 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,10 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n@@ -184,4 +188,48 @@ Col1      Col2 Col3 Col4\n  2.4 's worlds    2    2\n ==== ========= ==== ====\n \"\"\",\n-    )\n+    )\n+\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n+\n+def test_rst_with_partial_header_rows():\n+    \"\"\"Test table with only 'name' and 'unit' header_rows\"\"\"\n+    lines = [\n+        \"======= ========\",\n+        \"   wave response\",\n+        \"     nm       ct\",\n+        \"======= ========\",\n+        \"  350.0      1.0\",\n+        \"  950.0      2.0\",\n+        \"======= ========\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    assert out.getvalue().splitlines() == lines\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..c342bed 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,37 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_read_lowercase_commands(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Test QDP with mixed case\n+    read serr 1\n+    Read SERR 2\n+    ! Comment line\n+    1 0.1 1 0.1\n+    2 0.2 2 0.2\n+    NO NO NO NO\n+    \"\"\"\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"lowercase_test.qdp\")\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n \n-def test_read_example():\n+    table = _read_table_qdp(path)\n+    assert table is not None\n+    assert len(table) == 2  # Two data points\n+    assert \"SERR\" in table.meta['comments'][0] or \"serr\" in table.meta['comments'][0]\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..5d62f03 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,47 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+import pytest\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..ea04985 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -300,7 +300,23 @@ class TestTableFunctions(FitsTestCase):\n         hdul.close()\n         a.close()\n \n-    def test_endianness(self):\n+    def test_exponent_replacement(self):\n+        \"\"\"Test whether 'E' is correctly encoded as 'D' in ASCII table columns.\"\"\"\n+\n+        # Create a FITS file with D-format exponent\n+        r1 = np.array([1.234567890123456, 12.34567890123456])\n+        c2 = fits.Column(name='def', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c2])\n+        hdu.writeto(self.temp('exponent.fits'), overwrite=True)\n+\n+        with open(self.temp('exponent.fits'), 'rb') as f:\n+            content = f.read()\n+            assert b'1.234567890123456D+00' in content\n+            assert b'1.234567890123456D+01' in content\n+\n+        with fits.open(self.temp('exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n+            assert np.allclose(hdul[1].data['def'], r1)\n         x = np.ndarray((1,), dtype=object)\n         channelsIn = np.array([3], dtype='uint8')\n         x[0] = channelsIn\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..7a7718b 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1103,6 +1103,17 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Verifying that the default file upload permissions are set to 0o644\n+        in the absence of FILE_UPLOAD_PERMISSIONS setting.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            # Assuming default_storage is reconstructed based on new settings,\n+            # since default_storage itself might cache previous state\n+            from django.core.files.storage import default_storage\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_directory_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..e595cfc 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -376,7 +376,31 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 2)\n \n-    def test_order_by_exists(self):\n+    def test_order_by_multiline_sql(self):\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN status = 'active' THEN priority\n+                     ELSE 0 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN priority > 1 THEN timestamp\n+                     ELSE null END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN status = 'inactive' THEN archived_at\n+                     ELSE null END\n+            ''', []).desc()\n+        )\n+        companies = [self.company_a, self.company_b, self.company_c]\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [self.company_c, self.company_b, self.company_a],  # Expected order based on raw SQL logic\n+                )\n         mary = Employee.objects.create(firstname='Mary', lastname='Mustermann', salary=20)\n         mustermanns_by_seniority = Employee.objects.filter(lastname='Mustermann').order_by(\n             # Order by whether the employee is the CEO of a company\n",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..f065abf 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -623,7 +623,20 @@ class MigrateTests(MigrationTestBase):\n             \"migrations.migrations_test_apps.unmigrated_app\",\n         ],\n     )\n-    def test_regression_22823_unmigrated_fk_to_migrated_model(self):\n+    def test_sqlmigrate_considers_can_rollback_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown when the database connection doesn't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            # The command should not wrap in begin/commit transaction if can_rollback_ddl is False\n+            call_command(\"sqlmigrate\", \"migrations\", \"0001\", stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+\n+        if connection.ops.start_transaction_sql():\n+            self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries, \"Transaction start incorrectly added\")\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries, \"Transaction end incorrectly added\")\n         \"\"\"\n         Assuming you have 3 apps, `A`, `B`, and `C`, such that:\n \n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..57af75a 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -72,6 +72,23 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+            \"'not a datetime' value has an invalid format. \"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n+\n+    def test_valid_duration_single_components(self):\n+        field = models.DurationField()\n+        self.assertEqual(field.clean('30', None), datetime.timedelta(seconds=30))\n+        self.assertEqual(field.clean('01:30', None), datetime.timedelta(minutes=1, seconds=30))\n+        self.assertEqual(field.clean('1:02:03', None), datetime.timedelta(hours=1, minutes=2, seconds=3))\n+\n+    def test_invalid_duration_missing_seconds(self):\n+        field = models.DurationField()\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean('1:30', None)\n+        self.assertEqual(cm.exception.code, 'invalid')\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n@@ -84,4 +101,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..1737c24 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,7 +238,24 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\u000A',\n         ]\n+        \n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = [\"validusername\\n\"]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        invalid_usernames = [\"validusername\\n\"]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +275,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..59c6988 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,10 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..96e508f 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -464,7 +466,15 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        \"\"\"\n+        Test that deleting an instance without any dependencies sets its PK to None.\n+        \"\"\"\n+        u = User.objects.create()\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..45b4dee 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,3 +1,4 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n@@ -6,6 +7,8 @@ from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n+from django.test.utils import captured_stdout\n+from django.contrib.auth.migrations import update_proxy_permissions\n \n update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')\n \n@@ -140,6 +143,55 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Test that when migrating with existing target permission for proxy models,\n+        it captures and outputs detection of existing permissions to avoid duplicates.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_duplicate_permission_detection(self):\n+        \"\"\"\n+        Test if the migration gracefully handles duplicate permission entries\n+        and doesn't attempt to recreate permissions unnecessarily.\n+        \"\"\"\n+        concrete_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=True)\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+\n+        # Create a permission for the concrete model first, then proxy\n+        Permission.objects.create(\n+            content_type=concrete_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy concrete',\n+        )\n+        # This simulates the duplicate issue\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+\n+        # Run the migration logic and ensure it doesn't raise any IntegrityError\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        \n+        # Reload permissions to check only one entry exists for the proxy model\n+        proxy_permissions = Permission.objects.filter(content_type=proxy_model_content_type, codename='add_proxy')\n+        self.assertEqual(proxy_permissions.count(), 1)\n+\n     def test_user_keeps_same_permissions_after_migrating_backward(self):\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n",
  "django__django-11422": "",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..7a7af19 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -141,6 +141,39 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n+class TestNullByteHandling(SimpleTestCase):\n+    def test_path_with_embedded_null_bytes(self):\n+        faulty_paths = [\n+            'embedded_null_byte\\x00.py',\n+            'di\\x00rectory/embedded_null_byte.py',\n+            '/path/to/faulty\\x00byte.py',\n+            '\\x00/start/with/null.py',\n+        ]\n+        for path in faulty_paths:\n+            with self.subTest(path=path):\n+                result = autoreload.iter_modules_and_files((), frozenset([path]))\n+                self.assertEqual(result, frozenset(), f\"Failed on path: {path}\")\n+\n+    def test_valid_paths(self):\n+        # Create temporary valid paths\n+        with tempfile.TemporaryDirectory() as temp_dir:\n+            valid_paths = [\n+                os.path.join(temp_dir, 'valid_file.py'),\n+                os.path.join(temp_dir, 'subdir/valid_file.py'),\n+            ]\n+            os.makedirs(os.path.dirname(valid_paths[-1]), exist_ok=True)\n+            for path in valid_paths:\n+                with open(path, 'w') as f:\n+                    f.write(\"# test file\")\n+\n+                with self.subTest(path=path):\n+                    result = autoreload.iter_modules_and_files((), frozenset([path]))\n+                    self.assertIn(Path(path).resolve().absolute(), result)\n+\n+import tempfile\n+import os\n+from django.utils import autoreload\n+\n class TestCommonRoots(SimpleTestCase):\n     def test_common_roots(self):\n         paths = (\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..ad023ec 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -5,11 +5,14 @@ import re\n import sys\n import tempfile\n import threading\n+from django.urls import re_path\n from io import StringIO\n from pathlib import Path\n from unittest import mock\n \n from django.core import mail\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db import DatabaseError, connection\n from django.shortcuts import render\n@@ -238,7 +241,14 @@ class DebugViewTests(SimpleTestCase):\n             m.assert_called_once_with(encoding='utf-8')\n \n \n-class DebugViewQueriesAllowedTests(SimpleTestCase):\n+class Http404PathConverterTests(SimpleTestCase):\n+    def test_technical_404_converter_raise_404_debug_true(self):\n+        # Mock IntConverter's to_python to raise Http404\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            # Make GET request to a path that uses IntConverter\n+            response = self.client.get('/path-post/1/')\n+            # Assert that the response contains technical 404 page content\n+            self.assertContains(response, 'Page not found', status_code=404)\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..efb38a8 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -98,7 +98,25 @@ class CharFieldTests(SimpleTestCase):\n         field = Model._meta.get_field('field')\n         self.assertEqual(field.check(), [])\n \n-    def test_missing_max_length(self):\n+    def test_max_length_too_small_for_choices(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Yes', 'Yes indeed'),\n+                    ('No', 'No way'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value \"\n+                \"in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n         class Model(models.Model):\n             field = models.CharField()\n \n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..de0ca0b 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,6 +247,36 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n+    def test_serialize_enum_with_translation(self):\n+        from django.utils.translation import gettext_lazy as _\n+        \n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+        \n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            choices=[(tag, tag.value) for tag in TranslatedEnum],\n+            max_length=128\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string, \n+            \"models.CharField(choices=[('GOOD', 'Good'), ('BAD', 'Bad')], default='GOOD', max_length=128)\"\n+        )\n+\n+    def test_serialized_result_using_enum_name(self):\n+        class EnumToTest(enum.Enum):\n+            RED = 'red'\n+            BLUE = 'blue'\n+        \n+        field = models.CharField(\n+            default=EnumToTest.RED,\n+            max_length=128\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertIn(\"default=enum.Enum('EnumToTest', {'RED': 'red', 'BLUE': 'blue'}).RED\", string)\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..4834a2d 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -312,7 +313,25 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mocked_datetime(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        \n+        current_date_cases = [\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-68 08:49:37 GMT', datetime(2068, 12, 31, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Thursday, 01-Jan-69 08:49:37 GMT', datetime(2069, 1, 1, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Thursday, 01-Jan-70 08:49:37 GMT', datetime(1970, 1, 1, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Saturday, 01-Jan-71 08:49:37 GMT', datetime(1971, 1, 1, 8, 49, 37)),\n+            (datetime(2055, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+            (datetime(2055, 11, 6, 8, 49, 37), 'Saturday, 01-Jan-00 08:49:37 GMT', datetime(2000, 1, 1, 8, 49, 37)),\n+        ]\n+\n+        for current_time, rfc850str, expected_date in current_date_cases:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = current_time\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..7b59be5 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,32 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.db import models\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+from .models import MyObject, MyChoice\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class NewEnumTest(TestCase):\n+    def setUp(self):\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.get(pk=self.my_object.pk)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..2750b68 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,7 +148,50 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+from django.db import models\n+from django.test import TestCase\n+\n+class OverrideGetFieldDisplayTests(TestCase):\n+\n+    def test_custom_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'custom display'\n+\n+        foo_instance = FooBar(foo_bar=1)\n+        self.assertEqual(foo_instance.get_foo_bar_display(), 'custom display')\n+\n+    def test_inherited_custom_get_FIELD_display(self):\n+        class BaseModel(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            class Meta:\n+                abstract = True\n+\n+            def get_foo_bar_display(self):\n+                return 'base custom display'\n+\n+        class FooBar(BaseModel):\n+            pass\n+\n+        foo_instance = FooBar(foo_bar=1)\n+        self.assertEqual(foo_instance.get_foo_bar_display(), 'base custom display')\n+\n+    def test_overriden_get_FIELD_display_in_subclass(self):\n+        class BaseModel(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class FooBar(BaseModel):\n+            def get_foo_bar_display(self):\n+                return 'overriden display in subclass'\n+\n+        foo_instance = FooBar(foo_bar=1)\n+        self.assertEqual(foo_instance.get_foo_bar_display(), 'overriden display in subclass')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..e527020 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -1,8 +1,10 @@\n from django.urls import include, path, re_path\n \n+from . import views\n from . import views\n \n urlpatterns = [\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.modules, name='modules'),\n     path('articles/2003/', views.empty_view, name='articles-2003'),\n     path('articles/<int:year>/', views.empty_view, name='articles-year'),\n     path('articles/<int:year>/<int:month>/', views.empty_view, name='articles-year-month'),\n@@ -14,4 +16,4 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+]\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..9d0b56c 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -148,7 +149,21 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+class GetFieldDisplayTests(TestCase):\n+    def test_overriding_inherited_FIELD_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')])\n+\n+        # These assertions test the behavior described in the issue.\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+        self.assertEqual(Child(foo='C').get_foo_display(), 'Child C')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..0936993 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,3 +1,4 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n@@ -76,11 +77,20 @@ class TranslationCheckTests(SimpleTestCase):\n                 ])\n \n     def test_inconsistent_language_settings(self):\n+        # Test where de-at should use base language de\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German'), ('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+        \n+        # Test where fr-CA should use base language fr\n+        with self.settings(LANGUAGE_CODE='fr-CA', LANGUAGES=[('fr', 'French'), ('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        # Test invalid language setting where base isn't available\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n         )\n         with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n             self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n+                Error(msg % 'fr', id='translation.E004'),\n             ])\n",
  "django__django-12308": "",
  "django__django-12453": "",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..5c3b0eb 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -128,6 +128,55 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_correct_m2m_hint_with_intermediary_model(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            people = models.ManyToManyField('Person', through='CorrectAmbiguousRelationship')\n+\n+        class CorrectAmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first_set')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second_set')\n+\n+        field = Group._meta.get_field('people')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.people', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"CorrectAmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n+    def test_multiple_foreign_keys_without_hint_issue(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='MultiFkRelationship')\n+\n+        class MultiFkRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            group1 = models.ForeignKey(Group, models.CASCADE, related_name='g1')\n+            group2 = models.ForeignKey(Group, models.CASCADE, related_name='g2')\n+\n+        field = Group._meta.get_field('members')\n+        errors = field.check(from_model=Group)\n+        self.assertTrue(any(\n+            error.id == 'fields.E334' and \n+            'If you want to create a recursive relationship, use ManyToManyField' in error.hint\n+            for error in errors\n+        ))\n+\n     def test_ambiguous_relationship_model(self):\n \n         class Person(models.Model):\n@@ -159,6 +208,55 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_correct_m2m_hint_with_intermediary_model(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            people = models.ManyToManyField('Person', through='CorrectAmbiguousRelationship')\n+\n+        class CorrectAmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first_set')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second_set')\n+\n+        field = Group._meta.get_field('people')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.people', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"CorrectAmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n+    def test_multiple_foreign_keys_without_hint_issue(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='MultiFkRelationship')\n+\n+        class MultiFkRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            group1 = models.ForeignKey(Group, models.CASCADE, related_name='g1')\n+            group2 = models.ForeignKey(Group, models.CASCADE, related_name='g2')\n+\n+        field = Group._meta.get_field('members')\n+        errors = field.check(from_model=Group)\n+        self.assertTrue(any(\n+            error.id == 'fields.E334' and \n+            'If you want to create a recursive relationship, use ManyToManyField' in error.hint\n+            for error in errors\n+        ))\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..b320e21 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,6 +1759,35 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_with_unique_together_edge_cases(self):\n+        app_label = 'test_altered_index_with_unique'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+\n+        # Ensure unique_together is applied\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Step 1: Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Step 2: Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Verify index is removed but unique constraint should still exist\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..75aab7f 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -557,6 +557,8 @@ class DeletionTests(TestCase):\n         }\n         deleted, deleted_objs = r.delete()\n         self.assertEqual(deleted, sum(existed_objs.values()))\n+        self.test_delete_no_objects_with_fk()\n+        self.test_delete_no_objects_without_fk()\n         for k, v in existed_objs.items():\n             self.assertEqual(deleted_objs[k], v)\n \n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..ece8c9c 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,43 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_get_response_async(self):\n+        # This test ensures that the get_response_async method works correctly\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+\n+        # Get the file content\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+\n+        # Read the response\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        await communicator.wait()\n+\n+    async def test_static_file_get_response_async_not_found(self):\n+        # This test checks the 404 response when a file is not found\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/not_exist.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+\n+        # Read the response\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], b'')\n+        await communicator.wait()\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex d5cabc8..a9d112e 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -577,7 +577,31 @@ class FormsTestCase(SimpleTestCase):\n <option value=\"J\">Java</option>\n </select>\"\"\")\n \n-    def test_forms_with_radio(self):\n+    def test_modelmultiplechoicefield_with_union(self):\n+        \"\"\"\n+        Test ModelMultipleChoiceField with union and check for correct behavior when no options are selected.\n+        \"\"\"\n+        class Publication(models.Model):\n+            # Assuming an ID field is present in the model.\n+            pass\n+        \n+        class Article(models.Model):\n+            publications = models.ManyToManyField(to=Publication, blank=True, null=True)\n+        \n+        class ArticleForm(forms.ModelForm):\n+            publications = forms.ModelMultipleChoiceField(\n+                Publication.objects.filter(id__lt=2).union(Publication.objects.filter(id__gt=5)),\n+                required=False,\n+            )\n+\n+            class Meta:\n+                model = Article\n+                fields = [\"publications\"]\n+\n+        form_data = {'publications': []}\n+        form = ArticleForm(data=form_data)\n+        self.assertTrue(form.is_valid())\n+        self.assertEqual(list(form.cleaned_data['publications']), [])\n         # Add widget=RadioSelect to use that widget with a ChoiceField.\n         class FrameworkForm(Form):\n             name = CharField()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..e475d55 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2829,8 +2829,72 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+from django import forms\n+from .models import Character, StumpJoke\n+\n+class DuplicateChoiceTests(TestCase):\n+    \n+    def setUp(self):\n+        self.marley = Character.objects.create(username='Marley', last_action=timezone.now())\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action=timezone.now())\n+        \n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        \n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n \n-class FormFieldCallbackTests(SimpleTestCase):\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..59ed887 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -2,6 +2,8 @@ from django.contrib.contenttypes.fields import (\n     GenericForeignKey, GenericRelation,\n )\n from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n+from django.test import SimpleTestCase\n from django.core.checks import Error\n from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n@@ -11,6 +13,40 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    def test_abstract_inherited_fields_equality(self):\n+        \"\"\"Field instances from abstract models in different concrete models should not be equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritModel1(AbstractModel):\n+            pass\n+\n+        class InheritModel2(AbstractModel):\n+            pass\n+\n+        # Retrieve the fields from the models\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritModel1._meta.get_field('field')\n+        inherit2_model_field = InheritModel2._meta.get_field('field')\n+\n+        # This tests should validate the issue described\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field, \"Fields of separate inherited models should not be equal.\")\n+\n+        # Validate that they are distinct in a set\n+        field_set = {inherit1_model_field, inherit2_model_field}\n+        self.assertEqual(len(field_set), 2, \"Field instances should not be reduced in a set due to equality\")\n+\n+        # Also test that hash values are different\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field), \"Fields from different models should have different hashes.\")\n+        \n+        # Add test for ordering/less than comparisons\n+        # Assuming creation_counter drives both equality and < comparisons.\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +383,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..69cc520 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,7 +45,29 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n-    def test_available_apps(self):\n+\n+    def test_app_list_includes_model_class(self):\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n+        \n+        # Ensure there are apps in the context\n+        self.assertGreaterEqual(len(apps), 2)\n+\n+        # Check admin_views app for correct model inclusion\n+        admin_views = apps[0]\n+        article = admin_views['models'][0]\n+        self.assertEqual(article['object_name'], 'Article')\n+        \n+        # Ensure 'model' key contains model class for Article\n+        self.assertEqual(article['model'], Article)\n+\n+        # Check auth app for correct model inclusion\n+        auth = apps[1]\n+        user = auth['models'][0]\n+        self.assertEqual(user['object_name'], 'User')\n+        \n+        # Ensure 'model' key contains model class for User\n+        self.assertEqual(user['model'], User)\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..cd948ee 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -37,7 +39,32 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_invalid_after_email_change(self):\n+        \"\"\"The token should be invalid if email is changed after token generation.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'initial@example.com'),\n+            (User, 'initial@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                token_generator = PasswordResetTokenGenerator()\n+                initial_token = token_generator.make_token(user)\n+                \n+                # The initial token should be valid before changing the email\n+                self.assertIs(token_generator.check_token(user, initial_token), True)\n+                \n+                # Change the user's email\n+                setattr(user, user.get_email_field_name(), 'changed@example.com')\n+                user.save()\n+                \n+                # The token should be invalid after the email is changed\n+                self.assertIs(token_generator.check_token(user, initial_token), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..afc3878 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,10 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n-from unittest import mock\n+from collections import namedtuple\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..102b060 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -20,6 +20,8 @@ from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n+from django.test.utils import captured_stderr, captured_stdout\n+from unittest import mock\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n@@ -31,6 +33,29 @@ from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+class CommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv_with_none_sys_argv(self):\n+        \"\"\"\n+        Program name is derived from the execute_from_command_line()'s argv\n+        parameter, not sys.argv, which may be None or incorrect.\n+        \"\"\"\n+        args = ['help', 'check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+        \n+    def test_program_name_is_main_py(self):\n+        \"\"\"\n+        Test case where sys.argv[0] is '__main__.py', to ensure the fallback to 'python -m django' works correctly.\n+        \"\"\"\n+        args = ['help', 'runserver']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin runserver', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..c260929 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -5,10 +6,55 @@ from unittest import mock\n from django import __version__\n from django.core.management import CommandError, call_command\n from django.test import SimpleTestCase\n+from django import __version__\n from django.test.utils import captured_stdin, captured_stdout\n \n \n class ShellCommandTestCase(SimpleTestCase):\n+    # Test script as globals\n+    script_globals = 'print(\"__name__\" in globals())'\n+\n+    # Test script with inline function\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n \n     def test_command_option(self):\n         with self.assertLogs('test', 'INFO') as cm:\n@@ -49,4 +95,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..29b3225 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -582,14 +582,26 @@ class TestQuerying(TestCase):\n \n     def test_isnull_key(self):\n         # key__isnull=False works the same as has_key='key'.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n             self.objs[:3] + self.objs[5:],\n         )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=False),\n             [self.objs[3], self.objs[4]],\n         )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..16431ab 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -151,8 +151,43 @@ class DispatcherTests(SimpleTestCase):\n         self.assertTestIsClean(a_signal)\n \n     def test_send_robust_no_receivers(self):\n+        import logging\n+        from types import TracebackType\n+\n+        a_signal.connect(receiver_1_arg)\n         result = a_signal.send_robust(sender=self, val='test')\n-        self.assertEqual(result, [])\n+        self.assertEqual(result, [(receiver_1_arg, 'test')])\n+        a_signal.disconnect(receiver_1_arg)\n+        self.assertTestIsClean(a_signal)\n+\n+        def fails(val, **kwargs):\n+            raise ValueError('this')\n+\n+        a_signal.connect(fails)\n+        try:\n+            # Checking logging for send_robust failure\n+            with self.assertLogs('django.dispatch', level='ERROR') as cm:\n+                result = a_signal.send_robust(sender=self, val='test')\n+            err = result[0][1]\n+            self.assertIsInstance(err, ValueError)\n+            self.assertEqual(err.args, ('this',))\n+            self.assertTrue(hasattr(err, '__traceback__'))\n+            self.assertIsInstance(err.__traceback__, TracebackType)\n+\n+            # Verify log record\n+            log_record = cm.records[0]\n+            self.assertEqual(\n+                log_record.getMessage(),\n+                'Error calling DispatcherTests.test_send_robust_fail.<locals>.fails in Signal.send_robust() (this)',\n+            )\n+            self.assertIsNotNone(log_record.exc_info)\n+            _, exc_value, _ = log_record.exc_info\n+            self.assertIsInstance(exc_value, ValueError)\n+            self.assertEqual(str(exc_value), 'this')\n+        finally:\n+            a_signal.disconnect(fails)\n+\n+        self.assertTestIsClean(a_signal)\n \n     def test_send_robust_ignored_sender(self):\n         a_signal.connect(receiver_1_arg)\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..8b759b7 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -394,6 +394,29 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n                 id='models.W042',\n             ),\n         ])\n+    def test_explicit_inherited_pk(self):\n+        \"\"\"\n+        Test model with explicit PK inherited from parent.\n+        \"\"\"\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_big_auto_pk(self):\n+        \"\"\"\n+        Test model with explicit BigAutoField PK inherited from parent.\n+        \"\"\"\n+        class Parent(models.Model):\n+            id = models.BigAutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n     def test_default_auto_field_setting(self):\n@@ -414,4 +437,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..fb95fad 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -298,7 +298,14 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n-        # ModelMultipleChoiceField\n+        # ModelChoiceField with value in error message\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not a valid choice.',\n+            }\n+        )\n+        self.assertFormErrors(['\"invalid\" is not a valid choice.'], f.clean, 'invalid')\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': '%(value)s IS INVALID CHOICE',\n@@ -307,4 +314,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..6b29ccc 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -73,7 +73,11 @@ class Child(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE)\n \n \n-class ChildNullableParent(models.Model):\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n     parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n \n \n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..bebce5d 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,6 @@\n+\n from django.db.models import F, Q\n+from unittest import TestCase\n from django.test import SimpleTestCase\n \n \n@@ -19,6 +21,18 @@ class QTests(SimpleTestCase):\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n+    def test_q_object_with_dict_keys_or_operator(self):\n+        # Testing | operator with a Q object referencing dict_keys\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+        # Test with non-empty keys\n+        test_dict = {'a': 1, 'b': 2}\n+        q_non_empty = Q(x__in=test_dict.keys())\n+        self.assertEqual(q_non_empty | Q(), q_non_empty)\n+        self.assertEqual(Q() | q_non_empty, q_non_empty)\n+\n     def test_combine_not_q_object(self):\n         obj = object()\n         q = Q(x=1)\n",
  "django__django-14017": "",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..db92754 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1127,8 +1127,24 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[0], func)\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n-\n-    def test_resolver_match_on_request(self):\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = functools.partial(views.empty_view, template_name=template_name)\n+                resolver_match = resolve(f'/{name}/')\n+                self.assertEqual(\n+                    repr(resolver_match),\n+                    (\n+                        \"ResolverMatch(func=%r, args=(), kwargs={}, \"\n+                        \"url_name='%s', app_names=[], namespaces=[], \"\n+                        \"route='%s/')\" % (func.func, name, name)\n+                    ),\n+                )\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n@@ -1146,6 +1162,8 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..72b836d 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test.utils import isolate_apps\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -74,7 +76,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n         class Model(models.Model):\n@@ -91,7 +113,27 @@ class TestDefaultPK(SimpleTestCase):\n         m2m_pk = M2MModel._meta.get_field('m2m').remote_field.through._meta.pk\n         self.assertIsInstance(m2m_pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_m2m_app_default_auto_field(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..b7bd4de 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2206,7 +2206,18 @@ class StartApp(AdminScriptTestCase):\n             \"another directory.\"\n         )\n \n-    def test_overlaying_app(self):\n+    def test_trailing_slash_normalized_in_target_app_directory(self):\n+        \"\"\"\n+        Tests that a trailing slash in the target directory for startapp\n+        does not cause an error.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2')\n+        os.makedirs(app_dir)\n+        args = ['startapp', 'newapp', os.path.join('apps', 'app2', '')]\n+        \n+        out, err = self.run_django_admin(args)\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n         # Use a subdirectory so it is outside the PYTHONPATH.\n         os.makedirs(os.path.join(self.test_dir, 'apps/app1'))\n         self.run_django_admin(['startapp', 'app1', 'apps/app1'])\n",
  "django__django-14411": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..e4893f7 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -654,8 +654,27 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.func, value.func)\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n-\n-    def test_serialize_type_none(self):\n+    def test_serialize_myfield(self):\n+        \"\"\"\n+        Test serializing a custom field from a model.\n+        \"\"\"\n+        custom_field = app.models.MyField(primary_key=True)\n+        serialized_field = MigrationWriter.serialize(custom_field)\n+        expected_serialization = (\n+            \"('app.models.MyField()', {'from app import models'})\", set()\n+        )\n+        self.assertSerializedResultEqual(serialized_field, expected_serialization)\n+        \n+    def test_serialize_mymodel_mixin(self):\n+        \"\"\"\n+        Test serialization involving a model with a mixin and an abstract base model.\n+        \"\"\"\n+        bases = (app.models.MyMixin, models.Model)\n+        serialized_bases = MigrationWriter.serialize(bases)\n+        expected_serialization = (\n+            \"('app.models.MyMixin, models.Model', {'from app import models', 'from django.db import models'})\", set()\n+        )\n+        self.assertSerializedResultEqual(serialized_bases, expected_serialization)\n         self.assertSerializedEqual(type(None))\n \n     def test_simple_migration(self):\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..e09d780 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        # Verify the nonform CSS class is present in the error list rendered output\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>',\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +364,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        # Verify the nonform CSS class is present in the error list rendered output\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>',\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +993,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        # Verify the nonform CSS class is present in the error list rendered output\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>',\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "",
  "django__django-14752": "",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..1efcbfe 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -425,6 +425,59 @@ class MethodDecoratorTests(SimpleTestCase):\n                 def __module__(cls):\n                     return \"tests\"\n \n+    def test_partial_with_method_decorator(self):\n+        \"\"\"Tests that method_decorator works with a partial function.\"\"\"\n+        from functools import partial, wraps\n+\n+        def simple_decorator(f):\n+            \"\"\"A simple decorator that prints function call.\"\"\"\n+            @wraps(f)\n+            def wrapped(*args, **kwargs):\n+                print(f\"Calling {f.__name__}\")\n+                return f(*args, **kwargs)\n+            return wrapped\n+\n+        class PartialTest:\n+            @method_decorator(simple_decorator)\n+            def method(self):\n+                return \"Partial method\"\n+\n+        self.assertEqual(PartialTest().method(), \"Partial method\")\n+\n+\n+    def test_decorator_preserving_function_attributes(self):\n+        \"\"\"Ensure method_decorator preserves function attributes.\"\"\"\n+\n+        from functools import wraps\n+\n+        def example_decorator(f):\n+            @wraps(f)\n+            def wrapped(*args, **kwargs):\n+                return f\"Decorated {f(*args, **kwargs)}\"\n+            return wrapped\n+\n+        class PreserveAttributesTest:\n+            @method_decorator(example_decorator)\n+            def example_method(self):\n+                \"\"\"This is an example method.\"\"\"\n+                return \"Hello\"\n+\n+        instance = PreserveAttributesTest()\n+\n+        method = instance.example_method\n+\n+        # Check if __name__ is preserved\n+        self.assertEqual(method.__name__, \"example_method\")\n+\n+        # Check if __doc__ is preserved\n+        self.assertEqual(method.__doc__, \"This is an example method.\")\n+\n+        # Check if __module__ is preserved\n+        self.assertEqual(method.__module__, self.__module__)\n+\n+        # Check the output of the decorated function\n+        self.assertEqual(method(), \"Decorated Hello\")\n+\n \n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..e064150 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,7 +5085,31 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n-    def test_change_form_renders_correct_null_choice_value(self):\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that the custom admin site correctly constructs URLs for \n+        ForeignKey readonly fields.\n+        \"\"\"\n+        # Create a sample object and related objects\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_41', name='Test Language')\n+        \n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+\n+        # Fetch the read-only view from the custom admin site\n+        response = self.client.get(\n+            reverse('namespaced_admin:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        language_url = reverse('namespaced_admin:admin_views_language_change', args=(language.pk,))\n+        self.assertContains(response, f'href=\"{language_url}\"')\n         \"\"\"\n         Regression test for #17911.\n         \"\"\"\n",
  "django__django-14915": "",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..cafa551 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,7 +154,13 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n-    def test_form_as_table_data(self):\n+    def test_multivaluefield_label_id(self):\n+        \"\"\"\n+        Test to ensure MultiWidget does not use an indexed id_for_label.\n+        \"\"\"\n+        form = ComplexFieldForm()\n+        self.assertNotIn('for=\"id_field1_0\"', form.as_table())\n+        self.assertIn('for=\"id_field1\"', form.as_table())\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..15b3ad6 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,6 +70,8 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            # This was the issue described, where a ValueError was raised.\n+            ('////]@N.AN', ValidationError),  # Invalid IPv6 URL test case.\n         ]\n         for url, expected in tests:\n             with self.subTest(url=url):\n@@ -100,8 +102,12 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # URL that was previously causing ValueError to be raised.\n+            '////]@N.AN',\n+            # This was the issue described, where a ValueError was raised.\n+            ('////]@N.AN', ValidationError),  # Invalid IPv6 URL test case.\n         ]\n-        msg = \"'Enter a valid URL.'\"\n+        msg = \"'Enter a valid URL.'\"  # Ensure this message is expected for invalid URLs.\n         for value in tests:\n             with self.subTest(value=value):\n                 with self.assertRaisesMessage(ValidationError, msg):\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..aeae821 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -197,7 +197,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n-    def test_empty_expression_annotation(self):\n+    def test_expression_wrapper_with_negated_q(self):\n+        # Test that ExpressionWrapper with ~Q(pk__in=[]) does not crash\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+        \n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=Book.objects.none()), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+        \n+    def test_expression_wrapper_negated_q_with_aggregation(self):\n+        # Test Expression Wrapper combined with Count\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            num_books=Count('pk')\n+        )\n+        self.assertEqual(books.count(), Book.objects.count())\n+        for book in books:\n+            self.assertTrue(book.selected)\n+            self.assertEqual(book.num_books, 1)\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n         )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..68b0ffa 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -162,8 +163,27 @@ class CookieTests(BaseTests, SimpleTestCase):\n         value = encoder.encode(messages)\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n-\n-    def test_safedata(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that the `extra_tags` attribute is correctly serialized and \n+        deserialized, preserving empty strings as empty strings, not None.\n+        \"\"\"\n+        storage = self.get_storage()\n+        \n+        message_with_empty_tags = Message(constants.DEBUG, \"Test message\", extra_tags=\"\")\n+        encoded = storage._encode(message_with_empty_tags)\n+        decoded = storage._decode(encoded)\n+        self.assertEqual(decoded.extra_tags, \"\")\n+\n+        message_with_none_tags = Message(constants.DEBUG, \"Test message\", extra_tags=None)\n+        encoded = storage._encode(message_with_none_tags)\n+        decoded = storage._decode(encoded)\n+        self.assertIsNone(decoded.extra_tags)\n+\n+        message_with_tags = Message(constants.DEBUG, \"Test message\", extra_tags=\"tag1 tag2\")\n+        encoded = storage._encode(message_with_tags)\n+        decoded = storage._decode(encoded)\n+        self.assertEqual(decoded.extra_tags, \"tag1 tag2\")\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..2073007 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -4,7 +4,8 @@ from unittest import mock\n from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n-\n+import os\n+from pathlib import Path\n ROOT = Path(__file__).parent.absolute()\n EXTRA_TEMPLATES_DIR = ROOT / \"templates_extra\"\n \n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..005ae98 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,31 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"Test was_modified_since with an empty string for the header.\"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_none(self):\n+        \"\"\"Test was_modified_since when header is None.\"\"\"\n+        self.assertTrue(was_modified_since(header=None, mtime=1))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"Test was_modified_since with an invalid date string.\"\"\"\n+        invalid_header = \"invalid-date\"\n+        self.assertTrue(was_modified_since(header=invalid_header, mtime=1))\n+\n+    def test_was_modified_since_old_date(self):\n+        \"\"\"Test was_modified_since with a very old date string.\"\"\"\n+        old_header = \"Wed, 21 Oct 1981 07:28:00 GMT\"\n+        mtime = 1609459200  # 01 Jan 2021 00:00:00 GMT\n+        self.assertTrue(was_modified_since(header=old_header, mtime=mtime))\n+\n+    def test_was_modified_since_same_date(self):\n+        \"\"\"Test was_modified_since with the same date string.\"\"\"\n+        mtime = 1609459200  # 01 Jan 2021 00:00:00 GMT\n+        header = http_date(mtime)\n+        self.assertFalse(was_modified_since(header=header, mtime=mtime))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..ebf6407 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -7,6 +8,7 @@ from admin_scripts.tests import AdminScriptTestCase\n from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management import BaseCommand, CommandError, find_commands\n from django.core.management.utils import (\n     find_command,\n@@ -411,7 +413,31 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_multiline_help_output_formatting(self):\n+        \"\"\"Test that command with multiline help text outputs properly formatted help.\"\"\"\n+        class MultilineHelpCommand(BaseCommand):\n+            help = (\n+                \"Import a contract from tzkt.\\n\"\n+                \"Example usage:\\n\"\n+                \"  ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+            )\n+        \n+        epilog = \"epilog text\"\n+        command = MultilineHelpCommand()\n+        parser = command.create_parser('manage.py', 'tzkt_import', epilog=epilog, formatter_class=ArgumentDefaultsHelpFormatter)\n+        \n+        expected_help = (\n+            'usage: manage.py tzkt_import [-h]\\n\\n'\n+            'Import a contract from tzkt.\\n'\n+            'Example usage:\\n'\n+            '  ./manage.py tzkt_import \\'Tezos Mainnet\\' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\\n'\n+            'epilog text\\n'\n+        )\n+        \n+        with StringIO() as out, self.assertRaises(SystemExit) as cm:\n+            parser.print_help(out)\n+            self.assertEqual(out.getvalue(), expected_help)\n+            self.assertEqual(cm.exception.code, 0)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..ecdf306 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,3 +1,4 @@\n+\n import os\n from datetime import datetime\n \n@@ -217,7 +218,36 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"encoder\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"encoder\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_with_id_and_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"id encoder\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, element_id='custom_id', encoder=CustomDjangoJSONEncoder),\n+            '<script id=\"custom_id\" type=\"application/json\">{\"custom\": \"id encoder\"}</script>',\n+        )\n+\n+    def test_json_script_with_special_characters(self):\n+        payload = {\"key\": \"<&>\"}\n+        expected_output = '<script type=\"application/json\">{\"key\": \"\\\\u003C\\\\u0026\\\\u003E\"}</script>'\n+        self.assertHTMLEqual(json_script(payload), expected_output)\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..209afab 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -142,7 +142,34 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             [self.error_same_tags],\n         )\n \n-    def test_template_tags_with_same_library_name(self):\n+    \n+    @override_settings(\n+        INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n+    )\n+    def test_duplicate_template_tag_library_entries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"someapp.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"my_tags\", \"someapp.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'my_tags'\",\n+                            \"'check_framework.template_test_apps.someapp.templatetags.my_tags', \"\n+                            \"'check_framework.template_test_apps.someapp.templatetags.my_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ],\n+            )\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n@@ -206,4 +233,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..cde385e 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,8 +399,20 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n+from django.test import TestCase\n+from .models import ProxyCustomModel, AnotherModel\n+\n+class ProxyModelTests(TestCase):\n+    def test_select_related_only_on_proxy_model(self):\n+        # Setup: Create instances of models\n+        custom_model_instance = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom_model_instance)\n+\n+        # Test: Use select_related and only on proxy model field\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+\n+        # Assert: Fetching this queryset does not raise an error\n+        self.assertEqual(qs.get(pk=another_model_instance.pk), another_model_instance)\n     @classmethod\n     def setUpTestData(cls):\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..386d6f5 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,9 +152,15 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        # Test with help parameter\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n-            ([\"psql\", \"dbname\", \"--help\"], None),\n+            ([\"psql\", \"--help\", \"dbname\"], None),\n+        )\n+        # Test additional parameter before dbname as per issue description\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n         )\n \n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n@@ -183,4 +189,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..cdba5e3 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,6 +1901,35 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.test import SimpleTestCase\n+        from django.core.cache import caches\n+        from django.forms.renderers import get_default_renderer\n+        from django.forms import formset_factory, BaseFormSet\n+        from yourapp.forms import Choice  # Assuming Choice form is in yourapp.forms\n+        import warnings\n+        \n+        class ManagementFormTestCase(SimpleTestCase):\n+            \n+            def test_management_form_no_deprecation_warning(self):\n+                \"\"\"\n+                Ensure no deprecation warning when rendering formset's management form.\n+                \"\"\"\n+                with isolate_lru_cache(get_default_renderer), self.settings(\n+                    FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+                ):\n+                    ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                    formset = ChoiceFormSet()\n+                    with warnings.catch_warnings(record=True) as w:\n+                        warnings.simplefilter(\"always\")\n+                        str(formset.management_form)\n+                        # Check that no deprecation warnings are raised\n+                        self.assertFalse(\n+                            any(\n+                                DEFAULT_TEMPLATE_DEPRECATION_MSG in str(warning.message)\n+                                for warning in w\n+                            ),\n+                            \"Deprecation warning raised for management form rendering.\",\n+                        )\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1938,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "",
  "django__django-16046": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..b40f33d 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,9 @@\n+\n import datetime\n import re\n+import urllib.parse\n from unittest import mock\n+from django.urls import reverse\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm,\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..4291ab1 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,29 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.test import TestCase, Client\n+from django.contrib.sitemaps import Sitemap\n+\n+class CallableLastmodNoItemsSitemapTest(TestCase):\n+    def setUp(self):\n+        self.client = Client()\n+\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode().strip(), expected_content_index.strip())\n+\n+    def test_callable_sitemod_no_items_lastmod(self):\n+        sitemap_response = self.client.get(\"/callable-lastmod-no-items/sitemap.xml\")\n+        expected_content_sitemap = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        </urlset>\"\"\"\n+        self.assertXMLEqual(sitemap_response.content.decode().strip(), expected_content_sitemap.strip())\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..83fe99c 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n@@ -8,6 +9,7 @@ import re\n import shutil\n import sys\n import tempfile\n+import unittest.mock as mock\n import threading\n import time\n import unittest\n@@ -1755,6 +1757,27 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n+    def test_has_key_race_handling(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_has_key_race_handling_with_multiple_threads(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        open_mock = mock.Mock(side_effect=FileNotFoundError)\n+        with mock.patch(\"builtins.open\", open_mock):\n+            def check_cache():\n+                self.assertIs(cache.has_key(\"key\"), False)\n+\n+            threads = [threading.Thread(target=check_cache) for _ in range(5)]\n+            for thread in threads:\n+                thread.start()\n+            for thread in threads:\n+                thread.join()\n+\n+            self.assertEqual(open_mock.call_count, 5)\n+\n     def test_empty_cache_file_considered_expired(self):\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..1cf1632 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -10,7 +11,8 @@ from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n-from .tests import AdminViewBasicTestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import AdminViewBasicTestCase, get_perm\n \n \n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n@@ -33,7 +35,39 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # User with change permission only\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..6348c5b 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -216,7 +216,54 @@ class OptimizerTests(SimpleTestCase):\n             migrations.AlterIndexTogether(\"Foo\", [[\"a\", \"b\"]])\n         )\n \n-    def test_create_alter_owrt_delete_model(self):\n+\n+    def test_alterfield_reduction_case_1(self):\n+        \"\"\"\n+        Test that multiple AlterField operations on the same field are reduced\n+        to the final AlterField.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        self.assertOptimizesTo(\n+            operations,\n+            [operations[-1]],  # Only the last field alteration should remain\n+        )\n+\n+    def test_alterfield_noop(self):\n+        \"\"\"\n+        Test that AlterField with identical fields are ignored.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+        ]\n+        self.assertOptimizesTo(\n+            operations,\n+            [operations[-1]],  # Only one should remain, but since they are identical, it reduces to the last one\n+        )\n         self._test_create_alter_foo_delete_model(\n             migrations.AlterOrderWithRespectTo(\"Foo\", \"a\")\n         )\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..3fc657d 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -26,7 +27,12 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        output = self.engine.render_to_string(\n+            \"join_autoescape_off\", {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"var\": \"<br/>\"}\n+        )\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +84,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..3771744 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -569,7 +569,44 @@ class BulkCreateTests(TestCase):\n                 unique_fields=[\"big_auto_fields\"],\n             )\n \n-    def _test_update_conflicts_two_fields(self, unique_fields):\n+    @skipUnlessDBFeature(\"can_return_rows_from_bulk_insert\")\n+    def test_bulk_create_returning_ids_update_conflicts(self):\n+        # Initial data creation\n+        initial_objects = [\n+            UpsertConflict(number=1, rank=1, name=\"Alice\"),\n+            UpsertConflict(number=2, rank=2, name=\"Bob\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(initial_objects)\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        # Data to cause conflicts and trigger updates\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=1, name=\"Carol\"),\n+            UpsertConflict(number=2, rank=2, name=\"Dave\"),\n+            UpsertConflict(number=3, rank=3, name=\"Eve\"),\n+        ]\n+\n+        # Use bulk_create with update_conflicts and ensure IDs are returned.\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"number\"],\n+        )\n+        self.assertEqual(len(results), 3)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        self.assertEqual(UpsertConflict.objects.count(), 3)\n+\n+        # Ensure database reflects correct state\n+        self.assertCountEqual(\n+            UpsertConflict.objects.values(\"number\", \"rank\", \"name\"),\n+            [\n+                {\"number\": 1, \"rank\": 1, \"name\": \"Carol\"},\n+                {\"number\": 2, \"rank\": 2, \"name\": \"Dave\"},\n+                {\"number\": 3, \"rank\": 3, \"name\": \"Eve\"},\n+            ],\n+        )\n         TwoFields.objects.bulk_create(\n             [\n                 TwoFields(f1=1, f2=1, name=\"a\"),\n@@ -816,4 +853,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..b546dd3 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -197,6 +197,29 @@ class OperationWriterTests(SimpleTestCase):\n             \"),\",\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n \n class WriterTests(SimpleTestCase):\n     \"\"\"\n@@ -255,12 +278,58 @@ class WriterTests(SimpleTestCase):\n             decimal.Decimal(\"1.3\"), (\"Decimal('1.3')\", {\"from decimal import Decimal\"})\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n         self.assertSerializedEqual(Money(\"1.3\"))\n         self.assertSerializedResultEqual(\n             Money(\"1.3\"),\n             (\"migrations.test_writer.Money('1.3')\", {\"import migrations.test_writer\"}),\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_serialize_constants(self):\n         self.assertSerializedEqual(None)\n         self.assertSerializedEqual(True)\n@@ -296,6 +365,29 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set()),\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r\"^foo$\")\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n@@ -306,6 +398,29 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum['A']\", {\"import migrations.test_writer\"}),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedResultEqual(\n             TextTranslatedEnum.A,\n             (\n@@ -313,6 +428,29 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\n@@ -320,10 +458,56 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedResultEqual(\n             IntEnum.B,\n             (\"migrations.test_writer.IntEnum['B']\", {\"import migrations.test_writer\"}),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedResultEqual(\n             self.NestedEnum.A,\n             (\n@@ -331,11 +515,57 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedEqual(self.NestedEnum.A)\n \n         field = models.CharField(\n             default=TextEnum.B, choices=[(m.value, m) for m in TextEnum]\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -344,10 +574,56 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextEnum['B'])], \"\n             \"default=migrations.test_writer.TextEnum['B'])\",\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         field = models.CharField(\n             default=TextTranslatedEnum.A,\n             choices=[(m.value, m) for m in TextTranslatedEnum],\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -356,9 +632,55 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n             \"default=migrations.test_writer.TextTranslatedEnum['A'])\",\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         field = models.CharField(\n             default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum]\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -367,9 +689,55 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum['B'])], \"\n             \"default=migrations.test_writer.BinaryEnum['B'])\",\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         field = models.IntegerField(\n             default=IntEnum.A, choices=[(m.value, m) for m in IntEnum]\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -379,6 +747,29 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\",\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_serialize_enum_flags(self):\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A,\n@@ -387,6 +778,29 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedResultEqual(\n             IntFlagEnum.B,\n             (\n@@ -394,9 +808,55 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.test_writer\"},\n             ),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         field = models.IntegerField(\n             default=IntFlagEnum.A, choices=[(m.value, m) for m in IntFlagEnum]\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -405,6 +865,29 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedResultEqual(\n             IntFlagEnum.A | IntFlagEnum.B,\n             (\n@@ -414,6 +897,29 @@ class WriterTests(SimpleTestCase):\n             ),\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = \"A\", \"A value\"\n@@ -433,6 +939,29 @@ class WriterTests(SimpleTestCase):\n             DateChoices.DATE_1,\n             (\"datetime.date(1969, 7, 20)\", {\"import datetime\"}),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         field = models.CharField(default=TextChoices.B, choices=TextChoices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -440,12 +969,58 @@ class WriterTests(SimpleTestCase):\n             \"models.CharField(choices=[('A', 'A value'), ('B', 'B value')], \"\n             \"default='B')\",\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         field = models.IntegerField(default=IntegerChoices.B, choices=IntegerChoices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n             \"models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=2)\",\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         field = models.DateField(default=DateChoices.DATE_2, choices=DateChoices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -456,6 +1031,29 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\",\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_serialize_nested_class(self):\n         for nested_cls in [self.NestedEnum, self.NestedChoices]:\n             cls_name = nested_cls.__name__\n@@ -478,14 +1076,83 @@ class WriterTests(SimpleTestCase):\n             uuid_a,\n             (\"uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8')\", {\"import uuid\"}),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedResultEqual(\n             uuid_b,\n             (\"uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2')\", {\"import uuid\"}),\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n         field = models.UUIDField(\n             choices=((uuid_a, \"UUID A\"), (uuid_b, \"UUID B\")), default=uuid_a\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -495,6 +1162,29 @@ class WriterTests(SimpleTestCase):\n             \"default=uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8'))\",\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_serialize_pathlib(self):\n         # Pure path objects work in all platforms.\n         self.assertSerializedEqual(pathlib.PurePosixPath())\n@@ -523,6 +1213,29 @@ class WriterTests(SimpleTestCase):\n             string,\n             \"models.FilePathField(path=pathlib.PurePosixPath('/home/user'))\",\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertIn(\"import pathlib\", imports)\n \n     def test_serialize_path_like(self):\n@@ -554,13 +1267,82 @@ class WriterTests(SimpleTestCase):\n         self.assertSerializedEqual(\n             datetime.datetime(2014, 1, 1, 1, 1, tzinfo=get_default_timezone())\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedEqual(\n             datetime.datetime(2013, 12, 31, 22, 1, tzinfo=get_fixed_timezone(180))\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedResultEqual(\n             datetime.datetime(2014, 1, 1, 1, 1),\n             (\"datetime.datetime(2014, 1, 1, 1, 1)\", {\"import datetime\"}),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedResultEqual(\n             datetime.datetime(2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc),\n             (\n@@ -568,6 +1350,29 @@ class WriterTests(SimpleTestCase):\n                 {\"import datetime\"},\n             ),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedResultEqual(\n             datetime.datetime(\n                 2012, 1, 1, 2, 1, tzinfo=zoneinfo.ZoneInfo(\"Europe/Paris\")\n@@ -578,12 +1383,58 @@ class WriterTests(SimpleTestCase):\n             ),\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_serialize_fields(self):\n         self.assertSerializedFieldEqual(models.CharField(max_length=255))\n         self.assertSerializedResultEqual(\n             models.CharField(max_length=255),\n             (\"models.CharField(max_length=255)\", {\"from django.db import models\"}),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedFieldEqual(models.TextField(null=True, blank=True))\n         self.assertSerializedResultEqual(\n             models.TextField(null=True, blank=True),\n@@ -593,20 +1444,112 @@ class WriterTests(SimpleTestCase):\n             ),\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_serialize_settings(self):\n         self.assertSerializedEqual(\n             SettingsReference(settings.AUTH_USER_MODEL, \"AUTH_USER_MODEL\")\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedResultEqual(\n             SettingsReference(\"someapp.model\", \"AUTH_USER_MODEL\"),\n             (\"settings.AUTH_USER_MODEL\", {\"from django.conf import settings\"}),\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_serialize_iterators(self):\n         self.assertSerializedResultEqual(\n             ((x, x * x) for x in range(3)), (\"((0, 0), (1, 1), (2, 4))\", set())\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_serialize_compiled_regex(self):\n         \"\"\"\n         Make sure compiled regex can be serialized.\n@@ -624,6 +1567,29 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(\n             string, \"django.core.validators.RegexValidator(message='hello')\"\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.serialize_round_trip(validator)\n \n         # Test with a compiled regex.\n@@ -633,6 +1599,29 @@ class WriterTests(SimpleTestCase):\n             string,\n             \"django.core.validators.RegexValidator(regex=re.compile('^\\\\\\\\w+$'))\",\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.serialize_round_trip(validator)\n \n         # Test a string regex with flag\n@@ -643,6 +1632,29 @@ class WriterTests(SimpleTestCase):\n             \"django.core.validators.RegexValidator('^[0-9]+$', \"\n             \"flags=re.RegexFlag['DOTALL'])\",\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.serialize_round_trip(validator)\n \n         # Test message and code\n@@ -653,6 +1665,29 @@ class WriterTests(SimpleTestCase):\n             \"django.core.validators.RegexValidator('^[-a-zA-Z0-9_]+$', 'Invalid', \"\n             \"'invalid')\",\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.serialize_round_trip(validator)\n \n         # Test with a subclass.\n@@ -661,6 +1696,29 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(\n             string, \"django.core.validators.EmailValidator(message='hello')\"\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.serialize_round_trip(validator)\n \n         validator = deconstructible(path=\"migrations.test_writer.EmailValidator\")(\n@@ -671,9 +1729,55 @@ class WriterTests(SimpleTestCase):\n             string, \"migrations.test_writer.EmailValidator(message='hello')\"\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n         validator = deconstructible(path=\"custom.EmailValidator\")(EmailValidator)(\n             message=\"hello\"\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         with self.assertRaisesMessage(ImportError, \"No module named 'custom'\"):\n             MigrationWriter.serialize(validator)\n \n@@ -700,6 +1804,29 @@ class WriterTests(SimpleTestCase):\n             models.OrderBy(models.F(\"name\").desc()),\n             name=\"complex_func_index\",\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         string, imports = MigrationWriter.serialize(index)\n         self.assertEqual(\n             string,\n@@ -711,6 +1838,29 @@ class WriterTests(SimpleTestCase):\n             \"models.OrderBy(models.OrderBy(models.F('name'), descending=True)), \"\n             \"name='complex_func_index')\",\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertEqual(imports, {\"from django.db import models\"})\n \n     def test_serialize_empty_nonempty_tuple(self):\n@@ -762,6 +1912,29 @@ class WriterTests(SimpleTestCase):\n                 {\"import migrations.models\"},\n             ),\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         self.assertSerializedEqual(FoodManager(\"a\", \"b\"))\n         self.assertSerializedEqual(FoodManager(\"x\", \"y\", c=3, d=4))\n \n@@ -772,6 +1945,29 @@ class WriterTests(SimpleTestCase):\n             frozenset(\"cba\"), (\"frozenset(['a', 'b', 'c'])\", set())\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_serialize_set(self):\n         self.assertSerializedEqual(set())\n         self.assertSerializedResultEqual(set(), (\"set()\", set()))\n@@ -809,6 +2005,29 @@ class WriterTests(SimpleTestCase):\n             (\"('models.Model', {'from django.db import models'})\", set()),\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_simple_migration(self):\n         \"\"\"\n         Tests serializing a simple migration.\n@@ -848,6 +2067,29 @@ class WriterTests(SimpleTestCase):\n                 \"dependencies\": [(\"testapp\", \"some_other_one\")],\n             },\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         # We don't test the output formatting - that's too fragile.\n@@ -887,6 +2129,29 @@ class WriterTests(SimpleTestCase):\n                 \"dependencies\": [],\n             },\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         result = self.safe_exec(output)\n@@ -896,6 +2161,29 @@ class WriterTests(SimpleTestCase):\n             result[\"custom_migration_operations\"].more_operations.TestOperation,\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_sorted_dependencies(self):\n         migration = type(\n             \"Migration\",\n@@ -912,6 +2200,29 @@ class WriterTests(SimpleTestCase):\n                 ],\n             },\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         output = MigrationWriter(migration, include_header=False).as_string()\n         self.assertIn(\n             \"    dependencies = [\\n\"\n@@ -923,6 +2234,29 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_sorted_imports(self):\n         \"\"\"\n         #24155 - Tests ordering of imports.\n@@ -949,6 +2283,29 @@ class WriterTests(SimpleTestCase):\n                 ]\n             },\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         self.assertIn(\n@@ -956,6 +2313,29 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_migration_file_header_comments(self):\n         \"\"\"\n         Test comments at top of file.\n@@ -1001,6 +2381,29 @@ class WriterTests(SimpleTestCase):\n                 ]\n             },\n         )\n+\n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         self.assertIn(\"from django.db import migrations\\n\", output)\n@@ -1017,6 +2420,29 @@ class WriterTests(SimpleTestCase):\n             \"models.CharField(default=migrations.test_writer.DeconstructibleInstances)\",\n         )\n \n+    def test_serialize_nested_cls_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        target = (\n+            \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+            {\"import migrations.test_writer\"}\n+        )\n+        self.assertSerializedResultEqual(field.default, target)\n+\n     def test_register_serializer(self):\n         class ComplexSerializer(BaseSerializer):\n             def serialize(self):\n@@ -1032,4 +2458,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..750bf08 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1077,6 +1077,12 @@ def test_slider_horizontal_vertical():\n     box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n     assert_allclose(box.bounds, [.25, 0, .5, 10/24])\n \n+import numpy as np\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+from matplotlib import widgets\n+from numpy.testing import assert_allclose\n \n def test_slider_reset():\n     fig, ax = plt.subplots()\n@@ -1119,6 +1125,19 @@ def test_range_slider(orientation):\n     slider.reset()\n     assert_allclose(slider.val, [0.1, 0.34])\n \n+def test_rangeslider_initial_value():\n+    fig, ax = plt.subplots()\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Threshold\", valmin=0.0, valmax=1.0, valinit=[0.0, 0.0]\n+    )\n+    # Check if initial values are set correctly\n+    assert_allclose(slider.val, (0.0, 0.0))\n+    box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n+    assert_allclose(box.get_points().flatten()[:4], [0.0, 0.25, 0.0, 0.75])\n+\n+    # Try setting another range value\n+    slider.set_val((0.3, 0.7))\n+    assert_allclose(slider.val, (0.3, 0.7))\n \n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..cca18dc 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -507,6 +507,46 @@ def test_rcparams_reset_after_fail():\n                 pass\n         assert mpl.rcParams['text.usetex'] is False\n \n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n+# Test case for the issue where get_backend clears figures created inside rc_context\n+def test_get_backend_clears_figures_rc_context():\n+    # Start by creating a figure inside rc_context\n+    with rc_context():\n+        fig1 = plt.figure()\n+    \n+    # Record state of Gcf before calling get_backend\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    # Call get_backend, which should not modify Gcf.figs\n+    get_backend()\n+    \n+    # Record state of Gcf after calling get_backend\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    # Assert that Gcf.figs has not changed\n+    assert before == after, f\"Figures from Gcf were cleared: {before} vs {after}\"\n+\n+\n+# Test case to ensure when a figure is created outside rc_context, there is no issue\n+def test_get_backend_no_clear_on_figures_outside_rc_context():\n+    # Create a figure outside rc_context\n+    fig1 = plt.figure()\n+    \n+    # Record state of Gcf before calling get_backend\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    # Call get_backend\n+    get_backend()\n+    \n+    # Record state of Gcf after calling get_backend\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    # Assert that Gcf.figs has not changed\n+    assert before == after, f\"Figures from Gcf were modified: {before} vs {after}\"\n+\n \n @pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n def test_backend_fallback_headless(tmpdir):\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..fbcfa5a 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -9,6 +9,7 @@ from matplotlib.backend_bases import MouseButton\n from matplotlib import cm\n from matplotlib import colors as mcolors\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n+import pytest\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n@@ -28,7 +29,25 @@ def test_aspect_equal_error():\n         ax.set_aspect('equal')\n \n \n-@mpl3d_image_comparison(['bar3d.png'])\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d_ax(fig_test, fig_ref):\n+    # Testing the set_visible with a 3D subplot\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax1.scatter([1, 2], [3, 4], [5, 6])\n+    ax1.set_visible(False)\n+\n+    ax2 = fig_ref.add_subplot(122, projection='3d')\n+    ax2.scatter([1, 2], [3, 4], [5, 6])\n+\n+    # The left subplot in fig_test should not appear when set_visible(False)\n+    # Compare it with a single visible subplot in fig_ref\n+\n+def test_set_visible_3d_behavior():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(111, projection='3d')\n+    ax1.scatter([1, 2, 3], [4, 5, 6], [7, 8, 9])\n+    ax1.set_visible(False)\n+    assert not ax1.get_visible(), \"3D subplot should be invisible after set_visible(False)\"\n def test_bar3d():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..2a5e712 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -783,6 +783,16 @@ def test_get_set_draggable():\n     assert not legend.get_draggable()\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable_creation(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_line')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() == draggable\n+\n def test_alpha_handles():\n     x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n     legend = plt.legend()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..0e64f8a 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -255,6 +255,15 @@ def test_linedash():\n \n     assert buf.tell() > 0\n \n+def test_empty_line():\n+    # Test for handling multi-line text with empty lines in PS backend\n+    figure = plt.figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+    assert buf.tell() > 0\n \n def test_no_duplicate_definition():\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..003dc9a 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -649,10 +649,17 @@ def test_compressed1():\n \n     fig.colorbar(pc, ax=axs)\n     fig.draw_without_rendering()\n-\n-    pos = axs[0, 0].get_position()\n+@pytest.mark.filterwarnings(\"error\", category=UserWarning)\n+def test_constrained_layout_false_no_warning():\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    ax[0].plot(a, np.sin(a))\n+    ax[1].plot(a, np.cos(a))\n+    \n+    # This should not raise a UserWarning because constrained_layout=False\n+    plt.subplots_adjust(wspace=0)\n     np.testing.assert_allclose(pos.x0, 0.06195, atol=1e-3)\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..7f63485 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5731,8 +5731,36 @@ def test_set_get_ticklabels():\n     ax[1].set_xticklabels(ax[0].get_xticklabels())\n     ax[1].set_yticklabels(ax[0].get_yticklabels())\n \n+import pytest\n+import matplotlib.pyplot as plt\n \n-@check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_kwargs_raise_error_without_labels():\n+    \"\"\"\n+    When labels=None and any kwarg is passed, axis.set_ticks() raises a\n+    ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, alpha=0.5)\n+\n+def test_set_xticks_kwargs_raises_error_without_labels():\n+    \"\"\"\n+    Verify that Axes.set_xticks() raises a ValueError for kwargs without labels.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.set_xticks(ticks, color='red')\n+\n+def test_set_yticks_kwargs_raises_error_without_labels():\n+    \"\"\"\n+    Verify that Axes.set_yticks() raises a ValueError for kwargs without labels.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.set_yticks(ticks, linestyle='--')\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..b96ab19 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -25,6 +25,18 @@ from matplotlib.testing.decorators import image_comparison, check_figures_equal\n     (2, [1, 0]),\n     (1, [0]),\n ])\n+@pytest.mark.parametrize(\"index\", [256, 257, 258, -1])\n+def test_colormap_deprecation_handling(index):\n+    \"\"\"Test to ensure that NumPy deprecation warnings are handled.\"\"\"\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    \n+    cmap = plt.get_cmap(\"viridis\")\n+    # With the new changes, we expect no warnings to be raised.\n+    with pytest.warns(None) as record:\n+        cmap(np.array([index], dtype=np.uint8))\n+    # Ensure that no warnings were raised\n+    assert len(record) == 0\n def test_create_lookup_table(N, result):\n     data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..59ce04e 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -90,7 +91,31 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n+import pickletools\n+\n @mpl.style.context(\"default\")\n+\n+def test_draggable_legend_pickling():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Verify that \"FigureCanvasAgg\" is not in the pickled data\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Attempt to unpickle the figure\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..5503797 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -90,7 +90,29 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n-@mpl.style.context(\"default\")\n+import matplotlib.pyplot as plt\n+import pickle\n+\n+def test_pickling_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align the labels before pickling\n+    fig.align_labels()\n+\n+    # Ensure pickling works\n+    pickle_data = pickle.dumps(fig)\n+    loaded_figure = pickle.loads(pickle_data)\n+    loaded_figure.canvas.draw()  # Verifying if the figure can be drawn after unpickling\n+    plt.close(loaded_figure)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..f03148f 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -445,8 +445,33 @@ def test_paddedbox():\n     pb = PaddedBox(ta, pad=10, patch_attrs={'facecolor': 'b'})\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mplcursors\n+import pytest\n \n+def test_mplcursor_matplotlib_attribute_error():\n+    # Create a simple plot\n+    x = np.arange(1, 11)\n+    y1 = x\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+\n+    # Initialize mplcursor\n+    mplcursors.cursor(ax, hover=True)\n+\n+    # Simulate a click on a data point\n+    mock_event = plt.backend_bases.MouseEvent('button_press_event', fig.canvas, x=5, y=5)\n+    fig.canvas.callbacks.process('button_press_event', mock_event)\n+\n+    # Test if additional clicks don't lead to AttributeError\n+    for _ in range(5):\n+        try:\n+            mock_release_event = plt.backend_bases.MouseEvent('button_release_event', fig.canvas, x=5, y=5)\n+            fig.canvas.callbacks.process('button_release_event', mock_release_event)\n+        except AttributeError:\n+            pytest.fail(\"Unexpected AttributeError!\")\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..aa9ea7f 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,8 +1,10 @@\n \n+\n import numpy as np\n import pandas as pd\n \n import pytest\n+from pandas.testing import assert_frame_equal\n from numpy.testing import assert_array_equal, assert_array_almost_equal\n \n from seaborn._core.groupby import GroupBy\n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..a63af87 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -708,6 +708,12 @@ class TestFacetGrid:\n                     assert tick.get_pad() == pad\n \n \n+import pytest\n+import numpy as np\n+import pandas as pd\n+import matplotlib.pyplot as plt\n+import seaborn.axisgrid as ag\n+\n class TestPairGrid:\n \n     rs = np.random.RandomState(sum(map(ord, \"PairGrid\")))\n",
  "pallets__flask-4992": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex 73be34c..d318a45 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -234,6 +234,7 @@ class Config(dict):\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = 'r',\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -261,7 +262,7 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..173e7f6 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,40 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import requests\n+import pytest\n+from requests.exceptions import DecodeError, Timeout\n+from requests.adapters import HTTPAdapter\n+from requests.packages.urllib3.exceptions import DecodeError as Urllib3DecodeError\n+from requests.packages.urllib3.exceptions import ReadTimeoutError as Urllib3TimeoutError\n+\n+def httpbin(endpoint):\n+    return f'http://httpbin.org/{endpoint}'\n+\n+def test_urllib3_decode_error_wrapped():\n+    \"\"\"Test if urllib3's DecodeError is wrapped by requests' DecodeError\"\"\"\n+\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter(max_retries=0))\n+\n+    # Mock a DecodeError scenario\n+    with pytest.raises(DecodeError):\n+        try:\n+            raise Urllib3DecodeError(\"test decode error\")\n+        except Urllib3DecodeError as e:\n+            raise DecodeError(e)\n+\n+def test_urllib3_timeout_error_wrapped():\n+    \"\"\"Test if urllib3's TimeoutError is wrapped by requests' Timeout\"\"\"\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter(max_retries=0))\n+\n+    with pytest.raises(Timeout):\n+        try:\n+            raise Urllib3TimeoutError(\"test timeout error\")\n+        except Urllib3TimeoutError as e:\n+            raise Timeout(e)\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1697,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..e058463 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,6 +980,26 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n+    def test_response_issue_decode_unicode(self):\n+        \"\"\"\n+        Verify that iter_content with decode_unicode=True returns unicode\n+        and emulate behavior from the issue statement.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'{\"key\": \"value\"}')\n+        r.encoding = 'utf-8'  # Simulate JSON response with UTF-8 encoding\n+\n+        # Test iter_content with decode_unicode=True\n+        chunks = r.iter_content(16*1024, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Expected Unicode chunks\"\n+\n+        # Compare with r.text method behavior\n+        r._content_consumed = True\n+        r._content = b'{\"key\": \"value\"}'\n+        text_content = r.text\n+        assert isinstance(text_content, str), \"Expected decoded Unicode text\"\n+        assert text_content == '{\"key\": \"value\"}', \"The text content does not match the expected result\"\n+\n     def test_response_chunk_size_int(self):\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..8ba469a 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -89,6 +89,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_issue_2321_should_not_trigger(self) -> None:\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n@@ -119,4 +129,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..dd14050 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -71,6 +71,15 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: unknown-option=yes\" in output.out\n \n \n+def test_unrecognized_option_traceback_absence(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that no traceback is printed for an unrecognized short option.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err\n+    assert \"usage: pylint\" in output.err\n+\n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n     with pytest.raises(_UnrecognizedOptionError):\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..589c60f 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1324,7 +1324,7 @@ class TestRunTC:\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n-                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n                 self._runtest(\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n",
  "pylint-dev__pylint-7114": "",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..f457f3d 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,6 +114,35 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n+def test_template_option_with_category(linter: PyLinter) -> None:\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+\n+    # Add custom messages\n+    linter.add_message(\"C0103\", line=1)\n+    linter.add_message(\"E0203\", line=2)\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n+\n+def test_template_option_with_unrecognized(linter: PyLinter) -> None:\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Unrecognized\": \"{unrecognized}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+\n+    # Add a message to ensure template is fixed\n+    linter.add_message(\"C0301\", line=1)\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    # Expecting an empty field due to unrecognized argument\n+    assert out_lines[1] == '{ \"Unrecognized\": \"\" }'\n+\n def test_deprecation_set_output(recwarn):\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\nindex 82f0458..ff3b2c3 100644\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -285,6 +285,10 @@ def test_log_cli_default_level(testdir):\n             \"test_log_cli_default_level.py*WARNING message will be shown*\",\n         ]\n     )\n+    # Check the new log format for module name inclusion\n+    module_name_pattern = r\"DEBUG\\s+.+?:test_log_cli_default_level.py:\\d+\\s+WARNING message will be shown\"\n+    result.stdout.re_match_lines([module_name_pattern])\n+\n     assert \"INFO message won't be shown\" not in result.stdout.str()\n     # make sure that that we get a '0' exit code for the testsuite\n     assert result.ret == 0\n",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..c9a5e42 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -144,6 +144,55 @@ def test_repr_on_newstyle():\n     assert saferepr(Function())\n \n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n+def test_saferepr_with_failing_repr():\n+    \"\"\"Test saferepr() with objects that have a failing __repr__ method.\"\"\"\n+    \n+    class FailingRepr:\n+        def __repr__(self):\n+            raise ValueError(\"Failed in repr\")\n+    \n+    assert saferepr(FailingRepr()).startswith(\n+        \"<[ValueError('Failed in repr') raised in repr()] FailingRepr object at 0x\"\n+    )\n+\n+\n+def test_saferepr_with_exception_raise():\n+    \"\"\"Test saferepr() where __repr__ raises a different type of exception.\"\"\"\n+    \n+    class RaiseExceptionInRepr:\n+        def __repr__(self):\n+            raise Exception(\"Generic exception in repr\")\n+    \n+    assert saferepr(RaiseExceptionInRepr()).startswith(\n+        \"<[Exception('Generic exception in repr') raised in repr()] RaiseExceptionInRepr object at 0x\"\n+    )\n+\n+def test_saferepr_with_normal_object():\n+    \"\"\"Test saferepr() with objects that have a valid __repr__ method.\"\"\"\n+    \n+    class NormalClass:\n+        def __repr__(self):\n+            return \"NormalClass()\"\n+    \n+    assert saferepr(NormalClass()) == \"NormalClass()\"\n+\n+\n def test_unicode():\n     val = \"\u00a3\u20ac\"\n     reprval = \"'\u00a3\u20ac'\"\n@@ -153,4 +202,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "",
  "pytest-dev__pytest-7373": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..084e4c2 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -397,6 +398,33 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(\n+        self, testdir: Testdir\n+    ) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_dynamic_xfail_no_run(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..ad2d5d5 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -21,8 +22,37 @@ from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n from _pytest.tmpdir import get_user\n from _pytest.tmpdir import TempdirFactory\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest.tmpdir import TempPathFactory\n \n+def test_tmpdir_handles_invalid_dir_characters(monkeypatch: MonkeyPatch, tmpdir_factory: TempdirFactory):\n+    # Simulate getpass.getuser returning an invalid directory name\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"invalid/\\\\:*?\\\"<>|name\")\n+    \n+    # Reset _basetemp and _given_basetemp to test the directory creation\n+    monkeypatch.setattr(tmpdir_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmpdir_factory, \"_given_basetemp\", None)\n+    \n+    # Attempt to create a temporary directory\n+    p = tmpdir_factory.mktemp(\"example\")\n+    \n+    # Check if the directory was created correctly\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+def test_temp_path_factory_handles_invalid_dir_characters(monkeypatch: MonkeyPatch, tmp_path_factory: TempPathFactory) -> None:\n+    # Simulate getpass.getuser returning an invalid directory name\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"example/<:*?;|>invalid\")\n+    \n+    # Reset _basetemp and _given_basetemp to test the directory creation\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    \n+    # Attempt to create a base temporary directory\n+    p = tmp_path_factory.getbasetemp()\n+    \n+    # Check if the directory was created correctly\n+    assert \"pytest-of-unknown\" in str(p)\n+\n \n def test_tmpdir_fixture(pytester: Pytester) -> None:\n     p = pytester.copy_example(\"tmpdir/tmpdir_fixture.py\")\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..a71744b 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,27 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values parameter.\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n \n-def test_ridgecv_store_cv_values():\n+    n_samples, n_features = x.shape\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Test with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_alphas))\n+\n+    # Test with multiple targets\n+    y = np.array([[1, 1, 1, -1, -1], [1, -1, 1, -1, 1], [-1, -1, 1, -1, -1]]).transpose()\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, y.shape[1], n_alphas))\n+\n+    # Test edge case where store_cv_values=True but cv is not None\n+    assert_raises(ValueError, RidgeClassifierCV, alphas=alphas, store_cv_values=True, cv=5)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..f530328 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,11 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+import numpy as np\n+import pytest\n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n@@ -273,6 +278,34 @@ def test_one_hot_encoder_no_categorical_features():\n     assert enc.categories_ == []\n \n \n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_handle_unknown_strings_with_different_lengths():\n+    X = np.array(['short', 'medium', 'longer', 'longest']).reshape((-1, 1))\n+    X2 = np.array(['unknown', 'short']).reshape((-1, 1))\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [1.,  0.,  0.,  0.]]))\n+    assert_array_equal(X2, X2_passed)\n+\n @pytest.mark.parametrize(\"output_dtype\", [np.int32, np.float32, np.float64])\n @pytest.mark.parametrize(\"input_dtype\", [np.int32, np.float32, np.float64])\n def test_one_hot_encoder_dtype(input_dtype, output_dtype):\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..a1a467a 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,29 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_n_init_different_random_state():\n+    # Check that fit_predict is equivalent to fit.predict, with different random states\n+    X = np.random.RandomState(42).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=42)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_n_init_large_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, with a large n_init\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=20, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..fccbd3a 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -70,8 +71,16 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n-\n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_invariance():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    \n+    transformed_1 = kpca.fit_transform(X)\n+    transformed_2 = kpca.fit_transform(X)\n+    \n+    # Check that the absolute values are the same, even if the signs differ\n+    assert_allclose(np.abs(transformed_1), np.abs(transformed_2))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..f3af904 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,6 +1057,26 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n+def test_pipeline_len():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.svm import SVC\n+\n+    # Test with a pipeline with two steps\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    assert len(pipe) == 2\n+\n+    # Test with a pipeline with one step\n+    pipe_single = Pipeline([('anova', anova_filter)])\n+    assert len(pipe_single) == 1\n+\n+    # Test with an empty pipeline\n+    pipe_empty = Pipeline([])\n+    assert len(pipe_empty) == 0\n+\n \n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n@@ -1070,4 +1090,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..81e36bc 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n@@ -295,6 +298,26 @@ def test_score_samples():\n                        clf2.score_samples([[2., 2.]]))\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start_false():\n+    \"\"\"Test that warm_start=False resets the estimators.\"\"\"\n+    rng = check_random_state(0)\n+    X = rng.randn(20, 2)\n+\n+    # fit first 10 trees\n+    clf = IsolationForest(n_estimators=10, max_samples=20,\n+                          random_state=rng, warm_start=False)\n+    clf.fit(X)\n+    # remember the 1st tree\n+    tree_1 = clf.estimators_[0]\n+    # fit another 10 trees with warm_start=False\n+    clf.set_params(n_estimators=20)\n+    clf.fit(X)\n+    # expecting 20 fitted trees and the first tree should be different\n+    assert len(clf.estimators_) == 20\n+    assert clf.estimators_[0] is not tree_1\n+\n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..ddf9abb 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,22 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+    # Additional test cases for discrete_features as array of indices or boolean mask\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test with discrete_features as a boolean mask\n+        mi_5 = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        mi_6 = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        assert_array_equal(mi_5, mi_6)\n+\n+        # Test with discrete_features as an array of indices\n+        mi_7 = mutual_info(X, y, discrete_features=[0, 1], random_state=0)\n+        mi_8 = mutual_info(X, y, discrete_features=[True, True, False], random_state=0)\n+        assert_array_equal(mi_7, mi_8)\n+\n+        # Test with invalid boolean mask length\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False, True, False])\n+\n+        # Test with invalid index in array\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..fa3a43f 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +217,17 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_array_param():\n+    # Test that LogisticRegressionCV with array parameter Cs can be printed\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        assert \"LogisticRegressionCV\" in repr_output\n+    except ValueError as e:\n+        assert False, f\"Unexpected ValueError: {e}\"\n+    finally:\n+        set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..56d02b5 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,9 +1,12 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n@@ -506,4 +509,23 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(datasets.load_iris(return_X_y=True), VotingClassifier(\n+        [('lr', LogisticRegression()), ('rf', RandomForestClassifier(n_estimators=5))])),\n+     (datasets.load_boston(return_X_y=True), VotingRegressor(\n+         [('lr', LinearRegression()), ('rf', RandomForestRegressor(n_estimators=5))]))]\n+)\n+def test_multiple_none_estimators(X, y, voter):\n+    # Test setting multiple estimators to None\n+    voter.set_params(lr=None, rf=None)\n+    with pytest.raises(ValueError, match=\"VotingClassifier needs at least one non-None estimator\"):\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n+\n+    # Test without sample weights\n+    voter.set_params(lr=LogisticRegression(), rf=None)\n+    voter.fit(X, y)\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape[0] == y.shape[0]\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..5a4ec44 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -133,7 +133,17 @@ def test_params_validation():\n     assert_raises(TypeError, NCA(n_components='invalid').fit, X, y)\n     assert_raises(TypeError, NCA(warm_start=1).fit, X, y)\n \n-    # ValueError\n+    # Test that numpy integer and float types do not raise errors\n+    X = np.random.random_sample((10, 5))\n+    y = np.random.randint(2, size=10)\n+\n+    # Test with numpy integer types\n+    nca = NCA(n_components=np.int64(3), max_iter=np.int32(100), tol=np.float32(0.0001))\n+    nca.fit(X, y)\n+\n+    # Test with numpy float types\n+    nca = NCA(tol=np.float64(0.001))\n+    nca.fit(X, y)\n     assert_raise_message(ValueError,\n                          \"`init` must be 'auto', 'pca', 'lda', 'identity', \"\n                          \"'random' or a numpy array of shape \"\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..2df6d31 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,33 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_no_zero_division_error():\n+    # Test to ensure no ZeroDivisionError is raised with sparse input\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(C=316.227766017, kernel='linear', max_iter=15000, tol=0.001)\n+    try:\n+        model.fit(X_train, y_train)\n+        print(\"No ZeroDivisionError raised.\")\n+    except ZeroDivisionError:\n+        assert False, \"ZeroDivisionError was raised unexpectedly.\"\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..6bf2ca7 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,31 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=6, n_splits=2, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n+\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr_with_random_state(RepeatedCV):\n+    n_splits, n_repeats, random_state = 3, 4, 42\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    repeated_cv_repr = ('{}(n_repeats=4, n_splits=3, random_state=42)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n+\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr_default(RepeatedCV):\n+    repeated_cv = RepeatedCV()\n+    repeated_cv_repr = ('{}(n_repeats=10, n_splits=5, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..3d0b124 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -166,6 +166,10 @@ def test_format_invariance(metric_name):\n         yield y + 1, 'strictly positive ints'\n \n     if metric_name in SUPERVISED_METRICS:\n+        # Additional test for object dtype arrays of strings\n+        y_true_object_str = np.array([str(x) for x in y_true], dtype=object)\n+        y_pred_object_str = np.array([str(x) for x in y_pred], dtype=object)\n+        assert score_1 == metric(y_true_object_str, y_pred_object_str)\n         metric = SUPERVISED_METRICS[metric_name]\n         score_1 = metric(y_true, y_pred)\n         y_true_gen = generate_formats(y_true)\n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..dab9b9d 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -668,6 +669,19 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n+def test_calibrated_classifier_isotonic_with_pandas_output():\n+    \"\"\"Test CalibratedClassifierCV with isotonic regression and pandas output.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    X, y = make_classification(n_samples=30, n_features=3, random_state=42)\n+    base_clf = SGDClassifier()\n+    calibrated_clf = CalibratedClassifierCV(base_clf, method='isotonic')\n+\n+    with set_config(transform_output=\"pandas\"):\n+        calibrated_clf.fit(X, y)\n+        proba = calibrated_clf.predict_proba(X)\n+        assert isinstance(proba, pd.DataFrame)\n+        assert proba.shape == (30, 2)\n+\n def test_get_feature_names_out(shape):\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..13e7eb9 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -112,6 +112,64 @@ def test_automodule_special_members(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_classes(app):\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base, list, set'\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList(iterable=(), /)',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n@@ -125,4 +183,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..7d45de1 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,11 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+import restructuredtext\n+from sphinx.testing.util import assert_node\n+from sphinx.domains.std import StandardDomain\n+from docutils import nodes\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..1e6feda 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,6 +46,19 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_no_members(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..98bb479 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -115,7 +117,8 @@ def test_restify_type_ForwardRef():\n     assert restify(ForwardRef(\"myint\")) == \":class:`myint`\"\n \n \n-def test_restify_broken_type_hints():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..ec33bc3 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,28 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_use_param(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..b0a783e 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,4 +1,5 @@\n-from sympy import Abs, S, Symbol, I, Rational, PurePoly\n+\n+from sympy import Abs, S, Symbol, I, Rational, PurePoly, Matrix\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n@@ -26,7 +27,37 @@ def test_sparse_matrix():\n     assert type(a.row_join(b)) == type(a)\n     assert type(a.col_join(b)) == type(a)\n \n-    # test element assignment\n+    # Test hstack with zero-row matrices\n+    def test_hstack_zero_row():\n+        M1 = Matrix.zeros(0, 0)\n+        M2 = Matrix.zeros(0, 1)\n+        M3 = Matrix.zeros(0, 2)\n+        M4 = Matrix.zeros(0, 3)\n+        assert Matrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # Test hstack with zero-column matrices\n+    def test_hstack_zero_column():\n+        M1 = Matrix.zeros(1, 0)\n+        M2 = Matrix.zeros(1, 1)\n+        M3 = Matrix.zeros(1, 2)\n+        M4 = Matrix.zeros(1, 3)\n+        assert Matrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    # Test vstack with zero-column matrices\n+    def test_vstack_zero_column():\n+        M1 = Matrix.zeros(0, 0)\n+        M2 = Matrix.zeros(1, 0)\n+        M3 = Matrix.zeros(2, 0)\n+        M4 = Matrix.zeros(3, 0)\n+        assert Matrix.vstack(M1, M2, M3, M4).shape == (6, 0)\n+\n+    # Test vstack with zero-row matrices\n+    def test_vstack_zero_row():\n+        M1 = Matrix.zeros(0, 1)\n+        M2 = Matrix.zeros(1, 1)\n+        M3 = Matrix.zeros(2, 1)\n+        M4 = Matrix.zeros(3, 1)\n+        assert Matrix.vstack(M1, M2, M3, M4).shape == (6, 1)\n     a = SparseMatrix((\n         (1, 0),\n         (0, 1)\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..234c62f 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -100,6 +100,18 @@ def test_core_symbol():\n         check(c)\n \n \n+import pickle\n+import sys\n+from sympy import symbols, Float\n+\n+def test_pickle_float_expression_python2_to_3():\n+    # Simulate the pickling in Python 2 and unpickling in Python 3\n+    x = symbols(\"x\")\n+    expr = x + 1.0\n+    pickled_expr = pickle.dumps(expr, protocol=2)\n+    unpickled_expr = pickle.loads(pickled_expr)\n+    assert unpickled_expr == expr\n+\n def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..93d02d9 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -267,6 +267,22 @@ def test_coth():\n \n     assert coth(x*I) == -cot(x)*I\n \n+    # Test cases for coth(log(tan(x))) substitution issue\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Test for the problematic integral values\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n+\n     assert coth(k*pi*I) == -cot(k*pi)*I\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..3a5b34e 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,20 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_col_insert_issue_13643():\n+    from sympy import eye, Matrix, ones\n+    # issue 13643\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..4113d08 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,37 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+from sympy import symbols, oo\n+from sympy.series.sequences import SeqFormula, SeqPer, SeqAdd, SeqMul\n+from sympy.printing.latex import latex\n \n def test_latex_sequences():\n+    # Test case for the issue described\n+    n = symbols('n', integer=True)\n+    s = SeqFormula(n**2, (n, 0, oo))\n+    expected_latex = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s) == expected_latex\n+\n+    # Additional test cases to ensure no backslash-escaped brackets\n+    s_finite = SeqFormula(n**2, (n, 0, 3))\n+    expected_latex_finite = r'[0, 1, 4, 9]'\n+    assert latex(s_finite) == expected_latex_finite\n+\n+    s_negative = SeqFormula(n**2, (n, -3, 0))\n+    expected_latex_negative = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(s_negative) == expected_latex_negative\n+\n+    s_periodic = SeqPer((1, 2), (0, oo))\n+    expected_latex_periodic = r'[1, 2, 1, 2, \\ldots]'\n+    assert latex(s_periodic) == expected_latex_periodic\n+\n+    s_add = SeqAdd(s, s_periodic)\n+    expected_latex_add = r'[1, 3, 5, 11, \\ldots]'\n+    assert latex(s_add) == expected_latex_add\n+\n+    s_mul = SeqMul(s, s_periodic)\n+    expected_latex_mul = r'[0, 2, 4, 18, \\ldots]'\n+    assert latex(s_mul) == expected_latex_mul\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..f47ca8f 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..bab6139 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,41 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty, symbols\n+from sympy.matrices.expressions.matexpr import MatAdd\n+\n+n = symbols('n', integer=True)\n+\n+def test_issue_14814_pretty_printing():\n+    # Original test cases from the issue\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    assert pretty(x + y) == \"x + y*\"\n+    assert pretty(-x + -2*y) == \"-x - 2*y*\"\n+\n+    # Additional test cases\n+    z = MatrixSymbol('z', n, n)\n+    assert pretty(x + y + z) == \"x + y* + z\"\n+    assert pretty(-x + y) == \"-x + y*\"\n+    assert pretty(x - y) == \"x - y*\"\n+    assert pretty(-x - y) == \"-x - y*\"\n+\n+    # Test with more complex expressions\n+    a = symbols('a')\n+    assert pretty(a*x + y) == \"a*x + y*\"\n+    assert pretty(-a*x - y) == \"-a*x - y*\"\n+    assert pretty(-a*x + y) == \"-a*x + y*\"\n+    assert pretty(a*x - y) == \"a*x - y*\"\n+\n+    # Test with nested MatAdd\n+    expr = MatAdd(x, MatAdd(y, z))\n+    assert pretty(expr) == \"x + y* + z\"\n+\n+    # Test with special characters in MatrixSymbol names\n+    special = MatrixSymbol('special$', n, n)\n+    assert pretty(x + special) == \"x + special$\"\n+    assert pretty(-x + special) == \"-x + special$\"\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..94529c7 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,6 +728,29 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    import sympy as sy\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    lam = lambdify(curlyv, curlyv)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+    lam = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+\n+def test_curly_matrix_symbol_with_different_shapes():\n+    import sympy as sy\n+    curlyv_3x1 = sy.MatrixSymbol(\"{v}\", 3, 1)\n+    lam = lambdify(curlyv_3x1, curlyv_3x1)\n+    assert lam([[1], [2], [3]]) == [[1], [2], [3]]\n+    lam = lambdify(curlyv_3x1, curlyv_3x1, dummify=True)\n+    assert lam([[1], [2], [3]]) == [[1], [2], [3]]\n+\n+    curlyv_2x2 = sy.MatrixSymbol(\"{v}\", 2, 2)\n+    lam = lambdify(curlyv_2x2, curlyv_2x2)\n+    assert lam([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\n+    lam = lambdify(curlyv_2x2, curlyv_2x2, dummify=True)\n+    assert lam([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\n+\n def test_python_keywords():\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..41a7ad4 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n@@ -1726,7 +1728,31 @@ def test_latex_UnevaluatedExpr():\n     assert latex(x*he) == r\"x \\frac{1}{x}\"\n \n \n-def test_MatrixElement_printing():\n+def test_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Original test case\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+    # Additional test cases\n+    # Test with different indices\n+    assert latex((M*N)[j, i]) == r'\\sum_{i_{1}=0}^{k - 1} M_{j, i_{1}} N_{i_{1}, i}'\n+\n+    # Test with different matrix dimensions\n+    A = MatrixSymbol(\"A\", 2, 3)\n+    B = MatrixSymbol(\"B\", 3, 2)\n+    x, y = symbols(\"x y\")\n+    assert latex((A*B)[x, y]) == r'\\sum_{i_{1}=0}^{2} A_{x, i_{1}} B_{i_{1}, y}'\n+\n+    # Test with scalar multiplication\n+    assert latex(2*(M*N)[i, j]) == r'2 \\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+    # Test with addition\n+    assert latex((M*N + M)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j} + M_{i, j}'\n+\n+    # Test with subtraction\n+    assert latex((M*N - N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j} - N_{i, j}'\n     # test cases for issue #11821\n     A = MatrixSymbol(\"A\", 1, 3)\n     B = MatrixSymbol(\"B\", 1, 3)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..c0f1a61 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,15 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    f = Function('f')\n+    g = Function('g')\n+    # Test cases for the issue with idiff\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x) == (x + 1)*exp(x - y)/(y + 1)\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x) == (x + 1)*exp(x - f(x))/(f(x) + 1)\n+    assert idiff(y*exp(y) - x*exp(x), y, x) == (x + 1)*exp(x - y)/(y + 1)\n+    assert idiff(f(x) - y*exp(x), [f(x), y], x) == (y + Derivative(y, x))*exp(x)\n+    assert idiff(f(x) - y*exp(x), [y, f(x)], x) == -y + exp(-x)*Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..0c255e4 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,53 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.codegen import CCodeGen\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_cython_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n+\n+def test_autowrap_cython_with_used_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = x[0, 0]\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..d1b6369 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,20 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, Eq, Symbol, S, FiniteSet, Piecewise\n \n-def test_issue_9623():\n+def test_intersection_removes_duplicates():\n+    x = Symbol('x')\n+    # Test with duplicates\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    # Test with symbolic elements\n+    assert Intersection({1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    # Test with no duplicates\n+    assert Intersection({1}, {2}, {x}) == S.EmptySet\n+    # Test with only symbolic elements\n+    assert Intersection({x}, {x}) == {x}\n+    # Test with empty set\n+    assert Intersection({1}, S.EmptySet, {x}) == S.EmptySet\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..9583ca7 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -10,7 +11,9 @@ from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayPermuteDims, CodegenArrayElementwiseAdd)\n from sympy.printing.lambdarepr import NumPyPrinter\n \n-from sympy.utilities.pytest import warns_deprecated_sympy\n+from sympy.utilities.pytest import warns_deprecated_sympy, raises\n+from sympy.matrices import MatrixSymbol, Identity\n+from sympy import symbols\n from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n@@ -26,7 +29,21 @@ def test_numpy_piecewise_regression():\n     assert NumPyPrinter().doprint(p) == 'numpy.select([numpy.less(x, 0),True], [1,0], default=numpy.nan)'\n \n \n-def test_sum():\n+def test_issue_identity_matrix():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    # Test with a fixed size identity matrix\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+    assert (f(ma) == mr).all()\n+\n+    # Test with a symbolic size identity matrix\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n     if not np:\n         skip(\"NumPy not installed\")\n \n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..e6f7fb3 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -814,4 +814,16 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n+\n+def test_issue_17137():\n+    x = Symbol('x')\n+    # Original test cases\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional test cases\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(exp(x)**I) == exp(x)**I\n+    assert simplify((cos(x) + sin(x))**I) == (cos(x) + sin(x))**I\n+    assert simplify((cos(x) * sin(x))**I) == (cos(x) * sin(x))**I\n+    assert simplify((cos(x)**2 + sin(x)**2)**I) == (cos(x)**2 + sin(x)**2)**I\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..869f6a0 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,6 +92,15 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    # Test multiplication of Point by scalar on both sides\n+    assert 5 * p4 == Point(5, 5)\n+    assert sympy.sympify(2.0) * p4 == Point(2.0, 2.0)\n+    assert p4 * sympy.sympify(2.0) == Point(2.0, 2.0)\n+    # Test addition with scalar multiplication\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert point1 + point2 * sympy.sympify(2.0) == Point(2.0, 2.0)\n+    assert point1 + sympy.sympify(2.0) * point2 == Point(2.0, 2.0)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..1212792 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,46 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, sympify, Symbol\n+from sympy.core.compatibility import raises\n+\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+    # Test for the specific issue described\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    # Test for the related issue where repr is 'x'\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (x == D()) is False\n+    assert (x != D()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1942,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..03dd0ab 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,7 +67,7 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..a751554 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,26 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_BlockDiagMatrix_multiple_elements():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B == expected\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..9a0ed42 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -83,7 +84,14 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_block_index_issue():\n+    from sympy import MatrixSymbol, BlockMatrix, symbols, MatrixElement\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    # Test that C[i, 0] does not simplify incorrectly\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..b57fe49 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -305,6 +305,19 @@ def test_sign():\n     # evaluate what can be evaluated\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n+    # Test cases for sign rewrite in terms of Abs\n+    x = Symbol('x')\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(2).rewrite(Abs) == 1\n+    assert sign(-2).rewrite(Abs) == -1\n+    assert sign(I).rewrite(Abs) == I\n+    assert sign(-I).rewrite(Abs) == -I\n+    assert sign(2 + 3*I).rewrite(Abs) == (2 + 3*I) / Abs(2 + 3*I)\n+    assert sign(0 + 0*I).rewrite(Abs) == 0\n+    assert sign(x + I).rewrite(Abs) == (x + I) / Abs(x + I)\n+    assert sign(x).rewrite(Abs).subs(x, 0) == 0\n+\n     eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n     # if there is a fast way to know when and when you cannot prove an\n     # expression like this is zero then the equality to zero is ok\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..9924556 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,24 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n \n def test_partitions():\n+    # Test that each partition is a distinct dictionary object\n+    partitions_list = list(partitions(6, k=2))\n+    assert all(p1 is not p2 for i, p1 in enumerate(partitions_list) for p2 in partitions_list[i+1:]), \"Partitions should not reuse dictionary objects\"\n+\n+    partitions_list = list(partitions(6, k=3))\n+    assert all(p1 is not p2 for i, p1 in enumerate(partitions_list) for p2 in partitions_list[i+1:]), \"Partitions should not reuse dictionary objects\"\n+\n+    partitions_list = list(partitions(8, k=4, m=3))\n+    assert all(p1 is not p2 for i, p1 in enumerate(partitions_list) for p2 in partitions_list[i+1:]), \"Partitions should not reuse dictionary objects\"\n+\n+    partitions_list = list(partitions(4, k=3))\n+    assert all(p1 is not p2 for i, p1 in enumerate(partitions_list) for p2 in partitions_list[i+1:]), \"Partitions should not reuse dictionary objects\"\n+\n+    partitions_list = list(partitions(S(3), m=2))\n+    assert all(p1 is not p2 for i, p1 in enumerate(partitions_list) for p2 in partitions_list[i+1:]), \"Partitions should not reuse dictionary objects\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..b51806c 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,6 +254,8 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n+from sympy import S, oo, zoo, power\n+\n def test_zero():\n     x = Symbol('x')\n     y = Symbol('y')\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..c8ab56c 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,7 +1,9 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n-                                 volume, kilometer)\n+                                 volume, kilometer, joule)\n+from sympy.physics.units.definitions import (minute)\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n@@ -31,6 +33,21 @@ def test_eq():\n \n \n def test_convert_to():\n+    # Test case for the issue: convert_to should not combine orthogonal units\n+    expr = joule * second\n+    conv = convert_to(expr, joule)\n+    assert conv == expr, f\"Expected {expr}, but got {conv}\"\n+\n+    # Additional test cases to ensure correct behavior\n+    conv_same_units = convert_to(expr, joule * second)\n+    assert conv_same_units == expr, f\"Expected {expr}, but got {conv_same_units}\"\n+\n+    conv_base_units = convert_to(expr, kg * m**2 / s)\n+    assert conv_base_units == kg * m**2 / s, f\"Expected {kg * m**2 / s}, but got {conv_base_units}\"\n+\n+    conv_to_minutes = convert_to(expr, minute)\n+    expected_conv_to_minutes = joule * minute / 60\n+    assert conv_to_minutes == expected_conv_to_minutes, f\"Expected {expected_conv_to_minutes}, but got {conv_to_minutes}\"\n     q = Quantity(\"q1\")\n     q.set_global_relative_scale_factor(S(5000), meter)\n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..45a84c3 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,28 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import pytest\n+from sympy import Symbol\n+from sympy.core.basic import Basic\n+from sympy.testing.pytest import raises\n+\n+def test_symbol_dict_attribute():\n+    # Test that Symbol instances do not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+    # Test that Symbol instances have __slots__ defined\n+    assert hasattr(s, '__slots__')\n+    assert s.__slots__ == ('name',)\n+\n+def test_basic_dict_attribute():\n+    # Test that Basic instances have a __dict__ attribute\n+    b = Basic()\n+    assert hasattr(b, '__dict__')\n+    assert isinstance(b.__dict__, dict)\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..209b5c4 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,16 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_refine_complex_arguments():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x', real=True)\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    # Test the refinement of the integral result\n+    assert refine(J.doit(), Q.positive(a)) == 1 / (a**2 + 1)\n+    # Test the refinement of arg(a) when a is positive\n+    assert refine(arg(a), Q.positive(a)) == 0\n+    # Test the refinement of arg(a) when a is negative\n+    assert refine(arg(a), Q.negative(a)) == pi\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..3f39503 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -9,6 +10,31 @@ from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n def test_subs():\n+    # Test for issue with PolynomialError in subs with hyperbolic functions and piecewise\n+    from sympy import sinh, exp, Piecewise, symbols, clear_cache\n+\n+    x, y, z = symbols('x y z')\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})  # Should not raise PolynomialError\n+\n+    clear_cache()\n+    x, y, z = symbols('x y z', real=True)\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})  # Should not raise PolynomialError\n+\n+    # Additional test cases for similar scenarios\n+    expr_cosh = exp(cosh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_cosh.subs({1: 1.0}) == expr_cosh.subs({1: 1.0})  # Should not raise PolynomialError\n+\n+    expr_tanh = exp(tanh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_tanh.subs({1: 1.0}) == expr_tanh.subs({1: 1.0})  # Should not raise PolynomialError\n+\n+    expr_no_div = exp(sinh(Piecewise((x, y > x), (y, True))))\n+    assert expr_no_div.subs({1: 1.0}) == expr_no_div.subs({1: 1.0})  # Should not raise PolynomialError\n+\n+    expr_no_exp = sinh(Piecewise((x, y > x), (y, True)) / z)\n+    assert expr_no_exp.subs({1: 1.0}) == expr_no_exp.subs({1: 1.0})  # Should not raise PolynomialError\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..15953b2 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,9 +1,11 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n+from sympy.core.function import Derivative\n from sympy.integrals.integrals import Integral\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n@@ -39,7 +41,11 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n-def test_Matrix_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n+    assert Derivative(A, noncomm_x).kind is UndefinedKind\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n         m = cls.zeros(3, 2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..d948f5b 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,6 +131,25 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n+    # Test cases for issue with itermonomials and min_degrees argument\n+    from sympy import symbols\n+    from sympy.polys.monomials import itermonomials\n+\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x1*x3**2, x1**2*x3, x2*x3**2, x2**2*x3, x1*x2*x3\n+    }\n+\n+    # Additional test cases to ensure comprehensive coverage\n+    assert set(itermonomials([x1, x2], 3, 3)) == {\n+        x1**3, x2**3, x1**2*x2, x1*x2**2, x1*x2*x2\n+    }\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x1*x3**2, x1**2*x3, x2*x3**2, x2**2*x3, x1*x2*x3,\n+        x1**4, x2**4, x3**4, x1**3*x2, x1**3*x3, x2**3*x1, x2**3*x3, x3**3*x1, x3**3*x2,\n+        x1**2*x2**2, x1**2*x3**2, x2**2*x3**2, x1*x2**3, x1*x3**3, x2*x3**3, x1**2*x2*x3, x1*x2**2*x3, x1*x2*x3**2\n+    }\n+\n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..26020e8 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n@@ -440,7 +442,24 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Test that Point2D does not raise an error with evaluate(False)\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert p == Point2D(1, 2)\n+\n+    # Test that Point2D works without evaluate(False)\n+    p = Point2D(1, 2)\n+    assert p == Point2D(1, 2)\n+\n+    # Test that Point2D with imaginary coordinates raises an error\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        Point2D(1 + I, 2)\n+\n+    # Test that Point2D with evaluate(False) and imaginary coordinates raises an error\n+    with evaluate(False):\n+        with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+            Point2D(1 + I, 2)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..c968f86 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,7 +347,22 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n-def test_cse_MatrixExpr():\n+def test_cse_MatrixSymbol_indexing():\n+    from sympy import MatrixSymbol, cse, symbols\n+\n+    # Test case for MatrixSymbol indexing\n+    A = MatrixSymbol('A', 4, 4)\n+    B = MatrixSymbol('B', 4, 4)\n+    expr = A * B\n+\n+    # Perform common subexpression elimination\n+    cse_subs, cse_reduced = cse(expr)\n+\n+    # Check that no unnecessary copies are made\n+    assert all(not isinstance(sub[1], MatrixSymbol) for sub in cse_subs), \"Unnecessary MatrixSymbol copies found\"\n+\n+    # Check that the reduced expression is a matrix multiplication\n+    assert cse_reduced[0].shape == (4, 4), \"Reduced expression shape mismatch\"\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..5e86443 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,21 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_lambdify_single_element_tuple():\n+    # Test that lambdify correctly handles a tuple with a single element\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    # Verify the source code to ensure the tuple is correctly represented\n+    source_code = inspect.getsource(f_single)\n+    assert 'return (1,)' in source_code\n+\n+def test_lambdify_two_element_tuple():\n+    # Test that lambdify correctly handles a tuple with two elements\n+    f_double = lambdify([], (1, 2))\n+    assert f_double() == (1, 2)\n+    # Verify the source code to ensure the tuple is correctly represented\n+    source_code = inspect.getsource(f_double)\n+    assert 'return (1, 2)' in source_code\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..d464a64 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,29 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+from sympy.core.numbers import E\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units.systems.si import SI\n+from sympy import exp\n+from sympy.physics.units import Quantity\n+from sympy.physics.units.dimensions import Dimension\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..456dfc1 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -42,6 +42,30 @@ def test_tensor_product_abstract():\n \n \n def test_tensor_product_expand():\n+    # Test cases for the fix of the TensorProduct expansion issue\n+\n+    # Original test cases from the patch\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2 * A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A * B, A) + 2 * TP(A * B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test cases to ensure thorough testing\n+    # Test with zero tensor factor\n+    assert TP(A - A, B + C).expand(tensorproduct=True) == 0\n+\n+    # Test with more complex scalar factors\n+    assert TP(3 * A - 2 * B, 4 * C + 5 * D).expand(tensorproduct=True) == \\\n+        12 * TP(A, C) + 15 * TP(A, D) - 8 * TP(B, C) - 10 * TP(B, D)\n+\n+    # Test with nested tensor products\n+    assert TP(TP(A, B) + C, D).expand(tensorproduct=True) == \\\n+        TP(A, B, D) + TP(C, D)\n+\n+    # Test with multiple scalar factors\n+    assert TP(2 * A, 3 * B).expand(tensorproduct=True) == 6 * TP(A, B)\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..bd0f739 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,7 +563,45 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_with_negative_acceleration():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1*t1 + v1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr1)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..72e1523 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, V, milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,12 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Additional test cases for the milli prefix issue\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+    assert milli * V == V / 1000\n+    assert V * milli == V / 1000\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..c8117c6 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -6,14 +6,35 @@ from django.test import SimpleTestCase, TestCase\n from django.test.utils import CaptureQueriesContext, isolate_apps\n \n from .models import (\n+    Child,\n     Base, Chef, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n     MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase,\n-    Supplier, Title, Worker,\n+    Supplier, Title, Worker, Parent,\n )\n \n \n class ModelInheritanceTests(TestCase):\n-    def test_abstract(self):\n+    def test_inherited_ordering_pk_desc(self):\n+        # Create instances of Parent and Child\n+        p1 = Parent.objects.create(first_name='Joe', email='joe@email.com')\n+        p2 = Parent.objects.create(first_name='Jon', email='jon@email.com')\n+        c1 = Child.objects.create(first_name='Alice', email='alice@email.com')\n+        c2 = Child.objects.create(first_name='Bob', email='bob@email.com')\n+\n+        # Verify Parent ordering\n+        parent_qs = Parent.objects.all()\n+        self.assertSequenceEqual(parent_qs, [p2, p1])\n+\n+        # Verify Child ordering\n+        child_qs = Child.objects.all()\n+        self.assertSequenceEqual(child_qs, [c2, c1])\n+\n+        # Check the SQL query for correct ordering\n+        expected_order_by_sql = 'ORDER BY %s.%s DESC' % (\n+            connection.ops.quote_name(Parent._meta.db_table),\n+            connection.ops.quote_name('id'),\n+        )\n+        self.assertIn(expected_order_by_sql, str(child_qs.query))\n         # The Student and Worker models both have 'name' and 'age' fields on\n         # them and inherit the __str__() method, just as with normal Python\n         # subclassing. This is useful if you want to factor out common\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..6abc1c9 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,28 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        # Setup models similar to the issue description\n+        one1 = OneModel.objects.create(oneval=1)\n+        one2 = OneModel.objects.create(oneval=2, root=one1)\n+        one3 = OneModel.objects.create(oneval=3, root=one2)\n+\n+        two1 = TwoModel.objects.create(record=one1, twoval=10)\n+        two2 = TwoModel.objects.create(record=one2, twoval=20)\n+        two3 = TwoModel.objects.create(record=one3, twoval=30)\n+\n+        # Test ordering by self-referential foreign key\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs, [two1, two2, two3], lambda x: x.twoval\n+        )\n+\n+        # Test ordering by self-referential foreign key with descending order\n+        qs_desc = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs_desc, [two3, two2, two1], lambda x: x.twoval\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..0a8471b 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,8 +3201,24 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the id from widget['attrs']['id']\n+        if it is set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n \n-    def test_boundfield_widget_type(self):\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Simulate the scenario where ChoiceWidget.options sets a custom id\n+        subwidgets[0].data['attrs']['id'] = 'custom_id_0'\n+        subwidgets[1].data['attrs']['id'] = 'custom_id_1'\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..53216f7 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -657,6 +657,19 @@ def test_colorbar_scale_reset():\n \n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n+    # Test updating colorbar after changing mappable.norm\n+    z = 10**np.random.normal(1, 1, size=(50, 50))\n+    pcm = ax.imshow(z, cmap='gray')\n+    cbar = fig.colorbar(pcm, ax=ax)\n+    pcm.set_norm(LogNorm())\n+    cbar.update_normal(pcm)\n+    fig.canvas.draw()\n+    # Check if the colorbar scale is updated to log scale\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+    # Check if the colorbar limits match the data limits\n+    assert pcm.norm.vmin == z.min()\n+    assert pcm.norm.vmax == z.max()\n+\n \n def test_colorbar_get_ticks_2():\n     plt.rcParams['_internal.classic_mode'] = False\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..f79300c 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3044,6 +3044,13 @@ class TestDataset:\n         x0 = y[0].to_unstacked_dataset(\"features\")\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n+    def test_to_unstacked_dataset_single_dim(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n \n     def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n         # test when variables have different dimensionality\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..59f917d 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,31 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Set the output to pandas\n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    result = union.fit_transform(data)\n+\n+    # Check if the result is a DataFrame and has the expected shape\n+    assert isinstance(result, pd.DataFrame)\n+    assert result.shape == (4, 1)  # 4 unique dates, 1 column for the sum\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..077e519 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,51 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.ext.autodoc import do_autodoc\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app: SphinxTestApp):\n+    # Define the class structure as described in the issue\n+    class Foo:\n+        \"\"\"docstring\"\"\"\n+        attr1: int  #: docstring\n+\n+    class Bar(Foo):\n+        \"\"\"docstring\"\"\"\n+        attr2: str  #: docstring\n+\n+    # Use autodoc to document the Bar class\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only_member.Bar', options)\n+\n+    # Verify that attr1 from Foo is documented\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_only_member',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_only_member',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_only_member',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..f13a5ac 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -9,8 +10,28 @@ from sympy.utilities.pytest import XFAIL\n from sympy.abc import x, y, z, t, a, b, c, d, e, f, g, h, i, k\n \n \n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n \n def test_trigsimp1():\n+    # Additional test cases for issue 15129\n+    r = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    assert trigsimp(r) == cos(Rational(1, 25) - Rational(1, 50))\n+\n+    r = sin(Rational(1, 50)) * sin(Rational(1, 50)) + cos(Rational(1, 50)) * cos(Rational(1, 50))\n+    assert trigsimp(r) == 1\n+\n+    r = sin(Rational(1, 25)) * sin(Rational(1, 25)) + cos(Rational(1, 25)) * cos(Rational(1, 25))\n+    assert trigsimp(r) == 1\n+\n+    r = sin(Rational(1, 50)) * cos(Rational(1, 25)) + cos(Rational(1, 50)) * sin(Rational(1, 25))\n+    assert trigsimp(r) == sin(Rational(3, 50))\n     x, y = symbols('x,y')\n \n     assert trigsimp(1 - sin(x)**2) == cos(x)**2\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..baf5128 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,23 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_pretty_print_alignment():\n+    from sympy import Sum, oo, pprint\n+    from sympy.abc import x\n \n-def test_units():\n+    # This test checks the alignment of the terms in the pretty-printed output\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    expected_output = u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571   + 3\\n\\\n+ \u2571      \\n\\\n+ \u203e\u203e\u203e    \\n\\\n+x = 1   \\\n+\"\"\")\n+    assert upretty(expr) == expected_output\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..f84363a 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,20 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    # Test that modifying the list during iteration raises RuntimeError\n+    f = [1, 2, 3, 4]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    f = ['a', 'b', 'c', 'd']\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+    \n+    f = [[1], [2], [3], [4]]\n+    raises(RuntimeError, lambda: [f.pop(0) for i in uniq(f)])\n+    \n+    # Original test cases\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..c49374d 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,6 +8,7 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..dc06cf4 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,6 +546,22 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n+    def test_subquery_sql_generation(self):\n+        # Test that Subquery generates valid SQL with subquery attribute set\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        self.assertTrue(sql.endswith(')'))\n+\n+        # Test that Subquery generates valid SQL without explicitly setting subquery attribute\n+        employees_subquery.query.subquery = False\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        self.assertTrue(sql.endswith(')'))\n+\n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..c66de4a 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,26 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +184,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..fe68d2a 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+import seaborn as sns\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,24 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_hue_map(self):\n+        # Load the iris dataset\n+        iris = sns.load_dataset(\"iris\")\n+        \n+        # Create a PairGrid without using hue in the constructor\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        \n+        # Map scatterplot with hue\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            success = True\n+        except Exception as e:\n+            success = False\n+            print(f\"Error occurred: {e}\")\n+        \n+        # Assert that no error occurs\n+        assert success, \"PairGrid with hue in map should not raise an error\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..d660016 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,6 +323,8 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n+import pytest\n+\n def test_excinfo_exconly():\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n@@ -347,7 +349,22 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n-def test_excinfo_for_later():\n+def test_raises_context_variable_str():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    \n+    # Check that str(excinfo) does not return the full message\n+    assert str(excinfo) != \"A\\nB\\nC\"\n+    \n+    # Check that str(excinfo.value) returns the full message\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n+def test_raises_context_variable_value():\n+    with pytest.raises(ValueError) as excinfo:\n+        raise ValueError(\"Error occurred\")\n+    \n+    # Check that str(excinfo.value) returns the correct message\n+    assert str(excinfo.value) == \"Error occurred\"\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..1d70d52 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Test the new single-character shortcut for --collect-only\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Test the new single-character shortcut for --collect-only\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..62bd34d 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -90,6 +90,17 @@ def missing_attr(c,\n     # type: (...) -> str\n     return a + (b or \"\")\n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n \n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n@@ -98,4 +109,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..6e46c79 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,15 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Sum, symbols\n \n-def test_Identity_doit():\n+def test_Identity_sum_elements():\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+    \n+    # Test the sum of all elements in the identity matrix\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..ec537f0 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,18 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_21537():\n+    from sympy.parsing.latex import parse_latex\n+    from sympy import Symbol, Pow, Add, Mul\n+\n+    a = Symbol('a')\n+    b = Symbol('b')\n+    c = Symbol('c')\n+\n+    # Test the problematic LaTeX expression\n+    latex_expr = r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\"\n+    expected_expr = Mul(Add(Pow(a, 3), b), Pow(c, -1), Pow(Pow(c, 2), -1))\n+    assert parse_latex(latex_expr) == expected_expr\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}