{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..54205b6 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,37 @@ compound_models = {\n             )\n }\n \n+# Additional test cases for nested compound models\n+def test_separability_matrix_for_nested_models():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    \n+    # Original issue's nested compound model test\n+    cm_linear = m.Linear1D(10) & m.Linear1D(5)\n+    cm_nested = m.Pix2Sky_TAN() & cm_linear\n+    \n+    expected = np.array([[ True,  True, False, False],\n+                         [ True,  True, False, False],\n+                         [False, False,  True,  True],\n+                         [False, False,  True,  True]])\n+    \n+    result = separability_matrix(cm_nested)\n+    \n+    assert np.array_equal(result, expected), \"Test failed for nested compound model\"\n+    \n+    # Additional nested model test with 3 different models\n+    cm_complex = m.Pix2Sky_TAN() & m.Gaussian1D(1, 0, 0.1) & m.Linear1D(2)\n+    \n+    expected_complex = np.array([[ True,  True, False, False, False],\n+                                 [ True,  True, False, False, False],\n+                                 [False, False,  True, False, False],\n+                                 [False, False, False,  True,  False],\n+                                 [False, False, False, False,  True]])\n+    \n+    result_complex = separability_matrix(cm_complex)\n+    \n+    assert np.array_equal(result_complex, expected_complex), \"Test failed for another complex nested model\"\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-14182": "",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..46c54b8 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -70,6 +70,14 @@ def test_roundtrip(tmp_path):\n     53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n     NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n     \"\"\"\n+    def lowercase_header(value):\n+        \"\"\"Make every non-comment line lower case.\"\"\"\n+        lines = []\n+        for line in value.splitlines():\n+            if not line.startswith(\"!\"):\n+                line = line.lower()\n+            lines.append(line)\n+        return \"\\n\".join(lines)\n \n     path = str(tmp_path / \"test.qdp\")\n     path2 = str(tmp_path / \"test2.qdp\")\n@@ -108,8 +116,64 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+    \n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip_with_case_insensitivity(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    READ TERR 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n+    def lowercase_header(value):\n+        \"\"\"Make every non-comment line lower case.\"\"\"\n+        lines = []\n+        for line in value.splitlines():\n+            if not line.startswith(\"!\"):\n+                line = line.lower()\n+            lines.append(line)\n+        return \"\\n\".join(lines)\n+    \n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"test_case.qdp\")\n+    path_out = str(tmp_path / \"test_case_out.qdp\")\n \n-def test_read_example():\n+    with open(path, \"w\") as fp:\n+        fp.write(example_qdp)\n+\n+    with pytest.warns(AstropyUserWarning, match=\"This file contains multiple command blocks\"):\n+        table = Table.read(path, format='ascii.qdp', table_id=0)\n+        \n+    table.write(path_out, format='ascii.qdp')\n+    table_out = Table.read(path_out, format='ascii.qdp', table_id=0)\n+\n+    for col in table.columns:\n+        assert np.allclose(table[col], table_out[col], equal_nan=True)\n+    \n+    for meta_name in [\"initial_comments\", \"comments\"]:\n+        assert meta_name in table_out.meta\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..1cca810 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -247,7 +247,25 @@ class TestTableFunctions(FitsTestCase):\n         t[1].data._scale_back()\n         assert str(np.rec.recarray.field(t[1].data, 'c4')) == '[84 84]'\n \n-        # look at data column-wise\n+        # Additional test to verify handling of 'D' exponent in ASCII tables\n+        def test_d_exponent_handling(self):\n+            a1 = np.char.array(['a', 'b'])\n+            # Use D format which should replace the E exponent separator\n+            r1 = np.array([1.2345e+03, 6.7890e-03])\n+            c1 = fits.Column(name='col1', format='A1', array=a1)\n+            c2 = fits.Column(name='col2', format='D14.6', array=r1)\n+            hdu = fits.TableHDU.from_columns([c1, c2])\n+\n+            with fits.open(self.temp('test.fit'), mode='ostream') as h:\n+                h.append(hdu)\n+                h.writeto(self.temp('exp_test.fits'), overwrite=True)\n+                \n+            with fits.open(self.temp('exp_test.fits')) as hdul:\n+                # Read the text output -- we expect 'D' instead of 'E'\n+                data = hdul[1].data\n+                output_string = hdu.data['col2'][0]\n+                # Check the exponent has been swapped to 'D'\n+                assert 'D+03' in output_string\n         assert (t[1].data.field(0) == np.array([1, 2])).all()\n \n         # When there are scaled columns, the raw data are in data._parent\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..2a3d049 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,6 +1092,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS should be 0o644 if not explicitly set.\n+        \"\"\"\n+        from django.conf import settings\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n \n     def test_override_file_upload_permissions(self):\n         \"\"\"\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..1eb5f40 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -514,6 +514,33 @@ class MigrateTests(MigrationTestBase):\n             out.getvalue()\n         )\n \n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_sqlmigrate_transactional_database(self):\n+        \"\"\"\n+        Tests that transaction wrappers are used when the database can rollback DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', True):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        self.assertIn(connection.ops.start_transaction_sql().lower(), queries)\n+        self.assertIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_sqlmigrate_non_atomic_migration_on_transactional_database(self):\n+        \"\"\"\n+        Tests that no transaction wrappers are shown for non-atomic migrations even if the database supports transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', True):\n+            call_command('sqlmigrate', 'migrations', '0002_non_atomic', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        if connection.ops.start_transaction_sql():\n+            self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_plan_app_label_no_migrations(self):\n         out = io.StringIO()\n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..2174730 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -67,7 +67,31 @@ class TestSerialization(SimpleTestCase):\n \n class TestValidation(SimpleTestCase):\n \n-    def test_invalid_string(self):\n+    def test_invalid_duration_formats(self):\n+        field = models.DurationField()\n+        invalid_inputs = [\n+            ('', 'This field cannot be blank.'),\n+            ('not a duration', \"'not a duration' value has an invalid format. It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"),\n+            ('25:61:01', \"'25:61:01' value has an invalid format. It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"),\n+            ('1:60:00:0', \"'1:60:00:0' value has an invalid format. It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"),\n+            ('-1 25:00:00', \"Days must be positive or 0 for this field.\"),\n+        ]\n+        for input_value, error_message in invalid_inputs:\n+            with self.assertRaises(ValidationError) as cm:\n+                field.clean(input_value, None)\n+            self.assertEqual(cm.exception.message % cm.exception.params, error_message)\n+\n+    def test_valid_duration_formats(self):\n+        field = models.DurationField()\n+        valid_inputs = {\n+            '0:00:01': datetime.timedelta(seconds=1),\n+            '12:34': datetime.timedelta(minutes=12, seconds=34),\n+            '1:12:34': datetime.timedelta(hours=1, minutes=12, seconds=34),\n+            '2 12:34:56': datetime.timedelta(days=2, hours=12, minutes=34, seconds=56),\n+            '5 23:59:59.999999': datetime.timedelta(days=5, hours=23, minutes=59, seconds=59, microseconds=999999),\n+        }\n+        for input_value, expected_output in valid_inputs.items():\n+            self.assertEqual(field.clean(input_value, None), expected_output)\n         field = models.DurationField()\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n@@ -75,7 +99,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +108,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..1e0f2a1 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\u000A',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +259,48 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n+\n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = ['username\\n', 'user\\r', 'name\\r\\n']\n+        valid_usernames = ['username', 'anotherUsername123']\n+        v = validators.UnicodeUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        invalid_usernames = ['asciiuser\\n', 'asciiuser\\r']\n+        valid_usernames = ['asciiuser', 'AnotherAsciiUser']\n+        v = validators.ASCIIUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+        v = validators.UnicodeUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator(self):\n+        valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        v = validators.ASCIIUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n",
  "django__django-11133": "",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..24e1248 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n@@ -464,6 +466,15 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        \"\"\"Test that deleting an instance with no dependencies sets pk to None.\"\"\"\n+        u = User.objects.create()\n+        # Verify User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk, \"Primary key should be None after delete is called on the instance.\")\n+\n     def test_fast_delete_qs(self):\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..8e52390 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,8 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n+from django.db import IntegrityError\n+from django.test.utils import captured_stdout\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n@@ -140,7 +143,47 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_migration_handles_duplicate_permissions_gracefully(self):\n+        \"\"\"\n+        Test that the migration handles duplicate permission entries gracefully.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_agency',\n+            name='Can add agency',\n+        )\n+        # Intentionally create a duplicate permission\n+        try:\n+            with captured_stdout() as stdout:\n+                update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        except IntegrityError as e:\n+            self.fail(f\"Migration failed due to an IntegrityError: {e}\")\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..8beed54 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -14,6 +14,7 @@ from pathlib import Path\n from unittest import mock, skip, skipIf\n \n from django.apps.registry import Apps\n+import sys\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..d6de122 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -6,6 +6,8 @@ import sys\n import tempfile\n import threading\n from io import StringIO\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from pathlib import Path\n from unittest import mock\n \n@@ -239,6 +241,16 @@ class DebugViewTests(SimpleTestCase):\n \n \n class DebugViewQueriesAllowedTests(SimpleTestCase):\n+\n+    def test_technical_404_converter_when_debug_true(self):\n+        \"\"\"\n+        When DEBUG is True and an Http404 is raised in a path converter's \n+        to_python method, a technical 404 page should be shown.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+            self.assertContains(response, 'A server error occurred. Please contact the administrator.')\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..2dc1bd7 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -83,8 +83,31 @@ class BinaryFieldTests(SimpleTestCase):\n \n @isolate_apps('invalid_models_tests')\n class CharFieldTests(SimpleTestCase):\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n \n-    def test_valid_field(self):\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n         class Model(models.Model):\n             field = models.CharField(\n                 max_length=255,\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..f63d467 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -253,6 +253,21 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n     def test_serialize_enums(self):\n+        # Test that migrations use the name of the enum member, not the value\n+\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')  # This would get translated\n+            B = _('value-b')  # This would also get translated\n+\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+            max_length=128,\n+        )\n+        serialized_field = MigrationWriter.serialize(field)[0]\n+        \n+        # Assert that the enum name is used, not the translated value\n+        self.assertIn(\"default=TextTranslatedEnum['A']\", serialized_field)\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..831c127 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -316,7 +317,33 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        \n+        # Set up current mocked dates and respective test cases\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        tests = (\n+            # Using mocked date in 2019\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            # Using mocked date in 2020 (next year)\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            # Testing for a future year\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..403748b 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,10 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import SimpleTestCase\n+from django.db import models\n+from django.utils.functional import Promise\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n@@ -41,7 +45,39 @@ class Gender(models.TextChoices):\n \n \n class ChoicesTests(SimpleTestCase):\n-    def test_integerchoices(self):\n+    def test_stringchoices_return_type(self):\n+        class MyChoice(models.TextChoices):\n+            FIRST_CHOICE = \"first\", \"The first choice, it is\"\n+            SECOND_CHOICE = \"second\", \"The second choice, it is\"\n+\n+        class MyObject(models.Model):\n+            my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+        my_object = MyObject(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+        # Simulate saving and retrieving from DB\n+        retrieved_object = MyObject(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(retrieved_object.my_str_value, str)\n+        self.assertEqual(str(retrieved_object.my_str_value), \"first\")\n+\n+    def test_integerchoices_return_type(self):\n+        class MyIntegerChoice(models.IntegerChoices):\n+            CHOICE_ONE = 1, \"Choice One\"\n+            CHOICE_TWO = 2, \"Choice Two\"\n+\n+        class MyNumberObject(models.Model):\n+            my_int_value = models.IntegerField(choices=MyIntegerChoice.choices)\n+\n+        my_number_object = MyNumberObject(my_int_value=MyIntegerChoice.CHOICE_ONE)\n+        self.assertIsInstance(my_number_object.my_int_value, int)\n+        self.assertEqual(int(my_number_object.my_int_value), 1)\n+\n+        # Simulate saving and retrieving from DB\n+        retrieved_number_object = MyNumberObject(my_int_value=MyIntegerChoice.CHOICE_ONE)\n+        self.assertIsInstance(retrieved_number_object.my_int_value, int)\n+        self.assertEqual(int(retrieved_number_object.my_int_value), 1)\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n         self.assertEqual(Suit.values, [1, 2, 3, 4])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..4a92e8f 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -187,7 +187,37 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n \n-class GetChoicesTests(SimpleTestCase):\n+from django.db import models\n+from django.test import TestCase\n+\n+class GetFieldDisplayOverrideTests(TestCase):\n+    def test_overriding_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_default_get_FIELD_display_behavior(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        f = FooBar(foo_bar=1)\n+        # By default, it should return the choice display value 'foo'\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n+\n+    def test_unset_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            # No overriding of get_foo_bar_display\n+\n+        f = FooBar(foo_bar=1)\n+        # Without override, should return the display value\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 7b8648d..55daa9e 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -73,7 +73,19 @@ class SimplifiedURLTests(SimpleTestCase):\n         self.assertEqual(match.url_name, 'inner-extra')\n         self.assertEqual(match.route, 'included_urls/extra/<extra>/')\n \n-    def test_path_lookup_with_empty_string_inclusion(self):\n+    def test_module_view_with_optional_format(self):\n+        # Mimicking the original issue's URL pattern test\n+        match = resolve('/module/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': None})\n+\n+        match_with_format = resolve('/module/html/')\n+        self.assertEqual(match_with_format.url_name, 'modules')\n+        self.assertEqual(match_with_format.kwargs, {'format': 'html'})\n+\n+        match_with_format_json = resolve('/module/json/')\n+        self.assertEqual(match_with_format_json.url_name, 'modules')\n+        self.assertEqual(match_with_format_json.kwargs, {'format': 'json'})\n         match = resolve('/more/99/')\n         self.assertEqual(match.url_name, 'inner-more')\n         self.assertEqual(match.route, r'^more/(?P<extra>\\w+)/$')\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..6cba0b5 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,34 @@\n+\n+class InheritedChoicesDisplayTests(TestCase):\n+\n+    def test_inherited_choices_display_functionality(self):\n+        \"\"\"\n+        Test that get_FIELD_display() works correctly with overridden and extended\n+        choices in inherited models.\n+        \"\"\"\n+\n+        class BaseModel(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A'), ('B', 'Base B')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(BaseModel):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')])\n+\n+        # Check the overridden choices\n+        instance_a = ChildModel(foo='A')\n+        instance_b = ChildModel(foo='B')\n+        instance_c = ChildModel(foo='C')\n+\n+        self.assertEqual(instance_a.get_foo_display(), 'Child A')\n+        self.assertEqual(instance_b.get_foo_display(), 'Child B')\n+        self.assertEqual(instance_c.get_foo_display(), 'Child C')\n+\n+        # Check with non-overridden value\n+        invalid_instance = ChildModel(foo='Invalid')\n+        self.assertEqual(invalid_instance.get_foo_display(), 'Invalid')\n+\n import pickle\n \n from django import forms\n@@ -10,6 +41,7 @@ from .models import (\n     Bar, Choiceful, Foo, RenamedField, VerboseNameField, Whiz, WhizDelayed,\n     WhizIter, WhizIterEmpty,\n )\n+from django.test import TestCase\n \n \n class Nested:\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..ca47281 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -80,6 +81,21 @@ class TranslationCheckTests(SimpleTestCase):\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n         )\n+    \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('fr', 'French'),\n+            ('es', 'Spanish'),\n+        ],\n+    )\n+    def test_base_language_present_no_error_for_sublanguage(self):\n+        \"\"\"Test that no error is raised for sublanguage if base language is available.\"\"\"\n+        sublanguage_tags = ['de-at', 'fr-CA', 'es-MX']\n+        for tag in sublanguage_tags:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n         with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n             self.assertEqual(check_language_settings_consistent(None), [\n                 Error(msg, id='translation.E004'),\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..461de86 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -175,8 +175,24 @@ class UtilsTests(SimpleTestCase):\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n-\n-    def test_number_formats_display_for_field(self):\n+    from django.core.serializers.json import DjangoJSONEncoder\n+    import json\n+\n+    def test_json_display_for_readonly_field(self):\n+        tests = [\n+            ({'foo': 'bar'}, '{\"foo\": \"bar\"}'),\n+            (None, self.empty_value),  # Testing None value\n+            ([], '[]'),               # Testing empty list\n+            ({}, '{}'),               # Testing empty dict\n+            ([1, 2, 3], '[1, 2, 3]'),  # Testing list of integers\n+            ({'a': 1, 'b': 2}, '{\"a\": 1, \"b\": 2}'),  # Testing dict with integers\n+        ]\n+        for value, expected_display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    expected_display_value,\n+                )\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12453": "",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..0ab0f10 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -128,6 +128,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_fixed_recursive_relationship_hint(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('members')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.members', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_ambiguous_relationship_model(self):\n \n         class Person(models.Model):\n",
  "django__django-12700": "",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..e452e5a 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1750,7 +1750,37 @@ class OperationTests(OperationTestBase):\n             operation.database_backwards(\"test_alinto\", editor, new_state, project_state)\n         self.assertIndexNotExists(\"test_alinto_pony\", [\"pink\", \"weight\"])\n         # And deconstruction\n-        definition = operation.deconstruct()\n+from django.db import connection, models\n+from django.db.migrations import operations, state, migrations\n+from django.test import TransactionTestCase\n+from django.test.utils import skipUnlessDBFeature, modify_settings\n+from .test_base import MigrationTestBase\n+\n+class TestMigrationOperations(MigrationTestBase, TransactionTestCase):\n+    available_apps = [\"migrations\"]\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         self.assertEqual(definition[0], \"AlterIndexTogether\")\n         self.assertEqual(definition[1], [])\n         self.assertEqual(definition[2], {'name': \"Pony\", 'index_together': {(\"pink\", \"weight\")}})\n",
  "django__django-12747": "",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..dd74246 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -94,6 +94,50 @@ class ASGITest(SimpleTestCase):\n             ),\n         )\n         await communicator.send_input({'type': 'http.request'})\n+\n+    async def test_static_file_serving(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/test-file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+\n+        file_path = TEST_STATIC_ROOT / 'test-file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"test-file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii'))\n+            },\n+        )\n+\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        await communicator.wait()\n+\n+    async def test_static_file_not_found(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/non-existent.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], b'')\n+        await communicator.wait()\n         response_start = await communicator.receive_output()\n         self.assertEqual(response_start['type'], 'http.response.start')\n         self.assertEqual(response_start['status'], 200)\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..7eb4d14 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,20 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Additional test cases based on the issue\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\\\t whitespace-in-value \\\\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore_in-value', False),\n+            ('__strip__underscore-value___', 'strip-underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+            # New test cases for the specific issue reported\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('--This_is_a_test--', 'this-is-a-test', False),\n+            ('___Another_Test___', 'another-test', False),\n+            ('---Yet_Another-One---', 'yet-another-one', False),\n+            ('___Leading and trailing___', 'leading-and-trailing', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..c2bfe39 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -45,7 +46,11 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lte=4)\n         self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n \n-    def test_union_distinct(self):\n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        combined_qs = qs1.union(qs2)\n+        self.assertQuerysetEqual(combined_qs.none(), [])\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n         self.assertEqual(len(list(qs1.union(qs2, all=True))), 20)\n@@ -313,4 +318,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..23fbff3 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2830,6 +2830,38 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n+from django.db import models\n+from django import forms\n+from django.test import TestCase\n+from .models import Character, StumpJoke\n+\n+class LimitChoicesToTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.threepwood = Character.objects.create(username='Guybrush Threepwood', last_action='2023-03-15')\n+        cls.marley = Character.objects.create(username='Elaine Marley', last_action='2023-03-15')\n+        cls.joke1 = StumpJoke.objects.create(most_recently_fooled=cls.threepwood)\n+        cls.joke2 = StumpJoke.objects.create(most_recently_fooled=cls.marley)\n+\n+    def test_limit_choices_to_no_duplicates_with_joins(self):\n+        self.joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        self.joke2.has_fooled_today.add(self.marley)\n+        \n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                on_delete=models.CASCADE,\n+                limit_choices_to=models.Q(jokes__most_recently_fooled=self.threepwood),\n+                related_name='character_details_1',\n+            )\n+\n+        form = forms.ModelForm(model=CharacterDetails, fields=['character1'])()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.threepwood],\n+            msg='Character queryset should not have duplicates even with Q object joins.'\n+        )\n+\n class FormFieldCallbackTests(SimpleTestCase):\n \n     def test_baseform_with_widgets_in_meta(self):\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..d1620ec 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -11,6 +11,29 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    def test_abstract_model_field_uniqueness_across_models(self):\n+        \"\"\"Field instances in different models should not be equal, even if they share an abstract base.\"\"\"\n+        class AbstractModel(models.Model):\n+            unique_field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class DerivedModelA(AbstractModel):\n+            pass\n+\n+        class DerivedModelB(AbstractModel):\n+            pass\n+\n+        field_model_a = DerivedModelA._meta.get_field('unique_field')\n+        field_model_b = DerivedModelB._meta.get_field('unique_field')\n+\n+        # Test fields from different models are not considered equal\n+        self.assertNotEqual(field_model_a, field_model_b)\n+\n+        # Test hash values are also different\n+        self.assertNotEqual(hash(field_model_a), hash(field_model_b))\n+\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +370,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..805245e 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,7 +45,27 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n-    def test_available_apps(self):\n+    def test_model_in_app_list(self):\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n+\n+        # Check that the 'model' is correctly added to app_list for admin_views.Article\n+        admin_views = apps[0]\n+        article_model = admin_views['models'][0]['model']\n+        self.assertIsNotNone(article_model, \"Model should not be None\")\n+        self.assertEqual(article_model.__name__, 'Article', \"Model should be Article class\")\n+\n+        # Check that the 'model' is correctly added to app_list for auth.User\n+        auth = apps[1]\n+        user_model = auth['models'][0]['model']\n+        self.assertIsNotNone(user_model, \"Model should not be None\")\n+        self.assertEqual(user_model.__name__, 'User', \"Model should be User class\")\n+\n+    def test_public_build_app_dict(self):\n+        # Test that `_build_app_dict` method can be accessed and used.\n+        app_dict_custom = self.site._build_app_dict(self.request)\n+        self.assertIsInstance(app_dict_custom, dict, \"App dict should be of dict type\")\n+        self.assertIn('auth', app_dict_custom, \"Auth app should be present in the app dict\")\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..8227797 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,3 +1,6 @@\n+\n+from .models import CustomEmailField\n+from django.contrib.auth.models import User\n from datetime import datetime, timedelta\n \n from django.conf import settings\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..933e619 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -5,6 +6,7 @@ import uuid\n from copy import deepcopy\n from decimal import Decimal\n from unittest import mock\n+from collections import namedtuple\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n@@ -875,6 +877,52 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'],\n             ordered=False\n         )\n+\n+    def test_range_lookup_namedtuple_various_cases(self):\n+        # Original test case\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+        \n+        # Additional test case 1: Empty named tuple\n+        EmptyRange = namedtuple('EmptyRange', [])\n+        with self.assertRaises(TypeError):\n+            Company.objects.filter(\n+                num_employees__range=EmptyRange(),\n+            )\n+\n+        # Additional test case 2: Named tuple with default values\n+        DefaultRange = namedtuple('DefaultRange', ['minimum', 'maximum'], defaults=[1, 100])\n+        qs_default = Company.objects.filter(\n+            num_employees__range=DefaultRange()  # uses default values\n+        )\n+        self.assertQuerysetEqual(\n+            qs_default,\n+            ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>',\n+             '<Company: 5060 Ltd>', '<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n+\n+        # Additional test case 3: Named tuple with varying types\n+        MixedTypeRange = namedtuple('MixedTypeRange', ['minimum', 'maximum'])\n+        qs_mixed = Company.objects.filter(\n+            num_employees__range=MixedTypeRange(minimum='51', maximum=100)\n+        )\n+        self.assertSequenceEqual(qs_mixed, [self.c5])\n+\n+        # Additional test case 4: Named tuple with large range\n+        LargeRange = namedtuple('LargeRange', ['minimum', 'maximum'])\n+        qs_large = Company.objects.filter(\n+            num_employees__range=LargeRange(minimum=1, maximum=10000)\n+        )\n+        self.assertQuerysetEqual(\n+            qs_large,\n+            ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>',\n+             '<Company: 5060 Ltd>', '<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n         self.assertQuerysetEqual(\n             Company.objects.filter(num_employees__range=(1, 100)),\n             [\n@@ -884,6 +932,52 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple_various_cases(self):\n+        # Original test case\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+        \n+        # Additional test case 1: Empty named tuple\n+        EmptyRange = namedtuple('EmptyRange', [])\n+        with self.assertRaises(TypeError):\n+            Company.objects.filter(\n+                num_employees__range=EmptyRange(),\n+            )\n+\n+        # Additional test case 2: Named tuple with default values\n+        DefaultRange = namedtuple('DefaultRange', ['minimum', 'maximum'], defaults=[1, 100])\n+        qs_default = Company.objects.filter(\n+            num_employees__range=DefaultRange()  # uses default values\n+        )\n+        self.assertQuerysetEqual(\n+            qs_default,\n+            ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>',\n+             '<Company: 5060 Ltd>', '<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n+\n+        # Additional test case 3: Named tuple with varying types\n+        MixedTypeRange = namedtuple('MixedTypeRange', ['minimum', 'maximum'])\n+        qs_mixed = Company.objects.filter(\n+            num_employees__range=MixedTypeRange(minimum='51', maximum=100)\n+        )\n+        self.assertSequenceEqual(qs_mixed, [self.c5])\n+\n+        # Additional test case 4: Named tuple with large range\n+        LargeRange = namedtuple('LargeRange', ['minimum', 'maximum'])\n+        qs_large = Company.objects.filter(\n+            num_employees__range=LargeRange(minimum=1, maximum=10000)\n+        )\n+        self.assertQuerysetEqual(\n+            qs_large,\n+            ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>',\n+             '<Company: 5060 Ltd>', '<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..be1137c 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,43 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n",
  "django__django-13660": "",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..a7f1729 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -962,9 +962,40 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n         response = self.client.get(self.change_url)\n         self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n \n+    def test_verbose_name_as_default_for_plural(self):\n+        # Inlines where only verbose_name is set\n+        class InlineWithOnlyVerboseName(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Single Inline Item'\n \n-@override_settings(ROOT_URLCONF='admin_inlines.urls')\n-class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [InlineWithOnlyVerboseName]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        \n+        # Assert that the plural form defaults correctly if not provided\n+        self.assertContains(response, '<h2>Single Inline Items</h2>')  # \"Items\" should be the inferred plural\n+\n+    def test_explicit_verbose_name_plural_takes_precedence(self):\n+        # Inline where both verbose_name and verbose_name_plural are set\n+        class InlineWithBothVerboseNames(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Single Inline Item'\n+            verbose_name_plural = 'Many Inline Items'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [InlineWithBothVerboseNames]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        \n+        # Assert that the explicitly set plural name takes precedence\n+        self.assertContains(response, '<h2>Many Inline Items</h2>')\n     factory = RequestFactory()\n \n     def test_verbose_name_plural_inline(self):\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..6b39d84 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -586,14 +586,29 @@ class TestQuerying(TestCase):\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n             self.objs[:3] + self.objs[5:],\n         )\n+        # Test case for ensuring isnull=True does not match JSON null on SQLite and Oracle.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=False),\n             [self.objs[3], self.objs[4]],\n         )\n+        # Test case for ensuring isnull=True does not match JSON null on SQLite and Oracle.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n         )\n+        # Test case for ensuring isnull=True does not match JSON null on SQLite and Oracle.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n \n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..2bca1c3 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -164,8 +164,21 @@ class DispatcherTests(SimpleTestCase):\n     def test_send_robust_fail(self):\n         def fails(val, **kwargs):\n             raise ValueError('this')\n+        import logging\n+        from django.dispatch import Signal\n+        from types import TracebackType\n+        \n         a_signal.connect(fails)\n-        result = a_signal.send_robust(sender=self, val=\"test\")\n+        with self.assertLogs('django.dispatch', level='ERROR') as cm:\n+            result = a_signal.send_robust(sender=self, val=\"test\")\n+        # Check log record\n+        self.assertEqual(len(cm.records), 1)\n+        log_record = cm.records[0]\n+        self.assertEqual(log_record.levelname, 'ERROR')\n+        self.assertIn(\"Error calling \", log_record.getMessage())\n+        self.assertIsNotNone(log_record.exc_info)\n+        _, exc_value, _ = log_record.exc_info\n+        self.assertIsInstance(exc_value, ValueError)\n         err = result[0][1]\n         self.assertIsInstance(err, ValueError)\n         self.assertEqual(err.args, ('this',))\n",
  "django__django-13925": "",
  "django__django-13933": "",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..24a9256 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,9 +1,20 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n \n class QTests(SimpleTestCase):\n-    def test_combine_and_empty(self):\n+    def test_non_pickleable_with_and(self):\n+        # Test cases for combining with & operator and non-pickleable objects like dict_keys\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+    def test_non_pickleable_with_or(self):\n+        # Test cases for combining with | operator and non-pickleable objects like dict_keys\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         q = Q(x=1)\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..c8f3978 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -25,6 +25,7 @@ from django.db.models.functions import (\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.db.models import Q, OuterRef, Exists\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n@@ -794,7 +795,25 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n-    def test_boolean_expression_combined(self):\n+    def test_commutativity_of_combined_expressions(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # List of test cases for commutativity of & and |.\n+        # Each tuple contains (expression1, expression2, expected_result)\n+        commutative_tests = [\n+            (Exists(is_ceo) & Q(), Q() & Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Exists(is_ceo) | Q(), Q() | Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Exists(is_poc) & Q(), Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_poc) | Q(), Q() | Exists(is_poc), [self.max]),\n+        ]\n+\n+        for expr1, expr2, expected in commutative_tests:\n+            with self.subTest(expr1=expr1, expr2=expr2):\n+                self.assertCountEqual(Employee.objects.filter(expr1), expected)\n+                self.assertCountEqual(Employee.objects.filter(expr2), expected)\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..1267b22 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1137,7 +1137,25 @@ class ResolverMatchTests(SimpleTestCase):\n         request = HttpRequest()\n         self.assertIsNone(request.resolver_match)\n \n-    def test_repr(self):\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = (\n+                    f\"functools.partial({views.empty_view!r}, \"\n+                    f\"template_name='{template_name}')\"\n+                )\n+                self.assertEqual(\n+                    repr(resolve(f'/{name}/')),\n+                    f\"ResolverMatch(func={func}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\",\n+                )\n         self.assertEqual(\n             repr(resolve('/no_kwargs/42/37/')),\n             \"ResolverMatch(func=urlpatterns_reverse.views.empty_view, \"\n@@ -1146,6 +1164,11 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+from django.test import SimpleTestCase, override_settings\n+from django.urls import resolve\n+import functools\n+from . import views\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..dd62672 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -67,6 +68,26 @@ class TestDefaultPK(SimpleTestCase):\n                 pass\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -83,6 +104,26 @@ class TestDefaultPK(SimpleTestCase):\n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..3e01d79 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2168,8 +2168,15 @@ class StartApp(AdminScriptTestCase):\n                     \"sure the name is a valid identifier.\".format(bad_name)\n                 )\n                 self.assertFalse(os.path.exists(testproject_dir))\n-\n-    def test_importable_name(self):\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Ensure that trailing slashes in the target app directory do not cause a CommandError.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app_with_slash')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'testapp', os.path.join('apps', 'app_with_slash', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n         \"\"\"\n         startapp validates that app name doesn't clash with existing Python\n         modules.\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..b9f04c6 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,7 @@\n import datetime\n import re\n from unittest import mock\n+from django.forms import forms  # Import the forms module if not already present\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n@@ -1020,6 +1021,20 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_label_for_readonly_password_hash_widget(self):\n+        \"\"\"\n+        Test that the label for ReadOnlyPasswordHashWidget is correctly rendered\n+        without a 'for' attribute, as it targets a non-labelable element.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        # Check that the widget's id_for_label returns None\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        # Check that the label_tag does not contain a 'for' attribute\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..4dd74f0 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,36 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_serialize_complex_bases(self):\n+        \"\"\"\n+        Test that makemigrations properly serializes models with complex inheritance\n+        while including all necessary imports.\n+        \"\"\"\n+        class MyMixin:\n+            pass\n+        \n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        # Simulate the migration serialization process\n+        writer = MigrationWriter(None)  # Use a mock or a real instance if needed\n+        serialized_string = writer.serialize(MyModel)\n+\n+        # Check for 'models' import in the serialization output\n+        self.assertIn(\"from django.db import models\", serialized_string)\n+        self.assertIn(\"('models.Model'\", serialized_string)\n+\n+        # Additionally check that the MyMixin and MyField are correctly serialized\n+        self.assertIn(\"app.models.MyMixin\", serialized_string)\n+        self.assertIn(\"app.models.MyField\", serialized_string)\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n",
  "django__django-14608": "",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..c4af9ed 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -9,6 +9,8 @@ from .models import (\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n     Relationship, SymmetricalFriendship,\n )\n+from django.test import TestCase\n+from .models import Event, Invitation, Person, PersonChild\n \n \n class M2mThroughTests(TestCase):\n@@ -20,7 +22,13 @@ class M2mThroughTests(TestCase):\n         cls.rock = Group.objects.create(name='Rock')\n         cls.roll = Group.objects.create(name='Roll')\n \n-    def test_retrieve_intermediate_items(self):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ('event', 'invitee'))\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ('event', 'invitee'))\n+        # Test to ensure that the hash is calculated correctly without error\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n         Membership.objects.create(person=self.jim, group=self.rock)\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..c57ce38 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5093,7 +5093,39 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n \n-    def test_readonly_foreignkey_links(self):\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Test that ForeignKey fields in the readonly_fields display correct URLs on custom Admin Sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+\n+        response = self.client.get(\n+            reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        self.assertContains(\n+            response,\n+            reverse(f'{admin_site}:admin_views_language_change', args=(language.pk,))\n+        )\n+\n+        # Verify the user link for the ForeignKey\n+        user_url = reverse(f'{admin_site}:auth_user_change', args=(self.superuser.pk,))\n+        self.assertContains(response, user_url)\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        self._test_readonly_foreignkey_links('admin7')\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n         registered in admin.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..a29d0b8 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,22 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        # Test that a ModelChoiceIteratorValue object can be hashed\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+        # Test that ModelChoiceIteratorValue objects can be used in a set\n+        unique_values = {value_1, value_2}\n+        self.assertIn(value_1, unique_values)\n+        self.assertIn(value_2, unique_values)\n+\n+        # Test that ModelChoiceIteratorValue objects can be used as dict keys\n+        value_dict = {value_1: \"first choice\", value_2: \"second choice\"}\n+        self.assertEqual(value_dict[value_1], \"first choice\")\n+        self.assertEqual(value_dict[value_2], \"second choice\")\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..74932b7 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -792,8 +792,68 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Pony.objects.count(), 2)\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n+from django.db import connection\n+from django.db.migrations.state import ProjectState\n+from django.db import models\n+from django.db import migrations\n+from django.test import TestCase\n+\n+class RenameModelWithDBTableTests(TestCase):\n+    def test_rename_model_with_foreign_key_does_nothing_postgres(self):\n+        if connection.vendor != 'postgresql':\n+            self.skipTest(\"This test is specific to the PostgreSQL backend.\")\n+\n+        app_label = \"test_rmwdbtn_postgres\"\n+        project_state = self.apply_operations(\n+            app_label, \n+            ProjectState(), \n+            operations=[\n+                migrations.CreateModel(\n+                    \"Author\", \n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                    options={\"db_table\": \"author\"},\n+                ),\n+                migrations.CreateModel(\n+                    \"Book\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"author\", models.ForeignKey('%s.Author' % app_label, models.CASCADE)),\n+                    ],\n+                    options={\"db_table\": \"book\"},\n+                ),\n+            ],\n+        )\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel(\"Author\", \"Writer\")\n+        operation.state_forwards(app_label, new_state)\n \n-    def test_rename_m2m_target_model(self):\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..d999929 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,7 +154,25 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n-    def test_form_as_table_data(self):\n+    def test_multivaluedfield_label_without_index(self):\n+        class CustomMultiWidget(MultiWidget):\n+            def __init__(self, attrs=None):\n+                widgets = [CharField().widget for _ in range(2)]\n+                super().__init__(widgets, attrs)\n+\n+        class TestForm(Form):\n+            field = MultiValueField(fields=(CharField(), CharField()), widget=CustomMultiWidget())\n+\n+        form = TestForm()\n+        rendered_html = form.as_table()\n+        self.assertHTMLEqual(\n+            rendered_html,\n+            \"\"\"\n+            <tr><th><label>Field:</label></th>\n+            <td><input type=\"text\" name=\"field_0\" id=\"id_field_0\" required>\n+            <input type=\"text\" name=\"field_1\" id=\"id_field_1\" required></td></tr>\n+            \"\"\"\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..9469018 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -107,7 +107,19 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n                 with self.assertRaisesMessage(ValidationError, msg):\n                     f.clean(value)\n \n-    def test_urlfield_clean_required(self):\n+    def test_urlfield_clean_valueerror_issue(self):\n+        f = URLField()\n+        tests = [\n+            '////]@N.AN',  # Reported case, previously raised ValueError\n+            '#@A.bO',     # Similar malformed URLs\n+            '#@foo.com',  # Invalid URL format with an invalid host\n+            'http://[:::]/', # Invalid IPv6 case\n+        ]\n+        msg = \"'Enter a valid URL.'\"\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(value)\n         f = URLField()\n         msg = \"'This field is required.'\"\n         with self.assertRaisesMessage(ValidationError, msg):\n",
  "django__django-15213": "",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..476a3be 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -143,7 +144,31 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_extra_tags_preservation(self):\n+        \"\"\"\n+        Test ensuring that the extra_tags attribute is preserved correctly after encoding and decoding.\n+        \"\"\"\n+        # Encoder and decoder instances\n+        encoder = MessageEncoder()\n+        decoder = MessageDecoder()\n+\n+        # Test with empty string extra_tags\n+        original_message1 = Message(constants.DEBUG, \"Test message with empty tags\", extra_tags=\"\")\n+        encoded_message1 = encoder.encode(original_message1)\n+        decoded_message1 = decoder.decode(encoded_message1)\n+        self.assertEqual(decoded_message1.extra_tags, \"\")\n+        \n+        # Test with None extra_tags\n+        original_message2 = Message(constants.INFO, \"Test message with None tags\", extra_tags=None)\n+        encoded_message2 = encoder.encode(original_message2)\n+        decoded_message2 = decoder.decode(encoded_message2)\n+        self.assertIsNone(decoded_message2.extra_tags)\n+\n+        # Test with non-empty string extra_tags\n+        original_message3 = Message(constants.WARNING, \"Test message with some tags\", extra_tags=\"some tags\")\n+        encoded_message3 = encoder.encode(original_message3)\n+        decoded_message3 = decoder.decode(encoded_message3)\n+        self.assertEqual(decoded_message3.extra_tags, \"some tags\")\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..4dfd81f 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -2,6 +2,7 @@ from pathlib import Path\n from unittest import mock\n \n from django.template import autoreload\n+from pathlib import Path\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n \n@@ -28,13 +29,45 @@ EXTRA_TEMPLATES_DIR = ROOT / \"templates_extra\"\n         },\n     }])\n class TemplateReloadTests(SimpleTestCase):\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [str(ROOT)],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n     @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_restart_with_base_dir_in_templates(self, mock_reset):\n+        # Simulate a file change in a non-template file\n+        non_template_file_path = Path(ROOT) / 'some_non_template_file.py'\n+        self.assertIsNone(autoreload.template_changed(None, non_template_file_path))\n+        mock_reset.assert_not_called()\n+        \n+        # Simulate a file change in a template file\n+        template_file_path = Path(ROOT) / 'templates' / 'some_template.html'\n+        self.assertTrue(autoreload.template_changed(None, template_file_path))\n+        mock_reset.assert_called_once()\n     def test_template_changed(self, mock_reset):\n         template_path = Path(__file__).parent / 'templates' / 'index.html'\n         self.assertTrue(autoreload.template_changed(None, template_path))\n         mock_reset.assert_called_once()\n \n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [str(ROOT)],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n     @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_restart_with_base_dir_in_templates(self, mock_reset):\n+        # Simulate a file change in a non-template file\n+        non_template_file_path = Path(ROOT) / 'some_non_template_file.py'\n+        self.assertIsNone(autoreload.template_changed(None, non_template_file_path))\n+        mock_reset.assert_not_called()\n+        \n+        # Simulate a file change in a template file\n+        template_file_path = Path(ROOT) / 'templates' / 'some_template.html'\n+        self.assertTrue(autoreload.template_changed(None, template_file_path))\n+        mock_reset.assert_called_once()\n     def test_non_template_changed(self, mock_reset):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n         mock_reset.assert_not_called()\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..6ffa796 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,13 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test handling of empty string for If-Modified-Since header.\n+        The function should handle this case without raising an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..1fc8b62 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -7,6 +8,7 @@ from admin_scripts.tests import AdminScriptTestCase\n from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management import BaseCommand, CommandError, find_commands\n from django.core.management.utils import (\n     find_command,\n@@ -411,6 +413,24 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+    def test_custom_formatter_command_help_output(self):\n+        \"\"\"\n+        Test custom formatter class is used, ensuring proper help text formatting\n+        including line breaks and indentation.\n+        \"\"\"\n+        class CustomCommand(BaseCommand):\n+            help = ('\\n'\n+                    'Import a contract from tzkt.\\n'\n+                    'Example usage:\\n'\n+                    \"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+                    )\n+        \n+        parser = CustomCommand().create_parser(\"prog_name\", \"tzkt_import\")\n+        help_output = parser.format_help()\n+\n+        expected_help_text_part = \"\\nExample usage:\\n    ./manage.py tzkt_import\"\n+        self.assertIn(expected_help_text_part, help_output)\n+\n     def test_outputwrapper_flush(self):\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..8ab7888 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,11 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -217,7 +220,38 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_with_standard_encoder(self):\n+        data = {\"key\": \"value\"}\n+        expected_output = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(json_script(data), expected_output)\n+\n+    def test_json_script_with_different_data_types(self):\n+        data = {\"integer\": 1, \"float\": 1.0, \"string\": \"text\", \"boolean\": True, \"none\": None, \"list\": [1, 2, 3]}\n+        expected_output = (\n+            '<script type=\"application/json\">'\n+            '{\"integer\": 1, \"float\": 1.0, \"string\": \"text\", \"boolean\": true, '\n+            '\"none\": null, \"list\": [1, 2, 3]}</script>'\n+        )\n+        self.assertHTMLEqual(json_script(data), expected_output)\n+\n+    def test_json_script_with_element_id_and_custom_encoder(self):\n+        class SimpleEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps(o).upper()\n+\n+        data = {\"key\": \"value\"}\n+        expected_output = '<script id=\"test_id\" type=\"application/json\">{\"KEY\": \"VALUE\"}</script>'\n+        self.assertHTMLEqual(json_script(data, element_id=\"test_id\", encoder=SimpleEncoder), expected_output)\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..36d2c3d 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -130,6 +130,22 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             },\n         }\n \n+    def test_no_duplicates_in_single_library(self):\n+        # This test checks if a single library in the TEMPLATES setting \n+        # does not report itself as having duplicate template tags.\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags\", \n+                    \"someapp.templatetags.unique_tags\"\n+                )\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                []\n+            )\n+\n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -158,10 +174,64 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 [self.error_same_tags],\n             )\n \n+    def test_no_duplicates_in_single_library(self):\n+        # This test checks if a single library in the TEMPLATES setting \n+        # does not report itself as having duplicate template tags.\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags\", \n+                    \"someapp.templatetags.unique_tags\"\n+                )\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                []\n+            )\n+\n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n     )\n-    def test_template_tags_with_same_library_name_and_module_name(self):\n+    def test_no_duplicates_in_single_library(self):\n+        # This test checks if a single library in the TEMPLATES setting \n+        # does not report itself as having duplicate template tags.\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags\", \n+                    \"someapp.templatetags.unique_tags\"\n+                )\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                []\n+            )\n+\n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\",\n+        ]\n+    )\n+    def test_issue_scenario_with_same_name_in_libraries(self):\n+        # This test case attempts to reproduce the scenario described in the issue,\n+        # where libraries with the same name in different modules might falsely trigger the error,\n+        # even though they're correctly specified in TEMPLATES.\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"someapp.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"my_tags\", \"someotherapp.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                []\n+            )\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n@@ -199,6 +269,22 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ):\n             self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n \n+    def test_no_duplicates_in_single_library(self):\n+        # This test checks if a single library in the TEMPLATES setting \n+        # does not report itself as having duplicate template tags.\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags\", \n+                    \"someapp.templatetags.unique_tags\"\n+                )\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                []\n+            )\n+\n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -206,4 +292,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..eb1b406 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,7 +395,32 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n-    def test_eq(self):\n+from django.test import TestCase\n+from .models import CustomModel, ProxyCustomModel, AnotherModel\n+\n+# Reproducing the original issue and verifying the fix\n+class ProxyModelQuerySetTests(TestCase):\n+    def setUp(self):\n+        # Setup initial data\n+        self.custom = ProxyCustomModel.objects.create(name=\"Test Custom\")\n+        self.another = AnotherModel.objects.create(custom=self.custom)\n+\n+    def test_select_related_only_proxy_model(self):\n+        # Check that select_related with only() does not raise an error\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        self.assertEqual(result.custom.name, \"Test Custom\")\n+    \n+    def test_select_related_no_only_proxy_model(self):\n+        # Check behavior without using only()\n+        qs = AnotherModel.objects.select_related(\"custom\")\n+        result = qs.get()\n+        self.assertEqual(result.custom.name, \"Test Custom\")\n+    \n+    def test_select_related_only_non_existent_field(self):\n+        # Attempt to use only() with a field that doesn't exist should raise an error\n+        with self.assertRaises(FieldError):\n+            AnotherModel.objects.select_related(\"custom\").only(\"custom__non_existent_field\").get()\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..a536116 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,6 +152,10 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +187,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..7a15819 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1902,11 +1902,29 @@ class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n \n+from django.forms.formsets import formset_factory, BaseFormSet\n+from django.forms import ChoiceField, Form\n+from django.test import SimpleTestCase\n+from django.utils.lru_cache import lru_cache\n+from django.forms.renderers import get_default_renderer\n+from django.core.warnings import RemovedInDjango50Warning\n+\n+class Choice(Form):\n+    choice = ChoiceField()\n+\n+class TestManagementFormWarning(SimpleTestCase):\n+    def test_no_management_form_warning(self):\n+        \"\"\"\n+        Management forms should not trigger the deprecation warning.\n+        \"\"\"\n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n-        ), self.assertRaisesMessage(\n-            RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            try:\n+                with self.assertRaisesMessage(RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG):\n+                    str(formset)\n+            except AssertionError:\n+                # The warning should not occur; thus, an assertion failure is expected to test the fix.\n+                pass\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..850b7b7 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form_true(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        self.assertTrue(hasattr(formset.empty_form, \"empty_permitted\"))  # Check empty_form has this attribute\n+        self.assertTrue(formset.empty_form.empty_permitted)  # assert empty_permitted is ignored\n+\n+    def test_empty_permitted_ignored_empty_form_false(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertTrue(hasattr(formset.empty_form, \"empty_permitted\"))  # Check empty_form has this attribute\n+        self.assertTrue(formset.empty_form.empty_permitted)  # assert empty_permitted is ignored\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..7409a87 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,15 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_null_and_empty_string(self):\n+        # Test for empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        # Test for None\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+        # Test for zero as string\n+        self.assertEqual(nformat(\"0\", \".\"), \"0\")\n+        # Test for negative zero as string\n+        self.assertEqual(nformat(\"-0\", \".\"), \"-0\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..12fd914 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -26,6 +27,8 @@ from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n \n+from django.urls import reverse\n+import urllib.parse\n from .models.custom_user import (\n     CustomUser,\n     CustomUserWithoutIsActiveField,\n@@ -892,6 +895,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16255": "",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..37edcaa 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n@@ -6,6 +7,8 @@ import os\n import pickle\n import re\n import shutil\n+from unittest import mock\n+from django.core.cache import caches\n import sys\n import tempfile\n import threading\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..8dfca60 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -7,6 +8,8 @@ from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n+from django.contrib.auth import get_user_model, get_permission_codename\n+from .tests import get_perm\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..8bb7c83 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -216,6 +216,20 @@ class OptimizerTests(SimpleTestCase):\n             migrations.AlterIndexTogether(\"Foo\", [[\"a\", \"b\"]])\n         )\n \n+    def _test_alter_alter(self, alter_foo, alter_bar):\n+        \"\"\"\n+        Two AlterField operations should collapse into the final one.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                alter_foo,\n+                alter_bar,\n+            ],\n+            [\n+                alter_bar,\n+            ],\n+        )\n+\n     def test_create_alter_owrt_delete_model(self):\n         self._test_create_alter_foo_delete_model(\n             migrations.AlterOrderWithRespectTo(\"Foo\", \"a\")\n@@ -235,6 +249,19 @@ class OptimizerTests(SimpleTestCase):\n                 alter_bar,\n             ],\n         )\n+    def test_alter_alter_field(self):\n+        # Test that multiple AlterField operations collapse into the final one.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=256, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+            [\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+        )\n \n     def test_alter_alter_table_model(self):\n         self._test_alter_alter_model(\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..2e1ee9b 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -60,7 +61,12 @@ class FunctionTests(SimpleTestCase):\n     def test_list(self):\n         self.assertEqual(join([0, 1, 2], \"glue\"), \"0glue1glue2\")\n \n-    def test_autoescape(self):\n+    @setup({\"join09\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join09(self):\n+        output = self.engine.render_to_string(\n+            \"join09\", {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"var\": \"<br/>\"}\n+        )\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n         self.assertEqual(\n             join([\"<a>\", \"<img>\", \"</a>\"], \"<br>\"),\n             \"&lt;a&gt;&lt;br&gt;&lt;img&gt;&lt;br&gt;&lt;/a&gt;\",\n@@ -78,4 +84,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..b0b0c61 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -816,4 +816,45 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n+\n+    @skipUnlessDBFeature(\n+        \"supports_returning_id_from_bulk_create\"\n+    )\n+    def test_bulk_create_return_ids_with_conflict_updates(self):\n+        # Create initial data\n+        initial_objects = UpsertConflict.objects.bulk_create([\n+            UpsertConflict(number=1, rank=1, name=\"Initial1\"),\n+            UpsertConflict(number=2, rank=2, name=\"Initial2\"),\n+        ])\n+        \n+        # Ensure IDs are set initially\n+        for obj in initial_objects:\n+            self.assertIsNotNone(obj.pk)\n+        \n+        # Create conflicting objects for update\n+        update_objects = [\n+            UpsertConflict(number=1, rank=10, name=\"Updated1\"),\n+            UpsertConflict(number=2, rank=20, name=\"Updated2\")\n+        ]\n+        \n+        # Perform bulk update with conflict resolution\n+        result_objects = UpsertConflict.objects.bulk_create(\n+            update_objects, \n+            update_conflicts=True,\n+            update_fields=[\"rank\", \"name\"],\n+            unique_fields=[\"number\"]\n+        )\n+        \n+        # Verify that IDs are returned after conflict update\n+        for obj in result_objects:\n+            self.assertIsNotNone(obj.pk)\n+\n+        # Verify database reflects the updates\n+        self.assertCountEqual(\n+            UpsertConflict.objects.values(\"number\", \"rank\", \"name\"),\n+            [\n+                {\"number\": 1, \"rank\": 10, \"name\": \"Updated1\"},\n+                {\"number\": 2, \"rank\": 20, \"name\": \"Updated2\"},\n+            ],\n+        )\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..0f95e44 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -243,7 +243,27 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(value.null, new_value.null)\n         self.assertEqual(value.unique, new_value.unique)\n \n-    def test_serialize_numbers(self):\n+    def test_serialize_nested_class_method_as_default(self):\n+        class TestModel(models.Model):\n+            class NestedChoices(models.TextChoices):\n+                A = \"A\", \"Option A\"\n+                B = \"B\", \"Option B\"\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.A]\n+\n+            field = ArrayField(\n+                models.CharField(choices=NestedChoices.choices, max_length=10),\n+                default=NestedChoices.default,\n+            )\n+\n+        field = TestModel._meta.get_field(\"field\")\n+        field_string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            field_string,\n+            \"migrations.test_writer.TestModel.NestedChoices.default\"\n+        )\n         self.assertSerializedEqual(1)\n         self.assertSerializedEqual(1.2)\n         self.assertTrue(math.isinf(self.serialize_round_trip(float(\"inf\"))))\n@@ -1032,4 +1052,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..1c4cdf6 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1120,6 +1120,28 @@ def test_range_slider(orientation):\n     assert_allclose(slider.val, [0.1, 0.34])\n \n \n+@pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\n+def test_range_slider_initial_value_bug(orientation):\n+    # This test specifically addresses the bug where initial values could not be set\n+    fig, ax = plt.subplots()\n+\n+    if orientation == \"vertical\":\n+        idx = [1, 0, 3, 2]\n+    else:\n+        idx = [0, 1, 2, 3]\n+\n+    # Attempt to initialize with specific values that previously caused an error\n+    try:\n+        slider = widgets.RangeSlider(\n+            ax=ax, label=\"\", valmin=0.0, valmax=1.0, orientation=orientation,\n+            valinit=[0.0, 0.0]\n+        )\n+        # Check if the values have been set properly\n+        assert_allclose(slider.val, [0.0, 0.0])\n+    except Exception as e:\n+        pytest.fail(f\"Initialization with valinit=[0.0, 0.0] raised an exception: {e}\")\n+    \n+\n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n     \"\"\"\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..82e0e48 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -488,13 +488,17 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n             validate_fontstretch(stretch)\n     else:\n         assert validate_fontstretch(stretch) == parsed_stretch\n-\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend\n+from matplotlib.testing.decorators import cleanup\n \n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n-\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend\n+from matplotlib.testing.decorators import cleanup\n \n def test_rcparams_reset_after_fail():\n     # There was previously a bug that meant that if rc_context failed and\n@@ -506,9 +510,19 @@ def test_rcparams_reset_after_fail():\n             with mpl.rc_context(rc={'text.usetex': True, 'test.blah': True}):\n                 pass\n         assert mpl.rcParams['text.usetex'] is False\n-\n-\n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend\n+from matplotlib.testing.decorators import cleanup\n+\n+@cleanup\n+def test_get_backend_does_not_clear_figures_rc_context():\n+    # Ensure that get_backend() does not clear figures created inside an rc_context\n+    with plt.rc_context():\n+        fig1 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    assert before == after, f'\\nFigures before: {before}\\nFigures after: {after}'\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..81e1a78 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -20,8 +20,22 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n-\n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_3d_axes(fig_test, fig_ref):\n+    # Create a 3D subplot and set it invisible\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+\n+    # Reference figure with no 3D subplot\n+    fig_ref.add_subplot()\n+\n+def test_invisible_3d_axes_events():\n+    fig, ax = plt.subplots(subplot_kw={'projection': '3d'})\n+    ax.scatter(1, 1, 1)\n+    assert fig.canvas.inaxes((200, 200)) is not None\n+    ax.set_visible(False)\n+    assert fig.canvas.inaxes((200, 200)) is None\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..0f68ab6 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,10 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+import numpy as np\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n@@ -791,8 +795,13 @@ def test_alpha_handles():\n     assert lh.get_facecolor()[:-1] == hh[1].get_facecolor()[:-1]\n     assert lh.get_edgecolor()[:-1] == hh[1].get_edgecolor()[:-1]\n \n-\n-@needs_usetex\n+# Verify that legend is correctly set as draggable or not at creation time.\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable_at_creation(draggable):\n+    fig, ax = plt.subplots()\n+    line, = ax.plot(np.arange(10), label='Test Line')\n+    legend = ax.legend(draggable=draggable)\n+    assert legend.get_draggable() == draggable\n def test_usetex_no_warn(caplog):\n     mpl.rcParams['font.family'] = 'serif'\n     mpl.rcParams['font.serif'] = 'Computer Modern'\n",
  "matplotlib__matplotlib-23964": "",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..43886bf 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -649,10 +649,42 @@ def test_compressed1():\n \n     fig.colorbar(pc, ax=axs)\n     fig.draw_without_rendering()\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n+@pytest.mark.parametrize('constrained_layout, warning_expected', [\n+    (True, True),\n+    (False, False),\n+])\n+def test_constrained_layout_with_adjust_warning(constrained_layout, warning_expected):\n+    a = np.linspace(0, 2*np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained_layout)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+\n+    if warning_expected:\n+        with pytest.warns(UserWarning, match=\"incompatible with subplots_adjust\"):\n+            plt.subplots_adjust(wspace=0)\n+    else:\n+        with pytest.warns(None) as record:\n+            plt.subplots_adjust(wspace=0)\n+        assert len(record) == 0\n+\n+@pytest.mark.parametrize('arg, state', [\n+    (True, True),\n+    (False, False),\n+    ({}, True),\n+    ({'rect': None}, True)\n+])\n+def test_set_constrained_layout(arg, state):\n+    fig, ax = plt.subplots(constrained_layout=arg)\n+    assert fig.get_constrained_layout() is state\n     pos = axs[0, 0].get_position()\n     np.testing.assert_allclose(pos.x0, 0.06195, atol=1e-3)\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..80478d9 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -30,6 +30,30 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n+import pytest\n+import numpy as np\n+from matplotlib import cm as mpl_cm\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_deprecation(dtype):\n+    # Test colormap with different types to ensure no deprecation warnings\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        assert_array_equal(cm(dtype(0)), cm(0))\n+    # Check no warnings are raised\n+    assert len(record) == 0\n+\n+def test_specific_deprecation_issue():\n+    # Directly targeting the specific reported issue\n+    cm = mpl.colormaps[\"viridis\"]\n+    data = np.array([257, 256, 258], dtype=np.int32)  # Example with larger data\n+    with pytest.warns(None) as record:\n+        cm(data)\n+    # Check no deprecation warnings are raised\n+    assert len(record) == 0\n+\n def test_resampled():\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..77b2090 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -16,8 +17,32 @@ import matplotlib.transforms as mtransforms\n import matplotlib.figure as mfigure\n from mpl_toolkits.axes_grid1 import parasite_axes\n \n+import pickletools\n+\n+def test_pickle_draggable_legend():\n+    # Test pickling a figure with a draggable legend to ensure fix is applied.\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n \n-def test_simple():\n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Serialize the figure using pickle\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure that the specific error is not present in the pickle stream and \n+    # FigureCanvasQTAgg is not present as per the issue's claim.\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Attempt to load the pickled figure to ensure it can be deserialized without errors\n+    loaded = pickle.loads(pkl)\n+    # Drawing the canvas should not raise exceptions and should render the same figure\n+    loaded.canvas.draw()\n+    plt.show()\n     fig = plt.figure()\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n",
  "matplotlib__matplotlib-25332": "",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..595bd87 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -445,8 +445,32 @@ def test_paddedbox():\n     pb = PaddedBox(ta, pad=10, patch_attrs={'facecolor': 'b'})\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+import mplcursors\n \n+def test_mplcursor_attribute_error():\n+    # This test is designed to reproduce the issue with mplcursor and matplotlib\n+    fig, ax = plt.subplots()\n+    x = np.arange(1, 11)\n+    y1 = x\n+    ax.scatter(x, y1)\n+    \n+    # Using mplcursors to create a cursor over the scatter plot\n+    cursor = mplcursors.cursor()\n+\n+    # Simulate clicking on data points\n+    # We don't simulate GUI clicks here but ensure the function does not raise an exception\n+    try:\n+        plt.show(block=False)\n+        # Normally, clicking would trigger the event; we simulate the environment\n+        assert cursor is not None  # Ensure the cursor is created\n+    except AttributeError as e:\n+        pytest.fail(f\"AttributeError was raised: {e}\")\n+\n+    plt.close(fig)\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..914bc0c 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,9 +9,62 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+import pandas as pd\n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n \n+    def test_missing_data_handling(self):\n+        # Create data with missing values\n+        data = pd.DataFrame({\n+            \"x\": [1, 2, 3, None, 4, 5],\n+            \"y\": [1, 2, 3, 4, 5, 6],\n+            \"group\": [1, 1, 1, 1, 1, 1]\n+        })\n+        \n+        groupby = GroupBy([\"group\"])\n+        \n+        # Drop missing data and fit with PolyFit\n+        res_dropped = PolyFit()(data.dropna(), groupby, \"x\", {})\n+        \n+        # Fill missing data with interpolation and fit with PolyFit\n+        data_filled = data.interpolate()\n+        res_interpolated = PolyFit()(data_filled, groupby, \"x\", {})\n+        \n+        # Verify that interpolated results are consistent with direct calculation\n+        assert_frame_equal(res_dropped, res_interpolated)\n+\n+    def test_all_missing(self):\n+        # Create data where all y values are missing\n+        data = pd.DataFrame({\n+            \"x\": [1, 2, 3, 4, 5],\n+            \"y\": [None, None, None, None, None],\n+            \"group\": [1, 1, 1, 1, 1]\n+        })\n+        \n+        groupby = GroupBy([\"group\"])\n+        \n+        # Fitting should result in empty polyfit since there's no valid data\n+        res = PolyFit()(data, groupby, \"x\", {})\n+        \n+        assert res.empty\n+\n+    def test_missing_x_values(self):\n+        # Create data where some x values are missing\n+        data = pd.DataFrame({\n+            \"x\": [1, None, 3, 4, 5],\n+            \"y\": [1, 2, 3, 4, 5],\n+            \"group\": [1, 1, 1, 1, 1]\n+        })\n+        \n+        groupby = GroupBy([\"group\"])\n+        \n+        # Drop missing data and fit with PolyFit\n+        res_dropped = PolyFit()(data.dropna(), groupby, \"x\", {})\n+        \n+        # Check that NaNs in 'x' don't break the PolyFit\n+        assert not res_dropped.empty\n+\n     @pytest.fixture\n     def df(self, rng):\n \n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..c75977b 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -96,12 +96,48 @@ class TestContinuous:\n         s = Continuous()._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_color_mapping_with_boolean_data(self):\n+        # Import necessary libraries\n+        import pandas as pd\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+        from numpy.testing import assert_array_equal\n+        from seaborn import color_palette\n+\n+        # Test setup\n+        x = pd.Series([True, False])\n+\n+        # Create a color map and setup scale using Continuous with Color\n+        cmap = color_palette(\"viridis\", as_cmap=True)\n+        s = Continuous()._setup(x, Color())\n+\n+        # Verify that it properly maps True to 1, and False to 0\n+        assert_array_equal(s(x), cmap([1, 0])[:, :3])\n+\n     def test_color_named_values(self, x):\n \n         cmap = color_palette(\"viridis\", as_cmap=True)\n         s = Continuous(\"viridis\")._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_color_mapping_with_boolean_data(self):\n+        # Import necessary libraries\n+        import pandas as pd\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+        from numpy.testing import assert_array_equal\n+        from seaborn import color_palette\n+\n+        # Test setup\n+        x = pd.Series([True, False])\n+\n+        # Create a color map and setup scale using Continuous with Color\n+        cmap = color_palette(\"viridis\", as_cmap=True)\n+        s = Continuous()._setup(x, Color())\n+\n+        # Verify that it properly maps True to 1, and False to 0\n+        assert_array_equal(s(x), cmap([1, 0])[:, :3])\n+\n     def test_color_tuple_values(self, x):\n \n         cmap = color_palette(\"blend:b,g\", as_cmap=True)\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..9516f89 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,10 @@\n+\n import json\n import os\n import textwrap\n \n import pytest\n+import os\n \n import flask\n \n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..4f7defb 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1662,5 +1662,38 @@ def test_vendor_aliases():\n     with pytest.raises(ImportError):\n         from requests.packages import webbrowser\n \n+import pytest\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import RequestException, ConnectionError, ReadTimeout\n+from requests.packages.urllib3.exceptions import DecodeError, TimeoutError as Urllib3TimeoutError\n+\n+def httpbin(endpoint):\n+    return f\"http://httpbin.org/{endpoint}\"\n+\n+# Test to verify DecodeError is wrapped properly\n+def test_urllib3_decode_error_handling():\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def send(self, *args, **kwargs):\n+            raise DecodeError(\"Mock Decode Error\")\n+\n+    session = requests.Session()\n+    session.mount(\"http://\", MockHTTPAdapter())\n+\n+    with pytest.raises(RequestException):\n+        session.get(httpbin(\"get\"))\n+\n+# Test to verify TimeoutError is wrapped properly\n+def test_urllib3_timeout_error_handling():\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def send(self, *args, **kwargs):\n+            raise Urllib3TimeoutError(\"Mock Timeout Error\")\n+\n+    session = requests.Session()\n+    session.mount(\"http://\", MockHTTPAdapter())\n+\n+    with pytest.raises(ReadTimeout):\n+        session.get(httpbin(\"get\"))\n+\n if __name__ == '__main__':\n-    unittest.main()\n+    pytest.main()\n",
  "psf__requests-3362": "",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..aae0fd6 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,6 +743,52 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    def test_multiple_hooks_execution(self):\n+        \"\"\"Test that multiple hooks are executed in order when a list of hooks is passed.\"\"\"\n+        def foo_hook(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers']['X-Foo'] = 'foo'\n+            return args\n+\n+        def bar_hook(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers']['X-Bar'] = 'bar'\n+            return args\n+\n+        hooks = {'args': [foo_hook, bar_hook]}\n+        r = requests.models.Request(hooks=hooks)\n+\n+        # Simulate a hook trigger\n+        for hook in r.hooks['args']:\n+            hook_args = hook({})\n+            assert 'X-Foo' in hook_args['headers'], \"Foo hook not executed\"\n+            assert 'X-Bar' in hook_args['headers'], \"Bar hook not executed\"\n+\n+        assert hook_args['headers']['X-Foo'] == 'foo'\n+        assert hook_args['headers']['X-Bar'] == 'bar'\n+\n+    def test_hooks_registration_on_instantiate(self):\n+        \"\"\"Test that hooks are correctly registered when passed during instantiation.\"\"\"\n+        def foo_hook(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers']['X-Foo'] = 'foo'\n+            return args\n+\n+        def bar_hook(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers']['X-Bar'] = 'bar'\n+            return args\n+\n+        hooks = {'args': [foo_hook, bar_hook]}\n+        r = requests.models.Request(hooks=hooks)\n+\n+        assert len(r.hooks['args']) == 2\n+        assert r.hooks['args'][0] is foo_hook\n+        assert r.hooks['args'][1] is bar_hook\n \n     def test_session_persistent_cookies(self):\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..f4f6358 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -383,7 +383,7 @@ repr_da = xr.DataArray(\n )\n \n \n-@pytest.mark.parametrize(\"dim\", [\"x\", \"y\", \"z\", \"month\"])\n+@pytest.mark.parametrize(\"dim\", [\"x\", \"y\", \"z\", \"month\", \"letters\"])\n @pytest.mark.parametrize(\"obj\", [repr_da, repr_da.to_dataset(name=\"a\")])\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n@@ -400,6 +400,21 @@ def test_groupby_repr(obj, dim):\n         expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n \n+@pytest.mark.parametrize(\"dim\", [\"letters\"])\n+@pytest.mark.parametrize(\"obj\", [repr_da, repr_da.to_dataset(name=\"foo\")])\n+def test_groupby_repr_trailing_whitespace(obj, dim):\n+    gb = obj.groupby(dim)\n+    actual = repr(gb)\n+    expected = \"%sGroupBy\" % obj.__class__.__name__\n+    expected += \", grouped over %r\" % dim  # Note no trailing whitespace\n+    expected += \"\\n%r groups with labels \" % (len(np.unique(gb[dim])))\n+    if dim == \"letters\":\n+        expected += \"'a', 'b'.\"\n+\n+    # Verify that the string representation does not have trailing whitespace\n+    assert actual == expected\n+    assert actual.splitlines()[0][-1] != ' '\n+\n \n @pytest.mark.parametrize(\"obj\", [repr_da, repr_da.to_dataset(name=\"a\")])\n def test_groupby_repr_datetime(obj):\n@@ -410,6 +425,21 @@ def test_groupby_repr_datetime(obj):\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n \n+@pytest.mark.parametrize(\"dim\", [\"letters\"])\n+@pytest.mark.parametrize(\"obj\", [repr_da, repr_da.to_dataset(name=\"foo\")])\n+def test_groupby_repr_trailing_whitespace(obj, dim):\n+    gb = obj.groupby(dim)\n+    actual = repr(gb)\n+    expected = \"%sGroupBy\" % obj.__class__.__name__\n+    expected += \", grouped over %r\" % dim  # Note no trailing whitespace\n+    expected += \"\\n%r groups with labels \" % (len(np.unique(gb[dim])))\n+    if dim == \"letters\":\n+        expected += \"'a', 'b'.\"\n+\n+    # Verify that the string representation does not have trailing whitespace\n+    assert actual == expected\n+    assert actual.splitlines()[0][-1] != ' '\n+\n \n def test_groupby_drops_nans():\n     # GH2383\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..feafa09 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -34,6 +34,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                # ???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_todo_without_message(self) -> None:\n         code = \"\"\"a = 1\n                 # TODO\n@@ -43,6 +53,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                # ???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_xxx_without_space(self) -> None:\n         code = \"\"\"a = 1\n                 #XXX\n@@ -52,6 +72,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                # ???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_xxx_middle(self) -> None:\n         code = \"\"\"a = 1\n                 # midle XXX\n@@ -68,6 +98,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                # ???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     @set_config(notes=[])\n     def test_absent_codetag(self) -> None:\n         code = \"\"\"a = 1\n@@ -89,6 +129,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                # ???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_issue_2321_should_not_trigger(self) -> None:\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n@@ -106,6 +156,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                # ???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_dont_trigger_on_todoist(self) -> None:\n         code = \"\"\"\n         # Todoist API: What is this task about?\n@@ -119,4 +179,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..9e23150 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -72,11 +72,13 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n \n \n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n-    \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n-    with pytest.raises(_UnrecognizedOptionError):\n+    \"\"\"Check that we correctly raise a message on an unknown short option without a traceback.\"\"\"\n+    with pytest.raises(SystemExit):  # Adjust to SystemExit to match expected behavior\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err  # Check that no traceback is printed\n+    assert \"usage: pylint\" in output.err  # Check for usage output\n \n \n def test_unknown_confidence(capsys: CaptureFixture) -> None:\n",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..37ecc76 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,15 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_linting_module_with_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test linting of a directory with a file having the same name as the directory.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    # If the issue is fixed, there should be no errors about the missing __init__.py\n+    assert not linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +950,13 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_linting_module_with_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test linting of a directory with a file having the same name as the directory.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    # If the issue is fixed, there should be no errors about the missing __init__.py\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..67f46ad 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -112,7 +113,25 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[1] == \"my_mod:1::()\"\n     assert out_lines[2] == \"my_mod:2::()\"\n \n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    \"\"\"Test that custom message templates with additional braces work correctly.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\", \"Line\": \"{line}\", \"Column\": \"{column}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"example_module\")\n+\n+    # Add different messages simulating Pylint output\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E0401\", line=2, args=(3, 4))\n+    linter.add_message(\"E0602\", line=5, args=(5, 6))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\", \"Line\": \"1\", \"Column\": \"0\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\", \"Line\": \"2\", \"Column\": \"0\" }'\n+    assert out_lines[3] == '{ \"Category\": \"error\", \"Line\": \"5\", \"Column\": \"0\" }'\n \n+# Original test function maintained\n def test_deprecation_set_output(recwarn):\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..192c45f 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -297,6 +297,37 @@ class TestImportPath:\n         assert module.__name__ == \"_src.tests.mymod\"\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n+        \n+    @pytest.fixture\n+    def module_import_twice(self, pytester: Pytester) -> Iterator[Path]:\n+        pytester.makepyfile(\n+            **{\n+                \"pmxbot/logging.py\": \"\"\"\n+                class Logger:\n+                    store = None\n+                \"\"\",\n+                \"tests/test_double_import.py\": \"\"\"\n+                import importlib\n+                from pmxbot import logging as log_1\n+                log_2 = importlib.import_module('pmxbot.logging')\n+                \n+                def test_no_double_import():\n+                    assert log_1 is log_2\n+                \"\"\",\n+            }\n+        )\n+\n+    def test_no_double_import(self, pytester: Pytester, module_import_twice: Iterator[Path]) -> None:\n+        result = pytester.runpytest_inprocess()\n+        result.stdout.fnmatch_lines([\"*1 passed*\"])\n+        \"\"\"`importlib` mode does not change sys.path.\"\"\"\n+        module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module.foo(2) == 42  # type: ignore[attr-defined]\n+        assert str(simple_module.parent) not in sys.path\n+        assert module.__name__ in sys.modules\n+        assert module.__name__ == \"_src.tests.mymod\"\n+        assert \"_src\" in sys.modules\n+        assert \"_src.tests\" in sys.modules\n \n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..58d48e9 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -18,6 +19,34 @@ def test_coloredlogformatter():\n         exc_info=False,\n     )\n \n+def test_coloredlogformatter_with_module_name():\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=logging.INFO,\n+        pathname=\"dummypath\",\n+        lineno=10,\n+        msg=\"Test Message\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == \"INFO     dummy_module:dummypath:10 Test Message\"\n+\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == \"INFO     \\x1b[32mdummy_module:dummypath:10\\x1b[0m Test Message\"\n+\n     class ColorConfig(object):\n         class option(object):\n             pass\n@@ -30,6 +59,34 @@ def test_coloredlogformatter():\n         \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n     )\n \n+def test_coloredlogformatter_with_module_name():\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=logging.INFO,\n+        pathname=\"dummypath\",\n+        lineno=10,\n+        msg=\"Test Message\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == \"INFO     dummy_module:dummypath:10 Test Message\"\n+\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == \"INFO     \\x1b[32mdummy_module:dummypath:10\\x1b[0m Test Message\"\n+\n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..2bdef5b 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -463,6 +463,28 @@ class TestAssert_reprcompare:\n         expl = callequal({0, 1}, {0, 2})\n         assert len(expl) > 1\n \n+    def test_bytes_diff_empty_vs_nonempty(self):\n+        \"\"\"Check assertion rewriting message for empty vs non-empty byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n+\n+    def test_bytes_diff_single_char(self):\n+        \"\"\"Check assertion rewriting message for single character byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+        ]\n+\n     def test_frozenzet(self):\n         expl = callequal(frozenset([0, 1]), {0, 2})\n         assert len(expl) > 1\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..57e40a6 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,9 +1,12 @@\n+\n import os\n from xml.dom import minidom\n \n import py\n \n import pytest\n+import platform\n+from datetime import datetime\n from _pytest.junitxml import LogXML\n from _pytest.reports import BaseReport\n \n@@ -157,7 +160,29 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S\")\n+        assert start_time <= timestamp <= datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..b453a16 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,22 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ and __repr__ methods.\n+    \"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Error in __getattribute__\")\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Error in __repr__\")\n+\n+    # Check if saferepr handles the exceptions correctly\n+    result = saferepr(SomeClass())\n+    assert result.startswith(\"<[RuntimeError('Error in __repr__') raised in repr()] SomeClass object at 0x\")\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +169,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..96397c0 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -287,6 +287,29 @@ class TestInlineRunModulesCleanup:\n         testdir.inline_run(str(test_mod))\n         assert imported.data == 42\n \n+def test_failure_with_changed_cwd_abs_path(testdir):\n+    \"\"\"Test failure lines should use absolute paths if cwd has changed since invocation.\"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            if not os.path.exists(out_dir):\n+                os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n \n def test_assert_outcomes_after_pytest_error(testdir) -> None:\n     testdir.makepyfile(\"def test_foo(): assert True\")\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..d335f9e 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,7 @@\n import os\n import sys\n+import os\n+\n from unittest import mock\n \n import pytest\n@@ -42,6 +44,42 @@ class TestMark:\n             mark._some_name\n \n \n+def test_reevaluate_dynamic_expr(self, testdir):\n+    \"\"\"#7360 Test for caching issue with skipif condition.\"\"\"\n+    # Create the first test module with skip = True\n+    py_file1 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr1=\"\"\"\n+        import pytest\n+\n+        skip = True\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_skip():\n+            assert True\n+    \"\"\"\n+    )\n+    \n+    # Create the second test module with skip = False\n+    py_file2 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr2=\"\"\"\n+        import pytest\n+\n+        skip = False\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_not_skip():\n+            assert True\n+    \"\"\"\n+    )\n+\n+    # Get the file names for both test modules\n+    file_name1 = os.path.basename(py_file1.strpath)\n+    file_name2 = os.path.basename(py_file2.strpath)\n+\n+    # Run both test modules and check outcomes\n+    reprec = testdir.inline_run(file_name1, file_name2)\n+    reprec.assertoutcome(passed=1, skipped=1)\n+\n def test_marked_class_run_twice(testdir):\n     \"\"\"Test fails file is run twice that contains marked class.\n     See issue#683.\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..2739f51 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -152,6 +152,28 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+import pytest\n+\n+class TestSkippingWithRunXFail:\n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_location_reporting(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n \n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n",
  "pytest-dev__pytest-7490": "",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..e63304f 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -7,6 +8,8 @@ from typing import cast\n from typing import List\n \n import attr\n+from _pytest.monkeypatch import MonkeyPatch\n+from _pytest.tmpdir import TempPathFactory\n \n import pytest\n from _pytest import pathlib\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..cd1efca 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,7 +574,37 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n-def test_ridgecv_store_cv_values():\n+import numpy as np\n+from sklearn.linear_model import RidgeClassifierCV\n+from numpy.testing import assert_array_equal\n+from sklearn.utils.testing import assert_raises\n+\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Prepare data for testing\n+    X = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = X.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Test single target\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(X, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Test multiple targets\n+    y2d = np.array([[1, 1, 1, -1, -1], \n+                    [1, -1, 1, -1, 1], \n+                    [-1, -1, 1, -1, -1]]).T\n+    r_multitarget = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r_multitarget.fit(X, y2d)\n+    assert r_multitarget.cv_values_.shape == (n_samples, y2d.shape[1], n_alphas)\n+\n+    # Test error when 'cv' is set\n+    r_with_cv = RidgeClassifierCV(alphas=alphas, cv=2, store_cv_values=True)\n+    assert_raises(ValueError, r_with_cv.fit, X, y)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..1585eec 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,7 +5,7 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_raise_message, assert_in\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..487c17a 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,11 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+import numpy as np\n+import pytest\n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..b31ce9b 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,37 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+from sklearn.mixture import GaussianMixture\n+from sklearn.utils.testing import assert_array_equal\n+import numpy as np\n \n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_large_n_init():\n+    # Check the behavior with a larger n_init value\n+    X = np.random.RandomState(1).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=20, random_state=42)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_different_random_state():\n+    # Check behavior with different random states\n+    X = np.random.RandomState(2).randn(1000, 5)\n+    gm1 = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    gm2 = GaussianMixture(n_components=5, n_init=5, random_state=1)\n+    y_pred1_1 = gm1.fit_predict(X)\n+    y_pred1_2 = gm1.predict(X)\n+    y_pred2_1 = gm2.fit_predict(X)\n+    y_pred2_2 = gm2.predict(X)\n+    assert_array_equal(y_pred1_1, y_pred1_2)\n+    assert_array_equal(y_pred2_1, y_pred2_2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..2c4d2ba 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..e025642 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,31 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n-\n-def test_make_pipeline_memory():\n+def test_pipeline_len():\n+    from sklearn import svm\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.pipeline import Pipeline\n+\n+    # Case 1: Pipeline with two steps\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    assert len(pipe) == 2\n+\n+    # Case 2: Pipeline with one step\n+    pipe_single = Pipeline([('anova', anova_filter)])\n+    assert len(pipe_single) == 1\n+\n+    # Case 3: Empty pipeline\n+    pipe_empty = Pipeline([])\n+    assert len(pipe_empty) == 0\n+\n+    # Case 4: Pipeline with a 'passthrough' step\n+    pipe_pass = Pipeline([('anova', 'passthrough'), ('svc', clf)])\n+    assert len(pipe_pass) == 2\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1093,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..b4217aa 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -11,6 +12,9 @@ import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_no_warnings\n+from sklearn.utils import check_random_state\n+from sklearn.ensemble import IsolationForest\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..2b1c384 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -172,8 +172,37 @@ def test_mutual_info_classif_mixed():\n         # The MI should be the same\n         assert_equal(mi_nn[2], mi[2])\n \n+from scipy.sparse import csr_matrix\n+import numpy as np\n+from sklearn.feature_selection import mutual_info_regression, mutual_info_classif\n+from sklearn.utils.testing import assert_raises, assert_array_equal, assert_greater, assert_equal\n+\n+\n+def test_mutual_info_discrete_features():\n+    X = np.array([[0, 0, 0],\n+                  [1, 1, 0],\n+                  [2, 0, 1],\n+                  [2, 0, 1],\n+                  [2, 0, 1]], dtype=float)\n+    y = np.array([0, 1, 2, 2, 1], dtype=float)\n+    X_csr = csr_matrix(X)\n \n-def test_mutual_info_options():\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test ValueError for invalid `discrete_features`\n+        assert_raises(ValueError, mutual_info, X_csr, y, discrete_features='manual')\n+        assert_raises(ValueError, mutual_info, X_csr, y, discrete_features=[True, False, True])\n+        \n+        # Test IndexError for out of bounds indices\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False, True, False])\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n+\n+        # Test with valid `discrete_features` input\n+        mi_3 = mutual_info(X_csr, y, discrete_features='auto', random_state=0)\n+        mi_4 = mutual_info(X_csr, y, discrete_features=True, random_state=0)\n+        mi_5 = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        mi_6 = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+\n+        assert_array_equal(mi_5, mi_6)\n     X = np.array([[0, 0, 0],\n                   [1, 1, 0],\n                   [2, 0, 1],\n@@ -197,4 +226,4 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..7a4e696 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +217,23 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_print_changed_only_with_vector_values():\n+    # Set the configuration to print only changed parameters\n+    set_config(print_changed_only=True)\n+    \n+    # Create a LogisticRegressionCV instance with a vector for Cs\n+    estimator = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    \n+    # Check if the repr does not raise an error\n+    try:\n+        repr(estimator)\n+        print(\"Test passed: No error raised when repr is called with vector values for Cs.\")\n+    except Exception as e:\n+        print(f\"Test failed: An error was raised: {e}\")\n+    finally:\n+        # Reset the config to default after test\n+        set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..fee29f0 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -7,7 +8,8 @@ from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n-from sklearn.exceptions import NotFittedError\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..3d8f63c 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -119,6 +119,21 @@ def test_finite_differences():\n     np.testing.assert_almost_equal(rel_diff, 0., decimal=5)\n \n \n+@pytest.mark.parametrize('param, values', [\n+    ('tol', [0.1, 0.5, np.float32(0.001), np.float64(1e-5)]),\n+    ('n_components', [1, np.int32(2), np.int64(3)])\n+])\n+def test_params_with_different_types(param, values):\n+    # Test NCA with different numerical types for parameters, ensuring no TypeError\n+    X, y = np.random.random((100, 10)), np.random.randint(2, size=100)\n+    for value in values:\n+        nca = NeighborhoodComponentsAnalysis(**{param: value})\n+        try:\n+            nca.fit(X, y)\n+        except TypeError as e:\n+            pytest.fail(f\"TypeError while fitting NCA with {param}={value}: {e}\")\n+\n+\n def test_params_validation():\n     # Test that invalid parameters raise value error\n     X = np.arange(12).reshape(4, 3)\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..69fe096 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,6 +679,29 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue where sparse SVM fitting caused ZeroDivisionError\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+    \n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    \n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    \n+    # Ensure no support vectors and dual coefficients are empty\n+    assert not model.support_vectors_.size, \"Expected no support vectors\"\n+    assert not model.dual_coef_.size, \"Expected no dual coefficients\"\n+    \n+    # Ensure the model can be used for predictions without errors\n+    predictions = model.predict(X_train)\n+    assert len(predictions) == len(y_train), \"Mismatched number of predictions\"\n+\n \n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..65ec1be 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,8 +972,19 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n-def test_repeated_cv_value_errors():\n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 5, 10\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = (\n+        '{}(n_repeats={}, n_splits={}, random_state=None)'\n+        .format(repeated_cv.__class__.__name__, n_repeats, n_splits)\n+    )\n+    assert repeated_cv_repr == repr(repeated_cv)\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n         assert_raises(ValueError, cv, n_repeats=0)\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..156a5c3 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -14,6 +15,9 @@ from sklearn.isotonic import (\n )\n \n from sklearn.utils.validation import check_array\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn import set_config\n from sklearn.utils._testing import (\n     assert_allclose,\n     assert_array_equal,\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..65a6f4b 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,8 +1,9 @@\n+\n from __future__ import annotations\n \n from typing import overload\n-\n myint = int\n+String = int  # Simulating a type alias for the test case\n \n \n def sum(x: myint, y: myint) -> myint:\n@@ -22,4 +23,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..e977005 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,53 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = parse_rst(app, text)\n+    assert_node(doctree, (\n+        [desc, ([desc_signature, ([desc_name, '-j'],\n+                                  [desc_addname, '[=N]'])],\n+                [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = parse_rst(app, text)\n+    assert_node(doctree, (\n+        [desc, ([desc_signature, ([desc_name, '[enable'],\n+                                  [desc_addname, '=]PATTERN'])],\n+                [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+\n+def test_cmd_option_without_value(app):\n+    text = \".. option:: --verbose\"\n+    doctree = parse_rst(app, text)\n+    assert_node(doctree, (\n+        [desc, ([desc_signature, ([desc_name, '--verbose'])],\n+                [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--verbose', '--verbose', 'cmdoption', 'index', 'cmdoption---verbose', 1) in objects\n+\n+\n+def test_cmd_option_with_spaces(app):\n+    text = \".. option:: --config FILE\"\n+    doctree = parse_rst(app, text)\n+    assert_node(doctree, (\n+        [desc, ([desc_signature, ([desc_name, '--config'],\n+                                  [desc_addname, ' FILE'])],\n+                [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--config', '--config', 'cmdoption', 'index', 'cmdoption---config', 1) in objects\n+\n+import restructuredtext\n+from sphinx.util.docutils import nodes\n+from sphinx.testing.util import parse as parse_rst\n+from sphinx.testing.util import assert_node\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..0736942 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,7 +46,44 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n-def make_directive_bridge(env):\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_with_no_members(app):\n+    # Test case to verify that no members are documented when __all__ is empty\n+    options = {'members': False}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_non_empty_all(app):\n+    # Test to verify that only specified members in __all__ are documented\n+    options = {'members': True}\n+    # Simulate the case where __all__ contains some members\n+    with open('target/non_empty_all.py', 'w') as f:\n+        f.write('\"\"\"Example module with non-empty __all__\"\"\"\\n'\n+                '__all__ = [\"foo\"]\\n\\n'\n+                'def foo():\\n'\n+                '    \"\"\"docstring of foo\"\"\"\\n\\n'\n+                'def bar():\\n'\n+                '    \"\"\"docstring of bar\"\"\"\\n')\n+    actual = do_autodoc(app, 'module', 'target.non_empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.non_empty_all',\n+        '',\n+        'Example module with non-empty __all__',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.non_empty_all',\n+        '',\n+        '   docstring of foo',\n+        '',\n+    ]\n     options = Options(\n         inherited_members = False,\n         undoc_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..e0df3e5 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -44,6 +45,8 @@ def test_restify():\n     assert restify(None) == \":obj:`None`\"\n     assert restify(Integral) == \":class:`numbers.Integral`\"\n     assert restify(Any) == \":obj:`Any`\"\n+    from struct import Struct  # Import Struct for testing purposes\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n \n \n def test_restify_type_hints_containers():\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..152eed0 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1435,6 +1435,55 @@ class NumpyDocstringTest(BaseDocstringTest):\n         \"\"\")\n         self.assertEqual(expected, actual)\n \n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_other_parameters(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+y1, y2 : array_like\n+    Input arrays, description of ``y1``, ``y2``.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **y1**, **y2** (*array_like*) -- Input arrays, description of ``y1``, ``y2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param y1:\n+:type y1: array_like\n+:param y2:\n+:type y2: array_like\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n@@ -1447,6 +1496,55 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n :Parameters: **param1** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_other_parameters(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+y1, y2 : array_like\n+    Input arrays, description of ``y1``, ``y2``.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **y1**, **y2** (*array_like*) -- Input arrays, description of ``y1``, ``y2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param y1:\n+:type y1: array_like\n+:param y2:\n+:type y2: array_like\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1455,6 +1553,55 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_other_parameters(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+y1, y2 : array_like\n+    Input arrays, description of ``y1``, ``y2``.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **y1**, **y2** (*array_like*) -- Input arrays, description of ``y1``, ``y2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param y1:\n+:type y1: array_like\n+:param y2:\n+:type y2: array_like\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..6e6f3f0 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -61,7 +61,16 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/cpp/' in stuff\n \n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..9006cc9 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -349,7 +349,11 @@ def test_args():\n     raises(ValueError, lambda: Permutation([[1, 2], 0]))\n            # enclosing brackets needed on 0\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n-    raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[2, 1], [0, 1]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])\n+    assert Permutation([[0, 2], [1, 0], [2, 1]]) == Permutation([1, 0, 2])\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..62adc86 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -448,6 +449,25 @@ def test_sparse_matrix():\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n \n+    # Test for issue with hstack and vstack for matrices with zero dimensions\n+    empty_0x0 = SparseMatrix.zeros(0, 0)\n+    empty_0x1 = SparseMatrix.zeros(0, 1)\n+    empty_0x2 = SparseMatrix.zeros(0, 2)\n+    empty_0x3 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(empty_0x0, empty_0x1, empty_0x2, empty_0x3).shape == (0, 6)\n+\n+    one_row_0x = SparseMatrix.zeros(1, 0)\n+    one_row_1x = SparseMatrix.zeros(1, 1)\n+    one_row_2x = SparseMatrix.zeros(1, 2)\n+    one_row_3x = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(one_row_0x, one_row_1x, one_row_2x, one_row_3x).shape == (1, 6)\n+\n+    empty_1x0 = SparseMatrix.zeros(1, 0)\n+    empty_2x0 = SparseMatrix.zeros(2, 0)\n+    empty_3x0 = SparseMatrix.zeros(3, 0)\n+    empty_4x0 = SparseMatrix.zeros(4, 0)\n+    assert SparseMatrix.vstack(empty_1x0, empty_2x0, empty_3x0, empty_4x0).shape == (10, 0)\n+\n \n def test_transpose():\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..f3270a0 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -100,6 +100,32 @@ def test_core_symbol():\n         check(c)\n \n \n+import pickle\n+import sympy\n+from sympy.abc import x, y\n+import sys\n+\n+def test_pickle_float_expression_python2_to_3():\n+    # Simulate pickling in Python 2 and unpickling in Python 3\n+    # The following line assumes the pickle format is compatible\n+    dumped = pickle.dumps(x + 1.0, protocol=2)\n+    loaded = pickle.loads(dumped)\n+    assert loaded == x + 1.0\n+\n+def test_pickle_float_expression_roundtrip():\n+    # Round-trip pickle test of a float expression\n+    expr = x + 1.0\n+    dumped = pickle.dumps(expr)\n+    loaded = pickle.loads(dumped)\n+    assert loaded == expr\n+\n+def test_pickle_complex_expression():\n+    # Pickle a more complex expression\n+    expr = x + y + 1.0 + sympy.pi\n+    dumped = pickle.dumps(expr)\n+    loaded = pickle.loads(dumped)\n+    assert loaded == expr\n+    \n def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..29699ef 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -270,6 +270,22 @@ def test_coth():\n     assert coth(k*pi*I) == -cot(k*pi)*I\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n+def test_coth_log_tan_subs():\n+    from sympy import Symbol, coth, log, tan, I, pi\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    assert e.subs(x, 2) is not None  # Ensure no error\n+    assert e.subs(x, 3) is not None  # Ensure no error\n+    assert e.subs(x, 5) is not None  # Ensure no error\n+    assert e.subs(x, 6) is not None  # Ensure no error\n+    assert e.subs(x, 8) is not None  # Ensure no error\n+    assert e.subs(x, 9) is not None  # Ensure no error\n+    assert e.subs(x, 11) is not None  # Ensure no error\n+    assert e.subs(x, 12) is not None  # Ensure no error\n+    assert e.subs(x, 13) is not None  # Ensure no error\n+    assert e.subs(x, 15) is not None  # Ensure no error\n+    assert e.subs(x, 18) is not None  # Ensure no error\n+\n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..462adde 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,53 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    # Test the specific scenario from the reported issue\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected_result = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+    assert result == expected_result\n+\n+    # Additional test case: Insert at the beginning\n+    M = eye(3)\n+    V = Matrix([[9, 9], [9, 9], [9, 9]])\n+    result = M.col_insert(0, V)\n+    expected_result = Matrix([\n+        [9, 9, 1, 0, 0],\n+        [9, 9, 0, 1, 0],\n+        [9, 9, 0, 0, 1],\n+    ])\n+    assert result == expected_result\n+\n+    # Additional test case: Insert at the end\n+    M = eye(3)\n+    result = M.col_insert(3, V)\n+    expected_result = Matrix([\n+        [1, 0, 0, 9, 9],\n+        [0, 1, 0, 9, 9],\n+        [0, 0, 1, 9, 9],\n+    ])\n+    assert result == expected_result\n+\n+    # Additional test case: Insert at position 1\n+    M = eye(3)\n+    result = M.col_insert(1, V)\n+    expected_result = Matrix([\n+        [1, 9, 9, 0, 0],\n+        [0, 9, 9, 1, 0],\n+        [0, 9, 9, 0, 1],\n+    ])\n+    assert result == expected_result\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..fb97f7e 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -662,8 +662,27 @@ def test_latex_sequences():\n     latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n-\n-def test_latex_FourierSeries():\n+def test_latex_seqformula_brackets():\n+    # Test sequences with correct bracket rendering without backslashes\n+    n = symbols('n')\n+    seq = SeqFormula(n**2, (n, 0, oo))\n+    \n+    # Expected output without backslash-escaped brackets\n+    expected_latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(seq) == expected_latex_str\n+\n+    seq_finite = SeqFormula(n**2, (n, 0, 2))\n+    expected_latex_str_finite = r'[0, 1, 4]'\n+    assert latex(seq_finite) == expected_latex_str_finite\n+    \n+    # Test more sequences to check correct behavior\n+    seq2 = SeqFormula(n**3, (n, -3, 1))\n+    expected_latex_str_seq2 = r'[-27, -8, -1, 0, 1]'\n+    assert latex(seq2) == expected_latex_str_seq2\n+\n+    seq_neg_inf = SeqFormula(n**2, (n, -oo, 0))\n+    expected_latex_str_neg_inf = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(seq_neg_inf) == expected_latex_str_neg_inf\n     latex_str = r'2 \\sin{\\left (x \\right )} - \\sin{\\left (2 x \\right )} + \\frac{2}{3} \\sin{\\left (3 x \\right )} + \\ldots'\n     assert latex(fourier_series(x, (x, -pi, pi))) == latex_str\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..9505e20 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,9 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, EX, RR, CC\n+from sympy.polys.polytools import Poly\n+from sympy.abc import x, y, z\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -174,6 +177,15 @@ def test_Domain_preprocess():\n \n     raises(OptionError, lambda: Domain.preprocess('Z[]'))\n \n+    # Tests for the issue regarding RR[y,z] domain and Poly\n+    assert Domain.preprocess('RR[y]') == RR[y]\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]\n+    assert Domain.preprocess('CC[y]') == CC[y]\n+    assert Domain.preprocess('CC[y,z]') == CC[y, z]\n+\n+    assert Poly(1.2*x*y*z, x).as_expr() == 1.2*y*z*x\n+    assert Poly(1.2*x*y*z, x, domain='RR[y,z]').as_expr() == 1.2*y*z*x\n+\n     assert Domain.preprocess('Z[x]') == ZZ[x]\n     assert Domain.preprocess('Q[x]') == QQ[x]\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..4225113 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,38 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty, symbols\n+\n+n = symbols('n')\n+\n+def test_issue_14814():\n+    # Original test patch cases\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    assert pretty(x + y) == \"x + y*\"\n+    a = symbols('a')\n+    assert pretty(-a*x + -2*y*y) == \"-a*x -2*y**y*\"\n+\n+    # Additional test cases for better coverage\n+    z = MatrixSymbol('z-', n, n)\n+    assert pretty(z + x) == \"z- + x\"\n+    assert pretty(x + z) == \"x + z-\"\n+\n+    # Testing with more complex expressions\n+    m1 = MatrixSymbol('m1', n, n)\n+    m2 = MatrixSymbol('m2*', n, n)\n+    assert pretty(m1 - m2) == \"m1 - m2*\"\n+\n+    # Ensure edge cases are covered\n+    empty = MatrixSymbol('', n, n)\n+    assert pretty(x + empty) == \"x + \"\n+    assert pretty(empty + y) == \" + y*\"\n+\n+    # Inclusion of expressions with subscripts and superscripts\n+    t = MatrixSymbol('t_ij', n, n)\n+    u = MatrixSymbol('u^ij', n, n)\n+    assert pretty(t + u) == \"t_ij + u^ij\"\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..b725567 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -719,8 +719,27 @@ def test_dummification():\n     some_expr = 2 * F(t)**2 / G(t)\n     lam = lambdify((F(t), G(t)), some_expr)\n     assert lam(3, 9) == 2\n-    lam = lambdify(sin(t), 2 * sin(t)**2)\n-    assert lam(F(t)) == 2 * F(t)**2\n+from sympy import MatrixSymbol, lambdify, symbols, eye\n+\n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    lam = lambdify(curlyv, curlyv)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+    lam = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+\n+def test_curly_matrix_symbol_extended():\n+    # Additional test for different sizes and expressions\n+    curlyM = MatrixSymbol(\"{M}\", 3, 3)\n+    lam = lambdify(curlyM, curlyM + eye(3))\n+    assert (lam([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == [[2, 0, 0], [0, 2, 0], [0, 0, 2]])\n+\n+    # Test with dummify=True and more complex expressions\n+    lam = lambdify(curlyM, curlyM * curlyM, dummify=True)\n+    result = lam([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+    expected = [[30, 36, 42], [66, 81, 96], [102, 126, 150]]\n+    assert (result == expected)\n     #Test that \\alpha was properly dummified\n     lam = lambdify((alpha, t), 2*alpha + t)\n     assert lam(2, 1) == 5\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..a5c61e5 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,30 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n+def test_indexed_matrix_expression_latex_printer():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Test for correct LaTeX output for a matrix product element\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+    \n+    # Additional tests for other matrix operations with indexing\n+    P = MatrixSymbol(\"P\", k, k)\n+    assert latex((M*P*N)[i, j]) == r'\\sum_{i_{2}=0}^{k - 1}\\sum_{i_{1}=0}^{k - 1} M_{i, i_{2}} P_{i_{2}, i_{1}} N_{i_{1}, j}'\n+    \n+    # Test a single matrix element\n+    assert latex(M[i, j]) == r'M_{i, j}'\n+    \n+    # Test a more complicated index expression\n+    Q = MatrixSymbol(\"Q\", k, k)\n+    assert latex((M*N*Q)[i, j]) == r'\\sum_{i_{3}=0}^{k - 1}\\sum_{i_{2}=0}^{k - 1}\\sum_{i_{1}=0}^{k - 1} M_{i, i_{3}} N_{i_{3}, i_{2}} Q_{i_{2}, i_{1}}'\n+    \n+    # Verify with a simpler non-matrix expression\n+    x, y = symbols(\"x y\")\n+    assert latex(x + y) == r'x + y'\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..635d995 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, exp, Function, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,18 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test cases from the original patch\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x)) / (f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Additional tests for issues in idiff\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x) == (x + 1) * exp(x - y) / (y + 1)\n+    assert idiff(y * exp(y) - x * exp(x), y, x) == (x + 1) * exp(x - y) / (y + 1)\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..4a45daf 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -581,6 +581,38 @@ def test_ccode_cse():\n         '}\\n'\n     )\n     assert source == expected\n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen\n+    from sympy import MatrixSymbol\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+\n+def test_autowrap_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n+\n \n def test_empty_f_code():\n     code_gen = FCodeGen()\n",
  "sympy__sympy-16988": "",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..c7b82c4 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -15,8 +16,25 @@ from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n np = import_module('numpy')\n+from sympy import MatrixSymbol, Identity, symbols\n+from sympy.utilities.pytest import raises\n+import numpy as np\n \n-def test_numpy_piecewise_regression():\n+def test_numpy_identity_matrix():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+    \n+    # Testing with fixed-size identity matrix\n+    M_fixed = MatrixSymbol(\"M\", 2, 2)\n+    f_fixed = lambdify(M_fixed, M_fixed + Identity(2), 'numpy')\n+    ma_fixed = np.array([[1, 2], [3, 4]])\n+    mr_fixed = np.array([[2, 2], [3, 5]])\n+    np.testing.assert_array_equal(f_fixed(ma_fixed), mr_fixed)\n+\n+    # Testing with symbolic-size identity matrix\n+    n = symbols('n', integer=True)\n+    M_symb = MatrixSymbol(\"M\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(M_symb, M_symb + Identity(n)))\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..c0ea369 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,12 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n+def test_issue_17137():\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    \n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..3d8ea62 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,16 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n-\n-def test_point():\n+def test_multiplication_with_sympify():\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+    assert p1 + p2 * sympify(2.0) == Point(2.0, 2.0)\n+    assert p1 + sympify(2.0) * p2 == Point(2.0, 2.0)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..4b16449 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,37 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, sympify\n+from sympy.utilities.pytest import raises\n+\n+def test_sympy_equality_evaluation():\n+    x = symbols('x')\n+\n+    # Ensure that objects with a `__repr__` that could lead to unsafe eval are not improperly evaluated\n+    class DangerousRepr:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    # This should not cause any evaluation or error\n+    assert (x == DangerousRepr()) is False\n+    assert (x != DangerousRepr()) is True\n+\n+    class SimpleRepr:\n+        def __repr__(self):\n+            return 'x'\n+\n+    # Ensure it doesn't mistakenly consider objects with repr 'x' as equal to the Symbol x\n+    assert (x == SimpleRepr()) is False\n+    assert (x != SimpleRepr()) is True\n+\n+    # Test related to the issue where an unknown object whose repr is 'x'\n+    class RelatedRepr:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (x == RelatedRepr()) is False\n+    assert (x != RelatedRepr()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1933,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..246080a 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,14 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # issue 18186: diophantine: incomplete results depending on syms order with permute=True\n+    from sympy.abc import x, y\n+\n+    eq = y**4 + x**4 - 2**4 - 3**4\n+    assert diophantine(eq, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(eq, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..637d3e3 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String, Basic\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..a3eacab 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -110,6 +110,15 @@ def test_issue_17624():\n     assert block_collapse(b * b) == BlockMatrix([[a**2, z], [z, z]])\n     assert block_collapse(b * b * b) == BlockMatrix([[a**3, z], [z, z]])\n \n+from sympy import Matrix, BlockDiagMatrix\n+\n+def test_single_element_BlockDiagMatrix():\n+    # Test if BlockDiagMatrix with one element can be converted to a regular Matrix without error\n+    A = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(A)\n+    B = Matrix(D)\n+    assert B == A\n+\n def test_BlockMatrix_trace():\n     A, B, C, D = [MatrixSymbol(s, 3, 3) for s in 'ABCD']\n     X = BlockMatrix([[A, B], [C, D]])\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..76b7ae1 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -83,7 +84,21 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_block_index_issue_case():\n+    from sympy import pprint\n+\n+    n, i = symbols('n, i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+\n+    # Ensure symbolic indexes do not get incorrectly simplified\n+    assert C[i, 0] == MatrixElement(C, i, 0)  # Unable to determine exact element\n+\n+    # Check specific indices for correct block extraction\n+    assert C[0, 0] == A[0, 0]  # Index 0,0 should map directly to first block A\n+    if n > 0:\n+        assert C[1, 0] == B[0, 0]  # Index 1,0 should map to the first element of B if n > 0\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..ebaf964 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -305,6 +305,19 @@ def test_sign():\n     # evaluate what can be evaluated\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n+    x, y = symbols('x y', real=True)\n+    \n+    # Testing rewriting of sign in terms of Abs\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    \n+    # Test for zero, which should not rewrite to nan\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # Test for a function of y\n+    f = Function('f')\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+\n     eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n     # if there is a fast way to know when and when you cannot prove an\n     # expression like this is zero then the equality to zero is ok\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..0ad96f3 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,23 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n-\n def test_partitions():\n+    p5 = list(partitions(5))\n+    # Check that modifying one result does not affect others\n+    modified = p5[0]\n+    modified[1] = 100  # modify the first partition\n+    assert all(partition[1] != 100 for partition in p5[1:]), \"The change should only affect the modified partition.\"\n+\n+    # Testing edge cases of partitions\n+    assert list(partitions(1)) == [{1: 1}]\n+    assert list(partitions(2)) == [{2: 1}, {1: 2}]\n+    assert list(partitions(3)) == [{3: 1}, {1: 1, 2: 1}, {1: 3}]\n+    assert list(partitions(4)) == [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n+\n+    # Check that list conversion does not alter the results\n+    partitions_list_6_k2 = list(partitions(6, k=2))\n+    partitions_list_6_k2_check = [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    assert partitions_list_6_k2 == partitions_list_6_k2_check\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..11d570d 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -253,8 +253,20 @@ def test_power_rewrite_exp():\n     assert all((1/func(x)).rewrite(exp) == 1/(func(x).rewrite(exp)) for func in\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n-\n-def test_zero():\n+from sympy import oo, S, power, Pow, symbols\n+from sympy.core.numbers import ComplexInfinity as zoo  # Ensure zoo is imported\n+\n+def test_issue_19572():\n+    # Test for issue regarding 0**-oo\n+    # Here we expect the result to be zoo (ComplexInfinity)\n+    assert 0**-oo is zoo\n+    assert power(0, -oo) is zoo\n+    assert Pow(0, -oo) == zoo\n+\n+    # Additional tests to see behavior with other cases\n+    x = S('x')\n+    assert (0**x).subs(x, -oo) == zoo\n+    assert (0**x).subs(x, oo) == 0\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..7318e02 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -8,6 +9,7 @@ from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     byte, kibibyte, mebibyte, gibibyte, tebibyte, pebibyte, exbibyte,\n     kilogram, gravitational_constant)\n \n+from sympy.physics.units import joule\n from sympy.physics.units.definitions.dimension_definitions import (\n     Dimension, charge, length, time, temperature, pressure,\n     energy\n@@ -45,8 +47,21 @@ def test_convert_to():\n     assert q.convert_to(s) == q\n     assert speed_of_light.convert_to(m) == speed_of_light\n \n+def test_convert_to_orthogonal_units():\n+    # Testing the conversion where orthogonal units are involved\n+    expr = joule * second\n+    conv = convert_to(expr, joule)\n+    assert conv == joule * second, \"Expected the expression to remain unchanged\"\n+\n+    # Additional test cases for related behavior\n+    conv = convert_to(joule * second, joule * second)\n+    assert conv == joule * second, \"Expected the expression to remain unchanged\"\n+\n+    conv = convert_to(joule * second, kg * m**2 / s)\n+    assert conv == kg * m**2 / s, \"Expected conversion to base units\"\n \n-def test_Quantity_definition():\n+    conv = convert_to(joule * second, minute)\n+    assert conv == joule * minute / 60, \"Expected conversion with time unit change\"\n     q = Quantity(\"s10\", abbrev=\"sabbr\")\n     q.set_global_relative_scale_factor(10, second)\n     u = Quantity(\"u\", abbrev=\"dam\")\n",
  "sympy__sympy-20590": "",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..3d810ce 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -160,6 +161,19 @@ def test_sign():\n     x = Symbol('x', complex=True)\n     assert refine(sign(x), Q.zero(x)) == 0\n \n+    def test_refine_issue_complex_args():\n+        a = Symbol('a', real=True)\n+        x = Symbol('x', real=True)\n+        J = Integral(sin(x)*exp(-a*x), (x, 0, oo)).doit()\n+        assert refine(J, Q.positive(a)) == 1/(a**2 + 1)\n+        assert refine(abs(a), Q.positive(a)) == a\n+        assert refine(arg(a), Q.positive(a)) == 0\n+\n+    def test_arg():\n+        x = Symbol('x', complex=True)\n+        assert refine(arg(x), Q.positive(x)) == 0\n+        assert refine(arg(x), Q.negative(x)) == pi\n+\n \n def test_func_args():\n     class MyClass(Expr):\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..94f9936 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -34,6 +35,38 @@ def test_subs_Matrix():\n     # Does not raise a TypeError, see comment on the MatAdd postprocessor\n     assert Add(Matrix([[3]]), x).subs(x, 2.0) == Add(Matrix([[3]]), 2.0)\n \n+def test_issue_21373():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    # Case where the error was originally observed\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    try:\n+        result = expr.subs({1: 1.0})\n+    except PolynomialError as e:\n+        result = e\n+    assert result != PolynomialError\n+\n+    # Additional tests for coverage\n+    # Similar expression without division by z should not throw error\n+    expr_no_division = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_division.subs({1: 1.0})\n+\n+    # Expressions with different hyperbolic functions\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_cosh.subs({1: 1.0})\n+\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_tanh.subs({1: 1.0})\n+\n+    # Expressions with different unary functions\n+    expr_sin = exp(sin(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_sin.subs({1: 1.0})\n+\n+    expr_log = exp(log(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_log.subs({1: 1.0})\n+\n def test_subs_AccumBounds():\n     e = x\n     e = e.subs(x, AccumBounds(1, 3))\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..b9e30e3 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n+from sympy.core.function import Derivative\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n@@ -39,7 +41,11 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n-def test_Matrix_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind  # This checks a scalar derivative\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)  # Test case for the issue\n+    assert Derivative(A, noncomm_x).kind is MatrixKind(UndefinedKind)  # Additional test involving non-commutative symbol\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n         m = cls.zeros(3, 2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..835f980 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -109,6 +109,11 @@ def test_monomials():\n     assert set(itermonomials([x], [0])) == {S.One}\n     assert set(itermonomials([x], [1])) == {S.One, x}\n     assert set(itermonomials([x], [2])) == {S.One, x, x**2}\n+\n+    # Test case for issue where `min_degrees` is specified as integer\n+    assert set(itermonomials([x, y, z], 3, 3)) == {x**3, y**3, z**3, x*y**2, x**2*y, y*z**2, y**2*z, x*z**2, x**2*z, z**3, x*y*z, x*z*y}\n+\n+    # Existing issue tests\n     assert set(itermonomials([x], [3])) == {S.One, x, x**2, x**3}\n \n     assert set(itermonomials([x], [3], [1])) == {x, x**3, x**2}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..1f307f1 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,8 +50,22 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n+def test_solve_poly_system_issue_cases():\n+    # New test cases for the specified issue\n+\n+    # Test with a linear system that should raise NotImplementedError\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        (x - 1,), x, y))\n \n-def test_solve_biquadratic():\n+    # Test with another linear system that should raise NotImplementedError\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        (y - 1,), x, y))\n+\n+    # Additional contexts that might be affected by similar logic\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x + y], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x * y - x], x, y))\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n \n     f_1 = (x - 1)**2 + (y - 1)**2 - r**2\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..953a83d 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,8 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n+from sympy import S, Integer\n from sympy.testing.pytest import raises, warns\n \n \n@@ -440,6 +443,16 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        Point(1, 2)\n+\n+    # Additional test to verify Point2D behavior as per the issue\n+    with evaluate(False):\n+        p = S('Point2D(Integer(1),Integer(2))')\n+        assert p == Point2D(1, 2)\n+\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..ddd6009 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,7 +347,34 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n-def test_cse_MatrixExpr():\n+def test_cse_MatrixSymbol_indexing():\n+    # Test for matrix indexing issue in cse()\n+    import sympy as sp\n+    from sympy import cse, MatrixSymbol, symbols\n+\n+    def sub_in_matrixsymbols(exp, matrices):\n+        for matrix in matrices:\n+            for i in range(matrix.shape[0]):\n+                for j in range(matrix.shape[1]):\n+                    name = \"%s_%d_%d\" % (matrix.name, i, j)\n+                    sym = sp.symbols(name)\n+                    exp = exp.subs(sym, matrix[i, j])\n+        return exp\n+\n+    a, b = MatrixSymbol(\"a\", 4, 4), MatrixSymbol(\"b\", 4, 4)\n+\n+    # Set up expression.\n+    e = a * b\n+\n+    # Substitute matrix symbols for testing\n+    e2 = sub_in_matrixsymbols(e, [a, b])\n+    cse_subs, cse_reduced = cse(e2)\n+\n+    # Assert the replacements are meaningful and not simple copies\n+    assert all(s[0] != s[1] for s in cse_subs), \"CSE substitutions shouldn't be trivial copies\"\n+    \n+    # Further verification to ensure indexing is correctly handled\n+    assert len(cse_subs) > 0, \"Expected non-empty substitutions for matrix indexing\"\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..d3654bc 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,6 +38,12 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n+def test_issue_17851_empty_array():\n+    for ArrayType in array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n \n def test_issue_18361():\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..46b3fd4 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1181,8 +1181,19 @@ def test_lambdify_inspect():\n     # details\n     assert 'x**2' in inspect.getsource(f)\n \n+def test_python_code_printer_single_element_tuple():\n+    from sympy import lambdify\n+    import inspect\n \n-def test_issue_14941():\n+    # Create a lambdified function with a single-element tuple\n+    f = lambdify([], (1,))\n+    source_code = inspect.getsource(f)\n+\n+    # Ensure the source code returns a tuple\n+    assert 'return (1,)' in source_code\n+\n+    # Execute the lambdified function and verify the output is a tuple\n+    assert f() == (1,)\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..80c1e29 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,31 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy import exp\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.util import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..f0b9d93 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,32 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_issue_expansion():\n+    # Test cases to verify the fix for the tensor product expansion bug\n+\n+    # Test from the original issue description\n+    U = Operator('U')\n+    V = Operator('V')\n+    P = TP(2*U - V, U + V)\n+    assert P.expand(tensorproduct=True) == 2*TP(U, U) + 2*TP(U, V) - TP(V, U) - TP(V, V)\n+\n+    # Test from the original test patch\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional edge cases\n+    # Scalar factor and zero tensor factor\n+    assert TP(0, A + B).expand(tensorproduct=True) == 0\n+    assert TP(x, A + B).expand(tensorproduct=True) == \\\n+        x * TP(A, A) + x * TP(A, B)\n+\n+    # Nested tensor products\n+    assert TP(TP(A + B, B + C), A).expand(tensorproduct=True) == \\\n+        TP(A, B, A) + TP(A, C, A) + TP(B, B, A) + TP(B, C, A)\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..b29d78e 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,6 +563,52 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    # Initial test case\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+    \n+    # Additional test case: different scale factors\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 3 * meter / second)\n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, 4 * meter / second**2)\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 0.5 * second)\n+\n+    expr2 = A2*T2 + V2\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr2)\n+\n+    # Edge case: zero acceleration\n+    A3 = Quantity('A3')\n+    SI.set_quantity_dimension(A3, acceleration)\n+    SI.set_quantity_scale_factor(A3, 0 * meter / second**2)\n+    T3 = Quantity('T3')\n+    SI.set_quantity_dimension(T3, time)\n+    SI.set_quantity_scale_factor(T3, 5 * second)\n+\n+    expr3 = A3*T3 + V2  # should yield the velocity V2 unaffected by zero acceleration\n+    factor, dim = SI._collect_factor_and_dimension(expr3)\n+    assert dim == velocity\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..a9b78f9 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, V\n+from sympy.physics.units.prefixes import milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..34b5233 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -205,6 +205,28 @@ class ModelInheritanceTests(TestCase):\n         self.assertEqual(A.attr.called, (A, 'attr'))\n \n \n+class ModelInheritanceOrderingTests(TestCase):\n+    def test_inherited_ordering_pk_desc(self):\n+        # Create two Parent instances\n+        p1 = Parent.objects.create(first_name='John', last_name='Doe', email='john.doe@example.com')\n+        p2 = Parent.objects.create(first_name='Jane', last_name='Doe', email='jane.doe@example.com')\n+        \n+        # Create corresponding Child instances\n+        c1 = Child.objects.create(first_name='John', last_name='Doe', email='john.doe@example.com')\n+        c2 = Child.objects.create(first_name='Jane', last_name='Doe', email='jane.doe@example.com')\n+        \n+        # Query the Child objects\n+        qs = Child.objects.all()\n+        expected_order = [c2, c1]  # Expecting c2 to come before c1 due to DESC ordering by pk\n+        \n+        # Check if ordering by pk desc works\n+        self.assertSequenceEqual(list(qs), expected_order)\n+        \n+        # Additionally, check the SQL query to ensure ORDER BY is applied correctly\n+        expected_order_by_sql = f'ORDER BY \"{Parent._meta.db_table}\".\"id\" DESC'\n+        self.assertIn(expected_order_by_sql, str(qs.query))\n+\n+\n class ModelInheritanceDataTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..bd84738 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -6,6 +6,20 @@ should be a list or tuple of field names. This tells Django how to order\n ``QuerySet`` results.\n \n If a field name in ``ordering`` starts with a hyphen, that field will be\n+from django.db.models import F\n+\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"OneModel\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n ordered in descending order. Otherwise, it'll be ordered in ascending order.\n The special-case field name ``\"?\"`` specifies random order.\n \n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..6c67040 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,26 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_uses_choicewidget_options_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the id provided by ChoiceWidget.options\n+        if it's set, rather than using the auto-generated id.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        \n+        # Simulate the setting of 'id' in ChoiceWidget.options\n+        subwidgets[0].data['attrs']['id'] = 'custom_id_0'\n+        subwidgets[1].data['attrs']['id'] = 'custom_id_1'\n+\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..4b6b7d4 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,43 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+# Additional imports for testing\n+from django.apps import apps\n+from django.test import TestCase, override_settings\n+from django.core.management import call_command\n+from django.db.utils import ConnectionRouter, DEFAULT_DB_ALIAS\n+from django.contrib.auth.models import Permission\n+\n+@override_settings(DATABASE_ROUTERS=[DefaultDBRouter()])\n+class MigrateCommandDatabaseParameterTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        # We use a database router to ensure queries respect the database parameter\n+        self.router = ConnectionRouter()\n+\n+    def test_migrate_respects_database_parameter(self):\n+        # Ensure permissions do not exist in the \"other\" database before migration\n+        Permission.objects.using(\"other\").delete()\n+        \n+        # Run the migrate command specifying the \"other\" database\n+        call_command(\"migrate\", database=\"other\", verbosity=0)\n+\n+        # Check that permissions were added to the specified \"other\" database\n+        self.assertGreater(Permission.objects.using(\"other\").count(), 0)\n+        # Verify the default database does not have these permissions\n+        self.assertEqual(Permission.objects.using(DEFAULT_DB_ALIAS).count(), 0)\n+\n+    def test_migrate_with_default_database(self):\n+        # Ensure permissions do not exist in the default database before migration\n+        Permission.objects.using(DEFAULT_DB_ALIAS).delete()\n+        \n+        # Run the migrate command normally without specifying a database\n+        call_command(\"migrate\", verbosity=0)\n+\n+        # Check that permissions were added to the default database\n+        self.assertGreater(Permission.objects.using(DEFAULT_DB_ALIAS).count(), 0)\n+        # Verify the \"other\" database does not have these permissions\n+        self.assertEqual(Permission.objects.using(\"other\").count(), 0)\n",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..2eebaa8 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,10 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.colors import LogNorm, Normalize\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -658,6 +662,27 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n+def test_update_colorbar_norm():\n+    # Test whether colorbar updates correctly when mappable.norm is changed\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Initially set colorbar scale should be linear\n+    assert cb.ax.yaxis.get_scale() == 'linear'\n+    # Change the norm to logarithmic\n+    plot.set_norm(LogNorm())\n+    cb.update_normal(plot)\n+    fig.canvas.draw()\n+\n+    # Now, the colorbar should be logarithmic\n+    assert cb.ax.yaxis.get_scale() == 'log'\n+    assert cb.norm.vmin == img.min()\n+    assert cb.norm.vmax == img.max()\n+\n+\n def test_colorbar_get_ticks_2():\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..032cf0a 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,36 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas DataFrame output and custom transformer.\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None):\n+            return self\n+\n+        def transform(self, X):\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Set the output configuration to pandas\n+    set_config(transform_output=\"pandas\")\n+    \n+    # Create a feature union with the custom transformer\n+    union = FeatureUnion([(\"custom\", MyTransformer())])\n+\n+    try:\n+        transformed_data = union.fit_transform(data)\n+        assert isinstance(transformed_data, pd.DataFrame), \"Output should be a Pandas DataFrame\"\n+        print(\"Test passed: FeatureUnion with pandas output and custom transformer.\")\n+    except Exception as e:\n+        print(f\"Test failed: {str(e)}\")\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..db13bfb 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -132,8 +132,64 @@ def test_decorators(app):\n     ]\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_slots_attribute(app):\n+def test_annotation_only_member_in_superclass(app):\n+    options = {\"members\": None,\n+               \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only.FooSubclass', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: FooSubclass()',\n+        '   :module: target.annotation_only',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: FooSubclass.attr1',\n+        '      :module: target.annotation_only',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: FooSubclass.attr2',\n+        '      :module: target.annotation_only',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_undoc_member_in_superclass(app):\n+    options = {\"members\": None,\n+               \"inherited-members\": True,\n+               \"undoc-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only.FooSubclass', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: FooSubclass()',\n+        '   :module: target.annotation_only',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: FooSubclass.attr1',\n+        '      :module: target.annotation_only',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: FooSubclass.attr2',\n+        '      :module: target.annotation_only',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'class', 'target.slots.Bar', options)\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..94bd21e 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,8 +358,28 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n+def test_issue_rational_trigsimp():\n+    from sympy import Rational, acos\n+\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+\n+    # Direct simplification of dot product\n+    r = t1.dot(t2)\n+    assert r.simplify() == cos(S(1)/50 - S(1)/25)\n+\n+    # Simplification using trigsimp\n+    assert trigsimp(r) == cos(S(1)/50 - S(1)/25)\n+\n+    # Simplifying acos of the dot product\n+    assert acos(r).simplify() == acos(cos(S(1)/50 - S(1)/25))\n+\n+    # Testing individual simplification\n+    r = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert r.simplify() == cos(S(1)/50 - S(1)/25)\n \n-def test_exptrigsimp():\n+    # trigsimp for verification\n+    assert trigsimp(r) == cos(S(1)/50 - S(1)/25)\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..bf8f31a 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,23 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_alignment():\n+    from sympy import Sum, oo, pprint\n+    from sympy.abc import x\n \n-def test_units():\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e    \\n\\\n+ ___   \\n\\\n+ \u2572     \\n\\\n+  \u2572   x\\n\\\n+  \u2571   + 3\\n\\\n+ \u2571     \\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  \\\n+\"\"\")\n+    assert upretty(expr) == ucode_str\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..9e72e60 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,6 +692,20 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.pytest import raises\n+\n+def test_uniq_modification():\n+    # Test modification of a list being iterated over with uniq\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = [1, 2, 2, 3, 1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = [[1], [2], [1], [2]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n def test_uniq():\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n",
  "django__django-11797": "",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..1b47f59 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,6 +546,29 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n+    def test_subquery_sql(self):\n+        # Test the original issue where Subquery.as_sql() generates invalid SQL.\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        self.assertTrue(sql.endswith(')'))\n+\n+    def test_subquery_sql_without_auto_setting(self):\n+        # Test creating a Subquery without explicitly setting subquery to True beforehand.\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        # Check if subquery flag is automatically set to True\n+        self.assertTrue(employees_subquery.query.subquery)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        # Verify the generated SQL is valid\n+        self.assertTrue(sql.startswith('(SELECT '))\n+        self.assertTrue(sql.endswith(')'))\n+\n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n",
  "django__django-15819": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 0ecd041..f7aa7c1 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -422,6 +422,23 @@ class InspectDBTestCase(TestCase):\n         Introspection errors should not crash the command, and the error should\n         be visible in the output.\n         \"\"\"\n+\n+    def test_related_name_auto_generation(self):\n+        \"\"\"\n+        Test that inspectdb generates related_name for fields that relate to the same model.\n+        \"\"\"\n+        out = StringIO()\n+        call_command(\"inspectdb\", \"inspectdb_peoplemoredata\", stdout=out)\n+        output = out.getvalue()\n+\n+        self.assertIn(\n+            \"people_unique = models.ForeignKey('InspectdbPeople', models.CASCADE, unique=True, related_name='inspectdbpeoplemoredata_people_unique_set')\",\n+            output,\n+        )\n+        self.assertIn(\n+            \"message = models.ForeignKey('InspectdbMessage', models.CASCADE, blank=True, null=True, related_name='inspectdbpeoplemoredata_message_set')\",\n+            output,\n+        )\n         out = StringIO()\n         with mock.patch(\n             \"django.db.connection.introspection.get_table_list\",\n@@ -434,6 +451,9 @@ class InspectDBTestCase(TestCase):\n         self.assertIn(\"# The error was:\", output)\n \n \n+from django.core.management import call_command\n+from io import StringIO\n+\n class InspectDBTransactionalTests(TransactionTestCase):\n     available_apps = [\"inspectdb\"]\n \n",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..f59e014 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,4 +1,5 @@\n-from django.db.models import FilteredRelation\n+\n+from django.db.models import FilteredRelation, Q\n from django.test import TestCase\n \n from .models import Organiser, Pool, PoolStyle, Tournament\n@@ -152,6 +153,15 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +173,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..1b168ea 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,24 @@\n+\n+def test_unpickle_dpi_remains_constant():\n+    # Initial DPI value\n+    initial_dpi = 200\n+\n+    # Create a figure with a specific DPI\n+    fig = Figure(dpi=initial_dpi)\n+\n+    # Serialize and deserialize the figure\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+\n+    # Assert the DPI remains unchanged after unpickling\n+    assert fig2.dpi == initial_dpi\n+\n+def test_unpickle_with_device_pixel_ratio():\n+    fig = Figure(dpi=42)\n+    fig.canvas._set_device_pixel_ratio(7)\n+    assert fig.dpi == 42*7\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+    assert fig2.dpi == 42\n+\n import copy\n from datetime import datetime\n import io\n@@ -13,6 +34,8 @@ from PIL import Image\n \n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n+import pickle\n+from matplotlib.figure import Figure\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n from matplotlib.figure import Figure, FigureBase\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..0d0a25b 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,8 +1,12 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n import matplotlib.pyplot as plt\n from matplotlib.colors import same_color, to_rgba\n+import seaborn as sns\n+import pandas as pd\n+from seaborn._oldcore import categorical_order\n \n import pytest\n from numpy.testing import assert_array_equal\n@@ -1623,7 +1627,16 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_issue_pairgrid_hue(self):\n+        iris = sns.load_dataset(\"iris\")\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\",\"sepal_width\"], x_vars=[\"petal_length\",\"petal_width\"])\n+        # Test if we can use hue in map as intended without error\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            plt.close(g.fig)  # Close the plot to avoid unnecessary GUI windows in tests\n+        except Exception as e:\n+            self.fail(f\"PairGrid with hue in map raised an exception: {e}\")\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..3d90697 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,6 +323,24 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n+import pytest\n+\n+def test_raises_str_behavior():\n+    # Test the behavior described in the issue\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\n+            f\"A\\n\"\n+            f\"B\\n\"\n+            f\"C\"\n+        )\n+    # Ensure str(excinfo) does not give the same as str(excinfo.value)\n+    assert str(excinfo) != str(excinfo.value)\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+    # Check the repr of the exception info\n+    assert repr(excinfo) == \"<ExceptionInfo LookupError tblen=1>\"\n+    # The issue is expecting the full message to be accessed via .value\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n def test_excinfo_exconly():\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n",
  "pytest-dev__pytest-6116": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 4808225..8b57234 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -108,7 +108,7 @@ def pytest_addoption(parser):\n     group = parser.getgroup(\"collect\", \"collection\")\n     group.addoption(\n         \"--collectonly\",\n-        \"--collect-only\",\n+        \"-C\", \"--collect-only\",\n         action=\"store_true\",\n         help=\"only collect tests, don't execute them.\",\n     ),\n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..916e129 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -83,6 +83,17 @@ def complex_func(arg1, arg2, arg3=None, *args, **kwargs):\n     pass\n \n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n def missing_attr(c,\n                  a,  # type: str\n                  b=None  # type: Optional[str]\n@@ -98,4 +109,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..2ee05e1 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,17 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, symbols, MatrixSymbol, Identity, Sum\n \n-def test_Identity_doit():\n+def test_Identity_sum():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+\n+    # Test Sum over the entire matrix, expecting 'n'\n+    assert Sum(Sum(In[i, j], (i, 0, n - 1)), (j, 0, n - 1)).doit() == n\n+    # Test with substitution for specific n\n+    assert Sum(Sum(In[i, j], (i, 0, 4 - 1)), (j, 0, 4 - 1)).doit() == 4\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..81ca0b4 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -246,6 +246,13 @@ GOOD_PAIRS = [\n ]\n \n \n+def test_issue_21537_fraction_parsing():\n+    from sympy.parsing.latex import parse_latex\n+    expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    expected_expr = ((a**3 + b)/c)/(1/(c**2))\n+    assert expr == expected_expr, f\"Expected {expected_expr}, but got {expr}\"\n+\n+\n def test_parseable():\n     from sympy.parsing.latex import parse_latex\n     for latex_str, sympy_expr in GOOD_PAIRS:\n"
}