{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..b9cb149 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,20 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+def test_issue_XXXXX_separability_nested_compound_model():\n+    \"\"\"\n+    Test for the correct separability matrix computation for nested compound models\n+    as described in the issue report.\n+    \"\"\"\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+\n+    expected_matrix = np.array([[True,  True, False, False],\n+                                [True,  True, False, False],\n+                                [False, False,  True, False],\n+                                [False, False, False,  True]])\n+    \n+    assert_allclose(separability_matrix(nested_cm), expected_matrix)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..f7e023e 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,15 +1,57 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n \n+from contextlib import suppress\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n from .common import assert_almost_equal, assert_equal\n \n \n def assert_equal_splitlines(arg1, arg2):\n     assert_equal(arg1.splitlines(), arg2.splitlines())\n \n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing a table with header_rows specified in RST format.\"\"\"\n+\n+    # Setup the table\n+    tbl = QTable(\n+        {'wave': [350.0, 950.0], 'response': [1.0, 2.0], 'ints': [1, 2]},\n+        meta={'wave': {'unit': u.nm}, 'response': {'unit': u.ct},\n+              'ints': {'dtype': np.int8}}\n+    )\n+\n+    # Capture written output with headers\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    \n+    # Define expected lines with extra header lines included\n+    expected_lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    \n+    assert out.getvalue().splitlines() == expected_lines\n+\n+def test_unsupported_header_rows_in_rst():\n+    \"\"\"Test if unsupported header rows raise errors as expected.\"\"\"\n+\n+    tbl = QTable({'wave': [350.0, 950.0], 'response': [0.7, 1.2]})\n+\n+    with suppress(Exception) as e:\n+        tbl.write(format=\"ascii.rst\", header_rows=[\"unsupported\"])\n+    \n+    # Check if the exception is indeed raised\n+    assert e is not None\n+\n \n def test_read_normal():\n     \"\"\"Normal SimpleRST Table\"\"\"\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..00593e3 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -43,6 +43,12 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n \n+import pytest\n+import numpy as np\n+from astropy.table import Table\n+from astropy.utils.exceptions import AstropyUserWarning\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+\n def test_roundtrip(tmp_path):\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..6fbf6dc 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,30 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+\n+def test_nddata_bitmask_no_error_on_incomplete_mask():\n+    \"\"\"\n+    Test that NDDataRef does not raise a TypeError when performing\n+    operations with a masked and an unmasked operand.\n+    \"\"\"\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # No error should occur, and the mask should propagate correctly\n+    result_mask_const = nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\n+    np.testing.assert_equal(result_mask_const, mask, \n+                            \"Mask with constant multiplication failed\")\n+\n+    result_mask_nomask = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\n+    np.testing.assert_equal(result_mask_nomask, mask,\n+                            \"Mask with operand without a mask failed\")\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..d4a6f17 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -299,8 +299,23 @@ class TestTableFunctions(FitsTestCase):\n         assert comparerecords(hdu.data, hdul[1].data)\n         hdul.close()\n         a.close()\n-\n-    def test_endianness(self):\n+    def test_d_exponent_in_ascii_table(self):\n+        # Create an ASCII table with a D format floating-point column\n+        r1 = np.array([123.456e-2, 7.89e1, 1.23456789e4])\n+        c1 = fits.Column(name='float_column', format='D14.7E', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+\n+        # Open the file and check the data representation\n+        with open(self.temp('test_d_exponent.fits')) as f:\n+            content = f.read()\n+            assert '1.2345600D+00' in content\n+            assert '7.8900000D+01' in content\n+            assert '1.2345680D+04' in content\n+\n+        # Read back the table and verify the column data\n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n         x = np.ndarray((1,), dtype=object)\n         channelsIn = np.array([3], dtype='uint8')\n         x[0] = channelsIn\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..255894d 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,6 +1100,14 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        By default, FILE_UPLOAD_PERMISSIONS should be set to 0o644.\n+        This should be reflected in the default_storage.file_permissions_mode.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..176399e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -376,7 +376,37 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 2)\n \n-    def test_order_by_exists(self):\n+    def test_order_by_multiline_rawsql(self):\n+        # We will test the multiline RawSQL order by and ensure it handles similar but not equivalent lines correctly.\n+\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN num_employees > 500 \n+                     THEN num_chairs \n+                     ELSE 0 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN num_chairs > 10 \n+                     THEN 1 \n+                     ELSE 0 END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN revenue > 100000 \n+                     THEN 3 \n+                     ELSE 0 END\n+            ''', []).desc()\n+        )\n+\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                # The expected order should be based on descending num_chairs and revenue as expressed above.\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [self.example_inc, self.gmbh, self.foobar_ltd],\n+                )\n         mary = Employee.objects.create(firstname='Mary', lastname='Mustermann', salary=20)\n         mustermanns_by_seniority = Employee.objects.filter(lastname='Mustermann').order_by(\n             # Order by whether the employee is the CEO of a company\n",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..bcd1f40 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -615,6 +615,22 @@ class MigrateTests(MigrationTestBase):\n         if connection.ops.start_transaction_sql():\n             self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)\n         self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+    \n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_sqlmigrate_for_non_transactional_databases(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support\n+        transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n \n     @override_settings(\n         INSTALLED_APPS=[\n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..a11cd16 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +250,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", \"trailingnewline\\n\"]\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +258,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..7a905aa 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,16 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        # Basic test with memoryview during initialization\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+        # Test setting content via the property to memoryview\n+        r = HttpResponse()\n+        r.content = memoryview(b'another memoryview')\n+        self.assertEqual(r.content, b'another memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..b0db633 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -464,7 +466,26 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a user instance\n+        u = User.objects.create()\n+        # Ensure user can be fast-deleted\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the user and check if the primary key is set to None\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_with_dependencies_pk_retained(self):\n+        # Create related objects (e.g., User with dependency Avatar)\n+        a = Avatar.objects.create(desc='dependent')\n+        u = User.objects.create(avatar=a)\n+        # Ensure user cannot be fast-deleted due to dependencies\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(u))\n+        # Delete the user and check if primary key is retained due to dependencies\n+        u.delete()\n+        self.assertIsNotNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..4e53b40 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,3 +1,4 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n@@ -5,6 +6,7 @@ from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n \n+from django.test.utils import captured_stdout\n from .models import Proxy, UserProxy\n \n update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')\n@@ -140,7 +142,30 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_no_duplicate_permissions_for_proxy_model(self):\n+        \"\"\"\n+        Ensure migration does not attempt to create duplicate permissions\n+        for proxy models if they already exist.\n+        \"\"\"\n+        # Setup a proxy model permission already existing in the database.\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        existing_permission = Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        \n+        # Capture output and run migration function.\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        \n+        # Check the captured output for clues of duplication attempts.\n+        self.assertNotIn('duplicate key value violates unique constraint', stdout.getvalue())\n+        # Verify the permission is not duplicated.\n+        self.assertEqual(Permission.objects.filter(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy'\n+        ).count(), 1)\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..ac6b2a6 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -17,7 +17,7 @@ from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n-from django.utils.autoreload import WatchmanUnavailable\n+from django.utils.autoreload import WatchmanUnavailable, StatReloader\n \n from .utils import on_macos_with_hfs\n \n@@ -97,6 +97,39 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 autoreload.check_errors(import_module)('test_exception')\n         self.assertFileFound(filename)\n \n+    def test_manage_py_is_reloaded(self):\n+        \"\"\"\n+        Verify that changes to manage.py trigger the autoreloader.\n+        This replicates the scenario described in the issue.\n+        \"\"\"\n+        # Simulate the manage.py environment\n+        manage_py_content = \"\"\"\n+        import os\n+        def main():\n+            print('This is a test for autoreload')\n+            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n+        \"\"\"\n+        \n+        manage_py_file = self.temporary_file('manage.py')\n+        manage_py_file.write_text(manage_py_content)\n+\n+        # Make the autoreloader watch the manage.py file\n+        with extend_sys_path(str(manage_py_file.parent)):\n+            self.import_and_cleanup('manage')\n+        \n+        # Check that the file is included initially\n+        self.assertFileFound(manage_py_file)\n+\n+        # Simulate file modification\n+        manage_py_file.write_text(manage_py_content + \"\\nprint('Modification')\")\n+\n+        # Create a StatReloader instance and check for changes\n+        reloader = StatReloader()\n+        file_changed = reloader.code_changed()\n+        \n+        # Verify the reloader detected the change\n+        self.assertTrue(file_changed)\n+\n     def test_zip_reload(self):\n         \"\"\"\n         Modules imported from zipped files have their archive location included\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..0b9c09f 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -6,6 +6,9 @@ import sys\n import tempfile\n import threading\n from io import StringIO\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n+from django.test import override_settings\n from pathlib import Path\n from unittest import mock\n \n@@ -242,7 +245,18 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n-    def test_handle_db_exception(self):\n+    @override_settings(DEBUG=True)\n+    def test_technical_404_converter_raise_404_with_debug(self):\n+        \"\"\"\n+        Ensure a detailed technical 404 response is returned when DEBUG is True\n+        and Http404 is raised in a path converter's to_python method.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            # Check if the response contains debug-specific info, like the exception type\n+            self.assertContains(response, 'Http404', status_code=404)\n+            self.assertContains(response, 'Raised by:', status_code=404)\n+            self.assertContains(response, 'to_python', status_code=404)\n         \"\"\"\n         Ensure the debug view works when a database exception is raised by\n         performing an invalid query and passing the exception to the debug view.\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..35f48ab 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -212,9 +212,37 @@ class CharFieldTests(SimpleTestCase):\n \n         self.assertEqual(ThingWithIterableChoices._meta.get_field('thing').check(), [])\n \n-    def test_choices_containing_non_pairs(self):\n+    def test_choices_max_length_too_short(self):\n         class Model(models.Model):\n-            field = models.CharField(max_length=10, choices=[(1, 2, 3), (1, 2, 3)])\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('OK', 'Good'),\n+                    ('TooLong', 'Value is too long!')\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (7 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_choices_max_length_exact(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=7,\n+                choices=[\n+                    ('OK', 'Good'),\n+                    ('Exactly7', 'Exact Length')\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n \n         class Model2(models.Model):\n             field = models.IntegerField(choices=[0])\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..d74533b 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -252,7 +252,19 @@ class WriterTests(SimpleTestCase):\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n-    def test_serialize_enums(self):\n+    def test_enum_serialization_with_translatable_default(self):\n+        from django.utils.translation import gettext_lazy as _\n+        class TranslatableStatus(enum.Enum):\n+            GOOD = _('Good')  # This will be translated\n+            BAD = _('Bad')    # This will be translated\n+\n+        field = models.CharField(default=TranslatableStatus.GOOD, max_length=128)\n+        string = MigrationWriter.serialize(field)[0]\n+        \n+        self.assertEqual(\n+            string,\n+            \"models.CharField(default=tests.migrations.test_writer.TranslatableStatus['GOOD'], max_length=128)\"\n+        )\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..6d7ff09 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -320,7 +322,27 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_asctime(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_future_years(self, mocked_datetime):\n+        \"\"\"\n+        Test RFC850 parsing to ensure two-digit years more than 50 years\n+        in the future are resolved correctly.\n+        \"\"\"\n+        # Mock datetime to specific years and test parsing.\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        test_years = [\n+            (datetime(2023, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-72 08:49:37 GMT', datetime(1972, 12, 31, 8, 49, 37)),\n+            (datetime(2023, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-74 08:49:37 GMT', datetime(1974, 12, 31, 8, 49, 37)),\n+            (datetime(2075, 11, 6, 8, 49, 37), 'Friday, 31-Dec-25 08:49:37 GMT', datetime(2025, 12, 31, 8, 49, 37)),\n+            (datetime(2075, 11, 6, 8, 49, 37), 'Friday, 31-Dec-80 08:49:37 GMT', datetime(1980, 12, 31, 8, 49, 37)),\n+        ]\n+        \n+        for current_datetime, rfc850_date, expected in test_years:\n+            with self.subTest(rfc850_date=rfc850_date):\n+                mocked_datetime.utcnow.return_value = current_datetime\n+                parsed = parse_http_date(rfc850_date)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected)\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..cde8ff7 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -40,7 +40,30 @@ class Gender(models.TextChoices):\n     __empty__ = '(Undeclared)'\n \n \n-class ChoicesTests(SimpleTestCase):\n+from django.test import TestCase\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..7dc81d2 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,6 +168,16 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_iterator_choices(self):\n         \"\"\"\n         get_choices() works with Iterators.\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..969f1d4 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -14,4 +14,5 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.modules, name='modules-test-case'),\n+]\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..e18fe62 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,26 @@\n+\n+class OverriddenChoiceDisplayTests(TestCase):\n+\n+    def test_overriding_inherited_field_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A'), ('B', 'Base B')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')])\n+\n+        # Create test cases where the inherited model 'Child' is instantiated\n+        # and its 'get_foo_display()' method is verified for all defined choices.\n+\n+        # Verify that the overridden choice 'A' gives 'Child A'\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        # Verify that the overridden choice 'B' gives 'Child B'\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+        # Verify that the newly added choice 'C' gives 'Child C'\n+        self.assertEqual(Child(foo='C').get_foo_display(), 'Child C')\n+\n import pickle\n \n from django import forms\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..a19faf9 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,6 +76,27 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('en', 'English'),\n+        ],\n+    )\n+    def test_no_error_with_base_language_available(self):\n+        # Test that no error is raised when a sublanguage is specified and a base language is available.\n+        tags_with_base = [\n+            'de-at',  # German with Austrian sublanguage\n+            'es-mx',  # Spanish with Mexican sublanguage\n+            'fr-ca',  # French with Canadian sublanguage\n+            'en-gb',  # English with British sublanguage\n+        ]\n+        for tag in tags_with_base:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/models.py b/tests/backends/models.py\nindex 92e2c37..64a715d 100644\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -95,7 +95,7 @@ class Object(models.Model):\n \n \n class ObjectReference(models.Model):\n-    obj = models.ForeignKey(Object, models.CASCADE, db_constraint=False)\n+    obj = models.ForeignKey(Object, models.CASCADE, db_constraint=False, related_name='objectreference_set')\n \n     def __str__(self):\n         return str(self.obj_id)\n",
  "django__django-12497": "",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..81254f9 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,6 +1249,41 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n     def test_request_meta_filtering(self):\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..542bb81 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1756,6 +1756,60 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(definition[2], {'name': \"Pony\", 'index_together': {(\"pink\", \"weight\")}})\n \n     def test_alter_index_together_remove(self):\n+        # Test scenario where unique_together and index_together have overlapping fields\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        \n+        # Add index_together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Intentionally try removing index_together and verify the behavior\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+    def test_alter_index_together_with_no_unique_together(self):\n+        # Test removing index_together when there is no unique_together\n+        app_label = 'test_alinorunique'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label)\n+        \n+        # Add index_together without unique_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Remove index_together where there is no unique_together associated\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        \n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..8663069 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -530,7 +530,33 @@ class DeletionTests(TestCase):\n         for k, v in existed_objs.items():\n             self.assertEqual(deleted_objs[k], v)\n \n-    def test_model_delete_returns_num_rows(self):\n+    def test_queryset_delete_zero_objects_with_fk(self):\n+        \"\"\"\n+        QuerySet.delete() should consistently return (0, {'app.Model': 0})\n+        when no objects are deleted, for models with foreign keys.\n+        \"\"\"\n+        R.objects.create()\n+        deleted, deleted_objs = R.objects.none().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {\n+            R._meta.label: 0,\n+            HiddenUser._meta.label: 0,\n+            A._meta.label: 0,\n+            MR._meta.label: 0,\n+            HiddenUserProfile._meta.label: 0,\n+        })\n+\n+    def test_queryset_delete_zero_objects_without_fk(self):\n+        \"\"\"\n+        QuerySet.delete() should consistently return (0, {'app.Model': 0})\n+        when no objects are deleted, for models without foreign keys.\n+        \"\"\"\n+        BL.objects.create(name='test')\n+        deleted, deleted_objs = BL.objects.none().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {\n+            BL._meta.label: 0,\n+        })\n         \"\"\"\n         Model.delete() should return the number of deleted rows and a\n         dictionary with the number of deletions for each object type.\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..f3b0deb 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -94,6 +94,55 @@ class ASGITest(SimpleTestCase):\n             ),\n         )\n         await communicator.send_input({'type': 'http.request'})\n+\n+class TestASGIStaticFilesHandler(SimpleTestCase):\n+    async_request_factory = AsyncRequestFactory()\n+\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        cls.TEST_STATIC_ROOT = Path(__file__).parent / 'static_test'\n+        cls.TEST_STATIC_ROOT.mkdir(exist_ok=True)\n+        with open(cls.TEST_STATIC_ROOT / 'file.txt', 'w') as f:\n+            f.write('Test file content')\n+        with open(cls.TEST_STATIC_ROOT / 'empty.txt', 'w') as f:\n+            f.write('')\n+        os.makedirs(cls.TEST_STATIC_ROOT / 'text', exist_ok=True)\n+        with open(cls.TEST_STATIC_ROOT / 'text' / 'plain.txt', 'w') as f:\n+            f.write('This is a plain text file.')\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        shutil.rmtree(cls.TEST_STATIC_ROOT)\n+        super().tearDownClass()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static_test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_not_found(self):\n+        request = self.async_request_factory.get('/static_test/does_not_exist.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n+    async def test_get_async_empty_file(self):\n+        request = self.async_request_factory.get('/static_test/empty.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'')\n+\n+    async def test_get_async_different_mime_type(self):\n+        request = self.async_request_factory.get('/static_test/text/plain.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertIn(b'This is a plain text file.', response.content)\n+        self.assertEqual(response['Content-Type'], 'text/plain')\n         response_start = await communicator.receive_output()\n         self.assertEqual(response_start['type'], 'http.response.start')\n         self.assertEqual(response_start['status'], 200)\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..505d46c 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -188,7 +188,7 @@ class TestUtilsText(SimpleTestCase):\n         self.assertEqual(lazy_numeric, '0800 3569377')\n \n     def test_slugify(self):\n-        items = (\n+        items = [\n             # given - expected - Unicode?\n             ('Hello, World!', 'hello-world', False),\n             ('spam & eggs', 'spam-eggs', False),\n@@ -197,7 +197,40 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n-        )\n+        ]\n+\n+        # Original test patch cases\n+        original_test_items [\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\t whitespace-in-value \\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore_in-value', False),\n+            ('__strip__underscore-value___', 'strip__underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+        ]\n+\n+        for value, output, is_unicode in items + original_test_items:\n+            self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n+            \n+        # Additional test cases to ensure full coverage of the issue fix\n+        additional_test_cases = [\n+            # Confirming that leading/trailing underscores and dashes are stripped\n+            ('---test---', 'test', False),\n+            ('___test___', 'test', False),\n+            ('-_mixed_-', 'mixed'),\n+            # Multiple leading and trailing separators\n+            ('---_ leading and trailing _---', 'leading-and-trailing', False),\n+            # Single dash between words\n+            ('word1---word2', 'word1-word2', False),\n+            # Single underscore between words\n+            ('word1___word2', 'word1-word2', False),\n+            # Ensure Unicode behavior is unaffected\n+            ('\u011f\u0131_\u00fc\u00e7\u015f', '\u011f\u0131-\u00fc\u00e7\u015f', True),\n+        ]\n+\n+        for value, output, is_unicode in additional_test_cases:\n+            self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n         # interning the result may be useful, e.g. when fed to Path.\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..25b9026 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2832,6 +2832,72 @@ class LimitChoicesToTests(TestCase):\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n         widget = forms.Textarea()\n",
  "django__django-13321": "",
  "django__django-13401": "",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..117b9f9 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField, CustomUser, IntegerUsernameUser\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -18,6 +20,46 @@ class MockedPasswordResetTokenGenerator(PasswordResetTokenGenerator):\n \n \n class TokenGeneratorTest(TestCase):\n+    def test_token_invalidation_on_email_change(self):\n+        \"\"\"Test that updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (CustomUser, 'test4@example.com'),\n+            (IntegerUsernameUser, 'test5@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                # Change the user's email address\n+                setattr(user, user.get_email_field_name(), 'newemail@example.com')\n+                user.save()\n+                # Ensure the token is invalidated\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n+    def test_token_validity_after_email_change_and_request_new_token(self):\n+        \"\"\"Test that a new token is valid after email change and request.\"\"\"\n+        user = CustomUser.objects.create_user(\n+            'newemailuser',\n+            email='valid@example.com',\n+            password='testpw',\n+        )\n+        p0 = PasswordResetTokenGenerator()\n+        # Generate and invalidate the old token\n+        tk1 = p0.make_token(user)\n+        setattr(user, user.get_email_field_name(), 'newvalid@example.com')\n+        user.save()\n+        self.assertIs(p0.check_token(user, tk1), False)\n+        # Request a new token\n+        tk2 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk2), True)\n \n     def test_make_token(self):\n         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..2c61235 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -886,6 +887,34 @@ class IterableLookupInnerExpressionsTests(TestCase):\n \n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n+    def test_range_lookup_named_tuple_boundaries(self):\n+        from collections import namedtuple\n+        EmployeeRange = namedtuple('EmployeeRange', ['lower', 'upper'])\n+        \n+        # Testing with namedtuple where range is exactly on boundary\n+        range_on_boundary = EmployeeRange(lower=99, upper=99)\n+        qs = Company.objects.filter(num_employees__range=range_on_boundary)\n+        self.assertQuerysetEqual(qs, [self.c5])\n+\n+        # Testing with namedtuple where range is outside\n+        range_outside = EmployeeRange(lower=0, upper=50)\n+        qs = Company.objects.filter(num_employees__range=range_outside)\n+        self.assertQuerysetEqual(qs, [])\n+\n+        # Edge case: Testing with extreme values\n+        extreme_range = EmployeeRange(lower=-999999, upper=999999)\n+        qs = Company.objects.filter(num_employees__range=extreme_range)\n+        self.assertQuerysetEqual(qs, [self.c5, self.c1, self.c2, self.c3, self.c4])\n+\n+    def test_range_lookup_named_tuple_invalid(self):\n+        from collections import namedtuple\n+        EmployeeRange = namedtuple('EmployeeRange', ['min', 'max'])\n+        \n+        # Testing with an invalid namedtuple (only one element)\n+        with self.assertRaises(TypeError):\n+            incomplete_range = EmployeeRange(min=1)  # Missing 'max'\n+            Company.objects.filter(num_employees__range=incomplete_range)\n+        \n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n         \"\"\"\n         This tests that SQL injection isn't possible using compilation of\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..a46fd01 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -28,10 +28,36 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n \n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_custom_argv(self):\n+        \"\"\"\n+        Test that the CommandParser uses the correct prog name from a custom argv, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-custom-admin'] + args)\n+        self.assertIn('usage: django-custom-admin migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_fallback_to_sys_argv(self):\n+        \"\"\"\n+        Test that CommandParser falls back to sys.argv[0] when custom argv is not provided.\n+        \"\"\"\n+        args = ['help', 'check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            execute_from_command_line(args)\n+        self.assertIn('usage: ', out.getvalue())  # Expect default behavior usage message without a specific prog name\n+        self.assertIn('check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..eec22f3 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -6,10 +7,45 @@ from django import __version__\n from django.core.management import CommandError, call_command\n from django.test import SimpleTestCase\n from django.test.utils import captured_stdin, captured_stdout\n-\n+import select\n+script_globals = 'print(\"__name__\" in globals())'\n+script_with_inline_function = (\n+    'import django\\n'\n+    'def f():\\n'\n+    '    print(django.__version__)\\n'\n+    'f()'\n+)\n \n class ShellCommandTestCase(SimpleTestCase):\n \n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     def test_command_option(self):\n         with self.assertLogs('test', 'INFO') as cm:\n             call_command(\n@@ -49,4 +85,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..b6a3a2f 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,6 +1013,35 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n+    def test_verbose_name_defaults_to_plural(self):\n+        class DefaultVerboseNameInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Default verbose child'\n+\n+        class DefaultVerboseNameWithPluralInline(TabularInline):\n+            model = VerboseNameCollection\n+            verbose_name = 'Default plural child'\n+        \n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            DefaultVerboseNameInline,\n+            DefaultVerboseNameWithPluralInline,\n+        ]\n+\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Test default verbose_name_plural from verbose_name\n+        self.assertContains(response, '<h2>Default verbose childs</h2>') \n+        self.assertContains(response, 'Add another Default verbose child')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n+        # Test with verbose name being set, plural falls back to model\n+        self.assertContains(response, '<h2>Default plural children</h2>')\n+        self.assertContains(response, 'Add another Default plural child')\n+\n     def test_both_verbose_names_inline(self):\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n",
  "django__django-13757": "",
  "django__django-13768": "",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..aa4653b 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -408,10 +408,47 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n-    @isolate_apps('check_framework.apps.CheckPKConfig', kwarg_name='apps')\n+    def test_explicit_inherited_pk(self):\n+        # Test that inherited primary keys do not cause W042 warning.\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_auto_created_inherited_pk_no_warning_on_inherit(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        warnings = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertTrue(all(warning.id != 'models.W042' for warning in warnings))\n+\n+    def test_auto_created_inherited_parent_link_no_warning_on_inherit(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        warnings = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertTrue(all(warning.id != 'models.W042' for warning in warnings))\n     def test_app_default_auto_field(self, apps):\n         class ModelWithPkViaAppConfig(models.Model):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..ea8e654 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -288,8 +288,18 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n         ChoiceModel.objects.create(pk=3, name='c')\n-\n-        # ModelChoiceField\n+    def test_modelchoicefield_value_placeholder(self):\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': 'INVALID CHOICE',\n@@ -307,4 +317,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..9686e0e 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,7 +17,15 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n-    def test_combine_or_both_empty(self):\n+    def test_dict_keys_with_or_operator(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+    def test_dict_keys_with_and_operator(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n         self.assertEqual(Q() | Q(), Q())\n \n     def test_combine_not_q_object(self):\n",
  "django__django-14017": "",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..87fc6f5 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1146,6 +1146,8 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..765af51 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,5 +1,7 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n+from django.test import override_settings\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n \n@@ -66,7 +68,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +104,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..4c6e3f3 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2197,6 +2197,13 @@ class StartApp(AdminScriptTestCase):\n                     \"make sure the directory is a valid identifier.\" % bad_target\n                 )\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n     def test_importable_target_name(self):\n         _, err = self.run_django_admin(['startapp', 'app', 'os'])\n         self.assertOutput(\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..50d235c 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,7 +1020,19 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_hash_widget_label(self):\n+        \"\"\"\n+        Test that ReadOnlyPasswordHashWidget does not inadvertently create a 'for'\n+        attribute in its <label> tag when there isn't an associated labelable element.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        # Ensure 'for' attribute is not generated \n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        # Ensure correct label is generated without 'for' attribute\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-14580": "",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..2fddd66 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,9 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors, ['Please submit at most 1 form.'])\n+        self.assertIn('class=\"errorlist nonform\"', str(formset.non_form_errors()))\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +360,9 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors, ['Please submit at least 3 forms.'])\n+        self.assertIn('class=\"errorlist nonform\"', str(formset.non_form_errors()))\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +986,24 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors, ['You may only specify a drink once.'])\n+        self.assertIn('class=\"errorlist nonform\"', str(formset.non_form_errors()))\n+\n+    def test_formset_no_errors(self):\n+        \"\"\"\n+        Test a formset with no non-form errors to check that no additional\n+        nonform class is applied.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '1',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-0-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertTrue(formset.is_valid())\n+        self.assertEqual(formset.non_form_errors(), [])\n+        self.assertNotIn('class=\"errorlist nonform\"', str(formset.non_form_errors()))\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..33f7a4c 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -31,6 +31,17 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        # Validate that the through_fields list is made hashable\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        \n+        inherited_reverse_m2m = Event.objects.first().invitees.through._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        \n+        # Ensuring that the hashing works now\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n+        \n     def test_get_on_intermediate_model(self):\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..6037db2 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -294,6 +294,67 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n+import datetime\n+from django.urls import reverse\n+from django.test import RequestFactory\n+from django.contrib.auth.models import User\n+from admin_views.models import Question\n+from django.test import TestCase\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+import json\n+\n+class TestAutocompleteJsonView(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        self.url = reverse('autocomplete')\n+        self.as_view_args = {'admin_site': 'admin'}\n+\n+    def test_serialize_result_with_default_fields(self):\n+        \"\"\"Test the serialize_result method with default fields.\"\"\"\n+        question = Question.objects.create(question='Default fields test', posted=datetime.date(2023, 10, 1))\n+        request = self.factory.get(self.url, {'term': 'default', **self.as_view_args})\n+        request.user = self.superuser\n+\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return super().serialize_result(obj, to_field_name)\n+\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        expected_result = {\n+            'results': [{'id': str(question.pk), 'text': question.question}],\n+            'pagination': {'more': False}\n+        }\n+        self.assertEqual(data, expected_result)\n+\n+    def test_serialize_result_with_custom_field(self):\n+        \"\"\"Test the serialize_result method with additional fields.\"\"\"\n+        question1 = Question.objects.create(question='Test Question 1', posted=datetime.date(2021, 8, 9))\n+        question2 = Question.objects.create(question='Test Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'Test', **self.as_view_args})\n+        request.user = self.superuser\n+\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {**super().serialize_result(obj, to_field_name), 'posted': str(obj.posted)}\n+\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        expected_data = {\n+            'results': [\n+                {'id': str(question1.pk), 'text': question1.question, 'posted': str(question1.posted)},\n+                {'id': str(question2.pk), 'text': question2.question, 'posted': str(question2.posted)},\n+            ],\n+            'pagination': {'more': False}\n+        }\n+        self.assertEqual(data, expected_data)\n+\n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..91e8cd6 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,7 +5085,50 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n-    def test_change_form_renders_correct_null_choice_value(self):\n+    from django.urls import reverse\n+    from django.contrib.admin.sites import site\n+    from .models import ReadOnlyRelatedField, Language, Chapter, Book\n+\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        superuser = self.superuser\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=superuser,\n+        )\n+        \n+        response = self.client.get(\n+            reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        self.assertEqual(response.status_code, 200)\n+        self.assertContains(\n+            response,\n+            reverse(f'{admin_site}:auth_user_change', args=(superuser.pk,)),\n+            msg_prefix=f\"URL generated for ForeignKey on {admin_site} admin site isn't correctly namespaced.\"\n+        )\n+        self.assertContains(\n+            response,\n+            reverse(f'{admin_site}:admin_views_language_change', args=(language.pk,)),\n+            msg_prefix=f\"URL generated for Language ForeignKey on {admin_site} admin site isn't correctly namespaced.\"\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields links on the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields links on a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('namespaced_admin')\n         \"\"\"\n         Regression test for #17911.\n         \"\"\"\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..58df676 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,44 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        c1 = Category.objects.create(name=\"category1\")\n+        c2 = Category.objects.create(name=\"category2\")\n+        value_1 = ModelChoiceIteratorValue(c1.pk, c1)\n+        value_2 = ModelChoiceIteratorValue(c2.pk, c2)\n+        # Ensure that the hash of the object with an instance matches the hash of an object with the same value and None instance\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(c1.pk, None)))\n+        # Ensure that objects with different values have different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_set_operations(self):\n+        c1 = Category.objects.create(name=\"Set Category 1\")\n+        c2 = Category.objects.create(name=\"Set Category 2\")\n+        value_1 = ModelChoiceIteratorValue(c1.pk, c1)\n+        value_2 = ModelChoiceIteratorValue(c2.pk, c2)\n+        test_set = set()\n+        test_set.add(value_1)\n+        # Ensure value_1 can be added to and searched in a set\n+        self.assertIn(value_1, test_set)\n+        # Ensure value_2 is not in the set containing only value_1\n+        self.assertNotIn(value_2, test_set)\n+        # Ensure removing and re-adding works correctly\n+        test_set.remove(value_1)\n+        self.assertNotIn(value_1, test_set)\n+        test_set.add(value_1)\n+        self.assertIn(value_1, test_set)\n+\n+    def test_choice_value_dict_key(self):\n+        c1 = Category.objects.create(name=\"Dict Category 1\")\n+        c2 = Category.objects.create(name=\"Dict Category 2\")\n+        value_1 = ModelChoiceIteratorValue(c1.pk, c1)\n+        value_2 = ModelChoiceIteratorValue(c2.pk, c2)\n+        test_dict = {value_1: \"value_1_data\"}\n+        # Ensure value_1 can be used effectively as a key in a dictionary\n+        self.assertEqual(test_dict[value_1], \"value_1_data\")\n+        # Ensure value_2 cannot be used to retrieve value_1's data\n+        with self.assertRaises(KeyError):\n+            _ = test_dict[value_2]\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..c7c07f3 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -790,10 +790,50 @@ class OperationTests(OperationTestBase):\n         rider = Rider.objects.create()\n         pony.riders.add(rider)\n         self.assertEqual(Pony.objects.count(), 2)\n+        self.test_rename_model_with_db_table_noop()\n+        self.test_rename_model_with_db_table_noop_backwards()\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n-    def test_rename_m2m_target_model(self):\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rename_model_with_db_table_noop'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+    def test_rename_model_with_db_table_noop_backwards(self):\n+        app_label = 'test_rename_model_with_db_table_noop'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..0c665ed 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,7 +154,19 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n-    def test_form_as_table_data(self):\n+    def test_multivaluewidget_label_without_for_attribute(self):\n+        class MultiWidgetForm(Form):\n+            datetime = SplitDateTimeField(widget=SplitDateTimeWidget())\n+\n+        form = MultiWidgetForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label>Datetime:</label></th>\n+            <td><input type=\"text\" name=\"datetime_0\" id=\"id_datetime_0\" required>\n+            <input type=\"text\" name=\"datetime_1\" id=\"id_datetime_1\" required></td></tr>\n+            \"\"\"\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..22ecbf5 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,6 +70,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            # URLPattern from the original issue\n+            '////]@N.AN',\n+            '#@A.bO',\n         ]\n         for url, expected in tests:\n             with self.subTest(url=url):\n@@ -100,6 +103,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # URLPattern from the original issue\n+            '////]@N.AN',\n+            '#@A.bO',\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..076e4fb 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -14,6 +14,7 @@ from django.db.models.functions import (\n from django.test import TestCase, skipUnlessDBFeature\n from django.test.utils import register_lookup\n \n+from django.db.utils import OperationalError\n from .models import (\n     Author, Book, Company, DepartmentStore, Employee, Publisher, Store, Ticket,\n )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..635b741 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -163,7 +164,18 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Ensure extra_tags are correctly serialized and deserialized.\n+        \"\"\"\n+        storage = self.get_storage()\n+\n+        for extra_tags in ['', None, 'some tags']:\n+            with self.subTest(extra_tags=extra_tags):\n+                message = Message(constants.INFO, \"Test message\", extra_tags=extra_tags)\n+                encoded_message = storage._encode(message)\n+                decoded_message = storage._decode(encoded_message)\n+                self.assertEqual(decoded_message.extra_tags, extra_tags)\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..98b03f3 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -39,7 +39,29 @@ class TemplateReloadTests(SimpleTestCase):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n         mock_reset.assert_not_called()\n \n-    def test_watch_for_template_changes(self):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_restart_dev_server_on_template_dir_change(self, mock_reset):\n+        # Simulate a configuration where BASE_DIR is included in the DIRS\n+        with override_settings(TEMPLATES=[{\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            'DIRS': [ROOT],\n+        }]):\n+            # Save or modify file in the directory structure\n+            template_path = ROOT / 'some_file.txt'\n+            self.assertIsNone(autoreload.template_changed(None, template_path))\n+            mock_reset.assert_not_called()\n+\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_restart_dev_server_on_template_file_change(self, mock_reset):\n+        # Simulate a configuration where BASE_DIR is included in the DIRS\n+        with override_settings(TEMPLATES=[{\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            'DIRS': [ROOT],\n+        }]):\n+            # Save or modify template file in the directory structure\n+            template_path = ROOT / 'template.html'\n+            self.assertTrue(autoreload.template_changed(None, template_path))\n+            mock_reset.assert_called_once()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n@@ -88,7 +110,29 @@ class TemplateReloadTests(SimpleTestCase):\n @require_jinja2\n @override_settings(INSTALLED_APPS=['template_tests'])\n class Jinja2TemplateReloadTests(SimpleTestCase):\n-    def test_watch_for_template_changes(self):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_restart_dev_server_on_template_dir_change(self, mock_reset):\n+        # Simulate a configuration where BASE_DIR is included in the DIRS\n+        with override_settings(TEMPLATES=[{\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            'DIRS': [ROOT],\n+        }]):\n+            # Save or modify file in the directory structure\n+            template_path = ROOT / 'some_file.txt'\n+            self.assertIsNone(autoreload.template_changed(None, template_path))\n+            mock_reset.assert_not_called()\n+\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_restart_dev_server_on_template_file_change(self, mock_reset):\n+        # Simulate a configuration where BASE_DIR is included in the DIRS\n+        with override_settings(TEMPLATES=[{\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            'DIRS': [ROOT],\n+        }]):\n+            # Save or modify template file in the directory structure\n+            template_path = ROOT / 'template.html'\n+            self.assertTrue(autoreload.template_changed(None, template_path))\n+            mock_reset.assert_called_once()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..349d39a 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,12 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Ensure was_modified_since can handle an empty If-Modified-Since header gracefully.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..8159092 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,6 +1,8 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n+from argparse import ArgumentDefaultsHelpFormatter\n \n from admin_scripts.tests import AdminScriptTestCase\n \n@@ -405,7 +407,16 @@ class CommandTests(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, msg):\n             management.call_command(\"subparser_dest\", subcommand=\"foo\", bar=12)\n \n-    def test_create_parser_kwargs(self):\n+    def test_customizable_format_help_output(self):\n+        \"\"\"Test whether the custom formatter maintains the expected help output format.\"\"\"\n+        epilog = \"Example usage:\\n  ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        cmd = BaseCommand()\n+        cmd.help = \"Import a contract from tzkt\\n\" + epilog\n+        parser = cmd.create_parser(\"manage.py\", \"tzkt_import\", formatter_class=ArgumentDefaultsHelpFormatter)\n+        help_output = parser.format_help()\n+        \n+        self.assertIn(\"usage:\", help_output)\n+        self.assertIn(\"Example usage:\\n  ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\", help_output)\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = \"some epilog text\"\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..1fd76dd 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,9 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n+import json\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -217,7 +219,36 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder_with_different_output(self):\n+        # Test custom encoder with different JSON structure\n+        class DifferentOutputEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"different\": \"output\"})\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=DifferentOutputEncoder),\n+            '<script type=\"application/json\">{\"different\": \"output\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_with_complex_object(self):\n+        # Test custom encoder on more complex Python object\n+        class ComplexEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                if isinstance(o, set):\n+                    return json.dumps({\"type\": \"set\", \"elements\": list(o)})\n+                return super().encode(o)\n+\n+        self.assertHTMLEqual(\n+            json_script(set([\"a\", \"b\", \"c\"]), encoder=ComplexEncoder),\n+            '<script type=\"application/json\">{\"type\": \"set\", \"elements\": [\"a\", \"b\", \"c\"]}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        # Ensure default encoder usage doesn't break\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..87eac68 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -186,7 +186,21 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 ],\n             )\n \n-    def test_template_tags_with_different_library_name(self):\n+    def test_template_tags_with_unique_names_in_libraries(self):\n+        # Test with unique identifiers even if the base module names are the same\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tag1\", \"unique_app_1.templatetags.same_tags\"\n+                ),\n+                self.get_settings(\n+                    \"unique_tag2\", \"unique_app_2.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None), []\n+            )\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n@@ -206,4 +220,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..38abf71 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,33 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_on_proxy_model(self):\n+        class CustomModel(TestCase):\n+            name = models.CharField(max_length=16)\n+\n+        class ProxyCustomModel(CustomModel):\n+            class Meta:\n+                proxy = True\n+\n+        class AnotherModel(TestCase):\n+            custom = models.ForeignKey(\n+                ProxyCustomModel,\n+                on_delete=models.SET_NULL,\n+                null=True,\n+                blank=True,\n+            )\n+\n+        # Creating instances of models\n+        custom_instance = ProxyCustomModel.objects.create(name=\"Custom Name\")\n+        AnotherModel.objects.create(custom=custom_instance)\n+\n+        # Try to select_related and only specific fields\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+\n+        # Fetching the result to see if there is no crash and the expected behavior is intact\n+        result = list(qs)\n+        self.assertEqual(result[0].custom.name, \"Custom Name\")\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..c4cfdeb 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,10 +151,10 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n-    def test_parameters(self):\n+    def test_parameters_correct_order(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n-            ([\"psql\", \"dbname\", \"--help\"], None),\n+            ([\"psql\", \"--help\", \"dbname\"], None),\n         )\n \n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n@@ -183,4 +183,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..a24014b 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,6 +1901,29 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.test import TestCase, override_settings\n+        from django.forms import formset_factory, BaseFormSet\n+        from .models import Choice\n+        from django.utils.lru_cache import wrap as isolate_lru_cache\n+        from django.forms.renderers import get_default_renderer\n+        import warnings\n+\n+        class ManagementFormDeprecationTest(TestCase):\n+            @override_settings(FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\")\n+            def test_no_management_form_warning(self):\n+                \"\"\"\n+                Test that no deprecation warning is raised when rendering\n+                a management form from a formset.\n+                \"\"\"\n+                with isolate_lru_cache(get_default_renderer), warnings.catch_warnings(record=True) as w:\n+                    warnings.simplefilter(\"always\")\n+                    ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                    formset = ChoiceFormSet()\n+                    str(formset.management_form)\n+                    self.assertFalse(any(\n+                        issubclass(warning.category, RemovedInDjango50Warning)\n+                        for warning in w\n+                    ))\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1932,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..4806f0e 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -179,6 +179,26 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n \n+    def test_empty_permitted_ignored_empty_form_false(self):\n+        from django.forms import modelformset_factory\n+        from .models import Article  # Assuming Article is a model in your test app.\n+\n+        ArticleFormSet = modelformset_factory(Article, fields=('title',))\n+\n+        # Test when empty_permitted is set to False\n+        formset_false = ArticleFormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertIs(formset_false.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_ignored_empty_form_true(self):\n+        from django.forms import modelformset_factory\n+        from .models import Article  # Assuming Article is a model in your test app.\n+\n+        ArticleFormSet = modelformset_factory(Article, fields=('title',))\n+\n+        # Test when empty_permitted is set to True\n+        formset_true = ArticleFormSet(form_kwargs={\"empty_permitted\": True})\n+        self.assertIs(formset_true.empty_form.empty_permitted, True)\n+\n     def test_formset_validation(self):\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..06cdf92 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,6 +161,18 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n+    def test_empty_and_none_inputs(self):\n+        # Test with an empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        \n+        # Test with None\n+        # This may need to be adjusted depending on how None is intended to be formatted.\n+        # Assuming the library formats None to a specific string, like \"None\" or a blank string, based on original patch.\n+        self.assertEqual(nformat(None, \".\"), \"\")\n+        \n+        # Test with zero, which should not be mistaken for null\n+        self.assertEqual(nformat(0, \".\"), \"0\")\n+\n     def test_decimal_subclass(self):\n         class EuroDecimal(Decimal):\n             \"\"\"\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..abd08e2 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -891,8 +892,45 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # ReadOnlyPasswordHashWidget needs the initial\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        import urllib.parse\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n \n-    def test_custom_form(self):\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_link_correct_format_via_pk(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..12216eb 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,8 +507,27 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from datetime import datetime\n+from django.test import TestCase, Client\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path, include\n+from django.contrib.sitemaps.views import index\n+\n+class CallableLastmodNoItemsSitemapTestCase(TestCase):\n+    def setUp(self):\n+        self.client = Client()\n+        self.sitemap_path = \"/callable-lastmod-no-items/index.xml\"\n \n-# RemovedInDjango50Warning\n+    def test_callable_sitemap_with_no_items_does_not_raise_valueerror(self):\n+        response = self.client.get(self.sitemap_path)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+<sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+</sitemapindex>\n+\"\"\"\n+        self.assertXMLEqual(response.content.decode(), expected_content_index)\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..697b897 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n@@ -7,6 +8,7 @@ import pickle\n import re\n import shutil\n import sys\n+from unittest import mock\n import tempfile\n import threading\n import time\n@@ -1763,6 +1765,35 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             self.assertIs(cache._is_expired(fh), True)\n \n \n+    def test_has_key_race_handling(self):\n+        from django.core.cache import cache  # Assuming the cache is properly set up.\n+        \n+        # Ensure key is present by adding it\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+\n+        # Simulate the file being deleted before opening\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_simultaneous_cache_access_with_deletion(self):\n+        from django.core.cache import cache  # Assuming the cache is properly set up.\n+        \n+        # Add a key to the cache\n+        key = \"key\"\n+        self.assertIs(cache.add(key, \"value\"), True)\n+        \n+        # Define a file delete function to simulate race condition\n+        def delete_cache_file():\n+            fname = cache._key_to_file(key)\n+            if os.path.exists(fname):\n+                os.remove(fname)\n+\n+        # Patch open and _is_expired to simulate deletion during access\n+        with mock.patch(\"os.path.exists\", side_effect=lambda fname: True), \\\n+             mock.patch(\"builtins.open\", side_effect=delete_cache_file):\n+            self.assertIs(cache.has_key(key), False)\n+\n @unittest.skipUnless(RedisCache_params, \"Redis backend not configured\")\n @override_settings(\n     CACHES=caches_setting_for_tests(\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..44fcd93 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n+from django.contrib.auth import get_permission_codename\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,6 +36,37 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # User with only change permission should not see \"save_as_new\"\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # A user with add and change permissions should see \"save_as_new\"\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..203b524 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,45 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def _test_alter_alter(self, alter_foo, alter_bar, expected):\n+        \"\"\"\n+        Two AlterField operations should collapse into the most recent meaningful one.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                alter_foo,\n+                alter_bar,\n+            ],\n+            expected,\n+        )\n+        \n+    def test_alter_alter_field(self):\n+        # Test case where one AlterField should collapse into the second one\n+        self._test_alter_alter(\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            ],\n+        )\n+\n+        # Test case where multiple AlterFields should result in the last operation\n+        self._test_alter_alter(\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+        )\n+\n+        # Test case where same AlterField operation doesn't need optimization\n+        self._test_alter_alter(\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            ],\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "",
  "django__django-17051": "",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..782c4d0 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -456,6 +456,29 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\",\n         )\n \n+    def test_serialize_nested_class_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\n+            \"default=<function migrations.test_writer.WriterTests.test_serialize_nested_class_method_as_default.<locals>.Profile.Capability.default>\",\n+            string,\n+        )\n+\n     def test_serialize_nested_class(self):\n         for nested_cls in [self.NestedEnum, self.NestedChoices]:\n             cls_name = nested_cls.__name__\n@@ -1032,4 +1055,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..4ed616b 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,25 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import rc_context, get_backend\n+\n+def test_get_backend_does_not_clear_figs_rc_context():\n+    # Ensure that calling `get_backend()` does not clear figures in Gcf.figs\n+    # when created inside an `rc_context`.\n+\n+    # Create a figure inside rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    # Call get_backend\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    # Check that the figures are not cleared\n+    assert before == after, '\\n' + before + '\\n' + after\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..281348a 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -20,8 +20,18 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_3d_axes(fig_test, fig_ref):\n+    # Test if 3D projection visibility can be turned off\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    # Reference should have default visibility\n+    for ax in [ax_test, ax_ref]:\n+        ax.scatter([1], [1], [1])\n \n-def test_aspect_equal_error():\n+    ax_test.set_visible(False)\n+    # fig_test should render without the ax_test, thus be empty\n+    fig_ref.clear()  # no axes visible, should compare equally\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..f081b14 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -773,6 +773,15 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n     for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n         assert mpl.colors.same_color(text.get_color(), color)\n \n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='Test label')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n+import pytest\n+import matplotlib.pyplot as plt\n \n def test_get_set_draggable():\n     legend = plt.legend()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..56cf9e5 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -246,13 +246,45 @@ def test_fonttype(fonttype):\n \n def test_linedash():\n     \"\"\"Test that dashed lines do not break PS output\"\"\"\n-    fig, ax = plt.subplots()\n+import io\n+from matplotlib.figure import Figure\n+import matplotlib.pyplot as plt\n+\n+def test_empty_line_title():\n+    \"\"\"\n+    Test saving a figure with a title that contains empty lines.\n+    \"\"\"\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.set_title('\\nTitle with\\nEmpty Line\\n')\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    assert buf.tell() > 0  # Ensure something was written to the buffer\n \n     ax.plot([0, 1], linestyle=\"--\")\n \n     buf = io.BytesIO()\n     fig.savefig(buf, format=\"ps\")\n \n+    print('Test complete for test_empty_line_title.')\n+\n+def test_empty_line_annotate():\n+    \"\"\"\n+    Test saving a figure with an annotated text that contains empty lines.\n+    \"\"\"\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\nAnnotated Text with\\nEmpty Line\\n', xy=(0.5, 0.5))\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    assert buf.tell() > 0  # Ensure something was written to the buffer\n+\n+def test_original_empty_line():\n+    # Original test expanded upon\n+    figure = Figure()\n+    figure.text(0.5, 0.5, '\\nText\\nWith\\nMultiple\\nEmpty\\nLines\\n\\n')\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n     assert buf.tell() > 0\n \n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..56dfe38 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,26 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+# Additional imports\n+import pytest\n+import matplotlib.pyplot as plt\n+import warnings\n+\n+@pytest.mark.parametrize('constrained_layout', [False])\n+def test_no_warning_with_constrained_layout_off(constrained_layout):\n+    a = np.linspace(0, 2*np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    \n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained_layout)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        plt.subplots_adjust(wspace=0)\n+        # Check that no warnings of the specific type are raised\n+        assert not any(issubclass(warning.category, UserWarning) and \n+                       \"a layout engine that is incompatible\" in str(warning.message)\n+                       for warning in w)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..6397cfc 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -90,6 +91,31 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n+def test_pickle_figure_with_draggable_legend():\n+    # Test pickling a figure with a draggable legend\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    \n+    ax.plot(time, speed, label=\"speed\")\n+    \n+    # Create a draggable legend\n+    legend = ax.legend()\n+    legend.set_draggable(True)\n+    \n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Test loading the pickled figure\n+    loaded_fig = pickle.loads(pkl)\n+    assert loaded_fig is not None\n+\n+    # Test that \"FigureCanvasQTAgg\" is not part of the pickle stream\n+    import pickletools\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+\n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..f958b92 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,32 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+from io import BytesIO\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Test that pickling the figure doesn't raise an exception\n+    pkl = pickle.dumps(fig)\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()\n+\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..0a6ea64 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,9 +9,42 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n+from seaborn._core.plot import Plot\n+import matplotlib.pyplot as plt\n+\n \n class TestPolyFit:\n \n+    def test_polyfit_with_missing_data(self):\n+        # Prepare data with missing values\n+        x = [1, 2, 3, None, 4]\n+        y = [1, 2, 3, 4, 5]\n+\n+        # Create a plot with PolyFit to test handling of missing data\n+        plot = Plot(x, y).add(so.Line(), so.PolyFit())\n+\n+        try:\n+            # Attempt to render the plot to check if it handles missing data\n+            plot.plot()\n+            plt.close()\n+            assert True, \"Plot with PolyFit rendered successfully with missing data\"\n+        except Exception as e:\n+            assert False, f\"Plot with PolyFit failed with error: {e}\"\n+\n+    def test_polyfit_on_cleaned_data(self, df):\n+        # Modify df fixture to include missing data\n+        df_missing = df.copy()\n+        df_missing.loc[5:10, \"x\"] = np.nan\n+\n+        groupby = GroupBy([\"group\"])\n+        # Test with missing data\n+        res1 = PolyFit()(df_missing[[\"x\", \"y\"]], groupby, \"x\", {\"order\": 2})\n+        # Test after dropping NaN values\n+        res2 = PolyFit()(df_missing.dropna(), groupby, \"x\", {\"order\": 2})\n+\n+        assert_frame_equal(res1, res2, check_dtype=False)\n+\n     @pytest.fixture\n     def df(self, rng):\n \n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..991dfba 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -708,6 +708,10 @@ class TestFacetGrid:\n                     assert tick.get_pad() == pad\n \n \n+import pandas as pd\n+import numpy as np\n+import seaborn as sns\n+\n class TestPairGrid:\n \n     rs = np.random.RandomState(sum(map(ord, \"PairGrid\")))\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..1cb094f 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,11 @@\n+\n import json\n import os\n import textwrap\n \n import pytest\n+import pathlib\n+import tomllib\n \n import flask\n \n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..d835f0d 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1635,8 +1635,34 @@ def test_prepared_request_complete_copy():\n     )\n     assert_copy(p, p.copy())\n \n+def test_urllib3_decodeerror():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    def mock_response(*args, **kwargs):\n+        raise DecodeError(\"Decoding failed\")\n+\n+    with pytest.raises(requests.exceptions.RequestException) as excinfo:\n+        with requests.sessions.Session() as session:\n+            session.get_adapter('http://').send = mock_response\n+            session.get('http://test')\n+\n+    assert \"Decoding failed\" in str(excinfo.value)\n+\n+\n+def test_urllib3_timeouterror():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    def mock_response(*args, **kwargs):\n+        raise TimeoutError(\"Request timed out\")\n+\n+    with pytest.raises(requests.exceptions.RequestException) as excinfo:\n+        with requests.sessions.Session() as session:\n+            session.get_adapter('http://').send = mock_response\n+            session.get('http://test')\n \n-def test_prepare_unicode_url():\n+    assert \"Request timed out\" in str(excinfo.value)\n     p = PreparedRequest()\n     p.prepare(\n         method='GET',\n@@ -1663,4 +1689,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..095d0da 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,25 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_iter_content_bytes(self):\n+        \"\"\"\n+        When called without decode_unicode, Response.iter_content should return bytes.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = 'ascii'\n+        chunks = r.iter_content(decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n+\n+    def test_response_iter_content_decode_fail(self):\n+        \"\"\"\n+        When called with decode_unicode and no encoding, Response.iter_content should return unchanged bytes.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = None\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..26debbd 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,6 +743,47 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    \n+    def test_register_multiple_hooks_via_init(self):\n+        \"\"\"Test registering multiple hooks through the initializer.\"\"\"\n+        def add_custom_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({'X-Custom': 'custom'})\n+\n+            return args\n+\n+        def add_another_custom_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({'X-Another-Custom': 'another'})\n+\n+            return args\n+\n+        def assert_headers_in_response(response, headers):\n+            for header, value in headers.items():\n+                assert response.request.headers.get(header) == value\n+\n+        # Define hooks as a list containing both functions\n+        hooks = [add_custom_header, add_another_custom_header]\n+\n+        # Create a Request instance with multiple hooks per event\n+        r = requests.models.Request(hooks={'args': hooks})\n+\n+        # Ensure that hooks are callable and added to the hooks list\n+        for hook in r.hooks['args']:\n+            assert callable(hook) is True\n+\n+        # Simulate a request sending and ensure both hooks modify the headers\n+        url = \"https://example.com/test\"\n+        response = requests.Request(method='GET', url=url, hooks={'args': hooks}).prepare()\n+        request_headers = {\n+            'X-Custom': 'custom',\n+            'X-Another-Custom': 'another'\n+        }\n+        assert_headers_in_response(response, request_headers)\n \n     def test_session_persistent_cookies(self):\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..b0bb82a 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim  # removed trailing whitespace\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..16eb1cf 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -19,6 +19,7 @@\n \"\"\"Tests for the misc checker.\"\"\"\n \n from pylint.checkers import misc\n+from pylint.testutils import set_config, CheckerTestCase, MessageTest, _tokenize_str\n from pylint.testutils import CheckerTestCase, MessageTest, _tokenize_str, set_config\n \n \n@@ -119,4 +120,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..45efaa7 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -56,6 +56,11 @@ reports = \"yes\"\n     check_configuration_file_reader(runner)\n \n \n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from pytest import CaptureFixture\n+\n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..d1c5f69 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1324,7 +1324,35 @@ class TestRunTC:\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n-                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+\n+    def test_ignore_path_recursive(self):\n+        \"\"\"Test that --recursive=y respects the ignore-paths setting.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Prepare the test directory structure\n+                test_dir = join(HERE, \"regrtest_data\", \"directory\")\n+                ignored_dir = join(test_dir, \"src\", \"gen\")\n+                os.makedirs(ignored_dir, exist_ok=True)\n+                with open(join(test_dir, \"src\", \"test.py\"), \"w\") as f:\n+                    f.write(\"print('inside src')\\n\")\n+                with open(join(ignored_dir, \"about.py\"), \"w\") as f:\n+                    f.write(\"print('inside src/gen')\\n\")\n+\n+                os.chdir(test_dir)\n+                self._runtest(\n+                    [\n+                        \"src\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^src/gen/.*$\"\n+                    ],\n+                    code=0,\n+                )\n                 self._runtest(\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..14136d8 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,25 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n-def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n+def test_lint_nested_module_with_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test to check pylint's behavior for nested modules with identical names.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"module_with_same_name/module_with_same_name.py\", \"module_with_same_name/another_module.py\"])\n+        # Check if pylint can process the module structure without '__init__.py'\n+        linter.check([\"module_with_same_name\"])\n+        \n+    # Verify that no parse errors occur due to missing '__init__.py'\n+    assert not linter.stats.by_msg.get(\"parse-error\")\n+    \n+    # Create a scenario with an __init__.py and verify linting again\n+    with tempdir():\n+        create_files([\"module_with_init/module_with_init.py\", \"module_with_init/another.py\", \"module_with_init/__init__.py\"])\n+        linter.check([\"module_with_init\"])\n+    assert not linter.stats.by_msg\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..1607571 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,7 +114,21 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n-def test_deprecation_set_output(recwarn):\n+\n+def test_custom_brace_template_in_message(linter: PyLinter):\n+    \"\"\"Test that custom brace templates with JSON-like structures in message templates are correctly interpreted.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E0001\", line=2, args=(3, 4))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..64a0596 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -289,9 +289,17 @@ class TestImportPath:\n         return fn\n \n     def test_importmode_importlib(self, simple_module: Path, tmp_path: Path) -> None:\n-        \"\"\"`importlib` mode does not change sys.path.\"\"\"\n+        \"\"\"`importlib` mode does not change sys.path and prevents duplicate imports.\"\"\"\n         module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+\n+        # First import should be fine\n         assert module.foo(2) == 42  # type: ignore[attr-defined]\n+\n+        # Try importing the module again using importlib\n+        module_reimported = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+\n+        # Ensure that importing again gives the same module object\n+        assert module is module_reimported\n         assert str(simple_module.parent) not in sys.path\n         assert module.__name__ in sys.modules\n         assert module.__name__ == \"_src.tests.mymod\"\n",
  "pytest-dev__pytest-5227": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 1ebe9d0..01f354c 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..559f3da 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -501,7 +501,21 @@ class TestAssert_reprcompare:\n         expl = callequal([(1, 2)], [])\n         assert len(expl) > 1\n \n-    def test_repr_verbose(self):\n+    def test_confusing_byte_assertion_message(self):\n+        # This test case replicates the issue and expects an improved assertion message.\n+        # Here 'b\"\" == b\"42\"' example is used to see the specific error message format.\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff[0] == \"b'' == b'42'\"\n+        assert \"Right contains more items, first extra item: 52\" in diff\n+        assert \"Full diff:\\n- b''\\n+ b'42'\" in \"\\n\".join(diff)\n+\n+    def test_confusing_byte_assertion_message_single_byte(self):\n+        # Additional test case for a single byte\n+        # Here 'b\"\" == b\"1\"' is used to check the message.\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff[0] == \"b'' == b'1'\"\n+        assert \"Right contains more items, first extra item: 49\" in diff\n+        assert \"Full diff:\\n- b''\\n+ b'1'\" in \"\\n\".join(diff)\n         class Nums:\n             def __init__(self, nums):\n                 self.nums = nums\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..3022af9 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,3 +1,4 @@\n+\n import os\n from xml.dom import minidom\n \n@@ -157,7 +158,29 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..2e80b39 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,32 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"Test saferepr can handle exception in __getattribute__.\"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Exception in __getattribute__\")\n+\n+        def __repr__(self):\n+            return \"SomeClass\"\n+\n+    obj = SomeClass()\n+    output = saferepr(obj)\n+    assert output.startswith('<[RuntimeError(\"Exception')\n+\n+def test_broken_repr():\n+    \"\"\"Test saferepr can handle exception in __repr__.\"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            return super().__getattribute__(attr)\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Exception in __repr__\")\n+\n+    obj = SomeClass()\n+    output = saferepr(obj)\n+    assert output.startswith('<[RuntimeError(\"Exception')\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +179,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..fa2a229 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,7 @@\n import os\n import sys\n+import os\n+\n from unittest import mock\n \n import pytest\n@@ -707,7 +709,65 @@ class TestFunctional:\n         reprec.assertoutcome(skipped=1)\n \n \n-class TestKeywordSelection:\n+class TestCachingIssue:\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+    def test_no_caching_between_different_globals(self, testdir):\n+        py_file1 = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            value = \"A\"\n+\n+            @pytest.mark.skipif(\"value == 'A'\")\n+            def test_skip():\n+                assert False\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            value = \"B\"\n+\n+            @pytest.mark.skipif(\"value == 'A'\")\n+            def test_dont_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n     def test_select_simple(self, testdir):\n         file_test = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..b69505f 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -219,6 +219,26 @@ class TestXFail:\n         assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"\n         assert not hasattr(callreport, \"wasxfail\")\n \n+    def test_skip_location_reporting(self, testdir):\n+        \"\"\"Test proper location reporting for skipped tests with --runxfail.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.skip(reason=\"unconditional skip\")\n+            def test_skip_location():\n+                assert False\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_location_reporting.py:2: unconditional skip\", \"*1 skipped*\"])\n+        \n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_location_reporting.py:2: unconditional skip\", \"*1 skipped*\"])\n+\n+        query_result = result.parseoutcomes()\n+        assert query_result.get(\"skipped\", 0) == 1\n+\n     def test_xfail_run_anyway(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..f9c2f89 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -19,7 +20,27 @@ from _pytest.pathlib import on_rm_rf_error\n from _pytest.pathlib import register_cleanup_lock_removal\n from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest.tmpdir import get_user\n+\n+def test_tmpdir_factory_handles_invalid_dir_characters(tmpdir_factory: TempdirFactory, monkeypatch: MonkeyPatch) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"invalid:user?\")\n+    monkeypatch.setattr(tmpdir_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmpdir_factory, \"_given_basetemp\", None)\n+    p = tmpdir_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+def test_tmp_path_factory_handles_invalid_separator_characters(tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"user\\\\name\")\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+def test_get_user_with_invalid_characters(monkeypatch: MonkeyPatch) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"invalid/user\")\n+    user = get_user()\n+    assert user == \"unknown\"\n from _pytest.tmpdir import TempdirFactory\n from _pytest.tmpdir import TempPathFactory\n \n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..220ba25 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -598,7 +598,35 @@ def test_ridgecv_store_cv_values():\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n \n-def test_ridgecv_sample_weight():\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    r.fit(x, y)\n+    n_targets = 1\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # Ensure the alpha value chosen is consistent\n+    assert r.alpha_ in alphas\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..cf16e42 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -6,7 +6,9 @@ import numpy as np\n from scipy.special import gammaln\n \n from sklearn.utils.testing import assert_raise_message\n-from sklearn.utils.testing import assert_almost_equal\n+from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n+from sklearn.metrics.cluster import adjusted_rand_score\n+from sklearn.exceptions import NotFittedError\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n from sklearn.mixture.bayesian_mixture import _log_wishart_norm\n@@ -21,8 +23,28 @@ from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n PRIOR_TYPE = ['dirichlet_process', 'dirichlet_distribution']\n \n+def test_bayesian_mixture_fit_predict_method():\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng, scale=7)\n+    n_components = 2 * rand_data.n_components\n \n-def test_log_dirichlet_norm():\n+    for covar_type in COVARIANCE_TYPE:\n+        bgmm = BayesianGaussianMixture(n_components=n_components,\n+                                       max_iter=100, random_state=rng,\n+                                       tol=1e-3, reg_covar=0,\n+                                       covariance_type=covar_type)\n+        X = rand_data.X[covar_type]\n+        # Check if fit_predict works and labels_ are stored\n+        Y_pred = bgmm.fit_predict(X)\n+        assert hasattr(bgmm, 'labels_'), \"BayesianGaussianMixture does not store `labels_` after fitting.\"\n+        assert_array_equal(Y_pred, bgmm.labels_)\n+\n+        # Check prediction consistency\n+        Y_pred2 = bgmm.predict(X)\n+        assert_array_equal(Y_pred, Y_pred2)\n+\n+        # Ensure fit_predict gives high adjusted rand score compared to true labels\n+        assert_greater_equal(adjusted_rand_score(rand_data.Y, Y_pred), .95)\n     rng = np.random.RandomState(0)\n \n     weight_concentration = rng.rand(2)\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..d624e72 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,47 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+import pytest\n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+import numpy as np\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_handle_unknown_with_longer_known_string():\n+    # Similar to the previous test but with the longest string as known\n+    X = np.array(['a', 'aaaa', 'aaa', 'aa']).reshape((-1, 1))\n+    X2 = np.array(['bb', 'a']).reshape((-1, 1))\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    expected_result = np.array([[0., 0., 0., 0.], [1., 0., 0., 0.]])  # Only the known 'a' should be encoded\n+    result = oh.transform(X2).toarray()\n+    assert_array_equal(result, expected_result)\n+\n+def test_no_in_place_modification_for_various_string_lengths():\n+    # Ensure no in-place modification for test data\n+    train = np.array(['short', 'longer', 'long']).reshape((-1, 1))\n+    test = np.array(['unseen', 'short']).reshape((-1, 1))\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(train)\n+    test_copy = test.copy()\n+    _ = ohe.transform(test_copy)\n+    assert_array_equal(test, test_copy)  # Ensures no changes were made in place\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..0aa2b33 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict when n_init > 1\n+    X = np.random.RandomState(42).randn(1000, 5)  # New random seed for variety\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=42)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..497bb97 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -70,8 +71,23 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n-\n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_indeterminacy():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    \n+    # Test for sign indeterminacy in KernelPCA\n+    n_runs = 20\n+    transformed_results = []\n+\n+    for _ in range(n_runs):\n+        kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+        transformed_X = kpca.fit_transform(X)\n+        transformed_results.append(transformed_X[0])\n+\n+    # Check if all transformed results are consistent in absolute values\n+    for i in range(1, n_runs):\n+        assert_allclose(np.abs(transformed_results[0]),\n+                        np.abs(transformed_results[i]))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 4594f40..701e641 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -199,6 +199,10 @@ class Pipeline(_BaseComposition):\n             if trans is not None and trans != 'passthrough':\n                 yield idx, name, trans\n \n+    def __len__(self):\n+        \"\"\"Return the number of steps in the pipeline.\"\"\"\n+        return len(self.steps)\n+\n     def __getitem__(self, ind):\n         \"\"\"Returns a sub-pipeline or a single esimtator in the pipeline\n \n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..ba242df 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -11,6 +12,8 @@ import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils import check_random_state\n+from sklearn.ensemble import IsolationForest\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n@@ -296,6 +299,58 @@ def test_score_samples():\n \n \n @pytest.mark.filterwarnings('ignore:default contamination')\n+\n+@pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start():\n+    \"\"\"Test iterative addition of iTrees to an iForest \"\"\"\n+\n+    rng = check_random_state(0)\n+    X = rng.randn(20, 2)\n+\n+    # fit first 10 trees\n+    clf = IsolationForest(n_estimators=10, max_samples=20,\n+                          random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    # remember the 1st tree\n+    tree_1 = clf.estimators_[0]\n+    # fit another 10 trees\n+    clf.set_params(n_estimators=20)\n+    clf.fit(X)\n+    # expecting 20 fitted trees and no overwritten trees\n+    assert len(clf.estimators_) == 20\n+    assert clf.estimators_[0] is tree_1\n+\n+def test_iforest_warm_start_increment():\n+    \"\"\"Test incremental increase of n_estimators with warm_start enabled\"\"\"\n+    rng = check_random_state(42)\n+    X = rng.rand(10, 2)\n+\n+    clf = IsolationForest(n_estimators=5, warm_start=True, random_state=rng)\n+    clf.fit(X)\n+    original_estimators = clf.estimators_.copy()\n+\n+    # Incrementally add more estimators\n+    for i in range(6, 11):\n+        clf.set_params(n_estimators=i)\n+        clf.fit(X)\n+        assert len(clf.estimators_) == i\n+        assert clf.estimators_[:len(original_estimators)] == original_estimators\n+\n+def test_iforest_warm_start_false():\n+    \"\"\"Ensure warm_start=False resets the forest\"\"\"\n+    rng = check_random_state(0)\n+    X = rng.rand(10, 2)\n+\n+    clf = IsolationForest(n_estimators=10, warm_start=True, random_state=rng)\n+    clf.fit(X)\n+    initial_estimators = clf.estimators_\n+\n+    # Disable warm_start and fit again\n+    clf.set_params(warm_start=False)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 10\n+    assert clf.estimators_ is not initial_estimators\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n     X = [[0.0], [1.0]]\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..13e7265 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,24 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+    # Additional test cases focusing on the different forms of discrete_features\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test with discrete features as a boolean mask\n+        mi_5 = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        mi_6 = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        assert_array_equal(mi_5, mi_6)\n+\n+        # Test with discrete features as an array of indices\n+        mi_7 = mutual_info(X, y, discrete_features=[0, 1, 2], random_state=0)\n+        mi_8 = mutual_info(X, y, discrete_features=[True, True, True], random_state=0)\n+        assert_array_equal(mi_7, mi_8)\n+\n+        # Check that invalid indices raise an IndexError\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False, True, False])\n+        \n+        # Ensure 'auto' still works correctly after the fix\n+        mi_9 = mutual_info(X, y, discrete_features='auto', random_state=0)\n+        assert_array_equal(mi_1, mi_9)  # 'auto' should behave as before\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..8809218 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -207,7 +210,17 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n     expected = \"\"\"SimpleImputer(missing_values=0)\"\"\"\n     assert imputer.__repr__() == expected\n \n-    # Defaults to np.NaN, trying with float('NaN')\n+    # Test case to ensure that array parameters don't throw an error\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        assert isinstance(repr_output, str)\n+        print(\"Test passed: No error with array parameters in LogisticRegressionCV.\")\n+    except ValueError as e:\n+        print(\"Test failed: ValueError encountered.\", e)\n+\n+    # Resetting config to default\n+    set_config(print_changed_only=False)\n     imputer = SimpleImputer(missing_values=float('NaN'))\n     expected = \"\"\"SimpleImputer()\"\"\"\n     assert imputer.__repr__() == expected\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..f7d665f 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -15,6 +16,9 @@ from sklearn.ensemble import VotingClassifier, VotingRegressor\n from sklearn.model_selection import GridSearchCV\n from sklearn import datasets\n from sklearn.model_selection import cross_val_score, train_test_split\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n+from sklearn.utils.testing import assert_raises\n from sklearn.datasets import make_multilabel_classification\n from sklearn.svm import SVC\n from sklearn.multiclass import OneVsRestClassifier\n@@ -499,6 +503,40 @@ def test_transform():\n         flatten_transform=False).fit(X, y)\n \n     assert_array_equal(eclf1.transform(X).shape, (4, 6))\n+\n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(datasets.load_iris(return_X_y=True), \n+      VotingClassifier(\n+          [('lr', LogisticRegression()),\n+           ('rf', RandomForestClassifier(n_estimators=5))])),\n+     (datasets.load_iris(return_X_y=True), \n+      VotingRegressor(\n+          [('lr', LinearRegression()),\n+           ('rf', RandomForestRegressor(n_estimators=5))]))]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # Check that an estimator can be set to None and passing some weight\n+    # Regression test for:\n+    # https://github.com/scikit-learn/scikit-learn/issues/13777\n+    voter.fit(X, y, sample_weight=np.ones(len(y)))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(len(y)))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+def test_none_estimator_raises_on_fit():\n+    # Test that if we set all estimators to None, it raises Error\n+    X, y = datasets.load_iris(return_X_y=True)\n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression()),\n+                    ('rf', RandomForestClassifier(n_estimators=5))]\n+    )\n+    voter.set_params(lr=None, rf=None)\n+    with assert_raises(ValueError, match=\"No valid estimators were provided\"):\n+        voter.fit(X, y)\n     assert_array_equal(eclf2.transform(X).shape, (4, 6))\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..9bdb690 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -119,7 +119,37 @@ def test_finite_differences():\n     np.testing.assert_almost_equal(rel_diff, 0., decimal=5)\n \n \n+from sklearn.model_selection import GridSearchCV\n+from sklearn.pipeline import Pipeline\n+from sklearn.datasets import load_iris\n+from sklearn.neighbors import KNeighborsClassifier\n+\n+X, y = load_iris(return_X_y=True)\n+\n def test_params_validation():\n+    # Test that parameters accept numpy types as well\n+\n+    # Test for tol\n+    nca = NeighborhoodComponentsAnalysis(tol=np.float32(1e-5))\n+    nca.fit(X, y)\n+\n+    # Test for n_components\n+    nca = NeighborhoodComponentsAnalysis(n_components=np.int32(3))\n+    nca.fit(X, y)\n+\n+    # Test with GridSearchCV\n+    pipe = Pipeline([\n+        ('nca', NeighborhoodComponentsAnalysis()),\n+        ('knn', KNeighborsClassifier())\n+    ])\n+\n+    params = {\n+        'nca__tol': [0.1, 0.5, 1.0],  # mix int and float types\n+        'nca__n_components': np.arange(1, 5, dtype=np.int32)  # np.int32 range\n+    }\n+\n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n     # Test that invalid parameters raise value error\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..835ba13 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,25 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the ZeroDivisionError issue with sparse input and empty support_vectors_\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, gamma=1.0, max_iter=15000)\n+    model.fit(X_train, y_train)\n+\n+    # Check that the expected properties are correct when there are no support vectors\n+    assert model.support_.size == 0, \"Expected zero support vectors\"\n+    assert model.dual_coef_.size == 0, \"Expected zero-size dual_coef when no support vectors\"\n+    assert model.support_vectors_.shape[0] == 0, \"Expected no rows in support_vectors_\"\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..066dc7a 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,9 +1,14 @@\n+\n import warnings\n import numpy as np\n import pickle\n import copy\n \n import pytest\n+from sklearn import set_config\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn.datasets import make_classification\n \n from sklearn.datasets import make_regression\n from sklearn.isotonic import (\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..0370b83 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -113,6 +113,64 @@ def test_automodule_special_members(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple(app):\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'list, Base'\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList%s' % args,\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n                                                             'missing_package1',\n@@ -125,4 +183,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..206927c 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,9 +1,23 @@\n+\n from __future__ import annotations\n \n-from typing import overload\n+from typing import overload, TypeAlias\n+\n+# Define a String alias for testing\n+String: TypeAlias = \"MyString\"\n \n myint = int\n \n+#: blah blah blah\n+var: String\n+\n+\n+class MyString:\n+    \"\"\"mystring\"\"\"\n+    \n+    #: blah blah blah\n+    var: String\n+\n \n def sum(x: myint, y: myint) -> myint:\n     \"\"\"docstring\"\"\"\n@@ -22,4 +36,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..0b43403 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..a4b005a 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -8,6 +9,10 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n+\n import sys\n from numbers import Integral\n from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar,\n@@ -15,6 +20,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -44,6 +50,8 @@ def test_restify():\n     assert restify(None) == \":obj:`None`\"\n     assert restify(Integral) == \":class:`numbers.Integral`\"\n     assert restify(Any) == \":obj:`Any`\"\n+    # Test for struct.Struct type annotation resolution\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n \n \n def test_restify_type_hints_containers():\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..706537f 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1458,7 +1458,36 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+    def test_other_parameters_with_use_param_true(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_use_param_false(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..e18a130 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -322,6 +322,20 @@ def test_mul():\n         assert h == h2\n \n \n+def test_non_disjoint_cycles():\n+    # Test non-disjoint cycles that should form the identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    \n+    # Test non-disjoint cycles with different lengths\n+    assert Permutation([[0, 1], [1, 2, 0]]) == Permutation([2, 0, 1])\n+    assert Permutation([[1, 2], [2, 0], [0, 1]]) == Permutation([0, 2, 1])\n+    \n+    # Test non-disjoint cycles that overlap\n+    assert Permutation([[0, 1, 2], [1, 2, 3]]) == Permutation([3, 1, 2, 0])\n+    \n+    # Mix of disjoint and non-disjoint cycles\n+    assert Permutation([[0, 1], [2, 3], [0, 2]]) == Permutation([2, 1, 0, 3])\n+\n def test_args():\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex fa86bc3..c05ac6a 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -254,8 +254,44 @@ def test_power():\n     assert A**5.0 == Matrix([[168,  72,  89], [291, 144, 161], [572, 267, 329]])\n     assert A**5.0 == A**5\n \n-\n-def test_creation():\n+from sympy import SparseMatrix\n+\n+def test_hstack_vstack_issue():\n+    # hstack tests\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+    \n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(1, 2)\n+    M4 = Matrix.zeros(1, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    # vstack tests\n+    M1 = Matrix.zeros(0, 3)\n+    M2 = Matrix.zeros(1, 3)\n+    assert Matrix.vstack(M1, M2).shape == (1, 3)\n+    assert Matrix.vstack(M2, M1).shape == (1, 3)\n+\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+    \n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    M1 = SparseMatrix.zeros(0, 3)\n+    M2 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.vstack(M1, M2).shape == (1, 3)\n+    assert SparseMatrix.vstack(M2, M1).shape == (1, 3)\n     raises(ValueError, lambda: Matrix(5, 5, range(20)))\n     raises(ValueError, lambda: Matrix(5, -1, []))\n     raises(IndexError, lambda: Matrix((1, 2))[2])\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..9a18a35 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -100,9 +100,19 @@ def test_core_symbol():\n         check(c)\n \n \n-def test_core_numbers():\n-    for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n-        check(c)\n+def test_pickle_float_expression():\n+    if sys.version_info[0] == 3:\n+        import pickle\n+\n+        # Reconstruct the environment as would be in the python2-pickled case\n+        x = sympy.symbols(\"x\")\n+        # Simulate a Python 2 pickled object\n+        serialized = b'\\x80\\x02csympy.core.add\\nAdd\\nq\\x00)csympy.core.symbol\\nSymbol\\nq\\x01U\\x01xq\\x02\\x85q\\x03c__builtin__\\nfloat\\nq\\x04F1.0\\n\\x86q\\x05\\x87q\\x06Rq\\x07.'\n+        expression = pickle.loads(serialized)\n+\n+        # Verify that the expression is correctly deserialized in Python 3\n+        expected_expression = x + 1.0\n+        assert expression == expected_expression\n \n \n def test_core_relational():\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..2422ff4 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -279,7 +279,37 @@ def test_coth_series():\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n \n-def test_csch():\n+def test_coth_log_tan_subs():\n+    from sympy import coth, log, tan, Symbol, I, pi, simplify\n+\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    \n+    # Test each value to ensure it does not raise an error\n+    assert simplify(e.subs(x, 2)) is not None\n+    assert simplify(e.subs(x, 3)) is not None\n+    assert simplify(e.subs(x, 5)) is not None\n+    assert simplify(e.subs(x, 6)) is not None\n+    assert simplify(e.subs(x, 8)) is not None\n+    assert simplify(e.subs(x, 9)) is not None\n+    assert simplify(e.subs(x, 11)) is not None\n+    assert simplify(e.subs(x, 12)) is not None\n+    assert simplify(e.subs(x, 13)) is not None\n+    assert simplify(e.subs(x, 15)) is not None\n+    assert simplify(e.subs(x, 18)) is not None\n+    \n+    # Verify the results match expected values\n+    assert coth(log(tan(2))) == coth(log(tan(2)))\n+    assert coth(log(tan(3))) == coth(log(tan(3)))\n+    assert coth(log(tan(5))) == coth(log(tan(5)))\n+    assert coth(log(tan(6))) == coth(log(tan(6)))\n+    assert coth(log(tan(8))) == coth(log(tan(8)))\n+    assert coth(log(tan(9))) == coth(log(tan(9)))\n+    assert coth(log(tan(11))) == coth(log(tan(11)))\n+    assert coth(log(tan(12))) == coth(log(tan(12)))\n+    assert coth(log(tan(13))) == coth(log(tan(13)))\n+    assert coth(log(tan(15))) == coth(log(tan(15)))\n+    assert coth(log(tan(18))) == coth(log(tan(18)))\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..8c25daa 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,25 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import eye, Matrix, ones\n+    # Originating matrix (6x6 identity)\n+    M = eye(6)\n+    # Matrix to insert (6x2 matrix of twos)\n+    V = 2 * ones(6, 2)\n+    # Expected result after column insert at index 3\n+    expected_result = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    # Actual result after using col_insert\n+    result = M.col_insert(3, V)\n+    # Assert expected vs actual\n+    assert result == expected_result\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..f6139ea 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -620,46 +620,46 @@ def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n     assert latex(s1) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n+    latex_str = r'[1, 2, 1, 2, \\ldots]'\n     assert latex(s2) == latex_str\n \n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4\\right\\]'\n+    latex_str = r'[0, 1, 4]'\n     assert latex(s3) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1\\right\\]'\n+    latex_str = r'[1, 2, 1]'\n     assert latex(s4) == latex_str\n \n     s5 = SeqFormula(a**2, (-oo, 0))\n     s6 = SeqPer((1, 2), (-oo, 0))\n \n-    latex_str = r'\\left\\[\\ldots, 9, 4, 1, 0\\right\\]'\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n     assert latex(s5) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 2, 1, 2, 1\\right\\]'\n+    latex_str = r'[\\ldots, 2, 1, 2, 1]'\n     assert latex(s6) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5, 11, \\ldots\\right\\]'\n+    latex_str = r'[1, 3, 5, 11, \\ldots]'\n     assert latex(SeqAdd(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5\\right\\]'\n+    latex_str = r'[1, 3, 5]'\n     assert latex(SeqAdd(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 11, 5, 3, 1\\right\\]'\n+    latex_str = r'[\\ldots, 11, 5, 3, 1]'\n     assert latex(SeqAdd(s5, s6)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4, 18, \\ldots\\right\\]'\n+    latex_str = r'[0, 2, 4, 18, \\ldots]'\n     assert latex(SeqMul(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4\\right\\]'\n+    latex_str = r'[0, 2, 4]'\n     assert latex(SeqMul(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n+    latex_str = r'[\\ldots, 18, 4, 2, 0]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..911ba72 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -174,6 +175,19 @@ def test_Domain_preprocess():\n \n     raises(OptionError, lambda: Domain.preprocess('Z[]'))\n \n+    # Test cases for RR domain\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+    # Additional case from the issue\n+    raises(OptionError, lambda: Domain.preprocess('RR[y,z]'))\n+\n     assert Domain.preprocess('Z[x]') == ZZ[x]\n     assert Domain.preprocess('Q[x]') == QQ[x]\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..eb237d6 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6122,7 +6122,24 @@ def test_MatrixSymbol_printing():\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n \n-def test_degree_printing():\n+def test_MatrixSymbol_pretty_printing():\n+    # issue #14814\n+    n = 3  # Choose an arbitrary positive integer for dimensions\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    a = Symbol('a')\n+    \n+    # Test case for simple addition of MatrixSymbols with special characters\n+    assert pretty(x + y_star) == \"x + y*\"\n+    \n+    # Test case for verifying negative factors in MatAdd printout\n+    y = MatrixSymbol('y', n, n)\n+    assert pretty(-a*x + -2*y_star*y) == \"-a*x - 2*y**y*\"\n+    \n+    # Additional checks for more complex expressions involving MatAdd\n+    assert pretty(-x + y_star) == \"-x + y*\"\n+    assert pretty(x - y_star) == \"x - y*\"\n+    assert pretty(-x - y_star) == \"-x - y*\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..58ef853 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -727,8 +727,20 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n-\n-def test_python_keywords():\n+from sympy import MatrixSymbol, symbols\n+from sympy.utilities.lambdify import lambdify\n+from sympy.testing.pytest import raises\n+\n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    \n+    # These should not raise SyntaxError\n+    lam = lambdify(curlyv, curlyv)\n+    assert lam([[1], [1]]) == [[1], [1]]\n+    \n+    lam_dummified = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam_dummified([[1], [1]]) == [[1], [1]]\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..82685a4 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,21 @@\n+\n+def test_Max():\n+    # Test the specific issue with Max and the correct Mathematica code output\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    # Test multiple arguments\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    # Ensure that the Max function order is preserved as in Mathematica\n+    assert mcode(Max(2, x, y)) == \"Max[2, x, y]\"\n+    # Test Max with symbolic expressions\n+    assert mcode(Max(x + 1, y - 1)) == \"Max[x + 1, y - 1]\"\n+    # Test nested Max functions\n+    assert mcode(Max(Max(x, 2), y)) == \"Max[Max[x, 2], y]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..17e5289 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,16 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    # Test for the specific issue with indexed matrix expressions\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    expected_latex = r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+    assert latex((M*N)[i, j]) == expected_latex\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..9055708 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -6,6 +7,20 @@ from sympy.utilities.pytest import raises\n \n \n def test_idiff():\n+    # Additional test cases for the issues mentioned\n+    f = Function('f')\n+    g = Function('g')\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+\n+    # Test if idiff supports using Eq and function expressions properly\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x) == (x + 1)*exp(x - y)/(y + 1)\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+\n+    # Additional complex cases\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..da59447 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,7 +582,40 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n-def test_empty_f_code():\n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen, CCodeGen\n+    from sympy import MatrixSymbol\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_unused_array_argument():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    # This should return 1.0 without any error\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..1339b48 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,16 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n-\n-def test_issue_9623():\n+from sympy import Intersection, Eq, symbols, FiniteSet, S\n+from sympy.abc import x\n+\n+def test_intersection_duplicates():\n+    # Test issue where intersection should remove duplicates\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    assert Intersection({1}, {1}, {x}).doit() == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {1}).doit() == {1}\n+    assert Intersection(FiniteSet(1, 1), FiniteSet(1)).doit() == FiniteSet(1)\n+    assert Intersection(FiniteSet(1, 2, 2), FiniteSet(2, 2, 3)).doit() == FiniteSet(2)\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..4f8dd10 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -8,6 +9,22 @@ from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbr\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayTensorProduct, CodegenArrayDiagonal,\n         CodegenArrayPermuteDims, CodegenArrayElementwiseAdd)\n+from sympy import Identity, symbols\n+from sympy.utilities.pytest import skip, raises\n+\n+np = import_module('numpy')\n+\n+def test_issue_identity_matrix():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    n = symbols('n', integer=True)\n+    A = MatrixSymbol(\"A\", n, n)\n+    a = np.array([[1, 2], [3, 4]])\n+    f = lambdify(A, A + Identity(n), modules='numpy')\n+    assert (f(a) == np.array([[2, 2], [3, 5]])).all()\n+\n+    raises(NotImplementedError, lambda: lambdify(A, A + Identity(n), modules='numpy'))\n from sympy.printing.lambdarepr import NumPyPrinter\n \n from sympy.utilities.pytest import warns_deprecated_sympy\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..3812a68 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -801,7 +801,22 @@ def test_nc_simplify():\n     # commutative expressions should be returned without an error\n     assert nc_simplify(2*x**2) == 2*x**2\n \n-def test_issue_15965():\n+from sympy import Symbol, simplify, cos, sin, I\n+\n+def test_issue_17137():\n+    # Test cases from the original test patch\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional edge cases\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(sin(x)**(2 + 3*I)) == sin(x)**(2 + 3*I)\n+    assert simplify((cos(x) + sin(x))**I) == (cos(x) + sin(x))**I\n+    # Test cases with numerical evaluation\n+    expr = simplify(cos(1)**I)\n+    assert expr.is_number  # check if the expression is a number\n+    expr = simplify(sin(1)**(2 + 3*I))\n+    assert expr.is_number\n     A = Sum(z*x**y, (x, 1, a))\n     anew = z*Sum(x**y, (x, 1, a))\n     B = Integral(x*y, x)\n@@ -814,4 +829,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..bca676c 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -93,6 +94,14 @@ def test_point():\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n+    # Issue test cases \n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+\n+    # Test multiplication of Point by a scalar (sympify(2.0)) in both orders\n+    assert point1 + point2 * sympify(2.0) == Point(2, 2)\n+    assert point1 + sympify(2.0) * point2 == Point(2, 2)\n+\n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n     # Point differences should be simplified\n@@ -169,6 +178,14 @@ def test_point3D():\n \n     assert p4 * 5 == Point3D(5, 5, 5)\n     assert p4 / 5 == Point3D(0.2, 0.2, 0.2)\n+    \n+    # Issue test cases for 3D points\n+    point1_3d = Point3D(0, 0, 0)\n+    point2_3d = Point3D(1, 1, 1)\n+\n+    # Test multiplication of Point3D by a scalar (sympify(2.0)) in both orders\n+    assert point1_3d + point2_3d * sympify(2.0) == Point3D(2, 2, 2)\n+    assert point1_3d + sympify(2.0) * point2_3d == Point3D(2, 2, 2)\n \n     raises(ValueError, lambda: Point3D(0, 0, 0) + 10)\n \n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..b0d115b 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,27 @@ def test_normal():\n     assert e.normal() == e\n \n \n+def test_sympy_symbol_equality():\n+    x = Symbol('x')\n+\n+    class C1:\n+        def __repr__(self):\n+            return 'x.y'\n+    \n+    class C2:\n+        def __repr__(self):\n+            return 'x'\n+    \n+    # Test for issue: repr leading to AttributeError\n+    c1_instance = C1()\n+    assert (x == c1_instance) is False\n+    assert (x != c1_instance) is True\n+\n+    # Test for related issue: repr leading to false equality\n+    c2_instance = C2()\n+    assert (x == c2_instance) is False  # This should not fail\n+    assert (x != c2_instance) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1923,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..ca65955 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,6 +553,19 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_diophantine_issue_18186():\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy.abc import m, n\n+\n+    # Test case 1: Check solution set when variable order is (m, n)\n+    expr1 = n**4 + m**4 - 2**4 - 3**4\n+    assert diophantine(expr1, syms=(m, n), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+\n+    # Test case 2: Check solution set when variable order is (n, m)\n+    expr2 = n**4 + m**4 - 2**4 - 3**4\n+    assert diophantine(expr2, syms=(n, m), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n \n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..bc8c14e 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,7 +67,7 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert not sz.atoms()  # As sz should have no atoms with args\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..8f39437 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -110,7 +110,25 @@ def test_issue_17624():\n     assert block_collapse(b * b) == BlockMatrix([[a**2, z], [z, z]])\n     assert block_collapse(b * b * b) == BlockMatrix([[a**3, z], [z, z]])\n \n-def test_BlockMatrix_trace():\n+from sympy import Matrix, BlockDiagMatrix, ImmutableDenseMatrix\n+\n+def test_issue_conversion_blockdiagmatrix_single_element():\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    # This should not raise an error\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_issue_conversion_blockdiagmatrix_double_elements():\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    assert B == Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n     A, B, C, D = [MatrixSymbol(s, 3, 3) for s in 'ABCD']\n     X = BlockMatrix([[A, B], [C, D]])\n     assert trace(X) == trace(A) + trace(D)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..f3ffc61 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -83,7 +84,63 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_block_index_symbolic():\n+    A1 = MatrixSymbol('A1', n, k)\n+    A2 = MatrixSymbol('A2', n, l)\n+    A3 = MatrixSymbol('A3', m, k)\n+    A4 = MatrixSymbol('A4', m, l)\n+    A = BlockMatrix([[A1, A2], [A3, A4]])\n+    \n+    assert A[0, 0] == MatrixElement(A, 0, 0)\n+    assert A[n - 1, k - 1] == A1[n - 1, k - 1]\n+    assert A[n, k] == A4[0, 0]\n+    assert A[n + m - 1, 0] == MatrixElement(A, n + m - 1, 0)\n+    assert A[0, k + l - 1] == MatrixElement(A, 0, k + l - 1)\n+    assert A[n + m - 1, k + l - 1] == MatrixElement(A, n + m - 1, k + l - 1)\n+    assert A[i, j] == MatrixElement(A, i, j)\n+    assert A[n + i, k + j] == MatrixElement(A, n + i, k + j)\n+    assert A[n - i - 1, k - j - 1] == MatrixElement(A, n - i - 1, k - j - 1)\n+\n+def test_block_index_symbolic_nonzero():\n+    k, l, m, n = symbols('k l m n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True, nonnegative=True)\n+    A1 = MatrixSymbol('A1', n, k)\n+    A2 = MatrixSymbol('A2', n, l)\n+    A3 = MatrixSymbol('A3', m, k)\n+    A4 = MatrixSymbol('A4', m, l)\n+    A = BlockMatrix([[A1, A2], [A3, A4]])\n+    \n+    assert A[0, 0] == A1[0, 0]\n+    assert A[n + m - 1, 0] == A3[m - 1, 0]\n+    assert A[0, k + l - 1] == A2[0, l - 1]\n+    assert A[n + m - 1, k + l - 1] == A4[m - 1, l - 1]\n+    assert A[i, j] == MatrixElement(A, i, j)\n+    assert A[n + i, k + j] == A4[i, j]\n+    assert A[n - i - 1, k - j - 1] == A1[n - i - 1, k - j - 1]\n+    assert A[2 * n, 2 * k] == A4[n, k]\n+\n+def test_block_index_large():\n+    n, m, k = symbols('n m k', integer=True, positive=True)\n+    i = symbols('i', integer=True, nonnegative=True)\n+    A1 = MatrixSymbol('A1', n, n)\n+    A2 = MatrixSymbol('A2', n, m)\n+    A3 = MatrixSymbol('A3', n, k)\n+    A4 = MatrixSymbol('A4', m, n)\n+    A5 = MatrixSymbol('A5', m, m)\n+    A6 = MatrixSymbol('A6', m, k)\n+    A7 = MatrixSymbol('A7', k, n)\n+    A8 = MatrixSymbol('A8', k, m)\n+    A9 = MatrixSymbol('A9', k, k)\n+    A = BlockMatrix([[A1, A2, A3], [A4, A5, A6], [A7, A8, A9]])\n+\n+    assert A[n + i, n + i] == MatrixElement(A, n + i, n + i)\n+\n+@XFAIL\n+def test_block_index_symbolic_fail():\n+    A1 = MatrixSymbol('A1', n, 1)\n+    A2 = MatrixSymbol('A2', m, 1)\n+    A = BlockMatrix([[A1], [A2]])\n+    assert A[2 * n, 0] == A2[n, 0]\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..3185996 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -317,7 +317,35 @@ def test_sign():\n     assert sign(d).func is sign or sign(d) == 0\n \n \n-def test_as_real_imag():\n+def test_sign_rewrite_abs():\n+    # Test the rewrite of sign in terms of Abs\n+    x = Symbol('x')\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x / Abs(x), True))\n+    \n+    y = Symbol('y', real=True)\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y / Abs(y), True))\n+    \n+    z = Symbol('z', complex=True)\n+    assert sign(z).rewrite(Abs) == Piecewise((0, Eq(z, 0)), (z / Abs(z), True))\n+    \n+    # Test the special case when x is zero\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # Test with a positive constant\n+    assert sign(5).rewrite(Abs) == 1\n+\n+    # Test with a negative constant\n+    assert sign(-5).rewrite(Abs) == -1\n+\n+    # Test with a complex number\n+    complex_expr = 3 + 4*I\n+    assert sign(complex_expr).rewrite(Abs) == complex_expr / Abs(complex_expr)\n+\n+    # Ensure that if the absolute value is 0, the piecewise condition handles this\n+    assert sign(Symbol('a', zero=True)).rewrite(Abs) == 0\n+\n+    f = Function('f')\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x) / Abs(f(x)), True))\n     n = pi**1000\n     # the special code for working out the real\n     # and complex parts of a power with Integer exponent\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..7118b25 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,20 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n-\n-def test_binary_partitions():\n+def test_partitions_copy_behavior():\n+    # Test that modifying a dictionary from partitions doesn't affect others\n+    partition_list = [p.copy() for p in partitions(6, k=2)]\n+    \n+    # Modify the first partition and check it doesn't affect others\n+    partition_list[0][2] = 0\n+    assert partition_list[0] == {2: 0, 1: 0}  # modified\n+    assert partition_list[1] == {1: 2, 2: 2}  # should remain unchanged\n+    assert partition_list[2] == {1: 4, 2: 1}  # should remain unchanged\n+\n+    # Test that each call to partitions returns a new iterator\n+    partition_iter1 = [p.copy() for p in partitions(6, k=2)]\n+    partition_iter2 = [p.copy() for p in partitions(6, k=2)]\n+    assert partition_iter1 == partition_iter2\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..160d1aa 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -257,7 +257,11 @@ def test_power_rewrite_exp():\n def test_zero():\n     x = Symbol('x')\n     y = Symbol('y')\n+    from sympy import oo, zoo, S\n+\n     assert 0**x != 0\n+    assert 0**-oo == zoo\n+    assert S(0)**-oo == zoo\n     assert 0**(2*x) == 0**x\n     assert 0**(1.0*x) == 0**x\n     assert 0**(2.0*x) == 0**x\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..d5887dc 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,7 +1,9 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n                                  volume, kilometer)\n+from sympy.physics.units import joule\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n@@ -45,8 +47,20 @@ def test_convert_to():\n     assert q.convert_to(s) == q\n     assert speed_of_light.convert_to(m) == speed_of_light\n \n-\n-def test_Quantity_definition():\n+def test_convert_to_orthogonal_units():\n+    # Original expression should be returned if orthogonal units are used\n+    expr = joule * second\n+    result = convert_to(expr, joule)\n+    assert result == expr, f\"Expected {expr}, but got {result}\"\n+    \n+    # Converting to same units should return the original expression\n+    assert convert_to(joule*second, joule*second) == joule*second\n+    \n+    # Converting to base units should yield the correct expression\n+    assert convert_to(joule*second, kg*m**2/s) == kg*m**2/s\n+    \n+    # Conversion involving time units should handle orthogonal units gracefully\n+    assert convert_to(joule*second, minute) == joule*minute/60\n     q = Quantity(\"s10\", abbrev=\"sabbr\")\n     q.set_global_relative_scale_factor(10, second)\n     u = Quantity(\"u\", abbrev=\"dam\")\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..937a6d8 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -27,6 +27,12 @@ def test__aresame():\n     assert not _aresame(Basic([]), Basic(()))\n     assert not _aresame(Basic(2), Basic(2.))\n \n+from sympy import Symbol\n+\n+def test_symbol_slots_and_dict():\n+    s = Symbol('s')\n+    assert hasattr(s, '__slots__'), \"Symbol should have __slots__ defined.\"\n+    assert not hasattr(s, '__dict__'), \"Symbol should not have __dict__ if __slots__ is defined.\"\n \n def test_structure():\n     assert b21.args == (b2, b1)\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..427e66c 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -160,6 +161,27 @@ def test_sign():\n     x = Symbol('x', complex=True)\n     assert refine(sign(x), Q.zero(x)) == 0\n \n+def test_refine_with_integrals_and_arg():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x')\n+    J = Integral(sin(x)*exp(-a*x), (x, 0, oo))\n+\n+    # Test that refine can simplify the Piecewise result of an integral\n+    assert refine(J.doit(), Q.positive(a)) == 1/(a**2 + 1)\n+\n+    # Additional tests for refine with arg\n+    c = Symbol('c', complex=True)\n+    assert refine(arg(c), Q.positive(c)) == 0\n+    assert refine(arg(c), Q.negative(c)) == pi\n+    assert refine(arg(c), Q.real(c)) == 0\n+    assert refine(arg(c), Q.imaginary(c)) == pi/2\n+    assert refine(arg(c), Q.positive(Abs(c))) == 0\n+\n+    # Test arg with real and positive assumptions\n+    assert refine(arg(a), Q.positive(a)) == 0\n+    assert refine(arg(a), Q.negative(a)) == pi\n+    assert refine(arg(a), Q.zero(a)) == 0\n+\n \n def test_func_args():\n     class MyClass(Expr):\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..28143ea 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,8 +20,38 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+def test_issue_21373_subs_with_piecewise():\n+    from sympy import exp, sinh, Piecewise, symbols\n+    from sympy.core.cache import clear_cache\n+\n+    x, y, z = symbols('x y z')\n+\n+    # Clear the cache for a clean state\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    # Ensure simple substitution works without errors\n+    assert expr.subs({1: 1.0}) == expr\n+\n+    clear_cache()\n+    # Redefine symbols with real=True\n+    x, y, z = symbols('x y z', real=True)\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    # Ensure substitution after clearing cache does not throw PolynomialError\n+    assert expr.subs({1: 1.0}) == expr\n+\n+    # Additional checks for different functions\n+    expr_cosh = exp(cosh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_cosh.subs({1: 1.0}) == expr_cosh\n+\n+    expr_tanh = exp(tanh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_tanh.subs({1: 1.0}) == expr_tanh\n+\n+    # Check behaviour without division or exponential\n+    expr_no_div = sinh(Piecewise((x, y > x), (y, True)) + 1)\n+    assert expr_no_div.subs({1: 1.0}) == expr_no_div\n \n-def test_subs_Matrix():\n+    expr_no_exp = sinh(Piecewise((x, y > x), (y, True)) / z) + 1\n+    assert expr_no_exp.subs({1: 1.0}) == expr_no_exp\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..b04d4bc 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -39,6 +40,11 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n+\n def test_Matrix_kind():\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..159ffb7 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,6 +131,24 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n+    # Test cases addressing the issue with min_degrees\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    # Check total degree exactly 3\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2, x1*x2*x3,\n+        x2**3, x2**2*x3, x2*x3**2, x3**3\n+    }\n+    # Check degrees between 2 and 3\n+    assert set(itermonomials([x1, x2], 3, 2)) == {\n+        x1**2, x1*x2, x2**2, x1**3, x1**2*x2, x1*x2**2, x2**3\n+    }\n+    \n+    # Another test for non-commutative symbols\n+    a, b, c = symbols('a b c', commutative=False)\n+    assert set(itermonomials([a, b, c], 3, 3)) == {\n+        a**3, a**2*b, a**2*c, a*b**2, a*c**2, a*b*c, b**3, b**2*c, b*c**2, c**3\n+    }\n+\n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..ee6f8a4 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,8 +50,14 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n-\n-def test_solve_biquadratic():\n+def test_infinite_solution_detection():\n+    # Test cases for detecting infinite solution systems\n+    raises(NotImplementedError, lambda: solve_poly_system((x - 1,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((y - 1,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((x*y - 1,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((x**2 + y**2 - 1,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((x*y*z - 1,), x, y, z))\n+    raises(NotImplementedError, lambda: solve_poly_system((x - 1, y*z), x, y, z))\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n \n     f_1 = (x - 1)**2 + (y - 1)**2 - r**2\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..24b12dc 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,6 +11,7 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n \n \n def test_point():\n@@ -440,6 +442,15 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n+def test_issue_22684():\n+    # Test case derived from the issue description.\n+    # This should no longer raise an error.\n+    with evaluate(False):\n+        # Creating a Point object with evaluate(False) should not raise an error.\n+        p = Point(1, 2)\n+        assert isinstance(p, Point)\n+        assert p.equals(Point(1, 2))\n+\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..2657a29 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -338,6 +338,33 @@ def test_cse_Indexed():\n     assert len(replacements) > 0\n \n \n+def test_cse_MatrixSymbol_indexing_issue():\n+    # Test case based on the issue description for MatrixSymbol indexing\n+    import sympy as sp\n+\n+    def sub_in_matrixsymbols(exp, matrices):\n+        for matrix in matrices:\n+            for i in range(matrix.shape[0]):\n+                for j in range(matrix.shape[1]):\n+                    name = \"%s_%d_%d\" % (matrix.name, i, j)\n+                    sym = sp.symbols(name)\n+                    exp = exp.subs(sym, matrix[i, j])\n+        return exp\n+\n+    def t44(name):\n+        return sp.Matrix(4, 4, lambda i, j: sp.symbols('%s_%d_%d' % (name, i, j)))\n+\n+    a = t44(\"a\")\n+    b = t44(\"b\")\n+    e = a * b\n+    e2 = sub_in_matrixsymbols(e, [sp.MatrixSymbol(\"a\", 4, 4), sp.MatrixSymbol(\"b\", 4, 4)])\n+    cse_subs, cse_reduced = sp.cse(e2)\n+\n+    # Verify that the substitution process didn't unnecessarily replace Matrix elements\n+    assert all(sym[0].is_symbol for sym in cse_subs)  # All replacements should be symbols\n+    assert len(cse_subs) > 1  # Ensure there's more than one substitution to confirm cse is active\n+\n+\n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n     A = MatrixSymbol(\"A\", 3, 3)\n@@ -356,6 +383,33 @@ def test_cse_MatrixExpr():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+\n+def test_cse_MatrixSymbol_indexing_issue():\n+    # Test case based on the issue description for MatrixSymbol indexing\n+    import sympy as sp\n+\n+    def sub_in_matrixsymbols(exp, matrices):\n+        for matrix in matrices:\n+            for i in range(matrix.shape[0]):\n+                for j in range(matrix.shape[1]):\n+                    name = \"%s_%d_%d\" % (matrix.name, i, j)\n+                    sym = sp.symbols(name)\n+                    exp = exp.subs(sym, matrix[i, j])\n+        return exp\n+\n+    def t44(name):\n+        return sp.Matrix(4, 4, lambda i, j: sp.symbols('%s_%d_%d' % (name, i, j)))\n+\n+    a = t44(\"a\")\n+    b = t44(\"b\")\n+    e = a * b\n+    e2 = sub_in_matrixsymbols(e, [sp.MatrixSymbol(\"a\", 4, 4), sp.MatrixSymbol(\"b\", 4, 4)])\n+    cse_subs, cse_reduced = sp.cse(e2)\n+\n+    # Verify that the substitution process didn't unnecessarily replace Matrix elements\n+    assert all(sym[0].is_symbol for sym in cse_subs)  # All replacements should be symbols\n+    assert len(cse_subs) > 1  # Ensure there's more than one substitution to confirm cse is active\n+\n     replacements, reduced_exprs = cse([expr1 + expr2, expr1])\n     assert replacements\n \n",
  "sympy__sympy-23117": "",
  "sympy__sympy-23262": "",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..d575324 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,7 +541,28 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy import exp\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity\n+    from sympy.physics.units.systems.si import SI\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    \n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..2dfee26 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,33 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_issue_expansion():\n+    # Test cases covering the issue described for TensorProduct.expand()\n+\n+    # Test expansion for 2*U - V, U + V\n+    U = Operator('U')\n+    V = Operator('V')\n+    P = TensorProduct(2*U - V, U + V)\n+    assert P.expand(tensorproduct=True) == \\\n+        2*TensorProduct(U, U) + 2*TensorProduct(U, V) - TensorProduct(V, U) - TensorProduct(V, V)\n+\n+    # Original test patch examples\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional complex expansion tests\n+    X = Operator('X')\n+    Y = Operator('Y')\n+    assert TP(3*X + 2*Y, U - V).expand(tensorproduct=True) == \\\n+        3 * TP(X, U) - 3 * TP(X, V) + 2 * TP(Y, U) - 2 * TP(Y, V)\n+\n+    # Edge case with scalar multiplication and consideration of zero factor\n+    assert TP(0, A + B).expand(tensorproduct=True) == 0\n+    assert TP(A - A, B + C).expand(tensorproduct=True) == 0\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..b2f396c 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,7 +563,46 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_equivalent_dimensional_expressions():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, meter, second\n+    from sympy.physics.units.systems.si import SI\n+\n+    # Create quantities with equivalent dimensional expressions\n+    v2 = Quantity('v2')\n+    SI.set_quantity_dimension(v2, velocity)\n+    SI.set_quantity_scale_factor(v2, 3 * meter / second)\n+\n+    a2 = Quantity('a2')\n+    SI.set_quantity_dimension(a2, acceleration)\n+    SI.set_quantity_scale_factor(a2, -10 * meter / second**2)\n+\n+    t2 = Quantity('t2')\n+    SI.set_quantity_dimension(t2, time)\n+    SI.set_quantity_scale_factor(t2, 0.5 * second)\n+\n+    expr2 = a2*t2 + v2\n+    # Should not raise ValueError, dimensions should be detected as equivalent\n+    SI._collect_factor_and_dimension(expr2)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..00f0470 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -17,7 +18,11 @@ def test_prefix_operations():\n \n     dodeca = Prefix('dodeca', 'dd', 1, base=12)\n \n-    assert m * k == 1\n+    # Test for the bug with milli prefix causing the wrong evaluation\n+    assert milli * W == W / 1000\n+    assert milli * volt == volt / 1000\n+    # Additional test for correct behavior with other prefixes\n+    assert milli * k == S(1) / 1000\n     assert k * k == M\n     assert 1 / m == k\n     assert k / m == M\n",
  "django__django-12470": "",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..f877f92 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -342,6 +342,32 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+    def test_self_referencing_fk_ordering(self):\n+        # Create authors with editor references via a self-referencing foreign key\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2')\n+        author_1.editor = author_2\n+        author_2.editor = author_1\n+        author_1.save()\n+        author_2.save()\n+\n+        # Create articles linked to the authors\n+        article1 = Article.objects.create(author=author_1, headline='Article 1')\n+        article2 = Article.objects.create(author=author_2, headline='Article 2')\n+\n+        # Test ordering by self-referencing foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor').all(),\n+            ['Article 2', 'Article 1'], # Expecting Article 2 first due to author 2's editor being author 1\n+            attrgetter('headline')\n+        )\n+\n+        # Test ordering by self-referencing foreign key's id\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id').all(),\n+            ['Article 1', 'Article 2'], # Direct ordering by editor_id should list Article 1 first due to descending order\n+            attrgetter('headline')\n+        )\n \n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..5b78507 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,6 +3201,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    def test_boundwidget_id_for_label_uses_options_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the id set by ChoiceWidget.options.\n+        \"\"\"\n+        class CustomForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'Choice X'), ('y', 'Choice Y')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_option_id'}),\n+            )\n+\n+        form = CustomForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Expected that subwidget[0].id_for_label uses the id from options or the auto_id format\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_option_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_option_id_1')\n \n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..fd4f4e5 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,7 +640,25 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n-def test_colorbar_scale_reset():\n+def test_colorbar_update_norm():\n+    # Create sample data\n+    x, y = np.ogrid[-4:4:31j, -4:4:31j]\n+    z = 120000*np.exp(-x**2 - y**2)\n+\n+    # Plot the data and create a colorbar\n+    fig, ax = plt.subplots()\n+    im = ax.imshow(z, cmap='RdBu_r')\n+    cbar = fig.colorbar(im, ax=ax)\n+\n+    # Update the norm to LogNorm\n+    im.set_norm(LogNorm())\n+    cbar.update_normal(im)  # Check that update_normal works without errors\n+    fig.canvas.draw()  # Ensure changes are rendered\n+\n+    # Verify that the scale of the colorbar is changed to 'log'\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+    assert cbar.norm.vmin == z.min()\n+    assert cbar.norm.vmax == z.max()\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n \n@@ -652,7 +670,27 @@ def test_colorbar_scale_reset():\n \n     pcm.set_norm(LogNorm(vmin=1, vmax=100))\n     assert cbar.ax.yaxis.get_scale() == 'log'\n-    pcm.set_norm(Normalize(vmin=-20, vmax=20))\n+def test_colorbar_update_bruteforce():\n+    # Create sample data\n+    z = np.random.rand(10, 10) * 100\n+\n+    # Plot the data and create a colorbar\n+    fig, ax = plt.subplots()\n+    im = ax.imshow(z, cmap='viridis')\n+    cbar = fig.colorbar(im, ax=ax)\n+\n+    # Update the norm to LogNorm\n+    im.set_norm(LogNorm())\n+    try:\n+        cbar.update_bruteforce(im)  # This was the problematic call\n+    except ZeroDivisionError:\n+        assert False, \"update_bruteforce should not raise ZeroDivisionError\"\n+    fig.canvas.draw()  # Ensure changes are rendered\n+\n+    # Verify the colorbar is using the log scale\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+    assert cbar.norm.vmin == z.min()\n+    assert cbar.norm.vmax == z.max()\n     assert cbar.ax.yaxis.get_scale() == 'linear'\n \n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..0656bf0 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -131,6 +131,40 @@ def test_decorators(app):\n         '',\n     ]\n \n+import sys\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is required for annotation support')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    options = {\n+        \"members\": None,\n+        \"inherited-members\": True\n+    }\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..644fc99 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -358,7 +359,32 @@ def test_issue_2827_trigsimp_methods():\n     assert exptrigsimp(eq) == eq\n \n \n-def test_exptrigsimp():\n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+def test_rational_trigsimp():\n+    # Test for rational trigonometric simplification\n+    r = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    simplified_r = trigsimp(r)\n+    expected_r = cos(S(1)/50 - S(1)/25)\n+    assert simplified_r == expected_r\n+\n+    # Testing acos simplification\n+    acos_expr = acos(simplified_r)\n+    expected_acos = acos(expected_r)\n+    assert acos_expr == expected_acos\n+\n+    # Additional verification with negative trigonometric values\n+    r_neg = sin(Rational(-1, 50))*sin(Rational(1, 25)) + cos(Rational(-1, 50))*cos(Rational(1, 25))\n+    simplified_r_neg = trigsimp(r_neg)\n+    expected_r_neg = cos(S(-1)/50 - S(1)/25)\n+    assert simplified_r_neg == expected_r_neg\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..97e9374 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,23 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_issue_sum_centering():\n+    from sympy import Sum, oo\n+    from sympy.abc import x\n \n-def test_units():\n+    # Test to check the alignment of x and + 3 in Sum pretty print\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ucode_str = u(\"\"\"\\\n+  \u221e    \\n\\\n+ ___   \\n\\\n+ \u2572     \\n\\\n+  \u2572   x\\n\\\n+  \u2571    \\n\\\n+ \u2571   +3\\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  \\\n+\"\"\")\n+    assert upretty(expr) == ucode_str\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..32d55b6 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -704,6 +704,25 @@ def test_uniq():\n     assert list(uniq([2, 3, 2, 4, [2], [1], [2], [3], [1]])) == \\\n         [2, 3, 4, [2], [1], [3]]\n \n+def test_uniq_modification():\n+    from sympy.utilities.iterables import uniq\n+    from pytest import raises\n+\n+    # Test cases to trigger RuntimeError if list is modified during iteration\n+    f1 = [1, 2, 3, 4]\n+    raises(RuntimeError, lambda: [f1.remove(i) for i in uniq(f1)])\n+\n+    f2 = ['a', 'b', 'a', 'c']\n+    raises(RuntimeError, lambda: [f2.remove(i) for i in uniq(f2)])\n+\n+    f3 = [1, [2], 3, [2]]\n+    raises(RuntimeError, lambda: [f3.remove(i) for i in uniq(f3)])\n+\n+    f4 = [1, 1, 1, 1]\n+    raises(RuntimeError, lambda: [f4.remove(i) for i in uniq(f4)])\n+\n+    f5 = []\n+    raises(RuntimeError, lambda: [f5.remove(i) for i in uniq(f5)] if f5 else None)\n \n def test_kbins():\n     assert len(list(kbins('1123', 2, ordered=1))) == 24\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..200d6e4 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -6,6 +7,7 @@ from operator import attrgetter\n from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n+from django.db.models import Max\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n \n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..16253d8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -545,8 +545,34 @@ class BasicExpressionsTests(TestCase):\n         self.assertCountEqual(subquery_test, [self.foobar_ltd, self.gmbh])\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n-\n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_sql_correctness(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True, \"Subquery attribute should be set to True upon initialization.\")\n+        self.assertIs(employees.query.subquery, False, \"Main query should not have subquery attribute as True.\")\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql, \"SQL should start with '(SELECT '\")\n+        self.assertTrue(sql.endswith(')'), \"SQL should end with ')'\")\n+\n+    def test_subquery_sql_without_setting_subquery(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        employees_subquery.query.subquery = False  # Explicitly setting it to False to test behavior\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertNotIn('(SELECT ', sql, \"SQL should not be valid when subquery is not set to True\")\n+        self.assertNotIn(')', sql, \"SQL should not end with ')' if subquery attribute is False\")\n+\n+    def test_subquery_sql_after_setting_subquery(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        employees_subquery.query.subquery = False  # Initially False\n+        employees_subquery.query.subquery = True   # Set it to True\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql, \"SQL should start with '(SELECT ' when subquery is manually set to True\")\n+        self.assertTrue(sql.endswith(')'), \"SQL should end with ')' when subquery is manually set to True\")\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..82523ef 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,15 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            # Attempt to query PoolStyle, which involves a FilteredRelation with select_related\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+            ).select_related('tournament_pool', 'tournament_pool__tournament'))\n+            # Assert that the tournament for pool and tournament_pool match as expected\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +173,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..3f51864 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn import PairGrid\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,20 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_scatterplot_with_hue(self):\n+        import seaborn as sns\n+        import pytest\n+\n+        iris = sns.load_dataset(\"iris\")\n+        g = PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+\n+        # Check for no error in plotting with hue in map\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            plt.close('all')\n+        except Exception as e:\n+            pytest.fail(f\"PairGrid with hue failed: {e}\")\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..c80a469 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -340,6 +340,21 @@ def test_excinfo_repr():\n \n \n def test_excinfo_str():\n+    import pytest\n+\n+    # Normal exception catching\n+    try:\n+        raise LookupError(\"A\\nB\\nC\")\n+    except LookupError as e:\n+        normal_str = str(e)\n+\n+    # Using pytest.raises\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+\n+    pytest_str = str(excinfo.value)\n+\n+    assert normal_str == pytest_str\n     excinfo = pytest.raises(ValueError, h)\n     s = str(excinfo)\n     assert s.startswith(__file__[:-9])  # pyc file and $py.class\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..173c81c 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -436,6 +436,18 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n+    def test_collect_only_shorthand(self, testdir):\n+        \"\"\"Test that the shorthand -C for --collect-only works as expected.\"\"\"\n+        testdir.makepyfile(\"def test_dummy(): pass\")\n+        # Run with the full collect-only option\n+        result_long = testdir.runpytest(\"--collect-only\")\n+        result_long.stdout.fnmatch_lines([\"*test_dummy*\"])\n+        # Run with the shorthand option\n+        result_short = testdir.runpytest(\"-C\")\n+        result_short.stdout.fnmatch_lines([\"*test_dummy*\"])\n+        # Ensure both results are identical\n+        assert result_long.ret == result_short.ret\n+        assert result_long.stdout.lines == result_short.stdout.lines\n \n class TestSession:\n     def test_parsearg(self, testdir):\n",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..e666bc4 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -90,8 +90,13 @@ def test_Identity_doit():\n     assert Inn.doit() == Identity(2*n)\n     assert isinstance(Inn.doit().rows, Mul)\n \n-\n-def test_addition():\n+def test_identity_matrix_sum():\n+    from sympy import Sum, symbols\n+    i, j = symbols('i j', integer=True)\n+    \n+    # Test case for checking the sum of elements in an identity matrix\n+    In = Identity(n)\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     A = MatrixSymbol('A', n, m)\n     B = MatrixSymbol('B', n, m)\n \n",
  "sympy__sympy-20049": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex b711aa3..e57509b 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -516,6 +516,18 @@ class Point(object):\n         10*N.x\n \n         \"\"\"\n+        \n+    # Test to verify the calculation of velocity if position is given\n+    def test_calculated_vel():\n+        from sympy import symbols\n+        from sympy.physics.vector import dynamicsymbols\n+        from sympy.physics.vector import ReferenceFrame, Point\n+        A = ReferenceFrame('A')\n+        q = dynamicsymbols('q')\n+        P = Point('P')\n+        Q = Point('Q')\n+        Q.set_pos(P, q * A.x + 2 * q * A.y)\n+        assert Q.vel(A) == q.diff() * A.x + 2 * q.diff() * A.y\n \n         _check_frame(frame)\n         if not (frame in self._vel_dict):\n",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..8cffe23 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,6 +251,19 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n+def test_issue_21537_latex_parsing():\n+    from sympy.parsing.latex import parse_latex\n+\n+    # Test case for the given LaTeX issue\n+    latex_str = r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\"\n+    expected_output = Mul(Pow(Add(Pow(Symbol('a'), 3), Symbol('b')), -1),\n+                          Pow(Symbol('c'), 2), evaluate=False)\n+    # Compare the parsed LaTeX with expected sympy expression\n+    assert parse_latex(latex_str) == expected_output\n+\n+    # Original test patch related test\n+    assert str(Mul(Symbol('x'), Pow(1/Symbol('y'), -1, evaluate=False), evaluate=False)) == 'x/(1/y)'\n+\n # These bad LaTeX strings should raise a LaTeXParsingError when parsed\n BAD_STRINGS = [\n     r\"(\",\n"
}