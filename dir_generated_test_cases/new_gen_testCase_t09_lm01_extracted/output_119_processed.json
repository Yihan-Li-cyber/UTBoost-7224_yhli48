{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..86df0b1 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -128,6 +128,32 @@ def test_arith_oper():\n     with pytest.raises(ModelDefinitionError, match=r\"Unsupported operands for arithmetic operator: .*\"):\n         _arith_oper(sh1, map1)\n \n+import pytest\n+import numpy as np\n+from astropy.modeling import models\n+from astropy.modeling.separable import separability_matrix\n+\n+def test_separability_matrix_nested_compound():\n+    # Define the models\n+    linear1 = models.Linear1D(10)\n+    linear2 = models.Linear1D(5)\n+    pix2sky = models.Pix2Sky_TAN()\n+    \n+    # Create a compound model and a nested compound model\n+    cm = linear1 & linear2\n+    nested_cm = pix2sky & cm\n+    \n+    # Compute the separability matrices\n+    expected_separability_matrix_cm = np.array([[True, False],\n+                                                [False, True]])\n+    expected_separability_matrix_nested_cm = np.array([[True, True, False, False],\n+                                                       [True, True, False, False],\n+                                                       [False, False, True, True],\n+                                                       [False, False, True, True]])\n+\n+    # Assert the separability results\n+    assert np.array_equal(separability_matrix(cm), expected_separability_matrix_cm), \"Separability matrix for simple compound model is incorrect.\"\n+    assert np.array_equal(separability_matrix(nested_cm), expected_separability_matrix_nested_cm), \"Separability matrix for nested compound model is incorrect.\"\n \n @pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n def test_separable(compound_model, result):\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..2f83c15 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,10 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n@@ -13,6 +17,50 @@ def assert_equal_splitlines(arg1, arg2):\n \n def test_read_normal():\n     \"\"\"Normal SimpleRST Table\"\"\"\n+    \n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n+\n+def test_rst_write_with_header_rows():\n+    \"\"\"Test writing a table with header_rows given\"\"\"\n+    tbl = QTable(\n+        {'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.ct, 'ints': [1, 2]},\n+        names=['wave', 'response', 'ints']\n+    )\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    expected_lines = [\n+        \"======= ======== ====\",\n+        \"  wave response ints\",\n+        \"    nm       ct     \",\n+        \"float64  float64 int64\",\n+        \"======= ======== ====\",\n+        \"  350.0      0.7    1\",\n+        \"  950.0      1.2    2\",\n+        \"======= ======== ====\",\n+    ]\n+    assert out.getvalue().splitlines() == expected_lines\n     table = \"\"\"\n # comment (with blank line above)\n ======= =========\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..a9432bf 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,66 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+import os\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip_lowercase(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    READ TERR 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n+    \n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"test_lowercase.qdp\")\n \n-def test_read_example():\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+\n+    with pytest.warns(AstropyUserWarning) as record:\n+        table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n+\n+    assert np.any(\n+        [\n+            \"This file contains multiple command blocks\" in r.message.args[0]\n+            for r in record\n+        ]\n+    )\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..1d27e4f 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,6 +28,28 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n+import numpy as np\n+from astropy.nddata import NDDataRef\n+import pytest\n+\n+def test_nddata_bitmask_arithmetic_v53_issue():\n+    \"\"\"Test mask propagation issue from version 5.3 is resolved.\"\"\"\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+    \n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+    \n+    # multiply masked by constant should copy mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_mask.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+    \n+    # multiply masked by no mask should copy mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n # Test with Data covers:\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..7bf290b 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -245,6 +245,24 @@ class TestTableFunctions(FitsTestCase):\n         # Change scaled field and scale back to the original array\n         t[1].data.field('c4')[0] = 1\n         t[1].data._scale_back()\n+        \n+    def test_d_exponent_conversion(self):\n+        \"\"\"Test the conversion of the exponent separator from E to D in FITS.\"\"\"\n+        # Create a column with a data that will have 'D' in its formatted output\n+        r1 = np.array([4.95652173913043548, 3.45678901234567890])\n+        c2 = fits.Column(name='numbers', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c2])\n+        \n+        # Write the FITS file and assert that it contains the 'D' exponent\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+        with open(self.temp('test_d_exponent.fits')) as f:\n+            content = f.read()\n+            assert '4.95652173913043548D+00' in content\n+            assert '3.45678901234567890D+00' in content\n+\n+        # Read back the file and ensure data consistency\n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n         assert str(np.rec.recarray.field(t[1].data, 'c4')) == '[84 84]'\n \n         # look at data column-wise\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..3c2a39a 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,8 +1092,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n-\n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS should be 0o644\n+        when FILE_UPLOAD_PERMISSIONS is not explicitly set.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..144ebc7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -376,7 +376,34 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 2)\n \n-    def test_order_by_exists(self):\n+    def test_order_by_multiline_rawsql(self):\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN num_projects > 10\n+                     THEN priority_level\n+                     ELSE 0 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN total_sales > 1000\n+                     THEN (priority_level, last_sale_date)\n+                     ELSE null END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN total_sales <= 1000\n+                     THEN (priority_level, last_sale_date, registration_date)\n+                     ELSE null END\n+            ''', []).desc()\n+        )\n+\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(queryset=qs):\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [self.example_inc, self.gmbh, self.foobar_ltd],\n+                )\n         mary = Employee.objects.create(firstname='Mary', lastname='Mustermann', salary=20)\n         mustermanns_by_seniority = Employee.objects.filter(lastname='Mustermann').order_by(\n             # Order by whether the employee is the CEO of a company\n",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..44a3361 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -229,6 +229,22 @@ class NumericPasswordValidatorTest(SimpleTestCase):\n             NumericPasswordValidator().get_help_text(),\n             \"Your password can't be entirely numeric.\"\n         )\n+    \n+    def test_unicode_validator_with_trailing_newline(self):\n+        invalid_usernames = ['username\\n', 'endwithnewline\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_with_trailing_newline(self):\n+        invalid_usernames = ['username\\n', 'endwithnewline\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n \n \n class UsernameValidatorsTests(SimpleTestCase):\n@@ -237,7 +253,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +266,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +274,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..c9c513f 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,25 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_content_assignment(self):\n+        r = HttpResponse()\n+        r.content = memoryview(b'memoryview')\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_bytearray_content(self):\n+        # Test with a similar container type, bytearray\n+        r = HttpResponse(bytearray(b'bytearray'))\n+        self.assertEqual(r.content, b'bytearray')\n+\n+    def test_bytes_and_memoryview(self):\n+        # Ensure combination of bytes and memoryview as iterable content\n+        r = HttpResponse([b'bytes', memoryview(b' and memoryview')])\n+        self.assertEqual(r.content, b'bytes and memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..ca6e5a3 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..a776778 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.test.utils import captured_stdout\n \n from .models import Proxy, UserProxy\n \n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..8aae570 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -19,7 +19,10 @@ from django.test.utils import extend_sys_path\n from django.utils import autoreload\n from django.utils.autoreload import WatchmanUnavailable\n \n-from .utils import on_macos_with_hfs\n+import os\n+import sys\n+from django.core.management import call_command\n+from django.utils.autoreload import StatReloader\n \n \n class TestIterModulesAndFiles(SimpleTestCase):\n@@ -127,7 +130,31 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.addCleanup(lambda: sys.modules.pop('time_proxy', None))\n         list(autoreload.iter_all_python_module_files())  # No crash.\n \n-    def test_module_without_spec(self):\n+    def test_manage_py_is_reloaded(self):\n+        \"\"\"\n+        Changes to manage.py should trigger the autoreloader.\n+        \"\"\"\n+        manage_py_location = Path(sys.modules['__main__'].__file__).resolve()\n+        reloader = StatReloader()\n+\n+        # Assert the current manage.py is being tracked for changes\n+        self.assertIn(manage_py_location, reloader.watch_glob([manage_py_location]))\n+\n+        # Simulating a change to the manage.py file.\n+        with open(manage_py_location, 'a') as manage_py:\n+            manage_py.write(\"# Trigger change\\n\")\n+\n+        # Use a mock to simulate file change detection\n+        with mock.patch.object(reloader, 'notify_file_changed') as mock_notify:\n+            reloader.tick()\n+            mock_notify.assert_called_with(manage_py_location)\n+\n+        # Clean up: remove the last line added for the test\n+        with open(manage_py_location, 'r+') as manage_py:\n+            lines = manage_py.readlines()\n+            manage_py.seek(0)\n+            manage_py.writelines(lines[:-1])\n+            manage_py.truncate()\n         module = types.ModuleType('test_module')\n         del module.__spec__\n         self.assertEqual(autoreload.iter_modules_and_files((module,), frozenset()), frozenset())\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..167c5f1 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -141,6 +141,10 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n+import itertools\n+from pathlib import Path\n+import django.utils.autoreload as autoreload\n+\n class TestCommonRoots(SimpleTestCase):\n     def test_common_roots(self):\n         paths = (\n@@ -153,7 +157,27 @@ class TestCommonRoots(SimpleTestCase):\n         self.assertCountEqual(results, [Path('/first/'), Path('/root/first/')])\n \n \n-class TestSysPathDirectories(SimpleTestCase):\n+class TestIterModulesAndFiles(SimpleTestCase):\n+    def test_path_with_embedded_null_bytes(self):\n+        # Paths containing null bytes should be ignored and not throw exceptions\n+        for path in (\n+            'embedded_null_byte\\x00.py',\n+            'di\\x00rectory/embedded_null_byte.py',\n+        ):\n+            with self.subTest(path=path):\n+                result = autoreload.iter_modules_and_files((), frozenset([path]))\n+                self.assertEqual(result, frozenset())\n+\n+    def test_ignore_invalid_files(self):\n+        # Edge case where an invalid file path (e.g., path that doesn't exist)\n+        # should not impact the other valid paths being processed\n+        valid_path = str(Path(__file__).resolve())  # Use the current test file path as a valid path\n+        invalid_paths = (\n+            '/invalid_path\\x00.py',\n+            '/another_invalid\\x00_directory/file.py',\n+        )\n+        result = autoreload.iter_modules_and_files((), frozenset([valid_path] + list(invalid_paths)))\n+        self.assertIn(Path(valid_path).absolute(), result)\n     def setUp(self):\n         self._directory = tempfile.TemporaryDirectory()\n         self.directory = Path(self._directory.name).resolve().absolute()\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..0ad5560 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1,5 +1,41 @@\n import importlib\n import inspect\n+from django.test import Client\n+\n+\n+class DebugConverterTests(SimpleTestCase):\n+    def setUp(self):\n+        self.client = Client()\n+\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Raising Http404 in a path converter's to_python method should return a helpful 404 page\n+        with techical details when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            # Check if the response contains the phrasing that indicates a technical 404 page\n+            self.assertContains(response, 'Page not found', status_code=404)\n+            self.assertContains(response, \"Django tried these URL patterns\")\n+\n+    def test_value_error_in_converter(self):\n+        \"\"\"\n+        Raising ValueError in a path converter's to_python method should try the next path.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=ValueError):\n+            response = self.client.get('/path-post/1/')\n+            # Assuming '/path-post/1/' does not match any pattern after the ValueError, expect a 404\n+            self.assertEqual(response.status_code, 404)\n+\n+    def test_other_exception_in_converter(self):\n+        \"\"\"\n+        Raising an unexpected exception in a path converter's to_python method should not be caught\n+        and should result in a server error during DEBUG mode.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Exception):\n+            response = self.client.get('/path-post/1/')\n+            self.assertEqual(response.status_code, 500)\n+\n import os\n import re\n import sys\n@@ -18,6 +54,8 @@ from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n from django.utils.functional import SimpleLazyObject\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..17c8431 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -81,6 +81,12 @@ class BinaryFieldTests(SimpleTestCase):\n         ])\n \n \n+from django.core.checks import Error, Warning\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.functional import lazy\n+from django.db import connections, DEFAULT_DB_ALIAS, models\n+\n @isolate_apps('invalid_models_tests')\n class CharFieldTests(SimpleTestCase):\n \n@@ -334,6 +340,67 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+                \n+    def test_choices_with_exact_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=3, choices=[\n+                    ('OK', 'Good'), ('BAD', 'Bad')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=7, choices=[\n+                    ('OK', 'Good'), ('Longer', 'Long value')\n+                ],\n+            )\n+\n+        for name in ('field', 'group'):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [])\n+\n+    def test_choices_without_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                choices=[\n+                    ('OK', 'Good'), ('Bad', 'Bad value')\n+                ],\n+            )\n+        \n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"CharFields must define a 'max_length' attribute.\",\n+                obj=field,\n+                id='fields.E120',\n+            ),\n+        ])\n+\n     @unittest.skipUnless(connection.vendor == 'mysql',\n                          \"Test valid only for MySQL\")\n     def test_too_long_char_field_under_mysql(self):\n@@ -353,6 +420,12 @@ class CharFieldTests(SimpleTestCase):\n         ])\n \n \n+from django.core.checks import Error, Warning\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.functional import lazy\n+from django.db import connections, DEFAULT_DB_ALIAS, models\n+\n @isolate_apps('invalid_models_tests')\n class DateFieldTests(SimpleTestCase):\n     maxDiff = None\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..e3aadad 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -252,7 +252,23 @@ class WriterTests(SimpleTestCase):\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n-    def test_serialize_enums(self):\n+    def test_serialize_translated_enum_use_name(self):\n+        class Status(Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        class Item(models.Model):\n+            status = models.CharField(\n+                default=Status.GOOD,\n+                max_length=128,\n+            )\n+\n+        field = models.CharField(\n+            default=Status.GOOD,\n+        )\n+        # Serialize the field and verify correct enum name usage\n+        serialized_value, _ = MigrationWriter.serialize(field.default)\n+        self.assertEqual(serialized_value, \"Status['GOOD']\")\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..3999c23 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -316,6 +317,27 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_year_logic(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        tests = (\n+            # Assume current year is 2019\n+            (datetime(2019, 1, 1), 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)),\n+            (datetime(2019, 1, 1), 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            # Assume current year is 2020\n+            (datetime(2020, 1, 1), 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (datetime(2020, 1, 1), 'Friday, 31-Dec-71 08:49:37 GMT', datetime(2071, 12, 31, 8, 49, 37)),\n+            # Assume current year is 2048\n+            (datetime(2048, 1, 1), 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 1, 1), 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for mocked_date, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = mocked_date\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n     def test_parsing_rfc850(self):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..e5f19b8 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -30,6 +30,10 @@ class Vehicle(models.IntegerChoices):\n     JET_SKI = 3\n \n     __empty__ = _('(Unknown)')\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.functional import Promise\n+from django.db import models\n \n \n class Gender(models.TextChoices):\n@@ -41,7 +45,39 @@ class Gender(models.TextChoices):\n \n \n class ChoicesTests(SimpleTestCase):\n-    def test_integerchoices(self):\n+    def test_enum_textchoices_value_returned_is_string(self):\n+        class MyChoice(models.TextChoices):\n+            FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+            SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+        class MyObjectTest(models.Model):\n+            my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+        my_object = MyObjectTest(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n+        # Simulate saving and retrieving from database\n+        my_object_from_db = MyObjectTest(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(my_object_from_db.my_str_value, str)\n+        self.assertEqual(my_object_from_db.my_str_value, \"first\")\n+\n+    def test_enum_integerchoices_value_returned_is_integer(self):\n+        class MyIntegerChoice(models.IntegerChoices):\n+            ONE = 1, _(\"One\")\n+            TWO = 2, _(\"Two\")\n+\n+        class MyIntegerObject(models.Model):\n+            my_int_value = models.IntegerField(choices=MyIntegerChoice.choices)\n+\n+        my_integer_object = MyIntegerObject(my_int_value=MyIntegerChoice.ONE)\n+        self.assertIsInstance(my_integer_object.my_int_value, int)\n+        self.assertEqual(my_integer_object.my_int_value, 1)\n+\n+        # Simulate saving and retrieving from database\n+        my_integer_object_from_db = MyIntegerObject(my_int_value=MyIntegerChoice.ONE)\n+        self.assertIsInstance(my_integer_object_from_db.my_int_value, int)\n+        self.assertEqual(my_integer_object_from_db.my_int_value, 1)\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n         self.assertEqual(Suit.values, [1, 2, 3, 4])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..97ce238 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -187,7 +187,37 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n \n-class GetChoicesTests(SimpleTestCase):\n+class OverriddenGetFieldDisplayTests(SimpleTestCase):\n+\n+    def test_overriding_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+            \n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), \"something\")\n+\n+    def test_overriding_get_FIELD_display_with_different_value(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+            \n+            def get_foo_bar_display(self):\n+                return \"different_value\"\n+\n+        f = FooBar(foo_bar=2)\n+        self.assertEqual(f.get_foo_bar_display(), \"different_value\")\n+\n+    def test_get_FIELD_display_without_override(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), \"foo\")\n+\n+        f = FooBar(foo_bar=2)\n+        self.assertEqual(f.get_foo_bar_display(), \"bar\")\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 7b8648d..5c521ee 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -67,8 +67,21 @@ class SimplifiedURLTests(SimpleTestCase):\n                     match.route,\n                     r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n                 )\n-\n-    def test_path_lookup_with_inclusion(self):\n+    def test_url_with_optional_format_param(self):\n+        # Testing URL with format param missing\n+        match = resolve('/module/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'html'})  # Default format='html'\n+        \n+        # Testing URL with format param as 'json'\n+        match = resolve('/module/json/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'json'})\n+        \n+        # Testing URL with format param as 'xml'\n+        match = resolve('/module/xml/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'xml'})\n         match = resolve('/included_urls/extra/something/')\n         self.assertEqual(match.url_name, 'inner-extra')\n         self.assertEqual(match.route, 'included_urls/extra/<extra>/')\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..26e664b 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,6 @@\n+\n+from django.test import TestCase\n+\n import pickle\n \n from django import forms\n@@ -150,7 +153,29 @@ class ChoicesTests(SimpleTestCase):\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n-    def test_choices_and_field_display(self):\n+    def test_inherited_choices_display(self):\n+        \"\"\"\n+        Test the get_FIELD_display method for a model that inherits choices\n+        and overrides them with additional options.\n+        \"\"\"\n+        class A(models.Model):\n+            foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+            \n+            class Meta:\n+                abstract = True\n+        \n+        class B(A):\n+            foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\"), (\"C\", \"output3\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+        \n+        instance_b_a = B(field_foo='A')\n+        instance_b_b = B(field_foo='B')\n+        instance_b_c = B(field_foo='C')\n+        \n+        self.assertEqual(instance_b_a.get_field_foo_display(), 'output1')\n+        self.assertEqual(instance_b_b.get_field_foo_display(), 'output2')\n+        self.assertEqual(instance_b_c.get_field_foo_display(), 'output3')\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n         values.\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..7a4502f 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,13 +1,56 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n-\n+from django.test import SimpleTestCase, override_settings\n \n class TranslationCheckTests(SimpleTestCase):\n \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+            ('en', 'English'),\n+        ],\n+    )\n+    def test_no_error_for_available_base_language(self):\n+        \"\"\"\n+        Test that translation.E004 is not raised if a base language is available\n+        for a requested sublanguage.\n+        \"\"\"\n+        tests = [\n+            'de-at',  # Austrian German should fallback to German.\n+            'fr-ca',  # Canadian French should fallback to French.\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('fr', 'French'),\n+        ],\n+    )\n+    def test_error_for_unavailable_sublanguage(self):\n+        \"\"\"\n+        Test that translation.E004 is raised if neither the sublanguage\n+        nor its base language is available.\n+        \"\"\"\n+        with self.settings(LANGUAGE_CODE='fr-ca'):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(\n+                    'You have provided a value for the LANGUAGE_CODE setting that is '\n+                    'not in the LANGUAGES setting.',\n+                    id='translation.E004'\n+                )\n+            ])\n+\n     def setUp(self):\n         self.valid_tags = (\n             'en',              # language\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..712a00f 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,78 @@\n+\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+    \n+    def test_foreign_key_dependency_order(self):\n+        # Test that deserialization handles foreign keys correctly.\n+        # The ObjectReference must be inserted before an Object that references it.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": null}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj_ref\": 2, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        try:\n+            with transaction.atomic():\n+                connection.creation.deserialize_db_from_string(data)\n+        except IntegrityError:\n+            self.fail(\"Deserialization raised IntegrityError unexpectedly!\")\n+        \n+        obj = Object.objects.get(pk=2)\n+        obj_ref = ObjectReference.objects.get(pk=2)\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+\n+    def test_circular_reference_with_context_manager(self):\n+        # This test checks if deserialize_db_from_string properly handles transactions.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 3,\n+                \"fields\": {\"obj\": null}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 3,\n+                \"fields\": {\"obj_ref\": 3, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=3)\n+        obj_ref = ObjectReference.objects.get(pk=3)\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, None)\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +81,8 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n+from django.db import transaction, IntegrityError\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..96d1baf 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -158,6 +158,65 @@ class RelativeFieldTests(SimpleTestCase):\n                 id='fields.E335',\n             ),\n         ])\n+        \n+    def test_correct_recursive_relationship_hint(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='CorrectAmbiguousRelationship')\n+\n+        class CorrectAmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.field', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"CorrectAmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n+    def test_foreign_key_error_in_recursive_relationship(self):\n+        class Department(models.Model):\n+            pass\n+\n+        class Employee(models.Model):\n+            team = models.ManyToManyField(\n+                'self', symmetrical=False, through='RecursiveAmbiguousRelationship')\n+\n+        class RecursiveAmbiguousRelationship(models.Model):\n+            employee = models.ForeignKey(Employee, models.CASCADE)\n+            first_department = models.ForeignKey(Department, models.CASCADE)\n+            second_department = models.ForeignKey(Department, models.CASCADE)\n+\n+        team_field = Employee._meta.get_field('team')\n+        self.assertEqual(team_field.check(from_model=Employee), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Employee.team', but it has more than two \"\n+                \"foreign keys to 'Department', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"RecursiveAmbiguousRelationship\").'\n+                ),\n+                obj=team_field,\n+                id='fields.E334',\n+            ),\n+        ])\n \n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..bd9224e 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,7 +1249,56 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n-    def test_request_meta_filtering(self):\n+    def test_cleanse_setting_recurses_in_lists_and_nested_structures(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'foo': 'value',\n+            'secret': 'value',\n+            'token': 'value',\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+            ],\n+        }\n+        cleansed = {\n+            'foo': 'value',\n+            'secret': reporter_filter.cleansed_substitute,\n+            'token': reporter_filter.cleansed_substitute,\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': reporter_filter.cleansed_substitute},\n+                {'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+            ],\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..35613de 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,55 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        \n+        # Set up the initial model state with unique_together and index_together\n+        project_state = self.set_up_test_model(\n+            app_label,\n+            unique_together=[('pink', 'weight')],\n+            index_together=[('pink', 'weight')]\n+        )\n+        \n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        \n+        # Now, remove index_together and ensure the operation succeeds without affecting unique_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', None)\n+        operation.state_forwards(app_label, new_state)\n+        \n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+    def test_alter_and_shift_indexes_feature(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        \n+        # Initial state: using index_together with the indexes declared in Django 1.11 style\n+        project_state = self.set_up_test_model(\n+            app_label,\n+            unique_together=[('pink', 'weight')],\n+            indexes=[models.Index(fields=['pink', 'weight'])]\n+        )\n+        \n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Transition to the new state by removing the custom declared index\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..5af744e 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -546,6 +546,30 @@ class DeletionTests(TestCase):\n         MR.objects.create(r=r, m=m1)\n         r.m_set.add(m1)\n         r.m_set.add(m2)\n+\n+    def test_delete_zero_objects_no_foreign_keys(self):\n+        \"\"\"\n+        Test that delete() returns a consistent result for a model with no\n+        foreign keys when no objects are deleted.\n+        \"\"\"\n+        existed_objs = {\n+            'delete.SimpleModel': 0,\n+        }\n+        deleted, deleted_objs = SimpleModel.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, existed_objs)\n+\n+    def test_delete_zero_objects_with_foreign_keys(self):\n+        \"\"\"\n+        Test that delete() returns a consistent result for a model with\n+        foreign keys when no objects are deleted.\n+        \"\"\"\n+        existed_objs = {\n+            'delete.RelatedModel': 0,\n+        }\n+        deleted, deleted_objs = RelatedModel.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, existed_objs)\n         r.save()\n         existed_objs = {\n             R._meta.label: R.objects.count(),\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..5566310 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -76,10 +76,30 @@ class ASGITest(SimpleTestCase):\n         response_body = await communicator.receive_output()\n         self.assertEqual(response_body['type'], 'http.response.body')\n         self.assertEqual(response_body['body'], test_file_contents)\n-        # Allow response.close() to finish.\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n         await communicator.wait()\n \n-    async def test_headers(self):\n+    async def test_static_file_async_response(self):\n+        # Test if ASGIStaticFilesHandler can handle a static file request asynchronously\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/test/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        \n+    async def test_async_response_file_not_found(self):\n+        # Test if ASGIStaticFilesHandler returns 404 for a non-existent static file\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/test/notfound.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n             application,\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..0a2ea09 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,15 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('---leading-dashes', 'leading-dashes', False),\n+            ('trailing-dashes---', 'trailing-dashes', False),\n+            ('___leading-underscores', 'leading-underscores', False),\n+            ('trailing-underscores___', 'trailing-underscores', False),\n+            ('mixed___---trailing', 'mixed-trailing', False),\n+            ('--___mixed-leading', 'mixed-leading', False),\n+            ('no-special-characters', 'no-special-characters', False),\n+            ('_mixed--separators_', 'mixed-separators', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..f0a3492 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,7 +45,35 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n-    def test_available_apps(self):\n+from django.test import TestCase, RequestFactory\n+from django.contrib.auth.models import User\n+from django.contrib.admin.models import LogEntry\n+from django.apps import apps\n+from django.urls import reverse\n+from myapp.models import Article\n+\n+class AdminSiteTestCase(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.user = User.objects.create_superuser('admin', 'admin@example.com', 'password')\n+        self.client.login(username='admin', password='password')\n+\n+    def test_app_list_contains_model_class(self):\n+        # Ensure our test case is performing the login\n+        request = self.factory.get(reverse('admin:index'))\n+        request.user = self.user\n+\n+        app_list = self.client.get(reverse('admin:index')).context['available_apps']\n+\n+        # Checking for model class in app_list\n+        article_model = next(m['model'] for a in app_list for m in a['models'] if m['object_name'] == 'Article')\n+        self.assertEqual(article_model, Article)\n+\n+        user_model = next(m['model'] for a in app_list for m in a['models'] if m['object_name'] == 'User')\n+        self.assertEqual(user_model, User)\n+\n+        # Checking the presence of the _build_app_dict method in the public interface\n+        self.assertTrue(hasattr(self.client, '_build_app_dict'))\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..0eca603 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -18,6 +21,26 @@ class MockedPasswordResetTokenGenerator(PasswordResetTokenGenerator):\n \n \n class TokenGeneratorTest(TestCase):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n \n     def test_make_token(self):\n         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..5b5ddfb 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..48b0f15 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -23,6 +23,8 @@ from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..21521eb 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -8,7 +9,45 @@ from django.test import SimpleTestCase\n from django.test.utils import captured_stdin, captured_stdout\n \n \n+import django\n+\n+\n class ShellCommandTestCase(SimpleTestCase):\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), django.__version__)\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), django.__version__)\n \n     def test_command_option(self):\n         with self.assertLogs('test', 'INFO') as cm:\n@@ -49,4 +88,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..e6cb94f 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -586,14 +586,53 @@ class TestQuerying(TestCase):\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n             self.objs[:3] + self.objs[5:],\n         )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__a__isnull=True),\n+            self.objs[:3] + self.objs[5:],\n+        )\n+        # Add a test case to verify correct handling of __isnull=True on key with JSON null.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__a__isnull=True),\n+            self.objs[:3] + self.objs[5:],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # objs[4] should have the key 'j' with 'null' value\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__a__isnull=True),\n+            self.objs[:3] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=False),\n             [self.objs[3], self.objs[4]],\n         )\n+        # Add a test case to verify correct handling of __isnull=True on key with JSON null.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__a__isnull=True),\n+            self.objs[:3] + self.objs[5:],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # objs[4] should have the key 'j' with 'null' value\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__a__isnull=True),\n+            self.objs[:3] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n         )\n+        # Add a test case to verify correct handling of __isnull=True on key with JSON null.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__a__isnull=True),\n+            self.objs[:3] + self.objs[5:],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # objs[4] should have the key 'j' with 'null' value\n+        )\n \n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..25ec424 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -152,11 +152,49 @@ class DispatcherTests(SimpleTestCase):\n \n     def test_send_robust_no_receivers(self):\n         result = a_signal.send_robust(sender=self, val='test')\n+\n+    def test_send_robust_exception_logged(self):\n+        # Function to trigger a failure\n+        def fails(val, **kwargs):\n+            raise ValueError('this')\n+        \n+        a_signal.connect(fails)\n+        try:\n+            # Use assertLogs to check that an error log is generated\n+            with self.assertLogs('django.dispatch', level='ERROR') as cm:\n+                result = a_signal.send_robust(sender=self, val='test')\n+            \n+            # Check if the exception error is logged\n+            log_record = cm.records[0]\n+            self.assertIn(\"Error calling \", log_record.getMessage())\n+            self.assertEqual(log_record.exc_info[1].args[0], 'this')\n+        \n+        finally:\n+            a_signal.disconnect(fails)\n         self.assertEqual(result, [])\n \n     def test_send_robust_ignored_sender(self):\n         a_signal.connect(receiver_1_arg)\n         result = a_signal.send_robust(sender=self, val='test')\n+\n+    def test_send_robust_exception_logged(self):\n+        # Function to trigger a failure\n+        def fails(val, **kwargs):\n+            raise ValueError('this')\n+        \n+        a_signal.connect(fails)\n+        try:\n+            # Use assertLogs to check that an error log is generated\n+            with self.assertLogs('django.dispatch', level='ERROR') as cm:\n+                result = a_signal.send_robust(sender=self, val='test')\n+            \n+            # Check if the exception error is logged\n+            log_record = cm.records[0]\n+            self.assertIn(\"Error calling \", log_record.getMessage())\n+            self.assertEqual(log_record.exc_info[1].args[0], 'this')\n+        \n+        finally:\n+            a_signal.disconnect(fails)\n         self.assertEqual(result, [(receiver_1_arg, 'test')])\n         a_signal.disconnect(receiver_1_arg)\n         self.assertTestIsClean(a_signal)\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..5abf563 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,8 +282,34 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+\n+class AssertFormErrorsMixin:\n+    def assertFormErrors(self, expected_errors, callable_obj, *args, **kwargs):\n+        try:\n+            callable_obj(*args, **kwargs)\n+        except Exception as e:\n+            actual_errors = str(e)\n+            assert actual_errors in expected_errors\n+        else:\n+            assert False, \"Expected error not raised\"\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n-    def test_modelchoicefield(self):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Test added based on the original test patch to ensure invalid value is included in the error message\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +333,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..20932e0 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,6 +17,13 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n+    def test_combine_dict_keys(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..a613705 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -43,6 +43,49 @@ class BasicExpressionsTests(TestCase):\n             name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n             ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=10)\n         )\n+    \n+    def test_exists_and_q_combination(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test cases for Exists and Q combined using &\n+        test_conditions_and = [\n+            (Q(salary__gte=30) & Exists(is_ceo), [self.max]),\n+            (Exists(is_ceo) & Q(salary__gte=30), [self.max]),  # This should now work as well\n+            (Q() & Exists(is_ceo), [self.foobar_ltd.ceo, self.example_inc.ceo]),\n+            (Exists(is_ceo) & Q(), [self.foobar_ltd.ceo, self.example_inc.ceo]),\n+        ]\n+        \n+        for conditions, expected in test_conditions_and:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(conditions),\n+                    expected\n+                )\n+\n+    def test_exists_and_q_combination_or(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test cases for Exists and Q combined using |\n+        test_conditions_or = [\n+            (Q(salary__lt=15) | Exists(is_poc), [self.example_inc.ceo, self.max]),\n+            (Exists(is_poc) | Q(salary__lt=15), [self.example_inc.ceo, self.max]),  # This should now work as well\n+            (Q() | Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Exists(is_ceo) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+        ]\n+        \n+        for conditions, expected in test_conditions_or:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(conditions),\n+                    expected\n+                )\n         cls.foobar_ltd = Company.objects.create(\n             name=\"Foobar Ltd.\", num_employees=3, num_chairs=4, based_in_eu=True,\n             ceo=Employee.objects.create(firstname=\"Frank\", lastname=\"Meyer\", salary=20)\n@@ -792,6 +835,49 @@ class BasicExpressionsTests(TestCase):\n                 output_field=BooleanField(),\n             ),\n         )\n+    \n+    def test_exists_and_q_combination(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test cases for Exists and Q combined using &\n+        test_conditions_and = [\n+            (Q(salary__gte=30) & Exists(is_ceo), [self.max]),\n+            (Exists(is_ceo) & Q(salary__gte=30), [self.max]),  # This should now work as well\n+            (Q() & Exists(is_ceo), [self.foobar_ltd.ceo, self.example_inc.ceo]),\n+            (Exists(is_ceo) & Q(), [self.foobar_ltd.ceo, self.example_inc.ceo]),\n+        ]\n+        \n+        for conditions, expected in test_conditions_and:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(conditions),\n+                    expected\n+                )\n+\n+    def test_exists_and_q_combination_or(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test cases for Exists and Q combined using |\n+        test_conditions_or = [\n+            (Q(salary__lt=15) | Exists(is_poc), [self.example_inc.ceo, self.max]),\n+            (Exists(is_poc) | Q(salary__lt=15), [self.example_inc.ceo, self.max]),  # This should now work as well\n+            (Q() | Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Exists(is_ceo) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+        ]\n+        \n+        for conditions, expected in test_conditions_or:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(conditions),\n+                    expected\n+                )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n     def test_boolean_expression_combined(self):\n@@ -803,6 +889,49 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_ceo) | Exists(is_poc)),\n             [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n         )\n+    \n+    def test_exists_and_q_combination(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test cases for Exists and Q combined using &\n+        test_conditions_and = [\n+            (Q(salary__gte=30) & Exists(is_ceo), [self.max]),\n+            (Exists(is_ceo) & Q(salary__gte=30), [self.max]),  # This should now work as well\n+            (Q() & Exists(is_ceo), [self.foobar_ltd.ceo, self.example_inc.ceo]),\n+            (Exists(is_ceo) & Q(), [self.foobar_ltd.ceo, self.example_inc.ceo]),\n+        ]\n+        \n+        for conditions, expected in test_conditions_and:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(conditions),\n+                    expected\n+                )\n+\n+    def test_exists_and_q_combination_or(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test cases for Exists and Q combined using |\n+        test_conditions_or = [\n+            (Q(salary__lt=15) | Exists(is_poc), [self.example_inc.ceo, self.max]),\n+            (Exists(is_poc) | Q(salary__lt=15), [self.example_inc.ceo, self.max]),  # This should now work as well\n+            (Q() | Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Exists(is_ceo) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+        ]\n+        \n+        for conditions, expected in test_conditions_or:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(conditions),\n+                    expected\n+                )\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_ceo) & Exists(is_poc)),\n             [self.max],\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..886e562 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1127,8 +1127,26 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[0], func)\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n-\n-    def test_resolver_match_on_request(self):\n+    from functools import partial\n+    from django.urls import resolve\n+    from urlpatterns_reverse import views\n+\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                # Create a partial function and test its representation\n+                func = partial(views.empty_view, template_name=template_name)\n+                resolved = resolve(f'/{name}/')\n+                self.assertEqual(\n+                    repr(resolved),\n+                    f\"ResolverMatch(func={func.func!r}, args={func.args}, kwargs={func.keywords}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], route='{name}/')\"\n+                )\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..0cebcc2 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,7 +1,9 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n+from django.test.utils import isolate_apps\n \n \n @isolate_apps('model_options')\n@@ -67,6 +69,15 @@ class TestDefaultPK(SimpleTestCase):\n                 pass\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -74,6 +85,17 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n     @isolate_apps('model_options.apps.ModelPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n@@ -83,6 +105,15 @@ class TestDefaultPK(SimpleTestCase):\n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n@@ -91,6 +122,17 @@ class TestDefaultPK(SimpleTestCase):\n         m2m_pk = M2MModel._meta.get_field('m2m').remote_field.through._meta.pk\n         self.assertIsInstance(m2m_pk, models.SmallAutoField)\n \n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n     @isolate_apps('model_options.apps.ModelPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_m2m_app_default_auto_field(self):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..ae12348 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2197,6 +2197,22 @@ class StartApp(AdminScriptTestCase):\n                     \"make sure the directory is a valid identifier.\" % bad_target\n                 )\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"Test 'startapp' with a trailing slash in the directory name.\"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_trailing_slash_in_target_app_directory_name_non_existing(self):\n+        \"\"\"Test 'startapp' with a trailing slash in a non-existing directory.\"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app_nonexistent')\n+        # No need to create the directory first since it should not exist\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app_nonexistent', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n     def test_importable_target_name(self):\n         _, err = self.run_django_admin(['startapp', 'app', 'os'])\n         self.assertOutput(\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..90b28fd 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -15,6 +15,8 @@ from django.core.exceptions import ValidationError\n from django.core.mail import EmailMultiAlternatives\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.forms import forms\n+from django.forms import widgets\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n@@ -1020,7 +1022,32 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_label(self):\n+        \"\"\"\n+        ReadOnlyPasswordHashWidget doesn't contain a for attribute in the\n+        <label> because it doesn't have any labelable elements.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n+    def test_widget_output(self):\n+        \"\"\"\n+        Test that ReadOnlyPasswordHashWidget renders expected HTML,\n+        specifically checking that it does not include a 'for'\n+        attribute in an associated label since it doesn't have any input.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        form = TestForm()\n+        rendered_form = form.as_p()\n+        self.assertIn('<label>Hash field:</label>', rendered_form)\n+        # Verify that there is no incorrect 'for' attribute\n+        self.assertNotIn('for=\"id_hash_field\"', rendered_form)\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..8811078 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,34 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Verify that the migration writer correctly includes necessary imports\n+        when serializing a custom field and mixin model.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        writer = MigrationWriter(MyModel)\n+        serialized_model = writer.serialize()\n+        \n+        expected_imports = [\n+            \"from django.db import models\",\n+            \"from app.models import MyMixin, MyField\"\n+        ]\n+        \n+        for imp in expected_imports:\n+            self.assertIn(imp, serialized_model)\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..b87e848 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -360,7 +360,24 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n \n-    def test_formset_validate_min_unchanged_forms(self):\n+    def test_nonform_css_class_in_non_form_errors(self):\n+        \"\"\"\n+        Test that the 'nonform' CSS class is applied to non-form errors in FormSets.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '1',  # the number of forms rendered\n+            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'choices-MIN_NUM_FORMS': '1',  # min number of forms\n+            'choices-MAX_NUM_FORMS': '1',  # max number of forms\n+            'choices-0-choice': '',\n+            'choices-0-votes': '',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True, min_num=1, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = str(formset.non_form_errors())\n+        self.assertIn('nonform', non_form_errors)\n+        self.assertIn('<ul class=\"errorlist nonform\">', non_form_errors)\n         \"\"\"\n         min_num validation doesn't consider unchanged forms with initial data\n         as \"empty\".\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..260066b 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -10,8 +10,20 @@ from .models import (\n     Relationship, SymmetricalFriendship,\n )\n \n+from django.db import models\n+from django.test import TestCase\n+from .models import (\n+    Event, Invitation, Person, PersonChild,\n+    Group, Membership\n+)\n \n class M2mThroughTests(TestCase):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n     @classmethod\n     def setUpTestData(cls):\n         cls.bob = Person.objects.create(name='Bob')\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..2d70319 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -293,6 +293,24 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+    def test_autocomplete_view_with_custom_field(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return super().serialize_result(obj, to_field_name) | {'extra': 'extra_field_value'}\n+\n+        with model_admin(Question, PKOrderingQuestionAdmin):\n+            Question.objects.create(question='Test question')\n+            request = self.factory.get(self.url, {'term': 'Test', **self.opts})\n+            request.user = self.superuser\n+            response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        \n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [{'id': str(q.pk), 'text': q.question, 'extra': 'extra_field_value'} for q in Question.objects.filter(question__icontains='Test')],\n+            'pagination': {'more': False},\n+        })\n+\n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-14787": "",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..26c5f38 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,35 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        # Create ModelChoiceIteratorValue instances\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Hash values of the same ModelChoiceIteratorValue should be equal\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+\n+        # Hash values of different ModelChoiceIteratorValues should not be equal\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_in_dict_key(self):\n+        # Test ModelChoiceIteratorValue can be used as a key in a dictionary\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        test_dict = {value_1: 'test_value'}\n+\n+        # Access the dictionary using a similar ModelChoiceIteratorValue\n+        self.assertEqual(test_dict[ModelChoiceIteratorValue(self.c1.pk, None)], 'test_value')\n+\n+    def test_choice_value_in_set(self):\n+        # Test ModelChoiceIteratorValue can be used in a set\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        value_set = {value_1, value_2}\n+\n+        # Ensure values are correctly stored in the set\n+        self.assertIn(value_1, value_set)\n+        self.assertIn(ModelChoiceIteratorValue(self.c1.pk, None), value_set)\n+        self.assertIn(value_2, value_set)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..9bcd23a 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -153,8 +153,24 @@ class MultiValueFieldTest(SimpleTestCase):\n             <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n             \"\"\",\n         )\n-\n-    def test_form_as_table_data(self):\n+    def test_multivaluefield_label_for(self):\n+        form = ComplexFieldForm()\n+        # Test that <label> for MultiWidget has the correct `for` attribute.\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_field1_0\">Field1:</label></th>\n+            <td><input type=\"text\" name=\"field1_0\" id=\"id_field1_0\" required>\n+            <select multiple name=\"field1_1\" id=\"id_field1_1\" required>\n+            <option value=\"J\">John</option>\n+            <option value=\"P\">Paul</option>\n+            <option value=\"G\">George</option>\n+            <option value=\"R\">Ringo</option>\n+            </select>\n+            <input type=\"text\" name=\"field1_2_0\" id=\"id_field1_2_0\" required>\n+            <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n+            \"\"\",\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..2d838df 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -115,6 +115,18 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.clean('')\n \n+    def test_urlfield_valueerror_replacement(self):\n+        f = URLField()\n+        tests = [\n+            '////]@N.AN',  # URL that previously caused a ValueError\n+            '#@A.bO',     # Another example given in the original test patch\n+        ]\n+        msg = \"'Enter a valid URL.'\"\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(value)\n+\n     def test_urlfield_clean_not_required(self):\n         f = URLField(required=False)\n         self.assertEqual(f.clean(None), '')\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..fe9c212 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -239,6 +239,26 @@ class NonAggregateAnnotationTestCase(TestCase):\n         self.assertEqual(book.rating_count, 1)\n \n     @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_expression_wrapper_negated_q_with_empty_list(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_expression_wrapper_negated_q_with_nonempty_list(self):\n+        # Select all books except the ones with id b1.pk\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[self.b1.pk]), output_field=BooleanField())\n+        ).filter(selected=True)\n+        self.assertEqual(len(books), Book.objects.count() - 1)\n+\n+    def test_expression_wrapper_negated_q_aggregate(self):\n+        # Aggregate over a negated condition\n+        result = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(result['selected__sum'], Book.objects.count())\n     def test_q_expression_annotation_with_aggregation(self):\n         book = Book.objects.filter(isbn='159059725').annotate(\n             isnull_pubdate=ExpressionWrapper(\n@@ -251,6 +271,26 @@ class NonAggregateAnnotationTestCase(TestCase):\n         self.assertEqual(book.rating_count, 1)\n \n     @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_expression_wrapper_negated_q_with_empty_list(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_expression_wrapper_negated_q_with_nonempty_list(self):\n+        # Select all books except the ones with id b1.pk\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[self.b1.pk]), output_field=BooleanField())\n+        ).filter(selected=True)\n+        self.assertEqual(len(books), Book.objects.count() - 1)\n+\n+    def test_expression_wrapper_negated_q_aggregate(self):\n+        # Aggregate over a negated condition\n+        result = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(result['selected__sum'], Book.objects.count())\n     def test_grouping_by_q_expression_annotation(self):\n         authors = Author.objects.annotate(\n             under_40=ExpressionWrapper(Q(age__lt=40), output_field=BooleanField()),\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..3729834 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -143,7 +144,26 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_extra_tags_preservation(self):\n+        \"\"\"\n+        Test that extra_tags is preserved as empty string or None when encoded and decoded.\n+        \"\"\"\n+        storage = self.get_storage()\n+\n+        # Test cases for empty string, None, and non-empty string extra_tags\n+        test_cases = [\n+            (\"message with empty tags\", \"\", \"\"),\n+            (\"message with None tags\", None, None),\n+            (\"message with some tags\", \"some tags\", \"some tags\"),\n+        ]\n+\n+        for message_text, initial_tags, expected_tags in test_cases:\n+            with self.subTest(extra_tags=initial_tags):\n+                message = Message(constants.INFO, message_text, extra_tags=initial_tags)\n+                encoded_message = storage._encode(message)\n+                decoded_message = storage._decode(encoded_message)\n+\n+                self.assertEqual(decoded_message.extra_tags, expected_tags)\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..0ca11da 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -74,6 +74,19 @@ class TemplateReloadTests(SimpleTestCase):\n             'BACKEND': 'django.template.backends.django.DjangoTemplates',\n         }]\n     )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_restart_on_settings_change_with_base_dir(self, mock_reset):\n+        base_dir_in_dirs = {\n+            'DIRS': [\n+                ROOT,  # Adding BASE_DIR equivalent\n+            ],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }\n+        with override_settings(TEMPLATES=[base_dir_in_dirs]):\n+            # Simulate file change that should trigger server reload\n+            self.assertTrue(autoreload.template_changed(None, ROOT / 'templates' / 'index.html'))\n+            mock_reset.assert_called_once()\n+\n     def test_template_dirs_normalized_to_paths(self):\n         self.assertSetEqual(\n             autoreload.get_template_directories(),\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..968221f 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -9,6 +10,7 @@ from django.http import FileResponse, HttpResponseNotModified\n from django.test import SimpleTestCase, override_settings\n from django.utils.http import http_date\n from django.views.static import was_modified_since\n+from django.utils.http import parse_http_date\n \n from .. import urls\n from ..urls import media_dir\n@@ -184,7 +186,43 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test was_modified_since with an empty string for the If-Modified-Since header.\n+        Should handle gracefully and not raise an exception, returning True or False depending on logic.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+        \n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Test was_modified_since with an invalid last modified date.\n+        Should handle this gracefully without raising an exception, returning True.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"invalid-date\", mtime=1))\n+\n+    def test_was_modified_since_older_date(self):\n+        \"\"\"\n+        Test was_modified_since with a valid date older than mtime.\n+        Should return True indicating the content has been modified since the header timestamp.\n+        \"\"\"\n+        older_date = http_date(1343416141)\n+        self.assertTrue(was_modified_since(header=older_date, mtime=1343416242))\n+\n+    def test_was_modified_since_same_date(self):\n+        \"\"\"\n+        Test was_modified_since with a valid date equal to mtime.\n+        Should return False indicating no modification.\n+        \"\"\"\n+        same_date = http_date(1343416141)\n+        self.assertFalse(was_modified_since(header=same_date, mtime=1343416141))\n+        \n+    def test_was_modified_since_future_date(self):\n+        \"\"\"\n+        Test was_modified_since with a date in the future compared to mtime.\n+        Should return False indicating no modification.\n+        \"\"\"\n+        future_date = http_date(1343416242)\n+        self.assertFalse(was_modified_since(header=future_date, mtime=1343416141))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..db37b49 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -7,6 +8,7 @@ from admin_scripts.tests import AdminScriptTestCase\n from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management import BaseCommand, CommandError, find_commands\n from django.core.management.utils import (\n     find_command,\n@@ -411,12 +413,30 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n-        out = StringIO()\n-        with mock.patch.object(out, \"flush\") as mocked_flush:\n-            management.call_command(\"outputwrapper\", stdout=out)\n-        self.assertIn(\"Working...\", out.getvalue())\n-        self.assertIs(mocked_flush.called, True)\n+    def test_parser_formatter_class(self):\n+        \"\"\"Test if BaseCommand.create_parser uses the correct formatter class.\"\"\"\n+        epilog = \"Example usage:\\n\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog, formatter_class=ArgumentDefaultsHelpFormatter)\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+\n+    def test_help_output_format(self):\n+        \"\"\"Test if the help output maintains the correct format.\"\"\"\n+        command = BaseCommand()\n+        epilog = \"Example usage:\\n\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        parser = command.create_parser(\"prog_name\", \"subcommand\", epilog=epilog, formatter_class=ArgumentDefaultsHelpFormatter)\n+\n+        with mock.patch('sys.stdout', new_callable=StringIO) as mock_stdout:\n+            parser.print_help()\n+            help_output = mock_stdout.getvalue()\n+\n+        expected_help_output = \"\"\"\n+usage: prog_name subcommand [-h]\n+\n+Example usage:\n+\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+\"\"\"\n+\n+        self.assertIn(expected_help_output.strip(), help_output.strip())\n \n \n class CommandRunTests(AdminScriptTestCase):\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..f149b00 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,10 @@\n+\n import os\n from datetime import datetime\n \n+from django.core.serializers.json import DjangoJSONEncoder\n from django.test import SimpleTestCase\n+import json\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -211,6 +214,31 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        obj = {\"key\": \"value\"}\n+        expected_script = '<script type=\"application/json\">{\"key\":\"value\"}</script>'\n+        self.assertHTMLEqual(json_script(obj), expected_script)\n+\n+    def test_json_script_with_id_and_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"id_custom\": \"json\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, \"custom_id\", encoder=CustomDjangoJSONEncoder),\n+            '<script id=\"custom_id\" type=\"application/json\">{\"id_custom\": \"json\"}</script>',\n+        )\n+        \n     def test_json_script_without_id(self):\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..698c9f6 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -142,6 +142,21 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             [self.error_same_tags],\n         )\n \n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\",\n+        ]\n+    )\n+    def test_template_tags_same_library_in_installed_apps_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n     def test_template_tags_with_same_library_name(self):\n         with self.settings(\n             TEMPLATES=[\n@@ -206,4 +221,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..601574b 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -383,6 +383,31 @@ class ProxyModelTests(TestCase):\n         )\n \n         # Select related + filter on a related proxy of proxy field\n+\n+    def test_select_related_only_on_proxy_model(self):\n+        # Setting up a custom proxy model and another model instance\n+        custom_user = ProxyCustomModel.objects.create(name=\"Jane Doe\")\n+        another_instance = AnotherModel.objects.create(custom=custom_user)\n+        \n+        # Querying using select_related and only on the proxy field\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        \n+        # Fetching the instance and checking if it matches\n+        fetched_instance = queryset.get(pk=another_instance.pk)\n+        self.assertEqual(fetched_instance.custom.name, \"Jane Doe\")\n+        \n+    def test_proxy_model_field_access_after_only(self):\n+        # Create instances in the database\n+        proxy_model_instance = ProxyCustomModel.objects.create(name=\"John Smith\")\n+        related_instance = AnotherModel.objects.create(custom=proxy_model_instance)\n+        \n+        # Attempt to access a field not specified in .only()\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        obj = qs.get()\n+\n+        # Ensure that accessing the 'name' field on the proxy model does not raise an error\n+        # and that accessing a non-only field raises a 'DeferredAttribute' error or AttributeError\n+        self.assertEqual(obj.custom.name, \"John Smith\")\n         resp = ProxyImprovement.objects.select_related().get(\n             associated_bug__summary__icontains=\"fix\"\n         )\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..d3dff1a 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,6 +151,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_order(self):\n+        # Test that parameters are before the database name, as per the issue fix.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n@@ -183,4 +190,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..5dd92ac 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,25 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_null_and_empty_handling(self):\n+        # Test handling of empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        \n+        # Test handling of None\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+        \n+        # Test handling of None with decimal_pos\n+        self.assertEqual(nformat(None, \".\", decimal_pos=2), \"None\")\n+        \n+        # Test handling of None with grouping\n+        self.assertEqual(nformat(None, \".\", grouping=2, thousand_sep=\",\"), \"None\")\n+        \n+        # Test negative numbers formatted correctly without issue\n+        self.assertEqual(nformat(-1234, \".\"), \"-1234\")\n+        \n+        # Test empty string with formatting parameters\n+        self.assertEqual(nformat(\"\", \".\", decimal_pos=2), \"\")\n+        self.assertEqual(nformat(\"\", \".\", grouping=2, thousand_sep=\",\"), \"\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..b9cf365 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -22,7 +23,8 @@ from django.core.mail import EmailMultiAlternatives\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n-from django.utils import translation\n+from django.urls import reverse\n+import urllib.parse\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n \n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..26a2c0e 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,37 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n-\n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+from django.contrib.sitemaps import Sitemap\n+from django.test import TestCase\n+from django.urls import path, reverse\n+from datetime import datetime\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTestsBase(TestCase):\n+    urlpatterns = [\n+        path(\n+            \"callable-lastmod-no-items/index.xml\",\n+            views.index,\n+            {\"sitemaps\": {\"callable-lastmod\": CallableLastmodNoItemsSitemap}},\n+        ),\n+    ]\n+\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response.headers)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/callable-lastmod-no-items/sitemap.xml</loc></sitemap>\n+        </sitemapindex>\"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..1c6066d 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -8,7 +9,9 @@ from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n+from django.contrib.auth import get_permission_codename\n from .admin import ArticleAdmin, site\n+from .tests import get_perm\n from .models import Article, Question\n from .tests import AdminViewBasicTestCase\n \n@@ -33,7 +36,39 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # Test with a user having only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Test with a user having both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..c121d28 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -25,14 +26,14 @@ class JoinTests(SimpleTestCase):\n     def test_join04(self):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n-\n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n-    @setup({\"join05\": \"{{ a|join:var }}\"})\n-    def test_join05(self):\n-        output = self.engine.render_to_string(\n-            \"join05\", {\"a\": [\"alpha\", \"beta & me\"], \"var\": \" & \"}\n-        )\n-        self.assertEqual(output, \"alpha &amp; beta &amp; me\")\n+    \n+    @setup({\"join_autoescape_off\": \"{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}\"})\n+    def test_join_autoescape_off(self):\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off\", {\"some_list\": some_list, \"some_var\": some_var})\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n \n     @setup({\"join06\": \"{{ a|join:var }}\"})\n     def test_join06(self):\n@@ -78,4 +79,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..6ee70f0 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -790,7 +790,40 @@ class BulkCreateTests(TestCase):\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n-    def test_update_conflicts_unique_fields_update_fields_db_column(self):\n+    def test_bulk_create_update_conflicts_returning_ids(self):\n+        # Test that bulk_create with update_conflicts returns IDs when supported.\n+        initial_data = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\")\n+        ]\n+        TwoFields.objects.bulk_create(initial_data)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+        \n+        conflicting_and_new_objects = [\n+            TwoFields(f1=1, f2=1, name=\"c\"),\n+            TwoFields(f1=3, f2=3, name=\"d\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_and_new_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"f1\"],\n+            update_fields=[\"name\"]\n+        )\n+        \n+        self.assertEqual(len(results), 2)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        \n+        # Check final state in the database\n+        self.assertCountEqual(\n+            TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n+            [\n+                {\"f1\": 1, \"f2\": 1, \"name\": \"c\"},\n+                {\"f1\": 2, \"f2\": 2, \"name\": \"b\"},\n+                {\"f1\": 3, \"f2\": 3, \"name\": \"d\"},\n+            ],\n+        )\n         FieldsWithDbColumns.objects.bulk_create(\n             [\n                 FieldsWithDbColumns(rank=1, name=\"a\"),\n@@ -816,4 +849,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..753fbf7 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1119,6 +1119,35 @@ def test_range_slider(orientation):\n     slider.reset()\n     assert_allclose(slider.val, [0.1, 0.34])\n \n+def test_range_slider_initialization():\n+    # Test that the RangeSlider can be initialized with given values\n+    fig, ax = plt.subplots()\n+\n+    # Initialize with a valid range within limits\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Demo\", valmin=0.0, valmax=1.0, valinit=[0.2, 0.8]\n+    )\n+    assert_allclose(slider.val, (0.2, 0.8))\n+\n+    # Test reset works correctly\n+    slider.set_val((0.3, 0.7))\n+    assert_allclose(slider.val, (0.3, 0.7))\n+    slider.reset()\n+    assert_allclose(slider.val, (0.2, 0.8))\n+\n+    # Test for boundary conditions where valinit is out of bound\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Demo\", valmin=0.0, valmax=1.0, valinit=[-0.1, 1.1]\n+    )\n+    # Expecting values to be clamped to valmin and valmax\n+    assert_allclose(slider.val, (0.0, 1.0))\n+\n+    # Test setup for checking edge values within bound\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Demo\", valmin=0.0, valmax=1.0, valinit=[0.0, 1.0]\n+    )\n+    assert_allclose(slider.val, (0.0, 1.0))\n+\n \n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..7fec76a 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -508,6 +508,41 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend\n+from matplotlib import _pylab_helpers\n+\n+def test_get_backend_does_not_clear_figures():\n+    # Case 1: Figure created with rc_context\n+    with plt.rc_context():\n+        fig1 = plt.figure()\n+    \n+    before = f'{id(_pylab_helpers.Gcf)} {_pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(_pylab_helpers.Gcf)} {_pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, f'Figures cleared: \\nBefore: {before}\\nAfter: {after}'\n+\n+    # Cleanup\n+    plt.close(fig1)\n+\n+def test_get_backend_with_initial_figure():\n+    # Case 2: Initial figure created without rc_context\n+    fig1 = plt.figure()\n+    with plt.rc_context():\n+        fig2 = plt.figure()\n+\n+    before = f'{id(_pylab_helpers.Gcf)} {_pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(_pylab_helpers.Gcf)} {_pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, f'Figures cleared: \\nBefore: {before}\\nAfter: {after}'\n+\n+    # Cleanup\n+    plt.close(fig1)\n+    plt.close(fig2)\n+\n @pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..6515ced 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -12,7 +12,7 @@ from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n-\n+import pytest\n import matplotlib.pyplot as plt\n import numpy as np\n \n@@ -28,7 +28,21 @@ def test_aspect_equal_error():\n         ax.set_aspect('equal')\n \n \n-@mpl3d_image_comparison(['bar3d.png'])\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_set_visible_false(fig_test, fig_ref):\n+    # Test to ensure 3D axes is not visible when set_visible(False) is called.\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_test.scatter([1], [1], [1])\n+    ax_test.set_visible(False)\n+    ax_ref.scatter([], [], [])  # Reference is an empty plot as ax should be invisible.\n+\n+def test_3d_axes_set_visible_false_events():\n+    # Test to ensure that events do not register on an invisible 3D axes.\n+    fig, ax = plt.subplots(subplot_kw={'projection': '3d'})\n+    assert fig.canvas.inaxes((200, 200, 200)) is not None  # Should respond initially\n+    ax.set_visible(False)\n+    assert fig.canvas.inaxes((200, 200, 200)) is None  # Should not respond when invisible\n def test_bar3d():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..f602274 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,8 +774,14 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n-def test_get_set_draggable():\n-    legend = plt.legend()\n+@pytest.mark.parametrize('draggable', [True, False, None])\n+def test_legend_creation_with_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='series1')\n+    legend = ax.legend(draggable=draggable)\n+    expected_draggable = False if draggable is None else draggable\n+    assert legend.get_draggable() == expected_draggable\n+    fig, ax = plt.subplots()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n     assert legend.get_draggable()\n@@ -783,9 +789,17 @@ def test_get_set_draggable():\n     assert not legend.get_draggable()\n \n \n-def test_alpha_handles():\n+def test_legend_toggle_draggable():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='series1')\n+    legend = ax.legend(draggable=True)\n+    assert legend.get_draggable() is True\n+    legend.set_draggable(False)\n+    assert legend.get_draggable() is False\n+    legend.set_draggable(True)\n+    assert legend.get_draggable() is True\n     x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n-    legend = plt.legend()\n+    fig, ax = plt.subplots()\n     for lh in legend.legendHandles:\n         lh.set_alpha(1.0)\n     assert lh.get_facecolor()[:-1] == hh[1].get_facecolor()[:-1]\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..82d4ffd 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -256,7 +256,51 @@ def test_linedash():\n     assert buf.tell() > 0\n \n \n-def test_no_duplicate_definition():\n+import io\n+from matplotlib.figure import Figure\n+\n+def test_empty_line():\n+    # Smoke-test for gh#23954 to ensure the fix for the empty line issue works\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    assert buf.tell() > 0  # Ensure something was written to the buffer\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='ps')\n+    assert buf.tell() > 0  # Ensure something was written to the buffer\n+\n+def test_empty_line_in_annotation():\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\nLower label\\n', xy=(0, 0))\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    assert buf.tell() > 0  # Ensure something was written to the buffer\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='ps')\n+    assert buf.tell() > 0  # Ensure something was written to the buffer\n+\n+def test_title_with_empty_line():\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.set_title('\\nTitle with empty line\\n')\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    assert buf.tell() > 0  # Ensure something was written to the buffer\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='ps')\n+    assert buf.tell() > 0  # Ensure something was written to the buffer\n+\n+def test_multiple_empty_lines():\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\n\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    assert buf.tell() > 0  # Ensure something was written to the buffer\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='ps')\n+    assert buf.tell() > 0  # Ensure something was written to the buffer\n \n     fig = Figure()\n     axs = fig.subplots(4, 4, subplot_kw=dict(projection=\"polar\"))\n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..db381bf 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,22 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+@pytest.mark.filterwarnings(\"error\")\n+def test_constrained_layout_warning_no_error():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+\n+    with pytest.warns(None) as record:\n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+        ax[0].plot(a, b)\n+        ax[1].plot(a, c)\n+        plt.subplots_adjust(wspace=0)\n+\n+    # Ensure no warnings are raised\n+    assert len(record) == 0\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..14d8931 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5732,7 +5732,38 @@ def test_set_get_ticklabels():\n     ax[1].set_yticklabels(ax[0].get_yticklabels())\n \n \n-@check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_kwargs_raise_error_without_labels():\n+    \"\"\"\n+    When labels=None and any kwarg is passed, axis.set_ticks() raises a\n+    ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, alpha=0.5)\n+\n+\n+def test_set_ticks_with_valid_labels_and_kwargs():\n+    \"\"\"\n+    Test that set_ticks works as expected with valid labels and kwargs.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1, 2]\n+    labels = ['zero', 'one', 'two']\n+    ax.xaxis.set_ticks(ticks, labels=labels, color='red')\n+    assert [tick.get_text() for tick in ax.xaxis.get_ticklabels()] == labels\n+\n+def test_set_ticks_with_no_kwargs_and_no_labels():\n+    \"\"\"\n+    Test that set_ticks works as expected without kwargs and labels.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1, 2]\n+    ax.xaxis.set_ticks(ticks)\n+    assert len(ax.xaxis.get_ticklabels()) == len(ticks)\n+import pytest\n+import matplotlib.pyplot as plt\n+\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..ae5eabe 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -29,8 +29,19 @@ def test_create_lookup_table(N, result):\n     data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n-\n-def test_resampled():\n+import pytest\n+import numpy as np\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_deprecation(dtype):\n+    # We use subtraction in the indexing, so need to verify that uint8 works\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        assert_array_equal(cm(dtype(0)), cm(0))\n+    # Ensure that no warnings of any type are raised\n+    assert len(record) == 0\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..7840126 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -90,7 +91,28 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n+import pickletools\n+\n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure no reference to GUI canvas types in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    loaded = pickle.loads(pkl)\n+    loaded.canvas.draw()\n+    plt.close(loaded)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..55cc288 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -90,7 +90,35 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n-@mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # This is the line that was causing issues as per the bug report.\n+    fig.align_labels()\n+\n+    # Try to pickle the figure\n+    try:\n+        pickle.dumps(fig)\n+    except Exception as e:\n+        assert False, f\"Pickling failed with exception: {e}\"\n+\n+    plt.close(fig)\n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+from io import BytesIO\n+\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..7e7c0e0 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,57 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+def test_mplcursor_integration():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+    \n+    x = np.arange(1, 11)    \n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    scatter = ax.scatter(x, y1)\n+    \n+    mplcursors.cursor(scatter)\n+    \n+    for i in range(1, 4):\n+        event = plt.backend_bases.MouseEvent(\n+            name='button_press_event',\n+            canvas=fig.canvas,\n+            x=i,\n+            y=i,\n+            button=1\n+        )\n+        fig.canvas.callbacks.process(event.name, event)\n+\n+    plt.close(fig)\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_mplcursor_integration():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+    \n+    x = np.arange(1, 11)    \n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    scatter = ax.scatter(x, y1)\n+    \n+    mplcursors.cursor(scatter)\n+    \n+    for i in range(1, 4):\n+        event = plt.backend_bases.MouseEvent(\n+            name='button_press_event',\n+            canvas=fig.canvas,\n+            x=i,\n+            y=i,\n+            button=1\n+        )\n+        fig.canvas.callbacks.process(event.name, event)\n+\n+    plt.close(fig)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..7356d52 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,11 @@\n+\n import json\n import os\n import textwrap\n \n+import tomllib\n import pytest\n+import errno\n \n import flask\n \n@@ -12,7 +15,14 @@ TEST_KEY = \"foo\"\n SECRET_KEY = \"config\"\n \n \n-def common_object_test(app):\n+def test_config_from_file_toml_binary_mode():\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    # Use binary mode for tomllib by specifying 'rb'\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.toml\"), tomllib.load, mode=\"rb\"\n+    )\n+    common_object_test(app)\n     assert app.secret_key == \"config\"\n     assert app.config[\"TEST_KEY\"] == \"foo\"\n     assert \"TestConfig\" not in app.config\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..f05875c 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1655,7 +1655,33 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n-def test_vendor_aliases():\n+import pytest\n+from requests import Session\n+from requests.exceptions import HTTPError, Timeout\n+from requests.adapters import HTTPAdapter\n+from unittest.mock import Mock, patch\n+\n+# Test for DecodeError being wrapped\n+def test_urllib3_decode_error_wrapped():\n+    with patch('requests.adapters.HTTPAdapter.send') as mock_send:\n+        mock_send.side_effect = requests.packages.urllib3.exceptions.DecodeError\n+\n+        s = Session()\n+        s.mount('http://', HTTPAdapter())\n+\n+        with pytest.raises(HTTPError):\n+            s.get('http://mockedurl.com/')\n+\n+# Test for TimeoutError being wrapped\n+def test_urllib3_timeout_error_wrapped():\n+    with patch('requests.adapters.HTTPAdapter.send') as mock_send:\n+        mock_send.side_effect = requests.packages.urllib3.exceptions.TimeoutError\n+\n+        s = Session()\n+        s.mount('http://', HTTPAdapter())\n+\n+        with pytest.raises(Timeout):\n+            s.get('http://mockedurl.com/', timeout=0.1)\n     from requests.packages import urllib3\n     from requests.packages import chardet\n \n@@ -1663,4 +1689,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..1ff3a30 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -951,6 +951,31 @@ class TestRequests:\n     def test_response_is_iterable(self):\n         r = requests.Response()\n         io = StringIO.StringIO('abc')\n+\n+    def test_iter_content_decode_unicode(self):\n+        \"\"\"\n+        Test that iter_content with decode_unicode=True returns strings (not bytes)\n+        when the encoding is properly set.\n+        \"\"\"\n+        import io\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = 'utf-8'\n+\n+        chunks = list(r.iter_content(decode_unicode=True))\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Chunks should be of type str when decode_unicode=True\"\n+\n+        chunks = list(r.iter_content(decode_unicode=False))\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"Chunks should be of type bytes when decode_unicode=False\"\n+\n+        # Test with a different encoding\n+        r.encoding = 'latin1'\n+        chunks = list(r.iter_content(decode_unicode=True))\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Chunks should be of type str with any valid encoding and decode_unicode=True\"\n+\n+        r.encoding = None\n+        chunks = list(r.iter_content(decode_unicode=True))\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"Chunks should be of type bytes if encoding is None and decode_unicode=True\"\n         read_ = io.read\n \n         def read_mock(amt, decode_content=None):\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..f5721ee 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,8 +743,39 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    \n+    def test_hooks_with_multiple_lists(self):\n+        \"\"\"Test that passing multiple lists of hooks doesn't break\"\"\"\n \n-    def test_session_persistent_cookies(self):\n+        def add_baz_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({\n+                'X-Baz': 'baz'\n+            })\n+            return args\n+\n+        hooks_list1 = [add_foo_header, add_bar_header]\n+        hooks_list2 = [add_baz_header]\n+        \n+        r = requests.models.Request(hooks={'args': hooks_list1})\n+        r.register_hook('args', hooks_list2)\n+        assert_hooks_are_callable(r.hooks)\n+\n+        r.send()  # Assuming some sending functionality is required to trigger\n+\n+    def test_individual_hook_registration(self):\n+        \"\"\"Test registering hooks individually and then passing as a list\"\"\"\n+\n+        r = requests.models.Request()\n+        r.register_hook('args', add_foo_header)\n+        r.register_hook('args', add_bar_header)\n+\n+        hooks_list = [add_foo_header, add_bar_header]\n+        r_with_hooks = requests.models.Request(hooks={'args': hooks_list})\n+\n+        assert_hooks_are_callable(r.hooks)\n+        assert_hooks_are_callable(r_with_hooks.hooks)\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..2659a39 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -400,12 +400,21 @@ def test_groupby_repr(obj, dim):\n         expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n \n+import pytest\n+import numpy as np\n+import xarray as xr\n+\n+@pytest.mark.parametrize(\"obj, dim\", [(repr_da, \"letters\")])\n+def test_groupby_no_trailing_whitespace(obj, dim):\n+    groupby_repr = repr(obj.groupby(dim))\n+    lines = groupby_repr.splitlines()\n+    assert all(not line.endswith(' ') for line in lines), \"Trailing whitespace found in groupby representation\"\n \n @pytest.mark.parametrize(\"obj\", [repr_da, repr_da.to_dataset(name=\"a\")])\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..8154628 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -94,7 +94,15 @@ class TestFixme(CheckerTestCase):\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n \n-    def test_issue_2321_should_trigger(self) -> None:\n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n         code = \"# TODO this should not trigger a fixme\"\n         with self.assertAddsMessages(\n             MessageTest(\n@@ -106,7 +114,17 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n-    def test_dont_trigger_on_todoist(self) -> None:\n+    @set_config(notes=[\"YES\"])\n+    def test_alphanumeric_and_punctuation_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                # YES: this should trigger\n+                # ???: this should also trigger\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"YES: this should trigger\", col_offset=17),\n+            MessageTest(msg_id=\"fixme\", line=3, args=\"???: this should also trigger\", col_offset=17),\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n         code = \"\"\"\n         # Todoist API: What is this task about?\n         # Todoist API: Look up a task's due date\n@@ -119,4 +137,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..d358454 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -56,6 +56,12 @@ reports = \"yes\"\n     check_configuration_file_reader(runner)\n \n \n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from pytest import CaptureFixture\n+from pylint.testutils import EMPTY_MODULE\n+\n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..f095178 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,44 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_path_recursive_subdir(self):\n+        \"\"\"Test that ignore-paths are respected when using --recursive=y in subdirectories.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \"subdirectory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_ignore_path_recursive_with_config(self):\n+        \"\"\"Test that ignore-paths in the config file are respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Assuming there's a config file \"pyproject.toml\" in the cwd with the appropriate settings\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "",
  "pylint-dev__pylint-7993": "",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/acceptance_test.py b/testing/acceptance_test.py\nindex 0cc5057..675c677 100644\n--- a/testing/acceptance_test.py\n+++ b/testing/acceptance_test.py\n@@ -1305,8 +1305,47 @@ def test_no_brokenpipeerror_message(pytester: Pytester) -> None:\n     # Cleanup.\n     popen.stderr.close()\n \n+from pathlib import Path\n+import sys\n+import pytest\n+from pytest import Pytester\n \n-def test_function_return_non_none_warning(pytester: Pytester) -> None:\n+def test_module_import_once_with_importlib_mode(pytester: Pytester) -> None:\n+    \"\"\"Ensure a module is only imported once with importlib mode.\"\"\"\n+    pytester.makepyfile(\n+        **{\n+            \"pmxbot/commands.py\": \"from . import logging\",\n+            \"pmxbot/logging.py\": \"\"\"\n+                class Logger:\n+                    store = None\n+            \"\"\",\n+            \"tests/test_commands.py\": \"\"\"\n+                import importlib\n+                from pmxbot import logging\n+\n+                class TestCommands:\n+                    def test_logger_store(self):\n+                        logging.Logger.store = \"test_store\"\n+                        mod = importlib.import_module('pmxbot.logging')\n+                        assert logging.Logger.store == \"test_store\", (\n+                            \"Logger.store should retain 'test_store'\"\n+                        )\n+                        assert mod is logging, (\n+                            \"Module obtained via importlib should be identical to direct import\"\n+                        )\n+            \"\"\",\n+        }\n+    )\n+    pytester.makeini(\n+        \"\"\"\n+        [pytest]\n+        addopts =\n+            --doctest-modules\n+            --import-mode importlib\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_subprocess()\n+    result.stdout.fnmatch_lines([\"*2 passed*\"])\n     pytester.makepyfile(\n         \"\"\"\n         def test_stuff():\n@@ -1314,4 +1353,4 @@ def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     \"\"\"\n     )\n     res = pytester.runpytest()\n-    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n+    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..cc508a3 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,8 +1,8 @@\n+\n import logging\n \n import py.io\n-\n-from _pytest.logging import ColoredLevelFormatter\n+from _pytest.logging import ColoredLevelFormatter, DEFAULT_LOG_FORMAT\n \n \n def test_coloredlogformatter():\n@@ -16,8 +16,27 @@ def test_coloredlogformatter():\n         msg=\"Test Message\",\n         args=(),\n         exc_info=False,\n+    )    \n+\n+def test_default_log_format_includes_module_name():\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=logging.INFO,\n+        pathname=\"path/dummy_module.py\",\n+        lineno=42,\n+        msg=\"Test message for module name inclusion\",\n+        args=(),\n+        exc_info=None,\n     )\n \n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == \"INFO     dummy_module:dummy_module.py:42 Test message for module name inclusion\"\n+\n     class ColorConfig(object):\n         class option(object):\n             pass\n@@ -28,8 +47,27 @@ def test_coloredlogformatter():\n     output = formatter.format(record)\n     assert output == (\n         \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+    )    \n+\n+def test_default_log_format_includes_module_name():\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=logging.INFO,\n+        pathname=\"path/dummy_module.py\",\n+        lineno=42,\n+        msg=\"Test message for module name inclusion\",\n+        args=(),\n+        exc_info=None,\n     )\n \n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == \"INFO     dummy_module:dummy_module.py:42 Test message for module name inclusion\"\n+\n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..b50bc33 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,9 +1,12 @@\n+\n import os\n from xml.dom import minidom\n \n import py\n \n import pytest\n+from datetime import datetime\n+import platform\n from _pytest.junitxml import LogXML\n from _pytest.reports import BaseReport\n \n@@ -157,7 +160,29 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..0ee7e77 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -70,8 +70,33 @@ def test_make_hook_recorder(testdir) -> None:\n     recorder.hook.pytest_runtest_logreport(report=rep3)\n     pytest.raises(ValueError, recorder.getfailures)\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct.\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_parseconfig(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    # Expect the full path to the test file and line number\n+    # in the error message, ensure it's not relative to the changed cwd\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     config1 = testdir.parseconfig()\n     config2 = testdir.parseconfig()\n     assert config2 is not config1\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..5ac0673 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,47 @@\n import os\n import sys\n+import os\n+from unittest import mock\n+\n+import pytest\n+from _pytest.config import ExitCode\n+from _pytest.mark import EMPTY_PARAMETERSET_OPTION\n+from _pytest.mark import MarkGenerator as Mark\n+from _pytest.nodes import Collector\n+from _pytest.nodes import Node\n+\n+\n+class TestSkipIfCaching:\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n from unittest import mock\n \n import pytest\n",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..0421023 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,9 +1,11 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n+from _pytest.pytester import Testdir\n from _pytest.skipping import pytest_runtest_setup\n \n \n@@ -260,7 +262,34 @@ class TestXFail:\n         result = testdir.runpytest(*test_input)\n         result.stdout.fnmatch_lines(expected)\n \n-    def test_xfail_evalfalse_but_fails(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        \"\"\"Test for dynamically adding an xfail marker during test execution.\n+        This verification checks for Issue #7486.\n+        \"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0  # This should be xfailed, not failed\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        \"\"\"Test for dynamically adding a strict xfail marker during test execution.\n+        This evaluation is for Issue #7486, with an expected failure (strict xfail).\n+        \"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail_strict(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         item = testdir.getitem(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..10e6be3 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -19,6 +20,7 @@ from _pytest.pathlib import on_rm_rf_error\n from _pytest.pathlib import register_cleanup_lock_removal\n from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest.tmpdir import get_user\n from _pytest.tmpdir import TempdirFactory\n from _pytest.tmpdir import TempPathFactory\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..2cc8587 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,28 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+def test_ridge_classifier_cv_store_cv_values_fix():\n+    # Test RidgeClassifierCV's store_cv_values attribute with actual existence.\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [0.1, 1.0, 10.0]\n+    n_alphas = len(alphas)\n+\n+    # Attempting to use store_cv_values should raise an error because `cv` should be None\n+    assert_raises(\n+        ValueError,\n+        RidgeClassifierCV(alphas=alphas, store_cv_values=True, cv=3).fit, x, y\n+    )\n+\n+    # Test when cv = None, allow storage of cv_values\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True, cv=None)\n+    r.fit(x, y)\n \n-def test_ridgecv_store_cv_values():\n+    # Check that the cv_values_ attribute matches expected dimensions\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..773d39a 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -14,7 +14,28 @@ from sklearn.mixture.bayesian_mixture import _log_wishart_norm\n from sklearn.mixture import BayesianGaussianMixture\n \n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n-from sklearn.exceptions import ConvergenceWarning\n+from sklearn.exceptions import ConvergenceWarning, NotFittedError\n+from sklearn.utils.testing import assert_array_equal, assert_raise_message\n+from sklearn.metrics.cluster import adjusted_rand_score\n+\n+def test_bayesian_gaussian_mixture_fit_predict():\n+    rng = np.random.RandomState(42)\n+    rand_data = RandomData(rng, scale=10)\n+    \n+    for covar_type in COVARIANCE_TYPE:\n+        bgm = BayesianGaussianMixture(n_components=rand_data.n_components,\n+                                      random_state=rng,\n+                                      covariance_type=covar_type)\n+\n+        X = rand_data.X[covar_type]\n+        Y = rand_data.Y\n+        \n+        # Ensure fit_predict is consistent with fit + predict\n+        Y_pred_manual = bgm.fit(X).predict(X)\n+        Y_pred_direct = bgm.fit_predict(X)\n+\n+        assert_array_equal(Y_pred_manual, Y_pred_direct)\n+        assert adjusted_rand_score(Y, Y_pred_direct) >= 0.9\n from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n \n \n",
  "scikit-learn__scikit-learn-12471": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..8228fc5 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,7 +598,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..3ec9732 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -13,8 +14,18 @@ from sklearn.pipeline import Pipeline\n from sklearn.model_selection import GridSearchCV\n from sklearn.metrics.pairwise import rbf_kernel\n \n-\n-def test_kernel_pca():\n+def test_kernel_pca_sign_invariance():\n+    # Test to check that the KernelPCA results are sign invariant\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    \n+    # Transform the data twice\n+    transformed1 = kpca.fit_transform(X)\n+    transformed2 = kpca.fit_transform(X)\n+    \n+    # Check that the transformed results have the same absolute values\n+    assert_allclose(np.abs(transformed1), np.abs(transformed2))\n     rng = np.random.RandomState(0)\n     X_fit = rng.random_sample((5, 4))\n     X_pred = rng.random_sample((2, 4))\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..44a9a1b 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -295,6 +296,30 @@ def test_score_samples():\n                        clf2.score_samples([[2., 2.]]))\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start_repeatability():\n+    \"\"\"Test that the warm start leads to repeatable results.\"\"\"\n+    rng = check_random_state(42)\n+    X = rng.randn(30, 3)\n+\n+    # without warm start\n+    clf_no_warm = IsolationForest(n_estimators=20, random_state=rng, warm_start=False)\n+    clf_no_warm.fit(X)\n+    \n+    # with warm start\n+    clf_with_warm = IsolationForest(n_estimators=10, random_state=rng, warm_start=True)\n+    clf_with_warm.fit(X)\n+    clf_with_warm.set_params(n_estimators=20)\n+    clf_with_warm.fit(X)\n+\n+    assert len(clf_with_warm.estimators_) == 20\n+    assert_array_almost_equal(\n+        clf_no_warm.decision_function(X),\n+        clf_with_warm.decision_function(X),\n+        decimal=6\n+    )\n+\n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..df2d2fb 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,8 +217,16 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n-\n-def test_pipeline():\n+def test_logistic_regression_cv_repr():\n+    # Ensure that array parameters don't throw an error\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_result = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        assert \"Cs=array([0.1, 1. ])\" in repr_result\n+    except Exception as e:\n+        assert False, f\"Error occurred: {e}\"\n+    finally:\n+        set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..58268a4 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -8,6 +9,9 @@ from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n from sklearn.exceptions import NotFittedError\n+from sklearn.datasets import load_iris\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n@@ -506,4 +510,25 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n+\n+@pytest.mark.parametrize(\n+    \"estimator_class, X, y\",\n+    [\n+        (VotingClassifier, *datasets.load_iris(return_X_y=True)),\n+        (VotingRegressor, *datasets.make_regression(n_samples=100, n_features=4, noise=0.1)),\n+    ]\n+)\n+def test_voting_estimator_with_none(estimator_class, X, y):\n+    # Test that VotingEstimator works when one estimator is set to None\n+    if estimator_class is VotingClassifier:\n+        estimators = [('clf1', LogisticRegression()), ('clf2', RandomForestClassifier(n_estimators=5))]\n+    else:\n+        estimators = [('reg1', LinearRegression()), ('reg2', RandomForestRegressor(n_estimators=5))]\n+\n+    voter = estimator_class(estimators=estimators)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(**{'clf1' if estimator_class is VotingClassifier else 'reg1': None})\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape[0] == y.shape[0]\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..bb68f7b 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,33 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+import pytest\n+import numpy as np\n+from sklearn.utils._testing import assert_raises\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+from sklearn.model_selection import GridSearchCV\n+from sklearn.pipeline import Pipeline\n+from sklearn.neighbors import KNeighborsClassifier\n \n-def test_transformation_dimensions():\n+def test_grid_search_with_numpy_types():\n+    # Test that GridSearchCV works with numpy data types for parameters\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca),\n+                     ('knn', knn)])\n+                    \n+    params = {'nca__tol': [0.1, 0.5, 1.0],  # Change 1 to 1.0 to ensure float type\n+              'nca__n_components': np.arange(1, 10, dtype=np.int32)}  # Ensure dtype is int32\n+              \n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    try:\n+        gs.fit(X, y)\n+    except Exception as e:\n+        assert False, f\"GridSearchCV with numpy parameter types failed with exception: {e}\"\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..9b13a0b 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,50 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_empty_train():\n+    # Test the scenario where both X_train and y_train are empty\n+    X_train = sparse.csr_matrix((0, 4))\n+    y_train = np.array([])\n+    model = svm.SVR(kernel='linear')\n+    try:\n+        model.fit(X_train, y_train)\n+        assert False, \"Expected ValueError due to empty training data\"\n+    except ValueError:\n+        pass  # Expected behavior\n+\n+def test_sparse_fit_single_feature():\n+    # Test the scenario where the dataset has a single feature column\n+    X_train = sparse.csr_matrix([[0], [0], [0], [0]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_different_dimensions():\n+    # Ensure that X_train and y_train with non-matching numbers of samples raise an error\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0]])\n+    y_train = np.array([0.04, 0.04])\n+    model = svm.SVR(kernel='linear')\n+    try:\n+        model.fit(X_train, y_train)\n+        assert False, \"Expected ValueError due to mismatched dimensions\"\n+    except ValueError:\n+        pass  # Expected behavior\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..b29743a 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,8 +972,15 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n-def test_repeated_cv_value_errors():\n+import pytest\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr_with_random_state(RepeatedCV):\n+    n_splits, n_repeats, random_state = 3, 5, 42\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    expected_repr = f\"{repeated_cv.__class__.__name__}(n_repeats={n_repeats}, n_splits={n_splits}, random_state={random_state})\"\n+    assert repr(repeated_cv) == expected_repr\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n         assert_raises(ValueError, cv, n_repeats=0)\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..3e24143 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -151,6 +151,38 @@ def test_permute_labels(metric_name):\n @pytest.mark.parametrize(\n     \"metric_name\", dict(SUPERVISED_METRICS, **UNSUPERVISED_METRICS)\n )\n+def test_mutual_info_score_with_object_arrays():\n+    # Test mutual_info_score with object dtype arrays\n+    x = np.random.choice(['a', 'b'], size=20).astype(object)\n+    y = np.random.choice(['a', 'b'], size=20).astype(object)\n+    score = mutual_info_score(x, y)\n+\n+    assert isinstance(score, float)\n+\n+    # Ensure mutual_info_score function works with non-object arrays as well\n+    x = np.random.choice(['a', 'b'], size=20)\n+    y = np.random.choice(['a', 'b'], size=20)\n+    score = mutual_info_score(x, y)\n+\n+    assert isinstance(score, float)\n+    assert score >= 0\n+\n+    # Edge case: identical arrays should yield maximum mutual information\n+    x_identical = ['a', 'a', 'b', 'b']\n+    score_identical = mutual_info_score(x_identical, x_identical)\n+    assert score_identical > 0\n+\n+    # Edge case: different arrays should yield zero mutual information\n+    x_diff = ['a', 'a', 'a', 'a']\n+    y_diff = ['b', 'b', 'b', 'b']\n+    score_diff = mutual_info_score(x_diff, y_diff)\n+    assert score_diff == 0\n+\n+...\n+\n+import numpy as np\n+from sklearn.metrics.cluster import mutual_info_score\n+\n # For all clustering metrics Input parameters can be both\n # in the form of arrays lists, positive, negative or string\n def test_format_invariance(metric_name):\n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..701e7b7 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -5,7 +6,10 @@ import copy\n \n import pytest\n \n-from sklearn.datasets import make_regression\n+from sklearn.datasets import make_regression, make_classification\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn import set_config\n from sklearn.isotonic import (\n     check_increasing,\n     isotonic_regression,\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..38923e2 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -112,6 +112,63 @@ def test_automodule_special_members(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_classes(app):\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base, list, set'\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList(iterable=(), /)',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n@@ -125,4 +182,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..dbd8b24 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -90,8 +90,27 @@ def test_get_full_qualified_name():\n     node = nodes.reference(reftype='option', reftarget='-l', **kwargs)\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n+def test_cmd_option_with_optional_value(app):\n+    # Test for the option directive with an optional value syntax\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (index,\n+                          [desc, ([desc_signature, ([desc_name, '-j'],\n+                                                    [desc_addname, '[=N]'])],\n+                                  [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n \n-def test_glossary(app):\n+def test_cmd_option_starting_with_bracket(app):\n+    # Test for the option directive starting with a bracket\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (index,\n+                          [desc, ([desc_signature, ([desc_name, '[enable'],\n+                                                    [desc_addname, '=]PATTERN'])],\n+                                  [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n             \"   term1\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..f2ebbc8 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -45,7 +45,24 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n-def make_directive_bridge(env):\n+import pytest\n+\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_attribute_ignored(app):\n+    # Setting up the options to include members\n+    options = {'members': True}\n+    # Running the autodoc function with the 'target.empty_all' module\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    # Asserting that the result only contains the module docstring, no members\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n     options = Options(\n         inherited_members = False,\n         undoc_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..4720622 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -43,6 +45,8 @@ def test_restify():\n     assert restify(str) == \":class:`str`\"\n     assert restify(None) == \":obj:`None`\"\n     assert restify(Integral) == \":class:`numbers.Integral`\"\n+    # Test for struct.Struct resolution\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(Any) == \":obj:`Any`\"\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..a1a2f1a 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,32 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_section(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        # Test with napoleon_use_param = False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param = True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters:\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..6839617 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,9 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from pathlib import Path\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n@@ -61,7 +64,22 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/cpp/' in stuff\n \n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_default(app, status, warning):\n+    app.builder.build_all()\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode',\n+                    confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode',\n+                    confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..95017ef 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -322,7 +322,34 @@ def test_mul():\n         assert h == h2\n \n \n-def test_args():\n+def test_permutation_non_disjoint_cycles():\n+    # Identity permutation with non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1]) \n+\n+    # Test with another non-disjoint cycle\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([0, 2, 1]) \n+\n+    # Test with nesting cycles\n+    assert Permutation([[0, 1], [1, 2], [2, 3]]) == Permutation([0, 3, 1, 2])\n+    \n+    # Test with single element cycles (should result in the identity permutation)\n+    assert Permutation([[0], [1], [2]]) == Permutation([0, 1, 2])\n+\n+    # More complex overlapping cycles\n+    assert Permutation([[0, 2], [1, 2], [2, 3]]) == Permutation([0, 3, 2, 1])\n+\n+    # Non-overlapping cycles should also work\n+    assert Permutation([[0, 1], [2, 3]]) == Permutation([1, 0, 3, 2])\n+\n+    # Large and small cycle interaction\n+    assert Permutation([[0, 1, 2, 3, 4], [2, 4]]) == Permutation([1, 0, 4, 3, 2])\n+\n+    # Cycles with multiple identical elements should raise an error\n+    try:\n+        Permutation([[0, 0]])\n+        assert False, \"Expected ValueError\"\n+    except ValueError:\n+        pass\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n     assert Permutation(p) == p\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..4dfddf2 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,6 +1,41 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n+from sympy.matrices import Matrix\n+\n+def test_hstack_vstack_zero_dim():\n+    # Test horizontal stacking with zero row matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    result_hstack = Matrix.hstack(M1, M2, M3, M4)\n+    assert result_hstack.shape == (0, 6), f\"Expected (0, 6), got {result_hstack.shape}\"\n+\n+    # Test horizontal stacking with one row matrices\n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(1, 2)\n+    M4 = Matrix.zeros(1, 3)\n+    result_hstack = Matrix.hstack(M1, M2, M3, M4)\n+    assert result_hstack.shape == (1, 6), f\"Expected (1, 6), got {result_hstack.shape}\"\n+\n+    # Test vertical stacking with zero column matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(1, 0)\n+    M3 = Matrix.zeros(2, 0)\n+    M4 = Matrix.zeros(3, 0)\n+    result_vstack = Matrix.vstack(M1, M2, M3, M4)\n+    assert result_vstack.shape == (6, 0), f\"Expected (6, 0), got {result_vstack.shape}\"\n+\n+    # Test vertical stacking with one column matrices\n+    M1 = Matrix.zeros(0, 1)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(2, 1)\n+    M4 = Matrix.zeros(3, 1)\n+    result_vstack = Matrix.vstack(M1, M2, M3, M4)\n+    assert result_vstack.shape == (6, 1), f\"Expected (6, 1), got {result_vstack.shape}\"\n \n def test_sparse_matrix():\n     def sparse_eye(n):\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..cde7cfa 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -81,8 +81,27 @@ def check(a, exclude=[], check_attr=True):\n \n #================== core =========================\n \n+import sys\n+import pickle\n+import sympy\n+\n+def test_pickle_float_expression_python2_to_python3():\n+    # This test simulates saving a pickled expression in Python 2\n+    # and loading it in Python 3.\n+    # However, it needs to be run in a single Python environment.\n+\n+    # Create an expression in sympy\n+    x = sympy.symbols(\"x\")\n+    expr = x + 1.0\n+\n+    # Pickle the expression (simulating Python 2 behavior)\n+    dump_data = pickle.dumps(expr, protocol=2)\n+    \n+    # Unpickle the data (simulating Python 3 behavior)\n+    loaded_expr = pickle.loads(dump_data)\n \n-def test_core_basic():\n+    # Assert that the loaded expression is correct\n+    assert loaded_expr == expr\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n               # XXX: dynamically created types are not picklable\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..0aca7d0 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,18 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n+def test_coth_subs_issue():\n+    from sympy import Symbol, coth, log, tan, pi, I\n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+\n+    # Test the values that were causing the error before.\n+    problematic_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for value in problematic_values:\n+        assert expr.subs(x, value) is not None\n \n-def test_coth_series():\n+    # Ensure the result for x=2 does not raise an error and returns a valid expression\n+    assert expr.subs(x, 2) == coth(log(tan(2)))\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..1467be9 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,45 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643():\n+    from sympy import eye, ones, Matrix\n+\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Test inserting at the start\n+    result = M.col_insert(0, V)\n+    expected = Matrix([\n+        [2, 2, 1, 0, 0, 0, 0, 0],\n+        [2, 2, 0, 1, 0, 0, 0, 0],\n+        [2, 2, 0, 0, 1, 0, 0, 0],\n+        [2, 2, 0, 0, 0, 1, 0, 0],\n+        [2, 2, 0, 0, 0, 0, 1, 0],\n+        [2, 2, 0, 0, 0, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Test inserting at the end\n+    result = M.col_insert(6, V)\n+    expected = Matrix([\n+        [1, 0, 0, 0, 0, 0, 2, 2],\n+        [0, 1, 0, 0, 0, 0, 2, 2],\n+        [0, 0, 1, 0, 0, 0, 2, 2],\n+        [0, 0, 0, 1, 0, 0, 2, 2],\n+        [0, 0, 0, 0, 1, 0, 2, 2],\n+        [0, 0, 0, 0, 0, 1, 2, 2]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..1596171 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,42 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+from sympy import latex, symbols, S, oo, SeqFormula, SeqPer, SeqAdd, SeqMul\n \n def test_latex_sequences():\n+    # Verify that SeqFormula outputs are correctly formed without backslash-escaped brackets\n+    k, n = symbols('k n', integer=True)\n+    \n+    # Original sequence test case\n+    s1 = SeqFormula(n**2, (n, 0, oo))\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s1) == latex_str\n+\n+    # Additional test cases\n+    # Finite sequence\n+    s2 = SeqFormula(n**2, (n, 0, 3))\n+    latex_str = r'[0, 1, 4, 9]'\n+    assert latex(s2) == latex_str\n+\n+    # Reverse infinite sequence\n+    s3 = SeqFormula(n**2, (n, -oo, 0))\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(s3) == latex_str\n+\n+    # Negative range sequence\n+    s4 = SeqFormula(n**2, (n, -3, 0))\n+    latex_str = r'[9, 4, 1, 0]'\n+    assert latex(s4) == latex_str\n+    \n+    # Mixed sequence using SeqAdd\n+    s5 = SeqAdd(s1, s2)\n+    latex_str = r'[0, 2, 8, 18, \\ldots]'\n+    assert latex(s5) == latex_str\n+\n+    # Mixed sequence using SeqMul\n+    s6 = SeqMul(s1, s2)\n+    latex_str = r'[0, 1, 16, 81, \\ldots]'\n+    assert latex(s6) == latex_str\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..a1af2a9 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,10 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n+from sympy.polys import Poly\n+from sympy.abc import x, y, z\n+from sympy.polys.polyerrors import OptionError\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..aaae51a 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -306,6 +307,22 @@ def test_latex_functions():\n                  fold_func_brackets=True) == \\\n         r\"\\sin^{-1} {x^{2}}\"\n \n+    # Test for the 'acsc' function with full inverse trig style\n+    assert latex(acsc(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+    assert latex(acsc(x)**2, inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arccsc}^{2}{\\left (x \\right )}\"\n+    assert latex(acsc(x), inv_trig_style=\"power\") == \\\n+        r\"\\csc^{-1}{\\left (x \\right )}\"\n+\n+    # Test for the 'asec' function with full inverse trig style\n+    assert latex(asec(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n+    assert latex(asec(x)**2, inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arcsec}^{2}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"power\") == \\\n+        r\"\\sec^{-1}{\\left (x \\right )}\"\n+\n     assert latex(factorial(k)) == r\"k!\"\n     assert latex(factorial(-k)) == r\"\\left(- k\\right)!\"\n \n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..6574a32 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6121,8 +6121,26 @@ def test_MatrixSymbol_printing():\n     assert pretty(A - B) == \"-B + A\"\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n+from sympy import MatrixSymbol, pretty, symbols\n \n-def test_degree_printing():\n+def test_MatAdd_pretty_printing_issue_14814():\n+    # issue #14814\n+    n = symbols('n', integer=True)\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    \n+    # Test for pretty printing with special character names\n+    assert pretty(x + y_star) == \"x + y*\"\n+    \n+    # Test for negative MatAdd\n+    a = symbols('a')\n+    y = MatrixSymbol('y', n, n)\n+    assert pretty(-a*x + -2*y_star*y_star) == \"-a*x - 2*y**2\"\n+    assert pretty(-x + y_star) == \"-x + y*\"\n+\n+    # Test with normal names but still following the pattern\n+    b = MatrixSymbol('b', n, n)\n+    assert pretty(-b + y_star) == \"-b + y*\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..49a518b 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -721,6 +721,19 @@ def test_dummification():\n     assert lam(3, 9) == 2\n     lam = lambdify(sin(t), 2 * sin(t)**2)\n     assert lam(F(t)) == 2 * F(t)**2\n+\n+def test_curly_matrix_symbol():\n+    # Issue #15009: Test lambdify with MatrixSymbol names containing curly braces\n+    import sympy\n+    curlyv = sympy.MatrixSymbol(\"{v}\", 2, 1)\n+    \n+    # Test without dummify=True\n+    lam = lambdify(curlyv, curlyv)\n+    assert (lam([[1], [1]]) == [[1], [1]]).all()\n+    \n+    # Test with dummify=True\n+    lam_dummified = lambdify(curlyv, curlyv, dummify=True)\n+    assert (lam_dummified([[1], [1]]) == [[1], [1]]).all()\n     #Test that \\alpha was properly dummified\n     lam = lambdify((alpha, t), 2*alpha + t)\n     assert lam(2, 1) == 5\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..1b945d7 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..846196c 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, Eq, exp\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -21,6 +22,37 @@ def test_idiff():\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n \n+def test_idiff():\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    t = Symbol('t', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+    \n+    # New test cases based on the issue description\n+    # Case 1: Using Eq to form the equation\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x).simplify() == (x + 1) * exp(x - y)/(y + 1)\n+    \n+    # Case 2: Using f(x) as the dependent variable\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x).simplify() == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    \n+    # Existing example from patch\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Existing test cases\n+    # the use of idiff in ellipse also provides coverage\n+    circ = x**2 + y**2 - 4\n+    ans = -3*x*(x**2 + y**2)/y**5\n+    assert ans == idiff(circ, y, x, 3).simplify()\n+    assert ans == idiff(circ, [y], x, 3).simplify()\n+    assert idiff(circ, y, x, 3).simplify() == ans\n+    explicit  = 12*x/sqrt(-x**2 + 4)**5\n+    assert ans.subs(y, solve(circ, y)[0]).equals(explicit)\n+    assert True in [sol.diff(x, 3).equals(explicit) for sol in solve(circ, y)]\n+    assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n+\n def test_intersection():\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..34d7eb4 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,39 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import CCodeGen, codegen\n+    from sympy import MatrixSymbol\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_unused_argument_cython():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in output\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..2f3883b 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,6 +342,25 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+    # Additional tests for Intersection removing duplicates and symbolic handling\n+    x = Symbol('x')\n+\n+    # Test intersection with duplicates in inputs\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    assert Intersection({1, 2, 2}, {2, 2, 3}, {2, 4}) == {2}\n+    \n+    # Test symbolic intersection resulting in Piecewise\n+    result = Intersection({1}, {1}, {x})\n+    expected = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert result.doit() == expected\n+    \n+    # Test symbolic logic with empty set result\n+    assert Intersection({1}, {2}, {x}) == S.EmptySet\n+\n+    # Test intersection with multiple symbolic variables\n+    y = Symbol('y')\n+    assert Intersection({x}, {y}) == Intersection({x}, {y})\n+\n \n def test_issue_9623():\n     n = Symbol('n')\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..3fad8c3 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,6 +1,7 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n-    MatrixSymbol, BlockMatrix\n+    MatrixSymbol, BlockMatrix, Identity\n )\n from sympy import eye\n from sympy.abc import x, i, j, a, b, c, d\n@@ -11,7 +12,7 @@ from sympy.codegen.array_utils import (CodegenArrayContraction,\n from sympy.printing.lambdarepr import NumPyPrinter\n \n from sympy.utilities.pytest import warns_deprecated_sympy\n-from sympy.utilities.pytest import skip\n+from sympy.utilities.pytest import skip, raises\n from sympy.external import import_module\n \n np = import_module('numpy')\n@@ -26,7 +27,21 @@ def test_numpy_piecewise_regression():\n     assert NumPyPrinter().doprint(p) == 'numpy.select([numpy.less(x, 0),True], [1,0], default=numpy.nan)'\n \n \n-def test_sum():\n+def test_issue_identity_in_lambdify():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+\n+    assert (f(ma) == mr).all()\n+\n+    from sympy import symbols\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"M\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n     if not np:\n         skip(\"NumPy not installed\")\n \n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_fu.py b/sympy/simplify/tests/test_fu.py\nindex 135b4cd..7279fb8 100644\n--- a/sympy/simplify/tests/test_fu.py\n+++ b/sympy/simplify/tests/test_fu.py\n@@ -76,6 +76,11 @@ def test__TR56():\n     assert T(sin(x)**6, sin, cos, h, 6, True) == sin(x)**6\n     assert T(sin(x)**8, sin, cos, h, 10, True) == (-cos(x)**2 + 1)**4\n \n+# issue 17137\n+def test_issue_17137_fu():\n+    h = lambda x: 1 - x\n+    assert T(sin(x)**I, sin, cos, h, 4, True) == sin(x)**I\n+    assert T(sin(x)**(2*I + 1), sin, cos, h, 4, True) == sin(x)**(2*I + 1)\n \n def test_TR5():\n     assert TR5(sin(x)**2) == -cos(x)**2 + 1\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..55cdb6d 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -5,8 +6,19 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n+import sympy\n+from sympy import geometry as ge\n \n def test_point():\n+    # Test multiplication with sympify\n+    point1 = ge.Point(0, 0)\n+    point2 = ge.Point(1, 1)\n+    \n+    result1 = point1 + point2 * sympy.sympify(2.0)\n+    result2 = point1 + sympy.sympify(2.0) * point2\n+\n+    assert result1 == ge.Point(2, 2)\n+    assert result2 == ge.Point(2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..95bfb42 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1893,8 +1893,32 @@ def test_normal():\n     e = Mul(S.Half, 1 + x, evaluate=False)\n     assert e.normal() == e\n \n+def test_sympy_repr_eval_issue():\n+    # This test ensures that repr is not improperly evaluated within the __eq__ method\n+    x = symbols('x')\n+\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    # The comparison should not attempt to evaluate 'x.y' and should not raise an AttributeError\n+    assert (x == C()) is False\n+\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+\n+    # Even if repr returns the same name as the symbol, equality should be False\n+    assert (x == D()) is False\n+    assert (x != D()) is True\n+\n+    # Ensure that an exception in __repr__ does not cause issues\n+    class BadRepr:\n+        def __repr__(self):\n+            raise RuntimeError\n \n-def test_expr():\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n \n@@ -1902,4 +1926,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..c23809c 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -538,6 +538,15 @@ def test_diophantine():\n     assert diophantine(eq) == \\\n         set([(24*p*q, 2*p**2 - 24*q**2, p**2 + 12*q**2)])\n     # solvers have not been written for every type\n+\n+    # Test case for issue diophantine: incomplete results depending on syms order with permute=True\n+    # Verify that the function returns the complete set of solutions consistently for different orders of syms\n+    from sympy.abc import m, n\n+\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n     raises(NotImplementedError, lambda: diophantine(x*y**2 + 1))\n \n     # rational expressions\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..637d3e3 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String, Basic\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..3ac970d 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -102,8 +102,14 @@ def test_block_collapse_explicit_matrices():\n \n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n-\n-def test_issue_17624():\n+from sympy import Matrix, BlockDiagMatrix\n+\n+def test_issue_one_element_BlockDiagMatrix():\n+    # Test for when there is only one matrix in BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n     b = BlockMatrix([[a, z], [z, z]])\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..7e07f3d 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -87,7 +88,16 @@ def test_slicing():\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n-def test_errors():\n+def test_blockmatrix_indexing_issue():\n+    from sympy import MatrixSymbol, BlockMatrix, symbols, MatrixElement\n+\n+    n, i = symbols('n, i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    \n+    # It should not evaluate to (A)[i, 0], but leave as MatrixElement\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n     raises(IndexError, lambda: Identity(2)[1, 2, 3, 4, 5])\n     raises(IndexError, lambda: Identity(2)[[1, 2, 3, 4, 5]])\n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..cfebb10 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -305,6 +305,22 @@ def test_sign():\n     # evaluate what can be evaluated\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n+    x = Symbol('x')\n+    y = Function('y')(x)\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x / Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y / Abs(y), True))\n+\n+    # Testing the behavior for complex numbers\n+    z = Symbol('z', complex=True)\n+    assert sign(z).rewrite(Abs) == Piecewise((0, Eq(z, 0)), (z / Abs(z), True))\n+\n+    # Testing the behavior for specific complex values\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(5).rewrite(Abs) == 1\n+    assert sign(-5).rewrite(Abs) == -1\n+    assert sign(3 + 4*I).rewrite(Abs) == (3 + 4*I) / Abs(3 + 4*I)\n+    assert sign(-3 - 4*I).rewrite(Abs) == (-3 - 4*I) / Abs(-3 - 4*I)\n+\n     eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n     # if there is a fast way to know when and when you cannot prove an\n     # expression like this is zero then the equality to zero is ok\n",
  "sympy__sympy-20154": "",
  "sympy__sympy-20212": "",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..23310c2 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -23,8 +24,23 @@ k = PREFIXES[\"k\"]\n def test_str_repr():\n     assert str(kg) == \"kilogram\"\n \n+from sympy.physics.units import joule\n+\n+def test_convert_to_issue():\n+    expr = joule * second\n+    # Check conversion to joule, expecting original expression back\n+    conv = convert_to(expr, joule)\n+    assert conv == expr or conv == joule*second\n+\n+    # Additional test cases for related behavior\n+    conv_full = convert_to(expr, joule*second)\n+    assert conv_full == joule*second\n+\n+    conv_base_units = convert_to(expr, kg * m**2 / s)\n+    assert conv_base_units == kg * m**2 / s\n \n-def test_eq():\n+    converted_mins = convert_to(expr, minute)\n+    assert converted_mins == joule * minute / 60\n     # simple test\n     assert 10*m == 10*m\n     assert 10*m != 10*s\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..58ca13d 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,28 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from sympy.testing.pytest import raises\n+\n+def test_symbol_no_dict():\n+    # Verify that Symbol instances do not have a __dict__\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    assert s.__slots__ == ('name',)\n+    with raises(AttributeError):\n+        getattr(s, '__dict__')\n+        \n+def test_symbol_slots():\n+    # Ensure that the __slots__ mechanism is working correctly.\n+    s = Symbol('s')\n+    assert s.__slots__ == ('name',)\n+    \n+def test_symbol_attribute_error():\n+    # Ensure the correct handling of AttributeError for dynamic attributes.\n+    s = Symbol('s')\n+    with raises(AttributeError):\n+        s.new_attribute = 42\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..99698eb 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,15 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_refine_complex_argument_simplification():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x')\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    # Checking if refine simplifies correctly when a is positive\n+    assert refine(J.doit(), Q.positive(a)) == 1 / (a**2 + 1)\n+    # Verify if arg(a) is handled correctly\n+    assert refine(arg(a), Q.positive(a)) == 0\n+    assert refine(arg(a), Q.negative(a)) == pi\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..27baf3b 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -8,6 +9,21 @@ from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n+def test_issue_21373():\n+    from sympy import exp, sinh, Piecewise, symbols, clear_cache\n+\n+    x, y, z = symbols('x y z')\n+    \n+    # attempting with real symbols as per the original issue\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+\n+    # Expression that caused the issue\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    \n+    # Testing the substitution\n+    clear_cache()\n+    expr.subs({1: 1.0})  # This should not raise PolynomialError anymore\n+\n def test_subs():\n     n3 = Rational(3)\n     e = x\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..39e00ba 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,7 +1,9 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n+from sympy.core.function import Derivative\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n@@ -45,7 +47,17 @@ def test_Matrix_kind():\n         m = cls.zeros(3, 2)\n         assert m.kind is MatrixKind(NumberKind)\n \n-def test_MatMul_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    d1 = Derivative(comm_x, comm_x)\n+    d2 = Derivative(A, comm_x)\n+\n+    assert d1.kind is NumberKind, \"The kind of derivative with respect to itself should be NumberKind\"\n+    assert d2.kind is MatrixKind(NumberKind), \"The kind of derivative involving a matrix should be MatrixKind(NumberKind)\"\n+\n+    # Additional test cases for edge scenarios\n+    d3 = Derivative(A, noncomm_x)\n+    assert d3.kind is MatrixKind(UndefinedKind), \"The kind should be MatrixKind(UndefinedKind) if variable is non-commutative\"\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n     assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..3a98a69 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -132,6 +132,38 @@ def test_monomials():\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n     i, j, k = symbols('i j k', commutative=False)\n+\n+    # Additional tests to verify bug fix related to min_degrees argument\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    \n+    # Checking the correct behavior for itermonomials with min_degree and max_degree set to 3\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, \n+        x1*x2**2, x1*x3**2, x2*x3**2, \n+        x1**2*x2, x1**2*x3, x2**2*x3, \n+        x1*x2*x3}\n+\n+    # Checking the behavior for itermonomials with min_degree = 2 and max_degree = 3\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {\n+        x1**2, x2**2, x3**2, \n+        x1*x2, x1*x3, x2*x3, \n+        x1**3, x2**3, x3**3, \n+        x1**2*x2, x1**2*x3, x2**2*x3,\n+        x1*x2**2, x1*x3**2, x2*x3**2, \n+        x1*x2*x3}\n+\n+    # Checking with another set of symbolic variables\n+    a, b, c = symbols('a b c')\n+    assert set(itermonomials([a, b, c], 2, 2)) == {\n+        a**2, b**2, c**2,\n+        a*b, a*c, b*c }\n+    assert set(itermonomials([a, b, c], 3, 2)) == {\n+        a**2, b**2, c**2, \n+        a*b, a*c, b*c, \n+        a**3, b**3, c**3, \n+        a**2*b, a**2*c, b**2*c,\n+        a*b**2, a*c**2, b*c**2, \n+        a*b*c}\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n     assert set(itermonomials([i, j, k], [0, 1, 0])) == {1, j}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..3de574d 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,8 +50,17 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n-\n-def test_solve_biquadratic():\n+def test_issue_infinite_solution_detection():\n+    # Test case originally mentioned in the issue\n+    raises(NotImplementedError, lambda: solve_poly_system((x - 1,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((y - 1,), x, y))\n+\n+    # Additional similar test cases\n+    raises(NotImplementedError, lambda: solve_poly_system((x + 1,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((2*x - 3,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((x**2 - 4,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((y**2 - x**2,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((x*y - 1,), x, y))\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n \n     f_1 = (x - 1)**2 + (y - 1)**2 - r**2\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7057531 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..a9e6463 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,7 +347,27 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n-def test_cse_MatrixExpr():\n+def test_cse_MatrixSymbol_indexing():\n+    # Test cse with individual element indexing of MatrixSymbols\n+\n+    # Define 4x4 matrix symbols\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+\n+    # Expression that multiplies specific elements\n+    expr = a[0, 0] * b[0, 0] + a[0, 1] * b[1, 0]\n+    replacements, reduced_exprs = cse(expr)\n+\n+    # Ensure that common sub-expressions are detected and replaced\n+    assert replacements == [(symbols('x0'), a[0, 0] * b[0, 0]), (symbols('x1'), a[0, 1] * b[1, 0])]\n+    assert reduced_exprs == [symbols('x0') + symbols('x1')]\n+\n+    # More complex expression\n+    expr2 = a[0, 0] * b[0, 0] + a[0, 1] * b[1, 0] + a[0, 0] * b[1, 0]\n+    replacements2, reduced_exprs2 = cse(expr2)\n+\n+    assert replacements2 == [(symbols('x0'), a[0, 0] * b[0, 0]), (symbols('x1'), a[0, 1] * b[1, 0]), (symbols('x2'), a[0, 0] * b[1, 0])]\n+    assert reduced_exprs2 == [symbols('x0') + symbols('x1') + symbols('x2')]\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..05c0f9d 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,8 +38,25 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n+def test_issue_empty_array():\n+    for array_type in array_types:\n+        # Test creating an empty array\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)  # Expecting a shape of (0,)\n+        assert list(A) == []  # The list representation should be empty\n+\n+        # Test creating a 1D array with zero elements\n+        A = array_type([[]])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (1, 0)  # Expecting shape (1, 0) for a 1D array with zero elements\n+        assert list(A) == []  # The list representation should still be empty\n \n-def test_issue_18361():\n+        # Test creating a 2D array with zero elements\n+        A = array_type([[], []])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (2, 0)  # Expecting shape (2, 0) for a 2D array with zero elements\n+        assert list(A) == []  # The list representation should still be empty\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n     C = Array([(x + x**2)/(x*sin(y)**2 + x*cos(y)**2), 2*sin(x)*cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..89ef6ae 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,24 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_single_element_tuple():\n+    # Basic test case using default modules\n+    f2b = lambdify([], (1,))\n+    assert f2b() == (1,)\n+\n+    # Test with specified modules\n+    f2b_numpy = lambdify([], (1,), modules='numpy')\n+    assert f2b_numpy() == (1,)\n+\n+    f2b_scipy = lambdify([], (1,), modules='scipy')\n+    assert f2b_scipy() == (1,)\n+\n+    f2b_sympy = lambdify([], (1,), modules='sympy')\n+    assert f2b_sympy() == (1,)\n+\n+    # Inspect the source to ensure the correct tuple is returned\n+    source_code = inspect.getsource(f2b)\n+    assert \"return (1,)\" in source_code\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..196d341 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,9 +528,76 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+def test_issue_24062():\n     from sympy.core.numbers import E\n-    from sympy.physics.units import energy\n+    from sympy import exp\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+    from sympy.core.numbers import E\n+def test_issue_24062_additional_cases():\n+    from sympy.core.numbers import E\n+    from sympy import exp\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    # Additional test cases\n+    expr2 = (T**2) / (R * C * T)\n+    dim2 = SI._collect_factor_and_dimension(expr2)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim2)\n+\n+    expr3 = (T**2) / (R * C**2)\n+    dim3 = SI._collect_factor_and_dimension(expr3)[1]\n+    assert not SI.get_dimension_system().is_dimensionless(dim3)\n+\n+    expr4 = (R * C) / T\n+    dim4 = SI._collect_factor_and_dimension(expr4)[1]\n+    assert not SI.get_dimension_system().is_dimensionless(dim4)\n+\n+    exp_expr2 = 1 + exp(expr2)\n+    assert SI._collect_factor_and_dimension(exp_expr2) == (1 + E, Dimension(1))\n+\n+    exp_expr3 = exp(expr3)\n+    result3 = SI._collect_factor_and_dimension(exp_expr3)\n+    assert result3[1] != Dimension(1)  # should not be dimensionless\n+\n+    exp_expr4 = exp(expr4)\n+    result4 = SI._collect_factor_and_dimension(exp_expr4)\n+    assert result4[1] != Dimension(1)  # should not be dimensionless\n     u = Quantity('u')\n     v = Quantity('v')\n     SI.set_quantity_dimension(u, energy)\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..5b3893c 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,22 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_expand_issue():\n+    # Original test cases from the issue\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+    \n+    # Additional test cases to ensure thorough coverage\n+    assert TP(0, A + B).expand(tensorproduct=True) == 0\n+    assert TP(A + B + C, B).expand(tensorproduct=True) == \\\n+        TP(A, B) + TP(B, B) + TP(C, B)\n+    assert TP(3*A, 3*B).expand(tensorproduct=True) == 9*TP(A, B)\n+    assert TP(A*C + B, A - C).expand(tensorproduct=True) == \\\n+        TP(A*C, A) - TP(A*C, C) + TP(B, A) - TP(B, C)\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..4094823 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,7 +563,62 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+    \n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+    \n+    # Testing basic addition\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+    \n+    # Additional test cases to ensure robustness\n+    # 1. Testing with a different scale factor\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 2 * meter / second)\n+\n+    expr2 = A1*T1 + V2\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr2)\n+\n+    # 2. Testing incompatible dimensions\n+    L1 = Quantity('L1')\n+    SI.set_quantity_dimension(L1, length)\n+    SI.set_quantity_scale_factor(L1, 1 * meter)\n+\n+    expr3 = A1*T1 + L1\n+    try:\n+        SI._collect_factor_and_dimension(expr3)\n+    except ValueError as e:\n+        assert str(e) == 'Dimension of \"L1\" is Dimension(length), but it should be Dimension(velocity*time)'\n+    \n+    # 3. Testing zero addition\n+    ZeroVelocity = Quantity('ZeroVelocity')\n+    SI.set_quantity_dimension(ZeroVelocity, velocity)\n+    SI.set_quantity_scale_factor(ZeroVelocity, 0 * meter / second)\n+\n+    expr4 = A1*T1 + ZeroVelocity\n+    SI._collect_factor_and_dimension(expr4)  # should not throw ValueError\n+\n+    # 4. Expression with dimensional constants\n+    half_accel = 0.5 * A1\n+    expr5 = half_accel*T1 + V1\n+    SI._collect_factor_and_dimension(expr5)  # should not throw ValueError\n+\n+    assert True, \"All test cases for issue_24211 passed.\"\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..49cf886 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, V, milli, kilo\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,27 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+def test_milli_prefix():\n+    # Test that milli*W evaluates to milliwatt (mW)\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+\n+    # Test milli prefix with other units like Volt\n+    assert milli * V == V / 1000\n+    assert V * milli == V / 1000\n+\n+    # Test that random combination doesn't resolve to incorrect simplification\n+    assert milli * Quantity('unit') != 1\n+\n+def test_kilo_prefix():\n+    # Test that kilo*W evaluates to kilowatt (kW)\n+    assert kilo * W == W * 1000\n+    assert W * kilo == W * 1000\n+\n+    # Test kilo prefix with other units like Volt\n+    assert kilo * V == V * 1000\n+    assert V * kilo == V * 1000\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..024ea17 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -174,6 +174,15 @@ class SubBase(Base):\n     sub_id = models.IntegerField(primary_key=True)\n \n \n+from django.db import models\n+\n+class Parent(models.Model):\n+    class Meta:\n+        ordering = [\"-pk\"]\n+\n+class Child(Parent):\n+    pass\n+\n class GrandParent(models.Model):\n     first_name = models.CharField(max_length=80)\n     last_name = models.CharField(max_length=80)\n",
  "django__django-13033": "",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..cb2cf6d 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -657,6 +657,21 @@ Java</label></li>\n <div class=\"myradio\"><label for=\"id_language_1\">\n <input id=\"id_language_1\" name=\"language\" type=\"radio\" value=\"J\" required> Java</label></div>\"\"\"\n         )\n+    def test_boundfield_subwidget_id_for_label(self):\n+        \"\"\"\n+        If auto_id is provided when initializing the form, the generated ID in\n+        subwidgets must reflect that prefix.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n \n     def test_form_with_iterable_boundfield(self):\n         class BeatleForm(Form):\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..fde69ff 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -638,6 +638,25 @@ def test_colorbar_format(fmt):\n     fig.canvas.draw()\n     assert (cbar.ax.yaxis.get_ticklabels()[0].get_text() ==\n             '$\\\\mathdefault{10^{-2}}$')\n+            \n+def test_colorbar_update_after_norm_change():\n+    fig, ax = plt.subplots()\n+    data = 10**np.random.normal(1, 1, size=(50, 50))\n+    im = ax.imshow(data, cmap='gray')\n+    cbar = fig.colorbar(im, ax=ax)\n+\n+    # Change the normalization\n+    im.set_norm(LogNorm(vmin=0.1, vmax=100))\n+    \n+    # Check if colorbar updates its scale\n+    fig.canvas.draw()\n+    \n+    # Ensure that the colorbar now uses a logarithmic scale\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+    \n+    # Check that the colorbar has updated its ticks to reflect new normalization\n+    assert cbar.ax.yaxis.get_ticklabels()[0].get_text() == '$\\\\mathdefault{10^{-1}}$'\n+    assert cbar.ax.yaxis.get_ticklabels()[-1].get_text() == '$\\\\mathdefault{10^{2}}$'\n \n \n def test_colorbar_scale_reset():\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..bb74ee3 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_stacked_array_to_unstacked_dataset_single_dimension(self):\n+        # Original test patch: single dimension variables\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..3742c69 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,38 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+    \n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output using a custom transformer.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion, make_union\n+    from sklearn import set_config\n+    \n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Default numpy output\n+    set_config(transform_output=\"default\")\n+    union_default = make_union(MyTransformer())\n+    result_default = union_default.fit_transform(data)\n+    \n+    # Pandas output\n+    set_config(transform_output=\"pandas\")\n+    union_pandas = make_union(MyTransformer())\n+    result_pandas = union_pandas.fit_transform(data)\n+    \n+    # Check that no errors are raised and results are as expected\n+    assert result_default.shape[0] == len(data[\"date\"].unique())\n+    assert isinstance(result_pandas, pd.DataFrame)\n+    assert result_pandas.shape[0] == len(data[\"date\"].unique())\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..314236a 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,66 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import sys\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from tests.util import do_autodoc\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_attributes_in_superclass(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_attributes_with_undoc_members(app):\n+    options = {\"members\": None, \"inherited-members\": True, \"undoc-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..b11e898 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -348,6 +349,30 @@ def test_issue_2827_trigsimp_methods():\n     M = Matrix([expr])\n     assert trigsimp(M, method='fu', measure=measure1) == ans\n     assert trigsimp(M, method='fu', measure=measure2) != ans\n+\n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+def test_issue_15129_additional_cases():\n+    # Additional test cases to ensure correctness\n+    r = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert trigsimp(r) == cos(Rational(1, 25) - Rational(1, 50))\n+\n+    # Check simplification of acos expression\n+    acos_expr = acos(r)\n+    simplified_acos_expr = acos(cos(Rational(1, 25) - Rational(1, 50)))\n+    assert simplify(acos_expr) == simplified_acos_expr\n+\n+    # Numerical validation against expected values\n+    r_numerical = r.evalf()\n+    expected_r_numerical = cos(Rational(1, 25) - Rational(1, 50)).evalf()\n+    assert abs(r_numerical - expected_r_numerical) < 1e-10\n     # all methods should work with Basic expressions even if they\n     # aren't Expr\n     M = Matrix.eye(1)\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..117d392 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,24 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_pretty_alignment():\n+    from sympy import Sum, oo, pprint\n+    from sympy.abc import x\n \n-def test_units():\n+    # Test case for the issue described\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    expected_output = \\\n+u(\"\"\"\\\n+  \u221e \\n\\\n+ ___  \\n\\\n+ \u2572    \\n\\\n+  \u2572   x\\n\\\n+  \u2571     + 3\\n\\\n+ \u2571    \\n\\\n+ \u203e\u203e\u203e  \\n\\\n+x = 1 \\\n+\"\"\")\n+    assert upretty(expr) == expected_output\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..1862cf3 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -704,6 +704,12 @@ def test_uniq():\n     assert list(uniq([2, 3, 2, 4, [2], [1], [2], [3], [1]])) == \\\n         [2, 3, 4, [2], [1], [3]]\n \n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n \n def test_kbins():\n     assert len(list(kbins('1123', 2, ordered=1))) == 24\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..4eb7547 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,6 +8,7 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -955,4 +957,26 @@ class LookupTests(TestCase):\n                 ).filter(author_exists=True)\n             ),\n         )\n-        self.assertEqual(qs.get(has_author_alias_match=True), tag)\n+        self.assertEqual(qs.get(has_author_alias_match=True), tag)\n+\n+    def test_group_by_preservation_in_subquery(self):\n+        # Create test users\n+        user1 = User.objects.create(username='user1', email=None)\n+        user2 = User.objects.create(username='user2', email='user2@example.com')\n+\n+        # Subquery with GROUP BY on 'email'\n+        emails_max_ids = User.objects.filter(email__isnull=True).values('email').annotate(max_id=Max('id')).values('max_id')\n+\n+        # Outer query using subquery as filter\n+        users = User.objects.filter(id=emails_max_ids[:1])\n+\n+        # Validate that only user1 is returned, checking GROUP BY is correct\n+        self.assertEqual(list(users), [user1])\n+\n+        # Ensure original GROUP BY is maintained, test with another subquery\n+        user3 = User.objects.create(username='user3', email=None)\n+        emails_max_ids_2 = User.objects.filter(email__isnull=True).values('email').annotate(max_id=Max('id')).values('max_id')\n+        users_2 = User.objects.filter(id=emails_max_ids_2[:1])\n+\n+        # Validate that the latest user with email null is returned\n+        self.assertEqual(list(users_2), [user3])\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..70cff82 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,6 +546,23 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n+    def test_subquery_attribute_set(self):\n+        from django.db import connection\n+        from django.test import TestCase\n+        from myapp.models import Company\n+\n+        # Creating a subquery instance\n+        subquery = Subquery(Company.objects.all())\n+\n+        # Verify that subquery attribute is set to True\n+        self.assertTrue(subquery.query.subquery)\n+\n+        # Generate the SQL and validate its format\n+        compiler = subquery.query.get_compiler(connection=connection)\n+        sql, params = subquery.as_sql(compiler, connection)\n+        self.assertTrue(sql.startswith('(SELECT '))\n+        self.assertTrue(sql.endswith(')'))\n+\n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..c66de4a 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,26 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +184,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..3f4b544 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -9,10 +10,34 @@ import warnings\n \n import numpy as np\n import pytest\n-from PIL import Image\n+import pickle\n+from matplotlib.figure import Figure\n \n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n+def test_figure_dpi_after_pickle():\n+    # Create a figure with a specific DPI\n+    original_dpi = 42\n+    fig = Figure(dpi=original_dpi)\n+    \n+    # Pickle and unpickle the figure\n+    pickled_fig = pickle.dumps(fig)\n+    unpickled_fig = pickle.loads(pickled_fig)\n+    \n+    # Check if the DPI of the unpickled figure is the same as the original\n+    assert unpickled_fig.dpi == original_dpi, (\n+        f\"Expected DPI: {original_dpi}, but got: {unpickled_fig.dpi}\"\n+    )\n+\n+    # Repeat the process to ensure DPI remains consistent\n+    for _ in range(5):\n+        pickled_fig = pickle.dumps(unpickled_fig)\n+        unpickled_fig = pickle.loads(pickled_fig)\n+        assert unpickled_fig.dpi == original_dpi, (\n+            f\"Expected DPI: {original_dpi}, but got: {unpickled_fig.dpi}\"\n+        )\n+\n+# Existing test cases\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n from matplotlib.figure import Figure, FigureBase\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..08acdce 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+import seaborn as sns\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,26 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_map_and_categorical_hue(self):\n+        # Load the iris dataset\n+        iris = sns.load_dataset(\"iris\")\n+        \n+        # Create a PairGrid for specific variables\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        \n+        # Attempt to map a scatterplot without using hue at PairGrid init directly\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            # Map a regplot without scatter\n+            g.map(sns.regplot, scatter=False)\n+            plt.close('all')  # Close plots if successful\n+            no_error = True\n+        except Exception as e:\n+            no_error = False\n+            plt.close('all')  # Ensure plots are closed on exception\n+        \n+        # Assert no error occurred\n+        assert no_error, \"Error occurred when mapping scatterplot with categorical hue using the current seaborn version\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..52f6ef5 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -347,7 +347,23 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n-def test_excinfo_for_later():\n+def test_excinfo_raises_message():\n+    import pytest\n+\n+    # This test ensures that str() on the pytest.raises context behaves as expected\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+\n+    # Test that str(excinfo) does not give the full exception message directly\n+    assert str(excinfo) != \"A\\nB\\nC\"\n+\n+    # Test that str(excinfo.value) gives the full exception message\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n+def test_excinfo_repr_str():\n+    excinfo = pytest.raises(ValueError, h)\n+    assert repr(excinfo) == \"<ExceptionInfo ValueError tblen=4>\"\n+    assert str(excinfo) == \"<ExceptionInfo ValueError tblen=4>\"\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..189dac4 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -404,6 +404,11 @@ class TestCustomConftests:\n         testdir.makepyfile(\"def test_x(): pass\")\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # Testing the short option for --collect-only\n+        result_short = testdir.runpytest(\"-C\")\n+        result_short.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # Testing the short option for --collect-only\n+        result_short = testdir.runpytest(\"-C\")\n+        result_short.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..2a97ab1 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -94,8 +94,14 @@ def missing_attr(c,\n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n \n-    def __init__(self, x: int) -> None:\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..2dbccc5 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -80,6 +80,30 @@ def test_Identity():\n     assert A*Im == A\n     assert In*A == A\n \n+def test_orthogonal_matrix_sum():\n+    from sympy import MatrixSymbol, Symbol, Sum, symbols, Q, assuming, refine\n+    # Set up symbols\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+\n+    # Assume M is orthogonal and calculate M.T * M\n+    e = None\n+    with assuming(Q.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+    # Test: Identity matrix check\n+    assert e[0, 0] == 1\n+    assert e[0, 1] == 0\n+    assert e[1, 0] == 0\n+    assert e[1, 1] == 1\n+\n+    # Test: Sum of the diagonal elements\n+    assert Sum(e[i, i], (i, 0, n-1)).doit() == n\n+\n+    # Test: Sum of all elements\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": ""
}