{
  "astropy__astropy-12907": "",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..6e9269f 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,13 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from .common import assert_almost_equal, assert_equal\n \n@@ -184,4 +189,52 @@ Col1      Col2 Col3 Col4\n  2.4 's worlds    2    2\n ==== ========= ==== ====\n \"\"\",\n-    )\n+    )\n+\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n+def test_write_without_header_rows():\n+    \"\"\"Test writing RST without header rows\"\"\"\n+    tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count, 'ints': [1, 2]})\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\")\n+    expected = [\n+        \"===== ======== ====\",\n+        \"wave response ints\",\n+        \"===== ======== ====\",\n+        \"350.0      0.7    1\",\n+        \"950.0      1.2    2\",\n+        \"===== ======== ====\"\n+    ]\n+    assert out.getvalue().splitlines() == expected\n+\n+def test_write_with_invalid_header_rows():\n+    \"\"\"Test writing RST with invalid header rows argument\"\"\"\n+    tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count, 'ints': [1, 2]})\n+    out = StringIO()\n+    try:\n+        tbl.write(out, format=\"ascii.rst\", header_rows=[\"invalid\"])\n+    except TypeError as e:\n+        assert \"unexpected keyword argument 'header_rows'\" in str(e)\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..a8babfd 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -42,8 +42,33 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert table2.meta[\"comments\"][0].startswith(\"WT -- hardness\")\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n+import pytest\n+from astropy.io.ascii.qdp import _read_table_qdp\n+\n+def test_lowercase_commands(tmp_path):\n+    \"\"\"Test that lowercase QDP commands are processed correctly.\"\"\"\n+    example_lowercase_qdp = \"\"\"\n+    ! Initial comment\n+    read serr 1 2\n+    ! Data Table\n+    1 0.5 1 0.5\n+    \"\"\"\n \n-def test_roundtrip(tmp_path):\n+    path = str(tmp_path / \"lowercase_test.qdp\")\n+\n+    with open(path, \"w\") as fp:\n+        fp.write(example_lowercase_qdp)\n+\n+    # Attempt to read the file. It should not raise an error.\n+    table = _read_table_qdp(path, table_id=0)\n+\n+    # Verify table structure and content\n+    assert table is not None\n+    assert len(table) == 1  # one row of data\n+    assert table['col1'][0] == 1.0\n+    assert table['col2'][0] == 0.5\n+    assert table['col3'][0] == 1.0\n+    assert table['col4'][0] == 0.5\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-6938": "",
  "django__django-10914": "",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..1913d2f 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,8 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\", \n+            \"trailingnewline\\u000A\"  # Testing for LF and Unicode newline\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +260,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..8fb6cde 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,7 +356,9 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n-    def test_non_string_content(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n         self.assertEqual(r.content, b'12345')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..f7f9a8b 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,4 +1,6 @@\n+\n from math import ceil\n+from django.db.models.deletion import Collector\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n@@ -464,7 +466,15 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a user instance, which has no dependencies.\n+        u = User.objects.create()\n+        # Ensure the user can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the user and check if the primary key is set to None.\n+        u.delete()\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..d685bca 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,14 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.db.utils import IntegrityError\n+from django.contrib.contenttypes.models import ContentType\n+from django.contrib.auth.models import Permission\n+from django.contrib.auth.management import create_permissions\n \n from .models import Proxy, UserProxy\n \n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..b84724c 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -22,7 +22,25 @@ from django.utils.autoreload import WatchmanUnavailable\n from .utils import on_macos_with_hfs\n \n \n+import sys\n+import os\n+\n class TestIterModulesAndFiles(SimpleTestCase):\n+    def test_main_module_is_resolved(self):\n+        \"\"\"\n+        Test that changes to the main module are tracked by the autoreloader.\n+        \"\"\"\n+        # Simulate the main module as if it were manage.py\n+        main_module = sys.modules['__main__']\n+        \n+        # Ensure the __file__ attribute is set to a valid pathlib.Path object.\n+        if not hasattr(main_module, '__file__'):\n+            main_module.__file__ = str(Path(__file__).parent / \"manage.py\")\n+        \n+        main_module_path = Path(main_module.__file__)\n+        \n+        # Assert the file is found by autoreload\n+        self.assertFileFound(main_module_path)\n     def import_and_cleanup(self, name):\n         import_module(name)\n         self.addCleanup(lambda: sys.path_importer_cache.clear())\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..a07f87a 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -134,6 +134,36 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n     def test_main_module_is_resolved(self):\n         main_module = sys.modules['__main__']\n+\n+    def test_path_with_embedded_null_bytes(self):\n+        paths_with_null_bytes = [\n+            'embedded_null_byte\\0.py',\n+            'di\\0rectory/embedded_null_byte.py',\n+            '/Userz/kez/path/to/\\0venv/lib/python3.6/asyncio'\n+        ]\n+        for path in paths_with_null_bytes:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+                \n+    def test_path_resolution_with_valid_and_invalid_paths(self):\n+        valid_path = '/Userz/kez/path/to/venv/lib/python3.6/asyncio/selector_events.py'\n+        invalid_path = '/path/that/does/not/exist/invalid.py'\n+        paths = [valid_path, invalid_path]\n+        expected_result = frozenset([Path(valid_path).resolve().absolute()])\n+\n+        self.assertEqual(\n+            autoreload.iter_modules_and_files((), frozenset(paths)),\n+            expected_result\n+        )\n+\n+    def test_module_without_spec_does_not_raise(self):\n+        # Test that modules without __spec__ do not raise errors\n+        module_without_spec = types.ModuleType('no_spec')\n+        result = autoreload.iter_modules_and_files((module_without_spec,), frozenset())\n+        self.assertEqual(result, frozenset())\n         self.assertFileFound(Path(main_module.__file__))\n \n     def test_main_module_without_file_is_not_resolved(self):\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..a8de43b 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -5,6 +5,8 @@ import re\n import sys\n import tempfile\n import threading\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from io import StringIO\n from pathlib import Path\n from unittest import mock\n@@ -239,6 +241,22 @@ class DebugViewTests(SimpleTestCase):\n \n \n class DebugViewQueriesAllowedTests(SimpleTestCase):\n+    def test_technical_404_converter_with_debug(self):\n+        # Enable DEBUG mode for this test\n+        with override_settings(DEBUG=True):\n+            with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+                response = self.client.get('/test-path/1/')\n+                self.assertContains(response, 'Page not found', status_code=404)\n+                self.assertContains(response, 'Technical details', status_code=404)\n+\n+    def test_technical_404_converter_without_debug(self):\n+        # Disable DEBUG mode for this test\n+        with override_settings(DEBUG=False):\n+            with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+                response = self.client.get('/test-path/1/')\n+                # The response should be generic and not contain technical details\n+                self.assertContains(response, 'Page not found', status_code=404)\n+                self.assertNotContains(response, 'Technical details')\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n",
  "django__django-11742": "",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..534852a 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -256,6 +256,21 @@ class WriterTests(SimpleTestCase):\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n+        \n+        class TextTranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(\n+            default=TextTranslatedEnum.GOOD,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+            max_length=128\n+        )\n+        serialized_value, _ = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            serialized_value,\n+            \"models.CharField(choices=[('Good', migrations.test_writer.TextTranslatedEnum['GOOD']), ('Bad', migrations.test_writer.TextTranslatedEnum['BAD'])], default=migrations.test_writer.TextTranslatedEnum['GOOD'], max_length=128)\"\n+        )\n \n         class BinaryEnum(enum.Enum):\n             A = b'a-value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..c75bebd 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,9 +1,12 @@\n+\n import unittest\n from datetime import datetime\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n+from unittest import mock\n+from datetime import timezone\n from django.utils.http import (\n     base36_to_int, escape_leading_slashes, http_date, int_to_base36,\n     is_safe_url, is_same_domain, parse_etags, parse_http_date, quote_etag,\n@@ -308,7 +311,29 @@ class ETagProcessingTests(unittest.TestCase):\n \n \n class HttpDateProcessingTests(unittest.TestCase):\n-    def test_http_date(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_years(self, mocked_datetime):\n+        # Test for parsing RFC850 with two-digit years correctly interpreted\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        \n+        # Mock current date for testing\n+        mocked_datetime.utcnow.return_value = datetime(2023, 11, 6, 8, 49, 37, tzinfo=timezone.utc)\n+\n+        # RFC850 dates with two-digit years\n+        tests = [\n+            ('Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            ('Friday, 10-Nov-75 08:49:37 GMT', datetime(1975, 11, 10, 8, 49, 37)),\n+            ('Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            ('Saturday, 01-Jan-00 00:00:00 GMT', datetime(2000, 1, 1, 0, 0, 0)),\n+            ('Thursday, 30-Dec-99 23:59:59 GMT', datetime(1999, 12, 30, 23, 59, 59)),\n+            ('Tuesday, 10-Nov-50 08:49:37 GMT', datetime(2050, 11, 10, 8, 49, 37)),\n+        ]\n+\n+        for rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..1882826 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -115,6 +115,12 @@ class ChoicesTests(SimpleTestCase):\n         self.assertEqual(Medal.labels, ['Gold', 'Silver', 'Bronze'])\n         self.assertEqual(Medal.values, ['GOLD', 'SILVER', 'BRONZE'])\n         self.assertEqual(Medal.names, ['GOLD', 'SILVER', 'BRONZE'])\n+    def test_str(self):\n+        # Test if str() on a TextChoices returns the value.\n+        for test_choice in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in test_choice:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(test_choice[member.name]), str(member.value))\n \n     def test_textchoices_containment(self):\n         self.assertIn(YearInSchool.FRESHMAN, YearInSchool)\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..b5c570d 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -162,6 +162,20 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(Whiz(c='').get_c_display(), '')        # Empty value\n         self.assertEqual(WhizDelayed(c=0).get_c_display(), 'Other')  # Delayed choices\n \n+    def test_overriding_FIELD_display(self):\n+        \"\"\"\n+        Test that overriding get_FIELD_display() works in Django 2.2+.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        # Create an instance of FooBar with foo_bar=1\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_get_FIELD_display_translated(self):\n         \"\"\"A translated display value is coerced to str.\"\"\"\n         val = Whiz(c=5).get_c_display()\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 7b8648d..6d016ee 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -68,7 +68,19 @@ class SimplifiedURLTests(SimpleTestCase):\n                     r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n                 )\n \n-    def test_path_lookup_with_inclusion(self):\n+    def test_optional_format_parameter_in_view_function(self):\n+        # This will test the route and view handling of optional 'format' parameter\n+        match = resolve('/module/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': None})\n+\n+        match = resolve('/module/html/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'html'})\n+\n+        match = resolve('/module/json/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'json'})\n         match = resolve('/included_urls/extra/something/')\n         self.assertEqual(match.url_name, 'inner-extra')\n         self.assertEqual(match.route, 'included_urls/extra/<extra>/')\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..cebc517 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,6 @@\n+\n+from django.test import TestCase\n+\n import pickle\n \n from django import forms\n@@ -147,8 +150,28 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+class InheritedChoicesDisplayTests(TestCase):\n+    def test_inherited_choices_display(self):\n+        \"\"\"\n+        Test get_FIELD_display() with inherited and overridden choices in models.\n+        \"\"\"\n+        class BaseModel(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'output1'), ('B', 'output2')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(BaseModel):\n+            foo = models.CharField(max_length=254, choices=[('A', 'output1'), ('B', 'output2'), ('C', 'output3')])\n+\n+        # Test cases to ensure correctness of get_field_foo_display()\n+        instance_a = ChildModel(foo='A')\n+        instance_b = ChildModel(foo='B')\n+        instance_c = ChildModel(foo='C')\n \n-class GetFieldDisplayTests(SimpleTestCase):\n+        self.assertEqual(instance_a.get_foo_display(), 'output1')\n+        self.assertEqual(instance_b.get_foo_display(), 'output2')\n+        self.assertEqual(instance_c.get_foo_display(), 'output3')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..02aefdf 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,7 +76,43 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('en', 'English'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_valid_variant_consistent_language_settings(self):\n+        tests = [\n+            # language + region.\n+            'fr-CA',\n+            'es-419',\n+            'de-at',\n+            # language + region + variant.\n+            'ca-ES-valencia',\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[('en', 'English')]\n+    )\n+    def test_invalid_sublanguage_without_base_language(self):\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        for tag in ['fr', 'fr-CA', 'fr-357']:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [\n+                    Error(msg, id='translation.E004'),\n+                ])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..12c0854 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -175,8 +175,42 @@ class UtilsTests(SimpleTestCase):\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n-\n-    def test_number_formats_display_for_field(self):\n+    from django.core.serializers.json import DjangoJSONEncoder\n+    import json\n+\n+    def test_json_display_for_field(self):\n+        # Original tests\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            # This is a known invalid JSON example, should be gracefully handled.\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+        \n+        # Additional tests for covering empty JSON, nested JSON, and boolean values\n+        new_tests = [\n+            ({}, '{}'),\n+            (None, self.empty_value),\n+            ({\"nested\": {\"json\": {\"structure\": [\"a\", \"b\", 1, 2, 3]}}}, '{\"nested\": {\"json\": {\"structure\": [\"a\", \"b\", 1, 2, 3]}}}'),\n+            (True, 'true'),\n+            (False, 'false'),\n+            (0, '0'),\n+            (1, '1'),\n+        ]\n+\n+        for value, display_value in new_tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..bdfad2a 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -17,8 +19,74 @@ def get_connection_copy():\n     )\n     return test_connection\n \n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_multiple_references(self):\n+        # Test multiple foreign key references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"related_objects\": [1]}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 2}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj1 = Object.objects.get(pk=1)\n+        obj2 = Object.objects.get(pk=2)\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj_ref.obj, obj2)\n+        self.assertIn(obj1, obj2.related_objects.all())\n+        self.assertEqual(obj1.related_objects.count(), 0)\n \n-class TestDbSignatureTests(SimpleTestCase):\n+    def test_no_foreign_key(self):\n+        # Test deserialization with no foreign key involved.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 3,\n+                \"fields\": {\"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=3)\n+        self.assertEqual(obj.related_objects.count(), 0)\n     def test_default_name(self):\n         # A test db name isn't set.\n         prod_name = 'hodor'\n",
  "django__django-12497": "",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..9294692 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,7 +1249,56 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n-    def test_request_meta_filtering(self):\n+    def test_cleanse_setting_recurses_in_nested_structures(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'foo': 'value',\n+            'secret': 'value',\n+            'token': 'value',\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+            ],\n+        }\n+        cleansed = {\n+            'foo': 'value',\n+            'secret': reporter_filter.cleansed_substitute,\n+            'token': reporter_filter.cleansed_substitute,\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': reporter_filter.cleansed_substitute},\n+                {'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+            ],\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..9a902f9 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,7 +685,30 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n-    def test_fast_delete_empty_no_update_can_self_select(self):\n+    def test_zero_deletes_for_models_with_no_fk(self):\n+        \"\"\"Test zero deletes for simple models without foreign keys.\"\"\"\n+        # Assume BlockLibrary is a model without foreign keys\n+        from my_app.models import BlockLibrary\n+\n+        # Ensure no BlockLibrary instances exist\n+        BlockLibrary.objects.all().delete()\n+\n+        # Attempt to delete again, expecting a consistent result\n+        deleted, deleted_objs = BlockLibrary.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'my_app.BlockLibrary': 0})\n+\n+    def test_zero_deletes_for_models_with_fk(self):\n+        \"\"\"Test zero deletes for models with foreign keys.\"\"\"\n+        from my_app.models import FileAccess\n+\n+        # Ensure no FileAccess instances exist\n+        FileAccess.objects.all().delete()\n+\n+        # Attempt to delete again, expecting an empty dict result for models with FK\n+        deleted, deleted_objs = FileAccess.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {})\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n         `no_update_can_self_select` feature should work even if the specified\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..6868402 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -94,6 +94,52 @@ class ASGITest(SimpleTestCase):\n             ),\n         )\n         await communicator.send_input({'type': 'http.request'})\n+\n+    async def test_static_file_response_async(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/async-file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'async-file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"async-file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_non_existing_static_file_async(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/does-not-exist.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        \n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], b'')\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n         response_start = await communicator.receive_output()\n         self.assertEqual(response_start['type'], 'http.response.start')\n         self.assertEqual(response_start['status'], 200)\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..37ff1a9 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,18 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # New test cases to cover the issue of stripping leading/trailing dashes and underscores\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('_leading_underscores', 'leading-underscores', False),\n+            ('_leading-and-trailing_', 'leading-and-trailing', False),\n+            ('trailing-underscores___', 'trailing-underscores', False),\n+            ('---leading-dashes', 'leading-dashes', False),\n+            ('leading-and-trailing-dashes---', 'leading-and-trailing-dashes', False),\n+            ('trailing-dashes---', 'trailing-dashes', False),\n+            ('---complex_case__', 'complex-case', False),\n+            ('___', '', False),  # Edge case of only underscores\n+            ('---', '', False),  # Edge case of only dashes\n+            ('', '', False),  # Edge case of an empty string\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..c7b4067 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -86,6 +87,13 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.difference(qs2).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertSequenceEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n     def test_union_with_empty_qs(self):\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.none()\n@@ -313,4 +321,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..2ae3463 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -5,6 +5,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.checks import Error\n from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n+from django.test import TestCase\n from django.test import SimpleTestCase\n from django.test.utils import isolate_apps\n \n@@ -347,4 +348,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..7dcdb14 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,6 +45,25 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n+    from django.contrib.auth.models import User\n+    from admin_views.models import Article\n+\n+    def test_available_apps_models_in_context(self):\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n+\n+        # admin_views.Article\n+        admin_views = apps[0]\n+        article = admin_views['models'][0]\n+        self.assertEqual(article['object_name'], 'Article')\n+        self.assertEqual(article['model'], Article)\n+\n+        # auth.User\n+        auth = apps[1]\n+        user = auth['models'][0]\n+        self.assertEqual(user['object_name'], 'User')\n+        self.assertEqual(user['model'], User)\n+\n     def test_available_apps(self):\n         ctx = self.ctx\n         apps = ctx['available_apps']\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..b4e9622 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..f65e63e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n@@ -884,6 +886,15 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple_varied(self):\n+        \"\"\"\n+        Testing range filter with a different named tuple to verify varied usage.\n+        \"\"\"\n+        SalaryRange = namedtuple('SalaryRange', ['low', 'high'])\n+        query_result = Company.objects.filter(\n+            num_employees__range=SalaryRange(low=1, high=100),\n+        )\n+        self.assertSequenceEqual(query_result, [self.c5])\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..e401f8f 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,34 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+import os\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+import os\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+import os\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+import os\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..a9c95e4 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -29,15 +30,95 @@ class ShellCommandTestCase(SimpleTestCase):\n             stdin.seek(0)\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n+    \n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n+    \n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n         select.return_value = ([], [], [])\n@@ -49,4 +130,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..398f5af 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,7 +1013,23 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_verbose_name_default_as_plural(self):\n+        class InlineWithoutPlural(TabularInline):\n+            model = Profile\n+            verbose_name = 'Profile Entry'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            InlineWithoutPlural,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        # Check that verbose_name used as plural if plural not specified\n+        self.assertContains(response, '<h2>Profile Entry</h2>')\n+        self.assertContains(response, 'Add another Profile Entry')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..ea87293 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -594,6 +594,11 @@ class TestQuerying(TestCase):\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n         )\n+        # New test case to ensure __isnull=True does not match keys with JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n \n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..4277b76 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -165,12 +165,23 @@ class DispatcherTests(SimpleTestCase):\n         def fails(val, **kwargs):\n             raise ValueError('this')\n         a_signal.connect(fails)\n-        result = a_signal.send_robust(sender=self, val=\"test\")\n-        err = result[0][1]\n-        self.assertIsInstance(err, ValueError)\n-        self.assertEqual(err.args, ('this',))\n-        self.assertTrue(hasattr(err, '__traceback__'))\n-        self.assertIsInstance(err.__traceback__, TracebackType)\n+        with self.assertLogs('django.dispatch', 'ERROR') as cm:\n+            result = a_signal.send_robust(sender=self, val=\"test\")\n+            err = result[0][1]\n+            self.assertIsInstance(err, ValueError)\n+            self.assertEqual(err.args, ('this',))\n+            self.assertTrue(hasattr(err, '__traceback__'))\n+            self.assertIsInstance(err.__traceback__, TracebackType)\n+\n+            log_record = cm.records[0]\n+            self.assertEqual(\n+                log_record.getMessage(),\n+                'Error calling fails in Signal.send_robust() (this)',\n+            )\n+            self.assertIsNotNone(log_record.exc_info)\n+            _, exc_value, _ = log_record.exc_info\n+            self.assertIsInstance(exc_value, ValueError)\n+            self.assertEqual(str(exc_value), 'this')\n         a_signal.disconnect(fails)\n         self.assertTestIsClean(a_signal)\n \n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..02111ca 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -401,6 +401,15 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             pass\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+    def test_explicit_inherited_pk_no_warning(self):\n+        class Parent(models.Model):\n+            explicit_id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        # Expecting an empty list means no warnings should be raised for this case.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n     def test_explicit_pk(self):\n         class Model(models.Model):\n@@ -414,4 +423,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..e0ae20f 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -272,7 +272,6 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n \n         class SomeForm(Form):\n             field = ModelMultipleChoiceField(ChoiceModel.objects.all())\n-\n         f = SomeForm({'field': ['<script>']})\n         self.assertHTMLEqual(\n             t.render(Context({'form': f})),\n@@ -281,6 +280,44 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+class TestCase:\n+    pass\n+\n+class AssertFormErrorsMixin:\n+    def assertFormErrors(self, expected, clean_method, value):\n+        try:\n+            clean_method(value)\n+            assert False, f\"Expected ValidationError with message: {expected}\"\n+        except ValidationError as e:\n+            assert e.messages == expected\n+\n+class ChoiceModel:\n+    @staticmethod\n+    def objects():\n+        class Manager:\n+            @staticmethod\n+            def create(pk, name):\n+                return\n+\n+            @staticmethod\n+            def all():\n+                return\n+\n+        return Manager()\n+\n+class ModelChoiceField:\n+    def __init__(self, queryset, error_messages=None):\n+        self.queryset = queryset\n+        self.error_messages = error_messages or {}\n+\n+    def clean(self, value):\n+        valid_values = ['1', '2', '3']\n+        if value not in valid_values:\n+            raise ValidationError(\n+                [self.error_messages.get('invalid_choice', 'Invalid choice')]\n+            )\n+\n+from django.forms import ValidationError\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n@@ -307,4 +344,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..be37cd2 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,9 +1,19 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n \n class QTests(SimpleTestCase):\n-    def test_combine_and_empty(self):\n+    def test_issue_pickle_with_keys_or_operator(self):\n+        # Verify that using dict_keys with | operator on Q objects does not raise an error\n+        q = Q(x__in={}.keys())\n+        try:\n+            result = q | Q()\n+            self.assertEqual(result, q)\n+            result = Q() | q\n+            self.assertEqual(result, q)\n+        except TypeError as e:\n+            self.fail(f\"TypeError occurred: {e}\")\n         q = Q(x=1)\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..d7f855a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -25,6 +25,7 @@ from django.db.models.functions import (\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.db.models import Q, Exists, OuterRef\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n@@ -794,6 +795,25 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n+    def test_q_and_exists_commutativity(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Check commutativity for AND and OR operations\n+        test_cases = [\n+            (Q(salary__gte=30) & Exists(is_ceo), Exists(is_ceo) & Q(salary__gte=30)),\n+            (Q(salary__lt=15) | Exists(is_poc), Exists(is_poc) | Q(salary__lt=15)),\n+        ]\n+\n+        for q_exists, exists_q in test_cases:\n+            with self.subTest(q_and_exists=q_exists, exists_and_q=exists_q):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(q_exists),\n+                    Employee.objects.filter(exists_q),\n+                )\n+\n     def test_boolean_expression_combined(self):\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..8ff69ac 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1127,8 +1127,29 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[0], func)\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n-\n-    def test_resolver_match_on_request(self):\n+    \n+    def test_functools_partial_repr(self):\n+        def sample_view(request, arg1, arg2):\n+            pass\n+\n+        partial_func = functools.partial(sample_view, 'arg1_value', 'arg2_value')\n+        \n+        match = ResolverMatch(\n+            func=partial_func,\n+            args=(),\n+            kwargs={},\n+            url_name='sample_view',\n+            app_names=[],\n+            namespaces=[],\n+            route='sample/route/'\n+        )\n+        \n+        expected_repr = (\n+            \"ResolverMatch(func=__main__.sample_view, args=(), kwargs={}, \"\n+            \"url_name=sample_view, app_names=[], namespaces=[], route=sample/route/)\"\n+        )\n+        actual_repr = repr(match)\n+        self.assertEqual(actual_repr, expected_repr)\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n@@ -1146,6 +1167,8 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..bc85e3d 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2206,7 +2206,21 @@ class StartApp(AdminScriptTestCase):\n             \"another directory.\"\n         )\n \n-    def test_overlaying_app(self):\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test that creating an app with a directory name containing a trailing slash does not result in an error.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+\n+        # Run the django-admin startapp command with a trailing slash in the directory path\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+\n+        # Validate that there is no error output\n+        self.assertNoOutput(err)\n+\n+        # Check that the 'apps.py' file exists within the specified directory\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n         # Use a subdirectory so it is outside the PYTHONPATH.\n         os.makedirs(os.path.join(self.test_dir, 'apps/app1'))\n         self.run_django_admin(['startapp', 'app1', 'apps/app1'])\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..4493b2f 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,35 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_widget_label(self):\n+        \"\"\"\n+        ReadOnlyPasswordHashWidget doesn't contain a 'for' attribute in the\n+        <label> because it doesn't have any labelable elements.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+        \n+        # Verify that the label does not point to a non-existent element\n+        bound_field = TestForm()['hash_field']\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n+    def test_readonly_password_hash_widget_html(self):\n+        \"\"\"\n+        Check that the ReadOnlyPasswordHashWidget renders the expected HTML\n+        without a labelable element.\n+        \"\"\"\n+        class CustomTestForm(forms.Form):\n+            custom_hash_field = ReadOnlyPasswordHashField(label='Custom Hash')\n+\n+        bound_field = CustomTestForm()['custom_hash_field']\n+        expected_html = (\n+            '<div class=\"readonly\">'\n+            '<strong class=\"help-text\">This is a password hash.</strong>'\n+            '</div>'\n+        )\n+        self.assertIn(expected_html, str(bound_field))\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..3a802f4 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,37 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_serialize_custom_field_with_mixin(self):\n+        \"\"\"\n+        Test that makemigrations serializes migrations with a custom field and mixin.\n+        \"\"\"\n+        fields = {\n+            'name': app.models.MyField(primary_key=True)\n+        }\n+        \n+        operations = [\n+            migrations.CreateModel(\n+                name='MyModel',\n+                fields=[('name', app.models.MyField(primary_key=True))],\n+                options={\n+                    'abstract': False,\n+                },\n+                bases=(app.models.MyMixin, models.Model),\n+            ),\n+        ]\n+        \n+        # Simulate the Migration object for testing\n+        migration = migrations.Migration('initial', 'app')\n+        migration.operations = operations\n+        \n+        # Serialize the migration\n+        writer = MigrationWriter(migration)\n+        serialized_migration = writer.serialize(fields)\n+        \n+        # the 'models.TextField' should be correctly handled\n+        self.assertIn(\"from django.db import models\", serialized_migration)\n+        self.assertIn(\"app.models.MyField(primary_key=True)\", serialized_migration)\n+        self.assertIn(\"app.models.MyMixin\", serialized_migration)\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..97012d5 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -9,6 +9,9 @@ from .models import (\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n     Relationship, SymmetricalFriendship,\n )\n+from django.db import models\n+from django.core.checks import Error\n+from .models import Person, Event, Invitation, PersonChild\n \n \n class M2mThroughTests(TestCase):\n@@ -31,7 +34,23 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n-    def test_get_on_intermediate_model(self):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        # Create a PersonChild instance for testing inherited ManyToManyField\n+        person_child = PersonChild.objects.create(name=\"Child Name\")\n+        \n+        # Verifying the through_fields are maintained as a list and are properly hashable\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        \n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+\n+        # Test hashing to ensure hashability is maintained\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n+\n+        # Add additional case for proxy model checking\n+        errors = person_child._meta.check()\n+        self.assertFalse(errors, f\"Unexpected model validation errors: {errors}\")\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n         queryset = Membership.objects.get(person=self.jane, group=self.rock)\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..e292aff 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -281,8 +281,43 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n-        request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n+import json\n+from django.urls import path\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.test import RequestFactory\n+...\n+\n+class AutocompleteJsonViewTests(SimpleTestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.url = '/admin/autocomplete/'\n+\n+    def test_serialize_result_with_additional_field(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return super().serialize_result(obj, to_field_name) | {'extra_field': obj.extra_field}\n+\n+        # Assume these objects exist with extra_field attribute\n+        obj1 = Question.objects.create(question='Question 1', extra_field='Extra 1')\n+        obj2 = Question.objects.create(question='Question 2', extra_field='Extra 2')\n+\n+        # Use factory to simulate a GET request\n+        request = self.factory.get(self.url, {'term': 'question'})\n+        request.user = self.superuser\n+        \n+        # Using the custom view to handle the request\n+        response = CustomAutocompleteJsonView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        # Check if the response includes the additional 'extra_field'\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(obj1.pk), 'text': obj1.question, 'extra_field': 'Extra 1'},\n+                {'id': str(obj2.pk), 'text': obj2.question, 'extra_field': 'Extra 2'},\n+            ],\n+            'pagination': {'more': False},\n+        })\n         request.user = self.superuser\n         with model_admin(Question, PKOrderingQuestionAdmin):\n             response = AutocompleteJsonView.as_view(**self.as_view_args)(request)\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..d0e8da2 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,10 +426,65 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n+from functools import partial\n+\n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n+    def test_wrapper_assignments_partial(self):\n+        \"\"\"\n+        @method_decorator should correctly handle partial objects.\n+        \"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        partial_method = partial(Test().method)\n+        partial_method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_wrapper_assignments_preserved(self):\n+        \"\"\"\n+        @method_decorator should preserve wrapper assignments when method inherits them.\n+        \"\"\"\n+        original_name = None\n+        original_module = None\n+\n+        def another_decorator(func):\n+            @wraps(func)\n+            def wrapper(*args, **kwargs):\n+                nonlocal original_name, original_module\n+                original_name = getattr(func, '__name__', None)\n+                original_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return wrapper\n+\n+        class AnotherTest:\n+            @another_decorator\n+            def original_method(self):\n+                pass\n+\n+        another_test_instance = AnotherTest()\n+        another_test_instance.original_method()\n+\n+        self.assertEqual(original_name, 'original_method')\n+        self.assertEqual(original_module, another_test_instance.original_method.__module__)\n+\n     def test_deny_decorator(self):\n         \"\"\"\n         Ensures @xframe_options_deny properly sets the X-Frame-Options header.\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..0837d06 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -340,8 +341,25 @@ class ModelChoiceFieldTests(TestCase):\n <div><label><input type=\"checkbox\" name=\"name\" value=\"%d\" data-slug=\"third-test\">Third</label></div>\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n-\n-    def test_choices_not_fetched_when_not_rendering(self):\n+    \n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Test hashing the same value should give the same hash\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        \n+        # Test hashing different values should give different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+        \n+        # Additional test case: Ensure ModelChoiceIteratorValue can be used in a dictionary.\n+        test_dict = {value_1: 'test1'}\n+        self.assertIn(value_1, test_dict)\n+        self.assertEqual(test_dict[value_1], 'test1')\n+\n+        # Additional test case: Attempt to access a non-existent key.\n+        with self.assertRaises(KeyError):\n+            _ = test_dict[value_2]\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..8cd3d27 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -792,6 +792,28 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Pony.objects.count(), 2)\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n+    def test_rename_model_with_db_table_noop_postgres(self):\n+        # This tests the behavior in a Postgres-like environment\n+        app_label = 'test_rmwdbtn_pg'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider_pg'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n \n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..ce2c6b7 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -135,8 +135,21 @@ class MultiValueFieldTest(SimpleTestCase):\n     def test_disabled_has_changed(self):\n         f = MultiValueField(fields=(CharField(), CharField()), disabled=True)\n         self.assertIs(f.has_changed(['x', 'x'], ['y', 'y']), False)\n-\n-    def test_form_as_table(self):\n+    def test_multivaluefield_label_without_index(self):\n+        # This test validates that MultiWidget's <label> element does not append an unnecessary index.\n+        class TestForm(Form):\n+            datetime = SplitDateTimeField(widget=SplitDateTimeWidget())\n+        \n+        form = TestForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_datetime_0\">Datetime:</label></th>\n+            <td><input type=\"text\" name=\"datetime_0\" id=\"id_datetime_0\" required>\n+            <input type=\"text\" name=\"datetime_1\" id=\"id_datetime_1\" required>\n+            </td></tr>\n+            \"\"\"\n+        )\n         form = ComplexFieldForm()\n         self.assertHTMLEqual(\n             form.as_table(),\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..26766aa 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -107,7 +107,18 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n                 with self.assertRaisesMessage(ValidationError, msg):\n                     f.clean(value)\n \n-    def test_urlfield_clean_required(self):\n+    def test_urlfield_clean_valueerror_cases(self):\n+        f = URLField()\n+        tests = [\n+            '////]@N.AN',  # Original problematic input.\n+            'ftp://[::1]invalid',  # Invalid IPv6 format.\n+            'http://[v4.100]',  # Incorrect IPv6 literal usage.\n+        ]\n+        msg = \"'Enter a valid URL.'\"\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(value)\n         f = URLField()\n         msg = \"'This field is required.'\"\n         with self.assertRaisesMessage(ValidationError, msg):\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..44a14ad 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -12,6 +12,7 @@ from django.db.models.functions import (\n     Coalesce, ExtractYear, Floor, Length, Lower, Trim,\n )\n from django.test import TestCase, skipUnlessDBFeature\n+from django.db.models import BooleanField, Count, ExpressionWrapper, Q, Sum\n from django.test.utils import register_lookup\n \n from .models import (\n@@ -197,7 +198,25 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n-    def test_empty_expression_annotation(self):\n+    def test_full_expression_annotation(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_full_expression_annotation_with_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    def test_aggregate_over_full_expression_annotation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n         )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..fb683d8 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,9 +1,11 @@\n+\n import json\n import random\n \n from django.conf import settings\n from django.contrib.messages import constants\n from django.contrib.messages.storage.base import Message\n+from django.utils.safestring import SafeData, mark_safe\n from django.contrib.messages.storage.cookie import (\n     CookieStorage, MessageDecoder, MessageEncoder,\n )\n@@ -143,7 +145,19 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_encode_decode_extra_tags(self):\n+        \"\"\"\n+        Test that extra_tags=\"\" is preserved as \"\" and not converted to None\n+        after encoding and decoding.\n+        \"\"\"\n+        for extra_tags in ['', None, 'some tags']:\n+            with self.subTest(extra_tags=extra_tags):\n+                message = Message(constants.DEBUG, 'Test message', extra_tags=extra_tags)\n+                encoder = MessageEncoder()\n+                decoder = MessageDecoder()\n+                encoded_message = encoder.encode(message)\n+                decoded_message = decoder.decode(encoded_message)\n+                self.assertEqual(decoded_message.extra_tags, extra_tags)\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..1d4d606 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -74,7 +74,18 @@ class TemplateReloadTests(SimpleTestCase):\n             'BACKEND': 'django.template.backends.django.DjangoTemplates',\n         }]\n     )\n-    def test_template_dirs_normalized_to_paths(self):\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [ROOT],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_autoreload_with_base_dir_in_template_dirs(self, mock_reset):\n+        # Simulate a file change in the directory to see if it triggers reload\n+        template_path = ROOT / 'some_template.html'\n+        self.assertTrue(autoreload.template_changed(None, template_path))\n+        mock_reset.assert_called_once()\n         self.assertSetEqual(\n             autoreload.get_template_directories(),\n             {\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..9a61cc2 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,13 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty If-Modified-Since header does not raise an exception\n+        and handles it gracefully.\n+        \"\"\"\n+        mtime = 1343416141.107817\n+        self.assertTrue(was_modified_since(\"\", mtime))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..a54e5cf 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -8,6 +9,9 @@ from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n+from argparse import ArgumentDefaultsHelpFormatter\n+from django.core.management import call_command\n+from io import StringIO\n from django.core.management.utils import (\n     find_command,\n     get_random_secret_key,\n@@ -405,7 +409,26 @@ class CommandTests(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, msg):\n             management.call_command(\"subparser_dest\", subcommand=\"foo\", bar=12)\n \n-    def test_create_parser_kwargs(self):\n+    def test_custom_formatter_help_output(self):\n+        \"\"\"Test that the custom formatter preserves newlines and indentation in command help.\"\"\"\n+        class SampleCommand(BaseCommand):\n+            help = (\n+                \"Import a contract from tzkt.\\n\"\n+                \"Example usage:\\n\"\n+                \"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+            )\n+            def add_arguments(self, parser):\n+                parser.add_argument('blockchain')\n+                parser.add_argument('target')\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        out = StringIO()\n+        management.call_command(SampleCommand(), '--help', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\"Import a contract from tzkt.\\nExample usage:\\n\", output)\n+        self.assertIn(\"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\", output)\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = \"some epilog text\"\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..21d6d02 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,11 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+import json\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -211,7 +214,33 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_with_data(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                if isinstance(o, dict) and \"greet\" in o:\n+                    return json.dumps({\"message\": \"Hi \" + o[\"greet\"]})\n+                return super().encode(o)\n+\n+        self.assertHTMLEqual(\n+            json_script({\"greet\": \"Alice\"}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"message\": \"Hi Alice\"}</script>',\n+        )\n+\n+    def test_json_script_with_default_encoder(self):\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..1670e05 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -142,7 +142,40 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             [self.error_same_tags],\n         )\n \n-    def test_template_tags_with_same_library_name(self):\n+    def test_no_conflict_when_different_apps_specify_same_tags(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                {\n+                    \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+                    \"OPTIONS\": {\n+                        \"libraries\": {\n+                            \"unique_tag_1\": \"check_framework.template_test_apps.same_tags_app_1.templatetags.same_tags\",\n+                            \"unique_tag_2\": \"check_framework.template_test_apps.same_tags_app_2.templatetags.same_tags\",\n+                        }\n+                    },\n+                },\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\",\n+            \"check_framework.template_test_apps.same_tags_app_2\",\n+        ]\n+    )\n+    def test_same_name_conflict_among_installed_apps_and_template(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"conflicting_tags\", \"same_tags_app_2.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [self.error_same_tags],\n+            )\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n@@ -206,4 +239,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..f9c6159 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,10 +395,24 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n-    def test_eq(self):\n+    def test_select_related_only_on_proxy_model(self):\n+        \"\"\"\n+        Test select_related followed by only() on a proxy model to ensure it doesn't crash.\n+        \"\"\"\n+        proxy_instance = ProxyCustomModel.objects.create(name=\"Test Proxy\")\n+        another_instance = AnotherModel.objects.create(custom=proxy_instance)\n+        \n+        # Attempt to optimize the query by selecting related fields and only loading necessary fields\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        \n+        # This should not raise an exception and should return the correct instance\n+        self.assertEqual(qs.get(), another_instance)\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from .models import ProxyCustomModel, AnotherModel\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..8c09e15 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -154,7 +154,14 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n-            ([\"psql\", \"dbname\", \"--help\"], None),\n+            ([\"psql\", \"--help\", \"dbname\"], None),\n+        )\n+\n+    def test_additional_parameters_precede_dbname(self):\n+        # Checking that additional psql parameters precede the database name.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n         )\n \n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n@@ -183,4 +190,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..85a6286 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,6 +1901,32 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.test import TestCase, override_settings, ignore_warnings\n+        from django.forms.formsets import formset_factory, BaseFormSet\n+        from django.forms import ChoiceForm\n+\n+class ManagementFormDeprecationTests(TestCase):\n+    \n+    @ignore_warnings(category=RemovedInDjango50Warning)\n+    def test_no_management_form_deprecation_warning(self):\n+        with isolate_lru_cache(get_default_renderer), self.settings(\n+            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+        ):\n+            ChoiceFormSet = formset_factory(ChoiceForm, formset=BaseFormSet)\n+            formset = ChoiceFormSet()\n+            # Rendering the management form should not raise a deprecation warning\n+            str(formset.management_form)\n+\n+    def test_form_deprecation_warning(self):\n+        with isolate_lru_cache(get_default_renderer), self.settings(\n+            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+        ), self.assertRaisesMessage(\n+            RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        ):\n+            ChoiceFormSet = formset_factory(ChoiceForm)\n+            formset = ChoiceFormSet()\n+            # Rendering the formset itself should raise a deprecation warning\n+            str(formset)\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1935,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..01093d4 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -179,6 +179,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n \n+    def test_empty_permitted_ignored_empty_form_true(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        # Ensure that empty_form ignores empty_permitted and defaults to True\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_ignored_empty_form_false(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        # Ensure that empty_form ignores empty_permitted and defaults to True\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n     def test_formset_validation(self):\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..132182a 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -6,7 +7,14 @@ from django.utils.numberformat import format as nformat\n \n \n class TestNumberFormat(SimpleTestCase):\n-    def test_format_number(self):\n+    def test_empty_string_and_none(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_zero_and_negative(self):\n+        self.assertEqual(nformat(0, \".\"), \"0\")\n+        self.assertEqual(nformat(-0, \".\"), \"0\")  # Special case: negative zero\n+        self.assertEqual(nformat(\"-0\", \".\"), \"0\")\n         self.assertEqual(nformat(1234, \".\"), \"1234\")\n         self.assertEqual(nformat(1234.2, \".\"), \"1234.2\")\n         self.assertEqual(nformat(1234, \".\", decimal_pos=2), \"1234.00\")\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..0af10ac 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -26,6 +27,8 @@ from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n \n+from django.urls import reverse\n+import urllib.parse\n from .models.custom_user import (\n     CustomUser,\n     CustomUserWithoutIsActiveField,\n@@ -881,7 +884,44 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_help_text_format(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        # Expect the url to be formatted correctly\n+        expected_text = (\n+            \"Raw passwords are not stored, so there is no way to see this \"\n+            \"user\u2019s password, but you can change the password using \"\n+            '<a href=\"../../{}/password/\">this form</a>.'\n+        ).format(user.pk)\n+        self.assertEqual(password_help_text, expected_text)\n+\n+    def test_password_help_text_no_instance(self):\n+        form = UserChangeForm()\n+        password_help_text = form.fields[\"password\"].help_text\n+        # When no instance is provided, it should not format the URL with pk\n+        self.assertIn('<a href=\"../password/\">this form</a>', password_help_text)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..f043b30 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,24 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n-\n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+class CallableNoItemsTests(SitemapTestsBase):\n+    def test_callable_lastmod_no_items(self):\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(response.content.decode(), expected_content_index)\n+        \n+    def test_callable_lastmod_with_items(self):\n+        response = self.client.get(\"/callable-lastmod-items/index.xml\")\n+        self.assertIn(\"Last-Modified\", response)\n+        \n+    def test_non_callable_lastmod_no_items(self):\n+        response = self.client.get(\"/non-callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..d77f859 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,10 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock, TestCase\n+from django.test import override_settings\n+from django.core.cache import cache\n import io\n import os\n import pickle\n@@ -1755,7 +1759,27 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n-    def test_empty_cache_file_considered_expired(self):\n+    def test_has_key_race_handling(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_has_key_when_file_is_deleted_during_check(self):\n+        # Simulate a scenario where the file exists but is deleted just before opening\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        # Mock os.path.exists to always return True initially and then False on the next call\n+        with mock.patch(\"os.path.exists\", side_effect=[True, False]), \\\n+             mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_not_called()\n+\n+    def test_has_key_with_no_race_condition(self):\n+        # Test normal behavior without race condition\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        # Ensure the key still exists right after adding\n+        with mock.patch.object(cache, '_is_expired', return_value=False):\n+            self.assertIs(cache.has_key(\"key\"), True)\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n             fh.write(b\"\")\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..c7da0e5 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,41 @@\n+\n+class AdminTemplateTagsTest(AdminViewBasicTestCase):\n+    ...\n+\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # Create a user with only 'change' permission.\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Create a user with both 'add' and 'change' permissions.\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -5,6 +43,8 @@ from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..147cfc8 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -27,6 +28,14 @@ class JoinTests(SimpleTestCase):\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n     # Joining with unsafe joiners doesn't result in unsafe strings.\n+\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off\", {\"some_list\": some_list, \"some_var\": some_var})\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +87,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..0a14a2d 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -569,7 +569,47 @@ class BulkCreateTests(TestCase):\n                 unique_fields=[\"big_auto_fields\"],\n             )\n \n-    def _test_update_conflicts_two_fields(self, unique_fields):\n+    @skipUnlessDBFeature(\"can_return_rows_from_bulk_insert\")\n+    def test_bulk_create_with_update_conflicts_returns_ids(self):\n+        TwoFields.objects.bulk_create(\n+            [\n+                TwoFields(f1=1, f2=1, name=\"a\"),\n+                TwoFields(f1=2, f2=2, name=\"b\"),\n+            ]\n+        )\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"c\"),\n+            TwoFields(f1=2, f2=2, name=\"d\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"f1\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n+        UpsertConflict.objects.bulk_create(\n+            [\n+                UpsertConflict(number=1, rank=1, name=\"John\"),\n+                UpsertConflict(number=2, rank=2, name=\"Mary\"),\n+            ]\n+        )\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=3, name=\"Steve\"),\n+            UpsertConflict(number=2, rank=2, name=\"Olivia\"),\n+        ]\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"number\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n         TwoFields.objects.bulk_create(\n             [\n                 TwoFields(f1=1, f2=1, name=\"a\"),\n@@ -816,4 +856,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..7b74dfa 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -468,6 +468,23 @@ class WriterTests(SimpleTestCase):\n                     ),\n                 )\n \n+    def test_serialize_nested_class_method(self):\n+        class SampleModel(models.Model):\n+            class NestedClass:\n+                @classmethod\n+                def nested_method(cls):\n+                    return 'nested method'\n+\n+        expected_output = (\n+            \"migrations.test_writer.WriterTests.\"\n+            \"SampleModel.NestedClass.nested_method\",\n+            {\"import migrations.test_writer\"},\n+        )\n+        self.assertSerializedResultEqual(\n+            SampleModel.NestedClass.nested_method,\n+            expected_output\n+        )\n+\n     def test_serialize_uuid(self):\n         self.assertSerializedEqual(uuid.uuid1())\n         self.assertSerializedEqual(uuid.uuid4())\n@@ -1032,4 +1049,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..4166e02 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -496,7 +496,19 @@ def test_keymaps():\n         assert isinstance(mpl.rcParams[k], list)\n \n \n-def test_rcparams_reset_after_fail():\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib._pylab_helpers import Gcf\n+\n+def test_no_backend_reset_rccontext():\n+    fig1 = plt.figure()\n+    plt.close(fig1)  # Close this to focus on the next part\n+    with rc_context():\n+        fig2 = plt.figure()\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n+    assert before == after, '\\n' + before + '\\n' + after\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..a596ba4 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -9,6 +9,7 @@ from matplotlib.backend_bases import MouseButton\n from matplotlib import cm\n from matplotlib import colors as mcolors\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n+from matplotlib.testing.decorators import check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n@@ -21,7 +22,17 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d_axes(fig_test, fig_ref):\n+    # Create a subplot with 3D projection in the test figure\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)  # Set the 3D axis to invisible\n+    \n+    # Create a subplot with 3D projection in the reference figure\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.scatter(1, 1, 1)\n+    ax_ref.set_visible(True)  # Keep this one visible for comparison\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..4a9764e 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -255,8 +255,27 @@ def test_linedash():\n \n     assert buf.tell() > 0\n \n+import io\n \n-def test_no_duplicate_definition():\n+def test_empty_line_in_annotation():\n+    \"\"\"Test saving figure with annotation that has an empty line.\"\"\"\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='\\nEmpty Line Test', xy=(0.5, 0.5))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n+    assert buf.tell() > 0\n+    \n+def test_empty_line_as_title():\n+    \"\"\"Test saving figure with title containing an empty line.\"\"\"\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('\\nEmpty Line Title')\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n+    assert buf.tell() > 0\n \n     fig = Figure()\n     axs = fig.subplots(4, 4, subplot_kw=dict(projection=\"polar\"))\n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..16e1451 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -653,6 +653,15 @@ def test_compressed1():\n     pos = axs[0, 0].get_position()\n     np.testing.assert_allclose(pos.x0, 0.06195, atol=1e-3)\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n-    pos = axs[1, 2].get_position()\n+import pytest\n+import warnings\n+import matplotlib.pyplot as plt\n+\n+def test_constrained_layout_warning():\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        fig, ax = plt.subplots(1, 2, constrained_layout=False)\n+        plt.subplots_adjust(wspace=0)\n+        assert len(w) == 0 or not any(issubclass(warning.category, UserWarning) for warning in w)\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..4749bff 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5723,8 +5723,28 @@ def test_set_get_ticklabels():\n     ax[0].set_yticks(range(10))\n     ax[0].set_xticklabels(['a', 'b', 'c', 'd'] + 6 * [''])\n     ax[0].set_yticklabels(['11', '12', '13', '14'] + 6 * [''])\n+import pytest\n+import matplotlib.pyplot as plt\n \n-    # set ticklabel to the other plot, expect the 2 plots have same label\n+def test_set_ticks_kwargs_raise_error_without_labels():\n+    \"\"\"\n+    When labels=None and any kwarg is passed, axis.set_ticks() raises a\n+    ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, alpha=0.5)\n+\n+def test_set_xticks_kwargs_raise_error_without_labels():\n+    \"\"\"\n+    When labels are not set in ax.set_xticks and any kwarg is passed, it raises\n+    a ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1]\n+    with pytest.raises(ValueError):\n+        ax.set_xticks(ticks, color='red')\n     # setting pass get_ticklabels return value as ticklabels argument\n     ax[1].set_xticks(ax[0].get_xticks())\n     ax[1].set_yticks(ax[0].get_yticks())\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..4c0102e 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,7 +1,8 @@\n+\n from io import BytesIO\n import ast\n import pickle\n-\n+import matplotlib.pickletools\n import numpy as np\n import pytest\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..18bde7f 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,35 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Try to align labels and then pickle\n+    fig.align_labels()\n+\n+    # Pickle the figure\n+    pkl = BytesIO()\n+    try:\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        pkl.seek(0)\n+        loaded_fig = pickle.load(pkl)\n+        loaded_fig.canvas.draw()  # Ensure drawing part works\n+    except Exception as e:\n+        pytest.fail(f\"Figure pickling failed with aligned labels: {e}\")\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..114f565 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,45 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+\n+def test_mplcursor_attribute_error():\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+    import numpy as np\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+    \n+    cursor = mplcursors.cursor()\n+    try:\n+        for i in range(3):  # Simulate clicking on data points\n+            cursor.event_handler(fig, x, y1)\n+    except AttributeError as e:\n+        assert False, f\"Test failed with AttributeError: {e}\"\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+\n+def test_mplcursor_attribute_error():\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+    import numpy as np\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+    \n+    cursor = mplcursors.cursor()\n+    try:\n+        for i in range(3):  # Simulate clicking on data points\n+            cursor.event_handler(fig, x, y1)\n+    except AttributeError as e:\n+        assert False, f\"Test failed with AttributeError: {e}\"\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..349b6c7 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,9 +9,31 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n \n+    def test_polyfit_with_missing_data(self, df):\n+        # Create a DataFrame similar to the one in the issue example\n+        data_with_nans = pd.DataFrame({\n+            \"x\": [1, 2, 3, None, 4, 5],\n+            \"y\": [1, 2, 3, 4, None, 5],\n+            \"group\": [1, 1, 1, 1, 1, 1]\n+        })\n+\n+        # Create a GroupBy object\n+        groupby = GroupBy([\"group\"])\n+\n+        # Compute the result with missing values\n+        res_with_nans = PolyFit()(data_with_nans, groupby, \"x\", {})\n+\n+        # Compute the result after dropping missing values\n+        data_no_nans = data_with_nans.dropna()\n+        res_no_nans = PolyFit()(data_no_nans, groupby, \"x\", {})\n+\n+        # Assert that results are the same, ignoring rows where inputs were NaN in first\n+        assert_frame_equal(res_with_nans.dropna(), res_no_nans)\n+\n     @pytest.fixture\n     def df(self, rng):\n \n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..c7ca0ab 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -707,6 +707,17 @@ class TestFacetGrid:\n                     assert mpl.colors.same_color(tick.tick2line.get_color(), color)\n                     assert tick.get_pad() == pad\n \n+import numpy as np\n+import pandas as pd\n+import matplotlib.pyplot as plt\n+import seaborn as sns\n+import seaborn.axisgrid as ag\n+import matplotlib as mpl\n+import pytest\n+from seaborn import scatterplot, histplot, kdeplot\n+from seaborn.palettes import color_palette\n+import numpy.testing as npt\n+from numpy.testing import assert_array_equal\n \n class TestPairGrid:\n \n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..1632671 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,10 @@\n+\n import json\n import os\n import textwrap\n \n import pytest\n+import tomllib\n \n import flask\n \n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..b4a249c 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1655,6 +1655,40 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n+def test_urllib3_exceptions():\n+    from requests.exceptions import RequestException, Timeout\n+    from requests.packages.urllib3.exceptions import DecodeError, TimeoutError\n+    import requests\n+\n+    # Test to check if DecodeError is correctly wrapped/handled\n+    try:\n+        raise DecodeError(\"Fake Decode Error\")\n+    except DecodeError as e:\n+        assert isinstance(e, DecodeError)  # It should remain a DecodeError\n+        \n+    # Test to check if TimeoutError is correctly wrapped/handled\n+    try:\n+        raise TimeoutError(\"Fake Timeout Error\")\n+    except TimeoutError as e:\n+        assert isinstance(e, TimeoutError)  # It should remain a TimeoutError\n+\n+    # Test actual requests handling\n+    s = requests.Session()\n+    # Mock a request to induce a decode error\n+    adapter = requests.adapters.HTTPAdapter()\n+    s.mount('http://example.org', adapter)\n+    \n+    # Ideally, you would mock the response to raise DecodeError\n+    # Here we are asserting after a fake raise\n+    \n+    with pytest.raises(RequestException):\n+        raise DecodeError(\"Simulated Decode Error\")  # This should be bypassed by requests and raised as a higher-level RequestException\n+\n+    # Mock a request timeout to induce a timeout error\n+    # Again, this is better when urllib3 actually triggers TimeoutError\n+    with pytest.raises(Timeout):\n+        raise TimeoutError(\"Simulated Timeout Error\")  # Should be caught as Timeout wrapped by requests\n+\n def test_vendor_aliases():\n     from requests.packages import urllib3\n     from requests.packages import chardet\n@@ -1663,4 +1697,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..c29127b 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,41 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_iter_content_unicode_decoding(self):\n+        \"\"\"\n+        Verify iter_content returns unicode when decode_unicode is True,\n+        including scenarios with different encodings and when decode_unicode is False.\n+        \"\"\"\n+        # Test with decode_unicode=True\n+        r = requests.Response()\n+        r._content = b'the content'\n+        r.encoding = 'utf-8'\n+\n+        chunks = r.iter_content(chunk_size=16, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+\n+        # Test with decode_unicode=False, should return bytes\n+        r = requests.Response()\n+        r._content = b'the content'\n+        r.encoding = 'utf-8'\n+\n+        chunks = r.iter_content(chunk_size=16, decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n+\n+        # Test with no encoding specified, decode_unicode=True, should return as-is\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = None\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Should return str even when encoding is None\"\n+\n+        # Test large content with mixed binary data\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'\\xff\\xfe\\xfd\\xfc\\xfb')\n+        r.encoding = 'utf-8'\n+        \n+        with pytest.raises(UnicodeDecodeError, match=\"*\"):\n+            chunks = list(r.iter_content(decode_unicode=True))\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..288ab0d 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -410,8 +410,15 @@ def test_groupby_repr_datetime(obj):\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n \n-\n-def test_groupby_drops_nans():\n+def test_groupby_no_trailing_whitespace():\n+    # Check that the string representation of groupby objects has no trailing whitespace on the first line\n+    ds = xr.Dataset(\n+        {\"foo\": ((\"x\", \"y\"), np.random.rand(4, 3))},\n+        coords={\"x\": [10, 20, 30, 40], \"letters\": (\"x\", list(\"abba\"))},\n+    )\n+    groupby_repr = repr(ds.groupby(\"letters\"))\n+    lines = groupby_repr.splitlines()\n+    assert lines[0] == \"DatasetGroupBy, grouped over 'letters'\"\n     # GH2383\n     # nan in 2D data variable (requires stacking)\n     ds = xr.Dataset(\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..e5b344b 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -106,6 +106,16 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_punctuation_only_note_should_trigger(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_dont_trigger_on_todoist(self) -> None:\n         code = \"\"\"\n         # Todoist API: What is this task about?\n@@ -119,4 +129,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..c2ebb8c 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -65,18 +65,20 @@ def test_unknown_message_id(capsys: CaptureFixture) -> None:\n \n def test_unknown_option_name(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown option.\"\"\"\n-    with pytest.raises(_UnrecognizedOptionError):\n+    with pytest.raises(_UnrecognizedOptionError) as excinfo:\n         Run([str(EMPTY_MODULE), \"--unknown-option=yes\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: unknown-option=yes\" in output.out\n+    assert \"Traceback\" not in str(excinfo.value)\n \n \n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n-    with pytest.raises(_UnrecognizedOptionError):\n+    with pytest.raises(_UnrecognizedOptionError) as excinfo:\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in str(excinfo.value)\n \n \n def test_unknown_confidence(capsys: CaptureFixture) -> None:\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..fbf9a71 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,29 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self):\n+        \"\"\"Tests that ignore-paths are respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            # Ensure regrtest_data is not disrupting sys.path perception of packages\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                # Create a directory structure to simulate the test\n+                os.makedirs(\"directory/ignored_subdirectory\", exist_ok=True)\n+                # Simulate pylint command with --recursive and ignore-paths option\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..1814116 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,31 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_lint_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for identically named nested module issue.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n+def test_lint_import_from_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for importing from identically named nested module problem.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files(\n+            [\n+                \"a/a.py\",\n+                \"a/b.py\",\n+                \"r.py\"\n+            ]\n+        )\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        linter.check([\"r\", \"a\"])\n+    assert \"no-name-in-module\" not in linter.stats.by_msg\n+    assert \"parse-error\" not in linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +966,29 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_lint_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for identically named nested module issue.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n+def test_lint_import_from_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for importing from identically named nested module problem.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files(\n+            [\n+                \"a/a.py\",\n+                \"a/b.py\",\n+                \"r.py\"\n+            ]\n+        )\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        linter.check([\"r\", \"a\"])\n+    assert \"no-name-in-module\" not in linter.stats.by_msg\n+    assert \"parse-error\" not in linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..f7a9e17 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -288,6 +288,19 @@ class TestImportPath:\n         fn.write_text(\"def foo(x): return 40 + x\", encoding=\"utf-8\")\n         return fn\n \n+    def test_module_importlib_idempotent(self, simple_module: Path, tmp_path: Path) -> None:\n+        \"\"\"Test that an importlib import is idempotent (doesn't re-import the module).\"\"\"\n+        module1 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        # Reimport the module to see if it gets re-imported or reused from sys.modules.\n+        module2 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+\n+        # Check if the two module imports point to the same object in memory\n+        assert module1 is module2\n+\n+        # Verify that the module was indeed cached in sys.modules properly\n+        assert module1.__name__ in sys.modules\n+        assert sys.modules[module1.__name__] is module1\n+\n     def test_importmode_importlib(self, simple_module: Path, tmp_path: Path) -> None:\n         \"\"\"`importlib` mode does not change sys.path.\"\"\"\n         module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..eba1b1c 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -6,6 +7,38 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n+    # Original formatter test\n+    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy\",\n+        level=logging.INFO,\n+        pathname=\"dummypath\",\n+        lineno=10,\n+        msg=\"Test Message\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == (\n+        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+    )\n+\n+    # Test for updated log format that includes module name\n+    updated_logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+    formatter = ColoredLevelFormatter(tw, updated_logfmt)\n+    output = formatter.format(record)\n+    assert output == (\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n+    )\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n     record = logging.LogRecord(\n",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..24a7f46 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,4 +1,7 @@\n+\n import os\n+import platform\n+from datetime import datetime\n from xml.dom import minidom\n \n import py\n@@ -157,7 +160,47 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_and_timestamp_present(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_dummy():\n+                assert 1 == 1\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        \n+        # Verify the hostname is correct\n+        assert node[\"hostname\"] == platform.node()\n+        \n+        # Verify the timestamp is accurate\n+        test_timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= test_timestamp < datetime.now()\n+\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..12e353d 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -152,5 +152,18 @@ def test_unicode():\n \n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n+\n+\n+def test_broken_getattribute():\n+    # saferepr() can create proper representations of classes with broken __getattribute__\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    result = saferepr(SomeClass())\n+    assert result.startswith(\"<[RuntimeError() raised in repr()] SomeClass object at 0x\")\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..7461cf7 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -287,6 +287,32 @@ class TestInlineRunModulesCleanup:\n         testdir.inline_run(str(test_mod))\n         assert imported.data == 42\n \n+def test_failure_with_changed_cwd(testdir) -> None:\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct.\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'temp_dir'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n \n def test_assert_outcomes_after_pytest_error(testdir) -> None:\n     testdir.makepyfile(\"def test_foo(): assert True\")\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..814173a 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,7 @@\n import os\n import sys\n+import os\n+\n from unittest import mock\n \n import pytest\n@@ -708,7 +710,70 @@ class TestFunctional:\n \n \n class TestKeywordSelection:\n-    def test_select_simple(self, testdir):\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+    def test_dynamic_skipif_condition_in_different_contexts(self, testdir):\n+        \"\"\"Test that the same skipif condition string evaluates correctly in different modules.\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_dynamic_skipif_condition1=\"\"\"\n+            import pytest\n+            from sys import platform\n+\n+            condition = 'win' in platform\n+\n+            @pytest.mark.skipif(\"condition\")\n+            def test_should_skip_on_windows():\n+                assert platform != 'win32'\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_dynamic_skipif_condition2=\"\"\"\n+            import pytest\n+            import os\n+\n+            condition = os.name == 'posix'\n+\n+            @pytest.mark.skipif(\"condition\")\n+            def test_should_skip_on_posix():\n+                assert os.name != 'posix'\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        if os.name == 'posix':\n+            reprec.assertoutcome(skipped=1, passed=1)\n+        else:\n+            reprec.assertoutcome(passed=2)\n         file_test = testdir.makepyfile(\n             \"\"\"\n             def test_one():\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..b02a1c2 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -250,7 +250,25 @@ class TestXFail:\n         assert not hasattr(callreport, \"wasxfail\")\n         assert \"xfail\" in callreport.keywords\n \n-    def test_xfail_not_report_default(self, testdir):\n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_location_with_runxfail(self, testdir, test_input, expected):\n+        \"\"\"Test to ensure skip location is reported correctly with --runxfail\"\"\"\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n         p = testdir.makepyfile(\n             test_one=\"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..72894b7 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -154,6 +155,30 @@ class TestEvaluation:\n \n \n class TestXFail:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        \"\"\"Test dynamically adding xfail during a test, expecting it to xfail.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        \"\"\"Test dynamically adding a strict xfail during a passing test, expecting failure.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..699c311 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,5 +1,8 @@\n+\n import os\n import stat\n+from _pytest.monkeypatch import MonkeyPatch\n+\n import sys\n from pathlib import Path\n from typing import Callable\n@@ -444,4 +447,20 @@ def test_basetemp_with_read_only_files(pytester: Pytester) -> None:\n     assert result.ret == 0\n     # running a second time and ensure we don't crash\n     result = pytester.runpytest(\"--basetemp=tmp\")\n-    assert result.ret == 0\n+    assert result.ret == 0\n+\n+def test_tmp_path_factory_handles_invalid_dir_characters(tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    # _basetemp / _given_basetemp are cached / set in parallel runs, patch them\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+def test_tmp_path_with_backslash_username(tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"contoso\\\\john_doe\")\n+    # Reset _basetemp and _given_basetemp to ensure fresh state\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..fcc4f10 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -598,7 +598,32 @@ def test_ridgecv_store_cv_values():\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n \n-def test_ridgecv_sample_weight():\n+def test_ridge_classifiercv_store_cv_values():\n+    import numpy as np\n+    from sklearn.linear_model import RidgeClassifierCV\n+    from numpy.testing import assert_equal\n+\n+    # Define a simple dataset\n+    X = np.array([[-1.0, -1.0], [-1.0, 0.0], [-0.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    # Specify alphas\n+    alphas = [0.1, 1.0, 10.0]\n+    n_samples, n_features = X.shape\n+\n+    # Initialize RidgeClassifierCV with store_cv_values=True\n+    clf = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    clf.fit(X, y)\n+\n+    # Assert the shape of cv_values_\n+    assert_equal(clf.cv_values_.shape, (n_samples, len(alphas)))\n+\n+    # Test with multi-target y\n+    y_multi_target = np.vstack([y, -y]).T\n+    clf.fit(X, y_multi_target)\n+\n+    # Assert cv_values_ shape for multi-target\n+    assert_equal(clf.cv_values_.shape, (n_samples, y_multi_target.shape[1], len(alphas)))\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..4be7271 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,7 +5,9 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_raise_message, assert_array_equal\n+from sklearn.metrics.cluster import adjusted_rand_score\n+from sklearn.exceptions import ConvergenceWarning, NotFittedError\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n@@ -20,9 +22,58 @@ from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n \n COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n PRIOR_TYPE = ['dirichlet_process', 'dirichlet_distribution']\n+def test_bayesian_mixture_fit_predict_labels():\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng, scale=7)\n+    n_components = 2 * rand_data.n_components\n+\n+    for covar_type in COVARIANCE_TYPE:\n+        bgmm = BayesianGaussianMixture(n_components=n_components,\n+                                       max_iter=100, random_state=rng,\n+                                       tol=1e-3, reg_covar=0)\n+        bgmm.covariance_type = covar_type\n+        X = rand_data.X[covar_type]\n+        \n+        # Fit and predict\n+        Y_pred1 = bgmm.fit(X).predict(X)\n+\n+        # Fit_predict\n+        Y_pred2 = bgmm.fit_predict(X)\n+\n+        assert_array_equal(Y_pred1, Y_pred2)\n \n+        # Test that labels_ was created\n+        assert_array_equal(bgmm.labels_, Y_pred1)\n \n-def test_log_dirichlet_norm():\n+\n+def test_bayesian_mixture_fit_predict_prob_labels():\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng)\n+    for prior_type in PRIOR_TYPE:\n+        for covar_type in COVARIANCE_TYPE:\n+            X = rand_data.X[covar_type]\n+            Y = rand_data.Y\n+            bgmm = BayesianGaussianMixture(\n+                n_components=rand_data.n_components,\n+                random_state=rng,\n+                weight_concentration_prior_type=prior_type,\n+                covariance_type=covar_type)\n+\n+            # Check a warning message if we don't do fit\n+            assert_raise_message(NotFittedError,\n+                                 \"This BayesianGaussianMixture instance\"\n+                                 \" is not fitted yet. Call 'fit' with \"\n+                                 \"appropriate arguments before using \"\n+                                 \"this method.\", bgmm.predict, X)\n+\n+            bgmm.fit(X)\n+            Y_pred = bgmm.predict(X)\n+            Y_pred_proba = bgmm.predict_proba(X).argmax(axis=1)\n+            assert_array_equal(Y_pred, Y_pred_proba)\n+            assert_greater_equal(adjusted_rand_score(Y, Y_pred), .95)\n+\n+            # Test that labels_ was created\n+            assert_array_equal(bgmm.labels_, Y_pred)\n     rng = np.random.RandomState(0)\n \n     weight_concentration = rng.rand(2)\n",
  "scikit-learn__scikit-learn-12471": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex 5f947fe..b788827 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -438,7 +438,10 @@ def test_bayesian_mixture_fit_predict(seed, max_iter, tol):\n     rand_data = RandomData(rng, scale=7)\n     n_components = 2 * rand_data.n_components\n \n-    for covar_type in COVARIANCE_TYPE:\n+from sklearn.utils.testing import assert_array_equal\n+import numpy as np\n+\n+for covar_type in COVARIANCE_TYPE:\n         bgmm1 = BayesianGaussianMixture(n_components=n_components,\n                                         max_iter=max_iter, random_state=rng,\n                                         tol=tol, reg_covar=0)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..2c4d2ba 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..a3ea314 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -14,6 +15,8 @@ from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n from sklearn.utils.testing import assert_warns_message\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_greater\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..cf58634 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -172,6 +172,30 @@ def test_mutual_info_classif_mixed():\n         # The MI should be the same\n         assert_equal(mi_nn[2], mi[2])\n \n+def test_discrete_features_array_and_boolean_mask():\n+    X = np.array([[0, 0, 1],\n+                  [1, 1, 0],\n+                  [2, 0, 1],\n+                  [1, 0, 0],\n+                  [2, 1, 1]], dtype=float)\n+    y = np.array([0, 1, 2, 2, 1], dtype=float)\n+\n+    # Test with explicit array and boolean mask settings\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        mi_array = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        mi_mask = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        \n+        assert_array_equal(mi_array, mi_mask)\n+\n+        # Ensuring it does not raise error for valid inputs\n+        try:\n+            _ = mutual_info(X, y, discrete_features='auto', random_state=0)\n+        except Exception as e:\n+            assert False, f\"Unexpected exception raised: {e}\"\n+\n+        # Test invalid sizes for discrete_features\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False, True, False])\n \n def test_mutual_info_options():\n     X = np.array([[0, 0, 0],\n@@ -197,4 +221,4 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..4a020a6 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,7 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +216,14 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_with_array():\n+    # Verify that LogisticRegressionCV with array parameter does not raise an error\n+    set_config(print_changed_only=True)\n+    repr_lr_cv = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    assert \"LogisticRegressionCV(\" in repr_lr_cv\n+    assert \"Cs=array([0.1, 1])\" in repr_lr_cv\n+    set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..7e30ef9 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,9 +1,12 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n@@ -499,6 +502,51 @@ def test_transform():\n         flatten_transform=False).fit(X, y)\n \n     assert_array_equal(eclf1.transform(X).shape, (4, 6))\n+\n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(X, y, VotingClassifier(\n+        [('lr', LogisticRegression()),\n+         ('rf', RandomForestClassifier(n_estimators=5))])),\n+     (X_r, y_r, VotingRegressor(\n+         [('lr', LinearRegression()),\n+          ('rf', RandomForestRegressor(n_estimators=5))]))]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # Testing that an estimator can be set to None and passing some weight\n+    # Regression test for\n+    # https://github.com/scikit-learn/scikit-learn/issues/13777\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+# Additional test cases\n+def test_voter_without_weights_or_none():\n+    # Ensure VotingClassifier can handle an estimator set to None without weights\n+    X, y = datasets.load_iris(return_X_y=True)\n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression()),\n+                    ('rf', RandomForestClassifier(n_estimators=5))]\n+    )\n+    voter.set_params(lr=None)\n+    voter.fit(X, y)  # Note: No sample_weight passed\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+def test_weights_with_all_estimators():\n+    # Test if voting works when all estimators are present and weights are provided\n+    X, y = datasets.load_iris(return_X_y=True)\n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression(max_iter=1000)),\n+                    ('rf', RandomForestClassifier(n_estimators=5))]\n+    )\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n     assert_array_equal(eclf2.transform(X).shape, (4, 6))\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..de4806a 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,6 +160,29 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+import numpy as np\n+from sklearn.pipeline import Pipeline\n+from sklearn.model_selection import GridSearchCV\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+from sklearn.neighbors import KNeighborsClassifier\n+\n+def test_nca_with_grid_search():\n+    # Generate data\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    # Create a pipeline with NCA and KNN\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+    \n+    # Define parameter grid, intentionally using int and np.int64\n+    params = {'nca__tol': [0.1, 0.5, 1],  # 1 is int, expecting float\n+              'nca__n_components': np.arange(1, 10, dtype=np.int64)}  # np.int64 instead of int\n+    \n+    # Run GridSearchCV\n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n \n def test_transformation_dimensions():\n     X = np.arange(12).reshape(4, 3)\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..0242cf0 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,6 +679,57 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_empty_support_vectors_different_kernel():\n+    # Test sparse fit with different kernels ensuring no ZeroDivisionError\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    \n+    kernels = ['linear', 'rbf', 'poly', 'sigmoid']\n+    for kernel in kernels:\n+        model = svm.SVR(kernel=kernel)\n+        model.fit(X_train, y_train)\n+        assert not model.support_vectors_.data.size\n+        assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_empty_support_vectors_coo_matrix():\n+    # Test sparse fit with COO format\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+\n+    X_train = sparse.coo_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n \n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..d7516d9 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,6 +972,20 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n+import pytest\n+\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr_with_random_state(RepeatedCV):\n+    n_splits, n_repeats, random_state = 3, 5, 42\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    expected_repr = ('{}(n_repeats={}, n_splits={}, random_state={})'\n+                     .format(repeated_cv.__class__.__name__, n_repeats, n_splits, random_state))\n+    assert expected_repr == repr(repeated_cv)\n+\n+\n @ignore_warnings\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..736ed43 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -151,8 +151,18 @@ def test_affinity_propagation_predict_non_convergence():\n     y = assert_warns(ConvergenceWarning, af.predict, to_predict)\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n-\n-def test_equal_similarities_and_preferences():\n+def test_affinity_propagation_non_convergence_cluster_centers():\n+    # Data that should not converge within the set number of iterations\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    \n+    # Create an AffinityPropagation instance with a low max_iter to force non-convergence\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    \n+    # Check if cluster_centers_indices_ is an empty array and labels_ are all -1\n+    assert_array_equal(af.cluster_centers_indices_, np.array([]))\n+    assert_array_equal(af.labels_, np.array([-1, -1, -1]))\n     # Unequal distances\n     X = np.array([[0, 0], [1, 1], [-2, -2]])\n     S = -euclidean_distances(X, squared=True)\n",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..0825f6d 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,5 +1,11 @@\n+\n import warnings\n import numpy as np\n+import pytest\n+from sklearn import set_config\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+import numpy as np\n import pickle\n import copy\n \n@@ -668,7 +674,22 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_CalibratedClassifierCV_isotonic_with_pandas_output():\n+    \"\"\"Test CalibratedClassifierCV with isotonic regression when pandas output is set.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    \n+    from sklearn.datasets import make_classification\n+    X, y = make_classification(n_samples=30, n_features=3, random_state=42)\n+    \n+    clf = SGDClassifier()\n+    model = CalibratedClassifierCV(clf, method='isotonic')\n+\n+    with sklearn.config_context(transform_output=\"pandas\"):\n+        # Fit model - this should not raise an error\n+        model.fit(X, y)\n+        # Predict - should return a pandas DataFrame without raising an error\n+        predictions = model.predict(X)\n+        assert isinstance(predictions, np.ndarray)\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..6006896 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -113,6 +113,65 @@ def test_automodule_special_members(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_bases(app):\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base, list, set, tuple'\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList%s' % ('(iterable=(), /)' if sys.version_info >= (3, 7) else ''),\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n                                                             'missing_package1',\n@@ -125,4 +184,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "diff --git a/tests/test_environment_indexentries.py b/tests/test_environment_indexentries.py\nindex 9775484..5268478 100644\n--- a/tests/test_environment_indexentries.py\n+++ b/tests/test_environment_indexentries.py\n@@ -16,6 +16,20 @@ from sphinx.testing import restructuredtext\n \n @pytest.mark.sphinx('dummy', freshenv=True)\n def test_create_single_index(app):\n+    # Test index with special characters @, \u00a3, and \u2190\n+    text = (\".. index:: @mention\\n\"\n+            \".. index:: \u00a3price\\n\"\n+            \".. index:: \u2190arrow\\n\"\n+            \".. index:: apple\\n\"\n+            \".. index:: banana\\n\")\n+    restructuredtext.parse(app, text)\n+    index = IndexEntries(app.env).create_index(app.builder)\n+    assert len(index) == 4\n+    assert index[0] == ('Symbols', [('@mention', [[('', '#index-0')], [], None]),\n+                                    ('\u00a3price', [[('', '#index-1')], [], None]),\n+                                    ('\u2190arrow', [[('', '#index-2')], [], None])])\n+    assert index[1] == ('A', [('apple', [[('', '#index-3')], [], None])])\n+    assert index[2] == ('B', [('banana', [[('', '#index-4')], [], None])])\n     text = (\".. index:: docutils\\n\"\n             \".. index:: Python\\n\"\n             \".. index:: pip; install\\n\"\n",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..57c9950 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,74 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+import pytest\n+from sphinx.testing.util import SphinxTestApp, SimpleDoctreeReader\n+from sphinx import addnodes\n+from docutils import nodes\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        index,\n+        [desc, (\n+            [desc_signature, (\n+                [desc_name, '-j'],\n+                [desc_addname, '[=N]']\n+            )],\n+            [desc_content, ()]\n+        )]\n+    ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        index,\n+        [desc, (\n+            [desc_signature, (\n+                [desc_name, '[enable'],\n+                [desc_addname, '=]PATTERN']\n+            )],\n+            [desc_content, ()]\n+        )]\n+    ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+def test_cmd_option_with_complex_syntax(app):\n+    text = \".. option:: --complex[--option=<value>]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        index,\n+        [desc, (\n+            [desc_signature, (\n+                [desc_name, '--complex'],\n+                [desc_addname, '[--option=<value>]']\n+            )],\n+            [desc_content, ()]\n+        )]\n+    ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--complex', '--complex', 'cmdoption', 'index', 'cmdoption-complex', 1) in objects\n+\n+def test_cmd_option_with_spaces(app):\n+    text = \".. option:: \\\"command with spaces\\\"\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        index,\n+        [desc, (\n+            [desc_signature, (\n+                [desc_name, 'command with spaces']\n+            )],\n+            [desc_content, ()]\n+        )]\n+    ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('command with spaces', 'command with spaces', 'cmdoption', 'index', 'cmdoption-command-with-spaces', 1) in objects\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..2f40283 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -29,8 +30,17 @@ try:\n except ImportError:\n     pyximport = None\n \n-\n-def do_autodoc(app, objtype, name, options=None):\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_with_no_members(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'example', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: example',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n     if options is None:\n         options = {}\n     app.env.temp_data.setdefault('docname', 'index')  # set dummy docname\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..3015586 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -16,6 +17,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n import pytest\n \n from sphinx.util.typing import restify, stringify\n+from struct import Struct\n \n \n class MyClass1:\n@@ -46,6 +48,9 @@ def test_restify():\n     assert restify(Any) == \":obj:`Any`\"\n \n \n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n+\n def test_restify_type_hints_containers():\n     assert restify(List) == \":class:`List`\"\n     assert restify(Dict) == \":class:`Dict`\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..70e1c98 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,36 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_section_use_param_false(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+    def test_other_parameters_section_use_param_true(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..76ba295 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -321,6 +321,21 @@ def test_mul():\n         h2 = _af_rmuln(*a[:i + 1])\n         assert h == h2\n \n+def test_non_disjoint_cycles():\n+    # Test with repeated cycles to form the identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    \n+    # Test with cycles that should not alter each other's transformations\n+    assert Permutation([[0, 1], [2, 3]]) == Permutation([1, 0, 3, 2])\n+    \n+    # Test with nested application of cycles\n+    assert Permutation([[0, 1, 2], [1, 2, 0]]) == Permutation([2, 0, 1])\n+    \n+    # Test with overlapping cycles applied in sequence\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    \n+    # Ensure handling of a single cycle as expected\n+    assert Permutation([[0, 1]]) == Permutation([1, 0])\n \n def test_args():\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..2fdbd75 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -448,6 +449,28 @@ def test_sparse_matrix():\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n \n+    # Test hstack with 0 x n sparse matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n+\n+    # Test vstack with n x 0 sparse matrices\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n+\n+    # Additional test cases for hstack with 0 x n matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # Additional test case for vstack with n x 0 matrices\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 0)\n+    M3 = SparseMatrix.zeros(1, 0)\n+    M4 = SparseMatrix.zeros(1, 0)\n+    assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (4, 0)\n+\n \n def test_transpose():\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..f1dadb5 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -82,6 +82,21 @@ def check(a, exclude=[], check_attr=True):\n #================== core =========================\n \n \n+import pickle\n+from sympy import symbols, Float\n+\n+def test_pickle_float_expression():\n+    # Create a sympy expression with a float\n+    x = symbols(\"x\")\n+    expr = x + 1.0\n+\n+    # Pickle the expression using Python 2 format and ensure it can be loaded in Python 3\n+    pickled_expr = pickle.dumps(expr, protocol=2)\n+    loaded_expr = pickle.loads(pickled_expr)\n+\n+    # Check if the loaded expression is equal to the original one\n+    assert loaded_expr == expr\n+\n def test_core_basic():\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..77571a4 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -267,6 +267,18 @@ def test_coth():\n \n     assert coth(x*I) == -cot(x)*I\n \n+    # Test cases for issue with coth(log(tan(x))) substitutions\n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+    \n+    # Check for specific integral values where error previously occurred\n+    for val in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        try:\n+            # Expect no exceptions should be raised\n+            expr.subs(x, val)\n+        except NameError:\n+            assert False, f\"NameError encountered when substituting x={val} in coth(log(tan(x)))\"\n+\n     assert coth(k*pi*I) == -cot(k*pi)*I\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..d8385ab 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,21 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..6621d0c 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,24 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+import sympy as sp\n \n def test_latex_sequences():\n+    # Test case to check if SeqFormula doesn't backslash-escape square brackets\n+    a, n = sp.symbols('a n', integer=True)\n+\n+    s_test = sp.SeqFormula(n**2, (n, 0, sp.oo))\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert sp.latex(s_test) == latex_str\n+\n+    s_test_finite = sp.SeqFormula(n**2, (n, 0, 3))\n+    latex_str_finite = r'[0, 1, 4, 9]'\n+    assert sp.latex(s_test_finite) == latex_str_finite\n+\n+    # Additional test case to verify with another sequence\n+    s_additional = sp.SeqFormula(n + 1, (n, 0, sp.oo))\n+    latex_str_additional = r'[1, 2, 3, 4, \\ldots]'\n+    assert sp.latex(s_additional) == latex_str_additional\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..45ea5c4 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,9 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n+from sympy import Poly\n+from sympy.abc import x, y, z\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..f1bcf1e 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,7 +6111,28 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty\n+from sympy.abc import n, a\n+\n def test_MatrixSymbol_printing():\n+    # Original test patch\n+    n = 3  # setting a fixed size for the matrices to run the test\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    \n+    assert pretty(x + y) == \"x + y*\"\n+    assert pretty(-a*x + -2*y*y) == \"-a*x -2*y**y*\"\n+\n+def test_MatAdd_pretty_printing_issue_resolved():\n+    n = 3  # setting a fixed size for the matrices to run the test\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+\n+    # Testing the pretty printing of MatAdd with special character in name\n+    assert pretty(x + y) == \"x + y*\"\n+    assert pretty(-x + y) == \"-x + y*\"\n+    assert pretty(x - y) == \"x - y*\"\n+    assert pretty(y - x) == \"y* - x\"\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..3abbace 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -727,8 +727,23 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n-\n-def test_python_keywords():\n+from sympy import MatrixSymbol, lambdify, symbols, Matrix\n+from sympy.testing.pytest import raises\n+\n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    \n+    # Test without dummify\n+    lam = lambdify(curlyv, curlyv)\n+    assert lam([[1], [1]]) == [[1], [1]]\n+\n+    # Test with dummify\n+    lam = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam([[1], [1]]) == [[1], [1]]\n+\n+    # Ensure that no syntax error is raised\n+    raises(SyntaxError, lambda: lambdify(\"{v}\", curlyv))\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..c4c3eed 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n@@ -28,6 +29,13 @@ def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n+    \n+    # Test for issue with Max function\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(2, y, x)) == \"Max[2, y, x]\"\n+    assert mcode(Max(Max(x, y), z)) == \"Max[Max[x, y], z]\"\n \n \n def test_Pow():\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..3d79ecc 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,15 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    # Test case based on the described issue\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..ac44c7c 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -21,7 +22,22 @@ def test_idiff():\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n \n-def test_intersection():\n+def test_idiff_extended():\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+    \n+    # Test case for idiff with Eq, verifying resolution of the first failure case.\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x) == (x + 1)*exp(x - y)/(y + 1)\n+    \n+    # Test case for idiff with function f(x), verifying resolution of the second failure case.\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+\n+    # Additional test cases for mixed derivatives\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..df3550d 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,24 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n+def test_autowrap_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in the expression\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, \"Expected result to be 1.0 for an expression independent of input\"\n+\n+def test_autowrap_depends_on_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = x[0, 0]  # Now output depends on x\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, \"Expected result to be 1.0 as the expression directly depends on the input\"\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "",
  "sympy__sympy-17022": "",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..65f5577 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,13 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n+def test_issue_17137():\n+    from sympy import Symbol, simplify, I, cos\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..0db7ac3 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -5,8 +6,27 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n-\n-def test_point():\n+from sympy import sympify\n+\n+def test_sympy_point_multiplication():\n+    \"\"\"\n+    Test multiplication order with Point and Point3D while using sympify().\n+    Ensure that the order of multiplication doesn't matter with sympify.\n+    \"\"\"\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+\n+    # Test for Point2D\n+    result1 = point1 + point2 * sympify(2.0)\n+    result2 = point1 + sympify(2.0) * point2\n+    assert result1 == result2 == Point(2, 2), \"Multiplication order with sympify failed for Point2D\"\n+\n+    # Test for Point3D\n+    point3D_1 = Point3D(0, 0, 0)\n+    point3D_2 = Point3D(1, 1, 1)\n+    result3D_1 = point3D_1 + point3D_2 * sympify(2.0)\n+    result3D_2 = point3D_1 + sympify(2.0) * point3D_2\n+    assert result3D_1 == result3D_2 == Point3D(2, 2, 2), \"Multiplication order with sympify failed for Point3D\"\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..042f40f 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,51 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import Symbol, sympify, symbols\n+from sympy.utilities.pytest import raises\n+\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+def test_repr_eval_not_triggered():\n+    # Test issue: Sympy incorrectly attempts to eval reprs in its __eq__ method\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    x = Symbol('x')\n+    c = C()\n+\n+    # Should not raise an exception\n+    assert (x == c) is False\n+    assert (x != c) is True\n+\n+    class ReprAsX:\n+        def __repr__(self):\n+            return 'x'\n+\n+    # Ensure that objects whose repr is 'x' do not compare equal to Symbol('x')\n+    assert (x == ReprAsX()) is False\n+    assert (x != ReprAsX()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1947,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..928afa7 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -554,7 +554,24 @@ def test_diophantine():\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n \n-def test_general_pythagorean():\n+def test_issue_incomplete_results_with_permute():\n+    from sympy import diophantine, symbols\n+\n+    # Define the variables\n+    x, y = symbols('x y', integer=True)\n+    \n+    # Test case to check the original issue with permute=True\n+    result1 = diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(x, y), permute=True)\n+    result2 = diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(y, x), permute=True)\n+    \n+    # Both should return the same set of solutions when permute=True\n+    expected_result = set([\n+        (-3, -2), (-3, 2), (-2, -3), (-2, 3), \n+        (2, -3), (2, 3), (3, -2), (3, 2)\n+    ])\n+    \n+    assert result1 == expected_result\n+    assert result2 == expected_result\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..ba9851d 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n from sympy.codegen.ast import Declaration, Variable, float64, int64\n@@ -66,7 +67,7 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..db6d940 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,26 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_conversion_single_element_block_diag_matrix():\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    # Test case for a single element BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+\n+    assert B == M  # Ensure the conversion works correctly and does not raise an error\n+\n+    # Additional test with two elements to ensure existing behavior is not affected\n+    D2 = BlockDiagMatrix(M, M)\n+    B2 = Matrix(D2)\n+    assert B2 == Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..ff83467 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -302,6 +302,22 @@ def test_sign():\n     assert sign(x).rewrite(Heaviside) == 2*Heaviside(x, H0=S(1)/2) - 1\n     assert sign(y).rewrite(Heaviside) == sign(y)\n \n+    # Additional tests for sign.rewrite(Abs) functionality\n+    x, y = symbols('x y')\n+    f = Function('f')\n+\n+    # Test rewriting sign using Abs\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+\n+    # Test specific cases to ensure correct behavior\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(2).rewrite(Abs) == 1\n+    assert sign(-2).rewrite(Abs) == -1\n+    assert sign(2*I).rewrite(Abs) == I\n+    assert sign(-2*I).rewrite(Abs) == -I\n+\n     # evaluate what can be evaluated\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..6ba2b60 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,25 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n \n def test_partitions():\n+    # New test case to ensure dictionaries are not reused\n+    # This tests the primary issue reported where the dictionaries are reused.\n+    # We generate the partitions and check if they are the same when copied.\n+    \n+    def check_partitions_correctness(n, k=None, m=None):\n+        # Use the partitions directly and check they match copied partitions.\n+        direct_partitions = list(partitions(n, k=k, m=m))\n+        copied_partitions = [p.copy() for p in direct_partitions]\n+        assert direct_partitions == copied_partitions, \\\n+            \"Partition dictionaries are being reused instead of copied.\"\n+    \n+    # Test with various values of n, k, and m\n+    check_partitions_correctness(5, k=2)\n+    check_partitions_correctness(7, m=3)\n+    check_partitions_correctness(10, k=5, m=2)\n+    check_partitions_correctness(4)\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..a2c23c3 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -266,8 +266,12 @@ def test_zero():\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n+from sympy import symbols, S, oo, Pow\n \n-def test_pow_as_base_exp():\n+def test_issue_19572():\n+    # Test cases for the issue where 0**-oo should return ComplexInfinity (zoo)\n+    assert Pow(0, -oo) == S.ComplexInfinity\n+    assert 0**-oo == S.ComplexInfinity\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..0e52230 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -27,8 +27,15 @@ def test__aresame():\n     assert not _aresame(Basic([]), Basic(()))\n     assert not _aresame(Basic(2), Basic(2.))\n \n-\n-def test_structure():\n+from sympy import Symbol\n+\n+def test_symbol_dict():\n+    s = Symbol('s')\n+    # Check if __dict__ is present\n+    assert hasattr(s, '__dict__')\n+    # Check if __slots__ is correctly defined\n+    assert hasattr(s, '__slots__')\n+    assert s.__slots__ == ('name',)\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n     assert bool(b1)\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..558b30c 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n                    atan, atan2, nan, Symbol, re, im, sign)\n from sympy.abc import w, x, y, z\n@@ -160,8 +161,18 @@ def test_sign():\n     x = Symbol('x', complex=True)\n     assert refine(sign(x), Q.zero(x)) == 0\n \n+def test_issue_refine_complex_arguments():\n+    a = Symbol('a', real=True)\n+    J = Integral(sin(x)*exp(-a*x), (x, 0, oo))\n+    computed = refine(J.doit(), Q.positive(a))\n+    expected = 1 / (a**2 + 1)\n+    \n+    assert computed == expected\n \n-def test_func_args():\n+    # Test for refining arg\n+    x = Symbol('x', complex=True)\n+    assert refine(arg(x), Q.positive(re(x))) == 0\n+    assert refine(arg(x), Q.negative(re(x))) == pi\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..7a06435 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -8,6 +9,50 @@ from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n+def test_issue_21373():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+\n+    # Reproducing the original reported issue\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # Ensure that this substitution does not raise an error\n+    try:\n+        expr.subs({1: 1.0})\n+    except PolynomialError as e:\n+        assert False, f\"Unexpected PolynomialError: {e}\"\n+    \n+    # Additional tests based on issue description\n+    # Test with cosh instead of sinh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        expr_cosh.subs({1: 1.0})\n+    except PolynomialError as e:\n+        assert False, f\"Unexpected PolynomialError with cosh: {e}\"\n+\n+    # Test with tanh instead of sinh\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        expr_tanh.subs({1: 1.0})\n+    except PolynomialError as e:\n+        assert False, f\"Unexpected PolynomialError with tanh: {e}\"\n+\n+    # Test without the division by z_r\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    try:\n+        expr_no_div.subs({1: 1.0})\n+    except PolynomialError as e:\n+        assert False, f\"Unexpected PolynomialError without division: {e}\"\n+\n+    # Test without the exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    try:\n+        expr_no_exp.subs({1: 1.0})\n+    except PolynomialError as e:\n+        assert False, f\"Unexpected PolynomialError without exp: {e}\"\n+\n def test_subs():\n     n3 = Rational(3)\n     e = x\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..c572913 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -35,6 +36,13 @@ def test_Symbol_kind():\n     assert noncomm_x.kind is UndefinedKind\n \n def test_Integral_kind():\n+    # Add test cases for Derivative kind attribute\n+    A = MatrixSymbol('A', 2, 2)\n+    d1 = Derivative(comm_x, comm_x)\n+    d2 = Derivative(A, comm_x)\n+    \n+    assert d1.kind is NumberKind, f\"Expected NumberKind but got {d1.kind}\"\n+    assert d2.kind is MatrixKind(NumberKind), f\"Expected MatrixKind(NumberKind) but got {d2.kind}\"\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..9b58816 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -128,6 +128,22 @@ def test_monomials():\n \n     assert set(itermonomials([x, y], [2, 0])) == {S.One, x, x**2}\n     assert set(itermonomials([x, y], [2, 1])) == {S.One, x, y, x*y, x**2, x**2*y}\n+\n+    # Test cases for the issue with itermonomials and min_degrees argument\n+\n+    # Case where total degree = 3 and commutative variables\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x2*x3**2, x2**2*x3, x3*x1**2, x3**2*x1,\n+        x1*x3**2, x1**2*x3, x2*x3**2, x2**2*x3, x1*x2*x3\n+    }\n+\n+    # Case where total degree = 2 and commutative variables\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {\n+        x1**2, x2**2, x3**2, x1*x2, x1*x3, x2*x3, x1**3, x2**3, x3**3,\n+        x1*x2**2, x1**2*x2, x2*x3**2, x2**2*x3, x3*x1**2, x3**2*x1,\n+        x1*x3**2, x1**2*x3, x2*x3**2, x2**2*x3, x1*x2*x3\n+    }\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..996e5e0 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n@@ -440,6 +442,12 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n+def test_issue_22684():\n+    # Previously caused an error with evaluate(False)\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert p == Point2D(1, 2)\n+\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..7fc318f 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -337,6 +337,26 @@ def test_cse_Indexed():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+def test_cse_matrixsymbol_indexing():\n+    # Test for MatrixSymbol indexing with cse\n+    A = MatrixSymbol('A', 4, 4)\n+    B = MatrixSymbol('B', 4, 4)\n+    expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0]\n+    cse_subs, cse_reduced = cse(expr)\n+    assert cse_subs == [(symbols('x0'), A[0, 0] * B[0, 0]), (symbols('x1'), A[0, 1] * B[1, 0])]\n+    assert cse_reduced == [symbols('x0') + symbols('x1')]\n+    \n+def test_cse_multiple_matrixsymbols():\n+    A = MatrixSymbol('A', 2, 2)\n+    B = MatrixSymbol('B', 2, 2)\n+    C = MatrixSymbol('C', 2, 2)\n+    expr = A[0, 0] * B[0, 0] + B[1, 1] * C[1, 1]\n+    cse_subs, cse_reduced = cse(expr)\n+    assert cse_subs == [(symbols('x0'), A[0, 0] * B[0, 0]), (symbols('x1'), B[1, 1] * C[1, 1])]\n+    assert cse_reduced == [symbols('x0') + symbols('x1')]\n+\n+\n+from sympy import cse, symbols, MatrixSymbol\n \n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n@@ -356,6 +376,24 @@ def test_cse_MatrixExpr():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+def test_cse_matrixsymbol_indexing():\n+    # Test for MatrixSymbol indexing with cse\n+    A = MatrixSymbol('A', 4, 4)\n+    B = MatrixSymbol('B', 4, 4)\n+    expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0]\n+    cse_subs, cse_reduced = cse(expr)\n+    assert cse_subs == [(symbols('x0'), A[0, 0] * B[0, 0]), (symbols('x1'), A[0, 1] * B[1, 0])]\n+    assert cse_reduced == [symbols('x0') + symbols('x1')]\n+    \n+def test_cse_multiple_matrixsymbols():\n+    A = MatrixSymbol('A', 2, 2)\n+    B = MatrixSymbol('B', 2, 2)\n+    C = MatrixSymbol('C', 2, 2)\n+    expr = A[0, 0] * B[0, 0] + B[1, 1] * C[1, 1]\n+    cse_subs, cse_reduced = cse(expr)\n+    assert cse_subs == [(symbols('x0'), A[0, 0] * B[0, 0]), (symbols('x1'), B[1, 1] * C[1, 1])]\n+    assert cse_reduced == [symbols('x0') + symbols('x1')]\n+\n     replacements, reduced_exprs = cse([expr1 + expr2, expr1])\n     assert replacements\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..be1a224 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,23 @@\n+\n+def test_issue_17851():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n+\n+def test_issue_and_18715():\n+    for array_type in mutable_array_types:\n+        A = array_type([0, 1, 2])\n+        A[0] += 5\n+        assert A[0] == 5\n+\n+def test_array_empty_creation():\n+    # Verify that empty arrays can be created without error\n+    A = Array([])\n+    assert A.shape == (0,)\n+    assert list(A) == []\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -9,6 +29,7 @@ from sympy.tensor.array.sparse_ndim_array import (\n     ImmutableSparseNDimArray, MutableSparseNDimArray)\n \n from sympy.abc import x, y\n+from sympy.tensor.array import Array\n \n array_types = [\n     ImmutableDenseNDimArray,\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..f3911ca 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1182,7 +1185,13 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_issue_python_code_printer_tuple_one_element():\n+    # Test lambdify with a tuple with a single element\n+    f2b = lambdify([], (1,))  # Related to a past issue with single element tuple\n+    assert f2b() == (1,)\n+    # Check the generated source code to ensure it returns a tuple, not an integer\n+    code_source = inspect.getsource(f2b)\n+    assert 'return (1,)' in code_source, \"The source code should return a single-element tuple with a comma.\"\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..5d35d4f 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy import exp\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.quantities import Quantity\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..32b5f37 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,18 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_issue_expansion():\n+    # Test for fix of issue with scalar factors in TensorProduct expansion\n+    assert TP(2*U - V, U + V).expand(tensorproduct=True) == \\\n+        2*TP(U, U) + 2*TP(U, V) - TP(V, U) - TP(V, V)\n+    \n+    # Tests for fix of issue #24142\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..11f6336 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -7,6 +8,8 @@ from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n from sympy.functions.elementary.complexes import Abs\n from sympy.functions.elementary.exponential import (exp, log)\n+from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+from sympy.physics.units.systems.si import SI\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.functions.elementary.trigonometric import sin\n from sympy.integrals.integrals import integrate\n@@ -561,8 +564,40 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+\n+def test_collect_factor_and_dimension_edge_cases():\n+    # Test case for a scenario where velocity and acceleration*time are equivalent dimensions\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n \n-def test_prefixed_property():\n+    # This expression should not raise a ValueError after the issue is fixed\n+    expr1 = a1 * t1 + v1\n+    result = SI._collect_factor_and_dimension(expr1)\n+    assert result == (2 - 9.8 * 5, velocity)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..07e8b0e 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,14 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Additional test cases for milli prefix\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+    assert milli * meter == meter / 1000\n+    assert meter * milli == meter / 1000\n+    assert milli * volt == volt / 1000\n+    assert volt * milli == volt / 1000\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..42f0a22 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -185,11 +185,13 @@ class GrandParent(models.Model):\n \n \n class Parent(GrandParent):\n-    pass\n+    class Meta:\n+        ordering = [\"-pk\"]\n \n \n class Child(Parent):\n-    pass\n+    class Meta:\n+        ordering = [\"-pk\"]\n \n \n class GrandChild(Child):\n",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..7b1bc2d 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -6,6 +6,22 @@ should be a list or tuple of field names. This tells Django how to order\n ``QuerySet`` results.\n \n If a field name in ``ordering`` starts with a hyphen, that field will be\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n+from django.db.models import F\n+\n ordered in descending order. Otherwise, it'll be ordered in ascending order.\n The special-case field name ``\"?\"`` specifies random order.\n \n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..7ddeaf2 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,6 +3201,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    def test_boundwidget_id_for_label_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the 'id' from widget attributes\n+        if it is explicitly set by ChoiceWidget.options.\n+        \"\"\"\n+        class CheckboxForm(Form):\n+            options = MultipleChoiceField(\n+                choices=[('1', 'One'), ('2', 'Two')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = CheckboxForm(auto_id='custom_%s')\n+        subwidgets = form['options'].subwidgets\n+        # Test that the custom ID is used for the label\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_options_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_options_1')\n \n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..40e9b18 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,10 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.colors import LogNorm, Normalize\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -658,7 +662,26 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n-def test_colorbar_get_ticks_2():\n+def test_colorbar_update_after_norm_change():\n+    # Set up data\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+    \n+    # Create plot and colorbar\n+    fig, ax = plt.subplots(1, 1)\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+    \n+    # Update the normalization of the plotted image\n+    plot.set_norm(LogNorm())\n+    \n+    # Check if colorbar scale has updated\n+    fig.canvas.draw()  # necessary to update the plot\n+    assert cb.ax.yaxis.get_scale() == 'log', \"Colorbar scale should be logarithmic after norm is set to LogNorm\"\n+    \n+    # Now switch back to a linear norm\n+    plot.set_norm(Normalize())\n+    fig.canvas.draw()\n+    assert cb.ax.yaxis.get_scale() == 'linear', \"Colorbar scale should be linear after norm is set to Normalize\"\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..b750c36 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,31 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output and a custom transformer that aggregates data.\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import make_union\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            # Return a DataFrame to ensure compatibility with pandas output\n+            return (X[\"value\"].groupby(X[\"date\"]).sum()).to_frame()\n+\n+    set_config(transform_output=\"pandas\")\n+    result = make_union(MyTransformer()).fit_transform(data)\n+\n+    # Check if result is a DataFrame and has the expected shape\n+    assert isinstance(result, pd.DataFrame)\n+    assert result.shape[0] == 4  # Number of days in grouped data\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..7afeb27 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -105,6 +105,34 @@ def test_inherited_instance_variable(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_members_in_superclass(app):\n+    # Set up test case to match the issue scenario\n+    options = {\"members\": None, \"inherited-members\": True}\n+    # Run autodoc for the 'Derived' class\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Derived', options)\n+    # Assert expected documentation is output, including annotated attr1\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr3',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n \n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n@@ -115,6 +143,34 @@ def test_decorators(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_members_in_superclass(app):\n+    # Set up test case to match the issue scenario\n+    options = {\"members\": None, \"inherited-members\": True}\n+    # Run autodoc for the 'Derived' class\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Derived', options)\n+    # Assert expected documentation is output, including annotated attr1\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr3',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n     actual = do_autodoc(app, 'class', 'target.decorator.Qux')\n     assert list(actual) == [\n         '',\n@@ -131,6 +187,34 @@ def test_decorators(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_members_in_superclass(app):\n+    # Set up test case to match the issue scenario\n+    options = {\"members\": None, \"inherited-members\": True}\n+    # Run autodoc for the 'Derived' class\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Derived', options)\n+    # Assert expected documentation is output, including annotated attr1\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr3',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..c3540e7 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,8 +358,19 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n-\n-def test_exptrigsimp():\n+def test_issue_simplification_with_rational():\n+    # Test simplification of trigonometric expressions with rational numbers\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    \n+    # These should simplify to a single cosine term due to trigonometric identities\n+    assert trigsimp(r1) == cos(S(1)/25 - S(1)/50)\n+    assert trigsimp(r2) == cos(S(1)/25 - S(1)/50)\n+    \n+    # Verify behavior for acos, which should remain unevaluated because the expression involves symbolic evaluation\n+    assert simplify(acos(r2)) == acos(r2)\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..7886417 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4332,6 +4332,7 @@ def test_pretty_class():\n     assert pretty( C ) == str( C )\n     assert pretty( D ) == str( D )\n \n+from sympy import Sum, oo, pprint\n \n def test_pretty_no_wrap_line():\n     huge_expr = 0\n@@ -4862,8 +4863,37 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_pretty_print_centering_issue():\n+    from sympy.abc import x\n \n-def test_units():\n+    # The expression to check\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    # The expected unicode pretty-printed output\n+    expected_unicode_output = u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571   + 3\\n\\\n+ \u2571      \\n\\\n+ \u203e\u203e\u203e    \\n\\\n+x = 1   \\\n+\"\"\")\n+\n+    assert upretty(expr) == expected_unicode_output\n+\n+    # The expected ASCII pretty-printed output\n+    expected_ascii_output = \"\"\"\\\n+  oo     \\n\\\n+ ___     \\n\\\n+ \\\\      \\n\\\n+  \\\\   x \\n\\\n+  /   + 3\\n\\\n+ /__     \\n\\\n+x = 1    \\\n+\"\"\"\n+    assert pretty(expr) == expected_ascii_output\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..c49374d 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,6 +8,7 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..22b8408 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -545,8 +545,32 @@ class BasicExpressionsTests(TestCase):\n         self.assertCountEqual(subquery_test, [self.foobar_ltd, self.gmbh])\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n-\n-    def test_uuid_pk_subquery(self):\n+        \n+    def test_subquery_sql_validity(self):\n+        # Verify if calling Subquery results in valid SQL\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        \n+        # Check if resulting SQL includes correct subquery syntax\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        self.assertTrue(sql.endswith(')'))\n+\n+    def test_subquery_without_explicit_subquery_true(self):\n+        # Directly checking the SQL generated without manually setting subquery to True\n+        qs = Company.objects.filter(id__in=Subquery(Company.objects.values('id')))\n+        subquery_instance = Subquery(qs.values('id'))\n+        \n+        # Ensure subquery is True by default\n+        self.assertIs(subquery_instance.query.subquery, True)\n+\n+        compiler = subquery_instance.query.get_compiler(connection=connection)\n+        sql, _ = subquery_instance.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        self.assertTrue(sql.endswith(')'))\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..c66de4a 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,26 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +184,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..1cddccb 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -13,6 +14,8 @@ from PIL import Image\n \n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n+import pickle\n+from matplotlib.figure import Figure\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n from matplotlib.figure import Figure, FigureBase\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..aac5311 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn import PairGrid\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,33 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_map_with_categorical_hue(self):\n+        # Load the iris dataset\n+        iris = sns.load_dataset(\"iris\")\n+        \n+        # Create a PairGrid without hue in PairGrid creation, but use it in map\n+        g = PairGrid(iris, y_vars=[\"sepal_length\",\"sepal_width\"], x_vars=[\"petal_length\",\"petal_width\"])\n+        \n+        # Attempt to map scatterplot with categorical hue\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            hue_handled_correctly = True\n+        except Exception as e:\n+            hue_handled_correctly = False\n+            print(f\"Test failed with exception: {e}\")\n+        \n+        # Assert the behavior is correct\n+        assert hue_handled_correctly is True\n+        \n+        # Additionally, ensure that regplot can be added without errors\n+        try:\n+            g.map(sns.regplot, scatter=False)\n+            regplot_handled = True\n+        except Exception as e:\n+            regplot_handled = False\n+            print(f\"Regplot failed with exception: {e}\")\n+        \n+        assert regplot_handled is True\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..b4e8773 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -346,6 +346,14 @@ def test_excinfo_str():\n     assert s.endswith(\"ValueError\")\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n+def test_excinfo_raises_str_behavior():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+\n+    # Ensure str(excinfo) provides the documented 'gotcha' behavior\n+    assert str(excinfo) != \"A\\nB\\nC\", \"str(excinfo) should not equal the exception message directly\"\n+    # Ensure str(excinfo.value) outputs the correct information\n+    assert str(excinfo.value) == \"A\\nB\\nC\", \"str(excinfo.value) should output the exception message directly\"\n \n def test_excinfo_for_later():\n     e = ExceptionInfo.for_later()\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..09988bf 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,16 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Test with the new one-character shortcut, assuming it is '-c'\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+\n+        # Test with the new one-character shortcut, assuming it is '-c'\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +444,16 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Test with the new one-character shortcut, assuming it is '-c'\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+\n+        # Test with the new one-character shortcut, assuming it is '-c'\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 1db4096..38a164f 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,47 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_star_args_and_kwargs(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithDocumentedInitAndStarArgs\\n'\n+        '   :special-members: __init__\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    expected_output = (\n+        'class target.typehints._ClassWithDocumentedInitAndStarArgs(x, *args, **kwargs)\\n'\n+        '\\n'\n+        '   Class docstring.\\n'\n+        '\\n'\n+        '   Parameters:\\n'\n+        '      **x** (*int*) --\\n'\n+        '\\n'\n+        '      ***args** (*int*) --\\n'\n+        '\\n'\n+        '      ****kwargs** (*int*) --\\n'\n+        '\\n'\n+        '   __init__(x, *args, **kwargs)\\n'\n+        '\\n'\n+        '      Init docstring.\\n'\n+        '\\n'\n+        '      Parameters:\\n'\n+        '         **x** (*int*) -- Some integer\\n'\n+        '\\n'\n+        '         ***args** (*int*) --\\n'\n+        '\\n'\n+        '           Some integer\\n'\n+        '\\n'\n+        '         ****kwargs** (*int*) --\\n'\n+        '\\n'\n+        '           Some integer\\n'\n+        '\\n'\n+        '      Return type:\\n'\n+        '         None\\n'\n+    )\n+    assert expected_output == context\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..ec50a4e 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,18 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, symbols, Sum, Identity\n \n-def test_Identity_doit():\n+def test_identity_matrix_sum():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+\n+    # Test if the sum of the diagonal elements is n\n+    assert Sum(In[i, i], (i, 0, n-1)).doit() == n\n+\n+    # Test if the total sum of all elements is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..7e65367 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,12 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_latex_brackets():\n+    from sympy.parsing.latex import parse_latex\n+    # Issue: Latex parsing of fractions yields wrong expression due to missing brackets\n+    expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    expected = ((a**3 + b)/c)/(1/(c**2))\n+    assert expr == expected, f\"Expected {expected}, but got {expr}\"\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}