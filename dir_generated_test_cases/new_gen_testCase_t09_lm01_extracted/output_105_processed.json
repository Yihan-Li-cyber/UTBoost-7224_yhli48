{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..214131b 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -18,6 +18,7 @@ from astropy.modeling.core import ModelDefinitionError\n sh1 = models.Shift(1, name='shift1')\n sh2 = models.Shift(2, name='sh2')\n scl1 = models.Scale(1, name='scl1')\n+from astropy.modeling import models as m\n scl2 = models.Scale(2, name='scl2')\n map1 = Mapping((0, 1, 0, 1), name='map1')\n map2 = Mapping((0, 0, 1), name='map2')\n@@ -52,7 +53,14 @@ compound_models = {\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n-            )\n+            ),\n+    # New test case for checking separability of nested compound models\n+    'cm12': ((m.Pix2Sky_TAN() & cm),\n+             (np.array([False, False, True, True]),\n+              np.array([[True,  True,  False, False],\n+                        [True,  True,  False, False],\n+                        [False, False, True,  False],\n+                        [False, False, False, True]]))),\n }\n \n \n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..0b2cf62 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,10 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..1a676bd 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -33,8 +33,28 @@ def test_get_tables_from_qdp_file(tmp_path):\n \n     with open(path, \"w\") as fp:\n         print(example_qdp, file=fp)\n+def test_lowercase_commands(tmp_path):\n+    example_qdp_lowercase = \"\"\"\n+    read terr 1\n+    read serr 2\n+    ! Sample data with potential lowercase commands\n+    !MJD                  Err(pos)          Err(neg)          Rate             Error\n+    53000.123456          2.37847222222222e-05 -2.37847222222222e-05 NO          0.212439\n+    55045.099887          1.14467592592593e-05 -1.14467592592593e-05 0.000000  0.000000\n+    \"\"\"\n+    \n+    path = str(tmp_path / \"lowercase_test.qdp\")\n \n-    table0 = _read_table_qdp(fp.name, names=[\"MJD\", \"Rate\"], table_id=0)\n+    with open(path, \"w\") as fp:\n+        print(example_qdp_lowercase, file=fp)\n+    \n+    with pytest.warns(None) as record:\n+        table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n+    \n+    assert len(record) == 0, \"There should be no warnings for lowercase commands\"\n+    assert \"MJD\" in table.colnames\n+    assert \"Rate\" in table.colnames\n+    assert np.isclose(table[\"MJD_perr\"][0], 2.37847222222222e-05)\n     assert table0.meta[\"initial_comments\"][0].startswith(\"Swift\")\n     assert table0.meta[\"comments\"][0].startswith(\"WT -- hard data\")\n     table2 = _read_table_qdp(fp.name, names=[\"MJD\", \"Rate\"], table_id=2)\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..a4d0a7c 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,46 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..c43f53b 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -253,8 +253,30 @@ class TestTableFunctions(FitsTestCase):\n         # When there are scaled columns, the raw data are in data._parent\n \n         t.close()\n-\n-    def test_ascii_table(self):\n+    \n+    def test_exponent_replacement_in_fitsrec(self):\n+        from astropy.io import fits\n+        import numpy as np\n+        import os\n+\n+        # Create a FITS column with D exponent format\n+        r1 = np.array([1.2345678912345678e+06, 2.3456789123456789e+06])\n+        c1 = fits.Column(name='def', format='D16.8', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+\n+        # Write the TableHDU to a FITS file\n+        filename = self.temp('test_exponent_replacement.fits')\n+        hdu.writeto(filename, overwrite=True)\n+\n+        # Check if the 'E' has been replaced with 'D' in the output file\n+        with open(filename, 'r') as f:\n+            content = f.read()\n+            assert '1.23456789D+06' in content\n+            assert '2.34567891D+06' in content\n+        \n+        # Clean up the test file\n+        if os.path.exists(filename):\n+            os.remove(filename)\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n         ra1 = np.rec.array([\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..f7b9487 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1103,6 +1103,15 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        By default, the FILE_UPLOAD_PERMISSIONS setting should default to 0o644, \n+        and this should be reflected in the file_permissions_mode attribute of \n+        django.core.files.storage.default_storage.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_directory_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..5571177 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -376,7 +376,62 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 2)\n \n-    def test_order_by_exists(self):\n+    def test_order_by_multiline_sql(self):\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN status IN ('accepted', 'verification')\n+                     THEN 2 ELSE 1 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN status IN ('accepted', 'verification')\n+                     THEN (accepted_datetime, preferred_datetime)\n+                     ELSE null END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN status NOT IN ('accepted', 'verification')\n+                     THEN (accepted_datetime, preferred_datetime, created_at)\n+                     ELSE null END\n+            ''', []).desc(),\n+            # Adding a similar query with a minor difference in content to ensure no removal occurs\n+            RawSQL('''\n+                CASE WHEN status NOT IN ('accepted', 'verification') \n+                     THEN (created_at) \n+                     ELSE null END\n+            ''', []).desc()\n+        )\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [self.example_inc, self.gmbh, self.foobar_ltd],\n+                )\n+\n+    def test_order_by_multiple_similar_queries(self):\n+        # This test checks if different yet similar queries are being handled correctly\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN num_employees > 100 \n+                     THEN num_chairs \n+                     ELSE 0 END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN num_employees > 100 \n+                     THEN num_tables \n+                     ELSE 1 END\n+            ''', []).desc(),\n+        )\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [self.foobar_ltd, self.gmbh, self.example_inc],  # Assuming you adjust to match expected outcome\n+                )\n         mary = Employee.objects.create(firstname='Mary', lastname='Mustermann', salary=20)\n         mustermanns_by_seniority = Employee.objects.filter(lastname='Mustermann').order_by(\n             # Order by whether the employee is the CEO of a company\n",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..35b56cc 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -514,6 +514,22 @@ class MigrateTests(MigrationTestBase):\n             out.getvalue()\n         )\n \n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_sqlmigrate_for_non_transactional_databases(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support\n+        transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_plan_app_label_no_migrations(self):\n         out = io.StringIO()\n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..68d2783 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -65,8 +65,23 @@ class TestSerialization(SimpleTestCase):\n         self.assertEqual(instance.field, datetime.timedelta(days=1, hours=1))\n \n \n+from django.core import exceptions\n+from django.db import models\n+\n class TestValidation(SimpleTestCase):\n \n+    def test_invalid_duration_format(self):\n+        field = models.DurationField()\n+        invalid_durations = ['14:00', '25:61', '2:30:61', 'abc']\n+        for invalid_duration in invalid_durations:\n+            with self.assertRaises(exceptions.ValidationError) as cm:\n+                field.clean(invalid_duration, None)\n+            self.assertEqual(cm.exception.code, 'invalid')\n+            self.assertTrue(\n+                \"' value has an invalid format. \"\n+                \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\" in cm.exception.message\n+            )\n+\n     def test_invalid_string(self):\n         field = models.DurationField()\n         with self.assertRaises(exceptions.ValidationError) as cm:\n@@ -75,7 +90,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +99,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..84553dd 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,8 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',  # Test case with a trailing newline\n+            'newline\\nchar',  # Test case with an embedded newline\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +252,13 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\n+            \"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", \n+            'trailingnewline\\n',  # Test case with a trailing newline\n+            'newline\\nchar',  # Test case with an embedded newline\n+            'trailingnewline\\n',  # Test case with a trailing newline\n+            'newline\\nchar',  # Test case with an embedded newline\n+        ]\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +266,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..4454ef3 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,4 +1,5 @@\n-from math import ceil\n+\n+from django.db.models.deletion import Collector\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..0cc2635 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,8 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n+from django.db import IntegrityError\n+from django.test.utils import captured_stdout\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..97091e8 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -9,6 +9,8 @@ import time\n import types\n import weakref\n import zipfile\n+import os\n+import sys\n from importlib import import_module\n from pathlib import Path\n from unittest import mock, skip, skipIf\n@@ -133,7 +135,37 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((module,), frozenset()), frozenset())\n \n \n-class TestCommonRoots(SimpleTestCase):\n+    def test_main_module_is_resolved_when_run_directly(self):\n+        \"\"\"Ensure that the __main__ module is tracked for changes.\"\"\"\n+        # Simulate running manage.py directly.\n+        with mock.patch.object(sys, 'modules', sys.modules.copy()):\n+            # Create a mock '__main__' module\n+            main_module = types.ModuleType('__main__')\n+            main_module.__file__ = str(self.temporary_file('manage.py'))\n+            main_module.__loader__ = None\n+            sys.modules['__main__'] = main_module\n+            \n+            # Assume manage.py is the main module we want to track.\n+            main_module_file = Path(main_module.__file__)\n+            main_module_file.touch()  # Create the file physically.\n+\n+            # Check if the file is tracked by the autoreloader.\n+            self.assertFileFound(main_module_file)\n+\n+    def test_main_module_is_not_resolved_if_loader_provided(self):\n+        \"\"\"Ensure that the __main__ module is not tracked if it has a loader.\"\"\"\n+        with mock.patch.object(sys, 'modules', sys.modules.copy()):\n+            # Create a mock '__main__' module with a loader\n+            main_module = types.ModuleType('__main__')\n+            main_module.__file__ = str(self.temporary_file('manage.py'))\n+            main_module.__loader__ = 'some_loader'\n+            sys.modules['__main__'] = main_module\n+\n+            main_module_file = Path(main_module.__file__)\n+            main_module_file.touch()  # Create the file physically.\n+\n+            # Verify that the file is not in the autoreloader's file list.\n+            self.assertFileNotFound(main_module_file)\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..a206273 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -141,6 +141,71 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n+import os\n+import django.utils.autoreload as autoreload\n+from django.test import SimpleTestCase, override_settings\n+from pathlib import Path\n+import tempfile\n+import shutil\n+import stat\n+...\n+\n+class TestIterModulesAndFiles(SimpleTestCase):\n+\n+    def test_path_with_embedded_null_bytes(self):\n+        for path in (\n+            'embedded_null_byte\\x00.py',\n+            'di\\x00rectory/embedded_null_byte.py',\n+        ):\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+\n+    def test_invalid_paths_are_handled_gracefully(self):\n+        invalid_path = 'invalid_path\\x00.py'\n+        with self.assertRaises(ValueError):\n+            Path(invalid_path).resolve(strict=False)\n+\n+    def test_nonexistent_file_is_ignored(self):\n+        nonexistent_path = '/some/nonexistent/path.py'\n+        result = autoreload.iter_modules_and_files((), frozenset([nonexistent_path]))\n+        self.assertEqual(result, frozenset())\n+\n+    def test_valid_and_invalid_mix(self):\n+        valid_path = tempfile.mkstemp()[1]\n+        invalid_path = 'invalid_path\\x00.py'\n+        paths = frozenset([valid_path, invalid_path])\n+        results = autoreload.iter_modules_and_files((), paths)\n+        self.assertIn(Path(valid_path).resolve().absolute(), results)\n+\n+    def test_symlink_with_embedded_null_byte(self):\n+        with tempfile.TemporaryDirectory() as tempdir:\n+            dummy_file = os.path.join(tempdir, 'dummy.py')\n+            with open(dummy_file, 'w'):\n+                pass\n+            symlink_path = os.path.join(tempdir, 'sym\\x00link')\n+            try:\n+                os.symlink(dummy_file, symlink_path)\n+            except OSError as e:\n+                if e.errno != 36:  # Error for embedded null bytes\n+                    raise\n+            else:\n+                raise AssertionError(\"Expected symlink creation to fail due to embedded null byte.\")\n+            # Ensure no resolution occurs due to failed symlink\n+            result = autoreload.iter_modules_and_files((), frozenset([symlink_path]))\n+            self.assertNotIn(Path(dummy_file).resolve().absolute(), result)\n+\n+    def test_no_exception_on_regular_file_access(self):\n+        with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n+            temp_file_path = temp_file.name\n+        try:\n+            result = autoreload.iter_modules_and_files((), frozenset([temp_file_path]))\n+            self.assertEqual(result, frozenset([Path(temp_file_path).resolve().absolute()]))\n+        finally:\n+            os.remove(temp_file_path)\n+\n class TestCommonRoots(SimpleTestCase):\n     def test_common_roots(self):\n         paths = (\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..bfb4fd0 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -18,6 +18,8 @@ from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n from django.utils.functional import SimpleLazyObject\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n@@ -247,6 +249,33 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n         Ensure the debug view works when a database exception is raised by\n         performing an invalid query and passing the exception to the debug view.\n         \"\"\"\n+\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test to ensure that raising Http404 in a path converter's to_python method\n+        results in a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_value_error_in_converter(self):\n+        \"\"\"\n+        Test to ensure that raising ValueError in a path converter's to_python \n+        method results in trying the next URL pattern.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=ValueError):\n+            response = self.client.get('/some-other-path/1/')\n+            self.assertEqual(response.status_code, 404)  # Assuming this path doesn't match\n+\n+    def test_other_exception_in_converter(self):\n+        \"\"\"\n+        Test to ensure that raising an unspecified exception in a path converter's\n+        to_python method results in a server error.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Exception):\n+            response = self.client.get('/path-post/1/')\n+            self.assertEqual(response.status_code, 500)\n         with connection.cursor() as cursor:\n             try:\n                 cursor.execute('INVALID SQL')\n",
  "django__django-11742": "",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..a70d779 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -251,6 +251,25 @@ class WriterTests(SimpleTestCase):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n+    def test_serialize_enum_with_translation(self):\n+        from django.utils.translation import gettext_lazy as _\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        # Testing serialization of translated enum\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            choices=[(m.value, m) for m in TranslatedEnum],\n+        )\n+        serialized_string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            serialized_string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('Bad', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n \n     def test_serialize_enums(self):\n         class TextEnum(enum.Enum):\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..db2da31 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..90e5966 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,15 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+import unittest\n+\n+class EnumStringTests(unittest.TestCase):\n+    def test_enum_str_representation(self):\n+        for test in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in test:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(member), member.value)\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..3855ab1 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -147,10 +147,24 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.test import TestCase\n+from django.db import models\n+\n+class FooBar(models.Model):\n+    foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+    \n+    def get_foo_bar_display(self):\n+        return \"something\"\n+\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n-    def test_choices_and_field_display(self):\n+    def test_overriding_FIELD_display(self):\n+        \"\"\"\n+        Verify that get_FIELD_display can be overridden in Django 2.2+.\n+        \"\"\"\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n         values.\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..3979322 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -2,7 +2,10 @@ from django.urls import include, path, re_path\n \n from . import views\n \n+from . import views\n+\n urlpatterns = [\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.modules, name='modules'),\n     path('articles/2003/', views.empty_view, name='articles-2003'),\n     path('articles/<int:year>/', views.empty_view, name='articles-year'),\n     path('articles/<int:year>/<int:month>/', views.empty_view, name='articles-year-month'),\n@@ -14,4 +17,4 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+]\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..c7e6be4 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,26 @@\n+\n+class InheritedChoicesTest(TestCase):\n+    def test_inherited_choices(self):\n+        class A(models.Model):\n+            foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class B(A):\n+            foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\"), (\"C\", \"output3\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+        b_instance = B(field_foo='A')\n+        self.assertEqual(b_instance.get_field_foo_display(), 'output1')\n+\n+        b_instance = B(field_foo='B')\n+        self.assertEqual(b_instance.get_field_foo_display(), 'output2')\n+\n+        b_instance = B(field_foo='C')\n+        self.assertEqual(b_instance.get_field_foo_display(), 'output3')  # The expected behavior for the new tuple.\n+\n import pickle\n \n from django import forms\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..cd9849a 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,8 +1,11 @@\n+\n+from django.core.checks import Error\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n+from django.test import SimpleTestCase, override_settings\n from django.test import SimpleTestCase\n \n \n@@ -75,7 +78,8 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    @override_settings(USE_I18N=True, LANGUAGES=[('en', 'English')])\n+    def test_inconsistent_language_settings_original(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "",
  "django__django-12453": "",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..9428878 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,6 +159,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_ambiguous_relationship_model_with_incorrect_hint(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            first_group = models.ForeignKey(Group, models.CASCADE)\n+            second_group = models.ForeignKey(Group, models.CASCADE)\n+            person = models.ForeignKey(Person, models.CASCADE)\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.field', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..a25282d 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1241,6 +1241,41 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n     def test_cleanse_setting_recurses_in_dictionary(self):\n         reporter_filter = SafeExceptionReporterFilter()\n         initial = {'login': 'cooper', 'password': 'secret'}\n",
  "django__django-12708": "",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..6c30179 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,7 +685,28 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n-    def test_fast_delete_empty_no_update_can_self_select(self):\n+    def test_zero_deletions_for_foreign_key_models(self):\n+        \"\"\"\n+        Verify QuerySet.delete() returns a consistent result when zero objects\n+        are deleted, regardless of foreign key presence in the model.\n+        \"\"\"\n+        # Create instances of models with foreign keys and delete them.\n+        R.objects.create()\n+        HiddenUser.objects.create()\n+        deleted, deleted_objs = R.objects.filter(id=-1).delete()  # Non-matching filter\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.R': 0, 'delete.HiddenUser': 0})\n+\n+    def test_zero_deletions_for_simple_models(self):\n+        \"\"\"\n+        Verify QuerySet.delete() returns a consistent result when zero objects\n+        are deleted for models without foreign keys.\n+        \"\"\"\n+        # Create instances of \"simple\" models without foreign keys.\n+        M.objects.create()\n+        deleted, deleted_objs = M.objects.filter(id=-1).delete()  # Non-matching filter\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.M': 0})\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n         `no_update_can_self_select` feature should work even if the specified\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..e27f8e0 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,45 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_serving_with_asgi_static_files_handler(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        await communicator.wait()\n+\n+    async def test_static_file_not_found_with_asgi_static_files_handler(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/notfound.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], b'')\n+        await communicator.wait()\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..08457ac 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,13 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Tests for improvement: stripping leading/trailing dashes or underscores\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('___Leading underscores', 'leading-underscores', False),\n+            ('Trailing dashes---', 'trailing-dashes', False),\n+            ('Mix of--both__', 'mix-of-both', False),\n+            ('---Leading and trailing---', 'leading-and-trailing', False),\n+            ('_Mix_of_multiple__elements--', 'mix-of-multiple-elements', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..55c6e72 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,7 +45,21 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n-    def test_available_apps(self):\n+    def test_model_class_in_app_list_context(self):\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n+\n+        # Test for 'admin_views.Article'\n+        admin_views = apps[0]\n+        article = admin_views['models'][0]\n+        self.assertEqual(article['object_name'], 'Article')\n+        self.assertEqual(article['model'], Article)  # Ensure model class is present\n+\n+        # Test for 'auth.User'\n+        auth = apps[1]\n+        user = auth['models'][0]\n+        self.assertEqual(user['object_name'], 'User')\n+        self.assertEqual(user['model'], User)  # Ensure model class is present\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..5313516 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n@@ -5,6 +6,8 @@ from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -37,6 +40,27 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..adb1524 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,4 +1,6 @@\n+\n import datetime\n+from collections import namedtuple\n import pickle\n import unittest\n import uuid\n@@ -883,6 +885,25 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ],\n             ordered=False\n         )\n+    def test_range_lookup_namedtuple_boundary_cases(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        # Boundary check where range exactly matches num_employees\n+        qs_exact = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertSequenceEqual(qs_exact, [self.c5])\n+        \n+        # Check where range exceeds num_employees\n+        qs_exceed = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=200),\n+        )\n+        self.assertSequenceEqual(qs_exceed, [])\n+        \n+        # Check where range is completely below num_employees\n+        qs_below = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=0, maximum=50),\n+        )\n+        self.assertSequenceEqual(qs_below, [])\n \n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..c7202bf 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -23,6 +23,9 @@ from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.core.management.base import CommandError\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..c70b8a0 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -30,14 +31,94 @@ class ShellCommandTestCase(SimpleTestCase):\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n         select.return_value = ([], [], [])\n@@ -49,4 +130,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..3098086 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1041,12 +1041,9 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n             VerboseNamePluralProfileInline,\n             BothVerboseNameProfileInline,\n         ]\n-        obj = ProfileCollection.objects.create()\n-        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n-        request = self.factory.get(url)\n-        request.user = self.superuser\n-        response = modeladmin.changeform_view(request)\n-        self.assertNotContains(response, 'Add another Profile')\n+        # Add test case to check if verbose_name_plural defaults to a pluralized verbose_name.\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines.append(AutoVerboseNamePluralInline)\n         # Non-verbose model.\n         self.assertContains(response, '<h2>Non-verbose childs - plural name</h2>')\n         self.assertContains(response, 'Add another Non-verbose childs - name')\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..29b3225 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -582,14 +582,26 @@ class TestQuerying(TestCase):\n \n     def test_isnull_key(self):\n         # key__isnull=False works the same as has_key='key'.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n             self.objs[:3] + self.objs[5:],\n         )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=False),\n             [self.objs[3], self.objs[4]],\n         )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..7eafc4f 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -172,6 +172,26 @@ class DispatcherTests(SimpleTestCase):\n         self.assertTrue(hasattr(err, '__traceback__'))\n         self.assertIsInstance(err.__traceback__, TracebackType)\n         a_signal.disconnect(fails)\n+\n+    def test_send_robust_logging_exception(self):\n+        def faulty_receiver(val, **kwargs):\n+            raise KeyError('missing_key')\n+        \n+        a_signal.connect(faulty_receiver)\n+        try:\n+            with self.assertLogs('django.dispatch', 'ERROR') as cm:\n+                a_signal.send_robust(sender=self, val='test')\n+            log_record = cm.records[0]\n+            self.assertEqual(\n+                log_record.getMessage(),\n+                \"Error calling test_send_robust_logging_exception.<locals>.faulty_receiver in Signal.send_robust() (missing_key)\"\n+            )\n+            self.assertIsNotNone(log_record.exc_info)\n+            _, exc_value, _ = log_record.exc_info\n+            self.assertIsInstance(exc_value, KeyError)\n+            self.assertEqual(str(exc_value), 'missing_key')\n+        finally:\n+            a_signal.disconnect(faulty_receiver)\n         self.assertTestIsClean(a_signal)\n \n     def test_disconnection(self):\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..d3bde68 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -283,6 +283,19 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n \n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -298,6 +311,18 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n+        # Additional tests for edge cases with ModelChoiceField\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not a valid option.',\n+            },\n+        )\n+        # Test with a completely invalid string\n+        self.assertFormErrors(['\"xyz\" is not a valid option.'], f.clean, 'xyz')\n+        # Test with an empty string where it's not allowed\n+        self.assertFormErrors(['\"None\" is not a valid option.'], f.clean, None)\n+\n         # ModelMultipleChoiceField\n         e = {\n             'required': 'REQUIRED',\n@@ -307,4 +332,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..f216b8e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -43,6 +43,25 @@ class BasicExpressionsTests(TestCase):\n             name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n             ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=10)\n         )\n+\n+    def test_q_and_exists_commutativity(self):\n+        # Ensure commutativity between Q and Exists\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test both orders of Q and Exists\n+        tests = [\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_poc) | Q(), [self.max]),\n+            (Q() | Exists(is_poc), [self.max]),\n+        ]\n+\n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n         cls.foobar_ltd = Company.objects.create(\n             name=\"Foobar Ltd.\", num_employees=3, num_chairs=4, based_in_eu=True,\n             ceo=Employee.objects.create(firstname=\"Frank\", lastname=\"Meyer\", salary=20)\n@@ -792,6 +811,25 @@ class BasicExpressionsTests(TestCase):\n                 output_field=BooleanField(),\n             ),\n         )\n+\n+    def test_q_and_exists_commutativity(self):\n+        # Ensure commutativity between Q and Exists\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test both orders of Q and Exists\n+        tests = [\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_poc) | Q(), [self.max]),\n+            (Q() | Exists(is_poc), [self.max]),\n+        ]\n+\n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n     def test_boolean_expression_combined(self):\n@@ -803,6 +841,25 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_ceo) | Exists(is_poc)),\n             [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n         )\n+\n+    def test_q_and_exists_commutativity(self):\n+        # Ensure commutativity between Q and Exists\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test both orders of Q and Exists\n+        tests = [\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_poc) | Q(), [self.max]),\n+            (Q() | Exists(is_poc), [self.max]),\n+        ]\n+\n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_ceo) & Exists(is_poc)),\n             [self.max],\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..e3fe5d2 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1137,7 +1137,15 @@ class ResolverMatchTests(SimpleTestCase):\n         request = HttpRequest()\n         self.assertIsNone(request.resolver_match)\n \n-    def test_repr(self):\n+    def test_repr_partial(self):\n+        # Import the required module\n+        # Test repr for a URL that resolves to a functools.partial\n+        partial_func = functools.partial(urlpatterns_reverse.views.empty_view, some_argument=1)\n+        self.assertEqual(\n+            repr(resolve('/partial/')),\n+            \"ResolverMatch(func=functools.partial(urlpatterns_reverse.views.empty_view, some_argument=1), \"\n+            \"args=(), kwargs={}, url_name=partial, app_names=[], namespaces=[], route=partial/)\"\n+        )\n         self.assertEqual(\n             repr(resolve('/no_kwargs/42/37/')),\n             \"ResolverMatch(func=urlpatterns_reverse.views.empty_view, \"\n@@ -1146,6 +1154,8 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..9f7f769 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +103,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..1ed8f71 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2169,6 +2169,20 @@ class StartApp(AdminScriptTestCase):\n                 )\n                 self.assertFalse(os.path.exists(testproject_dir))\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        # Setting up the directory for the test case\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        \n+        # Running the django-admin command with a trailing slash in the directory name\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        \n+        # Verifying no output error occurred during the command execution\n+        self.assertNoOutput(err)\n+        \n+        # Verifying the app was created successfully by checking if 'apps.py' exists\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n     def test_importable_name(self):\n         \"\"\"\n         startapp validates that app name doesn't clash with existing Python\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..8f4f199 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -7,6 +7,7 @@ from django.contrib.auth.forms import (\n     PasswordResetForm, ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget,\n     SetPasswordForm, UserChangeForm, UserCreationForm,\n )\n+from django.forms import forms\n from django.contrib.auth.models import User\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n@@ -1020,7 +1021,19 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_widget_label(self):\n+        \"\"\"\n+        ReadOnlyPasswordHashWidget doesn't contain a 'for' attribute in the\n+        <label> because it doesn't have any labelable elements.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        # Check that the widget's id_for_label method returns None\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        # Check that the label tag generated does not contain a 'for' attribute\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-14580": "",
  "django__django-14608": "",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..91c5b8f 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -9,6 +9,46 @@ from .models import (\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n     Relationship, SymmetricalFriendship,\n )\n+from django.apps import apps\n+from django.core.checks import Error\n+from django.db import models\n+from .models import Event, Person, Invitation, Group\n+\n+class M2mThroughTests(TestCase):\n+    # Test for verifying the ManyToManyRel fix\n+    def test_m2m_through_fields_hashable(self):\n+        # This test checks if `through_fields` is made hashable\n+        # Minimized model definitions for testing\n+        class MinimalParent(models.Model):\n+            pass\n+\n+        class MinimalChild(models.Model):\n+            parent = models.ForeignKey(MinimalParent, on_delete=models.CASCADE)\n+            m2m_field = models.ManyToManyField(\n+                to=MinimalParent,\n+                through='MinimalThrough',\n+                through_fields=['child', 'parent']\n+            )\n+        \n+        class MinimalThrough(models.Model):\n+            parent = models.ForeignKey(MinimalParent, on_delete=models.CASCADE)\n+            child = models.ForeignKey(MinimalChild, on_delete=models.CASCADE)\n+\n+        self.assertEqual(\n+            MinimalChild._meta.get_field('m2m_field').through_fields,\n+            ['child', 'parent']\n+        )\n+        # Check there are no unhashable errors in checks\n+        errors = MinimalChild.check()\n+        self.assertNotIn('unhashable type', ''.join(str(e) for e in errors))\n+\n+    def test_proxy_model_check_does_not_fail(self):\n+        # This test ensures the proxy model check works without issue\n+        class ProxyPerson(Person):\n+            class Meta:\n+                proxy = True\n+        \n+        self.assertEqual(ProxyPerson.check(), [])\n \n \n class M2mThroughTests(TestCase):\n",
  "django__django-14752": "",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..41a7aaa 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -412,7 +412,8 @@ class MethodDecoratorTests(SimpleTestCase):\n \n     def test_invalid_method_name_to_decorate(self):\n         \"\"\"\n-        @method_decorator on a nonexistent method raises an error.\n+from functools import wraps, partial\n+from django.utils.decorators import method_decorator\n         \"\"\"\n         msg = (\n             \"The keyword argument `name` must be the name of a method of the \"\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..f88dd04 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5092,8 +5092,52 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         choice = Choice.objects.create(choice=None)\n         response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n-\n-    def test_readonly_foreignkey_links(self):\n+    from django.urls import reverse\n+    from django.test import TestCase\n+    from .models import ReadOnlyRelatedField, Chapter, Book, Language\n+    from .admin import site2\n+\n+    class ReadOnlyForeignKeyLinkTest(TestCase):\n+        def setUp(self):\n+            self.superuser = User.objects.create_superuser('admin', 'admin@test.com', 'password')\n+\n+        def test_readonly_foreignkey_links_default_admin_site(self):\n+            \"\"\"\n+            Test URL generation for readonly ForeignKey fields in the default admin site.\n+            \"\"\"\n+            chapter = Chapter.objects.create(\n+                title='Chapter 1',\n+                content='content',\n+                book=Book.objects.create(name='Book 1'),\n+            )\n+            language = Language.objects.create(iso='en', name='English')\n+            obj = ReadOnlyRelatedField.objects.create(\n+                chapter=chapter,\n+                language=language,\n+                user=self.superuser,\n+            )\n+            response = self.client.get(reverse('admin:admin_views_readonlyrelatedfield_change', args=[obj.pk]))\n+            self.assertEqual(response.status_code, 200)\n+            self.assertContains(response, reverse('admin:admin_views_language_change', args=[language.pk]))\n+\n+        def test_readonly_foreignkey_links_custom_admin_site(self):\n+            \"\"\"\n+            Test URL generation for readonly ForeignKey fields in the custom admin site.\n+            \"\"\"\n+            chapter = Chapter.objects.create(\n+                title='Chapter 2',\n+                content='content',\n+                book=Book.objects.create(name='Book 2'),\n+            )\n+            language = Language.objects.create(iso='es', name='Spanish')\n+            obj = ReadOnlyRelatedField.objects.create(\n+                chapter=chapter,\n+                language=language,\n+                user=self.superuser,\n+            )\n+            response = self.client.get(reverse('site2:admin_views_readonlyrelatedfield_change', args=[obj.pk]))\n+            self.assertEqual(response.status_code, 200)\n+            self.assertContains(response, reverse('site2:admin_views_language_change', args=[language.pk]))\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n         registered in admin.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..136af5a 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -346,6 +348,26 @@ class ModelChoiceFieldTests(TestCase):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n \n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Test: value_1 should have the same hash as a similar ModelChoiceIteratorValue instance\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        \n+        # Test: value_1 and value_2 should have different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+        # New test: Check if value_1 is usable as a dictionary key\n+        test_dict = {value_1: 'some_value'}\n+        self.assertIn(value_1, test_dict)\n+        self.assertEqual(test_dict[value_1], 'some_value')\n+\n+        # New test: Verify using value_1 in a set\n+        test_set = {value_1, value_2}\n+        self.assertIn(value_1, test_set)\n+        self.assertIn(value_2, test_set)\n+\n     def test_queryset_manager(self):\n         f = forms.ModelChoiceField(Category.objects)\n         self.assertEqual(len(f.choices), 4)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..c82387c 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,7 +793,55 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n-    def test_rename_m2m_target_model(self):\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+        \n+        # Ensure no queries are made when applied forwards\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Ensure no queries are made when applied backwards\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_postgres(self):\n+        # This test will simulate/describe additional expectations for PostgreSQl if needed.\n+        app_label = 'test_rmwdbtn_postgres'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+        \n+        # PostgreSQL specific statement; Here we're just making sure this noop behavior doesn't affect any constraints.\n+        if connection.vendor == 'postgresql':\n+            with connection.schema_editor() as editor:\n+                with self.assertNumQueries(0):\n+                    operation.database_forwards(app_label, editor, project_state, new_state)\n+            with connection.schema_editor() as editor:\n+                with self.assertNumQueries(0):\n+                    operation.database_backwards(app_label, editor, new_state, project_state)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..1fb816a 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -126,7 +126,23 @@ class MultiValueFieldTest(SimpleTestCase):\n         \"\"\"\n         Test when the last widget's data has changed. This ensures that it is\n         not short circuiting while testing the widgets.\n-        \"\"\"\n+        \"\"\",\n+    \n+    def test_multivaluefield_without_index_for_label(self):\n+        class TestMultiWidgetForm(Form):\n+            datetime = SplitDateTimeField(widget=SplitDateTimeWidget(attrs={'id': 'id_datetime'}))\n+        \n+        form = TestMultiWidgetForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label>Datetime:</label></th>\n+            <td>\n+            <input type=\"text\" name=\"datetime_0\" id=\"id_datetime_0\" required>\n+            <input type=\"text\" name=\"datetime_1\" id=\"id_datetime_1\" required>\n+            </td></tr>\n+            \"\"\"\n+        )\n         self.assertTrue(self.field.has_changed(\n             'some text,JP,2007-04-25 06:24:00',\n             ['some text', ['J', 'P'], ['2009-04-25', '11:44:00']],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..520941e 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,6 +70,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            # Invalid URL that previously raised ValueError instead of ValidationError.\n+            '////]@N.AN',\n+            '#@A.bO',\n         ]\n         for url, expected in tests:\n             with self.subTest(url=url):\n@@ -100,6 +103,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # Invalid URL that previously raised ValueError instead of ValidationError.\n+            '////]@N.AN',\n+            '#@A.bO',\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..08c7c64 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -12,6 +12,8 @@ from django.db.models.functions import (\n     Coalesce, ExtractYear, Floor, Length, Lower, Trim,\n )\n from django.test import TestCase, skipUnlessDBFeature\n+from django.db.models.functions import Coalesce\n+from django.db import connection\n from django.test.utils import register_lookup\n \n from .models import (\n@@ -20,6 +22,29 @@ from .models import (\n \n \n class NonAggregateAnnotationTestCase(TestCase):\n+    \n+    @classmethod\n+    def setUpTestData(cls):\n+        super().setUpTestData()\n+        cls.empty_query_sql = str(Book.objects.filter(pk__in=[]).query)\n+\n+    def test_negated_q_expression_wrapper_with_empty_in(self):\n+        with self.assertNumQueries(1) as ctx:\n+            books = Book.objects.annotate(\n+                selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            )\n+            self.assertEqual(len(books), Book.objects.count())\n+            self.assertTrue(all(book.selected for book in books))\n+        self.assertNotIn('SELECT AS', ctx.captured_queries[0]['sql'])\n+\n+    def test_negated_q_expression_wrapper_works_like_simple_q(self):\n+        simple_books = Book.objects.annotate(\n+            selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        negated_books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(list(simple_books.values('selected')), list(negated_books.values('selected')))\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..ed153c6 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,7 +1,9 @@\n+\n import json\n import random\n \n from django.conf import settings\n+from django.contrib.messages.storage.cookie import MessageEncoder, MessageDecoder\n from django.contrib.messages import constants\n from django.contrib.messages.storage.base import Message\n from django.contrib.messages.storage.cookie import (\n@@ -52,7 +54,17 @@ class CookieTests(BaseTests, SimpleTestCase):\n     def stored_messages_count(self, storage, response):\n         return stored_cookie_messages_count(storage, response)\n \n-    def test_get(self):\n+    def test_issue_extra_tags_serialization(self):\n+        \"\"\"\n+        Test serialization and deserialization of extra_tags=\"\".\n+        Verify it preserves empty string instead of converting to None.\n+        \"\"\"\n+        original_message = Message(constants.INFO, 'Testing message', extra_tags=\"\")\n+        encoded_message = MessageEncoder().encode(original_message)\n+        decoded_message = MessageDecoder().decode(encoded_message)\n+\n+        self.assertEqual(original_message.extra_tags, \"\")\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n         storage = self.storage_class(self.get_request())\n         # Set initial data.\n         example_messages = ['test', 'me']\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..21bbd1b 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -2,6 +2,11 @@ from pathlib import Path\n from unittest import mock\n \n from django.template import autoreload\n+from django.conf import settings\n+from django.utils.autoreload import BaseReloader\n+from django.core.management import call_command\n+from tempfile import TemporaryDirectory\n+import os\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n \n@@ -85,7 +90,35 @@ class TemplateReloadTests(SimpleTestCase):\n         )\n \n \n-@require_jinja2\n+class DevServerRestartTests(SimpleTestCase):\n+    def test_dev_server_restart_with_base_dir_in_templates(self):\n+        with TemporaryDirectory() as temp_dir:\n+            temp_settings = temp_dir + '/temp_settings.py'\n+            with open(settings.__file__, 'r') as original_settings:\n+                data = original_settings.readlines()\n+            \n+            with open(temp_settings, 'w') as new_settings:\n+                for line in data:\n+                    if \"TEMPLATES = [\" in line:\n+                        new_settings.write(line)\n+                        new_settings.write(f\"            '{settings.BASE_DIR}',\\n\")\n+                    else:\n+                        new_settings.write(line)\n+            \n+            # Mock to simulate the autoreloader\n+            reloader = BaseReloader()\n+            reloader.run_loop = lambda **kwargs: None\n+\n+            # Set the environment variable to point to the temp settings\n+            os.environ['DJANGO_SETTINGS_MODULE'] = 'temp_settings'\n+            \n+            try:\n+                call_command('runserver', use_reloader=True, reloader=reloader)\n+                self.assertTrue(reloader.run_loop.called, \"Dev server should restart but didn't.\")\n+            finally:\n+                reloader.stop()\n+                # Cleanup by removing temp_settings from environment\n+                del os.environ['DJANGO_SETTINGS_MODULE']\n @override_settings(INSTALLED_APPS=['template_tests'])\n class Jinja2TemplateReloadTests(SimpleTestCase):\n     def test_watch_for_template_changes(self):\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..d713aae 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,13 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test was_modified_since with an empty string for the If-Modified-Since header.\n+        It should return True, as the header indicates no modification condition.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..8be3ef7 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,4 +1,6 @@\n+\n import os\n+from argparse import ArgumentDefaultsHelpFormatter\n from io import StringIO\n from unittest import mock\n \n@@ -411,6 +413,30 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+    def test_create_parser_custom_formatter(self):\n+        \"\"\"\n+        Test that BaseCommand.create_parser() accepts a custom formatter and \n+        applies it correctly to command help.\n+        \"\"\"\n+        epilog = \"Example usage:\\n\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        \n+        # Check if the ArgumentDefaultsHelpFormatter is being applied\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\", \n+            \"subcommand\", \n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter\n+        )\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+        \n+        # Simulate the help command and capture the output\n+        with mock.patch('sys.stdout', new_callable=StringIO) as mock_stdout:\n+            parser.print_help()\n+            output = mock_stdout.getvalue()\n+        \n+        # Check if the epilog is formatted correctly\n+        self.assertIn(\"Example usage:\\n\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\", output)\n+\n     def test_outputwrapper_flush(self):\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..aee6336 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,3 +1,4 @@\n+\n import os\n from datetime import datetime\n \n@@ -217,7 +218,38 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"custom world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"custom world\"}</script>',\n+        )\n+\n+    def test_json_script_with_custom_encoder_and_id(self):\n+        class CustomEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"id_test\": \"123\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomEncoder, element_id=\"custom_id\"),\n+            '<script id=\"custom_id\" type=\"application/json\">{\"id_test\": \"123\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_for_complex_object(self):\n+        class ComplexEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                if isinstance(o, datetime):\n+                    return f'\"{o.isoformat()}\"'\n+                return super().encode(o)\n+\n+        dt = datetime(2023, 10, 1, 12, 0, 0)\n+        self.assertHTMLEqual(\n+            json_script({'datetime': dt}, encoder=ComplexEncoder),\n+            '<script type=\"application/json\">{\"datetime\": \"2023-10-01T12:00:00\"}</script>',\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..027d97b 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -130,6 +130,19 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             },\n         }\n \n+    @override_settings(\n+        INSTALLED_APPS=[]  # To isolate TEMPLATES test\n+    )\n+    def test_no_error_with_unique_library_in_templates(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags\", \"unique_app.templatetags.unique_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -158,6 +171,19 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 [self.error_same_tags],\n             )\n \n+    @override_settings(\n+        INSTALLED_APPS=[]  # To isolate TEMPLATES test\n+    )\n+    def test_no_error_with_unique_library_in_templates(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags\", \"unique_app.templatetags.unique_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n     )\n@@ -199,6 +225,19 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ):\n             self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n \n+    @override_settings(\n+        INSTALLED_APPS=[]  # To isolate TEMPLATES test\n+    )\n+    def test_no_error_with_unique_library_in_templates(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags\", \"unique_app.templatetags.unique_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -206,4 +245,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..fe82854 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,9 +398,24 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+from django.test import TestCase\n+from django.db import models\n+from .models import AnotherModel, ProxyCustomModel, CustomModel\n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n+class ProxyModelQuerySetTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        custom_instance = CustomModel.objects.create(name='Proxy Test')\n+        proxy_instance = ProxyCustomModel.objects.create(name='Proxy Proxy Test')\n+        AnotherModel.objects.create(custom=proxy_instance)\n+\n+    def test_select_related_only_on_proxy_model(self):\n+        # This tests the issue with `only` after `select_related` on proxy models.\n+        try:\n+            objs = list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+            self.assertEqual(len(objs), 1)\n+        except ValueError as e:\n+            self.fail(f\"Test raised ValueError unexpectedly: {e}\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n",
  "django__django-15851": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 55aff39..5a580e9 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -1,3 +1,4 @@\n+\n import signal\n \n from django.db.backends.base.client import BaseDatabaseClient\n@@ -32,9 +33,9 @@ class DatabaseClient(BaseDatabaseClient):\n             args += [\"-h\", host]\n         if port:\n             args += [\"-p\", str(port)]\n+        args.extend(parameters)\n         if dbname:\n             args += [dbname]\n-        args.extend(parameters)\n \n         env = {}\n         if passwd:\n@@ -61,4 +62,4 @@ class DatabaseClient(BaseDatabaseClient):\n             super().runshell(parameters)\n         finally:\n             # Restore the original SIGINT handler.\n-            signal.signal(signal.SIGINT, sigint_handler)\n+            signal.signal(signal.SIGINT, sigint_handler)\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..abc7536 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1902,6 +1902,41 @@ class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n \n+    def test_no_management_form_warning(self):\n+        \"\"\"\n+        Management forms should not trigger the default.html deprecation warning.\n+        \"\"\"\n+        with isolate_lru_cache(get_default_renderer), self.settings(\n+            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+        ):\n+            ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+            formset = ChoiceFormSet()\n+            \n+            # Render the management form and ensure no deprecation warnings\n+            with self.assertRaises(AssertionError):  # Expecting no warning\n+                with self.assertRaisesMessage(\n+                    RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n+                ):\n+                    str(formset.management_form)\n+            \n+    def test_full_formset_render_with_no_warnings(self):\n+        \"\"\"\n+        Full formset rendering should not trigger the default.html deprecation warning\n+        including management form.\n+        \"\"\"\n+        with isolate_lru_cache(get_default_renderer), self.settings(\n+            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+        ):\n+            ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet, extra=1)\n+            formset = ChoiceFormSet()\n+\n+            # Render entire formset and ensure no deprecation warnings\n+            with self.assertRaises(AssertionError):  # Expecting no warning\n+                with self.assertRaisesMessage(\n+                    RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n+                ):\n+                    str(formset)\n+\n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n         ), self.assertRaisesMessage(\n@@ -1909,4 +1944,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..20bafe0 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -179,7 +179,23 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n \n-    def test_formset_validation(self):\n+    def test_empty_permitted_ignored_for_empty_form_true(self):\n+        \"\"\"\n+        Ensure that formset's empty_form ignores empty_permitted=True.\n+        \"\"\"\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        # Since empty_permitted for empty_form should be irrelevant, we expect it to default to True.\n+        self.assertTrue(formset.empty_form.empty_permitted)\n+\n+    def test_empty_permitted_ignored_for_empty_form_false(self):\n+        \"\"\"\n+        Ensure that formset's empty_form ignores empty_permitted=False.\n+        \"\"\"\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        # Since empty_permitted for empty_form should be irrelevant, we expect it to default to True.\n+        self.assertTrue(formset.empty_form.empty_permitted)\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n         formset = self.make_choiceformset([(\"Calexico\", \"\")])\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..b396d64 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,14 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_zero(self):\n+        self.assertEqual(nformat(0, \".\"), \"0\")\n+        self.assertEqual(nformat(0.0, \".\"), \"0.0\")\n+        self.assertEqual(nformat(-0.0, \".\"), \"0.0\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..2547f6f 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,6 @@\n-import datetime\n+\n+import urllib.parse\n+from django.urls import reverse\n import re\n from unittest import mock\n \n",
  "django__django-16255": "",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..ad15d72 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,7 +1,10 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n import io\n+from unittest import TestCase, mock\n+from django.core.cache import cache\n import os\n import pickle\n import re\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..3e14220 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -6,6 +7,8 @@ from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n@@ -33,7 +36,37 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..e8e56eb 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,10 +236,76 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n-        self._test_alter_alter_model(\n-            migrations.AlterModelTable(\"Foo\", \"a\"),\n-            migrations.AlterModelTable(\"Foo\", \"b\"),\n+    def test_alter_alter_field(self):\n+        self._test_alter_alter(\n+            migrations.AlterField(\"Foo\", \"name\", models.IntegerField()),\n+            migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\")),\n+        )\n+\n+    def test_add_and_multiple_alter_fields(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=256, null=True),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+                ),\n+            ],\n+            [\n+                migrations.AddField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+                ),\n+            ],\n+        )\n+\n+    def test_multiple_alter_fields(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=256, null=True),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+                ),\n+            ],\n+            [\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+                ),\n+            ],\n         )\n \n     def test_alter_alter_unique_model(self):\n",
  "django__django-16873": "",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..a1b2d69 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -728,7 +728,43 @@ class BulkCreateTests(TestCase):\n     def test_update_conflicts_unique_two_fields_unique_no_unique_fields(self):\n         self._test_update_conflicts_unique_two_fields([])\n \n-    def _test_update_conflicts(self, unique_fields):\n+    @skipUnlessDBFeature(\"can_return_rows_from_bulk_insert\")\n+    def test_bulk_create_return_ids_on_conflict_update(self):\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"x\"),\n+            TwoFields(f1=2, f2=2, name=\"y\"),\n+        ]\n+        # Initial create to introduce conflicts.\n+        TwoFields.objects.bulk_create([\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ])\n+\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"f1\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n+    @skipUnlessDBFeature(\"can_return_rows_from_bulk_insert\")\n+    def test_bulk_create_return_ids_on_conflict_insert(self):\n+        new_data = [\n+            Country(name=\"Italy\", iso_two_letter=\"IT\"),\n+            Country(name=\"Spain\", iso_two_letter=\"ES\"),\n+        ]\n+        results = Country.objects.bulk_create(\n+            new_data,\n+            update_conflicts=True,\n+            unique_fields=[\"iso_two_letter\"],\n+            update_fields=[\"description\"],\n+        )\n+        self.assertEqual(len(results), len(new_data))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n         UpsertConflict.objects.bulk_create(\n             [\n                 UpsertConflict(number=1, rank=1, name=\"John\"),\n@@ -816,4 +852,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..a663fb1 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -508,8 +508,40 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n-def test_backend_fallback_headless(tmpdir):\n+def test_get_backend_does_not_clear_figs_created_under_rc_context():\n+    # This test verifies that figures created under rc_context are not cleared\n+    # when calling get_backend.\n+    with rc_context():\n+        fig1 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, '\\n' + before + '\\n' + after\n+\n+\n+def test_figures_remain_with_initial_figure():\n+    # Create an initial figure outside of rc_context\n+    fig1 = plt.figure()\n+    with rc_context():\n+        fig2 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, '\\n' + before + '\\n' + after\n+\n+\n+def test_figures_remain_in_interactive_mode():\n+    # Enable interactive mode and create a figure within rc_context\n+    plt.ion()\n+    with rc_context():\n+        fig2 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, '\\n' + before + '\\n' + after\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n            \"MPLBACKEND\": \"\", \"MPLCONFIGDIR\": str(tmpdir)}\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..7d93dc4 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -12,7 +12,7 @@ from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n-\n+from matplotlib.testing.decorators import check_figures_equal\n import matplotlib.pyplot as plt\n import numpy as np\n \n@@ -20,8 +20,15 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d_axes(fig_test, fig_ref):\n+    # In fig_test, we set visibility to False for the 3D axis\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n \n-def test_aspect_equal_error():\n+    # In fig_ref, we have no 3D plot to verify it's indeed completely invisible\n+    fig_ref.add_subplot()\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..bd5cf53 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1773,6 +1773,39 @@ def test_margins_errors(err, args, kwargs, match):\n \n \n @check_figures_equal(extensions=[\"png\"])\n+def test_plot_int_arrays():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    x_s_0 = np.array([0, 1])\n+    x_e_0 = np.array([1, 2])\n+    y_s_0 = np.array([0, 0])\n+    y_e_0 = np.array([1, 1])\n+    z_s_0 = np.array([0, 0])\n+    z_e_0 = np.array([1, 1])\n+    for n in range(x_s_0.size):\n+        ax.plot([x_s_0[n], x_e_0[n]],\n+                [y_s_0[n], y_e_0[n]],\n+                [z_s_0[n], z_e_0[n]], 'r-')\n+    plt.close(fig)\n+\n+def test_plot_mix_data_types():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    x_s_0 = np.array([0, 1])\n+    x_e_0 = [1, 2]\n+    y_s_0 = np.array([0, 0])\n+    y_e_0 = [1, 1]\n+    z_s_0 = [0, 0]\n+    z_e_0 = np.array([1, 1])\n+    for n in range(len(x_s_0)):\n+        ax.plot([x_s_0[n], x_e_0[n]],\n+                [y_s_0[n], y_e_0[n]],\n+                [z_s_0[n], z_e_0[n]], 'b-')\n+    plt.close(fig)\n+\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n def test_text_3d(fig_test, fig_ref):\n     ax = fig_ref.add_subplot(projection=\"3d\")\n     txt = Text(0.5, 0.5, r'Foo bar $\\int$')\n",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..d60bafb 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,31 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_label')\n+    legend = ax.legend(draggable=draggable)\n+    assert legend.get_draggable() is draggable\n+\n+def test_legend_default_draggable():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_label')\n+    legend = ax.legend()\n+    assert not legend.get_draggable()\n+    \n+def test_legend_set_draggable_after_creation():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_label')\n+    legend = ax.legend()\n+    legend.set_draggable(True)\n+    assert legend.get_draggable() is True\n+    legend.set_draggable(False)\n+    assert legend.get_draggable() is False\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..8e4f814 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,26 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+def test_constrained_layout_warning_when_false():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import warnings\n+\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        # Trigger a warning.\n+        plt.subplots_adjust(wspace=0)\n+\n+        # Check if a warning was raised.\n+        assert any(\"incompatible with subplots_adjust\" in str(warning.message) for warning in w), \\\n+            \"Expected 'incompatible with subplots_adjust' warning not raised.\"\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..fd5b5df 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5733,6 +5733,52 @@ def test_set_get_ticklabels():\n \n \n @check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_with_valid_labels_and_kwargs():\n+    \"\"\"\n+    Test that set_ticks with both labels and valid kwargs works as expected.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = [\"a\", \"b\", \"c\"]\n+    try:\n+        ax.xaxis.set_ticks(ticks, labels=labels, color='red')\n+    except Exception as e:\n+        pytest.fail(f\"set_ticks raised an unexpected exception: {e}\")\n+        \n+def test_set_ticks_with_invalid_kwargs_and_labels():\n+    \"\"\"\n+    Test that set_ticks raises an error when invalid kwargs are provided with labels.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = [\"a\", \"b\", \"c\"]\n+    with pytest.raises(TypeError):\n+        ax.xaxis.set_ticks(ticks, labels=labels, non_existent_property='value')\n+\n+def test_set_ticks_with_no_kwargs_and_labels():\n+    \"\"\"\n+    Test that set_ticks works correctly when no kwargs are provided but labels are set.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = [\"x\", \"y\", \"z\"]\n+    try:\n+        ax.xaxis.set_ticks(ticks, labels=labels)\n+    except Exception as e:\n+        pytest.fail(f\"set_ticks raised an unexpected exception: {e}\")\n+\n+def test_set_ticks_with_empty_labels_and_kwargs():\n+    \"\"\"\n+    Test that set_ticks silently processes when empty labels are provided with kwargs.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, labels=[], alpha=0.5)\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..5980e8a 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -15,9 +16,25 @@ import matplotlib.pyplot as plt\n import matplotlib.transforms as mtransforms\n import matplotlib.figure as mfigure\n from mpl_toolkits.axes_grid1 import parasite_axes\n+import pickletools\n \n \n-def test_simple():\n+def test_draggable_legend_pickle():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    time=[0,1,2,3,4]\n+    speed=[40,43,45,47,48]\n+\n+    ax.plot(time,speed,label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Pickle the figure and ensure no FigureCanvasQTAgg reference\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    loaded_fig = pickle.loads(pkl)\n+    assert loaded_fig is not None\n+    plt.close(loaded_fig)\n     fig = plt.figure()\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..366518e 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,31 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n \n-@mpl.style.context(\"default\")\n+def test_pickle_align_labels():\n+    # Prepare the figure with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align the labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle.dumps(fig)\n+        print(\"Pickling succeeded.\")\n+    except TypeError as e:\n+        print(\"Pickling failed with TypeError:\", str(e))\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..e69c37c 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -445,8 +445,30 @@ def test_paddedbox():\n     pb = PaddedBox(ta, pad=10, patch_attrs={'facecolor': 'b'})\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mplcursors as mpl\n+from matplotlib.backend_bases import MouseEvent\n+\n+def test_mplcursor_interaction():\n+    # Create the test plot\n+    x = np.arange(1, 11)\n+    y = x\n \n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y)\n+\n+    # Attach the mplcursor and show plot\n+    mpl.cursor()\n+\n+    with pytest.raises(AttributeError, match=\"NoneType' object has no attribute 'canvas'\"):\n+        # Simulate clicks on the scatter plot\n+        for xy in zip(x, y):\n+            # Simulate a click event on each scatter point\n+            MouseEvent('button_press_event', fig.canvas, xy[0], xy[1])._process()\n+            MouseEvent('button_release_event', fig.canvas, xy[0], xy[1])._process()\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..70d2f8f 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,9 +1,11 @@\n \n+\n import numpy as np\n import pandas as pd\n \n import pytest\n from numpy.testing import assert_array_equal, assert_array_almost_equal\n+from pandas.testing import assert_frame_equal\n \n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..7032015 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -96,12 +96,48 @@ class TestContinuous:\n         s = Continuous()._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_color_mapping_with_booleans(self):\n+        x = [\"a\", \"b\"]\n+        y = [1, 2]\n+        color = [True, False]\n+        \n+        # Create a Plot object\n+        plot = so.Plot(x, y, color=color).add(so.Bar())\n+        \n+        # Check whether the plot can be created successfully without errors\n+        try:\n+            # This place-holder line simulates rendering the plot\n+            plot.render()  \n+            error_raised = False\n+        except TypeError:\n+            error_raised = True\n+\n+        assert not error_raised, \"Plotting with boolean colors resulted in TypeError\"\n+\n     def test_color_named_values(self, x):\n \n         cmap = color_palette(\"viridis\", as_cmap=True)\n         s = Continuous(\"viridis\")._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_color_mapping_with_booleans(self):\n+        x = [\"a\", \"b\"]\n+        y = [1, 2]\n+        color = [True, False]\n+        \n+        # Create a Plot object\n+        plot = so.Plot(x, y, color=color).add(so.Bar())\n+        \n+        # Check whether the plot can be created successfully without errors\n+        try:\n+            # This place-holder line simulates rendering the plot\n+            plot.render()  \n+            error_raised = False\n+        except TypeError:\n+            error_raised = True\n+\n+        assert not error_raised, \"Plotting with boolean colors resulted in TypeError\"\n+\n     def test_color_tuple_values(self, x):\n \n         cmap = color_palette(\"blend:b,g\", as_cmap=True)\n",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..a9fe819 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -1314,6 +1314,27 @@ class TestPairGrid:\n         for ax in g.diag_axes:\n             assert len(ax.collections) == n\n \n+    def test_pairplot_column_multiindex(self):\n+\n+        # Create a MultiIndex DataFrame\n+        cols = pd.MultiIndex.from_arrays([[\"A\", \"A\", \"B\", \"B\"], [\"1\", \"2\", \"1\", \"2\"]])\n+        df = pd.DataFrame({\n+            (\"A\", \"1\"): np.random.rand(100),\n+            (\"A\", \"2\"): np.random.rand(100),\n+            (\"B\", \"1\"): np.random.rand(100),\n+            (\"B\", \"2\"): np.random.rand(100),\n+        })\n+        \n+        # Attempt to create a pairplot to ensure it doesn't raise an error\n+        try:\n+            ag.pairplot(df)\n+            multiindex_handled = True\n+        except KeyError:\n+            multiindex_handled = False\n+\n+        # Verify that the MultiIndex is properly handled\n+        assert multiindex_handled, \"MultiIndex DataFrame raised KeyError in pairplot\"\n+\n     def test_pairplot_reg(self):\n \n         vars = [\"x\", \"y\", \"z\"]\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..db821cf 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,3 +1,6 @@\n+\n+import tomllib  # Ensure this import is added for testing tomllib functionality\n+\n import json\n import os\n import textwrap\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..db6ecdf 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1655,7 +1655,36 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n-def test_vendor_aliases():\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import Timeout, RequestException, ConnectionError\n+from requests.models import PreparedRequest\n+import pytest\n+from urllib3.exceptions import DecodeError\n+\n+def test_urllib3_decode_error():\n+    \"\"\"Test if urllib3's DecodeError is wrapped in requests' RequestException.\"\"\"\n+    class DecodeErrorAdapter(HTTPAdapter):\n+        def send(self, request, *args, **kwargs):\n+            raise DecodeError(\"Test DecodeError\")\n+\n+    s = requests.Session()\n+    s.mount('http://', DecodeErrorAdapter())\n+\n+    with pytest.raises(RequestException):\n+        s.get(\"http://example.com\")\n+\n+def test_urllib3_timeout_error():\n+    \"\"\"Test if urllib3's TimeoutError is wrapped in requests' Timeout exception.\"\"\"\n+    class TimeoutErrorAdapter(HTTPAdapter):\n+        def send(self, request, *args, **kwargs):\n+            raise Timeout(\"Test TimeoutError\")\n+\n+    s = requests.Session()\n+    s.mount('http://', TimeoutErrorAdapter())\n+\n+    with pytest.raises(Timeout):\n+        s.get(\"http://example.com\")\n     from requests.packages import urllib3\n     from requests.packages import chardet\n \n@@ -1663,4 +1692,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..6cdcf71 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,6 +980,37 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n+    def test_response_text_vs_iter_content(self):\n+        \"\"\"\n+        Verify iter_content with decode_unicode=True returns strings,\n+        and behaves consistently with r.text.\n+        \"\"\"\n+        import requests\n+        import io\n+\n+        # Setup test case for JSON content type with UTF-8\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = b'{\"key\": \"value\"}'\n+        r.encoding = 'utf-8'\n+\n+        # Check r.text returns a decoded JSON string\n+        assert isinstance(r.text, str)\n+        assert r.text == '{\"key\": \"value\"}'\n+\n+        # Check iter_content returns the same content as chunks\n+        chunks = r.iter_content(16*1024, decode_unicode=True)\n+        complete_content = ''.join(chunks)\n+        assert isinstance(complete_content, str)\n+        assert complete_content == '{\"key\": \"value\"}'\n+\n+        # Additional test case: No encoding (raw bytes)\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'raw bytes content')\n+        r.encoding = None\n+        chunks = r.iter_content(16*1024, decode_unicode=True)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n+\n     def test_response_chunk_size_int(self):\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..a3c484d 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -744,7 +744,54 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             assert 'foo' in response.text\n             assert 'bar' in response.text\n \n-    def test_session_persistent_cookies(self):\n+    def test_register_multiple_hooks_at_once(self):\n+        \"\"\"Test that multiple hooks can be registered at once using list in hooks dictionary.\"\"\"\n+\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'X-Foo': 'foo'})\n+            return args\n+\n+        def add_bar_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'X-Bar': 'bar'})\n+            return args\n+\n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h), \"Hook is not callable\"\n+\n+        hooks = [add_foo_header, add_bar_header]\n+\n+        # Test using the Request object's register_hook method directly\n+        r = Request()\n+        r.register_hook('args', hooks)\n+        assert_hooks_are_callable(r.hooks)\n+\n+        # Test directly passing the hooks during object initialization\n+        r = Request(hooks={'args': hooks})\n+        assert_hooks_are_callable(r.hooks)\n+        \n+    def test_hooks_are_executed_in_order(self):\n+        \"\"\"Test that hooks are executed in the order they are registered.\"\"\"\n+\n+        execution_order = []\n+\n+        def hook1(args):\n+            execution_order.append('hook1')\n+            return args\n+\n+        def hook2(args):\n+            execution_order.append('hook2')\n+            return args\n+\n+        hooks = [hook1, hook2]\n+        r = Request(hooks={'args': hooks})\n+        r.hooks['args'][0]({})  # Trigger hook execution for testing\n+\n+        assert execution_order == ['hook1', 'hook2'], f\"Hook execution order incorrect: {execution_order}\"\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..7f1f84e 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -79,6 +79,15 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n+def test_unrecognized_option_suppresses_traceback(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure no traceback is shown for unrecognized options like '-Q'.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: Q\" in output.err\n+    assert \"Traceback\" not in output.err\n+    assert \"usage: pylint\" in output.err\n+\n def test_unknown_confidence(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..1819e43 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,26 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_flag(self) -> None:\n+        \"\"\"Test that ignore-paths are respected when using --recursive=y flag.\"\"\"\n+        with _test_sys_path():\n+            # Setup sys.path to avoid interference with astroid\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..8b73e47 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -933,6 +933,29 @@ print(submodule1)\n         with fix_import_path([tmpdir]):\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n+    \n+def test_identically_named_module_issue(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test case for issue: Linting fails if module contains module of the same name\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Attempt to lint the 'a' package without __init__.py should now pass without errors\n+        linter.check([\"a\"])\n+    # Ensure no errors related to import issues are reported\n+    assert not linter.stats.by_msg\n+\n+def test_pylint_with_import(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test case to verify import-related module resolution when modules have the same name\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+\n+        # Test linting the package along with a script that imports from it\n+        linter.check([\"r\", \"a\"])\n+    # Ensure no errors related to missing modules or imports are reported\n+    assert not linter.stats.by_msg\n \n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n@@ -941,4 +964,27 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+    \n+def test_identically_named_module_issue(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test case for issue: Linting fails if module contains module of the same name\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Attempt to lint the 'a' package without __init__.py should now pass without errors\n+        linter.check([\"a\"])\n+    # Ensure no errors related to import issues are reported\n+    assert not linter.stats.by_msg\n+\n+def test_pylint_with_import(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test case to verify import-related module resolution when modules have the same name\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+\n+        # Test linting the package along with a script that imports from it\n+        linter.check([\"r\", \"a\"])\n+    # Ensure no errors related to missing modules or imports are reported\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..0858157 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,7 +114,23 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n-def test_deprecation_set_output(recwarn):\n+def test_custom_braces_in_msg_template():\n+    \"\"\"Test that using custom braces in message templates works correctly.\"\"\"\n+    linter = PyLinter()\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"test_module\")\n+\n+    # Adding messages to be formatted\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E0001\", line=2, args=(\"some error\",))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[0] == \"************* Module test_module\"\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\nindex 82f0458..71c49e9 100644\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -255,8 +255,36 @@ def test_log_cli_enabled_disabled(testdir, enabled):\n     else:\n         assert msg not in result.stdout.str()\n \n+def test_log_format_includes_module_name(testdir):\n+    # Create a dummy test file with logging\n+    testdir.makepyfile(\n+        test_logging=\"\"\"\n+        import logging\n+\n+        logger = logging.getLogger(__name__)\n+\n+        def test_logging():\n+            logger.debug(\"Debug message logged by test\")\n+            logger.info(\"Info message logged by test\")\n+            logger.warning(\"Warning message logged by test\")\n+            logger.error(\"Error message logged by test\")\n+            logger.critical(\"Critical message logged by test\")\n+        \"\"\"\n+    )\n \n-def test_log_cli_default_level(testdir):\n+    result = testdir.runpytest('-o', 'log_cli=true')\n+\n+    # We'll expect to see the module name and filename in the output\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"DEBUG    test_logging:test_logging.py:* Debug message logged by test\",\n+            \"INFO     test_logging:test_logging.py:* Info message logged by test\",\n+            \"WARNING  test_logging:test_logging.py:* Warning message logged by test\",\n+            \"ERROR    test_logging:test_logging.py:* Error message logged by test\",\n+            \"CRITICAL test_logging:test_logging.py:* Critical message logged by test\",\n+        ]\n+    )\n+    assert result.ret == 0\n     # Default log file level\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..d0ffba0 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -463,6 +463,28 @@ class TestAssert_reprcompare:\n         expl = callequal({0, 1}, {0, 2})\n         assert len(expl) > 1\n \n+    def test_bytes_confusing_message(self):\n+        \"\"\"Test for confusing assertion rewriting with byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+            \"?   ++\"\n+        ]\n+\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+            \"?   +\"\n+        ]\n+\n     def test_frozenzet(self):\n         expl = callequal(frozenset([0, 1]), {0, 2})\n         assert len(expl) > 1\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..d370910 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,5 +1,8 @@\n+\n import os\n from xml.dom import minidom\n+from datetime import datetime\n+import platform\n \n import py\n \n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..f1fb8b4 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -144,6 +144,32 @@ def test_repr_on_newstyle():\n     assert saferepr(Function())\n \n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes\n+    with broken __getattribute__ and __repr__.\n+    \"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n+def test_broken_repr():\n+    \"\"\"saferepr() should handle exceptions in __repr__ gracefully.\"\"\"\n+    class AnotherClass:\n+        def __repr__(self):\n+            raise ValueError(\"intentional error in repr\")\n+\n+    output = saferepr(AnotherClass())\n+    assert \"<[ValueError('intentional error in repr') raised in repr()] AnotherClass object at 0x\" in output\n+\n+\n def test_unicode():\n     val = \"\u00a3\u20ac\"\n     reprval = \"'\u00a3\u20ac'\"\n@@ -153,4 +179,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..423583f 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -70,6 +70,32 @@ def test_make_hook_recorder(testdir) -> None:\n     recorder.hook.pytest_runtest_logreport(report=rep3)\n     pytest.raises(ValueError, recorder.getfailures)\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use correct paths if cwd has changed since\n+    invocation, confirming the issue fix.\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n \n def test_parseconfig(testdir) -> None:\n     config1 = testdir.parseconfig()\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..b473de7 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -41,8 +41,34 @@ class TestMark:\n         with pytest.raises(AttributeError):\n             mark._some_name\n \n+def test_reevaluate_skipif_condition(testdir):\n+    \"\"\"Test that different modules with different globals do not share the same skipif evaluation cache.\"\"\"\n+    py_file1 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr1=\"\"\"\n+        import pytest\n+\n+        skip = True\n \n-def test_marked_class_run_twice(testdir):\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_skip():\n+            assert True\n+    \"\"\"\n+    )\n+    py_file2 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr2=\"\"\"\n+        import pytest\n+\n+        skip = False\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_not_skip():\n+            assert True\n+    \"\"\"\n+    )\n+    file_name1 = os.path.basename(py_file1.strpath)\n+    file_name2 = os.path.basename(py_file2.strpath)\n+    reprec = testdir.inline_run(file_name1, file_name2)\n+    reprec.assertoutcome(passed=1, skipped=1)\n     \"\"\"Test fails file is run twice that contains marked class.\n     See issue#683.\n     \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..d64d001 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -219,7 +219,30 @@ class TestXFail:\n         assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"\n         assert not hasattr(callreport, \"wasxfail\")\n \n-    def test_xfail_run_anyway(self, testdir):\n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_location_reporting_with_runxfail(self, testdir, test_input, expected):\n+        # Create a test file that uses the skip marker.\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        \n+        # Run pytest with the given input arguments.\n+        result = testdir.runpytest(*test_input)\n+        \n+        # Verify the output contains the expected strings.\n+        result.stdout.fnmatch_lines(expected)\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..e47ba05 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -219,6 +220,33 @@ class TestXFail:\n         assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"\n         assert not hasattr(callreport, \"wasxfail\")\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_xfail_run_anyway(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..2b2c1d4 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,5 +1,8 @@\n+\n import os\n import stat\n+from _pytest.monkeypatch import MonkeyPatch\n+\n import sys\n from pathlib import Path\n from typing import Callable\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..8febba1 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,6 +573,34 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    import numpy as np\n+    from sklearn.linear_model import RidgeClassifierCV\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    \n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Test with multi-targets\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n \n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..290e513 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -3,6 +3,22 @@\n # License: BSD 3 clause\n \n import numpy as np\n+def test_bayesian_mixture_fit_predict_consistency():\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng, scale=7)\n+    n_components = 2 * rand_data.n_components\n+\n+    for covar_type in COVARIANCE_TYPE:\n+        bgmm = BayesianGaussianMixture(n_components=n_components,\n+                                       max_iter=100, random_state=rng,\n+                                       tol=1e-3, reg_covar=0,\n+                                       covariance_type=covar_type)\n+        X = rand_data.X[covar_type]\n+\n+        Y_pred_fit_predict = bgmm.fit_predict(X)\n+        Y_pred_separate = bgmm.fit(X).predict(X)\n+        assert_array_equal(Y_pred_fit_predict, Y_pred_separate)\n+\n from scipy.special import gammaln\n \n from sklearn.utils.testing import assert_raise_message\n@@ -15,7 +31,7 @@ from sklearn.mixture import BayesianGaussianMixture\n \n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n from sklearn.exceptions import ConvergenceWarning\n-from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n+from sklearn.utils.testing import assert_greater_equal, ignore_warnings, assert_array_equal\n \n \n COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..d357076 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,59 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+from sklearn.preprocessing import OneHotEncoder\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+# Additional test case\n+def test_one_hot_encoder_ignore_unknown_with_objects():\n+    X_train = np.array(['cat', 'dog', 'fish']).reshape(-1, 1)\n+    X_test = np.array(['bird', 'dog']).reshape(-1, 1)\n+    \n+    encoder = OneHotEncoder(handle_unknown='ignore', dtype=bool)\n+    encoder.fit(X_train)\n+    transformed = encoder.transform(X_test).toarray()\n+    \n+    expected = np.array([[0, 0, 0], [0, 1, 0]], dtype=bool)\n+    assert_array_equal(transformed, expected)\n+\n+def test_one_hot_encoder_ignore_unknown_all_unknown():\n+    X_train = np.array(['apple', 'orange', 'banana']).reshape(-1, 1)\n+    X_test = np.array(['grape', 'watermelon']).reshape(-1, 1)\n+    \n+    encoder = OneHotEncoder(handle_unknown='ignore', dtype=bool)\n+    encoder.fit(X_train)\n+    transformed = encoder.transform(X_test).toarray()\n+    \n+    expected = np.array([[0, 0, 0], [0, 0, 0]], dtype=bool)\n+    assert_array_equal(transformed, expected)\n+\n+def test_one_hot_encoder_ignore_unknown_some_known():\n+    X_train = np.array(['red', 'green', 'blue']).reshape(-1, 1)\n+    X_test = np.array(['green', 'yellow']).reshape(-1, 1)\n+    \n+    encoder = OneHotEncoder(handle_unknown='ignore', dtype=bool)\n+    encoder.fit(X_train)\n+    transformed = encoder.transform(X_test).toarray()\n+    \n+    expected = np.array([[0, 1, 0], [0, 0, 0]], dtype=bool)\n+    assert_array_equal(transformed, expected)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..9daafd8 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,6 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n \n def test_gaussian_mixture_fit():\n     # recover the ground truth\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..e718b25 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -70,8 +71,22 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n+def test_kernel_pca_sign_flipping():\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+\n+    # First transformation\n+    X_transformed = kpca.fit_transform(X)\n+\n+    # Run the transformation multiple times to check for sign consistency\n+    for _ in range(5):\n+        kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+        X_new_transformed = kpca.fit_transform(X)\n \n-def test_kernel_pca_sparse():\n+        # Check for sign flipping issue\n+        for i in range(X_transformed.shape[1]):\n+            assert_allclose(np.abs(X_transformed[:, i]), np.abs(X_new_transformed[:, i]))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..9afbcef 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,7 +1058,37 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n-def test_make_pipeline_memory():\n+def test_pipeline_length():\n+    \"\"\"Test that __len__ method of Pipeline correctly returns the number of steps.\"\"\"\n+    # Import additional necessary modules\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.svm import SVC\n+\n+    # Generate a sample pipeline\n+    pipe = Pipeline(steps=[\n+        ('selectkbest', SelectKBest(f_regression, k=5)),\n+        ('logisticregression', LogisticRegression())\n+    ])\n+\n+    # Test pipeline length\n+    assert len(pipe) == 2, \"Pipeline should have two steps\"\n+\n+    # Test pipeline with no steps\n+    empty_pipe = Pipeline(steps=[])\n+    assert len(empty_pipe) == 0, \"Empty pipeline should have zero steps\"\n+\n+    # Test pipeline with multiple steps\n+    multi_pipe = Pipeline(steps=[\n+        ('selectkbest', SelectKBest(f_regression, k=5)),\n+        ('logisticregression', LogisticRegression()),\n+        ('svc', SVC())\n+    ])\n+    assert len(multi_pipe) == 3, \"Pipeline should have three steps\"\n+\n+    # Test slicing pipelines\n+    assert len(multi_pipe[:1]) == 1, \"Sliced pipeline should have one step\"\n+    assert len(multi_pipe[:2]) == 2, \"Sliced pipeline should have two steps\"\n+    assert len(multi_pipe[1:]) == 2, \"Sliced pipeline should have two steps from index 1\"\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1100,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..853f0bb 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,10 +8,12 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n-\n import numpy as np\n-\n-from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils import check_random_state\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils._testing import assert_array_equal\n+from sklearn.utils._testing import assert_raises\n+from sklearn.utils._testing import assert_raises_regex\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..675d78b 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,22 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+    # Additional test cases for verifying the issue fix\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test with discrete_features as a boolean mask\n+        mi_7 = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        mi_8 = mutual_info(X, y, discrete_features=np.array([True, False, True]), random_state=0)\n+        assert_array_equal(mi_7, mi_8)\n+\n+        # Test with discrete_features as an array of indices\n+        mi_9 = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        mi_10 = mutual_info(X, y, discrete_features=np.array([0, 2]), random_state=0)\n+        assert_array_equal(mi_9, mi_10)\n+\n+        # Ensure error is raised if indices are out of bounds\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[0, 3])\n+\n+        # Ensure ValueError is raised for invalid input type\n+        assert_raises(ValueError, mutual_info, X, y, discrete_features='invalid')\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..ac22227 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +217,13 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_with_array():\n+    # Ensure array parameters don't throw an error\n+    set_config(print_changed_only=True)\n+    repr_str = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    assert 'Cs=array([0.1, 1.0])' in repr_str\n+    set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..c0d3622 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -13,6 +14,8 @@ from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n from sklearn.model_selection import GridSearchCV\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn import datasets\n from sklearn.model_selection import cross_val_score, train_test_split\n from sklearn.datasets import make_multilabel_classification\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "",
  "scikit-learn__scikit-learn-14894": "",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..c764c7f 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,8 +972,18 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n-def test_repeated_cv_value_errors():\n+import pytest\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    # Test if the __repr__ method returns the expected string\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    expected_repr = '{}(n_repeats=6, n_splits=2, random_state=None)'.format(\n+        repeated_cv.__class__.__name__\n+    )\n+    assert repr(repeated_cv) == expected_repr\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n         assert_raises(ValueError, cv, n_repeats=0)\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..8132e40 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -151,8 +151,21 @@ def test_affinity_propagation_predict_non_convergence():\n     y = assert_warns(ConvergenceWarning, af.predict, to_predict)\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n+def test_affinity_propagation_non_convergence_regressiontest():\n+    # Test non-convergence behavior of AffinityPropagation\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+\n+    # Check if labels are all -1 indicating non-convergence\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+\n+    # Check if the cluster_center_indices_ is empty\n+    assert_array_equal(np.array([]), af.cluster_centers_indices_)\n \n-def test_equal_similarities_and_preferences():\n+    # Ensure that the number of iterations reached the maximum limit\n+    assert af.n_iter_ == af.max_iter\n     # Unequal distances\n     X = np.array([[0, 0], [1, 1], [-2, -2]])\n     S = -euclidean_distances(X, squared=True)\n",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..6a27d44 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,5 +1,12 @@\n+\n import warnings\n import numpy as np\n+import pytest\n+from sklearn import set_config, clone\n+from sklearn.datasets import make_classification\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+import numpy as np\n import pickle\n import copy\n \n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..1d03fb2 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -112,17 +112,256 @@ def test_automodule_special_members(app):\n         '',\n     ]\n \n+import sys\n+import pytest\n+from tests.test_ext_autodoc import do_autodoc\n \n-@pytest.mark.sphinx('html', testroot='ext-autodoc',\n-                    confoverrides={'autodoc_mock_imports': ['missing_module',\n-                                                            'missing_package1',\n-                                                            'missing_package2',\n-                                                            'missing_package3',\n-                                                            'sphinx.missing_module4']})\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_with_multiple_bases(app):\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base, list, tuple'\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    \n+    assert \".. py:module:: target.inheritance\" in actual\n+    assert \".. py:class:: Base()\" in actual\n+    assert \".. py:method:: Base.inheritedclassmeth()\" in actual\n+    assert \".. py:method:: Base.inheritedstaticmeth(cls)\" in actual\n+    assert \".. py:class:: Derived()\" in actual\n+    assert \".. py:method:: Derived.inheritedmeth()\" in actual\n+    assert \".. py:class:: MyList\" in actual\n+    assert \".. py:method:: MyList.meth()\" in actual\n+    \n+    # Ensure list and tuple members are not documented\n+    assert all(\"list.\" not in line for line in actual)\n+    assert all(\"tuple.\" not in line for line in actual)\n @pytest.mark.usefixtures(\"rollback_sysmodules\")\n def test_subclass_of_mocked_object(app):\n     sys.modules.pop('target', None)  # unload target module to clear the module cache\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..113ca42 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -78,6 +78,63 @@ def test_get_full_qualified_name():\n     domain = StandardDomain(env)\n \n     # normal references\n+from docutils import nodes\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx import addnodes\n+from sphinx.util.docutils import SphinxDirective\n+import restructuredtext_lint as restructuredtext\n+from sphinx.testing.util import assert_node\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [addnodes.index, ([addnodes.desc, ([addnodes.desc_signature, (\n+            [addnodes.desc_name, '-j'],\n+            [addnodes.desc_addname, '[=N]']\n+        )])])]\n+    ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [addnodes.index, ([addnodes.desc, ([addnodes.desc_signature, (\n+            [addnodes.desc_name, '[enable'],\n+            [addnodes.desc_addname, '=]PATTERN']\n+        )])])]\n+    ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+# New test case to verify additional patterns\n+def test_cmd_option_with_equal_sign_in_brackets(app):\n+    text = \".. option:: [-enable=]arg\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [addnodes.index, ([addnodes.desc, ([addnodes.desc_signature, (\n+            [addnodes.desc_name, '[-enable'],\n+            [addnodes.desc_addname, '=]arg']\n+        )])])]\n+    ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[-enable', '[-enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+# Another test case to verify a different format\n+def test_cmd_option_with_multiple_brackets(app):\n+    text = \".. option:: [--foo=][--bar=]VALUE\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [addnodes.index, ([addnodes.desc, ([addnodes.desc_signature, (\n+            [addnodes.desc_name, '[--foo'],\n+            [addnodes.desc_addname, '=][--bar=]VALUE']\n+        )])])]\n+    ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[--foo', '[--foo', 'cmdoption', 'index', 'cmdoption-arg-foo', 1) in objects\n+\n     node = nodes.reference()\n     assert domain.get_full_qualified_name(node) is None\n \n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..0b43403 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..dd2d4d5 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -10,6 +11,7 @@\n \n import sys\n from numbers import Integral\n+from struct import Struct\n from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar,\n                     Union)\n \n@@ -115,7 +117,8 @@ def test_restify_type_ForwardRef():\n     assert restify(ForwardRef(\"myint\")) == \":class:`myint`\"\n \n \n-def test_restify_broken_type_hints():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..41f9e60 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,31 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_napoleon_use_param(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        \n+        # Test when napoleon_use_param is False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test when napoleon_use_param is True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..975e60a 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,6 +354,21 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+    # New test cases for non-disjoint cycles\n+    # Test identity permutation with non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # Test permutations with non-disjoint cycles\n+    # Should be applied in left-to-right order\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[2, 1], [0, 2]]) == Permutation([2, 0, 1])\n+\n+    # Test with a mix of disjoint and non-disjoint cycles\n+    assert Permutation([[0, 1], [2, 3, 4], [1, 2]]) == Permutation([1, 3, 4, 0, 2])\n+\n+    # Ensure no unintended side effects for existing valid cases\n+    assert Permutation([[0, 2]]) == Permutation([2, 1, 0])\n+\n \n def test_Cycle():\n     assert str(Cycle()) == '()'\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..e219c06 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,4 +1,5 @@\n-from sympy import Abs, S, Symbol, I, Rational, PurePoly\n+\n+from sympy import Abs, S, Symbol, I, Rational, PurePoly, Matrix\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..73825de 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -82,6 +82,11 @@ def check(a, exclude=[], check_attr=True):\n #================== core =========================\n \n \n+import pytest\n+import sys\n+import subprocess\n+from sympy import Float, symbols\n+\n def test_core_basic():\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n@@ -100,9 +105,28 @@ def test_core_symbol():\n         check(c)\n \n \n-def test_core_numbers():\n-    for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n-        check(c)\n+def test_cross_version_float_pickling():\n+    # This test simulates the pickling in Python 2 and unpickling in Python 3\n+    expr = \"import pickle; import sympy; x = sympy.symbols('x'); print(pickle.dumps(x + 1.0, 2))\"\n+    result = subprocess.run(\n+        ['python2', '-c', expr],\n+        stdout=subprocess.PIPE,\n+        stderr=subprocess.PIPE,\n+        check=True\n+    )\n+    serialized = result.stdout\n+\n+    # Now, we load this pickle in Python 3\n+    load_expr = \"import pickle, sys; print(pickle.loads(sys.stdin.buffer.read()))\"\n+    result = subprocess.run(\n+        ['python3', '-c', load_expr],\n+        input=serialized,\n+        stdout=subprocess.PIPE,\n+        stderr=subprocess.PIPE,\n+        check=True\n+    )\n+    # Ensure the deserialized expression is correct, adjust if necessary\n+    assert result.stdout.strip() == b\"x + 1.0\"  # Expect the deserialized output\n \n \n def test_core_relational():\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..aac02d1 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -261,6 +261,15 @@ def test_coth():\n     assert coth(-5*pi*I/6) == -sqrt(3)*I\n \n     assert coth(pi*I/105) == -cot(pi/105)*I\n+\n+def test_coth_log_tan_subs_issue():\n+    from sympy import coth, log, tan, Symbol, S\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Testing the specific integral values that previously caused errors\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in test_values:\n+        assert e.subs(x, val) != S.NaN, f\"Failed for x = {val}\"\n     assert coth(-pi*I/105) == cot(pi/105)*I\n \n     assert coth(2 + 3*I) == coth(2 + 3*I)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..0057ecd 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,41 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    # Test case to verify the original issue\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    expected_result = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected_result\n+\n+    # Additional test to assert column insertion at the beginning\n+    M = eye(3)\n+    V = Matrix([2, 2, 2])\n+    expected_result = Matrix([\n+        [2, 1, 0, 0],\n+        [2, 0, 1, 0],\n+        [2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(0, V) == expected_result\n+\n+    # Additional test to assert column insertion at the end\n+    M = eye(3)\n+    V = Matrix([3, 3, 3])\n+    expected_result = Matrix([\n+        [1, 0, 0, 3],\n+        [0, 1, 0, 3],\n+        [0, 0, 1, 3]\n+    ])\n+    assert M.col_insert(3, V) == expected_result\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..bfc9d63 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -617,6 +617,48 @@ def test_latex_Range():\n \n \n def test_latex_sequences():\n+    a, b = sp.symbols('a b')\n+    s7 = SeqFormula(a**2, (0, oo))\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s7) == latex_str\n+\n+    s8 = SeqPer((1, 2))\n+    latex_str = r'[1, 2, 1, 2, \\ldots]'\n+    assert latex(s8) == latex_str\n+\n+    s9 = SeqFormula(a**2, (0, 2))\n+    latex_str = r'[0, 1, 4]'\n+    assert latex(s9) == latex_str\n+\n+    s10 = SeqPer((1, 2), (0, 2))\n+    latex_str = r'[1, 2, 1]'\n+    assert latex(s10) == latex_str\n+\n+    s11 = SeqFormula(a**2, (-oo, 0))\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(s11) == latex_str\n+\n+    s12 = SeqPer((1, 2), (-oo, 0))\n+    latex_str = r'[\\ldots, 2, 1, 2, 1]'\n+    assert latex(s12) == latex_str\n+\n+    latex_str = r'[1, 3, 5, 11, \\ldots]'\n+    assert latex(SeqAdd(s7, s8)) == latex_str\n+\n+    latex_str = r'[1, 3, 5]'\n+    assert latex(SeqAdd(s9, s10)) == latex_str\n+\n+    latex_str = r'[\\ldots, 11, 5, 3, 1]'\n+    assert latex(SeqAdd(s11, s12)) == latex_str\n+\n+    latex_str = r'[0, 2, 4, 18, \\ldots]'\n+    assert latex(SeqMul(s7, s8)) == latex_str\n+\n+    latex_str = r'[0, 2, 4]'\n+    assert latex(SeqMul(s9, s10)) == latex_str\n+\n+    latex_str = r'[\\ldots, 18, 4, 2, 0]'\n+    assert latex(SeqMul(s11, s12)) == latex_str\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..c319240 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -188,6 +189,20 @@ def test_Domain_preprocess():\n \n     raises(OptionError, lambda: Domain.preprocess('Z()'))\n \n+    # Test cases for the original issue with domain 'RR[y,z]'\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+    # Test for RR with multiple variables\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]\n+    assert Domain.preprocess('CC[y,z]') == CC[y, z]\n+\n     assert Domain.preprocess('Z(x)') == ZZ.frac_field(x)\n     assert Domain.preprocess('Q(x)') == QQ.frac_field(x)\n \n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..4fac2f3 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -307,6 +308,16 @@ def test_latex_functions():\n         r\"\\sin^{-1} {x^{2}}\"\n \n     assert latex(factorial(k)) == r\"k!\"\n+\n+    # Test for inverse trigonometric functions with full style\n+    assert latex(acsc(x), inv_trig_style=\"full\") == r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"full\") == r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n+    assert latex(acsc(x)**2, inv_trig_style=\"full\") == r\"\\operatorname{arccsc}^{2}{\\left (x \\right )}\"\n+    assert latex(asec(x)**2, inv_trig_style=\"full\") == r\"\\operatorname{arcsec}^{2}{\\left (x \\right )}\"\n+    assert latex(acsc(x)**2, inv_trig_style=\"power\") == r\"\\csc^{-1}{\\left (x \\right )}^{2}\"\n+    assert latex(asec(x)**2, inv_trig_style=\"power\") == r\"\\sec^{-1}{\\left (x \\right )}^{2}\"\n+    assert latex(acsc(x**2), inv_trig_style=\"power\", fold_func_brackets=True) == r\"\\csc^{-1} {x^{2}}\"\n+    assert latex(asec(x**2), inv_trig_style=\"power\", fold_func_brackets=True) == r\"\\sec^{-1} {x^{2}}\"\n     assert latex(factorial(-k)) == r\"\\left(- k\\right)!\"\n \n     assert latex(subfactorial(k)) == r\"!k\"\n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..25cf326 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6121,8 +6121,34 @@ def test_MatrixSymbol_printing():\n     assert pretty(A - B) == \"-B + A\"\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n-\n-def test_degree_printing():\n+from sympy import MatrixSymbol, pretty\n+\n+def test_MatrixSymbol_pretty_printing():\n+    # Testing the pretty printing of MatAdd with MatrixSymbols\n+    n = 3\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    assert pretty(x + y_star) == \"x + y*\"\n+    assert pretty(-x + y_star) == \"-x + y*\"\n+\n+    # Testing with more complex expressions\n+    a = MatrixSymbol('a', n, n)\n+    y = MatrixSymbol('y', n, n)\n+    assert pretty(-a*x + -2*y*y) == \"-a*x - 2*y*y\"\n+    assert pretty(a*x - y_star) == \"a*x - y*\"\n+\n+    # Testing using negative constants and terms\n+    b = MatrixSymbol('b', n, n)\n+    assert pretty(-b + y_star) == \"-b + y*\"\n+    assert pretty(-y_star) == \"-y*\"\n+\n+    # Ensure the original behavior isn't broken\n+    A = MatrixSymbol(\"A\", n, n)\n+    B = MatrixSymbol(\"B\", n, n)\n+    C = MatrixSymbol(\"C\", n, n)\n+    assert pretty(-A*B*C) == \"-A*B*C\"\n+    assert pretty(A - B) == \"-B + A\"\n+    assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..a1e517d 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -727,7 +727,22 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n-\n+import sympy as sy\n+from sympy import raises\n+\n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    lam = sy.lambdify(curlyv, curlyv)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+    lam = sy.lambdify(curlyv, curlyv, dummify=True)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+\n+def test_curly_matrix_symbol_syntaxerror():\n+    # Ensures SyntaxError is raised without dummify\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    with raises(SyntaxError):\n+        sy.lambdify(curlyv, curlyv)\n def test_python_keywords():\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n@@ -736,7 +751,22 @@ def test_python_keywords():\n     expr = python_if / 2\n     f = lambdify(python_if, expr)\n     assert f(4.0) == 2.0\n-\n+import sympy as sy\n+from sympy import raises\n+\n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    lam = sy.lambdify(curlyv, curlyv)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+    lam = sy.lambdify(curlyv, curlyv, dummify=True)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+\n+def test_curly_matrix_symbol_syntaxerror():\n+    # Ensures SyntaxError is raised without dummify\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    with raises(SyntaxError):\n+        sy.lambdify(curlyv, curlyv)\n \n def test_lambdify_docstring():\n     func = lambdify((w, x, y, z), w + x + y + z)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..efead77 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -24,6 +25,16 @@ def test_Rational():\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n \n+def test_Max_Min():\n+    # Test if Max function is printed in correct Mathematica syntax\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, -2)) == \"Max[x, -2]\"\n+    assert mcode(Max(-2, x)) == \"Max[-2, x]\"\n+    # Additional test cases\n+    assert mcode(Max(x, y, 3)) == \"Max[x, y, 3]\"\n+    assert mcode(Min(x, y, 3)) == \"Min[x, y, 3]\"\n+\n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..7755283 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n@@ -1726,6 +1728,12 @@ def test_latex_UnevaluatedExpr():\n     assert latex(x*he) == r\"x \\frac{1}{x}\"\n \n \n+def test_compilable_indexed_matrix_expression():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n def test_MatrixElement_printing():\n     # test cases for issue #11821\n     A = MatrixSymbol(\"A\", 1, 3)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..2448d4b 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -20,8 +21,17 @@ def test_idiff():\n     assert True in [sol.diff(x, 3).equals(explicit) for sol in solve(circ, y)]\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n-\n-def test_intersection():\n+    f = Function('f')\n+    g = Function('g')\n+    # Original test case checking for function form support\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+    \n+    # Test cases for Eq support\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x) == (x + 1) * exp(x - y)/(y + 1)\n+    assert idiff(Eq(f(x) * exp(f(x)), x * exp(x)), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..85e17c6 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,29 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.codegen import CCodeGen\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..c51e8a9 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,34 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+def test_intersection_duplicates_removal():\n+    # Imports needed for the test\n+    from sympy import Symbol, Eq, Intersection, FiniteSet, S, Piecewise\n \n-def test_issue_9623():\n+    x = Symbol('x')\n+    \n+    # Test case from the issue description\n+    assert Intersection({1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    \n+    # Additional test cases\n+    # Duplicates with multiple repeated elements\n+    assert Intersection({1, 1, 1}, {1, 1}, {x, 1}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    \n+    # No duplicates\n+    assert Intersection({1, 2}, {2, 3}, {3, 4}) == S.EmptySet  # Because no common element in all\n+\n+    # Sets with no common elements\n+    assert Intersection({1, 2}, {3, 4}) == S.EmptySet\n+\n+    # Sets with one common element\n+    assert Intersection({1, 2}, {2, 3}) == {2}\n+\n+    # Redundant elements in a single set\n+    assert Intersection({1, 2, 2}, {2, 3, 3}) == {2}\n+    \n+    # Symbolic intersection with duplicates\n+    assert Intersection({x, x}, {1}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "",
  "sympy__sympy-17139": "",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..2036f97 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -95,7 +96,16 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n-    # Point differences should be simplified\n+    # Test multiplication of Point with a number in different orders\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+    num = sympify(2.0)\n+\n+    # Test when number is on the right\n+    assert p1 + p2 * num == Point(2, 2)\n+\n+    # Test when number is on the left, should give the same result\n+    assert p1 + num * p2 == Point(2, 2)\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n     a, b = S.Half, Rational(1, 3)\n@@ -172,7 +182,16 @@ def test_point3D():\n \n     raises(ValueError, lambda: Point3D(0, 0, 0) + 10)\n \n-    # Point differences should be simplified\n+    # Test multiplication of Point with a number in different orders\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+    num = sympify(2.0)\n+\n+    # Test when number is on the right\n+    assert p1 + p2 * num == Point(2, 2)\n+\n+    # Test when number is on the left, should give the same result\n+    assert p1 + num * p2 == Point(2, 2)\n     assert Point3D(x*(x - 1), y, 2) - Point3D(x**2 - x, y + 1, 1) == \\\n         Point3D(0, -1, 1)\n \n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..1a20be7 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,7 +1894,29 @@ def test_normal():\n     assert e.normal() == e\n \n \n-def test_expr():\n+from sympy import Symbol, sympify, symbols\n+\n+def test_non_string_equality():\n+    # Existing test cases from the original test patch\n+    # ...\n+\n+    # New test case to verify the issue involving __repr__ evaluation in __eq__\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    x = Symbol('x')\n+    # Testing the equality with a class whose repr is 'x.y', expecting False\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    # Another case where __repr__ returns 'x', expecting False due to type mismatch\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (x == D()) is False\n+    assert (x != D()) is True\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n \n@@ -1902,4 +1924,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..7695653 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,16 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy import symbols\n+    x, y = symbols('x y', integer=True)\n+\n+    # Ensure that the diophantine function returns the same set of solutions\n+    # regardless of the order of symbols when permute=True\n+    expected_solution = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == expected_solution\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == expected_solution\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..3c004d8 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,15 @@\n+\n+def test_atoms():\n+    typename = 'unsigned int'\n+    sz = sizeof(typename)\n+    # Verify that atoms() returns object with no args and not subclasses of Atom\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n+    expr = Declaration(Variable('v', float64))\n+    assert expr.atoms() == {Variable('v', float64), float64, String('Declaration')}\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..8eed79a 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,14 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_single_element_BlockDiagMatrix():\n+    from sympy import Matrix, BlockDiagMatrix\n+    # Test case for BlockDiagMatrix with a single element\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M  # Assert that the conversion matches the original Matrix\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..de41a42 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -67,6 +68,18 @@ def test_Identity_index():\n \n \n def test_block_index():\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+\n+    # Test cases to verify correct symbolic indexing\n+    assert C[i, 0] == MatrixElement(C, i, 0)  # Should not resolve to A[i, 0] or B[i, 0]\n+    assert C[0, 0] == A[0, 0]\n+    assert C[1, 0] == B[0, 0]\n+\n+    # Additional edge cases\n+    assert C[n, 0] == MatrixElement(C, n, 0)  # Goes beyond the last block\n+    assert C[i, j] == MatrixElement(C, i, j)  # For general symbolic indices\n     I = Identity(3)\n     Z = ZeroMatrix(3, 3)\n     B = BlockMatrix([[I, I], [I, I]])\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..547dddf 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -317,7 +317,32 @@ def test_sign():\n     assert sign(d).func is sign or sign(d) == 0\n \n \n-def test_as_real_imag():\n+def test_sign_rewrite_abs():\n+    from sympy import Abs, Symbol, Piecewise, Eq\n+\n+    # Test with a real symbol\n+    x = Symbol('x', real=True)\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+\n+    # Test with a function of a symbol\n+    f = Function('f')(x)\n+    assert sign(f).rewrite(Abs) == Piecewise((0, Eq(f, 0)), (f/Abs(f), True))\n+\n+    # Test with complex numbers\n+    z = Symbol('z', complex=True, nonzero=True)\n+    assert sign(z).rewrite(Abs) == z / Abs(z)\n+\n+    # Test with zero input\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # Test with non-zero constant\n+    assert sign(3).rewrite(Abs) == 3 / Abs(3)\n+\n+    # Check that restoring previous tests does not affect functionality\n+    assert sign(1.2) == 1\n+    assert sign(-1.2) == -1\n+    assert sign(3*I) == I\n+    assert sign(-3*I) == -I\n     n = pi**1000\n     # the special code for working out the real\n     # and complex parts of a power with Integer exponent\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..2c0823a 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,6 +471,8 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n def test_partitions():\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n@@ -501,7 +503,14 @@ def test_partitions():\n         i.copy() for i in partitions(4) if all(k <= 3 for k in i)]\n \n \n-    # Consistency check on output of _partitions and RGS_unrank.\n+    # Test to ensure distinct dictionary objects are returned by partitions()\n+    def test_partitions_distinct_objects():\n+        p1 = list(partitions(6, k=2))\n+        p2 = list(partitions(6, k=2))\n+        for d1, d2 in zip(p1, p2):\n+            assert d1 is not d2, \"The dictionaries must be distinct objects\"\n+\n+    test_partitions_distinct_objects()\n     # This provides a sanity test on both routines.  Also verifies that\n     # the total number of partitions is the same in each case.\n     #    (from pkrathmann2)\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..8f026d1 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -253,8 +253,12 @@ def test_power_rewrite_exp():\n     assert all((1/func(x)).rewrite(exp) == 1/(func(x).rewrite(exp)) for func in\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n+from sympy import oo, S, zoo, power\n \n-def test_zero():\n+def test_issue_19572():\n+    # Test issue 19572\n+    assert 0**-oo == zoo\n+    assert power(0, -oo) == zoo\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..d87476b 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -20,7 +21,25 @@ from sympy.testing.pytest import XFAIL, raises, warns_deprecated_sympy\n k = PREFIXES[\"k\"]\n \n \n-def test_str_repr():\n+def test_convert_to_issue():\n+    # Original test case from the issue description\n+    expr = joule * second\n+    conv = convert_to(expr, joule)\n+    assert conv == expr\n+\n+    # Additional test cases to thoroughly cover the issue\n+    assert convert_to(joule * second, joule * second) == joule * second\n+    assert convert_to(joule * second, kg * m**2 / s) == kg * m**2 / s\n+    assert convert_to(joule * second, minute) == joule * minute / 60\n+\n+    # Check with incompatible units, expecting to return the original expression\n+    assert convert_to(joule * second, meter) == joule * second\n+\n+    # Check converting an addition of units \n+    assert convert_to(joule + joule * second, joule) == joule + joule * second\n+\n+    # Check nested expressions conversion\n+    assert convert_to((joule * second) ** 2, joule) == (joule * second) ** 2\n     assert str(kg) == \"kilogram\"\n \n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..ad52d4d 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,21 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+\n+def test_symbol_has_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    assert hasattr(s, '__slots__')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+def test_symbol_slots():\n+    s = Symbol('s')\n+    assert s.__slots__ == ('name',)\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..453a88c 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, oo, sin, exp)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,17 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_refine_complex_arguments():\n+    # Test cases related to the refine issue with complex arguments\n+    a, x = symbols('a x', real=True)\n+    \n+    # Testing Integral simplification\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    assert refine(J.doit(), Q.positive(a)) == 1 / (a**2 + 1)\n+    \n+    # Testing refining arg() with assumptions\n+    assert refine(arg(a), Q.positive(a)) == 0\n+    assert refine(arg(a), Q.negative(a)) == pi\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..c0db952 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -9,6 +10,39 @@ from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n def test_subs():\n+    # Test for issue with unexpected PolynomialError using Piecewise and subs\n+    from sympy import sinh, exp, Piecewise, symbols, clear_cache, PolynomialError\n+\n+    x, y, z = symbols('x y z', real=True)\n+\n+    # Clear the cache\n+    clear_cache()\n+\n+    # Create expression involving Piecewise and sinh\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+\n+    # Ensure no PolynomialError is raised on substitution\n+    try:\n+        expr.subs({1: 1.0})\n+        no_error = True\n+    except PolynomialError:\n+        no_error = False\n+\n+    assert no_error, \"PolynomialError was unexpectedly raised\"\n+\n+    # Additional variations to ensure robustness\n+    z_nonreal = symbols('z', real=False)\n+\n+    # Without real assumptions and clear cache\n+    clear_cache()\n+    expr_no_real = exp(sinh(Piecewise((x, y > x), (y, True)) / z_nonreal))\n+    try:\n+        expr_no_real.subs({1: 1.0})\n+        no_real_error = True\n+    except PolynomialError:\n+        no_real_error = False\n+\n+    assert no_real_error, \"PolynomialError was unexpectedly raised for non-real z\"\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..a4c0e8a 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -39,6 +41,25 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    comm_x = Symbol('x')\n+    \n+    # Test derivative of a numerical symbol\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    \n+    # Test derivative of a matrix symbol\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n+    \n+    # Further tests to ensure functionality\n+    # Test derivative with multiple layers\n+    B = MatrixSymbol('B', 2, 2)\n+    assert Derivative(Derivative(A, comm_x), comm_x).kind is MatrixKind(NumberKind)\n+    assert Derivative(A + B, comm_x).kind is MatrixKind(NumberKind)\n+\n+    # Test derivatives at higher order\n+    assert Derivative(A, comm_x, comm_x).kind is MatrixKind(NumberKind)\n+\n def test_Matrix_kind():\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..ddb904f 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -101,6 +101,21 @@ def test_monomials():\n \n     raises(ValueError, lambda: set(itermonomials([], [], 1)))\n     raises(ValueError, lambda: set(itermonomials([], [], 2)))\n+\n+    # Test cases for the reported issue with min_degrees argument\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x1**2,\n+        x2*x3**2, x3*x1**2, x3*x2**2, x1*x2*x3, x1**2*x3, x2**2*x3\n+    }\n+\n+    # Additional test cases to ensure correct behavior\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x1**2, x3*x1**2,\n+        x2*x3**2, x3*x2**2, x1*x2*x3, x1**2*x3, x2**2*x3, x1**4, x2**4,\n+        x3**4, x1**3*x2, x1**3*x3, x1*x2**3, x1*x3**3, x2**3*x3, x2*x3**3,\n+        x1**2*x2*x3, x1*x2**2*x3, x1*x2*x3**2\n+    }\n     raises(ValueError, lambda: set(itermonomials([], [], 3)))\n \n     raises(ValueError, lambda: set(itermonomials([x, y], [0, 1], [1, 2])))\n",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7057531 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..4b8ed27 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -348,6 +348,25 @@ def test_cse_MatrixSymbol():\n     assert cse(B) == ([], [B])\n \n def test_cse_MatrixExpr():\n+    A = MatrixSymbol('A', 4, 4)\n+    B = MatrixSymbol('B', 4, 4)\n+    expr = A * B\n+\n+    replacements, reduced_exprs = cse(expr)\n+    assert len(replacements) == 0\n+    assert reduced_exprs == [expr]\n+\n+    elements_A = [A[i, j] for i in range(4) for j in range(4)]\n+    elements_B = [B[i, j] for i in range(4) for j in range(4)]\n+    expr_expanded = sum(A[i, j] * B[j, k] for i in range(4) for j in range(4) for k in range(4))\n+\n+    replacements_exp, reduced_exprs_exp = cse(expr_expanded)\n+\n+    # Check that common subexpressions are extracted correctly\n+    assert len(replacements_exp) > 0\n+    assert all(r[0].is_Symbol for r in replacements_exp)\n+    assert any(elem in r[1].free_symbols for elem in elements_A for r in replacements_exp)\n+    assert any(elem in r[1].free_symbols for elem in elements_B for r in replacements_exp)\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..aa5440b 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -17,6 +18,12 @@ array_types = [\n     MutableSparseNDimArray\n ]\n \n+def test_empty_array_initialization():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n \n def test_array_negative_indices():\n     for ArrayType in array_types:\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..2b2cbcf 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,15 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_lambdify_single_element_tuple():\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    assert 'return (1,)' in inspect.getsource(f_single)\n+\n+def test_lambdify_multi_element_tuple():\n+    f_multi = lambdify([], (1, 2))\n+    assert f_multi() == (1, 2)\n+    assert 'return (1, 2)' in inspect.getsource(f_multi)\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..e8e356d 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,31 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp, Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..f334565 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -41,7 +41,37 @@ def test_tensor_product_abstract():\n     assert TP(A, B).subs(A, C) == TP(C, B)\n \n \n-def test_tensor_product_expand():\n+def test_tensor_product_issue_24142():\n+    from sympy import symbols, expand\n+    from sympy.physics.quantum import TensorProduct as TP, Operator\n+    \n+    A, B, C = symbols('A B C', commutative=False)\n+    X = Operator('X')\n+    \n+    # Original test patch\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test cases based on the issue\n+    assert TP(2*X - B, X + B).expand(tensorproduct=True) == \\\n+        2*TP(X, X) + 2*TP(X, B) - TP(B, X) - TP(B, B)\n+    assert TP(A - B, A + 2*B).expand(tensorproduct=True) == \\\n+        TP(A, A) + 2*TP(A, B) - TP(B, A) - 2*TP(B, B)\n+    \n+    # Test with scalar multiplication\n+    assert TP(2 * X - 3 * B, 4 * X + 5 * B).expand(tensorproduct=True) == \\\n+        8 * TP(X, X) + 10 * TP(X, B) - 12 * TP(B, X) - 15 * TP(B, B)\n+    \n+    # Test consistency with single factor\n+    assert TP(A, A + B).expand(tensorproduct=True) == \\\n+        TP(A, A) + TP(A, B)\n+\n+    # Test with zero tensor factor (should return zero)\n+    assert TP(A - A, B + C).expand(tensorproduct=True) == 0\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..4f946c0 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -10,7 +11,7 @@ from sympy.functions.elementary.exponential import (exp, log)\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.functions.elementary.trigonometric import sin\n from sympy.integrals.integrals import integrate\n-from sympy.physics.units import (amount_of_substance, area, convert_to, find_unit,\n+from sympy.physics.units import (Quantity, amount_of_substance, area, convert_to, find_unit,\n                                  volume, kilometer, joule, molar_gas_constant,\n                                  vacuum_permittivity, elementary_charge, volt,\n                                  ohm)\n@@ -562,7 +563,44 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr1 = A1 * T1 + V1\n+    try:\n+        SI._collect_factor_and_dimension(expr1)\n+        print(\"Test passed, no ValueError raised.\")\n+    except ValueError:\n+        print(\"Test failed, ValueError was raised.\")\n+\n+def test_issue_24211_alternative():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..4478701 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,26 @@\n+\n+def test_milli_prefix():\n+    # Test with watt\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+\n+    # Ensure it does not incorrectly evaluate to 1\n+    assert milli * W != 1\n+\n+    # Test with volt\n+    assert milli * volt == volt / 1000\n+    assert volt * milli == volt / 1000\n+\n+    # Ensure it does not incorrectly evaluate to 1\n+    assert milli * volt != 1\n+\n+# Add more relevant units to test if necessary...\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..c9714db 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -204,8 +204,30 @@ class ModelInheritanceTests(TestCase):\n \n         self.assertEqual(A.attr.called, (A, 'attr'))\n \n-\n-class ModelInheritanceDataTests(TestCase):\n+class ModelInheritanceTests(TestCase):\n+    def test_inherited_ordering_pk_desc(self):\n+        # Create instances of Parent and Child, ensuring they have unique IDs.\n+        p1 = Parent.objects.create(first_name='Joe', email='joe@email.com')\n+        p2 = Parent.objects.create(first_name='Jon', email='jon@email.com')\n+        c1 = Child.objects.create(first_name='Anna', email='anna@email.com')\n+        c2 = Child.objects.create(first_name='Elsa', email='elsa@email.com')\n+        \n+        # Verify the ordering of the Child objects.\n+        qs = Child.objects.all()\n+        self.assertSequenceEqual(qs, [c2, c1])\n+        \n+        # Build the expected ORDER BY SQL string.\n+        expected_order_by_sql = 'ORDER BY %s.%s DESC' % (\n+            connection.ops.quote_name(Parent._meta.db_table),\n+            connection.ops.quote_name(Parent._meta.pk.column),\n+        )\n+        \n+        # Check if the generated query contains the expected ORDER BY clause.\n+        self.assertIn(expected_order_by_sql, str(qs.query))\n+        \n+        # Also verify Parent ordering for completeness.\n+        qs_parent = Parent.objects.all()\n+        self.assertSequenceEqual(qs_parent, [p2, p1])\n     @classmethod\n     def setUpTestData(cls):\n         cls.restaurant = Restaurant.objects.create(\n",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..ec0ca5e 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -14,6 +14,7 @@ undefined -- not random, just undefined.\n \"\"\"\n \n from django.db import models\n+from django.db.models import F\n \n \n class Author(models.Model):\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..2d15a5b 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,6 +3202,36 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n+    def test_boundfield_subwidget_id_for_label_custom_id(self):\n+        \"\"\"\n+        Test that the id_for_label uses the custom id if provided by ChoiceWidget.options\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_field_choice'}),\n+            )\n+\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_choice_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_choice_1')\n+\n+    def test_boundfield_subwidget_id_for_label_auto_id(self):\n+        \"\"\"\n+        Test that the id_for_label uses the auto_id when no custom id is present.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='auto_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'auto_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'auto_field_1')\n+\n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n             first_name = CharField()\n",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..bfb8046 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,35 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+\n+@override_settings(DATABASE_ROUTERS=[DefaultDBRouter()])\n+class MigrateCommandDatabaseParameterTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        # Setup initial conditions for the test\n+        self.connection_default = connections['default']\n+        self.connection_other = connections['other']\n+\n+    def test_migrate_command_respects_database_parameter(self):\n+        # Before running migrate, ensure there are no permissions on 'other'\n+        Permission.objects.using('other').delete()\n+        self.assertEqual(Permission.objects.using('other').count(), 0)\n+\n+        # Simulate running migrate with the 'other' database specified\n+        call_command('migrate', database='other', verbosity=0)\n+\n+        # Ensure that permissions were created on the 'other' database\n+        self.assertGreater(Permission.objects.using('other').count(), 0)\n+\n+    def test_migrate_command_does_not_affect_default_db(self):\n+        # Ensure default database is unaffected\n+        initial_default_count = Permission.objects.using('default').count()\n+\n+        # Simulate running migrate with the 'other' database specified\n+        call_command('migrate', database='other', verbosity=0)\n+\n+        # Ensure that default database remains unchanged\n+        self.assertEqual(Permission.objects.using('default').count(), initial_default_count)\n",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..13c3072 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -630,12 +630,70 @@ def test_colorbar_format(fmt):\n     # make sure that if we change the clim of the mappable that the\n     # formatting is *not* lost:\n     im.set_clim([4, 200])\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.colors import LogNorm, Normalize\n+from matplotlib import colors as mcolors\n+\n+def test_colorbar_update_after_norm_change():\n+    # Create a random image with log-normal distribution\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots()\n+    im = ax.imshow(img, cmap='gray')\n+    cbar = fig.colorbar(im, ax=ax)\n+\n+    # Change the normalization to LogNorm\n+    im.norm = LogNorm(vmin=img.min(), vmax=img.max())\n+    cbar.update_normal(im)\n     fig.canvas.draw()\n+\n+    # Check that the colorbar's scale is log\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+    assert cbar.ax.yaxis.get_ticklabels()[0].get_text() == '$\\\\mathdefault{10^{\\lfloor \\log_{10}({:.2e})\\rfloor}}$'.format(img.min())\n+\n+    # Change the normalization back to linear\n+    im.norm = Normalize(vmin=img.min(), vmax=img.max())\n+    cbar.update_normal(im)\n+    fig.canvas.draw()\n+\n+    # Check that the colorbar's scale is linear\n+    assert cbar.ax.yaxis.get_scale() == 'linear'\n+    assert cbar.ax.yaxis.get_ticklabels()[0].get_text() == '{:.2e}'.format(img.min())\n     assert cbar.ax.yaxis.get_ticklabels()[4].get_text() == '2.00e+02'\n \n     # but if we change the norm:\n     im.set_norm(LogNorm(vmin=0.1, vmax=10))\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.colors import LogNorm, Normalize\n+from matplotlib import colors as mcolors\n+\n+def test_colorbar_update_after_norm_change():\n+    # Create a random image with log-normal distribution\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots()\n+    im = ax.imshow(img, cmap='gray')\n+    cbar = fig.colorbar(im, ax=ax)\n+\n+    # Change the normalization to LogNorm\n+    im.norm = LogNorm(vmin=img.min(), vmax=img.max())\n+    cbar.update_normal(im)\n     fig.canvas.draw()\n+\n+    # Check that the colorbar's scale is log\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+    assert cbar.ax.yaxis.get_ticklabels()[0].get_text() == '$\\\\mathdefault{10^{\\lfloor \\log_{10}({:.2e})\\rfloor}}$'.format(img.min())\n+\n+    # Change the normalization back to linear\n+    im.norm = Normalize(vmin=img.min(), vmax=img.max())\n+    cbar.update_normal(im)\n+    fig.canvas.draw()\n+\n+    # Check that the colorbar's scale is linear\n+    assert cbar.ax.yaxis.get_scale() == 'linear'\n+    assert cbar.ax.yaxis.get_ticklabels()[0].get_text() == '{:.2e}'.format(img.min())\n     assert (cbar.ax.yaxis.get_ticklabels()[0].get_text() ==\n             '$\\\\mathdefault{10^{-2}}$')\n \n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..66ead58 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,37 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_transform_output():\n+    \"\"\"Test FeatureUnion with a transformer producing pandas output.\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn import set_config\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            result = X[\"value\"].groupby(X[\"date\"]).sum().reset_index()\n+            return result\n+\n+    # Verify that using 'pandas' as output does not cause any issues\n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    result = union.fit_transform(data)\n+\n+    expected = pd.DataFrame({\n+        \"date\": pd.date_range(start=\"2020-01-01\", periods=4, freq=\"D\"),\n+        \"value\": [240, 240, 240, 240]\n+    })\n+\n+    pd.testing.assert_frame_equal(result, expected)\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..8be325c 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,24 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.pycode import ModuleAnalyzer\n+\n+def do_autodoc(app, objtype, fullname, options=None):\n+    \"\"\"Create documents by auto directive\"\"\"\n+    options = options or {}\n+    app.env.temp_data[\"docname\"] = \"mock_docname\"\n+    app.config.autodoc_mock_imports = [\"target\"]\n+    analyzer = ModuleAnalyzer.for_module(\"target\")\n+    analyzer.analyze()\n+    app.env.app = app\n+    app.env.app.env = app.env\n+    doccls = app.registry.create_documenters(app.env, analyzer)\n+    doccls.genrst(sorted(analyzer.tags()), objtype, fullname, options)\n+    return app.env.app.env.domaindata[\"py\"][\"objects\"][fullname]\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n@@ -132,6 +150,7 @@ def test_decorators(app):\n     ]\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='Annotation syntax is supported since python3.6')\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n     options = {\"members\": None}\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..9b7efc7 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,6 +358,25 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n+def test_issue_15129_trigsimp_methods():\n+    # Original test cases\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+    # Additional test cases to verify the issue fix\n+    # Direct computation test\n+    r3 = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    assert trigsimp(r3) == cos(S(1)/50)\n+\n+    # Test with acos function\n+    acos_expr = acos(r3)\n+    assert trigsimp(acos_expr) == acos(cos(S(1)/50))\n+\n \n def test_exptrigsimp():\n     def valid(a, b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..96d0209 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4816,6 +4816,32 @@ ____  ____     \\n\\\n \u203e\u203e\u203e\u203e  \u203e\u203e\u203e\u203e     \\n\\\n y = 1 x = 0    \\\n \"\"\")\n+    # Test case for the pretty printing alignment issue with Sum and addition\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ascii_str = \\\n+\"\"\"\\\n+  oo   \\n\\\n+ ___   \\n\\\n+ \\\\  `  \\n\\\n+  \\\\   x\\n\\\n+  /    \\n\\\n+ /__,  \\n\\\n+x = 1  + 3\n+\"\"\"\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e    \\n\\\n+ ___   \\n\\\n+ \u2572     \\n\\\n+  \u2572   x\\n\\\n+  \u2571    \\n\\\n+ \u2571     \\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  + 3\n+\"\"\")\n+    assert pretty(expr) == ascii_str\n+    assert upretty(expr) == ucode_str\n+\n     expr = Sum(1/(1 + 1/(\n         1 + 1/k)) + 1, (k, 111, 1 + 1/n), (k, 1/(1 + m), oo)) + 1/(1 + 1/k)\n     ascii_str = \\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..5cd6cdf 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,9 +1,11 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from django.db.models import Max\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..c9fe5c6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,7 +546,26 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_as_sql(self):\n+        from django.db import connection\n+        from django.test import TestCase\n+        from .models import Employee  # Assuming Employee model exists\n+        \n+        # Create some test data\n+        Employee.objects.create(name=\"Alice\")\n+        Employee.objects.create(name=\"Bob\")\n+        \n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        \n+        # Test that subquery attribute is set correctly\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        \n+        # Test generated SQL, ensuring it starts with '(SELECT ' and ends appropriately\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertTrue(sql.startswith('(SELECT '))\n+        self.assertTrue(sql.endswith(')'))\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 0ecd041..cac894b 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -434,7 +434,34 @@ class InspectDBTestCase(TestCase):\n         self.assertIn(\"# The error was:\", output)\n \n \n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import TransactionTestCase\n+from unittest import mock\n+\n class InspectDBTransactionalTests(TransactionTestCase):\n+    def test_related_name_generation_for_same_relations(self):\n+        \"\"\"Test inspectdb generates related_name for same model relations.\"\"\"\n+        with connection.cursor() as cursor:\n+            cursor.execute(\n+                \"CREATE TABLE test_model (\"\n+                \"id serial PRIMARY KEY, \"\n+                \"related_id integer REFERENCES test_model(id), \"\n+                \"another_related_id integer REFERENCES test_model(id)\"\n+                \");\"\n+            )\n+        out = StringIO()\n+        call_command(\"inspectdb\", \"test_model\", stdout=out)\n+        output = out.getvalue()\n+\n+        self.assertIn(\n+            \"related = models.ForeignKey('TestModel', models.DO_NOTHING, related_name='testmodel_related')\",\n+            output,\n+        )\n+        self.assertIn(\n+            \"another_related = models.ForeignKey('TestModel', models.DO_NOTHING, related_name='testmodel_another_related')\",\n+            output,\n+        )\n     available_apps = [\"inspectdb\"]\n \n     def test_include_views(self):\n",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..eac2b3b 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,7 +153,12 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                ).select_related('tournament_pool', 'tournament_pool__tournament'))\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +169,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..3263a3b 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn._oldcore import categorical_order\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1622,8 +1624,33 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         scatterplot(data=long_df, x=\"x\", y=\"y\", c=long_df[\"y\"], cmap=cmap)\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n-\n-    def test_linewidths(self, long_df):\n+    \n+    def test_hue_with_categorical_in_map(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+        \n+        # Attempt to reproduce the issue\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            assert True, \"No error should occur when hue is categorical in map\"\n+        except Exception as e:\n+            assert False, f\"An error occurred: {e}\"\n+\n+    def test_hue_with_numerical_in_map(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+        \n+        # Convert 'species' to a numerical type to verify no issue arises\n+        iris['species_num'] = iris['species'].astype('category').cat.codes\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species_num\"])\n+            g.map(sns.regplot, scatter=False)\n+            assert True, \"No error should occur when hue is numerical in map\"\n+        except Exception as e:\n+            assert False, f\"An error occurred: {e}\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "",
  "pytest-dev__pytest-6116": "",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..223ab5f 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,29 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, symbols, Sum, MatrixSymbol, assuming, ask, Q as Query\n+from sympy.matrices.expressions import Identity\n \n def test_Identity_doit():\n+    # Test Case based on the issue\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+    In = Identity(n)\n+    \n+    with assuming(Query.orthogonal(M)):\n+        e = (M.T * M).doit().simplify()\n+        \n+        # Assert that the refined matrix is identity\n+        assert e == In\n+        \n+        # Assert on diagonal element sums\n+        diag_sum = Sum(e[i, i], (i, 0, n-1)).doit()\n+        assert diag_sum == n\n+        \n+        # Assert total sum of elements\n+        total_sum = Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+        assert total_sum == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..8e74087 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,11 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_21537_fraction_parsing():\n+    from sympy.parsing.latex import parse_latex\n+    expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    expected = ((a**3 + b)/c)/(1/(c**2))\n+    assert expr == expected, f\"Expected {expected}, but got {expr}\"\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}