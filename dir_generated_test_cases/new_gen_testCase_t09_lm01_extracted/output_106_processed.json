{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..a965efd 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -135,7 +135,18 @@ def test_separable(compound_model, result):\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n \n-def test_custom_model_separable():\n+def test_nested_compound_model_separable():\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    \n+    # Expected result based on issue description\n+    expected_matrix = np.array([[True, True, False, False],\n+                                [True, True, False, False],\n+                                [False, False, True, True],\n+                                [False, False, True, True]])\n+    \n+    # Perform the test\n+    assert_allclose(separability_matrix(nested_cm), expected_matrix)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..54f006a 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -43,7 +43,51 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n \n-def test_roundtrip(tmp_path):\n+import pytest\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+import numpy as np\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    READ TERR 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n+\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..3d9d917 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,24 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_d_exponent_handling(self):\n+        \"\"\"Test that D exponents are correctly handled in ASCII tables.\"\"\"\n+        a1 = np.array(['value1', 'value2'])\n+        r1 = np.array([123.456, 789.012])\n+        c1 = fits.Column(name='label', format='A6', array=a1)\n+        c2 = fits.Column(name='value', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1, c2])\n+\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+        with open(self.temp('test_d_exponent.fits'), 'rt') as f:\n+            content = f.read()\n+            # Check that the 'E' exponent has been replaced by 'D'\n+            assert '1.2345600000000000D+02' in content\n+            assert '7.8901200000000000D+02' in content\n+        \n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..64bc82b 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,6 +1100,31 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n+        \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS should be 0o644 if not otherwise specified.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):  # Ensure it's unset\n+            # Assuming the default value is now set to 0o644\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+            \n+    def test_temporary_file_upload_permissions(self):\n+        \"\"\"\n+        Test that temporary uploaded files use the correct permissions.\n+        \"\"\"\n+        temp_file = tempfile.NamedTemporaryFile()\n+        os.chmod(temp_file.name, 0o600)  # Simulate tempfile default behavior\n+        \n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o644):\n+            file_mode = os.stat(temp_file.name).st_mode & 0o777\n+            self.assertEqual(file_mode, 0o600)  # Validate initial temporary permissions\n+        \n+            # Rename simulates saving, should change to 0o644 if handled correctly\n+            temp_file.rename = f\"{temp_file.name}_final\"\n+            os.chmod(temp_file.rename, 0o644)\n+            final_mode = os.stat(temp_file.rename).st_mode & 0o777\n+            self.assertEqual(final_mode, 0o644)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..35b56cc 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -514,6 +514,22 @@ class MigrateTests(MigrationTestBase):\n             out.getvalue()\n         )\n \n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_sqlmigrate_for_non_transactional_databases(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support\n+        transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_plan_app_label_no_migrations(self):\n         out = io.StringIO()\n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..a5427eb 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\"\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,9 +248,15 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = ['newline\\u000A', 'newline\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +264,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..783cdac 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -366,6 +366,10 @@ class HttpResponseTests(unittest.TestCase):\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_iter_content(self):\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..fe969e9 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -464,7 +466,35 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_with_no_dependencies(self):\n+        # Ensure that after deleting an instance with no dependencies, the PK is set to None.\n+        m = M.objects.create()\n+        m.delete()\n+        self.assertIsNone(m.pk)\n+        \n+    def test_delete_instance_with_foreign_key_dependency(self):\n+        # Ensure that models with foreign key dependencies retain pk state post-deletion.\n+        parent = Parent.objects.create()\n+        child = Child.objects.create(parent=parent)\n+        child.delete()\n+        self.assertIsNone(child.pk)  # Child has dependencies, but pk should still become None post-delete.\n+        \n+    def test_delete_saved_instance(self):\n+        # Ensure the previous instance with pk=None isn't saved accidentally.\n+        m = M.objects.create()\n+        m_pk = m.pk\n+        m.delete()\n+        m.save()  # should raise an error due to saving with pk=None\n+        with self.assertRaises(IntegrityError):\n+            M.objects.get(pk=m_pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..fe11caa 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.test.utils import captured_stdout\n \n from .models import Proxy, UserProxy\n \n@@ -140,7 +142,56 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Test migration with permissions that already exist.\n+        - Ensures that the migration handles already existing permissions without failure.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_update_permissions_does_not_duplicate(self):\n+        \"\"\"\n+        Test that running the migration multiple times \n+        does not cause duplicate entries.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        # Run migration first time\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        \n+        # Count permissions before second run\n+        initial_count = Permission.objects.filter(content_type=proxy_model_content_type).count()\n+\n+        # Run migration second time\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+\n+        # Count permissions after second run\n+        final_count = Permission.objects.filter(content_type=proxy_model_content_type).count()\n+\n+        # Ensure no duplicates created\n+        self.assertEqual(initial_count, final_count)\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..3ce7417 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -3,6 +3,7 @@ import os\n import py_compile\n import shutil\n import sys\n+import sys\n import tempfile\n import threading\n import time\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..ae4e51d 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -134,6 +134,22 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n     def test_main_module_is_resolved(self):\n         main_module = sys.modules['__main__']\n+\n+    def test_iter_modules_and_files_with_null_bytes(self):\n+        # Additional test cases to simulate the issue with an embedded null byte\n+        paths_with_null_bytes = [\n+            'normal_path.py',\n+            '\\0embedded_null_byte.py',\n+            '/dir\\0ectory/embedded_null_byte.py',\n+        ]\n+        for path in paths_with_null_bytes:\n+            with self.subTest(path=path):\n+                try:\n+                    result = autoreload.iter_modules_and_files((), frozenset([path]))\n+                    self.assertNotIn(Path(path).resolve(strict=False).absolute(), result)\n+                except ValueError as e:\n+                    # Ensures that the ValueError does not occur\n+                    self.fail(f\"iter_modules_and_files raised ValueError unexpectedly for path {path}: {e}\")\n         self.assertFileFound(Path(main_module.__file__))\n \n     def test_main_module_without_file_is_not_resolved(self):\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..9ad9103 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -10,6 +10,8 @@ from pathlib import Path\n from unittest import mock\n \n from django.core import mail\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db import DatabaseError, connection\n from django.shortcuts import render\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..6861a37 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -334,6 +334,62 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_max_length_too_small(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[('ABC', 'Should be too long'), ('OK', 'Good')]\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_choices_max_length_sufficient(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=3,\n+                choices=[('ABC', 'Perfect length'), ('OK', 'Good')]\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n+    def test_nested_choices_max_length_too_small(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=4,\n+                choices=[\n+                    ('Grouped', [('Longer', 'Longer value')]),\n+                ]\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_max_length_sufficient(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=6,\n+                choices=[\n+                    ('Grouped', [('Longer', 'Longer value')]),\n+                ]\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n     @unittest.skipUnless(connection.vendor == 'mysql',\n                          \"Test valid only for MySQL\")\n     def test_too_long_char_field_under_mysql(self):\n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..b2a4f07 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -316,9 +317,32 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Set up different current times for the tests\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        \n+        # Test cases from initial description with RFC 850 dates\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..b3d6f32 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -40,7 +40,28 @@ class Gender(models.TextChoices):\n     __empty__ = '(Undeclared)'\n \n \n-class ChoicesTests(SimpleTestCase):\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumFieldTests(SimpleTestCase):\n+    def setUp(self):\n+        # Equivalent setup phase using Django's testing mechanisms can be achieved through TestCase\n+        MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, MyChoice.FIRST_CHOICE)\n+\n+    def test_retrieved_object_is_str(self):\n+        # Simulate retrieval and check that the retrieved value is still a string\n+        my_object = MyObject.objects.get(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, MyChoice.FIRST_CHOICE)\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "",
  "django__django-12286": "",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..3a5064f 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,6 +176,23 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n+    def test_json_display_for_field_readonly(self):\n+        tests = [\n+            # Test valid JSON formatting\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),\n+            ({\"a\": {\"b\": \"c\"}}, '{\"a\": {\"b\": \"c\"}}'),\n+            ([\"a\", \"b\"], '[\"a\", \"b\"]'),\n+            # Invalid JSON remains unchanged\n+            ({(\"a\", \"b\"): \"c\"}, \"{('a', 'b'): 'c'}\"),\n+            (None, self.empty_value),  # Null should return empty_value_display\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    expected_display,\n+                )\n+\n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..1022ee8 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -18,6 +20,52 @@ def get_connection_copy():\n     return test_connection\n \n \n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_simple_foreign_key(self):\n+        # Test simple foreign key dependencies\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": 2}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=2)\n+        obj_ref = ObjectReference.objects.get(pk=2)\n+        self.assertEqual(obj_ref.obj, obj)\n+                \n class TestDbSignatureTests(SimpleTestCase):\n     def test_default_name(self):\n         # A test db name isn't set.\n",
  "django__django-12497": "",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..a25282d 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1241,6 +1241,41 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n     def test_cleanse_setting_recurses_in_dictionary(self):\n         reporter_filter = SafeExceptionReporterFilter()\n         initial = {'login': 'cooper', 'password': 'secret'}\n",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..d2c7220 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -45,8 +45,94 @@ class MigrationTestBase(TransactionTestCase):\n \n     def assertColumnNotExists(self, table, column, using='default'):\n         self.assertNotIn(column, [c.name for c in self.get_table_description(table, using=using)])\n-\n-    def _get_column_allows_null(self, table, column, using):\n+from django.test import TestCase\n+from django.db import migrations, models, connection\n+from django.db.utils import OperationalError\n+from django.test.utils import override_settings\n+from unittest import skipUnless\n+from django.db import connections\n+...\n+\n+class TestMigrationIssue(TestCase):\n+    available_apps = ['myapp']\n+\n+    def set_up_test_model(self, app_label, unique_together=False):\n+        \"\"\"Sets up a test model state having unique_together.\"\"\"\n+        return self.apply_operations(\n+            app_label,\n+            None,\n+            operations=[\n+                migrations.CreateModel(\n+                    'Pony',\n+                    fields=[\n+                        ('id', models.AutoField(primary_key=True)),\n+                        ('pink', models.CharField(max_length=20)),\n+                        ('weight', models.IntegerField(default=0)),\n+                    ],\n+                    options={\n+                        'unique_together': {('pink', 'weight')} if unique_together else set(),\n+                    },\n+                ),\n+            ],\n+        )\n+\n+    def test_unique_and_index_together(self):\n+        \"\"\"Test removing index_together when both unique_together and index_together are on the same fields.\"\"\"\n+        app_label = 'test_unique_and_index'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        \n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Attempt to remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            try:\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+                index_deleted = True\n+            except OperationalError:\n+                index_deleted = False\n+        self.assertTrue(index_deleted)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+    def test_moving_index_declaration(self):\n+        \"\"\"Test moving index declaration from index_together to indexes option.\"\"\"\n+        app_label = 'test_moving_index_declaration'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label)\n+        \n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Move index declaration to indexes option without dropping the index\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterModelOptions(\n+            name='pony',\n+            indexes=[\n+                models.Index(fields=['pink', 'weight'], name='%s_pony_pink_weight_idx' % app_label),\n+            ],\n+        )\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n         return [c.null_ok for c in self.get_table_description(table, using=using) if c.name == column][0]\n \n     def assertColumnNull(self, table, column, using='default'):\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..7584e04 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,23 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_delete_zero_objects_with_foreign_keys(self):\n+        \"\"\"\n+        Test deleting a queryset where zero objects have foreign keys, ensuring consistent result.\n+        \"\"\"\n+        # Assuming models with foreign keys are R and HiddenUser\n+        deleted, deleted_objs = R.objects.filter(id=-1).delete()  # Query that results in zero deletions\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {})\n+\n+    def test_delete_zero_objects_without_foreign_keys(self):\n+        \"\"\"\n+        Test deleting a queryset where zero objects have NO foreign keys, ensuring consistent result.\n+        \"\"\"\n+        # Assuming models without foreign keys is A or a simple model\n+        deleted, deleted_objs = A.objects.filter(id=-1).delete()  # Query that results in zero deletions\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {})\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7fb65b7..01a12d3 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1928,12 +1928,71 @@ class Model(metaclass=ModelBase):\n                 )\n         return errors\n \n-\n-############################################\n-# HELPER FUNCTIONS (CURRIED MODEL METHODS) #\n-############################################\n-\n-# ORDERING METHODS #########################\n+class TestUniqueConstraintValidation(TestCase):\n+\n+    def test_unique_constraint_with_nonexistent_field(self):\n+        class Model(models.Model):\n+            class Meta:\n+                constraints = [models.UniqueConstraint(fields=['nonexistent_field'], name='missing_field_check')]\n+\n+        errors = Model.check()\n+        self.assertEqual(errors, [\n+            Error(\n+                \"'constraints' refers to the nonexistent field 'nonexistent_field'.\",\n+                obj=Model,\n+                id='models.E012',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_with_m2m_field(self):\n+        class Model(models.Model):\n+            m2m = models.ManyToManyField('self')\n+\n+            class Meta:\n+                constraints = [models.UniqueConstraint(fields=['m2m'], name='m2m_field_check')]\n+\n+        errors = Model.check()\n+        self.assertEqual(errors, [\n+            Error(\n+                \"'constraints' refers to a ManyToManyField 'm2m', but ManyToManyFields are not permitted in 'constraints'.\",\n+                obj=Model,\n+                id='models.E013',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_with_non_local_field(self):\n+        class Parent(models.Model):\n+            field1 = models.IntegerField()\n+\n+        class Child(Parent):\n+            field2 = models.IntegerField()\n+\n+            class Meta:\n+                constraints = [models.UniqueConstraint(fields=['field2', 'field1'], name='child_constraints_check')]\n+\n+        errors = Child.check()\n+        self.assertEqual(errors, [\n+            Error(\n+                \"'constraints' refers to field 'field1' which is not local to model 'Child'.\",\n+                hint='This issue may be caused by multi-table inheritance.',\n+                obj=Child,\n+                id='models.E016',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_with_valid_fk(self):\n+        class Target(models.Model):\n+            pass\n+\n+        class Model(models.Model):\n+            fk_1 = models.ForeignKey(Target, models.CASCADE, related_name='target_1')\n+            fk_2 = models.ForeignKey(Target, models.CASCADE, related_name='target_2')\n+\n+            class Meta:\n+                constraints = [models.UniqueConstraint(fields=['fk_1', 'fk_2'], name='valid_fks_check')]\n+\n+        errors = Model.check()\n+        self.assertEqual(errors, [])\n \n def method_set_order(self, ordered_obj, id_list, using=None):\n     if using is None:\n",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..50d1c07 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,45 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_async_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_async_static_file_not_found(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/nonexistent.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..0f03af3 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -198,7 +198,17 @@ class TestUtilsText(SimpleTestCase):\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n         )\n-        for value, output, is_unicode in items:\n+        additional_items = (\n+            # Test cases focusing on leading/trailing dashes and underscores\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('---another---test___', 'another-test', False),\n+            ('___---mixed_case---___', 'mixed-case', False),\n+            ('-Test with leading-', 'test-with-leading', False),\n+            ('_underscore and dash-', 'underscore-and-dash', False),\n+            ('normal-case', 'normal-case', False),\n+        )\n+        \n+        for value, output, is_unicode in items + additional_items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n         # interning the result may be useful, e.g. when fed to Path.\n         self.assertEqual(sys.intern(text.slugify('a')), 'a')\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..9c69b6b 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -39,6 +40,16 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    @skipUnlessDBFeature('supports_select_union')\n+    def test_union_none_combined(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        # Combining the QuerySet using union\n+        combined_qs = qs1.union(qs2)\n+        # Call none() on the combined queryset and check if it results in an empty queryset\n+        none_qs = combined_qs.none()\n+        self.assertEqual(list(none_qs), [])\n+\n     @skipUnlessDBFeature('supports_select_difference')\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n@@ -63,6 +74,16 @@ class QuerySetSetOperationTests(TestCase):\n         self.assertEqual(len(qs2.intersection(qs2)), 0)\n         self.assertEqual(len(qs3.intersection(qs3)), 0)\n \n+    @skipUnlessDBFeature('supports_select_union')\n+    def test_union_none_combined(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        # Combining the QuerySet using union\n+        combined_qs = qs1.union(qs2)\n+        # Call none() on the combined queryset and check if it results in an empty queryset\n+        none_qs = combined_qs.none()\n+        self.assertEqual(list(none_qs), [])\n+\n     @skipUnlessDBFeature('supports_select_difference')\n     def test_difference_with_empty_qs(self):\n         qs1 = Number.objects.all()\n@@ -75,6 +96,16 @@ class QuerySetSetOperationTests(TestCase):\n         self.assertEqual(len(qs2.difference(qs2)), 0)\n         self.assertEqual(len(qs3.difference(qs3)), 0)\n \n+    @skipUnlessDBFeature('supports_select_union')\n+    def test_union_none_combined(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        # Combining the QuerySet using union\n+        combined_qs = qs1.union(qs2)\n+        # Call none() on the combined queryset and check if it results in an empty queryset\n+        none_qs = combined_qs.none()\n+        self.assertEqual(list(none_qs), [])\n+\n     @skipUnlessDBFeature('supports_select_difference')\n     def test_difference_with_values(self):\n         ReservedName.objects.create(name='a', order=2)\n@@ -208,6 +239,16 @@ class QuerySetSetOperationTests(TestCase):\n         qs = Number.objects.filter(pk__in=[])\n         self.assertEqual(qs.union(qs).count(), 0)\n \n+    @skipUnlessDBFeature('supports_select_union')\n+    def test_union_none_combined(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        # Combining the QuerySet using union\n+        combined_qs = qs1.union(qs2)\n+        # Call none() on the combined queryset and check if it results in an empty queryset\n+        none_qs = combined_qs.none()\n+        self.assertEqual(list(none_qs), [])\n+\n     @skipUnlessDBFeature('supports_select_difference')\n     def test_count_difference(self):\n         qs1 = Number.objects.filter(num__lt=10)\n@@ -313,4 +354,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..c252b38 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -11,6 +11,35 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    def test_abstract_inherited_fields_distinction(self):\n+        class AbstractModel(models.Model):\n+            myfield = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        field1 = InheritAbstractModel1._meta.get_field('myfield')\n+        field2 = InheritAbstractModel2._meta.get_field('myfield')\n+\n+        # Ensure fields are not considered equal.\n+        self.assertNotEqual(field1, field2)\n+\n+        # Ensure that both fields can exist in a set without being de-duplicated\n+        fields_set = {field1, field2}\n+        self.assertEqual(len(fields_set), 2)\n+\n+        # Verify __hash__ behavior\n+        self.assertNotEqual(hash(field1), hash(field2))\n+\n+        # Ensure that by default they haven't been changed by an unrelated ordering mechanism.\n+        self.assertLess(field1.creation_counter, field2.creation_counter)\n+\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +376,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..05f92c1 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .models import CustomEmailField\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -37,7 +38,36 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_changed_email_and_different_user(self):\n+        \"\"\"Token is invalidated if email is changed and token is used by a different user.\"\"\"\n+        original_email = 'original@example.com'\n+        new_email = 'changed@example.com'\n+        \n+        # Create two users\n+        user1 = CustomEmailField.objects.create_user(\n+            'user1', email=original_email, password='password123'\n+        )\n+        user2 = CustomEmailField.objects.create_user(\n+            'user2', email='another@example.com', password='password456'\n+        )\n+\n+        token_generator = PasswordResetTokenGenerator()\n+        \n+        # Generate a token for user1\n+        token = token_generator.make_token(user1)\n+        \n+        # Check that the token is valid for user1\n+        self.assertTrue(token_generator.check_token(user1, token))\n+        \n+        # Change the email for user1\n+        setattr(user1, user1.get_email_field_name(), new_email)\n+        user1.save()\n+        \n+        # The token should no longer be valid for user1\n+        self.assertFalse(token_generator.check_token(user1, token))\n+\n+        # The token should also not be valid for user2\n+        self.assertFalse(token_generator.check_token(user2, token))\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..5a3a66a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -875,6 +876,48 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'],\n             ordered=False\n         )\n+\n+    def test_range_lookup_namedtuple(self):\n+        from collections import namedtuple\n+        # Create a namedtuple for employee range\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        \n+        # Use the namedtuple as an argument for range filter\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100)\n+        )\n+        # Assert that the correct company (created in some setup not shown here) is in the queryset\n+        self.assertSequenceEqual(qs, [self.c5])\n+        \n+    def test_range_lookup_namedtuple_single(self):\n+        from collections import namedtuple\n+        # This test will check if NameTuple with identical minimum and maximum works\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        \n+        # Create a Company object with 60 employees\n+        company = Company.objects.create(name='60 Employees Ltd', num_employees=60, num_chairs=30, ceo=self.ceo)\n+        \n+        # Use the same value for minimum and maximum in the namedtuple\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=60, maximum=60)\n+        )\n+        # Assert that the correct company is returned within the queryset\n+        self.assertSequenceEqual(qs, [company])\n+\n+    def test_range_lookup_namedtuple_large_range(self):\n+        from collections import namedtuple\n+        # Test a large range into the namedtuple\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        \n+        # Quick creation of a few Company instances for testing\n+        company1 = Company.objects.create(name='Company A', num_employees=10, num_chairs=30, ceo=self.ceo)\n+        company2 = Company.objects.create(name='Company B', num_employees=1000, num_chairs=300, ceo=self.ceo)\n+        \n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=0, maximum=1500)\n+        )\n+        # Assert that both companies are returned\n+        self.assertSetEqual(set(qs), {company1, company2})\n         self.assertQuerysetEqual(\n             Company.objects.filter(num_employees__range=(1, 100)),\n             [\n@@ -884,6 +927,48 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple(self):\n+        from collections import namedtuple\n+        # Create a namedtuple for employee range\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        \n+        # Use the namedtuple as an argument for range filter\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100)\n+        )\n+        # Assert that the correct company (created in some setup not shown here) is in the queryset\n+        self.assertSequenceEqual(qs, [self.c5])\n+        \n+    def test_range_lookup_namedtuple_single(self):\n+        from collections import namedtuple\n+        # This test will check if NameTuple with identical minimum and maximum works\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        \n+        # Create a Company object with 60 employees\n+        company = Company.objects.create(name='60 Employees Ltd', num_employees=60, num_chairs=30, ceo=self.ceo)\n+        \n+        # Use the same value for minimum and maximum in the namedtuple\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=60, maximum=60)\n+        )\n+        # Assert that the correct company is returned within the queryset\n+        self.assertSequenceEqual(qs, [company])\n+\n+    def test_range_lookup_namedtuple_large_range(self):\n+        from collections import namedtuple\n+        # Test a large range into the namedtuple\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        \n+        # Quick creation of a few Company instances for testing\n+        company1 = Company.objects.create(name='Company A', num_employees=10, num_chairs=30, ceo=self.ceo)\n+        company2 = Company.objects.create(name='Company B', num_employees=1000, num_chairs=300, ceo=self.ceo)\n+        \n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=0, maximum=1500)\n+        )\n+        # Assert that both companies are returned\n+        self.assertSetEqual(set(qs), {company1, company2})\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..cf519b2 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -23,6 +23,7 @@ from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..56f8c8b 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -44,9 +45,51 @@ class ShellCommandTestCase(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, \"Couldn't import bpython interface.\"):\n             call_command('shell', interface='bpython')\n \n+    def test_command_option_globals(self):\n+        script_globals = 'print(\"__name__\" in globals())'\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        script_globals = 'print(\"__name__\" in globals())'\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     # [1] Patch select to prevent tests failing when when the test suite is run\n     # in parallel mode. The tests are run in a subprocess and the subprocess's\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..0dc3bb6 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,7 +1013,39 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_default_verbose_name_plural_from_verbose_name(self):\n+        class AutoVerboseProfileInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Auto inline name'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [AutoVerboseProfileInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Check that the generated plural is based on verbose_name\n+        self.assertContains(response, '<h2>Auto inline names</h2>')\n+        # Check that it uses the verbose_name form for the button text\n+        self.assertContains(response, 'Add another Auto inline name')\n+\n+    def test_model_meta_verbose_defaults_inline(self):\n+        class DefaultMetaProfileInline(TabularInline):\n+            model = Profile  # assumes Profile has appropriate verbose_name settings in Meta\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [DefaultMetaProfileInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Check that it uses the model's verbose names if neither verbose_name nor verbose_name_plural are set\n+        self.assertContains(response, f\"<h2>{Profile._meta.verbose_name_plural.capitalize()}</h2>\")\n+        self.assertContains(response, f\"Add another {Profile._meta.verbose_name}\")\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n",
  "django__django-13757": "",
  "django__django-13768": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..76e3e75 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,9 +281,21 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from forms_tests.models import ChoiceModel\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField, ChoiceField\n+from forms_tests.tests.asserts import AssertFormErrorsMixin\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n+        # Test asserts that the invalid choice error message with value placeholder works as expected.\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +319,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..6ce406e 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,7 +17,21 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n-    def test_combine_or_both_empty(self):\n+    def test_combine_q_with_dict_keys(self):\n+        q = Q(x__in={}.keys())\n+        # Should work without errors, verifying the original test cases\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+        # Additional tests for non-empty keys\n+        keys = {'a': 1, 'b': 2}.keys()\n+        q_non_empty = Q(x__in=keys)\n+        self.assertEqual(q_non_empty & Q(), q_non_empty)\n+        self.assertEqual(Q() & q_non_empty, q_non_empty)\n+        self.assertEqual(q_non_empty | Q(), q_non_empty)\n+        self.assertEqual(Q() | q_non_empty, q_non_empty)\n         self.assertEqual(Q() | Q(), Q())\n \n     def test_combine_not_q_object(self):\n",
  "django__django-14017": "",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..6568872 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1127,8 +1127,31 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[0], func)\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n-\n-    def test_resolver_match_on_request(self):\n+import functools\n+from django.urls import resolve\n+from django.test import override_settings\n+from . import views\n+\n+class AdditionalResolverMatchTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = functools.partial(views.empty_view, template_name=template_name)\n+                expected_repr = (\n+                    f\"ResolverMatch(func={func.func.__module__}.{func.func.__name__}, \"\n+                    f\"args=(), kwargs={{}}, url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\"\n+                )\n+                # Ensure the resolve function interprets the partial correctly.\n+                resolved = resolve(f'/{name}/')\n+                self.assertEqual(repr(resolved), expected_repr)\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..793821b 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,31 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +107,31 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..f6eb427 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2168,8 +2168,20 @@ class StartApp(AdminScriptTestCase):\n                     \"sure the name is a valid identifier.\".format(bad_name)\n                 )\n                 self.assertFalse(os.path.exists(testproject_dir))\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test that using a trailing slash in the target directory name\n+        for the 'startapp' command does not raise a CommandError.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app_with_slash')\n+        os.makedirs(app_dir)\n \n-    def test_importable_name(self):\n+        # Test with trailing slash in the target directory path\n+        out, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app_with_slash', '')])\n+        \n+        # Check that no error output is returned, indicating success\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n         \"\"\"\n         startapp validates that app name doesn't clash with existing Python\n         modules.\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..f9ad93c 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -14,6 +14,7 @@ from django.core import mail\n from django.core.exceptions import ValidationError\n from django.core.mail import EmailMultiAlternatives\n from django.forms.fields import CharField, Field, IntegerField\n+from django.forms import forms\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n@@ -1020,7 +1021,19 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_label_for_readonly_password_hash_widget(self):\n+        \"\"\"\n+        Test that the label for ReadOnlyPasswordHashWidget does not contain\n+        a 'for' attribute and is correctly rendered.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        # Ensure the widget has no labelable element ID for label\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        # Ensure the label is rendered without a 'for' attribute \n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-14580": "",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..bdc83ff 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,12 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        \n+        # Verify the nonform CSS class in the HTML output for non-form errors\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +365,12 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        \n+        # Verify the nonform CSS class in the HTML output for non-form errors\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +995,12 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        \n+        # Verify the nonform CSS class in the HTML output for non-form errors\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..a353c54 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -281,7 +281,28 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n+    def test_serialize_result(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n         request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n         request.user = self.superuser\n         with model_admin(Question, PKOrderingQuestionAdmin):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..a403fa5 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,7 +426,27 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+class MethodDecoratorTests(TestCase):\n+    def test_partial_function(self):\n+        \"\"\"Test @method_decorator handles partial function correctly.\"\"\"\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self, greeting):\n+                return greeting\n+\n+        partial_method = functools.partial(Test().method, \"hello\")\n+        wrapped_function = method_decorator(decorator)(partial_method)\n+\n+        self.assertEqual(wrapped_function(), \"hello\")\n+        self.assertEqual(getattr(wrapped_function, '__name__', None), 'method')\n+        self.assertEqual(getattr(wrapped_function, '__module__', None), __name__)\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..4ea162d 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5092,8 +5092,29 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         choice = Choice.objects.create(choice=None)\n         response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n-\n-    def test_readonly_foreignkey_links(self):\n+    from django.urls import reverse\n+    from .models import ReadOnlyRelatedField, Chapter, Book, Language\n+\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        # Create associated objects.\n+        chapter = Chapter.objects.create(title='Chapter 1', content='content', book=Book.objects.create(name='Book 1'))\n+        language = Language.objects.create(iso='_40', name='Test Language')\n+        obj = ReadOnlyRelatedField.objects.create(chapter=chapter, language=language, user=self.superuser)\n+        \n+        # Assert the correct URL is generated for the ForeignKey field in the readonly fields.\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,)))\n+        self.assertContains(response, f'href=\"/{admin_site}/admin_views/language/{obj.language.pk}/change/\"', html=True)\n+        self.assertContains(response, f'href=\"/{admin_site}/auth/user/{self.superuser.pk}/change/\"', html=True)\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        # Test with the default admin site.\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        # Test with a custom admin site.\n+        self._test_readonly_foreignkey_links('namespaced_admin')\n+\n+    # Original test function for completeness. This mitigates redundant code.\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n         registered in admin.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..5508e73 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +343,49 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_in_dict(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        show_fields = {self.c1.pk: ['title', 'status']}\n+        context = {}\n+        \n+        if value_1 in show_fields:\n+            context['attrs'] = {'data-fields': json.dumps(show_fields[value_1])}\n+\n+        self.assertIn('data-fields', context.get('attrs', {}))\n+        self.assertEqual(context['attrs']['data-fields'], json.dumps(show_fields[self.c1.pk]))\n+\n+        if value_2 in show_fields:\n+            context['attrs'] = {'data-fields': json.dumps(show_fields[value_2])}\n+        else:\n+            context['attrs'] = {}\n+\n+        self.assertNotIn('data-fields', context.get('attrs', {}))\n+\n+    def test_choice_value_in_set(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        allowed_values = {self.c1.pk, self.c3.pk}\n+        \n+        context = {}\n+\n+        if value_1 in allowed_values:\n+            context['allowed'] = True\n+        \n+        self.assertTrue(context.get('allowed', False))\n+\n+        if value_2 in allowed_values:\n+            context['allowed'] = True\n+        else:\n+            context['allowed'] = False\n+        \n+        self.assertFalse(context.get('allowed', False))\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..16fbbfc 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,6 +154,20 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n+    def test_multivaluefield_label_rendering(self):\n+        class MultiWidgetForm(Form):\n+            datetime = SplitDateTimeField(widget=SplitDateTimeWidget())\n+\n+        form = MultiWidgetForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_datetime_0\">Datetime:</label></th>\n+            <td><input type=\"text\" name=\"datetime_0\" required id=\"id_datetime_0\">\n+            <input type=\"text\" name=\"datetime_1\" required id=\"id_datetime_1\"></td></tr>\n+            \"\"\"\n+        )\n+\n     def test_form_as_table_data(self):\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..5eff3e5 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -91,6 +91,10 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://inv-.-alid.com',\n             '[a',\n             'http://[a',\n+            # Test input that raised ValueError previously\n+            '////]@N.AN',\n+            # Empty hostname test input\n+            '#@A.bO',\n             # Non-string.\n             23,\n             # Hangs \"forever\" before fixing a catastrophic backtracking,\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..136d487 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -239,16 +239,27 @@ class NonAggregateAnnotationTestCase(TestCase):\n         self.assertEqual(book.rating_count, 1)\n \n     @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n-    def test_q_expression_annotation_with_aggregation(self):\n-        book = Book.objects.filter(isbn='159059725').annotate(\n-            isnull_pubdate=ExpressionWrapper(\n-                Q(pubdate__isnull=True),\n-                output_field=BooleanField(),\n-            ),\n+    def test_full_expression_annotation(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_full_expression_annotation_with_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n             rating_count=Count('rating'),\n-        ).first()\n-        self.assertIs(book.isnull_pubdate, False)\n-        self.assertEqual(book.rating_count, 1)\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_aggregate_over_full_expression_annotation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n \n     @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n     def test_grouping_by_q_expression_annotation(self):\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..1a98b93 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -143,7 +144,15 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_message_extra_tags_encoding_decoding(self):\n+        \"\"\"\n+        Test message encoding and decoding preserves empty string extra_tags.\n+        \"\"\"\n+        storage = self.get_storage()\n+        message = Message(constants.INFO, \"Test message\", extra_tags=\"\")\n+        encoded_message = storage._encode(message)\n+        decoded_message = storage._decode(encoded_message)\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..602f9c0 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,5 +1,7 @@\n from pathlib import Path\n from unittest import mock\n+import os\n+from pathlib import Path\n \n from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n@@ -85,7 +87,22 @@ class TemplateReloadTests(SimpleTestCase):\n         )\n \n \n-@require_jinja2\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [str(ROOT)],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_change_in_base_dir_with_base_dir_in_dirs(self, mock_reset):\n+        temp_file_path = ROOT / 'temporary_file.txt'\n+        with open(temp_file_path, 'w') as temp_file:\n+            temp_file.write('temporary content')\n+        \n+        self.assertTrue(autoreload.template_changed(None, temp_file_path))\n+        mock_reset.assert_called_once()\n+\n+        os.remove(temp_file_path)\n @override_settings(INSTALLED_APPS=['template_tests'])\n class Jinja2TemplateReloadTests(SimpleTestCase):\n     def test_watch_for_template_changes(self):\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..05d7829 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,33 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test if an empty string for the If-Modified-Since header\n+        correctly handles and does not raise an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+        \n+    def test_was_modified_since_invalid_header(self):\n+        \"\"\"\n+        Test if an invalid date in the If-Modified-Since header\n+        correctly handles and does not raise an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"invalid-date\", mtime=1))\n+\n+    def test_was_modified_since_null_header(self):\n+        \"\"\"\n+        Test if a None type for the If-Modified-Since header\n+        correctly handles and does not raise an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=None, mtime=1))\n+        \n+    def test_was_modified_since_unix_epoch(self):\n+        \"\"\"\n+        Test with Unix Epoch time for the If-Modified-Since header.\n+        \"\"\"\n+        header = http_date(0)\n+        self.assertFalse(was_modified_since(header, 1))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..444f537 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,7 +1,9 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n \n+from argparse import ArgumentDefaultsHelpFormatter\n from admin_scripts.tests import AdminScriptTestCase\n \n from django.apps import apps\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..0cb4121 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,5 +1,8 @@\n+\n import os\n+import json\n from datetime import datetime\n+from django.core.serializers.json import DjangoJSONEncoder\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n@@ -217,7 +220,44 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        # This test should validate the default behavior with DjangoJSONEncoder.\n+        data = {\"key\": \"value\"}\n+        self.assertHTMLEqual(\n+            json_script(data),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_with_element_id_and_custom_encoder(self):\n+        class AdditiveEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                result = super().encode(o)\n+                return result.replace(\"}\", ', \"added_key\": \"added_value\"}')\n+\n+        self.assertHTMLEqual(\n+            json_script({\"test\": \"data\"}, element_id=\"test_id\", encoder=AdditiveEncoder),\n+            '<script id=\"test_id\" type=\"application/json\">{\"test\": \"data\", \"added_key\": \"added_value\"}</script>'\n+        )\n+\n+    def test_json_script_escape_special_characters_with_generic_encoder(self):\n+        class SimpleCustomJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps(o)\n+\n+        self.assertHTMLEqual(\n+            json_script({\"a\": \"<script></script>\"}, encoder=SimpleCustomJSONEncoder),\n+            '<script type=\"application/json\">{\"a\": \"\\\\u003Cscript\\\\u003E\\\\u003C/script\\\\u003E\"}</script>',\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..6fd0e0c 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -142,6 +142,25 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             [self.error_same_tags],\n         )\n \n+    def test_duplicate_template_tags_in_both_installed_and_templates(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"same_tags_app_1.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        \"templates.E003: 'my_tags' is used for multiple template tag modules: \"\n+                        \"'check_framework.template_test_apps.same_tags_app_1.templatetags.my_tags', \"\n+                        \"'check_framework.template_test_apps.same_tags_app_1.templatetags.same_tags'\"\n+                    )\n+                ]\n+            )\n+\n     def test_template_tags_with_same_library_name(self):\n         with self.settings(\n             TEMPLATES=[\n@@ -206,4 +225,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..977fc52 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,6 +399,23 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from django.db import models\n+from .models import ProxyCustomModel, AnotherModel\n+\n+class ProxyModelQuerySetTests(TestCase):\n+    def setUp(self):\n+        self.custom = ProxyCustomModel.objects.create(name=\"Proxy Test\")\n+        self.another_model = AnotherModel.objects.create(custom=self.custom)\n+\n+    def test_select_related_only_on_proxy(self):\n+        # Try to reproduce the issue: using select_related with only on a proxy field\n+        try:\n+            objs = list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+            self.assertEqual(objs[0].custom.name, \"Proxy Test\")\n+        except ValueError as e:\n+            self.fail(f\"QuerySet.only() after select_related() crash on proxy models: {str(e)}\")\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..275468b 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,7 +157,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n-    @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n+    def test_parameters_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM some_table;\"]\n+            ),\n+            ([\"psql\", \"-c\", \"SELECT * FROM some_table;\", \"dbname\"], None),\n+        )\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n \n@@ -183,4 +189,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..ebc10a2 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,6 +1901,10 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.test import TestCase, override_settings\n+        from django.forms import formset_factory\n+        from django.forms.formsets import BaseFormSet\n+        from someapp.forms import Choice  # Assuming Choice is defined here\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1913,14 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n+\n+    def test_no_management_form_warning(self):\n+        \"\"\"Test that no deprecation warning is raised for management form.\"\"\"\n+        with isolate_lru_cache(get_default_renderer), self.settings(\n+            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+        ):\n+            ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+            formset = ChoiceFormSet()\n+            with self.assertNotRaises(RemovedInDjango50Warning):\n+                _ = str(formset.management_form)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..523ed02 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,16 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        \"\"\"\n+        Test that setting empty_permitted in form_kwargs for empty_form\n+        does not cause a KeyError and is ignored.\n+        \"\"\"\n+        # Assuming ArticleFormSet is defined and available within the test environment\n+        formset = modelformset_factory(MyModel, fields=['a_field'])(form_kwargs={\"empty_permitted\": False})\n+        # Ensure that no KeyError occurs and empty_permitted defaults to True within empty_form\n+        self.assertTrue(formset.empty_form.empty_permitted)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..79839a6 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,12 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        # Test with an empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        \n+        # Test with None\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..1911ac7 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -882,6 +883,33 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n \n         self.assertTrue(form.is_valid())\n         # original hashed password contains $\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field_with_uuid(self):\n+        user = User.objects.get(username=\"testclient\")\n+        user.uuid = \"22222222-3333-4444-5555-666677778888\"\n+        user.save()\n+\n+        # URL to UserChangeForm in admin via to_field (using uuid instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),\n+        )\n+\n+        # Initialize form and verify password help text link\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+        self.assertIsNotNone(matches, \"Help text should contain a link to reset password.\")\n+\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+\n+        self.assertEqual(joined_url, pw_change_url)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16255": "",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..8467518 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -6,6 +7,8 @@ from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n@@ -33,7 +36,57 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # Test when the user only has change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Test when the user has both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n+        # Additional test: user with only add permission\n+        add_only_user = User.objects.create_user(\n+            username=\"add_only_user\", password=\"secret\", is_staff=True\n+        )\n+        add_only_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+        )\n+        request.user = add_only_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Additional test: user with no permissions\n+        no_perm_user = User.objects.create_user(\n+            username=\"no_perm_user\", password=\"secret\", is_staff=True\n+        )\n+        request.user = no_perm_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..77e411c 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -242,6 +242,43 @@ class OptimizerTests(SimpleTestCase):\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n         )\n \n+    def test_multiple_alterfield_collapse(self):\n+        \"\"\"\n+        Tests if multiple AlterField operations on the same field are optimized\n+        to a single operation.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\n+                    model_name=\"Book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=256),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"Book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"Book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, help_text=\"help\"),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"Book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, help_text=\"help\", default=None),\n+                ),\n+            ],\n+            [\n+                migrations.AlterField(\n+                    model_name=\"Book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, help_text=\"help\", default=None),\n+                ),\n+            ],\n+        )\n+\n     def test_alter_alter_unique_model(self):\n         self._test_alter_alter_model(\n             migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..b325462 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -26,6 +27,14 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n+    @setup({\"join_autoescape_off_test\": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off_test\", {\"some_list\": some_list, \"some_var\": some_var})\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n+\n     # Joining with unsafe joiners doesn't result in unsafe strings.\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n@@ -78,4 +87,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..4b09074 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -569,7 +569,45 @@ class BulkCreateTests(TestCase):\n                 unique_fields=[\"big_auto_fields\"],\n             )\n \n-    def _test_update_conflicts_two_fields(self, unique_fields):\n+    @skipUnlessDBFeature(\"supports_returning_clause_on_conflict\")\n+    def test_bulk_create_with_update_conflicts_returning_ids(self):\n+        # Initial setup.\n+        initial_objects = [\n+            TwoFields(f1=10, f2=10, name=\"x\"),\n+            TwoFields(f1=20, f2=20, name=\"y\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_objects)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # Objects with conflicts.\n+        conflicting_objects = [\n+            TwoFields(f1=10, f2=10, name=\"z\"),\n+            TwoFields(f1=30, f2=30, name=\"n\"),\n+        ]\n+\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"f1\"],\n+            update_fields=[\"name\"],\n+        )\n+\n+        # Confirm counts\n+        self.assertEqual(TwoFields.objects.count(), 3)\n+\n+        # Check that the returned results have their primary keys set.\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n+        # Validate updated database records\n+        self.assertCountEqual(\n+            TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n+            [\n+                {\"f1\": 10, \"f2\": 10, \"name\": \"z\"},  # Updated object\n+                {\"f1\": 20, \"f2\": 20, \"name\": \"y\"},  # Unchanged object\n+                {\"f1\": 30, \"f2\": 30, \"name\": \"n\"},  # New object\n+            ],\n+        )\n         TwoFields.objects.bulk_create(\n             [\n                 TwoFields(f1=1, f2=1, name=\"a\"),\n@@ -816,4 +854,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..56263b4 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -489,6 +489,9 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n     else:\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n+from matplotlib import pyplot as plt\n+from matplotlib import get_backend\n+from matplotlib._pylab_helpers import Gcf\n \n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n@@ -508,7 +511,18 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+def test_get_backend_clears_figs_rc_context():\n+    # Ensure that `get_backend` does not clear figures created in an rc_context\n+    with plt.rc_context():\n+        fig = plt.figure()\n+        # Store initial state of Gcf.figs\n+        before = f'{id(Gcf)} {Gcf.figs!r}'\n+        get_backend()\n+        # Store the state of Gcf.figs after calling get_backend\n+        after = f'{id(Gcf)} {Gcf.figs!r}'\n+    \n+    # Assert that Gcf.figs is unchanged\n+    assert before == after, '\\n' + before + '\\n' + after\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..4eae1a3 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,6 +21,16 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_invisible_effect(fig_test, fig_ref):\n+    # Create a subplot with a 3D projection that is set to invisible\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+\n+    # Create a similar subplot in the reference figure, but without scatter plot to compare invisibility effect\n+    fig_ref.add_subplot()\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..8b07e3f 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,9 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n@@ -783,7 +786,12 @@ def test_get_set_draggable():\n     assert not legend.get_draggable()\n \n \n-def test_alpha_handles():\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable_at_creation(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test label')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() == draggable\n     x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n     legend = plt.legend()\n     for lh in legend.legendHandles:\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..d3847bb 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -252,7 +252,50 @@ def test_linedash():\n \n     buf = io.BytesIO()\n     fig.savefig(buf, format=\"ps\")\n+    assert buf.tell() > 0\n+\n+\n+def test_empty_line():\n+    # Import necessary modules for this test\n+    import io\n+    from matplotlib.figure import Figure\n+\n+    # Smoke-test for gh#23954\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+    assert buf.tell() > 0\n+\n+\n+def test_empty_start_end_line_in_annotate():\n+    # Test for multiline text with empty start and end lines in annotate\n+    import io\n+    from matplotlib.figure import Figure\n \n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\nUpper label\\n\\nLower label\\n', xy=(0.5, 0.5))\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    assert buf.tell() > 0\n+    figure.savefig(buf, format='ps')\n+    assert buf.tell() > 0\n+\n+\n+def test_empty_line_in_set_title():\n+    # Test a title with an empty line in between\n+    import io\n+    from matplotlib.figure import Figure\n+\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.set_title('Title\\n\\nSubtitle')\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    assert buf.tell() > 0\n+    figure.savefig(buf, format='ps')\n     assert buf.tell() > 0\n \n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..e5985d2 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,19 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+\n+def test_constrained_layout_warning_suppression():\n+    with pytest.warns(None) as record:\n+        a = np.linspace(0, 2 * np.pi, 100)\n+        b = np.sin(a)\n+        c = np.cos(a)\n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+        ax[0].plot(a, b)\n+        ax[1].plot(a, c)\n+        plt.subplots_adjust(wspace=0)\n+    assert not any(item.category == UserWarning for item in record)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..e357825 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,8 +1,10 @@\n+\n from io import BytesIO\n import ast\n import pickle\n \n import numpy as np\n+import pickletools\n import pytest\n \n import matplotlib as mpl\n@@ -16,8 +18,28 @@ import matplotlib.transforms as mtransforms\n import matplotlib.figure as mfigure\n from mpl_toolkits.axes_grid1 import parasite_axes\n \n+def test_draggable_legend_pickle():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Serialize the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Check that 'FigureCanvasQTAgg' or 'FigureCanvasAgg' are not in the pickle stream\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n \n-def test_simple():\n+    # Deserialize to ensure it's successful\n+    loaded = pickle.loads(pkl)\n+    assert isinstance(loaded, plt.Figure)\n     fig = plt.figure()\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..331a865 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,31 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n-@mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    \n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    loaded_fig = pickle.loads(pkl.getbuffer())\n+    loaded_fig.canvas.draw()\n+\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..cf763d7 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,9 +9,28 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n \n+    def test_missing_data_handling(self, df):\n+        \"\"\"Test to ensure PolyFit handles missing data properly.\"\"\"\n+        # Create a DataFrame similar to the original issue\n+        df_with_missing = df.copy()\n+        df_with_missing.loc[5:10, 'x'] = np.nan\n+\n+        # Define a GroupBy object\n+        groupby = GroupBy([\"group\"])\n+\n+        # Generate result without missing data\n+        res_without_na = PolyFit()(df_with_missing.dropna(), groupby, \"x\", {})\n+\n+        # Generate result with missing data\n+        res_with_na = PolyFit()(df_with_missing, groupby, \"x\", {})\n+        \n+        # Results should be equal as missing data should be ignored\n+        assert_frame_equal(res_with_na, res_without_na)\n+\n     @pytest.fixture\n     def df(self, rng):\n \n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..7f19286 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -96,12 +96,56 @@ class TestContinuous:\n         s = Continuous()._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_interval_with_bools(self):\n+\n+        x = pd.Series([True, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 0])\n+\n+\n+    def test_color_mapping_with_boolean(self):\n+        import pandas as pd\n+        import seaborn as sns\n+        import seaborn.objects as so\n+\n+        # Create a simple bar plot with boolean data for color mapping\n+        plot = so.Plot([\"a\", \"b\"], [1, 2], color=[True, False]).add(so.Bar())\n+        # Attempt to render the plot to verify no exceptions occur\n+        try:\n+            plot.show()\n+            no_exception = True\n+        except Exception:\n+            no_exception = False\n+        assert no_exception, \"Plotting with boolean color mapping should not raise an exception.\"\n+\n     def test_color_named_values(self, x):\n \n         cmap = color_palette(\"viridis\", as_cmap=True)\n         s = Continuous(\"viridis\")._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_interval_with_bools(self):\n+\n+        x = pd.Series([True, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 0])\n+\n+\n+    def test_color_mapping_with_boolean(self):\n+        import pandas as pd\n+        import seaborn as sns\n+        import seaborn.objects as so\n+\n+        # Create a simple bar plot with boolean data for color mapping\n+        plot = so.Plot([\"a\", \"b\"], [1, 2], color=[True, False]).add(so.Bar())\n+        # Attempt to render the plot to verify no exceptions occur\n+        try:\n+            plot.show()\n+            no_exception = True\n+        except Exception:\n+            no_exception = False\n+        assert no_exception, \"Plotting with boolean color mapping should not raise an exception.\"\n+\n     def test_color_tuple_values(self, x):\n \n         cmap = color_palette(\"blend:b,g\", as_cmap=True)\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..75499be 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,10 @@\n+\n import json\n import os\n import textwrap\n \n import pytest\n+import tomllib  # Only available in Python 3.11 and later\n \n import flask\n \n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..edc9070 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1655,6 +1655,40 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n+\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import DecodeError as RequestsDecodeError, Timeout as RequestsTimeout\n+from urllib3.exceptions import DecodeError, ReadTimeoutError\n+\n+def test_urllib3_exceptions_are_wrapped():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter(max_retries=0))\n+\n+    # Test urllib3 DecodeError handling\n+    def mock_response(*args, **kwargs):\n+        raise DecodeError(\"Simulated DecodeError\")\n+\n+    s.get = mock_response  # Mocking the `get` method\n+    try:\n+        s.get(\"http://mocked.url\")\n+    except RequestsDecodeError:\n+        assert True  # Correct exception caught, test passed\n+    except DecodeError:\n+        assert False, \"DecodeError should be wrapped by requests.exceptions.DecodeError\"\n+\n+    # Test urllib3 TimeoutError handling\n+    def mock_timeout_response(*args, **kwargs):\n+        raise ReadTimeoutError(None, None, \"Simulated Timeout\")\n+\n+    s.get = mock_timeout_response  # Mocking the `get` method\n+    try:\n+        s.get(\"http://mocked.url\")\n+    except RequestsTimeout:\n+        assert True  # Correct exception caught, test passed\n+    except ReadTimeoutError:\n+        assert False, \"TimeoutError should be wrapped by requests.exceptions.ConnectTimeout\"\n+\n def test_vendor_aliases():\n     from requests.packages import urllib3\n     from requests.packages import chardet\n@@ -1663,4 +1697,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..577c446 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,8 +743,52 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n-\n-    def test_session_persistent_cookies(self):\n+    \n+    def test_single_hook_function(self):\n+        \"\"\"Test case for a single hook function provided.\"\"\"\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({\n+                'X-Foo': 'foo'\n+            })\n+            return args\n+        \n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h) is True\n+        \n+        hooks = [add_foo_header]\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert_hooks_are_callable(r.hooks)\n+\n+    def test_mixed_hook_registration(self):\n+        \"\"\"Test case for a mix of single and multiple hook functions.\"\"\"\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({\n+                'X-Foo': 'foo'\n+            })\n+            return args\n+        \n+        def add_bar_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({\n+                'X-Bar': 'bar'\n+            })\n+            return args\n+        \n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h) is True\n+        \n+        hooks = [add_foo_header, add_bar_header]\n+        r = requests.models.Request()\n+        r.register_hook('args', add_foo_header)\n+        r.register_hook('args', hooks)\n+        assert_hooks_are_callable(r.hooks)\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..960021f 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -56,6 +56,13 @@ reports = \"yes\"\n     check_configuration_file_reader(runner)\n \n \n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from _pytest.capture import CaptureFixture\n+\n+EMPTY_MODULE = \"empty_module.py\"\n+\n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..b40c7e7 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,25 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self):\n+        \"\"\"Test that ignored paths are properly respected with recursive option.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^gen/.*\", # Adjust based on test environment\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..0c69deb 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,66 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_module_with_identical_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for issue where linting fails if module contains module of the same name.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create directory structure with identically named module and submodule\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Verify that linting the package succeeds\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n+def test_lint_external_module_imports(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for side-effects in module resolution.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create directory structure\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        # Add import statement in r.py\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        # Check if linting modules individually works\n+        linter.check([\"r\"])\n+        assert not linter.stats.by_msg, f\"Linter failed with messages: {linter.stats.by_msg}\"\n+        \n+        # Check if linting both modules together works\n+        linter.check([\"r\", \"a\"])\n+        assert not linter.stats.by_msg, f\"Linter failed with messages: {linter.stats.by_msg}\"\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_module_with_identical_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for issue where linting fails if module contains module of the same name.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create directory structure with identically named module and submodule\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Verify that linting the package succeeds\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n+def test_lint_external_module_imports(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for side-effects in module resolution.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create directory structure\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        # Add import statement in r.py\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        # Check if linting modules individually works\n+        linter.check([\"r\"])\n+        assert not linter.stats.by_msg, f\"Linter failed with messages: {linter.stats.by_msg}\"\n+        \n+        # Check if linting both modules together works\n+        linter.check([\"r\", \"a\"])\n+        assert not linter.stats.by_msg, f\"Linter failed with messages: {linter.stats.by_msg}\"\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..e98d4b6 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,7 +114,25 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n-def test_deprecation_set_output(recwarn):\n+def test_template_with_custom_braces(linter: PyLinter) -> None:\n+    \"\"\"\n+    Test to check behavior of custom braces in message templates.\n+    This test case is added based on the described issue with\n+    using Pylint's --msg-template in versions 2.12.2 and newer.\n+    \"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    \n+    linter.open()\n+    linter.set_current_module(\"test_mod\")\n+\n+    linter.add_message(\"C0103\", line=1, args=(1, 2))\n+    linter.add_message(\"W0612\", line=2, args=(3, 4))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"warning\" }'\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 13debe8..287a55b 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -742,7 +742,9 @@ class AssertionRewriter(ast.NodeVisitor):\n                     nodes.append(field)\n \n     @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n+    def is_rewrite_disabled(docstring: Optional[str]) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
  "pytest-dev__pytest-11148": "diff --git a/testing/acceptance_test.py b/testing/acceptance_test.py\nindex 0cc5057..f22c194 100644\n--- a/testing/acceptance_test.py\n+++ b/testing/acceptance_test.py\n@@ -1306,6 +1306,38 @@ def test_no_brokenpipeerror_message(pytester: Pytester) -> None:\n     popen.stderr.close()\n \n \n+def test_doctest_and_normal_imports_with_importlib(pytester: Pytester) -> None:\n+    \"\"\"\n+    Regression test for module imported twice under import-mode=importlib.\n+    Ensures that the module is not imported multiple times, which would cause\n+    issues with stateful modules.\n+    \"\"\"\n+    pytester.makepyfile(\n+        **{\n+            \"pmxbot/commands.py\": \"from . import logging\",\n+            \"pmxbot/logging.py\": \"class Logger:\\n    store = None\",\n+            \"tests/__init__.py\": \"\",\n+            \"tests/test_commands.py\": \"\"\"\n+                import importlib\n+                from pmxbot import logging\n+\n+                class TestCommands:\n+                    def test_boo(self):\n+                        assert importlib.import_module('pmxbot.logging') is logging\n+            \"\"\",\n+        }\n+    )\n+    pytester.makeini(\n+        \"\"\"\n+        [pytest]\n+        addopts=\n+            --doctest-modules\n+            --import-mode importlib\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_subprocess()\n+    result.stdout.fnmatch_lines(\"*1 passed*\")\n+\n def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n@@ -1314,4 +1346,4 @@ def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     \"\"\"\n     )\n     res = pytester.runpytest()\n-    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n+    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..6801016 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -6,7 +7,7 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -27,10 +28,10 @@ def test_coloredlogformatter():\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"INFO    dummy:dummypath:10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+    assert output == (\"INFO    dummy:dummypath:10 INFO     Test Message\")\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..cb057a1 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -587,7 +587,22 @@ class TestAssert_reprcompare:\n         assert msg\n \n \n-class TestAssert_reprcompare_dataclass:\n+class TestByteStringsAssertionRewriting:\n+    def test_bytes_diff_empty_vs_nonempty(self):\n+        \"\"\"Test comparing empty byte string with non-empty.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert \"b'' == b'42'\" in diff\n+        assert \"Right contains more items, first extra item: 52\" in diff\n+        assert \"- b''\" in diff\n+        assert \"+ b'42'\" in diff\n+\n+    def test_bytes_diff_another_example(self):\n+        \"\"\"Test comparing another empty byte string with non-empty.\"\"\"\n+        diff = callequal(b\"\", b\"1\")\n+        assert \"b'' == b'1'\" in diff\n+        assert \"Right contains more items, first extra item: 49\" in diff\n+        assert \"- b''\" in diff\n+        assert \"+ b'1'\" in diff\n     @pytest.mark.skipif(sys.version_info < (3, 7), reason=\"Dataclasses in Python3.7+\")\n     def test_dataclasses(self, testdir):\n         p = testdir.copy_example(\"dataclasses/test_compare_dataclasses.py\")\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..c78601f 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,3 +1,4 @@\n+\n import os\n from xml.dom import minidom\n \n@@ -6,6 +7,8 @@ import py\n import pytest\n from _pytest.junitxml import LogXML\n from _pytest.reports import BaseReport\n+import platform\n+from datetime import datetime\n \n \n def runandparse(testdir, *args):\n@@ -139,7 +142,29 @@ class TestPython:\n         node = dom.find_first_by_tag(\"testsuite\")\n         node.assert_attr(name=\"pytest\", errors=1, failures=2, skipped=1, tests=5)\n \n-    def test_timing_function(self, testdir):\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S\")\n+        assert start_time <= timestamp < datetime.now()\n         testdir.makepyfile(\n             \"\"\"\n             import time, pytest\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..d567c44 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,18 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute_repr():\n+    \"\"\"Test saferepr with objects that have broken __getattribute__ and __repr__ methods.\"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Broken __getattribute__\")\n+        def __repr__(self):\n+            raise RuntimeError(\"Broken __repr__\")\n+\n+    obj = SomeClass()\n+    repr_result = saferepr(obj)\n+    # Check if the result indicates that an exception was raised in __repr__\n+    assert repr_result.startswith(\"<[RuntimeError('Broken __repr__') raised in repr()] SomeClass object at\")\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +165,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..3c3bded 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -70,8 +70,31 @@ def test_make_hook_recorder(testdir) -> None:\n     recorder.hook.pytest_runtest_logreport(report=rep3)\n     pytest.raises(ValueError, recorder.getfailures)\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_parseconfig(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     config1 = testdir.parseconfig()\n     config2 = testdir.parseconfig()\n     assert config2 is not config1\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..1917b18 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -41,8 +41,35 @@ class TestMark:\n         with pytest.raises(AttributeError):\n             mark._some_name\n \n+def test_reevaluate_skipif_condition_with_different_globals(self, testdir):\n+    \"\"\"Test to ensure that the skipif condition is correctly evaluated in different modules with same condition string\"\"\"\n+    py_file1 = testdir.makepyfile(\n+        test_file1=\"\"\"\n+        import pytest\n+\n+        skip = True\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_skip():\n+            assert False\n+    \"\"\"\n+    )\n+    py_file2 = testdir.makepyfile(\n+        test_file2=\"\"\"\n+        import pytest\n+\n+        skip = False\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_not_skip():\n+            assert True\n+    \"\"\"\n+    )\n+    file_name1 = py_file1.strpath.split('/')[-1]\n+    file_name2 = py_file2.strpath.split('/')[-1]\n \n-def test_marked_class_run_twice(testdir):\n+    reprec = testdir.inline_run(file_name1, file_name2)\n+    reprec.assertoutcome(skipped=1, passed=1)\n     \"\"\"Test fails file is run twice that contains marked class.\n     See issue#683.\n     \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..e2574d2 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -250,7 +250,33 @@ class TestXFail:\n         assert not hasattr(callreport, \"wasxfail\")\n         assert \"xfail\" in callreport.keywords\n \n-    def test_xfail_not_report_default(self, testdir):\n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_location_reporting(self, testdir, test_input, expected):\n+        # Create a sample test file that uses the skip marker\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        # Run pytest with the given input parameters\n+        result = testdir.runpytest(*test_input)\n+        # Ensure the output matches the expected output\n+        result.stdout.fnmatch_lines(expected)\n         p = testdir.makepyfile(\n             test_one=\"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..7b03502 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -154,7 +155,30 @@ class TestEvaluation:\n \n \n class TestXFail:\n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail during the test works properly.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail (strict) passes when it should.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n             \"\"\"\n@@ -463,7 +487,30 @@ class TestXFail:\n         result.stdout.fnmatch_lines([\"*XFAIL*\", \"*unsupported feature*\"])\n         assert result.ret == 0\n \n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail during the test works properly.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail (strict) passes when it should.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_strict_xfail(self, testdir, strict):\n         p = testdir.makepyfile(\n             \"\"\"\n@@ -490,7 +537,30 @@ class TestXFail:\n         assert result.ret == (1 if strict else 0)\n         assert testdir.tmpdir.join(\"foo_executed\").isfile()\n \n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail during the test works properly.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail (strict) passes when it should.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_strict_xfail_condition(self, testdir, strict):\n         p = testdir.makepyfile(\n             \"\"\"\n@@ -506,7 +576,30 @@ class TestXFail:\n         result.stdout.fnmatch_lines([\"*1 passed*\"])\n         assert result.ret == 0\n \n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail during the test works properly.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail (strict) passes when it should.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_xfail_condition_keyword(self, testdir, strict):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-8365": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..60a09b1 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -562,7 +562,7 @@ def test_class_weights_cv():\n     # Test class weights for cross validated ridge classifier.\n     X = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n                   [1.0, 1.0], [1.0, 0.0]])\n-    y = [1, 1, 1, -1, -1]\n+    y = np.array([1, 1, 1, -1, -1])\n \n     reg = RidgeClassifierCV(class_weight=None, alphas=[.01, .1, 1])\n     reg.fit(X, y)\n@@ -574,6 +574,29 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Ensure RidgeClassifierCV supports store_cv_values correctly\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Test with len(y.shape) == 1\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, 1, n_alphas)\n+\n+    # Test with len(y.shape) == 2\n+    y_multi = np.array([[1, 1, -1], [1, -1, 1], [-1, -1, 1],\n+                        [-1, -1, -1], [1, -1, 1]]).T\n+    r.fit(x, y_multi)\n+    n_targets = y_multi.shape[1]\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..5f3d301 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -6,7 +6,7 @@ import numpy as np\n from scipy.special import gammaln\n \n from sklearn.utils.testing import assert_raise_message\n-from sklearn.utils.testing import assert_almost_equal\n+from sklearn.utils.testing import assert_almost_equal, assert_raise_message\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n from sklearn.mixture.bayesian_mixture import _log_wishart_norm\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..c695532 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,11 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+import numpy as np\n+import pytest\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n@@ -273,6 +278,32 @@ def test_one_hot_encoder_no_categorical_features():\n     assert enc.categories_ == []\n \n \n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_ignore_unknown_with_long_first_category():\n+    X = np.array(['long_category_name', 'short', 'medium', 'tiny']).reshape((-1, 1))\n+    X2 = np.array(['small', 'tiny']).reshape((-1, 1))\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    # The 'small' value is unknown and should be ignored, resulting in a row of zeros\n+    assert_array_equal(\n+        oh.transform(X2).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  0.,  0.,  1.]]))\n+\n @pytest.mark.parametrize(\"output_dtype\", [np.int32, np.float32, np.float64])\n @pytest.mark.parametrize(\"input_dtype\", [np.int32, np.float32, np.float64])\n def test_one_hot_encoder_dtype(input_dtype, output_dtype):\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..18b5ee0 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -71,7 +72,19 @@ def test_kernel_pca_consistent_transform():\n     assert_array_almost_equal(transformed1, transformed2)\n \n \n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_deterministic_output():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    pca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    \n+    # Run the transformation multiple times to check for deterministic signs\n+    transformed_X = np.zeros((20, 7))\n+    for i in range(20):\n+        transformed = pca.fit_transform(X)\n+        # Normalize the sign by ensuring the first non-zero entry is positive\n+        sign_normalized_transformed = np.where(transformed[0,:] < 0, -transformed, transformed)\n+        transformed_X[i, :] = sign_normalized_transformed[0]\n+    assert_allclose(transformed_X, np.tile(transformed_X[0, :], 20).reshape(20, 7))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..d075ad4 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,34 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n-\n-def test_make_pipeline_memory():\n+def test_pipeline_len():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.datasets import make_classification\n+    from sklearn.svm import SVC\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+\n+    # Create some synthetic data\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+    # Test with a pipeline with two steps\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipeline = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    assert len(pipeline) == 2\n+\n+    # Test with a pipeline with one step\n+    pipeline_one_step = Pipeline([('svc', clf)])\n+    assert len(pipeline_one_step) == 1\n+\n+    # Test with an empty pipeline\n+    pipeline_empty = Pipeline([])\n+    assert len(pipeline_empty) == 0\n+\n+    # Test with a pipeline with three steps\n+    from sklearn.preprocessing import StandardScaler\n+    scaler = StandardScaler()\n+    pipeline_three_steps = Pipeline([('scaler', scaler), ('anova', anova_filter), ('svc', clf)])\n+    assert len(pipeline_three_steps) == 3\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1096,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..a691c03 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..e178bb2 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +217,19 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_print_changed_only():\n+    # Set the configuration to print only changed parameters\n+    set_config(print_changed_only=True)\n+    # Try printing LogisticRegressionCV with a numpy array for `Cs` parameter\n+    try:\n+        repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        print(\"Representation Output:\", repr_output)\n+    except ValueError as e:\n+        print(\"Error encountered:\", e)\n+    finally:\n+        # Ensure the configuration is set back to default after the test\n+        set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..0b2dd65 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -8,6 +9,9 @@ from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n from sklearn.exceptions import NotFittedError\n+from sklearn.datasets import load_iris, make_regression\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..444a200 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,6 +160,24 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+def test_nca_gridsearch_param_types():\n+    # Test NCA parameter types with GridSearchCV\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+    \n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+    \n+    # Create a pipeline of NCA followed by KNN\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+    \n+    # Define parameter grid with integer types in lieu of floats, and NumPy integer types\n+    params = {'nca__tol': [0.1, 0.5, 1],  # '1' is an integer, should be accepted\n+              'nca__n_components': np.arange(1, 10, dtype=np.int64)}  # np.int64 instead of Python int\n+    \n+    # Perform grid search\n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n \n def test_transformation_dimensions():\n     X = np.arange(12).reshape(4, 3)\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..3255cf2 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,8 +679,42 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n-\n-def test_sparse_precomputed():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_with_different_parameters():\n+    # Test sparse fit with different parameters\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(C=1.0, epsilon=0.2, kernel='linear')\n+    try:\n+        model.fit(X_train, y_train)\n+    except ZeroDivisionError:\n+        assert False, \"ZeroDivisionError was raised unexpectedly!\"\n+\n+def test_sparse_support_vector_length():\n+    # Ensure support vector length is zero when no support vectors are found\n+    X_train = sparse.csr_matrix(np.zeros((10, 5)))\n+    y_train = np.zeros(10)\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert len(model.support_) == 0\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..76d21aa 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,8 +972,24 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n-def test_repeated_cv_value_errors():\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+import pytest\n+\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr_default(RepeatedCV):\n+    # Test default repr\n+    repeated_cv = RepeatedCV()\n+    repeated_cv_repr = \"{}(n_splits=5, n_repeats=10, random_state=None)\".format(repeated_cv.__class__.__name__)\n+    assert repeated_cv_repr == repr(repeated_cv)\n+\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr_custom(RepeatedCV):\n+    # Test repr with custom parameters\n+    n_splits, n_repeats, random_state = 3, 7, 42\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    repeated_cv_repr = \"{}(n_splits={}, n_repeats={}, random_state={})\".format(\n+        repeated_cv.__class__.__name__, n_splits, n_repeats, random_state)\n+    assert repeated_cv_repr == repr(repeated_cv)\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n         assert_raises(ValueError, cv, n_repeats=0)\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..6cc0f71 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -151,8 +151,34 @@ def test_affinity_propagation_predict_non_convergence():\n     y = assert_warns(ConvergenceWarning, af.predict, to_predict)\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n+import numpy as np\n+from sklearn.cluster import AffinityPropagation\n+from sklearn.utils._testing import assert_array_equal, assert_warns\n+from sklearn.exceptions import ConvergenceWarning\n \n-def test_equal_similarities_and_preferences():\n+def test_affinity_propagation_non_convergence_regressiontest():\n+    # Test for non-convergence handling\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+    assert_array_equal(np.array([]), af.cluster_centers_indices_)\n+\n+def test_affinity_propagation_convergence_check():\n+    # Test if convergence property can be checked\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+\n+    af = AffinityPropagation(affinity='euclidean', max_iter=10).fit(X)\n+    if af.n_iter_ >= af.max_iter:\n+        # If it reaches max_iter it means it hasn't converged within the limit.\n+        assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+        assert_array_equal(np.array([]), af.cluster_centers_indices_)\n+    else:\n+        # If it converges, check if valid cluster centers exist.\n+        assert len(af.cluster_centers_indices_) > 0\n     # Unequal distances\n     X = np.array([[0, 0], [1, 1], [-2, -2]])\n     S = -euclidean_distances(X, squared=True)\n",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..fcd3553 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2121,6 +2121,34 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n \n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool_array\", \"bool_list\"],\n+)\n+def test_empty_selection_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+\n+    Non-regression test for gh-25487\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\"])\n+\n     # The feature names are prefixed because verbose_feature_names_out=True is default\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n@@ -2128,4 +2156,4 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..252e1e3 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -113,6 +113,36 @@ def test_automodule_special_members(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_classes(app):\n+    \"\"\"\n+    Test that multiple classes can be specified in the\n+    :inherited-members: option for automodule.\n+    \"\"\"\n+    sys.modules.pop('target.inheritance', None)  # unload module to clear cache\n+    \n+    # Define options for autodoc with multiple base classes to be ignored\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base, list, set'\n+    }\n+    \n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+\n+    # Check that methods from Base are not documented\n+    assert all(\n+        method not in actual for method in [\n+            'Base.inheritedclassmeth', 'Base.inheritedmeth', 'Base.inheritedstaticmeth'\n+        ]\n+    )\n+\n+    # Check that methods specific to Derived are documented\n+    assert 'Derived.inheritedmeth' in actual\n+\n+    # Ensure methods specific to MyList are documented\n+    assert 'MyList.meth' in actual\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n                                                             'missing_package1',\n@@ -125,4 +155,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..b483c14 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,9 +1,18 @@\n+\n from __future__ import annotations\n \n from typing import overload\n-\n myint = int\n \n+#: Variable with type alias\n+var: myint\n+\n+class MyClass:\n+    \"\"\"A class with a type alias for an attribute.\"\"\"\n+    \n+    #: Attribute with type alias\n+    attr: myint\n+\n \n def sum(x: myint, y: myint) -> myint:\n     \"\"\"docstring\"\"\"\n@@ -22,4 +31,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..c230c9c 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,10 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+from sphinx import addnodes\n+import pytest\n+...\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..0b43403 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..a20b3e5 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -39,6 +41,9 @@ class BrokenType:\n \n \n def test_restify():\n+    from struct import Struct\n+    # Test case to verify restify can handle struct.Struct correctly\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(int) == \":class:`int`\"\n     assert restify(str) == \":class:`str`\"\n     assert restify(None) == \":obj:`None`\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..0c24b86 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,28 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+        Other Parameters\n+        ----------------\n+        param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_build_epub.py b/tests/test_build_epub.py\nindex ca9b315..89e9b5c 100644\n--- a/tests/test_build_epub.py\n+++ b/tests/test_build_epub.py\n@@ -63,8 +63,19 @@ class EPUBElementTree:\n         for child in self.tree:\n             yield self.__class__(child)\n \n+import pytest\n \n-@pytest.mark.sphinx('epub', testroot='basic')\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.build()\n+    # Check that the mod1.xhtml does not exist when viewcode_enable_epub is False\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.build()\n+    # Check that the mod1.xhtml does exist when viewcode_enable_epub is True\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_build_epub(app):\n     app.build()\n     assert (app.outdir / 'mimetype').read_text() == 'application/epub+zip'\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..0f3b530 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -323,6 +323,16 @@ def test_mul():\n \n \n def test_args():\n+    # Test for non-disjoint cycles which should be applied left to right\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 2], [1, 2, 3], [3, 4]]) == Permutation([2, 3, 0, 4, 1])\n+\n+    # Edge case with empty cycles\n+    assert Permutation([[], []]) == Permutation([])  # Should handle empty cycles\n+\n+    # Complex non-disjoint cycles\n+    assert Permutation([[0, 1, 2], [1, 3]]) == Permutation([1, 3, 0, 2])\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n     assert Permutation(p) == p\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..e03527c 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,8 +1,39 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n def test_sparse_matrix():\n+    # Test for hstack with zero-row matrices\n+    def test_hstack_zero_row():\n+        M1 = SparseMatrix.zeros(0, 0)\n+        M2 = SparseMatrix.zeros(0, 1)\n+        M3 = SparseMatrix.zeros(0, 2)\n+        M4 = SparseMatrix.zeros(0, 3)\n+        result = SparseMatrix.hstack(M1, M2, M3, M4)\n+        assert result.shape == (0, 6), \"Expected (0, 6) but got {}\".format(result.shape)\n+    \n+    # Test for hstack with zero-column, single-row matrices\n+    def test_hstack_zero_column_single_row():\n+        M1 = SparseMatrix.zeros(1, 0)\n+        M2 = SparseMatrix.zeros(1, 1)\n+        M3 = SparseMatrix.zeros(1, 2)\n+        M4 = SparseMatrix.zeros(1, 3)\n+        result = SparseMatrix.hstack(M1, M2, M3, M4)\n+        assert result.shape == (1, 6), \"Expected (1, 6) but got {}\".format(result.shape)\n+    \n+    # Test for vstack with zero-column matrices\n+    def test_vstack_zero_column():\n+        M1 = SparseMatrix.zeros(0, 0)\n+        M2 = SparseMatrix.zeros(1, 0)\n+        M3 = SparseMatrix.zeros(2, 0)\n+        M4 = SparseMatrix.zeros(3, 0)\n+        result = SparseMatrix.vstack(M1, M2, M3, M4)\n+        assert result.shape == (6, 0), \"Expected (6, 0) but got {}\".format(result.shape)\n+\n+    test_hstack_zero_row()\n+    test_hstack_zero_column_single_row()\n+    test_vstack_zero_column()\n     def sparse_eye(n):\n         return SparseMatrix.eye(n)\n \n",
  "sympy__sympy-13471": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..ec21d16 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,22 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+def test_coth_subs_issue():\n+    from sympy import Symbol, coth, log, tan\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # The known problematic integral values\n+    assert e.subs(x, 2) is not None\n+    assert e.subs(x, 3) is not None\n+    assert e.subs(x, 5) is not None\n+    assert e.subs(x, 6) is not None\n+    assert e.subs(x, 8) is not None\n+    assert e.subs(x, 9) is not None\n+    assert e.subs(x, 11) is not None\n+    assert e.subs(x, 12) is not None\n+    assert e.subs(x, 13) is not None\n+    assert e.subs(x, 15) is not None\n+    assert e.subs(x, 18) is not None\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13647": "",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..ec120fd 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -620,46 +620,59 @@ def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    # Test case for ensuring that square brackets are not backslash-escaped\n+    expected_output = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s1) == expected_output, f\"Expected: {expected_output}, but got: {latex(s1)}\"\n     assert latex(s1) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n+    expected_output = r'[1, 2, 1, 2, \\ldots]'\n+    assert latex(s2) == expected_output, f\"Expected: {expected_output}, but got: {latex(s2)}\"\n     assert latex(s2) == latex_str\n \n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4\\right\\]'\n+    expected_output = r'[0, 1, 4]'\n+    assert latex(s3) == expected_output, f\"Expected: {expected_output}, but got: {latex(s3)}\"\n     assert latex(s3) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1\\right\\]'\n+    expected_output = r'[1, 2, 1]'\n+    assert latex(s4) == expected_output, f\"Expected: {expected_output}, but got: {latex(s4)}\"\n     assert latex(s4) == latex_str\n \n     s5 = SeqFormula(a**2, (-oo, 0))\n     s6 = SeqPer((1, 2), (-oo, 0))\n \n-    latex_str = r'\\left\\[\\ldots, 9, 4, 1, 0\\right\\]'\n+    expected_output = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(s5) == expected_output, f\"Expected: {expected_output}, but got: {latex(s5)}\"\n     assert latex(s5) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 2, 1, 2, 1\\right\\]'\n+    expected_output = r'[\\ldots, 2, 1, 2, 1]'\n+    assert latex(s6) == expected_output, f\"Expected: {expected_output}, but got: {latex(s6)}\"\n     assert latex(s6) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5, 11, \\ldots\\right\\]'\n+    expected_output = r'[1, 3, 5, 11, \\ldots]'\n+    assert latex(SeqAdd(s1, s2)) == expected_output, f\"Expected: {expected_output}, but got: {latex(SeqAdd(s1, s2))}\"\n     assert latex(SeqAdd(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5\\right\\]'\n+    expected_output = r'[1, 3, 5]'\n+    assert latex(SeqAdd(s3, s4)) == expected_output, f\"Expected: {expected_output}, but got: {latex(SeqAdd(s3, s4))}\"\n     assert latex(SeqAdd(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 11, 5, 3, 1\\right\\]'\n+    expected_output = r'[\\ldots, 11, 5, 3, 1]'\n+    assert latex(SeqAdd(s5, s6)) == expected_output, f\"Expected: {expected_output}, but got: {latex(SeqAdd(s5, s6))}\"\n     assert latex(SeqAdd(s5, s6)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4, 18, \\ldots\\right\\]'\n+    expected_output = r'[0, 2, 4, 18, \\ldots]'\n+    assert latex(SeqMul(s1, s2)) == expected_output, f\"Expected: {expected_output}, but got: {latex(SeqMul(s1, s2))}\"\n     assert latex(SeqMul(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4\\right\\]'\n+    expected_output = r'[0, 2, 4]'\n+    assert latex(SeqMul(s3, s4)) == expected_output, f\"Expected: {expected_output}, but got: {latex(SeqMul(s3, s4))}\"\n     assert latex(SeqMul(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n+    expected_output = r'[\\ldots, 18, 4, 2, 0]'\n+    assert latex(SeqMul(s5, s6)) == expected_output, f\"Expected: {expected_output}, but got: {latex(SeqMul(s5, s6))}\"\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..fbade1e 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,13 +7,13 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n from sympy import Integer, Symbol, I, sqrt\n from sympy.utilities.pytest import raises\n-from sympy.abc import x, y, z\n+from sympy.abc import x, y, z, R, C\n \n \n def test_Options_clone():\n@@ -188,6 +189,20 @@ def test_Domain_preprocess():\n \n     raises(OptionError, lambda: Domain.preprocess('Z()'))\n \n+    # Tests for RR and CC with multiple variables\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+    # Additional test cases for the issue\n+    raises(OptionError, lambda: Domain.preprocess('RR[y,z]'))  # Testing the reported issue\n+    raises(OptionError, lambda: Domain.preprocess('CC[y,z]'))  # Similar case with CC\n+\n     assert Domain.preprocess('Z(x)') == ZZ.frac_field(x)\n     assert Domain.preprocess('Q(x)') == QQ.frac_field(x)\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..be8f5b3 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,9 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import Symbol, MatrixSymbol, pretty\n+from sympy.abc import n, a\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..50c226f 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -719,6 +719,9 @@ def test_dummification():\n     some_expr = 2 * F(t)**2 / G(t)\n     lam = lambdify((F(t), G(t)), some_expr)\n     assert lam(3, 9) == 2\n+    import sympy as sy\n+    from sympy.utilities.pytest import raises\n+\n     lam = lambdify(sin(t), 2 * sin(t)**2)\n     assert lam(F(t)) == 2 * F(t)**2\n     #Test that \\alpha was properly dummified\n@@ -727,8 +730,22 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n-\n-def test_python_keywords():\n+def test_curly_matrix_symbol():\n+    # Test for issue: lambdify with curly braces in MatrixSymbol names\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    v = sy.MatrixSymbol(\"v\", 2, 1)\n+    \n+    # Check lambdify works without error indicating SyntaxError has been resolved\n+    lam = sy.lambdify(curlyv, curlyv)\n+    assert lam([[1], [1]]) == [[1], [1]]\n+    \n+    # Check lambdify with dummify=True works without error\n+    lam_dummify = sy.lambdify(curlyv, curlyv, dummify=True)\n+    assert lam_dummify([[1], [1]]) == [[1], [1]]\n+\n+    # Ensure lambdify works correctly with regular MatrixSymbols\n+    lam_vector = sy.lambdify(v, v)\n+    assert lam_vector([[1], [1]]) == [[1], [1]]\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..bf1e8a0 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,6 +24,13 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n+def test_Max_Function():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(2, 3, x)) == \"Max[2, 3, x]\"\n+    assert mcode(Max(x, y, 3, 2)) == \"Max[x, y, 3, 2]\"\n+\n \n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..b14eeb2 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,16 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    # Test for the issue where indexed matrix-expression LaTeX printer is not compilable\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    expected_latex = r\"\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}\"\n+    assert latex((M * N)[i, j]) == expected_latex, \"Indexed matrix expression LaTeX compilation failed.\"\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..6e31297 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -21,7 +22,26 @@ def test_idiff():\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n \n-def test_intersection():\n+def test_idiff_issue_case():\n+    # Original issue test cases\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test if idiff supports Eq properly\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x) == (x + 1) * exp(x - y) / (y + 1)\n+\n+    # Test with function f(x) instead of y\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x)) / (f(x) + 1)\n+\n+    # Additional test case to ensure functionality with multiple dependent variables\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Ensure idiff works with expressions differentiated multiple times\n+    assert idiff(y*exp(y) - x*exp(x), y, x) == (x + 1) * exp(x - y) / (y + 1)\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..d3a69a4 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,39 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen\n+    from sympy import MatrixSymbol\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    from sympy.utilities.codegen import CCodeGen\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_unused_array_arg_cython():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    # Verify that the function does not raise an exception and returns 1.0\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..ef8fe53 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,27 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, FiniteSet, Eq, Symbol, S\n \n-def test_issue_9623():\n+def test_intersection_duplicates():\n+    x = Symbol('x')\n+    \n+    # Test intersection with duplicates in sets\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    \n+    # Test that intersection resolves duplicates and handles symbolic elements\n+    assert Intersection({1}, {1}, {x}) == \\\n+        Piecewise((FiniteSet(1), Eq(x, 1)), (S.EmptySet, True))\n+    \n+    # Additional tests to check behavior with duplicates\n+    assert Intersection({1, 1, 2}, {2, 2}, evaluate=True) == FiniteSet(2)\n+    assert Intersection({1, 2, 2}, {2, 3, 3}, {2, 2, 4}, evaluate=True) == FiniteSet(2)\n+    \n+    # Test with no duplicates but overlapping elements\n+    assert Intersection({1, 2}, {2, 3}, evaluate=True) == FiniteSet(2)\n+    \n+    # Test with no intersection\n+    assert Intersection({1, 2}, {3, 4}, evaluate=True) == S.EmptySet\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..9815c13 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,8 +1,11 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n )\n-from sympy import eye\n+from sympy import eye, Identity, symbols\n+from sympy.utilities.pytest import raises\n+import numpy as np\n from sympy.abc import x, i, j, a, b, c, d\n from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbrt, Sqrt\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..574e300 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,14 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n+def test_issue_17137():\n+    from sympy import simplify, Symbol, cos, I\n+    x = Symbol('x')\n+    # Verify that no TypeError is raised and the expression is simplified correctly\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..549dce5 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -95,6 +96,15 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n+    # Test multiplication of Point and scalar\n+    assert p4 * S(2) == Point(2, 2)\n+    assert S(2) * p4 == Point(2, 2)  # This should behave the same as above\n+\n+    # Test the behavior described in the issue\n+    sym_factor = sympy.sympify(2.0)\n+    assert point1 + point2 * sym_factor == Point2D(2, 2)\n+    assert point1 + sym_factor * point2 == Point2D(2, 2)  # Should not raise an exception\n+\n     # Point differences should be simplified\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..2bba5b0 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,48 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import Symbol, sympify, symbols\n+from sympy.testing.pytest import raises\n+\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string \n+    # (e.g., by calling sympify() instead of _sympify())\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+    \n+    # Test equality with objects having misleading repr\n+    class C1:\n+        def __repr__(self):\n+            return 'x.y'\n+    \n+    c1 = C1()\n+    # They should not be considered equal, and this should not trigger an eval\n+    assert (x == c1) is False\n+    assert (x != c1) is True\n+\n+    class C2:\n+        def __repr__(self):\n+            return 'x'\n+\n+    c2 = C2()\n+    # Testing comparison with an object whose repr is the same as Sympy's repr of x\n+    assert (x == c2) is False  # This should not wrongly evaluate to True\n+    assert (x != c2) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1944,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..31351e2 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,26 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy import symbols\n+    x, y = symbols('x y', integer=True)\n+    # Test with order (x, y)\n+    result1 = diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True)\n+    expected_result = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert result1 == expected_result, f\"Expected {expected_result}, but got {result1}\"\n+\n+    # Test with order (y, x)\n+    result2 = diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True)\n+    assert result2 == expected_result, f\"Expected {expected_result}, but got {result2}\"\n+\n+    # Check for previously described problematic order\n+    n, m = symbols('n m', integer=True)\n+    result3 = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True)\n+    expected_result3 = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert result3 == expected_result3, f\"Expected {expected_result3}, but got {result3}\"\n+\n+    result4 = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True)\n+    assert result4 == expected_result3, f\"Expected {expected_result3}, but got {result4}\"\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..9eb8453 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -60,7 +61,21 @@ def test_PostIncrement():\n     assert ccode(p) == '(x)++'\n \n \n-def test_sizeof():\n+def test_atoms_no_args():\n+    typename = 'unsigned int'\n+    sz = sizeof(typename)\n+    # Before fix: would return {String('unsigned int'), String('sizeof')}\n+    # After fix: should return only 'unsigned int' as it has no .args\n+    assert sz.atoms() == {typename}\n+\n+def test_atoms_with_string():\n+    typename = 'unsigned int'\n+    sz = sizeof(typename)\n+    assert sz.atoms() == {typename}\n+\n+    typename2 = 'float'\n+    sz2 = sizeof(typename2)\n+    assert sz2.atoms() == {typename2}\n     typename = 'unsigned int'\n     sz = sizeof(typename)\n     assert ccode(sz) == 'sizeof(%s)' % typename\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..122aa05 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,37 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_single_element_BlockDiagMatrix():\n+    from sympy import Matrix, BlockDiagMatrix\n+    \n+    # Test that converting a BlockDiagMatrix with a single element works\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_issue_multiple_elements_BlockDiagMatrix():\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    # Test that converting a BlockDiagMatrix with multiple elements works\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B == expected\n+\n+def test_issue_18618():\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    # Original test for issue 18618\n+    A = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+    assert A == Matrix(BlockDiagMatrix(A))\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..f929f73 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -46,7 +47,16 @@ def test_mul_index():\n     assert result.args[1][1:] == expected.args[1][1:]\n \n \n-def test_pow_index():\n+def test_block_index_issue_resolved():\n+    from sympy import MatrixSymbol, BlockMatrix, MatrixElement, symbols\n+\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    \n+    # This should return a MatrixElement, not simplify to A[i, 0]\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n     Q = MatPow(A, 2)\n     assert Q[0, 0] == A[0, 0]**2 + A[0, 1]*A[1, 0]\n     n = symbols(\"n\")\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..71063ac 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -199,8 +199,31 @@ def test_im():\n \n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n+from sympy import Piecewise, Abs, Eq, Function, Symbol, I, sqrt, nan, oo, AccumBounds, cos, sin, log, S\n+from sympy.abc import x, y\n \n-def test_sign():\n+def test_sign_rewrite_abs():\n+    # Test cases for rewriting sign in terms of Abs\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    f = Function('f')\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+    assert sign(0).rewrite(Abs) == 0  # Consistent with sign(0) == 0\n+\n+    # Test with known numbers\n+    assert sign(3).rewrite(Abs) == 1\n+    assert sign(-4).rewrite(Abs) == -1\n+    assert sign(3 + 4*I).rewrite(Abs) == (3 + 4*I) / Abs(3 + 4*I)\n+    assert sign(-3 - 4*I).rewrite(Abs) == (-3 - 4*I) / Abs(-3 - 4*I)\n+\n+    # Test with symbolic expressions\n+    p = Symbol('p', positive=True)\n+    assert sign(p).rewrite(Abs) == p / Abs(p)\n+    n = Symbol('n', negative=True)\n+    assert sign(n).rewrite(Abs) == n / Abs(n)\n+\n+    # Test with assumptions\n+    nz = Symbol('nz', nonzero=True)\n+    assert sign(nz).rewrite(Abs) == nz / Abs(nz)\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..39563ed 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,20 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n def test_partitions():\n+    # Test to ensure partitions do not reuse dictionaries\n+    def is_unique_partition_list(partitions_iter):\n+        partitions_list = list(partitions_iter)\n+        return all(p1 is not p2 for i, p1 in enumerate(partitions_list) for p2 in partitions_list[i+1:])\n+    \n+    assert is_unique_partition_list(partitions(6, k=2))\n+    assert is_unique_partition_list(partitions(6, k=3))\n+    assert is_unique_partition_list(partitions(8, k=4, m=3))\n+    assert is_unique_partition_list(partitions(S(3), m=2))\n+    assert is_unique_partition_list(partitions(4, k=3))\n+    assert is_unique_partition_list(partitions(4))\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..0003108 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -264,7 +264,14 @@ def test_zero():\n     assert (0**(2 - x)).as_base_exp() == (0, 2 - x)\n     assert 0**(x - 2) != S.Infinity**(2 - x)\n     assert 0**(2*x*y) == 0**(x*y)\n-    assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n+    from sympy import S, oo, zoo, Pow, power\n+\n+    # Test issue 19572\n+    assert 0**-oo == zoo\n+    assert power(0, -oo) == zoo\n+\n+    # Additional test to ensure no regression\n+    assert Pow(0, -oo) == zoo\n \n \n def test_pow_as_base_exp():\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..d060e42 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,22 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import pytest\n+from sympy import Symbol\n+from sympy.core.basic import Basic\n+\n+def test_symbol_no_dict():\n+    # Test that Symbol instances do not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"__dict__ attribute should not exist for Symbol\"\n+    assert hasattr(s, '__slots__'), \"__slots__ should exist for Symbol\"\n+    assert s.__slots__ == ('name',), \"__slots__ should be ('name',)\"\n+\n+def test_symbol_slots():\n+    # Test that Symbol instance slots are as expected\n+    s = Symbol('s')\n+    assert s.__slots__ == ('name',), \"__slots__ should be ('name',)\"\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..63b0dca 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -20,6 +21,27 @@ def test_subs():\n     assert e == Rational(6)\n \n \n+def test_issue_21373():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    # Symbols\n+    x_r, y_r, z = symbols('x_r y_r z', real=True)\n+\n+    # Test expression with sinh and piecewise\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    result = expr.subs({1: 1.0})\n+\n+    # Assert no error is raised and the result is returned correctly\n+    assert result is not None\n+\n+    # More conditions to test\n+    expr_without_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    expr_without_division = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    \n+    assert expr_without_exp.subs({1: 1.0}) is not None  # Testing without exp\n+    assert expr_without_division.subs({1: 1.0}) is not None  # Testing without division\n+\n def test_subs_Matrix():\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..b04d4bc 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -39,6 +40,11 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n+\n def test_Matrix_kind():\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..a049cf3 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -105,8 +105,40 @@ def test_monomials():\n \n     raises(ValueError, lambda: set(itermonomials([x, y], [0, 1], [1, 2])))\n     raises(ValueError, lambda: set(itermonomials([x, y, z], [0, 0, 3], [0, 1, 2])))\n-\n-    assert set(itermonomials([x], [0])) == {S.One}\n+    # Test case for the issue described: itermonomials with min_degrees\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    \n+    # Test for a single degree\n+    monomials = set(itermonomials([x1, x2, x3], 3, 3))\n+    expected_monomials = {\n+        x1**3, x2**3, x3**3,\n+        x1*x2**2, x1*x3**2, \n+        x2*x3**2, x2**2*x3, \n+        x1**2*x3, x1**2*x2, \n+        x1*x2*x3\n+    }\n+    assert monomials == expected_monomials\n+\n+    # Testing when min_degrees is less than max_degrees\n+    monomials = set(itermonomials([x1, x2, x3], 4, 2))\n+    expected_monomials = {\n+        x1**4, x1**3*x2, x1**3*x3, x1**2*x2**2, x1**2*x3**2, x1*x2**3, x1*x3**3,\n+        x2**4, x2**3*x1, x2**3*x3, x2**2*x1**2, x2**2*x3**2, x2*x1**3, x2*x3**3,\n+        x3**4, x3**3*x1, x3**3*x2, x3**2*x1**2, x3**2*x2**2, x3*x1**3, x3*x2**3,\n+        x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2, x2**2*x3, x2*x3**2, x1*x2*x3,\n+        x1*x2, x1*x3, x2*x3,\n+        x1**2, x2**2, x3**2,\n+        x1, x2, x3\n+    }\n+    assert monomials == expected_monomials\n+\n+    # Test for minimum and maximum degrees as lists\n+    monomials = set(itermonomials([x1, x2], [2, 2], [1, 1]))\n+    expected_monomials = {\n+        x1*x2, x1**2, x2**2,\n+        x1*x2**2, x1**2*x2\n+    }\n+    assert monomials == expected_monomials\n     assert set(itermonomials([x], [1])) == {S.One, x}\n     assert set(itermonomials([x], [2])) == {S.One, x, x**2}\n     assert set(itermonomials([x], [3])) == {S.One, x, x**2, x**3}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..1ae39dc 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,6 +50,12 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n+    # Additional test cases to verify the fix for infinite solution systems\n+    raises(NotImplementedError, lambda: solve_poly_system((x - 1,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((y - 1,), x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system((x*y - 1,), x, y))  # Infinite solutions along a curve\n+    raises(NotImplementedError, lambda: solve_poly_system((x**2 - y**2,), x, y))  # Infinite solutions along lines\n+\n \n def test_solve_biquadratic():\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..8b39d1d 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,10 +10,19 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n+def test_issue_22684_with_evaluate_false():\n+    # This test specifically checks the issue with Point2D under evaluate(False)\n+    with evaluate(False):\n+        # Verify that no error is raised when creating a Point2D\n+        pt = Point2D(1, 2)\n+        assert pt == Point2D(1, 2)  # Check that the point is created as expected\n \n-def test_point():\n+    # Ensure that without the context manager, it works as expected too\n+    pt_default = Point2D(1, 2)\n+    assert pt_default == Point2D(1, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..c199281 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -338,6 +338,27 @@ def test_cse_Indexed():\n     assert len(replacements) > 0\n \n \n+from sympy import symbols, cse, MatrixSymbol, Matrix\n+\n+def test_issue_for_cse_matrices():\n+    # Define matrix symbols\n+    a = MatrixSymbol('a', 4, 4)\n+    b = MatrixSymbol('b', 4, 4)\n+\n+    # Create matrix expressions\n+    e = a * b\n+\n+    # Canonicalize the expression using CSE\n+    cse_subs, cse_reduced = cse(e)\n+\n+    # Ensure substitutions are as expected\n+    assert cse_subs is not None\n+    assert len(cse_subs) > 0\n+\n+    # Check that the reduced expression matches what is expected\n+    assert cse_reduced is not None\n+    assert len(cse_reduced) == 1\n+\n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..50ee460 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -38,6 +39,14 @@ def test_array_negative_indices():\n         assert test_array[-1, -1] == 10\n \n \n+def test_issue_array_empty():\n+    # Test that empty array creation works without errors\n+    for ArrayType in array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n+\n def test_issue_18361():\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..d8563da 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,14 +1175,30 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n     assert 'x**2' in inspect.getsource(f)\n \n-\n-def test_issue_14941():\n+def test_lambdify_single_element_tuple():\n+    # Test that a single element tuple is printed correctly by lambdify\n+    f = lambdify([], (1,))\n+    source = inspect.getsource(f)\n+    assert 'def _lambdifygenerated():' in source\n+    assert 'return (1,)' in source\n+    assert f() == (1,)\n+\n+def test_lambdify_multi_element_tuple():\n+    # Ensure that multi-element tuples are still printed correctly\n+    f = lambdify([], (1, 2))\n+    source = inspect.getsource(f)\n+    assert 'def _lambdifygenerated():' in source\n+    assert 'return (1, 2)' in source\n+    assert f() == (1, 2)\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..8c0a8cc 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,28 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.quantities import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..f503f83 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,33 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_issue_24142():\n+    # Original tests for fix of issue\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test cases to cover more scenarios\n+    C = Operator('C')\n+\n+    # Check incomplete expansion previously failed\n+    assert TP(3*C - 2*B, A + 4*B).expand(tensorproduct=True) == \\\n+        3 * TP(C, A) + 12 * TP(C, B) - 2 * TP(B, A) - 8 * TP(B, B)\n+\n+    # Test expansion with zero factor, should result in zero\n+    assert TP(0*C, A + B).expand(tensorproduct=True) == 0\n+    assert TP(2*C, 0*A).expand(tensorproduct=True) == 0\n+\n+    # Test expansion with multiple nested tensor products\n+    assert TP(A + 2*B, TP(C, A + B)).expand(tensorproduct=True) == \\\n+        TP(A, C, A) + TP(A, C, B) + 2*TP(B, C, A) + 2*TP(B, C, B)\n+\n+    # Ensure idempotency - a second expansion should not change the result\n+    expanded_once = TP(2*A + B, A + B).expand(tensorproduct=True)\n+    assert expanded_once.expand(tensorproduct=True) == expanded_once\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..3f20132 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -561,8 +562,39 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n-\n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    # Test expression A1*T1 + V1\n+    expr = A1*T1 + V1\n+    factor, dim = SI._collect_factor_and_dimension(expr)\n+    assert dim.name == velocity.name\n+\n+    # Another test with different scale factors\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+    \n+    # Test expression again with new scale factors\n+    expr = A1*T1 + V1\n+    factor, dim = SI._collect_factor_and_dimension(expr)\n+    assert dim.name == velocity.name\n+\n+    # Expression should maintain dimensional consistency\n+    assert expr.is_commutative  # Expressions with correct dimensions should be commutative\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..53d67b7 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -10,7 +11,11 @@ from sympy.physics.units.systems import SI\n x = Symbol('x')\n \n \n-def test_prefix_operations():\n+def test_milli_prefix_with_units():\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+    assert milli * volt == volt / 1000\n+    assert volt * milli == volt / 1000\n     m = PREFIXES['m']\n     k = PREFIXES['k']\n     M = PREFIXES['M']\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..5c464a1 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -6,7 +6,7 @@ from django.test import SimpleTestCase, TestCase\n from django.test.utils import CaptureQueriesContext, isolate_apps\n \n from .models import (\n-    Base, Chef, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n+    Base, Chef, Child, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n     MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase,\n     Supplier, Title, Worker,\n )\n@@ -205,7 +205,21 @@ class ModelInheritanceTests(TestCase):\n         self.assertEqual(A.attr.called, (A, 'attr'))\n \n \n-class ModelInheritanceDataTests(TestCase):\n+class ModelInheritanceTests(TestCase):\n+    def test_inherited_ordering_pk_desc(self):\n+        # Create instances of the Parent and Child models\n+        p1 = Parent.objects.create(first_name='Joe', last_name='Doe', email='joe@email.com')\n+        p2 = Parent.objects.create(first_name='Jane', last_name='Doe', email='jane@email.com')\n+        c1 = Child.objects.create(first_name='Child', last_name='One', email='child1@email.com')\n+        c2 = Child.objects.create(first_name='Child', last_name='Two', email='child2@email.com')\n+        \n+        # Verify that Child objects are ordered by '-pk', descending by primary key\n+        expected_order = [c2, c1]\n+        self.assertSequenceEqual(Child.objects.all(), expected_order)\n+        \n+        # Check the SQL query to ensure correct ORDER BY clause\n+        expected_order_by_sql = 'ORDER BY \"tests_grandparent\".\"id\" DESC'\n+        self.assertIn(expected_order_by_sql, str(Child.objects.all().query))\n     @classmethod\n     def setUpTestData(cls):\n         cls.restaurant = Restaurant.objects.create(\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..141a919 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,52 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referential_fk_ordering(self):\n+        # Setup initial data as per the issue description\n+        root1 = Author.objects.create(name=\"Root 1\")\n+        root2 = Author.objects.create(name=\"Root 2\")\n+        a1 = Article.objects.create(headline=\"Article 1\", author=root1)\n+        a2 = Article.objects.create(headline=\"Article 2\", author=root2)\n+        root1.editor = root2\n+        root2.editor = root1\n+        root1.save()\n+        root2.save()\n+\n+        # Test ordering by the self-referenced foreign key\n+        qs = Article.objects.filter(author__isnull=False).order_by('author__editor')\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n+        # Test ordering by the _id of the self-referenced foreign key\n+        qs = Article.objects.filter(author__isnull=False).order_by('author__editor_id')\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+    def test_self_referential_fk_desc_ordering(self):\n+        # Setup to check descending order as per issue description\n+        root1 = Author.objects.create(name=\"Root 1\")\n+        root2 = Author.objects.create(name=\"Root 2\")\n+        a1 = Article.objects.create(headline=\"Article 1\", author=root1)\n+        a2 = Article.objects.create(headline=\"Article 2\", author=root2)\n+        root1.editor = root2\n+        root2.editor = root1\n+        root1.save()\n+        root2.save()\n+\n+        # Test ordering by the inverse of the self-referenced foreign key\n+        qs = Article.objects.filter(author__isnull=False).order_by('-author__editor_id')\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..debd905 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,6 +3201,26 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    def test_boundwidget_id_for_label_respects_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the ID provided in\n+        ChoiceWidget.options instead of generating its own.\n+        \"\"\"\n+        class CustomForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple\n+            )\n+        \n+        form = CustomForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        \n+        # Override widget ID through options.\n+        subwidgets[0].data['attrs']['id'] = 'custom_field_0'\n+        subwidgets[1].data['attrs']['id'] = 'custom_field_1'\n+        \n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n \n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..eb16df5 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -657,8 +657,34 @@ def test_colorbar_scale_reset():\n \n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n+def test_colorbar_update_after_norm_change():\n+    # Test case based on reported issue to check colorbar update with norm change\n+    import matplotlib.pyplot as plt\n+    from matplotlib.colors import LogNorm, Normalize\n+    import numpy as np\n \n-def test_colorbar_get_ticks_2():\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Initial checks on linear scale\n+    assert cb.ax.yaxis.get_scale() == 'linear'\n+\n+    # Change norm to LogNorm and update colorbar\n+    plot.set_norm(LogNorm())\n+    cb.update_normal(plot)\n+\n+    # Check updated scale is logarithmic and no error occurs\n+    assert cb.ax.yaxis.get_scale() == 'log'\n+\n+    # Further update with Normalize and check back to linear\n+    plot.set_norm(Normalize(vmin=np.min(img), vmax=np.max(img)))\n+    cb.update_normal(plot)\n+    assert cb.ax.yaxis.get_scale() == 'linear'\n+\n+    plt.close(fig)\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..e1354d3 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3044,8 +3044,14 @@ class TestDataset:\n         x0 = y[0].to_unstacked_dataset(\"features\")\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n-\n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    \n+    def test_to_stacked_array_to_unstacked_dataset_single_dimension(self):\n+        # single dimension: regression test for the issue described\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..d76919e 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,30 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_transform_output():\n+    \"\"\"Test FeatureUnion with pandas transform output that aggregates data.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+    from sklearn.pipeline import FeatureUnion\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X.groupby(\"date\")[\"value\"].sum().to_frame()\n+\n+    # Test with pandas output configuration\n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    result = union.fit_transform(data)\n+    expected_index = pd.Index([\"2020-01-01\", \"2020-01-02\", \"2020-01-03\", \"2020-01-04\"], dtype='object', name='date')\n+    pd.testing.assert_index_equal(result.index, expected_index)\n+    pd.testing.assert_series_equal(result.squeeze(), pd.Series([240, 240, 240, 240], index=expected_index, name='value'))\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..7305ff4 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,10 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+import sys\n+from .utils import do_autodoc\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..448a1e6 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -9,6 +10,14 @@ from sympy.utilities.pytest import XFAIL\n from sympy.abc import x, y, z, t, a, b, c, d, e, f, g, h, i, k\n \n \n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n \n def test_trigsimp1():\n     x, y = symbols('x,y')\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..963eb82 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4332,8 +4332,37 @@ def test_pretty_class():\n     assert pretty( C ) == str( C )\n     assert pretty( D ) == str( D )\n \n-\n-def test_pretty_no_wrap_line():\n+def test_issue_sum_pretty_print():\n+    from sympy import Sum, oo\n+    from sympy.abc import x\n+    \n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ascii_str = \\\n+\"\"\"\\\n+  oo   \\n\\\n+ ___   \\n\\\n+ \\\\    \\n\\\n+  \\\\   x\\n\\\n+  /    \\n\\\n+ /     \\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  \\n\\\n+ + 3   \\\n+\"\"\"\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e    \\n\\\n+ ___   \\n\\\n+ \u2572     \\n\\\n+  \u2572   x\\n\\\n+  \u2571    \\n\\\n+ \u2571     \\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  \\n\\\n+ + 3   \\\n+\"\"\")\n+    assert pretty(expr) == ascii_str\n+    assert upretty(expr) == ucode_str\n     huge_expr = 0\n     for i in range(20):\n         huge_expr += i*sin(i + x)\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..64e4b2b 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -705,7 +705,49 @@ def test_uniq():\n         [2, 3, 4, [2], [1], [3]]\n \n \n-def test_kbins():\n+def test_list_modification_with_uniq():\n+    f = [1, 2, 3, 2, 1]\n+    try:\n+        for i in uniq(f):\n+            f.remove(i)\n+    except RuntimeError:\n+        assert True\n+    else:\n+        assert False, \"Expected RuntimeError due to list modification during iteration.\"\n+\n+    f = [[1, 2], [2, 1], [1, 2]]\n+    try:\n+        for i in uniq(f):\n+            f.remove(i)\n+    except RuntimeError:\n+        assert True\n+    else:\n+        assert False, \"Expected RuntimeError due to list modification during iteration.\"\n+\n+    f = ['a', 'b', 'c', 'b', 'a']\n+    try:\n+        for i in uniq(f):\n+            f.remove(i)\n+    except RuntimeError:\n+        assert True\n+    else:\n+        assert False, \"Expected RuntimeError due to list modification during iteration.\"\n+\n+    f = [(1, 2), (2, 3), (1, 2)]\n+    try:\n+        for i in uniq(f):\n+            f.remove(i)\n+    except RuntimeError:\n+        assert True\n+    else:\n+        assert False, \"Expected RuntimeError due to list modification during iteration.\"\n+\n+    # Test with no modification\n+    f = [1, 2, 3, 4]\n+    result = []\n+    for i in uniq(f):\n+        result.append(i)\n+    assert result == [1, 2, 3, 4], \"Expected list without modification to pass through uniq unchanged.\"\n     assert len(list(kbins('1123', 2, ordered=1))) == 24\n     assert len(list(kbins('1123', 2, ordered=11))) == 36\n     assert len(list(kbins('1123', 2, ordered=10))) == 10\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..ec25425 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,10 +8,11 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n-    Article, Author, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n+    Article, Author, Game, IsNullWithNoneAsRHS, Player, Season, Tag, User\n )\n \n \n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..e357883 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,6 +546,33 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n+    def test_subquery_sql_correctness(self):\n+        from django.db import connection\n+        from myapp.models import Employee  # Assuming Employee is a model within the project\n+\n+        # Test case ensuring subquery attribute is properly set in construction\n+        employees = Employee.objects.all()\n+        subquery = Subquery(employees)\n+\n+        # Assert the subquery attribute is set to True on the subquery query\n+        self.assertTrue(subquery.query.subquery)\n+\n+        # Ensure SQL syntax is correct\n+        compiler = subquery.query.get_compiler(connection=connection)\n+        sql, _ = subquery.as_sql(compiler, connection)\n+\n+        # Check that the SQL string starts with '(SELECT' and ends with a ')'\n+        self.assertTrue(sql.startswith('(SELECT'))\n+        self.assertTrue(sql.endswith(')'))\n+\n+        # Test case for manually adjusting the subquery attribute\n+        subquery.query.subquery = False\n+        sql, _ = subquery.as_sql(compiler, connection)\n+        \n+        # Checking that the SQL syntax is incorrect without the subquery flag\n+        self.assertFalse(sql.startswith('(SELECT'))\n+        self.assertFalse(sql.endswith(')'))\n+\n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n",
  "django__django-15819": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 0ecd041..ae19ef3 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -434,7 +434,45 @@ class InspectDBTestCase(TestCase):\n         self.assertIn(\"# The error was:\", output)\n \n \n+import mock\n+from django.core.management import call_command\n+from django.test import TransactionTestCase\n+from io import StringIO\n+\n+...\n+\n class InspectDBTransactionalTests(TransactionTestCase):\n+\n+    def test_related_name_generation_for_clashing_reverse_accessors(self):\n+        \"\"\"\n+        Test that inspectdb generates related_name for fields with reverse accessor name clashes.\n+        \"\"\"\n+        with connection.cursor() as cursor:\n+            # Create a mock table with potential reverse accessor name clashes\n+            cursor.execute(\"\"\"\n+                CREATE TABLE inspectdb_clash (\n+                    id serial PRIMARY KEY,\n+                    people_id integer,\n+                    another_people_id integer,\n+                    CONSTRAINT fk_people FOREIGN KEY (people_id) REFERENCES inspectdb_people(id),\n+                    CONSTRAINT fk_another_people FOREIGN KEY (another_people_id) REFERENCES inspectdb_people(id)\n+                )\n+            \"\"\")\n+\n+        # Run inspectdb\n+        out = StringIO()\n+        call_command(\"inspectdb\", \"inspectdb_clash\", stdout=out)\n+        output = out.getvalue()\n+\n+        # Check that related_name is generated for clashing reverse accessors\n+        self.assertIn(\n+            \"people = models.ForeignKey('InspectdbPeople', models.DO_NOTHING, related_name='inspectdbclash_people_set')\",\n+            output,\n+        )\n+        self.assertIn(\n+            \"another_people = models.ForeignKey('InspectdbPeople', models.DO_NOTHING, related_name='inspectdbclash_another_people_set')\",\n+            output,\n+        )\n     available_apps = [\"inspectdb\"]\n \n     def test_include_views(self):\n",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..244d8cc 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,7 +153,23 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+            ).select_related('tournament_pool'))\n+            # Verify the issue with select_related, expecting the tournament of the pool to match\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n+    def test_multilevel_filteredrelation_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            # Validate the tournament relation in multi-level select_related\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +180,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..c440cbf 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -14,7 +15,23 @@ from PIL import Image\n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n+import pickle\n+from matplotlib.figure import Figure\n from matplotlib.axes import Axes\n+\n+def test_dpi_consistency_after_unpickling():\n+    fig = Figure(dpi=200)  # Set an initial DPI\n+    original_dpi = fig.dpi\n+    serialized_fig = pickle.dumps(fig)\n+    \n+    fig_unpickled = pickle.loads(serialized_fig)\n+    assert fig_unpickled.dpi == original_dpi, f\"Expected {original_dpi}, got {fig_unpickled.dpi}\"\n+\n+    # Simulate multiple pickle/unpickle loops to check for DPI consistency\n+    for _ in range(10):\n+        serialized_fig = pickle.dumps(fig_unpickled)\n+        fig_unpickled = pickle.loads(serialized_fig)\n+        assert fig_unpickled.dpi == original_dpi, f\"Expected {original_dpi}, got {fig_unpickled.dpi}\"\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..ac4af00 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn import PairGrid\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,6 +1625,21 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n+    def test_pairgrid_map_with_hue(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+\n+        # Test the issue described: using 'hue' in map with categorical data\n+        g = PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            hue_issue_resolved = True  # No exception means issue is resolved\n+        except Exception as e:\n+            hue_issue_resolved = False\n+        \n+        assert hue_issue_resolved, \"Using 'hue' in PairGrid.map with categorical data raises an error\"\n+\n     def test_linewidths(self, long_df):\n \n         f, ax = plt.subplots()\n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..45f651d 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -347,7 +347,22 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n-def test_excinfo_for_later():\n+import pytest\n+\n+def test_raises_str_behavior():\n+    \"\"\"Test str() behavior on pytest.raises context variable and normal exception.\"\"\"\n+    try:\n+        raise LookupError(\"A\\nB\\nC\")\n+    except LookupError as e:\n+        normal_str = str(e)\n+        assert normal_str == \"A\\nB\\nC\"\n+\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    context_str = str(excinfo.value)\n+    assert context_str == \"A\\nB\\nC\"\n+    # Test that str(excinfo) does not provide the same result\n+    assert str(excinfo) != normal_str\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..35a2fac 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,12 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+    def test_collect_only_shortcut(self, testdir):\n+        testdir.makepyfile(\"def test_y(): pass\")\n+        result = testdir.runpytest(\"--co\")\n+        result.stdout.fnmatch_lines([\"*test_y*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +440,12 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+    def test_collect_only_shortcut(self, testdir):\n+        testdir.makepyfile(\"def test_y(): pass\")\n+        result = testdir.runpytest(\"--co\")\n+        result.stdout.fnmatch_lines([\"*test_y*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..360b7ff 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -92,10 +92,23 @@ def missing_attr(c,\n \n \n class _ClassWithDocumentedInit:\n+    pass\n+\n+\n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n     \"\"\"Class docstring.\"\"\"\n \n     def __init__(self, x: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..9c83f09 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,29 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n-\n-def test_Identity_doit():\n+from sympy import Symbol, symbols, Sum\n+from sympy.assumptions.ask import ask\n+from sympy.assumptions import assuming\n+from sympy import Q as Query\n+\n+def test_Identity_sum_elements():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+    \n+    # Test the total sum of the elements of an identity matrix\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n, f\"Expected {n}, got {total_sum}\"\n+\n+    # Test with a specific size identity matrix\n+    n_val = 3\n+    In_spec = Identity(n_val)\n+    total_sum_spec = Sum(Sum(In_spec[i, j], (i, 0, n_val-1)), (j, 0, n_val-1)).doit()\n+    assert total_sum_spec == n_val, f\"Expected {n_val}, got {total_sum_spec}\"\n+    \n+    # Test the diagonal sum\n+    diag_sum = Sum(In[i, i], (i, 0, n-1)).doit()\n+    assert diag_sum == n, f\"Expected {n}, got {diag_sum}\"\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..84affc4 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,13 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_21537():\n+    from sympy.parsing.latex import parse_latex\n+    from sympy import symbols\n+    a, b, c = symbols('a b c')\n+    expr = parse_latex(r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\")\n+    expected = ((a**3 + b)/c)/(1/(c**2))\n+    assert expr == expected, f\"Expected {expected}, but got {expr}\"\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}