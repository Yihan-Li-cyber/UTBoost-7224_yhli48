{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..7188cf9 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,26 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+def test_nested_compound_model_separability():\n+    from astropy.modeling import models\n+    from astropy.modeling.separable import separability_matrix\n+    import numpy as np\n+    \n+    # Define models\n+    linear1 = models.Linear1D(10)\n+    linear2 = models.Linear1D(5)\n+    pix2sky = models.Pix2Sky_TAN()\n+    \n+    # Define compound model\n+    nested_cm = pix2sky & (linear1 & linear2)\n+    \n+    # Check separability matrix for nested compound model\n+    expected_matrix = np.array([[ True,  True, False, False],\n+                                [ True,  True, False, False],\n+                                [False, False,  True,  True],\n+                                [False, False,  True,  True]])\n+    \n+    assert_allclose(separability_matrix(nested_cm), expected_matrix)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..6442a2d 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,11 +1,78 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n \n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n+from io import StringIO\n from .common import assert_almost_equal, assert_equal\n \n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n+def test_write_rst_with_multiple_header_rows():\n+    \"\"\"Test writing a table with multiple header rows\"\"\"\n+    tbl = QTable(\n+        {\n+            \"wave\": [350, 950] * u.nm,\n+            \"response\": [0.7, 1.2] * u.ct,\n+            \"ints\": [1, 2]\n+        }\n+    )\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    expected_output = [\n+        \"===== ======== ====\",\n+        \" wave response ints\",\n+        \"   nm       ct     \",\n+        \"===== ======== ====\",\n+        \"350.0      0.7    1\",\n+        \"950.0      1.2    2\",\n+        \"===== ======== ====\",\n+    ]\n+    assert out.getvalue().splitlines() == expected_output\n+\n+def test_read_rst_with_empty_header_rows():\n+    \"\"\"Test reading with an empty header_rows list\"\"\"\n+    lines = [\n+        \"======= ========\",\n+        \"     nm       ct\",\n+        \"======= ========\",\n+        \"  350.0      0.7\",\n+        \"  950.0      1.2\",\n+        \"======= ========\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[])\n+    assert tbl[\"nm\"][0] == 350.0\n+    assert tbl[\"nm\"][1] == 950.0\n+    assert tbl[\"ct\"][0] == 0.7\n+    assert tbl[\"ct\"][1] == 1.2\n+\n \n def assert_equal_splitlines(arg1, arg2):\n     assert_equal(arg1.splitlines(), arg2.splitlines())\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..2578689 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -43,7 +43,83 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n \n-def test_roundtrip(tmp_path):\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip_enhanced(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    READ TERR 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n+\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"test.qdp\")\n+    path2 = str(tmp_path / \"test2.qdp\")\n+\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+    with pytest.warns(AstropyUserWarning) as record:\n+        table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n+    assert np.any(\n+        [\n+            \"This file contains multiple command blocks\" in r.message.args[0]\n+            for r in record\n+        ]\n+    )\n+\n+    _write_table_qdp(table, path2)\n+\n+    new_table = _read_table_qdp(path2, names=[\"MJD\", \"Rate\"], table_id=0)\n+\n+    for col in new_table.colnames:\n+        is_masked = np.array([np.ma.is_masked(val) for val in new_table[col]])\n+        if np.any(is_masked):\n+            # All NaN values are read as such.\n+            assert np.ma.is_masked(table[col][is_masked])\n+\n+        is_nan = np.array(\n+            [(not np.ma.is_masked(val) and np.isnan(val)) for val in new_table[col]]\n+        )\n+        # All non-NaN values are the same\n+        assert np.allclose(new_table[col][~is_nan], table[col][~is_nan])\n+        if np.any(is_nan):\n+            # All NaN values are read as such.\n+            assert np.isnan(table[col][is_nan])\n+    assert np.allclose(new_table[\"MJD_perr\"], [2.378472e-05, 1.1446759e-05])\n+\n+    for meta_name in [\"initial_comments\", \"comments\"]:\n+        assert meta_name in new_table.meta\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..6ec8a8b 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -253,8 +253,25 @@ class TestTableFunctions(FitsTestCase):\n         # When there are scaled columns, the raw data are in data._parent\n \n         t.close()\n-\n-    def test_ascii_table(self):\n+    def test_d_exponent_replacement(self):\n+        # Set up the data to directly test 'D' exponent behavior\n+        r1 = np.array([1.2345678901234567890e10, 7.890123456789012e-10])\n+        col = fits.Column(name='test', format='D', array=r1)\n+        \n+        # Create a table and write it to a FITS file\n+        hdu = fits.TableHDU.from_columns([col])\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+        \n+        # Check the content of the written file to ensure the 'E' is replaced with 'D'\n+        with open(self.temp('test_d_exponent.fits'), 'r') as f:\n+            content = f.read()\n+            assert '1.23456789012345678D+10' in content\n+            assert '7.890123456789012D-10' in content\n+        \n+        # Read back the file and validate the data integrity\n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            data = hdul[1].data\n+            assert np.allclose(data['test'], r1)\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n         ra1 = np.rec.array([\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..5b7afd1 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,16 +1092,11 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n-\n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permissions(self):\n         \"\"\"\n-        Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n-        the file_permissions_mode attribute of\n-        django.core.files.storage.default_storage.\n+        Test that the default FILE_UPLOAD_PERMISSIONS is 0o644.\n         \"\"\"\n-        self.assertIsNone(default_storage.file_permissions_mode)\n-        with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n-            self.assertEqual(default_storage.file_permissions_mode, 0o777)\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n \n     def test_override_file_upload_directory_permissions(self):\n         \"\"\"\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..c94c54b 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,9 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',\n+            'trailingnewline\\u000A',\n+            'validusername\\ninvalidpart',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +261,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a4d2853 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..4926d2b 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,12 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.db.utils import IntegrityError\n+from django.test.utils import captured_stdout\n \n from .models import Proxy, UserProxy\n \n@@ -140,7 +143,33 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_duplicate_permission_error_handling(self):\n+        \"\"\"\n+        Test that the migration correctly handles duplicate proxy model permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        # Insert duplicate permissions that should trigger an IntegrityError if not handled.\n+        try:\n+            Permission.objects.create(\n+                content_type=proxy_model_content_type,\n+                codename='add_proxy',\n+                name='Can add proxy',\n+            )\n+        except IntegrityError:\n+            self.fail(\"Unexpected IntegrityError: duplicate 'add_proxy' should be handled.\")\n+        \n+        try:\n+            Permission.objects.create(\n+                content_type=proxy_model_content_type,\n+                codename='add_proxy',\n+                name='Can add proxy',\n+            )\n+        except IntegrityError as e:\n+            self.assertIn(\"duplicate key value violates unique constraint\", str(e))\n+        \n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..6754e8f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -3,6 +3,22 @@ import os\n import py_compile\n import shutil\n import sys\n+class TestStatReloader(SimpleTestCase):\n+\n+    def test_manage_py_is_tracked(self):\n+        \"\"\"\n+        Ensure that changes to manage.py trigger the autoreloader.\n+        \"\"\"\n+        # Obtain the path of the main module, which should be manage.py in this context.\n+        main_module = sys.modules['__main__']\n+        manage_py_path = Path(main_module.__file__).resolve()\n+        \n+        # Simulate a change to manage.py by modifying its timestamp.\n+        os.utime(manage_py_path, None)\n+        \n+        # The assertion checks if manage.py is included in autoreload tracking.\n+        self.assertFileFound(manage_py_path)\n+\n import tempfile\n import threading\n import time\n@@ -10,7 +26,9 @@ import types\n import weakref\n import zipfile\n from importlib import import_module\n+import os\n from pathlib import Path\n+import sys\n from unittest import mock, skip, skipIf\n \n from django.apps.registry import Apps\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..9ad9103 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -10,6 +10,8 @@ from pathlib import Path\n from unittest import mock\n \n from django.core import mail\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db import DatabaseError, connection\n from django.shortcuts import render\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..255d700 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -317,7 +317,33 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_bad_validators(self):\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n         class Model(models.Model):\n             field = models.CharField(max_length=10, validators=[True])\n \n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..f7b71e0 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -316,9 +317,32 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Set up test cases\n+        utcnow_2019 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2020 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_2048 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        test_cases = [\n+            # Test cases based on issue description\n+            (utcnow_2019, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_2019, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_2019, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2020, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2020, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_2048, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_2048, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        ]\n+\n+        for utcnow, rfc850str, expected_date in test_cases:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11964": "",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..d84947d 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,7 +148,37 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+class OverridingFieldDisplayTests(SimpleTestCase):\n+\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+            \n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_overriding_FIELD_display_with_str_method(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def __str__(self):\n+                return self.get_foo_bar_display()\n+            \n+            def get_foo_bar_display(self):\n+                return 'custom_display'\n+            \n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(str(f), 'custom_display')\n+\n+    def test_default_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+            \n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..290a913 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,6 +76,43 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_valid_variant_consistent_language_settings(self):\n+        # This test covers situations where a base language is available.\n+        tests = ['fr-CA', 'es-419', 'de-at', 'ca-ES-valencia']\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('en', 'English'),\n+            ('de', 'German'),\n+            ('fr', 'French'),\n+        ],\n+    )\n+    def test_invalid_language_code_without_base(self):\n+        # Ensure error is raised when neither sublanguage nor base language are available.\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        tests = ['fr-357', 'de-CH', 'it-it']\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [\n+                    Error(msg, id='translation.E004'),\n+                ])\n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..f0d9143 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +6,8 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -18,6 +20,77 @@ def get_connection_copy():\n     return test_connection\n \n \n+class TestDeserializeDbFromString(TestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"[\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=1)\n+        obj_ref = ObjectReference.objects.get(pk=1)\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_foreign_key_ordering(self):\n+        # Testing foreign key dependencies with multiple objects.\n+        data = \"\"\"[\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": 2}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 3,\n+                \"fields\": {\"obj_ref\": 2, \"related_objects\": [2]}\n+            }\n+        ]\"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=3)\n+        obj_ref = ObjectReference.objects.get(pk=2)\n+        obj_no_ref = Object.objects.get(pk=2)\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj_no_ref)\n+\n+    def test_no_integrity_error_on_deserialize(self):\n+        # Ensuring no integrity errors happen during deserialization when wrapped in a transaction.\n+        data = \"\"\"[\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 4,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 3,\n+                \"fields\": {\"obj\": 4}\n+            }\n+        ]\"\"\"\n+        try:\n+            connection.creation.deserialize_db_from_string(data)\n+            obj = Object.objects.get(pk=4)\n+            obj_ref = ObjectReference.objects.get(pk=3)\n+            self.assertEqual(obj_ref.obj, obj)\n+        except IntegrityError:\n+            self.fail(\"IntegrityError was raised during deserialization\")\n+\n class TestDbSignatureTests(SimpleTestCase):\n     def test_default_name(self):\n         # A test db name isn't set.\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..fa82b38 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -128,6 +128,63 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_correct_error_hint_for_recursive_relationship(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('self', through='RecursiveRelationship')\n+\n+        class RecursiveRelationship(models.Model):\n+            group1 = models.ForeignKey(Group, models.CASCADE, related_name='group1')\n+            group2 = models.ForeignKey(Group, models.CASCADE, related_name='group2')\n+\n+        field = Group._meta.get_field('members')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.members', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"RecursiveRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n+    def test_non_recursive_additional_foreignkey(self):\n+        class Product(models.Model):\n+            pass\n+\n+        class Store(models.Model):\n+            products = models.ManyToManyField('Product', through='Inventory')\n+\n+        class Supplier(models.Model):\n+            pass\n+\n+        class Inventory(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+            store = models.ForeignKey(Store, models.CASCADE)\n+            supplier = models.ForeignKey(Supplier, models.CASCADE)\n+\n+        field = Store._meta.get_field('products')\n+        self.assertEqual(field.check(from_model=Store), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Store.products', but it has more than one \"\n+                \"foreign key from 'Store', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=None,\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_ambiguous_relationship_model(self):\n \n         class Person(models.Model):\n@@ -159,6 +216,63 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_correct_error_hint_for_recursive_relationship(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('self', through='RecursiveRelationship')\n+\n+        class RecursiveRelationship(models.Model):\n+            group1 = models.ForeignKey(Group, models.CASCADE, related_name='group1')\n+            group2 = models.ForeignKey(Group, models.CASCADE, related_name='group2')\n+\n+        field = Group._meta.get_field('members')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.members', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"RecursiveRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n+    def test_non_recursive_additional_foreignkey(self):\n+        class Product(models.Model):\n+            pass\n+\n+        class Store(models.Model):\n+            products = models.ManyToManyField('Product', through='Inventory')\n+\n+        class Supplier(models.Model):\n+            pass\n+\n+        class Inventory(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+            store = models.ForeignKey(Store, models.CASCADE)\n+            supplier = models.ForeignKey(Supplier, models.CASCADE)\n+\n+        field = Store._meta.get_field('products')\n+        self.assertEqual(field.check(from_model=Store), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Store.products', but it has more than one \"\n+                \"foreign key from 'Store', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=None,\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "",
  "django__django-12708": "",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..0fd27c7 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,7 +685,32 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n-    def test_fast_delete_empty_no_update_can_self_select(self):\n+    def test_delete_empty_dict_no_foreign_key(self):\n+        \"\"\"\n+        Test if deleting objects with no foreign keys returns\n+        a dictionary with zero counts for each model when \n+        no objects are deleted.\n+        \"\"\"\n+        existed_objs = {\n+            'delete.BlockLibrary': 0,  # assuming 'delete.BlockLibrary' is a simple model without foreign key\n+        }\n+        deleted, deleted_objs = BlockLibrary.objects.filter(pk=-1).delete()  # ensure no objects are selected for deletion\n+        self.assertEqual(deleted, 0)\n+        self.assertDictEqual(deleted_objs, existed_objs)\n+    \n+    def test_delete_empty_dict_with_foreign_key(self):\n+        \"\"\"\n+        Test if deleting objects with foreign keys returns \n+        a dictionary with zero counts for each model when \n+        no objects are deleted.\n+        \"\"\"\n+        existed_objs = {\n+            'delete.FileAccess': 0, # assuming 'delete.FileAccess' and `delete.File` are models with foreign key relations\n+            'delete.File': 0,\n+        }\n+        deleted, deleted_objs = FileAccess.objects.filter(pk=-1).delete()  # ensure no objects are selected for deletion\n+        self.assertEqual(deleted, 0)\n+        self.assertDictEqual(deleted_objs, existed_objs)\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n         `no_update_can_self_select` feature should work even if the specified\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..b3e799e 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -73,12 +73,71 @@ class ASGITest(SimpleTestCase):\n                 (b'Content-Disposition', b'inline; filename=\"urls.py\"'),\n             },\n         )\n+from pathlib import Path\n+import os\n+\n+TEST_STATIC_ROOT = Path(__file__).parent / 'static'\n+\n+class TestASGIStaticFilesHandler(SimpleTestCase):\n+    async_request_factory = AsyncRequestFactory()\n+\n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n         response_body = await communicator.receive_output()\n         self.assertEqual(response_body['type'], 'http.response.body')\n         self.assertEqual(response_body['body'], test_file_contents)\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n+    async def test_unicode_in_static_path(self):\n+        request = self.async_request_factory.get('/static/\u6f22\u5b57/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        # Assuming such file does not exist, it should return a 404\n+        self.assertEqual(response.status_code, 404)\n+\n+    async def test_directory_traversal(self):\n+        request = self.async_request_factory.get('/static/../settings.py')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        # Directory traversal attempt should also return a 404\n+        self.assertEqual(response.status_code, 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..2eafb2e 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -200,6 +200,19 @@ class TestUtilsText(SimpleTestCase):\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n+\n+        # New test cases for verifying the stripping of underscores and dashes\n+        issues_to_test = [\n+            (\"___This is a test ---\", \"this-is-a-test\", False),\n+            (\"--strip-dash-value---\", \"strip-dash-value\", False),\n+            (\"__strip-mixed-value---\", \"strip-mixed-value\", False),\n+            (\"_ -strip-mixed-value _-\", \"strip-mixed-value\", False),\n+            (\"underscore_in-value\", \"underscore_in-value\", False),\n+            (\"   __leading_and_trailing_   \", \"leading-and-trailing\", False),\n+            (\"---dash_at_the_start---\", \"dash-at-the-start\", False),\n+        ]\n+        for value, expected_output, is_unicode in issues_to_test:\n+            self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n         # interning the result may be useful, e.g. when fed to Path.\n         self.assertEqual(sys.intern(text.slugify('a')), 'a')\n \n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..4e67593 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2819,6 +2819,73 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Test models\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n     def test_callable_called_each_time_form_is_instantiated(self):\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..7b7836f 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -2,6 +2,8 @@ from django.contrib.contenttypes.fields import (\n     GenericForeignKey, GenericRelation,\n )\n from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n+from django.test import SimpleTestCase, TestCase\n from django.core.checks import Error\n from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n@@ -11,7 +13,33 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n-    def test_single_parent(self):\n+    def test_abstract_inherited_fields_equality(self):\n+        \"\"\"Test that fields from different models inheriting the same abstract base model are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+        with self.assertRaises(TypeError):\n+            sorted({abstract_model_field, inherit1_model_field, inherit2_model_field})\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n \n@@ -347,4 +375,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..dc1d5bd 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,6 +39,31 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_email_change(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (User, 'test@example.com'),\n+            (CustomEmailField, 'test2@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                # Create a user with initial email\n+                user = model.objects.create_user(\n+                    'user_for_email_change',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                token_generator = PasswordResetTokenGenerator()\n+                # Generate a token for the user\n+                token = token_generator.make_token(user)\n+                # Verify that the generated token is valid\n+                self.assertTrue(token_generator.check_token(user, token))\n+                # Change the user's email\n+                setattr(user, user.get_email_field_name(), 'newemail@example.com')\n+                user.save()\n+                # Assert that the token is now invalid after email change\n+                self.assertFalse(token_generator.check_token(user, token))\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..0450c99 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -875,6 +876,44 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'],\n             ordered=False\n         )\n+\n+    def test_range_lookup_namedtuple(self):\n+        from collections import namedtuple\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        Company.objects.create(name='99300 Ltd', num_employees=99)\n+\n+        # Test with namedtuple with valid range\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'])\n+\n+        # Test with namedtuple with reverse range (invalid logically but should not error)\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=51),\n+        )\n+        self.assertQuerysetEqual(qs, [])\n+\n+        # Test with namedtuple with same start and end\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'])\n+\n+        # Test with a list of namedtuples to ensure multiple filters work\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        Company.objects.create(name='20000 Ltd', num_employees=25)\n+        Company.objects.create(name='55000 Ltd', num_employees=55)\n+\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=20, maximum=30)\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 20000 Ltd>'])\n+\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=50, maximum=60)\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 55000 Ltd>'])\n         self.assertQuerysetEqual(\n             Company.objects.filter(num_employees__range=(1, 100)),\n             [\n@@ -884,6 +923,44 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple(self):\n+        from collections import namedtuple\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        Company.objects.create(name='99300 Ltd', num_employees=99)\n+\n+        # Test with namedtuple with valid range\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'])\n+\n+        # Test with namedtuple with reverse range (invalid logically but should not error)\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=51),\n+        )\n+        self.assertQuerysetEqual(qs, [])\n+\n+        # Test with namedtuple with same start and end\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'])\n+\n+        # Test with a list of namedtuples to ensure multiple filters work\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        Company.objects.create(name='20000 Ltd', num_employees=25)\n+        Company.objects.create(name='55000 Ltd', num_employees=55)\n+\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=20, maximum=30)\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 20000 Ltd>'])\n+\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=50, maximum=60)\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 55000 Ltd>'])\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..1058e92 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -28,6 +28,9 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..8ac2b5f 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -44,9 +45,45 @@ class ShellCommandTestCase(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, \"Couldn't import bpython interface.\"):\n             call_command('shell', interface='bpython')\n \n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+    \n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     # [1] Patch select to prevent tests failing when when the test suite is run\n     # in parallel mode. The tests are run in a subprocess and the subprocess's\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..ab368ff 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -963,7 +963,15 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n         self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n \n \n-@override_settings(ROOT_URLCONF='admin_inlines.urls')\n+from django.test import RequestFactory\n+from django.urls import reverse\n+from django.test import TestCase\n+from django.contrib.admin.sites import AdminSite\n+from .models import Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile, ProfileCollection\n+from .admin import ModelAdmin\n+from django.contrib.admin.options import TabularInline\n+\n+admin_site = AdminSite()\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n \n@@ -1013,7 +1021,54 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_verbose_name_inline(self):\n+        class NonVerboseProfileInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Non-verbose childs'\n+\n+        class VerboseNameProfileInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Childs with verbose name'\n+\n+        class VerboseNamePluralProfileInline(TabularInline):\n+            model = VerboseNamePluralProfile\n+            verbose_name = 'Childs with verbose name plural'\n+\n+        class BothVerboseNameProfileInline(TabularInline):\n+            model = BothVerboseNameProfile\n+            verbose_name = 'Childs with both verbose names'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            NonVerboseProfileInline,\n+            VerboseNameProfileInline,\n+            VerboseNamePluralProfileInline,\n+            BothVerboseNameProfileInline,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        self.assertNotContains(response, 'Add another Profile')\n+        # Non-verbose model.\n+        self.assertContains(response, '<h2>Non-verbose childss</h2>')\n+        self.assertContains(response, 'Add another Non-verbose child')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n+        # Model with verbose name.\n+        self.assertContains(response, '<h2>Childs with verbose names</h2>')\n+        self.assertContains(response, 'Add another Childs with verbose name')\n+        self.assertNotContains(response, '<h2>Model with verbose name onlys</h2>')\n+        self.assertNotContains(response, 'Add another Model with verbose name only')\n+        # Model with verbose name plural.\n+        self.assertContains(response, '<h2>Childs with verbose name plurals</h2>')\n+        self.assertContains(response, 'Add another Childs with verbose name plural')\n+        self.assertNotContains(response, '<h2>Model with verbose name plural only</h2>')\n+        # Model with both verbose names.\n+        self.assertContains(response, '<h2>Childs with both verbose namess</h2>')\n+        self.assertContains(response, 'Add another Childs with both verbose names')\n+        self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n+        self.assertNotContains(response, 'Add another Model with both - name')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n@@ -1072,7 +1127,15 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertNotContains(response, 'Add another Model with both - name')\n \n \n-@override_settings(ROOT_URLCONF='admin_inlines.urls')\n+from django.test import RequestFactory\n+from django.urls import reverse\n+from django.test import TestCase\n+from django.contrib.admin.sites import AdminSite\n+from .models import Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile, ProfileCollection\n+from .admin import ModelAdmin\n+from django.contrib.admin.options import TabularInline\n+\n+admin_site = AdminSite()\n class SeleniumTests(AdminSeleniumTestCase):\n \n     available_apps = ['admin_inlines'] + AdminSeleniumTestCase.available_apps\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..29738ca 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -595,7 +595,19 @@ class TestQuerying(TestCase):\n             [self.objs[4]],\n         )\n \n-    def test_isnull_key_or_none(self):\n+    def test_isnull_key_j(self):\n+        # Test the behavior of key 'j' for both __isnull=True and __isnull=False cases\n+        # Specifically for SQLite and Oracle, when `__isnull=True` should not match JSON null\n+        # __isnull=True should match the objects without the key, not where key's value is null\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        # Ensure __isnull=False does find those with the key, including those with JSON null value\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=False),\n+            [self.objs[4]],\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..1bf8b7f 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,27 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.forms import ModelChoiceField\n+from .models import ChoiceModel\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Setup the ChoiceModel instances used for the queryset\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+        \n+        # Test for inclusion of invalid value in error message \n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': _('\"%(value)s\" is not one of the available choices.'),\n+            },\n+        )\n+        \n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +326,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..ae4574e 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n from copy import deepcopy\n \n from django.core.exceptions import FieldError, MultipleObjectsReturned\n from django.db import IntegrityError, models, transaction\n from django.test import TestCase\n+from .models import ParentStringPrimaryKey, ChildStringPrimaryKeyParent\n from django.utils.translation import gettext_lazy\n \n from .models import (\n@@ -547,6 +549,32 @@ class ManyToOneTests(TestCase):\n         child.save()\n         child.refresh_from_db()\n         self.assertEqual(child.parent, parent)\n+\n+    def test_fk_assignment_before_saving(self):\n+        with transaction.atomic():\n+            # Create an instance of Order without predefining SKU in the Product\n+            parent = ParentStringPrimaryKey()\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            parent.name = 'linda'\n+            parent.save()\n+            child.save()\n+\n+            # Check that the parent's name is used as child's parent_id\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, 'linda')\n+\n+    def test_fk_assignment_after_saving(self):\n+        with transaction.atomic():\n+            # Create an instance of Order with SKU pre-defined in Product\n+            parent = ParentStringPrimaryKey(name='mike')\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            parent.save()\n+            child.save()\n+\n+            # Check all relations and IDs are proper\n+            self.assertTrue(ChildStringPrimaryKeyParent.objects.filter(parent=parent).exists())\n+            self.assertEqual(child.parent_id, 'mike')\n         self.assertEqual(child.parent_id, parent.name)\n \n     def test_fk_to_bigautofield(self):\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..ba38b3b 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,6 +17,17 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n+    def test_q_object_with_dict_keys(self):\n+        # Test using dict_keys with & operator\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+        # Test using dict_keys with | operator\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..e42cf81 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -794,6 +794,27 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n+    def test_boolean_expression_with_exists_and_q(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        tests = [\n+            (Exists(is_ceo) & Q(), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Q() & Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Exists(is_ceo) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Q() | Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_poc) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Q() | Exists(is_poc), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+        ]\n+\n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n+\n     def test_boolean_expression_combined(self):\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..0d6ff3b 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1127,8 +1127,25 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[0], func)\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n-\n-    def test_resolver_match_on_request(self):\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = (\n+                    f\"functools.partial({views.empty_view!r}, \"\n+                    f\"template_name='{template_name}')\"\n+                )\n+                self.assertEqual(\n+                    repr(resolve(f'/{name}/')),\n+                    f\"ResolverMatch(func={func}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\",\n+                )\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n@@ -1146,6 +1163,10 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from urlpatterns_reverse import views\n+from django.urls import resolve\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..bcae4e0 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2196,8 +2196,29 @@ class StartApp(AdminScriptTestCase):\n                     \"CommandError: '%s' is not a valid app directory. Please \"\n                     \"make sure the directory is a valid identifier.\" % bad_target\n                 )\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test that a trailing slash in the target app directory name\n+        does not cause an error and creates the expected files.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2/')\n+        os.makedirs(os.path.dirname(app_dir))\n+        _, err = self.run_django_admin(['startapp', 'myapp', app_dir])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n \n-    def test_importable_target_name(self):\n+    def test_trailing_slash_without_directory_creation(self):\n+        \"\"\"\n+        Test that providing a non-existing directory with a trailing slash\n+        results in the appropriate error without creating the directory.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'non_existing_dir/')\n+        _, err = self.run_django_admin(['startapp', 'myapp', app_dir])\n+        self.assertOutput(\n+            err,\n+            \"CommandError: Destination directory '%s' does not exist, please create it first.\" % app_dir\n+        )\n+        self.assertFalse(os.path.exists(app_dir))\n         _, err = self.run_django_admin(['startapp', 'app', 'os'])\n         self.assertOutput(\n             err,\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..7dfedfd 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,7 +1020,27 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_hash_widget_label_for(self):\n+        \"\"\"\n+        Test that ReadOnlyPasswordHashWidget's label does not have a 'for'\n+        attribute pointing to a non-labelable element.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n+    def test_readonly_password_hash_widget_html_output(self):\n+        \"\"\"\n+        Test the HTML output of ReadOnlyPasswordHashWidget to ensure it does\n+        not render with a 'for' attribute in any label pointing to it.\n+        \"\"\"\n+        widget = ReadOnlyPasswordHashWidget()\n+        output = widget.render('some-name', 'dummy-hash-value')\n+        self.assertNotIn('<label for=', output)\n+        self.assertIn('<div', output)\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..ceaeb0c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,36 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_serialize_missing_import(self):\n+        \"\"\"\n+        Test the serialization of a model referencing MyField and MyMixin to ensure the proper imports are generated.\n+        \"\"\"\n+        # Define the model properties\n+        fields = {\n+            'name': models.TextField(primary_key=True),\n+        }\n+\n+        class MyMixin:\n+            pass\n+\n+        # Options for this model\n+        options = {\n+            'abstract': False,\n+        }\n+\n+        # Use the MigrationWriter directly to simulate serialization behavior\n+        migration_writer = MigrationWriter(migrations.CreateModel(\n+            name=\"MyModel\",\n+            fields=fields,\n+            options=options,\n+            bases=(MyMixin, models.Model),  # This should require 'models' in the import\n+        ))\n+\n+        serialized_imports = migration_writer.serialize_imports()\n+        \n+        # Check whether both 'app.models' and 'django.db.models' are imported\n+        self.assertIn('from django.db import models', serialized_imports)\n+        self.assertIn('import app.models', serialized_imports)\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..5184232 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -358,7 +358,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        # Test that non_form_errors have proper CSS class 'nonform'\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +986,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        # Test that non_form_errors have proper CSS class 'nonform'\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..464ae6b 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -19,8 +19,20 @@ class M2mThroughTests(TestCase):\n         cls.jane = Person.objects.create(name='Jane')\n         cls.rock = Group.objects.create(name='Rock')\n         cls.roll = Group.objects.create(name='Roll')\n-\n-    def test_retrieve_intermediate_items(self):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        reverse_m2m = Event._meta.get_field('invitees')\n+        self.assertEqual(reverse_m2m.through_fields, ('event', 'invitee'))\n+        \n+        # Additional test to verify the hashing function after the fix\n+        inherited_reverse_m2m = Event._meta.get_field('invitees')\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n+\n+        # Ensuring no TypeError is raised for hashing\n+        try:\n+            hash(reverse_m2m)\n+            hash(inherited_reverse_m2m)\n+        except TypeError:\n+            self.fail(\"Hashing raised TypeError unexpectedly!\")\n         Membership.objects.create(person=self.jim, group=self.rock)\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..5621696 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -294,6 +294,50 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n+import datetime\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.urls import path\n+from django.http import JsonResponse\n+from django.contrib.auth import get_user_model\n+from django.test import TestCase, RequestFactory, override_settings\n+import json\n+\n+User = get_user_model()\n+\n+class AdditionalFieldsTests(TestCase):\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        self.factory = RequestFactory()\n+        self.url = '/autocomplete/'\n+        self.opts = {'app_label': 'admin_views', 'model_name': 'question'}\n+        self.as_view_args = {'admin_site': None}  # Adjust based on your admin site configurations\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+    def test_additional_field_in_autocomplete(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                result = super().serialize_result(obj, to_field_name)\n+                result['posted'] = str(obj.posted)\n+                return result\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..556653f 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,7 +426,71 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+class MethodDecoratorTests(TestCase):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_partial_function_preservation(self):\n+        \"\"\"Ensure method_decorator works with partial functions.\"\"\"\n+        some_name = 'test_partial'\n+        \n+        def simple_function(a, b):\n+            return a + b\n+\n+        partial_func = partial(simple_function, 1)\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return partial_func(2)\n+\n+        result = Test().method()\n+        self.assertEqual(result, 3)\n+        self.assertEqual(getattr(partial_func, '__module__', None), 'builtins')\n+        self.assertEqual(getattr(partial_func, '__name__', None), some_name)\n+\n+    def test_method_decorator_on_method(self):\n+        \"\"\"@method_decorator should correctly apply to methods.\"\"\"\n+        \n+        def simple_decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                return f\"Decorated: {func(*args, **kwargs)}\"\n+            return inner\n+\n+        class Test:\n+            @method_decorator(simple_decorator)\n+            def method(self):\n+                return 'method'\n+\n+        result = Test().method()\n+        self.assertEqual(result, \"Decorated: method\")\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..0b8761f 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5109,6 +5109,40 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n             language=language,\n             user=self.superuser,\n         )\n+        \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper method to verify the URL of readonly ForeignKey fields.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+        response = self.client.get(\n+            reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        # Check that the link uses the appropriate admin site namespace\n+        self.assertContains(response, reverse(f'{admin_site}:admin_views_language_change', args=(language.pk,)))\n+        \n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test the default admin site for readonly ForeignKey field links.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+    \n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test the custom admin site for readonly ForeignKey field links.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom-admin')\n+\n         response = self.client.get(\n             reverse('admin:admin_views_readonlyrelatedfield_change', args=(obj.pk,)),\n         )\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..eb2d81e 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,27 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_model_choice_iterator_value_hashable(self):\n+        # Creating instances of ModelChoiceIteratorValue\n+        value_a = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_b = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        value_c = ModelChoiceIteratorValue(self.c1.pk, self.c1)  # Same as value_a for equality check\n+        \n+        # Check hashability by adding to a set\n+        unique_values = {value_a, value_b}\n+        self.assertIn(value_a, unique_values)\n+        self.assertIn(value_b, unique_values)\n+        \n+        # Ensure that value_a and value_c are considered equal within the set\n+        self.assertIn(value_c, unique_values)\n+        self.assertEqual(len(unique_values), 2)  # Only two unique values should be present\n+        \n+        # Adding ModelChoiceIteratorValue to a dictionary as a key\n+        value_dict = {value_a: \"Category 1\", value_b: \"Category 2\"}\n+        self.assertEqual(value_dict[value_a], \"Category 1\")\n+        self.assertEqual(value_dict[value_c], \"Category 1\")\n+        self.assertNotEqual(value_dict[value_a], \"Category 2\")\n+        self.assertIn(value_c, value_dict)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..c1bc571 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -792,8 +792,39 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Pony.objects.count(), 2)\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n+    def test_rename_model_with_db_table_noop_fk(self):\n+        app_label = 'test_rmwdbtn_fk'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Parent', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'parent'}),\n+            migrations.CreateModel('Child', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('parent', models.ForeignKey('%s.Parent' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Parent', 'Ancestor')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Assert no database queries are made during the rename operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Assert no queries on rollback\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n \n-    def test_rename_m2m_target_model(self):\n+        Parent = new_state.apps.get_model(app_label, \"Parent\")\n+        Child = new_state.apps.get_model(app_label, \"Child\")\n+        # Insert and relate models\n+        parent = Parent.objects.create()\n+        child = Child.objects.create(parent=parent)\n+        self.assertEqual(Parent.objects.count(), 1)\n+        self.assertEqual(Child.objects.count(), 1)\n+        self.assertEqual(child.parent_id, parent.id)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..4096c05 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -136,6 +136,21 @@ class MultiValueFieldTest(SimpleTestCase):\n         f = MultiValueField(fields=(CharField(), CharField()), disabled=True)\n         self.assertIs(f.has_changed(['x', 'x'], ['y', 'y']), False)\n \n+    def test_multivaluewidget_label_id_without_index(self):\n+        # Test to ensure that labels are generated without index if not needed.\n+        class MultiWidgetForm(Form):\n+            field = SplitDateTimeField(widget=SplitDateTimeWidget(attrs={'id': 'custom_id'}))\n+\n+        form = MultiWidgetForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"custom_id_0\">Field:</label></th>\n+            <td><input type=\"text\" name=\"field_0\" id=\"custom_id_0\" required>\n+            <input type=\"text\" name=\"field_1\" id=\"custom_id_1\" required></td></tr>\n+            \"\"\",\n+        )\n+\n     def test_form_as_table(self):\n         form = ComplexFieldForm()\n         self.assertHTMLEqual(\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..ec77329 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,6 +70,8 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            # URL previously causing ValueError.\n+            '////]@N.AN',\n         ]\n         for url, expected in tests:\n             with self.subTest(url=url):\n@@ -100,6 +102,8 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # URL previously causing ValueError.\n+            '////]@N.AN',\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..4b34e8a 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -2,6 +2,7 @@ import datetime\n from decimal import Decimal\n \n from django.core.exceptions import FieldDoesNotExist, FieldError\n+from django.db.models import ExpressionWrapper, BooleanField, Q, Sum\n from django.db.models import (\n     BooleanField, Case, CharField, Count, DateTimeField, DecimalField, Exists,\n     ExpressionWrapper, F, FloatField, Func, IntegerField, Max, OuterRef, Q,\n@@ -197,7 +198,25 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n-    def test_empty_expression_annotation(self):\n+    def test_NOTQ_expression_annotation(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_NOTQ_expression_annotation_with_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    def test_aggregate_over_NOTQ_expression_annotation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n         )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..d9175b1 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -8,6 +9,8 @@ from django.contrib.messages.storage.cookie import (\n     CookieStorage, MessageDecoder, MessageEncoder,\n )\n from django.test import SimpleTestCase, override_settings\n+from django.contrib.messages.storage.base import Message\n+from django.contrib.messages.storage.cookie import MessageEncoder, MessageDecoder\n from django.utils.crypto import get_random_string\n from django.utils.safestring import SafeData, mark_safe\n \n@@ -104,7 +107,25 @@ class CookieTests(BaseTests, SimpleTestCase):\n         # The message actually contains what we expect.\n         self.assertEqual(list(storage), [])\n \n-    def test_max_cookie_length(self):\n+    def test_empty_string_extra_tags(self):\n+        \"\"\"\n+        Test that an empty string for extra_tags is preserved after\n+        serialization and deserialization.\n+        \"\"\"\n+        original_message = Message(constants.DEBUG, \"Message with empty tags\", extra_tags=\"\")\n+        encoded_message = MessageEncoder().encode(original_message)\n+        decoded_message = MessageDecoder().decode(encoded_message)\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n+\n+    def test_none_extra_tags(self):\n+        \"\"\"\n+        Test that None for extra_tags is preserved after serialization\n+        and deserialization.\n+        \"\"\"\n+        original_message = Message(constants.DEBUG, \"Message with None tags\", extra_tags=None)\n+        encoded_message = MessageEncoder().encode(original_message)\n+        decoded_message = MessageDecoder().decode(encoded_message)\n+        self.assertIsNone(decoded_message.extra_tags)\n         \"\"\"\n         If the data exceeds what is allowed in a cookie, older messages are\n         removed before saving (and returned by the ``update`` method).\n",
  "django__django-15388": "",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..59e4230 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,34 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty string for the If-Modified-Since header is handled\n+        gracefully without raising an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+    \n+    def test_was_modified_since_invalid_string(self):\n+        \"\"\"\n+        Test that an invalid date string for the If-Modified-Since header is handled\n+        gracefully without raising an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"invalid-date\", mtime=1))\n+\n+    def test_was_modified_since_malformed_date(self):\n+        \"\"\"\n+        Test that a malformed date string for the If-Modified-Since header is handled\n+        gracefully without raising an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"Sat, 32 Feb 2020 25:61:61 GMT\", mtime=1))\n+\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty string for the If-Modified-Since header is handled\n+        gracefully without raising an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+    \n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..b18bc57 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,5 +1,7 @@\n+\n import os\n from io import StringIO\n+from argparse import ArgumentDefaultsHelpFormatter\n from unittest import mock\n \n from admin_scripts.tests import AdminScriptTestCase\n@@ -411,7 +413,36 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_formatter_on_parse(self):\n+        \"\"\"Test that the custom formatter class is applied when creating a parser.\"\"\"\n+        epilog = \"Example usage:\\n\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter\n+        )\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+\n+        # Emulate command line arguments parsing to check help message format\n+        with mock.patch('sys.stdout', new_callable=StringIO) as mock_stdout:\n+            with self.assertRaises(SystemExit):\n+                parser.print_help()\n+            output = mock_stdout.getvalue()\n+\n+        # Check that example usage text is formatted as expected\n+        expected_output = (\n+            \"usage: prog_name subcommand [-h] [--version] [-v {0,1,2,3}]\\n\"\n+            \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[--settings SETTINGS]\\n\"\n+            \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[--pythonpath PYTHONPATH]\\n\"\n+            \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[--traceback] [--no-color]\\n\"\n+            \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[--force-color]\\n\"\n+            \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[--skip-checks]\\n\"\n+            \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\n\"\n+            \"Example usage:\\n\"\n+            \"\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+        )\n+        self.assertIn(expected_output, output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..36b6141 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n+import json\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -211,6 +214,35 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n+    def test_json_script_default_encoder(self):\n+        # Test using the default DjangoJSONEncoder\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_subclass(self):\n+        # Custom encoder subclass of DjangoJSONEncoder\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"encoder\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"encoder\"}</script>',\n+        )\n+    \n+    def test_json_script_custom_encoder_jsonencoder(self):\n+        # Custom encoder subclass of standard JSONEncoder\n+        class CustomJSONEncoder(json.JSONEncoder):\n+            def encode(self, o):\n+                return '{\"override\": \"value\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomJSONEncoder),\n+            '<script type=\"application/json\">{\"override\": \"value\"}</script>',\n+        )\n+\n     def test_json_script_without_id(self):\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n",
  "django__django-15790": "",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..5eb22d0 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,7 +399,20 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n+class ProxyModelQuerySetTests(TestCase):\n+    def setUp(self):\n+        # Set up initial data for tests\n+        self.custom_instance = CustomModel.objects.create(name=\"Test Name\")\n+        self.proxy_instance = ProxyCustomModel.objects.create(name=\"Test Proxy Name\")\n+        AnotherModel.objects.create(custom=self.proxy_instance)\n+\n+    def test_select_related_only_on_proxy(self):\n+        # Test to reproduce the issue\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        try:\n+            list(queryset) # This should not raise an error\n+        except ValueError as e:\n+            self.fail(f\"QuerySet raised ValueError unexpectedly: {e}\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..fcdf631 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,27 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_precede_dbname(self):\n+        # Test case to verify additional parameters are passed before the dbname.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM some_table;\"]),\n+            ([\"psql\", \"-c\", \"SELECT * FROM some_table;\", \"dbname\"], None),\n+        )\n+        \n+    def test_parameters_multiple(self):\n+        # Test case to verify multiple parameters precede the dbname.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-a\", \"-b\", \"-c\", \"SELECT version();\"]),\n+            ([\"psql\", \"-a\", \"-b\", \"-c\", \"SELECT version();\", \"dbname\"], None),\n+        )\n+        \n+    def test_no_parameters(self):\n+        # Test case to verify behavior with no additional parameters given.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n@@ -183,4 +204,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..918cfa3 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1900,13 +1900,43 @@ class AllValidTests(SimpleTestCase):\n \n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n-        from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n-\n+        from django.forms.models import BaseModelFormSet\n+        from django.forms import formset_factory\n+        from django.test.utils import isolate_lru_cache\n+        from django.forms.renderers import get_default_renderer\n+        from django.forms import BaseFormSet\n+        import warnings\n+        from django.test import TestCase\n+        # This import is necessary for capturing the deprecation warning.\n+        from django.utils.deprecation import RemovedInDjango50Warning\n+\n+class ManagementFormDeprecationWarningTests(TestCase):\n+    \n+    def test_no_management_form_warning(self):\n+        \"\"\"\n+        Test no deprecation warning is raised for management forms using default.html.\n+        \"\"\"\n+        with isolate_lru_cache(get_default_renderer), self.settings(\n+            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+        ):\n+            ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+            formset = ChoiceFormSet()\n+            \n+            with self.assertRaisesMessage(DjangoRuntimeWarning, DEFAULT_TEMPLATE_DEPRECATION_MSG):\n+                # Rendering management form should not raise the deprecation warning\n+                _ = str(formset.management_form)\n+    \n+    def test_custom_forms_raise_warning(self):\n+        \"\"\"\n+        Test deprecation warning is captured when rendering regular forms using default.html.\n+        \"\"\"\n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n-        ), self.assertRaisesMessage(\n-            RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n         ):\n+            # Simulate typical form rendering that results in a warning\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            \n+            with self.assertWarnsMessage(RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG):\n+                # Rendering the regular form set should raise the deprecation warning\n+                _ = str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..9cfbb4e 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,14 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        # This test checks that the 'empty_permitted' kwarg is ignored for the empty_form\n+        ArticleFormSet = formset_factory(CustomKwargForm)\n+        formset = ArticleFormSet(form_kwargs={\"empty_permitted\": False})\n+        # Assert that the empty_form's empty_permitted attribute remains True, \n+        # indicating the kwarg was ignored as it should be.\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..ceb652b 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,6 @@\n+\n import datetime\n+import urllib.parse\n import re\n from unittest import mock\n \n@@ -24,6 +26,7 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n \n from .models.custom_user import (\n@@ -884,6 +887,28 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+            current_app=\"admin\",\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+            current_app=\"admin\",\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+        \n     def test_bug_19349_bound_password_field(self):\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/urls/http.py b/tests/sitemaps_tests/urls/http.py\nindex 06fe213..a9272b2 100644\n--- a/tests/sitemaps_tests/urls/http.py\n+++ b/tests/sitemaps_tests/urls/http.py\n@@ -225,14 +225,50 @@ generic_sitemaps_lastmod = {\n     ),\n }\n \n+callable_lastmod_no_items_sitemap = {\n+    \"callable-lastmod\": CallableLastmodNoItemsSitemap,\n+}\n+\n+urlpatterns += [\n+    path(\n+        \"callable-lastmod-no-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": callable_lastmod_no_items_sitemap},\n+    ),\n+]\n+\n callable_lastmod_partial_sitemap = {\n     \"callable-lastmod\": CallableLastmodPartialSitemap,\n }\n \n+callable_lastmod_no_items_sitemap = {\n+    \"callable-lastmod\": CallableLastmodNoItemsSitemap,\n+}\n+\n+urlpatterns += [\n+    path(\n+        \"callable-lastmod-no-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": callable_lastmod_no_items_sitemap},\n+    ),\n+]\n+\n callable_lastmod_full_sitemap = {\n     \"callable-lastmod\": CallableLastmodFullSitemap,\n }\n \n+callable_lastmod_no_items_sitemap = {\n+    \"callable-lastmod\": CallableLastmodNoItemsSitemap,\n+}\n+\n+urlpatterns += [\n+    path(\n+        \"callable-lastmod-no-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": callable_lastmod_no_items_sitemap},\n+    ),\n+]\n+\n urlpatterns = [\n     path(\"simple/index.xml\", views.index, {\"sitemaps\": simple_sitemaps}),\n     path(\"simple-paged/index.xml\", views.index, {\"sitemaps\": simple_sitemaps_paged}),\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..37a733a 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,9 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock, TestCase\n+from django.core.cache import cache\n import io\n import os\n import pickle\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..21c45ea 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -10,7 +11,8 @@ from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n-from .tests import AdminViewBasicTestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import AdminViewBasicTestCase, get_perm\n \n \n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n@@ -33,6 +35,41 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_permission(self):\n+        \"\"\"Test 'show_save_as_new' button visibility based on permissions.\"\"\"\n+        # User with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with add and change permission\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..d940a25 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,23 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def _test_alter_alter(self, alter_foo, alter_bar):\n+        \"\"\"AlterField should collapse into the second.\"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                alter_foo,\n+                alter_bar,\n+            ],\n+            [\n+                alter_bar,\n+            ],\n+        )\n+\n+    def test_alter_alter_field(self):\n+        self._test_alter_alter(\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..79ffda2 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -55,6 +56,14 @@ class JoinTests(SimpleTestCase):\n         )\n         self.assertEqual(output, \"alpha & beta &amp; me\")\n \n+    @setup({\"join09\": '{% autoescape off %}{{ a|join:b }}{% endautoescape %}'})\n+    def test_join_autoescape_off_joiner(self):\n+        output = self.engine.render_to_string(\n+            \"join09\", {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"b\": \"<br/>\"}\n+        )\n+        # The joiner should not be escaped due to autoescape being off.\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n+\n \n class FunctionTests(SimpleTestCase):\n     def test_list(self):\n@@ -78,4 +87,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..cf0c534 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -561,6 +561,39 @@ class BulkCreateTests(TestCase):\n                 unique_fields=[\"relatedmodel\"],\n             )\n         # Many-to-many relationship.\n+\n+    @skipUnlessDBFeature(\"supports_returning_for_dml\", \"can_return_rows_from_bulk_insert\")\n+    def test_bulk_create_returning_ids_with_update_conflicts(self):\n+        objects = [\n+            UpsertConflict(number=10, rank=1, name=\"Alice\"),\n+            UpsertConflict(number=11, rank=2, name=\"Bob\")\n+        ]\n+        UpsertConflict.objects.bulk_create(objects)\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        # Conflicting objects whose details need to be updated\n+        conflicting_objects = [\n+            UpsertConflict(number=10, rank=3, name=\"Charlie\"),\n+            UpsertConflict(number=11, rank=4, name=\"Dave\")\n+        ]\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=[\"number\"]\n+        )\n+        self.assertEqual(len(results), 2)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n+        # Verify that the details were updated with the new values\n+        self.assertCountEqual(\n+            UpsertConflict.objects.values(\"number\", \"rank\", \"name\"),\n+            [\n+                {\"number\": 10, \"rank\": 3, \"name\": \"Charlie\"},\n+                {\"number\": 11, \"rank\": 4, \"name\": \"Dave\"}\n+            ]\n+        )\n         with self.assertRaisesMessage(ValueError, msg):\n             RelatedModel.objects.bulk_create(\n                 [RelatedModel(country=self.data[0])],\n@@ -816,4 +849,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..0d25148 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -456,7 +456,30 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\",\n         )\n \n-    def test_serialize_nested_class(self):\n+    def test_serialize_nested_class_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = models.JSONField(\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        default_value = field.default()\n+        self.assertEqual(default_value, ['BASIC'])\n+        string, imports = MigrationWriter.serialize(Profile.Capability.default)\n+        self.assertEqual(\n+            string,\n+            \"migrations.test_writer.Profile.Capability.default\",\n+            'The default method should be fully qualified with the enclosing class.'\n+        )\n         for nested_cls in [self.NestedEnum, self.NestedChoices]:\n             cls_name = nested_cls.__name__\n             with self.subTest(cls_name):\n@@ -1032,4 +1055,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..f401d23 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1119,6 +1119,38 @@ def test_range_slider(orientation):\n     slider.reset()\n     assert_allclose(slider.val, [0.1, 0.34])\n \n+@pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\n+def test_range_slider_initialization(orientation):\n+    fig, ax = plt.subplots()\n+\n+    # Test case with initialization within bounds\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"\", valmin=0.0, valmax=1.0, orientation=orientation,\n+        valinit=[0.2, 0.4]\n+    )\n+    assert_allclose(slider.val, [0.2, 0.4])\n+\n+    # Test case with initialization below bounds\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"\", valmin=0.0, valmax=1.0, orientation=orientation,\n+        valinit=[-0.2, 0.4]\n+    )\n+    assert_allclose(slider.val, [0.0, 0.4])\n+\n+    # Test case with initialization above bounds\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"\", valmin=0.0, valmax=1.0, orientation=orientation,\n+        valinit=[0.6, 1.2]\n+    )\n+    assert_allclose(slider.val, [0.6, 1.0])\n+\n+    # Test case with reversed initialization values\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"\", valmin=0.0, valmax=1.0, orientation=orientation,\n+        valinit=[0.8, 0.4]\n+    )\n+    assert_allclose(slider.val, [0.4, 0.8])\n+\n \n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..4898e52 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -508,7 +508,15 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+\n+def test_get_backend_does_not_clear_rc_context_figures():\n+    # Test to ensure figures created under rc_context are not cleared by get_backend().\n+    with rc_context():\n+        fig = plt.figure()\n+        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    assert before == after, f'Figures have been cleared:\\nbefore: {before}\\nafter: {after}'\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..925b0de 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -20,8 +20,20 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n+@check_figures_equal(extensions=['png'])\n+def test_set_visible_false_3d(fig_test, fig_ref):\n+    # Test that set_visible(False) works for 3D axes\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+\n+    # Make the test axis invisible\n+    ax_test.set_visible(False)\n+\n+    # Verify by setting the ref axis with no modifications\n+    ax_ref.scatter(1, 1, 1, c='b')\n \n-def test_aspect_equal_error():\n+    # As ax_test is invisible, figures should be equivalent (i.e., both show nothing visible)\n+    ax_test.scatter(1, 1, 1, c='b')\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..721a71e 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1773,6 +1773,43 @@ def test_margins_errors(err, args, kwargs, match):\n \n \n @check_figures_equal(extensions=[\"png\"])\n+def test_line3d_persistence_after_invalid_input():\n+    # Initial valid input as integers\n+    x_s_0 = np.array([1, 2])\n+    x_e_0 = np.array([2, 3])\n+    y_s_0 = np.array([1, 2])\n+    y_e_0 = np.array([2, 3])\n+    z_s_0 = np.array([1, 2])\n+    z_e_0 = np.array([2, 3])\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+\n+    # Plotting with initial integer arrays\n+    ax.plot([x_s_0[0], x_e_0[0]], [y_s_0[0], y_e_0[0]], [z_s_0[0], z_e_0[0]])\n+    assert len(ax.lines) == 1\n+\n+    # Introduce invalid input with higher-dimensional array\n+    x_s_0 = np.array([[1, 2]])\n+    y_s_0 = np.array([[1, 2]])\n+    z_s_0 = np.array([[1, 2]])\n+\n+    try:\n+        ax.plot([x_s_0[0], x_e_0[0]], [y_s_0[0], y_e_0[0]], [z_s_0[0], z_e_0[0]])\n+    except ValueError:\n+        pass  # Expected due to shape mismatch\n+\n+    # Verify the fix for 'Line3D' after handling an error\n+    x_s_0 = np.array([1, 2])\n+    y_s_0 = np.array([1, 2])\n+    z_s_0 = np.array([1, 2])\n+\n+    ax.plot([x_s_0[0], x_e_0[0]], [y_s_0[0], y_e_0[0]], [z_s_0[0], z_e_0[0]])\n+    assert len(ax.lines) == 2  # Should succeed without restarting the kernel\n+\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n def test_text_3d(fig_test, fig_ref):\n     ax = fig_ref.add_subplot(projection=\"3d\")\n     txt = Text(0.5, 0.5, r'Foo bar $\\int$')\n",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..0736f33 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -773,8 +773,19 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n     for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n         assert mpl.colors.same_color(text.get_color(), color)\n \n+import matplotlib.pyplot as plt  # Necessary for creating plot instances\n \n-def test_get_set_draggable():\n+def test_legend_draggable_keyword():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_label')\n+    leg = ax.legend(draggable=True)\n+    assert leg.get_draggable() is True\n+\n+def test_legend_not_draggable_keyword():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_label')\n+    leg = ax.legend(draggable=False)\n+    assert leg.get_draggable() is False\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..89ef3e5 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -246,7 +246,34 @@ def test_fonttype(fonttype):\n \n def test_linedash():\n     \"\"\"Test that dashed lines do not break PS output\"\"\"\n-    fig, ax = plt.subplots()\n+import io\n+from matplotlib.figure import Figure\n+\n+def test_empty_line():\n+    # Smoke-test for gh#23954\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n+def test_annotate_with_empty_line():\n+    # Test for an annotated text with an empty line in PostScript\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n+def test_title_with_empty_line():\n+    # Test for a title with an empty line in PostScript\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.set_title('\\nLower title')\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n \n     ax.plot([0, 1], linestyle=\"--\")\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..3612d76 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,22 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import warnings\n+\n+@pytest.mark.parametrize('constrained_layout', [False])\n+def test_no_warning_with_subplots_adjust(constrained_layout):\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained_layout)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        plt.subplots_adjust(wspace=0)\n+        assert not any(issubclass(warning.category, UserWarning) for warning in w)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..7fd590a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5733,6 +5733,30 @@ def test_set_get_ticklabels():\n \n \n @check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_with_invalid_kwargs():\n+    \"\"\"\n+    Test that invalid kwargs raise a ValueError even if no labels are passed.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1, 2]\n+    # Testing with an invalid Text property 'invalid_kwarg'\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, invalid_kwarg=\"test\")\n+\n+def test_set_ticks_with_valid_kwargs_without_labels():\n+    \"\"\"\n+    Test that the method raises a ValueError when valid Text properties are passed \n+    without labels being set, because kwargs should not be allowed without labels.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1, 2]\n+    # Testing with a valid Text property but without labels\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, fontsize=10)\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..120b326 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -25,6 +25,24 @@ from matplotlib.testing.decorators import image_comparison, check_figures_equal\n     (2, [1, 0]),\n     (1, [0]),\n ])\n+\n+@pytest.mark.parametrize(\"value\", [257, 256, 258])\n+def test_deprecation_warnings_suppressed(value):\n+    \"\"\"\n+    Test that out-of-bound integer warnings from NumPy 1.24 are suppressed.\n+    Specifically testing values 257, 256, and 258 with uint8 dtype conversion\n+    to ensure no warnings are raised during colormap retrieval.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import matplotlib.colors as mcolors\n+    \n+    with pytest.warns(None) as record:\n+        # We execute the problematic line of code with typical values\n+        plt.get_cmap()(np.array([value], dtype=np.uint8))\n+    \n+    # Check that no warnings of any kind were raised\n+    assert len(record) == 0\n def test_create_lookup_table(N, result):\n     data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..9ba620e 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -16,8 +17,28 @@ import matplotlib.transforms as mtransforms\n import matplotlib.figure as mfigure\n from mpl_toolkits.axes_grid1 import parasite_axes\n \n+import pickletools\n+\n+def test_draggable_legend_pickle():\n+    plt.figure()\n+    ax = plt.subplot()\n+    ax.plot([0, 1, 2], [0, 1, 4], label=\"parabola\")\n+    legend = ax.legend(draggable=True)\n+\n+    # Try to pickle the figure\n+    pkl = pickle.dumps(ax.figure, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure \"FigureCanvasQTAgg\" is not in the pickle stream\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Load from pickle to check for errors\n+    loaded_figure = pickle.loads(pkl)\n+\n+    # Check for content preservation, ensuring that legend and lines exist\n+    assert any(\"parabola\" in str(text) for text in loaded_figure.legends[0].texts)\n+    assert loaded_figure.gca().lines\n \n-def test_simple():\n+    plt.close(loaded_figure)\n     fig = plt.figure()\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..7c1bc12 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,42 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+import matplotlib as mpl\n+from matplotlib.testing.decorators import check_figures_equal\n+\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Ensure this operation is supported with pickling\n+\n+    # Try pickling\n+    pkl = BytesIO()\n+    try:\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        print(\"Pickling succeeded\")\n+    except Exception as e:\n+        assert False, f\"Pickling failed: {e}\"\n+\n+    # Load from pickle\n+    loaded = pickle.loads(pkl.getbuffer())\n+    loaded.canvas.draw()\n+\n+    plt.close(fig)\n+    plt.close(loaded)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..36a8b6c 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -445,8 +445,29 @@ def test_paddedbox():\n     pb = PaddedBox(ta, pad=10, patch_attrs={'facecolor': 'b'})\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mplcursors\n \n+def test_mplcursor_with_scatter_plot():\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+\n+    # Activate mplcursors on the scatter plot\n+    cursor = mplcursors.cursor(ax.collections[0])\n+\n+    # Simulate clicks on data points to trigger the mplcursor functionality\n+    mplcursors.cursor(ax.collections[0]).event(ax.figure.canvas, x=5, y=5, buttons=[1])\n+    mplcursors.cursor(ax.collections[0]).event(ax.figure.canvas, x=6, y=6, buttons=[1])\n+\n+    # This is to check if an AttributeError is raised\n+    with pytest.raises(AttributeError, match=\"'NoneType' object has no attribute 'canvas'\"):\n+        mplcursors.cursor(ax.collections[0]).event(ax.figure.canvas, x=7, y=7, buttons=[1])\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..29aa4ab 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,9 +9,24 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n \n+    def test_missing_data(self, df):\n+        # Create a groupby object on a dataset\n+        groupby = GroupBy([\"group\"])\n+        \n+        # Introduce missing data by setting some values to NaN\n+        df.iloc[5:10, df.columns.get_loc(\"x\")] = np.nan\n+        \n+        # Make two results, one directly from the method and another dropping NaNs\n+        res1 = PolyFit()(df[[\"x\", \"y\"]], groupby, \"x\", {})\n+        res2 = PolyFit()(df[[\"x\", \"y\"]].dropna(), groupby, \"x\", {})\n+        \n+        # Assert that the results are equal\n+        assert_frame_equal(res1, res2)\n+\n     @pytest.fixture\n     def df(self, rng):\n \n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..3bf50b7 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -717,6 +717,29 @@ class TestPairGrid:\n                            a=np.repeat(list(\"abc\"), 20),\n                            b=np.repeat(list(\"abcdefghijkl\"), 5)))\n \n+    def test_pairplot_column_multiindex(self):\n+\n+        # Creating a MultiIndex DataFrame similar to the issue report\n+        cols = pd.MultiIndex.from_tuples([(\"A\", \"1\"), (\"A\", \"2\"), (\"B\", \"1\"), (\"B\", \"2\")])\n+        data = {\n+            (\"A\", \"1\"): np.random.rand(100),\n+            (\"A\", \"2\"): np.random.rand(100),\n+            (\"B\", \"1\"): np.random.rand(100),\n+            (\"B\", \"2\"): np.random.rand(100),\n+        }\n+        df = pd.DataFrame(data)\n+        df.columns = cols\n+        \n+        # Test that pairplot does not raise an error with MultiIndex\n+        g = ag.pairplot(df)\n+\n+        # Validate the number of axes matches the number of columns\n+        num_vars = len(cols)\n+        assert g.axes.shape == (num_vars, num_vars)\n+\n+        # Validate that the diagonal variables match the MultiIndex columns\n+        assert g.diag_vars == list(range(num_vars))\n+\n     def test_self_data(self):\n \n         g = ag.PairGrid(self.df)\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..951e0ca 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,7 +1,8 @@\n+\n import json\n import os\n import textwrap\n-\n+import tomllib\n import pytest\n \n import flask\n@@ -18,7 +19,34 @@ def common_object_test(app):\n     assert \"TestConfig\" not in app.config\n \n \n-def test_config_from_pyfile():\n+def test_config_from_file_toml_binary_mode():\n+    tomllib = pytest.importorskip(\"tomllib\", reason=\"tomllib added in 3.11\")\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.toml\"), tomllib.load, mode='b'\n+    )\n+    common_object_test(app)\n+\n+def test_config_from_file_text_mode():\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    with open(os.path.join(current_dir, \"static\", \"config.json\"), \"w\") as f:\n+        f.write(json.dumps({\"TEST_KEY\": \"foo\", \"SECRET_KEY\": \"config\"}))\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.json\"), json.load, mode='t'\n+    )\n+    common_object_test(app)\n+\n+def test_config_from_file_default_mode():\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    with open(os.path.join(current_dir, \"static\", \"config.json\"), \"w\") as f:\n+        f.write(json.dumps({\"TEST_KEY\": \"foo\", \"SECRET_KEY\": \"config\"}))\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.json\"), json.load\n+    )\n+    common_object_test(app)\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n     common_object_test(app)\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..a74e118 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1635,8 +1635,30 @@ def test_prepared_request_complete_copy():\n     )\n     assert_copy(p, p.copy())\n \n+import pytest\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import DecodeError, ConnectTimeout\n+\n+# Assuming the `httpbin` function is defined to provide URL endpoints for testing.\n+def httpbin(endpoint):\n+    return f'http://httpbin.org/{endpoint}'\n+\n+def test_urllib3_decode_error_wrapped():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    # This should trigger a decode error, wrapped by requests.exceptions.DecodeError\n+    with pytest.raises(DecodeError):\n+        s.get(httpbin('brotli'))\n+\n+def test_urllib3_timeout_error_wrapped():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n \n-def test_prepare_unicode_url():\n+    # This should trigger a timeout error, wrapped by requests.exceptions.ConnectTimeout\n+    with pytest.raises(ConnectTimeout):\n+        s.get(httpbin('delay/10'), timeout=0.001)\n     p = PreparedRequest()\n     p.prepare(\n         method='GET',\n@@ -1663,4 +1685,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..c013f5e 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,44 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_decode_unicode_processed(self):\n+        \"\"\"\n+        Additional test for iter_content with decode_unicode=True for different encodings.\n+        \"\"\"\n+        # Test with UTF-8 encoding\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = \"caf\u00e9\".encode('utf-8')\n+        r.encoding = 'utf-8'\n+\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+        assert ''.join(chunks) == \"caf\u00e9\"\n+\n+        # No decoding should happen, so we expect bytes\n+        r._content_consumed = True\n+        r._content = \"caf\u00e9\".encode('utf-8')\n+        \n+        chunks = r.iter_content(decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n+        assert b''.join(chunks) == \"caf\u00e9\".encode('utf-8')\n+\n+        # Test with different encoding\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = \"caf\u00e9\".encode('latin-1')\n+        r.encoding = 'latin-1'\n+\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+        assert ''.join(chunks) == \"caf\u00e9\"\n+        \n+        r._content_consumed = True\n+        r._content = \"caf\u00e9\".encode('latin-1')\n+        \n+        chunks = r.iter_content(decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n+        assert b''.join(chunks) == \"caf\u00e9\".encode('latin-1')\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..51fc0f8 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,7 +743,37 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    def test_hooks_with_empty_list(self):\n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h) is True\n+            \n+        hooks = []\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert r.hooks['args'] == hooks\n+\n+    def test_hooks_with_non_callable(self):\n+        hooks = ['not_callable']\n+        try:\n+            r = requests.models.Request(hooks={'args': hooks})\n+        except Exception as e:\n+            assert isinstance(e, TypeError)\n+\n+    def test_hooks_with_mixed_list(self):\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({\n+                'X-Foo': 'foo'\n+            })\n+            return args\n \n+        hooks = [add_foo_header, 'not_callable']\n+        try:\n+            r = requests.models.Request(hooks={'args': hooks})\n+        except Exception as e:\n+            assert isinstance(e, TypeError)\n+            \n     def test_session_persistent_cookies(self):\n \n         s = requests.session()\n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..1586fea 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..9470eac 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -89,9 +89,26 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n-    def test_issue_2321_should_not_trigger(self) -> None:\n-        code = 'print(\"# TODO this should not trigger a fixme\")'\n-        with self.assertNoMessages():\n+    @set_config(notes=[\"???\"])\n+    def test_tag_entirely_punctuation(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n+    @set_config(notes=[\"YES\", \"???\"])\n+    def test_mixed_tags(self) -> None:\n+        code = \"\"\"a = 1\n+                # YES: yes\n+                # ???: no\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"YES: yes\", col_offset=17),\n+            MessageTest(msg_id=\"fixme\", line=3, args=\"???: no\", col_offset=17),\n+        ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n     def test_issue_2321_should_trigger(self) -> None:\n@@ -119,4 +136,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..e093f88 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -65,7 +65,7 @@ def test_unknown_message_id(capsys: CaptureFixture) -> None:\n \n def test_unknown_option_name(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown option.\"\"\"\n-    with pytest.raises(_UnrecognizedOptionError):\n+    with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--unknown-option=yes\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: unknown-option=yes\" in output.out\n@@ -73,7 +73,7 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n \n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n-    with pytest.raises(_UnrecognizedOptionError):\n+    with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..f9237b9 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1329,8 +1329,29 @@ class TestRunTC:\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n                 )\n-\n-    def test_regression_recursive_current_dir(self):\n+    def test_ignore_paths_with_recursive_flag(self) -> None:\n+        \"\"\"Tests that the `--recursive=y` respects the ignore-paths in pyproject.toml.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Create a temporary .pylintrc to simulate the pyproject.toml ignore-paths\n+                with open('.pylintrc', 'w') as pylintrc_file:\n+                    pylintrc_file.write(\"[MASTER]\\nignore-paths=^ignored_subdirectory/.*\\n\")\n+                try:\n+                    self._runtest(\n+                        [\n+                            \".\", \n+                            \"--recursive=y\", \n+                        ],\n+                        code=0,\n+                    )\n+                finally:\n+                    os.remove('.pylintrc')\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n             # astroid to believe that directory is a package.\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..b3cb027 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,28 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test to ensure that pylint handles modules named the same as their package correctly.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create a structure where module name is same as package\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n+\n+def test_import_from_conflicting_module_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for importing a module from a package having the same name as a file.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create files as described in the issue\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as r_file:\n+            r_file.write(\"from a import b\\n\")\n+        linter.check([\"r\", \"a\"])\n+    # Check there are no import issues, especially no errors like no-name-in-module\n+    assert \"no-name-in-module\" not in linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +963,26 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test to ensure that pylint handles modules named the same as their package correctly.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create a structure where module name is same as package\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n+\n+def test_import_from_conflicting_module_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for importing a module from a package having the same name as a file.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create files as described in the issue\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as r_file:\n+            r_file.write(\"from a import b\\n\")\n+        linter.check([\"r\", \"a\"])\n+    # Check there are no import issues, especially no errors like no-name-in-module\n+    assert \"no-name-in-module\" not in linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\nindex 82f0458..f9bd657 100644\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -290,6 +290,39 @@ def test_log_cli_default_level(testdir):\n     assert result.ret == 0\n \n \n+def test_log_cli_format_includes_name(testdir):\n+    # Test to verify that logging format includes module name\n+    testdir.makepyfile(\n+        test_log_cli=\"\"\"\n+        import logging\n+\n+        logger = logging.getLogger(__name__)\n+\n+        def test_log_cli():\n+            logger.warning(\"This log message includes module name\")\n+        \"\"\"\n+    )\n+\n+    testdir.makeini(\n+        \"\"\"\n+        [pytest]\n+        log_cli=true\n+        log_cli_format=%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\n+        \"\"\"\n+    )\n+\n+    result = testdir.runpytest()\n+\n+    # Check the output format\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"*::test_log_cli \",\n+            \"WARNING  test_log_cli:test_log_cli:5 This log message includes module name\",\n+        ]\n+    )\n+    assert result.ret == 0\n+\n+\n def test_log_cli_default_level_multiple_tests(testdir, request):\n     \"\"\"Ensure we reset the first newline added by the live logger between tests\"\"\"\n     filename = request.node.name + \".py\"\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..e05737c 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -463,6 +463,28 @@ class TestAssert_reprcompare:\n         expl = callequal({0, 1}, {0, 2})\n         assert len(expl) > 1\n \n+    def test_bytes_diff_empty_vs_non_empty(self):\n+        \"\"\"Verify correct handling of empty vs non-empty byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"42\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n+\n+    def test_bytes_diff_one_char(self):\n+        \"\"\"Verify correct assertion rewriting with single character byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"1\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+        ]\n+\n     def test_frozenzet(self):\n         expl = callequal(frozenset([0, 1]), {0, 2})\n         assert len(expl) > 1\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..7d17858 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,3 +1,4 @@\n+\n import os\n from xml.dom import minidom\n \n@@ -139,7 +140,29 @@ class TestPython:\n         node = dom.find_first_by_tag(\"testsuite\")\n         node.assert_attr(name=\"pytest\", errors=1, failures=2, skipped=1, tests=5)\n \n-    def test_timing_function(self, testdir):\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n         testdir.makepyfile(\n             \"\"\"\n             import time, pytest\n",
  "pytest-dev__pytest-7168": "",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..152f1c2 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -88,8 +88,33 @@ def test_testdir_runs_with_plugin(testdir) -> None:\n     result = testdir.runpytest()\n     result.assert_outcomes(passed=1)\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test that failure lines use absolute paths if cwd has changed since\n+    invocation, ensuring paths are correct.\n+    \"\"\"\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_testdir_with_doctest(testdir):\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    # Run pytest\n+    result = testdir.runpytest()\n+    # Assert that the output correctly shows the absolute path\n+    result.stdout.fnmatch_lines([str(test_file) + \":*: AssertionError\", \"*1 failed in *\"])\n     \"\"\"Check that testdir can be used within doctests.\n \n     It used to use `request.function`, which is `None` with doctests.\"\"\"\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..f56e34d 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,6 +1,41 @@\n import os\n import sys\n-from unittest import mock\n+class TestMark:\n+    # Original test patch adapted into this file.\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        \n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        \n+        # Running the tests and checking outcomes\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+import os\n+...\n \n import pytest\n from _pytest.config import ExitCode\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..b412357 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -152,8 +152,27 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+import pytest\n \n-class TestXFail:\n+class TestSkip:\n+    @pytest.mark.parametrize(\n+        \"options, expected\",\n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_with_and_without_runxfail(self, testdir, options, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"unconditional skip\")\n+            def test_skip_location():\n+                assert False\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(*options)\n+        result.stdout.fnmatch_lines(expected)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..50161f7 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -152,8 +153,35 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+from _pytest.pytester import Testdir\n \n class TestXFail:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Reproduces the initial issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(\n+        self, testdir: Testdir\n+    ) -> None:\n+        # Reproduces the issue when strict=True.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..dc039c0 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -19,7 +20,38 @@ from _pytest.pathlib import on_rm_rf_error\n from _pytest.pathlib import register_cleanup_lock_removal\n from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest.tmpdir import get_user\n+\n+def test_tmpdir_handles_invalid_dir_characters(tmpdir_factory: TempdirFactory, monkeypatch: MonkeyPatch):\n+    # Simulate illegal characters in the username returned by get_user\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"illegal<>|:*?chars\")\n+    \n+    # Temporarily clear cached values to ensure the test runs correctly\n+    monkeypatch.setattr(tmpdir_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmpdir_factory, \"_given_basetemp\", None)\n+\n+    # Attempt to create a temporary directory\n+    temp_dir = tmpdir_factory.mktemp('foobar')\n+    \n+    # Verify that the creation succeeds\n+    assert temp_dir.exists()\n+    assert \"pytest-of-unknown\" in str(temp_dir)\n+\n+def test_tmpdir_creation_with_no_invalid_characters(tmpdir_factory: TempdirFactory, monkeypatch: MonkeyPatch):\n+    # Normal user case without illegal characters\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"normal_user\")\n+    \n+    # Temporarily clear cached values\n+    monkeypatch.setattr(tmpdir_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmpdir_factory, \"_given_basetemp\", None)\n+    \n+    # Create a temp directory\n+    temp_dir = tmpdir_factory.mktemp('foobar')\n+    \n+    # Verify it exists and no 'unknown' segment is present\n+    assert temp_dir.exists()\n+    assert \"pytest-of-normal_user\" in str(temp_dir)\n from _pytest.tmpdir import TempdirFactory\n from _pytest.tmpdir import TempPathFactory\n \n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..46b270b 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -598,7 +598,35 @@ def test_ridgecv_store_cv_values():\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n \n-def test_ridgecv_sample_weight():\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV with store_cv_values=True\n+    from sklearn.linear_model import RidgeClassifierCV\n+    import numpy as np\n+\n+    # Test data\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0],\n+                   [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    model = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    model.fit(x, y)\n+\n+    # Expected cv_values_ shape: (n_samples, n_alphas)\n+    assert model.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Multi-output case\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).transpose()\n+    model.fit(x, y_multi)\n+    n_targets = y_multi.shape[1]\n+\n+    # Expected cv_values_ shape: (n_samples, n_targets, n_alphas)\n+    assert model.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..5bbd0a9 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,7 +5,7 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_raise_message, assert_array_equal\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..4bfac6a 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,50 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+def test_one_hot_encoder_ignore_unknown_strings():\n+    # Test to ensure OneHotEncoder can handle unknown string categories without error\n+    train_data = np.array(['22', '333', '4444', '11111111']).reshape((-1, 1))\n+    test_data = np.array(['55555', '22']).reshape((-1, 1))\n+    \n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(train_data)\n+    \n+    expected_output = np.array([[0., 0., 0., 0.], [0., 1., 0., 0.]])\n+    transformed = ohe.transform(test_data).toarray()\n+    assert_array_equal(transformed, expected_output)\n+    \n+    # Also verify that original test data is not modified in place\n+    assert_array_equal(test_data, np.array(['55555', '22']).reshape((-1, 1)))\n+\n+def test_one_hot_encoder_ignore_unknown_strings_long_category():\n+    # An additional test to check the behavior with longer categories\n+    train_data = np.array(['cat', 'dog', 'mouse', 'elephant']).reshape((-1, 1))\n+    test_data = np.array(['lion', 'cat']).reshape((-1, 1))\n+    \n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(train_data)\n+    \n+    expected_output = np.array([[0., 0., 0., 0.], [1., 0., 0., 0.]])\n+    transformed = ohe.transform(test_data).toarray()\n+    assert_array_equal(transformed, expected_output)\n+\n+def test_one_hot_encoder_ignore_unknown_strings_different_length():\n+    # Test with known categories of different lengths to see if ValueError is avoided\n+    train_data = np.array(['short', 'medium', 'veryverylong']).reshape((-1, 1))\n+    test_data = np.array(['unknown', 'medium']).reshape((-1, 1))\n+    \n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(train_data)\n+    \n+    expected_output = np.array([[0., 0., 0.], [0., 1., 0.]])\n+    transformed = ohe.transform(test_data).toarray()\n+    assert_array_equal(transformed, expected_output)\n+\n+import numpy as np\n+import pytest\n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..155b98d 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -71,7 +72,17 @@ def test_kernel_pca_consistent_transform():\n     assert_array_almost_equal(transformed1, transformed2)\n \n \n-def test_kernel_pca_sparse():\n+def test_kernel_pca_deterministic_sign():\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=3, kernel='rbf', random_state=rng)\n+    \n+    # Perform two consecutive fit_transform operations\n+    X_transformed1 = kpca.fit_transform(X)\n+    X_transformed2 = kpca.fit_transform(X)\n+\n+    # Check if the absolute values of both transformations are the same\n+    assert_allclose(np.abs(X_transformed1), np.abs(X_transformed2))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..c7c9c36 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,6 +1058,24 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n+def test_pipeline_len():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.svm import SVC\n+    from sklearn.feature_selection import SelectKBest\n+\n+    # Test a pipeline with two steps\n+    pipe = Pipeline([('select', SelectKBest()), ('svc', SVC())])\n+    assert len(pipe) == 2, \"Expected pipeline length to be 2\"\n+\n+    # Test an empty pipeline\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0, \"Expected pipeline length of empty pipe to be 0\"\n+\n+    # Test a pipeline with one step\n+    single_step_pipe = Pipeline([('svc', SVC())])\n+    assert len(single_step_pipe) == 1, \"Expected pipeline length to be 1\"\n+\n+\n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n@@ -1070,4 +1088,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..1b76bd9 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,10 +8,9 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n-\n import numpy as np\n-\n-from sklearn.utils.testing import assert_array_equal\n+from sklearn.ensemble import IsolationForest\n+from numpy.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..714f46e 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -173,6 +173,31 @@ def test_mutual_info_classif_mixed():\n         assert_equal(mi_nn[2], mi[2])\n \n \n+def test_mutual_info_discrete_features():\n+    X = np.array([[0, 0, 0],\n+                  [1, 1, 0],\n+                  [2, 0, 1],\n+                  [2, 0, 1],\n+                  [2, 0, 1]], dtype=float)\n+    y = np.array([0, 1, 2, 2, 1], dtype=float)\n+    X_csr = csr_matrix(X)\n+\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test for invalid scenarios: non-existing features\n+        assert_raises(IndexError, mutual_info, X, y,\n+                      discrete_features=[1, 4])\n+        \n+        # Test with boolean mask of incorrect length\n+        assert_raises(IndexError, mutual_info, X, y,\n+                      discrete_features=[True, False, True, False])\n+\n+        # Test with valid boolean mask\n+        mi_valid_boolean = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        mi_valid_indices = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        \n+        # Ensure that valid boolean mask and indices provide the same result\n+        assert_array_equal(mi_valid_boolean, mi_valid_indices)\n+\n def test_mutual_info_options():\n     X = np.array([[0, 0, 0],\n                   [1, 1, 0],\n@@ -197,4 +222,4 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..164de6a 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,8 +217,18 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_with_array():\n+    \"\"\"Test LogisticRegressionCV with array parameters when print_changed_only=True.\"\"\"\n+    set_config(print_changed_only=True)\n+    # This should not raise an error\n+    repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    repr(LogisticRegressionCV(Cs=np.logspace(-4, 4, 10)))\n \n-def test_pipeline():\n+    # Test with other array parameters\n+    repr(LogisticRegressionCV(class_weight=[{0: 0.5, 1: 0.5}, {0: 0.7, 1: 0.3}]))\n+    repr(LogisticRegressionCV(intercept_scaling=np.array([0.1, 1.0])))\n+\n+    set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..e2ed03d 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,9 @@\n+\n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -15,11 +21,8 @@ from sklearn.ensemble import VotingClassifier, VotingRegressor\n from sklearn.model_selection import GridSearchCV\n from sklearn import datasets\n from sklearn.model_selection import cross_val_score, train_test_split\n-from sklearn.datasets import make_multilabel_classification\n-from sklearn.svm import SVC\n-from sklearn.multiclass import OneVsRestClassifier\n-from sklearn.neighbors import KNeighborsClassifier\n-from sklearn.base import BaseEstimator, ClassifierMixin\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.dummy import DummyRegressor\n \n \n@@ -506,4 +509,23 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [\n+        (datasets.load_iris(return_X_y=True), VotingClassifier(\n+            estimators=[('lr', LogisticRegression()), \n+                        ('rf', RandomForestClassifier(n_estimators=5)), \n+                        ('gnb', GaussianNB())])),\n+        (datasets.load_boston(return_X_y=True), VotingRegressor(\n+            estimators=[('lr', LinearRegression()), \n+                        ('rf', RandomForestRegressor(n_estimators=5))]))\n+    ]\n+)\n+def test_none_estimator_with_weights_v2(X, y, voter):\n+    # Check that an estimator can be set to None and passing some weight\n+    voter.fit(X, y, sample_weight=np.ones(y.shape[0]))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape[0]))\n+    assert voter is not None\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..5e18068 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,43 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+import pytest\n+import numpy as np\n+from sklearn.exceptions import NotFittedError\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+from sklearn.datasets import load_iris\n+from sklearn.utils._testing import assert_raises\n+\n+iris = load_iris()\n+iris_data = iris.data\n+iris_target = iris.target\n+\n+def test_parameters_with_grid_search():\n+    # Test that numpy integer and float types do not raise errors during GridSearch\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.model_selection import GridSearchCV\n+    from sklearn.neighbors import KNeighborsClassifier\n+\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+\n+    params = {'nca__tol': [0.1, 0.5, 1],  # 1 is intentionally an integer\n+              'nca__n_components': np.arange(1, 10, dtype=np.int64)}  # np.int64 type\n+\n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    try:\n+        gs.fit(X, y)\n+        assert True, \"GridSearchCV ran successfully without TypeError\"\n+    except TypeError as e:\n+        assert False, \"TypeError was raised: \" + str(e)\n \n-def test_transformation_dimensions():\n+    # Test for NotFittedError to ensure fit was completed\n+    assert_raises(NotFittedError, gs.predict, X)\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..4516760 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,26 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    # Check that support_vectors_ is empty\n+    assert not model.support_vectors_.data.size\n+    # Check that dual_coef_ is empty\n+    assert not model.dual_coef_.data.size\n+\n+    # Additional assertions to check other relevant attributes\n+    assert model.support_.size == 0   # No support vectors indices\n+    assert model.n_support_ == 0      # No support vectors in any class\n+    assert model.dual_coef_.shape[1] == 0  # Dual coef should have no elements\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..da04b19 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,7 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+import pytest\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n@@ -980,7 +980,23 @@ def test_repeated_cv_value_errors():\n         assert_raises(ValueError, cv, n_repeats=1.5)\n \n \n-def test_repeated_kfold_determinstic_split():\n+@pytest.mark.parametrize(\"RepeatedCV, expected_repr\", [\n+    (RepeatedKFold, \"RepeatedKFold(n_repeats=6, n_splits=2, random_state=None)\"),\n+    (RepeatedStratifiedKFold, \"RepeatedStratifiedKFold(n_repeats=6, n_splits=2, random_state=None)\")\n+])\n+def test_repeated_cv_repr_with_default_params(RepeatedCV, expected_repr):\n+    repeated_cv = RepeatedCV(n_splits=5, n_repeats=10)\n+    assert repr(repeated_cv) == expected_repr.replace(\"n_repeats=6, n_splits=2\", \"n_repeats=10, n_splits=5\")\n+\n+def test_repeated_cv_repr_with_random_state():\n+    random_state = 42\n+    repeated_kfold = RepeatedKFold(n_splits=3, n_repeats=5, random_state=random_state)\n+    expected_repr_kfold = \"RepeatedKFold(n_repeats=5, n_splits=3, random_state=42)\"\n+    assert repr(repeated_kfold) == expected_repr_kfold\n+\n+    repeated_stratified_kfold = RepeatedStratifiedKFold(n_splits=4, n_repeats=7, random_state=random_state)\n+    expected_repr_stratified_kfold = \"RepeatedStratifiedKFold(n_repeats=7, n_splits=4, random_state=42)\"\n+    assert repr(repeated_stratified_kfold) == expected_repr_stratified_kfold\n     X = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n     random_state = 258173307\n     rkf = RepeatedKFold(\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..e1bf0a9 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -140,8 +140,26 @@ def test_affinity_propagation_predict_non_convergence():\n     # In case of non-convergence of affinity_propagation(), the cluster\n     # centers should be an empty array\n     X = np.array([[0, 0], [1, 1], [-2, -2]])\n+from sklearn.cluster import AffinityPropagation\n+import numpy as np\n+from sklearn.utils._testing import assert_array_equal, assert_warns\n+from sklearn.exceptions import ConvergenceWarning\n \n-    # Force non-convergence by allowing only a single iteration\n+def test_affinity_propagation_non_convergence_regressiontest():\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+    assert_array_equal(np.array([], dtype=int), af.cluster_centers_indices_)\n+\n+def test_affinity_propagation_non_convergence_verbose():\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2, verbose=True).fit(X)\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+    assert_array_equal(np.array([], dtype=int), af.cluster_centers_indices_)\n     af = assert_warns(ConvergenceWarning,\n                       AffinityPropagation(preference=-10, max_iter=1).fit, X)\n \n",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..7e96faa 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -155,6 +155,22 @@ def test_permute_labels(metric_name):\n # in the form of arrays lists, positive, negative or string\n def test_format_invariance(metric_name):\n     y_true = [0, 0, 0, 0, 1, 1, 1, 1]\n+\n+    # Additional test for mutual_info_score to handle object arrays with strings\n+    if metric_name == \"mutual_info_score\":\n+        y_str = [\"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]\n+        y_str_obj_array = np.array(y_str, dtype=object)\n+        \n+        # Test that mutual_info_score can handle object arrays of strings without error\n+        score_str = metric(y_str, y_str)\n+        assert score_str == metric(y_str_obj_array, y_str_obj_array)\n+\n+        # Test that mutual_info_score handles warnings or errors appropriately\n+        try:\n+            metric(y_str_obj_array, y_str_obj_array)\n+        except ValueError as e:\n+            # If a ValueError is raised, check message\n+            assert \"could not convert string to float\" not in str(e)\n     y_pred = [0, 1, 2, 3, 4, 5, 6, 7]\n \n     def generate_formats(y):\n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..701e7b7 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -5,7 +6,10 @@ import copy\n \n import pytest\n \n-from sklearn.datasets import make_regression\n+from sklearn.datasets import make_regression, make_classification\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn import set_config\n from sklearn.isotonic import (\n     check_increasing,\n     isotonic_regression,\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..94ad168 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2120,12 +2120,54 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     # not define the method.\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.compose import ColumnTransformer\n+import numpy as np\n+import pandas as pd\n+import pytest\n+from numpy.testing import assert_array_equal\n \n-    # The feature names are prefixed because verbose_feature_names_out=True is default\n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False, False, False]), [False, False, False, False]],\n+    ids=[\"empty_list\", \"false_array\", \"false_list\"],\n+)\n+def test_column_transformer_with_no_features(empty_selection):\n+    \"\"\"Test ColumnTransformer with transformers that have no features.\"\"\"\n+    X = pd.DataFrame(\n+        data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]],\n+        columns=[\"a\", \"b\", \"c\", \"d\"]\n+    )\n+    y = np.array([0, 1])\n+    numerical_features = [\"a\", \"b\", \"c\"]\n+    model_preprocessor = (\n+        \"preprocessing\",\n+        ColumnTransformer(\n+            [\n+                (\"categorical\", \"passthrough\", empty_selection),\n+                (\n+                    \"numerical\",\n+                    Pipeline([\n+                        (\"scaler\", StandardScaler()),\n+                        (\"imputer\", SimpleImputer(strategy=\"median\"))\n+                    ]),\n+                    numerical_features\n+                ),\n+            ],\n+            remainder=\"drop\"\n+        )\n+    )\n+    pipeline = Pipeline([model_preprocessor, (\"classifier\", LGBMClassifier())]).set_output(transform=\"pandas\")\n+    \n+    try:\n+        pipeline.fit(X, y)\n+        print(\"Pipeline fitting successful with no feature transformers.\")\n+    except ValueError as e:\n+        print(f\"Pipeline fitting failed with error: {e}\")\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n     assert_array_equal(X_trans_df0.columns, expected_verbose_names)\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "diff --git a/tests/test_environment_indexentries.py b/tests/test_environment_indexentries.py\nindex 9775484..e889b0d 100644\n--- a/tests/test_environment_indexentries.py\n+++ b/tests/test_environment_indexentries.py\n@@ -15,6 +15,36 @@ from sphinx.testing import restructuredtext\n \n \n @pytest.mark.sphinx('dummy', freshenv=True)\n+def test_index_symbols_with_special_characters(app):\n+    # Test with multiple entries under 'Symbols' and ensure they are grouped correctly\n+    text = (\".. index:: @mention\\n\"\n+            \".. index:: \u00a3currency\\n\"\n+            \".. index:: \u2190arrow\\n\"\n+            \".. index:: 9-number\\n\")\n+    restructuredtext.parse(app, text)\n+    index = IndexEntries(app.env).create_index(app.builder)\n+    assert len(index) == 2  # Expecting two main sections: Symbols and 9\n+    assert index[0] == ('Symbols', [('@mention', [[('', '#index-0')], [], None]),\n+                                    ('\u00a3currency', [[('', '#index-1')], [], None]),\n+                                    ('\u2190arrow', [[('', '#index-2')], [], None])])\n+    assert index[1] == ('9', [('9-number', [[('', '#index-3')], [], None])])\n+\n+def test_index_html_links(app):\n+    # Ensure that HTML links point to the correct Symbol section\n+    text = (\".. index:: @mention\\n\"\n+            \".. index:: \u00a3currency\\n\"\n+            \".. index:: \u2190arrow\\n\"\n+            \".. index:: alpha\\n\")\n+    restructuredtext.parse(app, text)\n+    index = IndexEntries(app.env).create_index(app.builder)\n+    symbols_links = [entry for entry in index if entry[0] == 'Symbols']\n+    assert len(symbols_links) == 1  # Only one Symbols section should exist\n+    assert len(symbols_links[0][1]) == 3  # Three entries under Symbols\n+    for entry in symbols_links[0][1]:\n+        _, references, _ = entry\n+        for ref in references[0]:\n+            assert ref[1] == '#index-0' or ref[1] == '#index-1' or ref[1] == '#index-2'\n+\n def test_create_single_index(app):\n     text = (\".. index:: docutils\\n\"\n             \".. index:: Python\\n\"\n",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..0c613e3 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -29,8 +29,60 @@ try:\n except ImportError:\n     pyximport = None\n \n+from .test_ext_autodoc import do_autodoc\n \n-def do_autodoc(app, objtype, name, options=None):\n+def test_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+def test_non_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.non_empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.non_empty_all',\n+        '',\n+        'docsting of non_empty_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.non_empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+def test_implicit_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.implicit_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.implicit_all',\n+        '',\n+        'docsting of implicit_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.implicit_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: bar()',\n+        '   :module: target.implicit_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: baz()',\n+        '   :module: target.implicit_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n     if options is None:\n         options = {}\n     app.env.temp_data.setdefault('docname', 'index')  # set dummy docname\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..dd2d4d5 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -10,6 +11,7 @@\n \n import sys\n from numbers import Integral\n+from struct import Struct\n from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar,\n                     Union)\n \n@@ -115,7 +117,8 @@ def test_restify_type_ForwardRef():\n     assert restify(ForwardRef(\"myint\")) == \":class:`myint`\"\n \n \n-def test_restify_broken_type_hints():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..9feb596 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,30 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`OtherClass <name.space.OtherClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`OtherClass <name.space.OtherClass>` instance)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`OtherClass <name.space.OtherClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..d4d964c 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,10 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from pathlib import Path\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sympy__sympy-12481": "",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..4e42c2d 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -108,6 +109,26 @@ def test_sparse_matrix():\n     assert (A**3)[:] == [290, 262, 251, 448, 440, 368, 702, 954, 433]\n \n     # test_creation\n+\n+    # Test for hstack with zero-dimension matrices\n+    sparse_matrices_zero_row = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_zero_row).shape == (0, 6)\n+\n+    sparse_matrices_zero_col = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_zero_col).shape == (6, 0)\n+\n+    # Test for hstack with one row matrices\n+    sparse_matrices_one_row = [\n+        SparseMatrix.zeros(1, 0),\n+        SparseMatrix.zeros(1, 1),\n+        SparseMatrix.zeros(1, 2),\n+        SparseMatrix.zeros(1, 3)\n+    ]\n+    assert SparseMatrix.hstack(*sparse_matrices_one_row).shape == (1, 6)\n+\n+    # Test for vstack with zero-dimension matrices\n+    sparse_matrices_zero_col = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_zero_col).shape == (6, 0)\n     x = Symbol(\"x\")\n     a = SparseMatrix([[x, 0], [0, 0]])\n     m = a\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..9fe57f1 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -100,7 +100,34 @@ def test_core_symbol():\n         check(c)\n \n \n-def test_core_numbers():\n+import sys\n+import pickle\n+import subprocess\n+from sympy import symbols, Float, Add\n+\n+def test_float_pickle_python2_to_python3():\n+    \"\"\"Test for pickling a sympy expression with a float from Python 2 to Python 3.\"\"\"\n+    # We'll simulate the testing environment in a subprocess to mimic the original issue described\n+    python2_code = (\n+        'import pickle; '\n+        'import sympy; '\n+        'x = sympy.symbols(\"x\"); '\n+        'expr = x + 1.0; '\n+        'print(pickle.dumps(expr, 2))'\n+    )\n+    # Run this code in a Python 2 subprocess\n+    python2_cmd = ['python2', '-c', python2_code]\n+    result = subprocess.run(python2_cmd, stdout=subprocess.PIPE)\n+    \n+    if result.returncode != 0:\n+        raise RuntimeError(\"Failed to execute Python 2 subprocess.\")\n+    \n+    pickled_data = result.stdout\n+    \n+    # Unpickle the data in Python 3 and verify\n+    expr = pickle.loads(pickled_data)\n+    expected = Add(symbols(\"x\"), Float(1.0))\n+    assert expr == expected\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n \n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..ab677f1 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -278,8 +278,27 @@ def test_coth_series():\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n-\n-def test_csch():\n+from sympy import Symbol, coth, log, tan, I, pi\n+\n+def test_coth_log_tan_substitution():\n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+\n+    # Test cases for the problematic values\n+    assert expr.subs(x, 2) == coth(log(tan(2)))\n+    assert expr.subs(x, 3) == coth(log(tan(3)))\n+    assert expr.subs(x, 5) == coth(log(tan(5)))\n+    assert expr.subs(x, 6) == coth(log(tan(6)))\n+    assert expr.subs(x, 8) == coth(log(tan(8)))\n+    assert expr.subs(x, 9) == coth(log(tan(9)))\n+    assert expr.subs(x, 11) == coth(log(tan(11)))\n+    assert expr.subs(x, 12) == coth(log(tan(12)))\n+    assert expr.subs(x, 13) == coth(log(tan(13)))\n+    assert expr.subs(x, 15) == coth(log(tan(15)))\n+    assert expr.subs(x, 18) == coth(log(tan(18)))\n+\n+    # Additional tests to check correctness and consistency\n+    assert expr.subs(x, pi/2) == coth(log(tan(pi/2)))\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..d700db7 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,38 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643():\n+    # Import necessary functions for the test\n+    from sympy import Matrix, eye, ones\n+\n+    # Original test for issue 13643\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+    assert result == expected\n+\n+    # Additional test case with different insert index\n+    M = eye(6)\n+    V = 2 * ones(6, 1)\n+    result = M.col_insert(0, V)\n+    expected = Matrix([\n+        [2, 1, 0, 0, 0, 0, 0],\n+        [2, 0, 1, 0, 0, 0, 0],\n+        [2, 0, 0, 1, 0, 0, 0],\n+        [2, 0, 0, 0, 1, 0, 0],\n+        [2, 0, 0, 0, 0, 1, 0],\n+        [2, 0, 0, 0, 0, 0, 1],\n+    ])\n+    assert result == expected\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..5213a1d 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,17 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+from sympy import SeqFormula, symbols, oo\n+import sympy as sp\n \n-def test_latex_sequences():\n+def test_latex_seqformula_brackets():\n+    n = symbols('n', integer=True)\n+    s1 = SeqFormula(n**2, (n, 0, oo))\n+\n+    # Assert that the LaTeX output of SeqFormula does not escape brackets\n+    actual_output = latex(s1)\n+    expected_output = r'\\left[0, 1, 4, 9, \\ldots\\right]'\n+    assert actual_output == expected_output, f\"Expected: {expected_output}, but got: {actual_output}\"\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..f47ca8f 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..5dfbf43 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,7 +6111,37 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n-def test_MatrixSymbol_printing():\n+def test_pretty_printing_MatAdd_issue_14814():\n+    # issue #14814\n+    n = symbols('n', integer=True)\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    \n+    # Test pretty printing of matrix addition with special character in symbol name\n+    assert pretty(x + y_star) == \"x + y*\"\n+    \n+    # Test negative coefficients\n+    a = symbols('a')\n+    y_y = MatrixSymbol('y', n, n)\n+    assert pretty(-a*x + -2*y_y*y_star) == \"-a*x - 2*y*y*\"\n+\n+    # Additional cases\n+    # Test pretty printing with regular symbols without special characters\n+    y = MatrixSymbol('y', n, n)\n+    assert pretty(x + y) == \"x + y\"\n+    assert pretty(-x - y) == \"-x - y\"\n+    \n+    # Test more complex expressions\n+    z = MatrixSymbol('z', n, n)\n+    assert pretty(-x + y - z) == \"-x + y - z\"\n+    assert pretty(x + y - z) == \"x + y - z\"\n+    \n+    # Test with multiple negative and positive terms\n+    assert pretty(-x - y + z) == \"-x - y + z\"\n+    assert pretty(x - y + z) == \"x - y + z\"\n+\n+    # Ensure issues are resolved and do not throw errors\n+    assert pretty(-2*y_star) == \"-2*y*\"\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..72eb7ab 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -724,6 +724,19 @@ def test_dummification():\n     #Test that \\alpha was properly dummified\n     lam = lambdify((alpha, t), 2*alpha + t)\n     assert lam(2, 1) == 5\n+\n+def test_curly_matrix_symbol():\n+    import sympy as sy\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    # Test without dummify\n+    lam = lambdify(curlyv, curlyv)\n+    res = lam([[1], [2]])\n+    assert res[0, 0] == 1 and res[1, 0] == 2\n+    \n+    # Test with dummify=True\n+    lam_dummified = lambdify(curlyv, curlyv, dummify=True)\n+    res_dummified = lam_dummified([[3], [4]])\n+    assert res_dummified[0, 0] == 3 and res_dummified[1, 0] == 4\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..71be84b 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -28,6 +29,10 @@ def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x)) == \"Max[x]\"\n+    assert mcode(Max(2, 3)) == \"Max[2, 3]\"\n \n \n def test_Pow():\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..a9d96fd 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n@@ -1726,7 +1728,12 @@ def test_latex_UnevaluatedExpr():\n     assert latex(x*he) == r\"x \\frac{1}{x}\"\n \n \n-def test_MatrixElement_printing():\n+def test_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # This tests the LaTeX printing for an element of the matrix product\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n     # test cases for issue #11821\n     A = MatrixSymbol(\"A\", 1, 3)\n     B = MatrixSymbol(\"B\", 1, 3)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..52270aa 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -20,8 +21,25 @@ def test_idiff():\n     assert True in [sol.diff(x, 3).equals(explicit) for sol in solve(circ, y)]\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n+def test_idiff_issue_cases():\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test case to check if idiff supports Eq\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x) == (x + 1) * exp(x - y) / (y + 1)\n+\n+    # Test case to check if idiff supports function f(x) instead of y\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x)) / (f(x) + 1)\n+\n+    # Original test case provided in the issue\n+    assert idiff(y * exp(y) - x * exp(x), y, x) == (x + 1) * exp(x - y) / (y + 1)\n \n-def test_intersection():\n+    # Additional cases to test different configurations\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..60aa28f 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,30 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_autowrap_with_unused_matrix_argument_cython():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, \"The function should return 1.0 even if x is unused.\"\n+\n+def test_autowrap_with_partially_used_matrix_argument_cython():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = x[0, 0] * 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, \"The function should return 1.0 when only part of x is used in the expression.\"\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..7686581 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -339,6 +339,22 @@ def test_intersection():\n \n     assert Intersection(S.Complexes, FiniteSet(S.ComplexInfinity)) == S.EmptySet\n \n+    # Verify that Intersection removes duplicates and handles symbolic cases correctly\n+    from sympy import Piecewise, Eq, symbols\n+\n+    x = symbols('x')\n+    assert Intersection({1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+\n+    # Edge case with all elements being identical\n+    assert Intersection({1}, {1}, {1}) == {1}\n+    # Case with one symbolic and duplicates\n+    assert Intersection({x}, {x}, {x}) == {x}\n+    # Completely symbolic case\n+    assert Intersection({x}, {x}) == {x}\n+    # Case with no intersection\n+    assert Intersection({1}, {2}, {x}) == S.EmptySet\n+\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..259c4dd 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,9 +1,14 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n )\n from sympy import eye\n from sympy.abc import x, i, j, a, b, c, d\n+from sympy import MatrixSymbol, Identity, lambdify, symbols\n+from sympy.utilities.pytest import raises, skip\n+from sympy.external import import_module\n+import numpy as np\n from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbrt, Sqrt\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayTensorProduct, CodegenArrayDiagonal,\n@@ -15,8 +20,21 @@ from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n np = import_module('numpy')\n+def test_lambdify_matrix_identity_issue():\n+    if not np:\n+        skip(\"NumPy not installed\")\n \n-def test_numpy_piecewise_regression():\n+    # Test with specific matrix size\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+    assert (f(ma) == mr).all()\n+\n+    # Test with symbolic matrix size, expecting NotImplementedError\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..2c44f4b 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,15 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n+def test_issue_17137():\n+    from sympy import simplify, cos, I, Symbol\n+    x = Symbol('x')\n+    # Test the expression that caused the error, expecting no Exception\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    # Additional test to check powers with both real and imaginary parts\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..101baff 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,26 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n-\n def test_point():\n+    # Additional test cases for issue described\n+    def test_point_multiplication_order():\n+        # Importing Point from sympy.geometry\n+        from sympy.geometry import Point \n+        point1 = Point(0, 0)\n+        point2 = Point(1, 1)\n+\n+        # Expected behavior is both these lines give the same result\n+        result1 = point1 + point2 * sympify(2.0)\n+        result2 = point1 + sympify(2.0) * point2\n+\n+        assert result1 == result2 == Point(2, 2)\n+\n+    test_point_multiplication_order()\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..b1bb7be 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,37 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, sympify, Symbol\n+from sympy.testing.pytest import raises\n+\n+def test_expr_repr_equality():\n+    # Test for the issue with repr being evaluated during equality checks\n+    x = symbols('x')\n+    \n+    # A class that returns a string that should not be evaluated\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+            \n+    # Test to ensure equality operation does not trigger eval on repr\n+    assert (x == C()) is False\n+    \n+    # A class that returns a string equal to a symbol name\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+            \n+    # Test to ensure equality operation checks for object type\n+    assert (x == D()) is False\n+\n+    # Test with an object whose repr would cause an exception if evaluated\n+    class BadRepr:\n+        def __repr__(self):\n+            raise RuntimeError(\"This repr should not be evaluated\")\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1933,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..43ba4d8 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,16 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy import symbols\n+\n+    x, y = symbols('x y', integer=True)\n+    \n+    # Test issue 18186 to ensure the same results for different symbol orders with permute=True\n+    expected_results = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == expected_results\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == expected_results\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..5f40c66 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, Basic, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..64b84f2 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,26 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    # Test case for the specific issue\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+    # Existing functionality where two matrices are passed\n+    D2 = BlockDiagMatrix(M, M)\n+    B2 = Matrix(D2)\n+    expected_matrix = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B2 == expected_matrix\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..e48de53 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,8 +1,20 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n from sympy.testing.pytest import raises\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n+from sympy import BlockMatrix, MatrixSymbol, symbols\n+from sympy.testing.pytest import XFAIL\n+\n+# Test to verify the issue with symbolic index fetching in BlockMatrix\n+@XFAIL\n+def test_block_index_issue_case():\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n \n k, l, m, n = symbols('k l m n', integer=True)\n i, j = symbols('i j', integer=True)\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..c7bc1da 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -199,8 +199,19 @@ def test_im():\n \n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n+from sympy import Abs, sign, Symbol, Piecewise, Eq, Function\n \n def test_sign():\n+    # Test for sign rewrite in terms of Abs\n+    x = Symbol('x')\n+    y = Symbol('y', real=True)\n+    \n+    # Rewrite sign(x) in terms of Abs\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    # Test for specific case with a function\n+    f = Function('f')\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x)/Abs(f(x)), True))\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..07a0b24 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,13 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n-\n-def test_binary_partitions():\n+def test_no_reuse_of_partitions():\n+    # This test ensures that partitions() does not reuse dictionaries.\n+    p1 = list(partitions(4, k=2))\n+    p2 = list(partitions(4, k=2))\n+    assert p1 == p2\n+    for part1, part2 in zip(p1, p2):\n+        assert part1 is not part2, \"Dictionaries should be different objects\"\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..ee4bbe3 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,7 +254,12 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n+from sympy import S, oo, power\n+\n def test_zero():\n+    # Test issue 19572\n+    assert 0 ** -oo == S.ComplexInfinity\n+    assert power(0, -oo) == S.ComplexInfinity\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..d498334 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -41,7 +42,22 @@ def test_convert_to():\n     # assert (2*speed_of_light).convert_to(m / s) == 2 * 299792458 * m / s\n     assert day.convert_to(s) == 86400*s\n \n-    # Wrong dimension to convert:\n+    # Test the issue with convert_to combining orthogonal units\n+    J_s = joule * second\n+\n+    # Original test patch case\n+    conv = convert_to(J_s, joule)\n+    assert conv == J_s\n+\n+    # Additional test cases from the issue\n+    # Test converting J*s to J, expecting an unchanged expression back\n+    assert convert_to(J_s, joule) == J_s\n+\n+    # Test converting J*s to kg*m**2/s\n+    assert convert_to(J_s, kg * m**2 / s) == kg * m**2 / s\n+\n+    # Test converting J*s to mins (minutes)\n+    assert convert_to(J_s, minute) == J_s / 60\n     assert q.convert_to(s) == q\n     assert speed_of_light.convert_to(m) == speed_of_light\n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..097a25f 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,22 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import sympy\n+from sympy.core.symbol import Symbol\n+from sympy.testing.pytest import raises\n+\n+def test_symbol_has_no_dict_in_1_6_2():\n+    \"\"\"Test that Symbol instances have no `__dict__` in version 1.6.2\"\"\"\n+    s = Symbol('s')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+def test_symbol_has_dict_in_1_7():\n+    \"\"\"Test that Symbol instances have `__dict__` in version 1.7\"\"\"\n+    s = Symbol('s')\n+    assert hasattr(s, '__dict__')\n+    assert s.__dict__ == {}\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..cd58f2b 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..af4fc25 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -20,6 +21,27 @@ def test_subs():\n     assert e == Rational(6)\n \n \n+def test_issue_subs_PolynomialError():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+    \n+    # Define symbols with real assumptions\n+    x, y, z = symbols('x y z', real=True)\n+    \n+    # Expression that previously caused PolynomialError\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    \n+    # Verify that substituting doesn't raise PolynomialError\n+    assert expr.subs({1: 1.0}) is not None\n+\n+    # Additional test cases to ensure the fix\n+    assert expr.subs({x: 2.0, y: 1.5, z: 1.0}) is not None\n+    assert expr.subs({x: 0, y: 0, z: 1.0}) is not None\n+\n+    # Ensuring original behavior is unchanged\n+    assert expr.subs({z: 2.0}) == exp(sinh(Piecewise((x, y > x), (y, True)) / 2.0))\n+    assert expr.subs({x: 1, y: 1, z: 1}) == exp(sinh(Piecewise((1, False), (1, True))))\n+\n def test_subs_Matrix():\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..7666ecb 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,5 +1,7 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n+from sympy.core.function import Derivative\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n@@ -39,7 +41,9 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n-def test_Matrix_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n         m = cls.zeros(3, 2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..3770027 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -114,6 +114,32 @@ def test_monomials():\n     assert set(itermonomials([x], [3], [1])) == {x, x**3, x**2}\n     assert set(itermonomials([x], [3], [2])) == {x**3, x**2}\n \n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    # Testing an edge case with min_degrees equals max_degrees\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x1*x3**2, x1**2*x3,\n+        x2*x3**2, x2**2*x3, x3**2*x1, x3*x1**2, x3*x2**2, x3**2*x2,\n+        x1*x2*x3\n+    }\n+\n+    # Testing when max_degrees > min_degrees\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) == {\n+        x1**3, x2**3, x3**3, x1**4, x2**4, x3**4, x1*x2**2, x1**2*x2,\n+        x1*x3**2, x1**2*x3, x2*x3**2, x2**2*x3, x3**2*x1, x3*x1**2,\n+        x3*x2**2, x3**2*x2, x1*x2*x3, x1**3*x2, x1**3*x3, x1*x2**3,\n+        x1*x3**3, x2*x3**3, x2**3*x3, x1**2*x2**2, x1**2*x3**2,\n+        x2**2*x3**2, x1*x2*x3**2, x1**2*x2*x3, x1*x2**2*x3, x1*x3**2*x2,\n+        x2*x3**2*x1\n+    }\n+\n+    # Test using non-commutative variables\n+    a, b, c = symbols('a, b, c', commutative=False)\n+    assert set(itermonomials([a, b, c], 3, 3)) == {\n+        a**3, b**3, c**3, a*b**2, b*a**2, a*c**2, c*a**2,\n+        b*c**2, c*b**2, a*b*c, a*c*b, b*a*c, b*c*a,\n+        c*a*b, c*b*a\n+    }\n+\n     assert set(itermonomials([x, y], [0, 0])) == {S.One}\n     assert set(itermonomials([x, y], [0, 1])) == {S.One, y}\n     assert set(itermonomials([x, y], [0, 2])) == {S.One, y, y**2}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..d4b97f9 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,8 +50,25 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n+def test_issue_infinite_solution_request():\n+    # This was the original incorrect behavior\n+    # Now it should raise NotImplementedError\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], (x, y)))\n \n-def test_solve_biquadratic():\n+    # Test for multi-variate polynomial that should raise NotImplementedError\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x**2 + y**2 - 1], (x, y)))\n+\n+    # Test a case with an actual system with no infinite solutions\n+    # Should solve correctly with finite solutions\n+    assert solve_poly_system([x**2 + y**2 - 1, x - 1], (x, y)) == [(1, 0)]\n+\n+    # Test univariate but with wrong number of generators input\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n \n     f_1 = (x - 1)**2 + (y - 1)**2 - r**2\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..9b9437b 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -8,6 +9,7 @@ from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n+from sympy.core.parameters import evaluate\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n \n@@ -443,8 +445,22 @@ def test_unit():\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n+def test_issue_22684():\n+    # This should not raise an error\n+    with evaluate(False):\n+        Point(1, 2)\n+\n+    # Testing with Point2D explicitly\n+    with evaluate(False):\n+        Point2D(1, 2)\n+\n+    # Make sure that passing complex numbers raises an error\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        Point2D(1 + I, 2)\n \n-def test__normalize_dimension():\n+    # Testing without evaluate(False) for consistency\n+    Point(1, 2)\n+    Point2D(1, 2)\n     assert Point._normalize_dimension(Point(1, 2), Point(3, 4)) == [\n         Point(1, 2), Point(3, 4)]\n     assert Point._normalize_dimension(\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..a46bd22 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -346,8 +346,35 @@ def test_cse_MatrixSymbol():\n     n = symbols('n', integer=True)\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n-\n-def test_cse_MatrixExpr():\n+def test_matrixsymbol_indexing():\n+    from sympy import Matrix, MatrixSymbol, cse\n+    # Define matrix symbols\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+\n+    # Expression using matrix multiplication\n+    e = a * b\n+\n+    # Perform common subexpression elimination\n+    cse_subs, cse_reduced = cse(e)\n+\n+    # Ensure that cse correctly processes the matrix multiplication\n+    assert len(cse_subs) > 0  # there should be some substitutions\n+    assert len(cse_reduced) == 1  # the reduced expression should be still a single matrix\n+    assert cse_reduced[0].shape == (4, 4)  # verify the shape of the result\n+\n+    # Check specific substitutions to ensure correct behavior\n+    sub_symbols = [sub[0] for sub in cse_subs]\n+    assert len(set(sub_symbols)) == len(cse_subs)  # Ensure all substitution symbols are unique\n+    assert all(isinstance(sub[1], Matrix) for sub in cse_subs)  # Ensure substitutions are matrices\n+\n+    # Assert specific example to ensure behavior alignment\n+    sample_expr = a[0, 0] * a[0, 1] + a[0, 0] * a[0, 1] * a[0, 2]\n+    expected = ([(symbols('x0'), a[0, 0] * a[0, 1])], [symbols('x0') * a[0, 2] + symbols('x0')])\n+    assert cse(sample_expr) == expected\n+\n+    # Verify cse on individual element\n+    assert cse(a[0] * a[0]) == ([], [a[0] * a[0]])\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..ffdb898 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -38,6 +39,13 @@ def test_array_negative_indices():\n         assert test_array[-1, -1] == 10\n \n \n+def test_issue_17851():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n+\n def test_issue_18361():\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..fee2fb9 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1174,8 +1174,25 @@ def test_scipy_polys():\n                     )\n \n \n+import inspect\n+from sympy import symbols, lambdify\n \n def test_lambdify_inspect():\n+    # Original test for ensuring getsource works correctly\n+    f = lambdify(x, x**2)\n+    assert 'x**2' in inspect.getsource(f)\n+\n+    # New test for single-element tuple issue\n+    f_single_tuple = lambdify([], (1,))\n+    source = inspect.getsource(f_single_tuple)\n+    assert source == 'def _lambdifygenerated():\\n    return (1,)\\n'\n+    assert f_single_tuple() == (1,)\n+\n+    # Ensure multi-element tuples are handled correctly as a sanity check\n+    f_multi_tuple = lambdify([], (1, 2))\n+    source_multi = inspect.getsource(f_multi_tuple)\n+    assert source_multi == 'def _lambdifygenerated():\\n    return (1, 2)\\n'\n+    assert f_multi_tuple() == (1, 2)\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..1da5fa2 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,29 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..bc91723 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,33 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_expand_fix_issue():\n+    # Test cases from the original test patch to ensure the fix works as expected\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2 * A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test cases to ensure thorough testing of the fix\n+    U = Operator('U')\n+    V = Operator('V')\n+\n+    # Test the original reported issue\n+    assert TP(2*U - V, U + V).expand(tensorproduct=True) == \\\n+        2 * TP(U, U) + 2 * TP(U, V) - TP(V, U) - TP(V, V)\n+\n+    # Test expansion involving zero terms in tensor products\n+    assert TP(U - U, U + V).expand(tensorproduct=True) == 0\n+\n+    # Test expansion with multiple scalar and non-scalar factors\n+    assert TP(3*U + 4*V, U - V).expand(tensorproduct=True) == \\\n+        3 * TP(U, U) - 3 * TP(U, V) + 4 * TP(V, U) - 4 * TP(V, V)\n+\n+    # Test expansion with more than two factors\n+    assert TP(U + V, U, V).expand(tensorproduct=True) == \\\n+        TP(U, U, V) + TP(V, U, V)\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..f5cd2b6 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -6,6 +7,8 @@ from sympy.core.numbers import (Number, Rational)\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n from sympy.functions.elementary.complexes import Abs\n+from sympy.physics.units import Quantity, velocity, acceleration, time, meter, second\n+from sympy.physics.units.systems.si import SI\n from sympy.functions.elementary.exponential import (exp, log)\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.functions.elementary.trigonometric import sin\n@@ -562,7 +565,59 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    # Setup for the original test patch\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1 * T1 + V1\n+    # Should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_negative_factors():\n+    # Additional test with negative but equivalent scale factors\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    # Should not throw ValueError here as dimensions are equivalent\n+    SI._collect_factor_and_dimension(expr1)\n+\n+def test_issue_24211_zero_factor():\n+    # Test when one of the scale factors is zero\n+    v2 = Quantity('v2')\n+    SI.set_quantity_dimension(v2, velocity)\n+    SI.set_quantity_scale_factor(v2, 0 * meter / second)\n+\n+    a2 = Quantity('a2')\n+    SI.set_quantity_dimension(a2, acceleration)\n+    SI.set_quantity_scale_factor(a2, -9.8 * meter / second**2)\n+\n+    t2 = Quantity('t2')\n+    SI.set_quantity_dimension(t2, time)\n+    SI.set_quantity_scale_factor(t2, 5 * second)\n+\n+    expr2 = a2 * t2 + v2\n+    # Should not throw ValueError here as dimensions are equivalent\n+    SI._collect_factor_and_dimension(expr2)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..b4cebdd 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n+from sympy.physics.units.prefixes import kilo\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +29,13 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+def test_milli_prefix_with_unit():\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+    assert milli * volt == volt / 1000\n+    assert milli * meter == meter / 1000\n+    assert milli * kilo == 1 / 1000  # milli*kilo should be comparable to the Kilo factor\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..8a158ba 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -185,6 +185,8 @@ class GrandParent(models.Model):\n \n \n class Parent(GrandParent):\n+    class Meta:\n+        ordering = [\"-pk\"]\n     pass\n \n \n",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..763b7c6 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -6,6 +6,18 @@ should be a list or tuple of field names. This tells Django how to order\n ``QuerySet`` results.\n \n If a field name in ``ordering`` starts with a hyphen, that field will be\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n ordered in descending order. Otherwise, it'll be ordered in ascending order.\n The special-case field name ``\"?\"`` specifies random order.\n \n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..3caa9ed 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,8 +3201,35 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    def test_boundwidget_id_for_label_uses_attrs(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the 'id' specified in widget['attrs'].\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n+\n+    def test_boundwidget_id_for_label_fallback(self):\n+        \"\"\"\n+        Test that the default BoundWidget.id_for_label is used when no id is specified in widget['attrs'].\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple,\n+            )\n \n-    def test_boundfield_widget_type(self):\n+        form = SomeForm(auto_id=False)\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'id_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'id_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..f96cf30 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,10 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm, Normalize\n+import numpy as np\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -657,8 +661,25 @@ def test_colorbar_scale_reset():\n \n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n-\n-def test_colorbar_get_ticks_2():\n+def test_update_colorbar_after_changing_norm():\n+    # Create random data in logarithmic range\n+    img = 10 ** np.random.normal(1, 1, size=(50, 50))\n+    \n+    # Plot the data\n+    fig, ax = plt.subplots(1, 1)\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+    \n+    # Change the norm to LogNorm and update the colorbar\n+    plot.set_norm(LogNorm(vmin=img.min(), vmax=img.max()))\n+    cb.update_normal(plot)\n+    \n+    # Draw the canvas to ensure updates are reflected\n+    fig.canvas.draw()\n+    \n+    # Check if the colorbar is using a logarithmic scale\n+    assert cb.ax.yaxis.get_scale() == 'log', \"Colorbar scale should be logarithmic after norm update.\"\n+    print(\"Test passed: Colorbar updated correctly after changing norm.\")\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..f1170a8 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,35 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_custom_transformer_and_pandas_output():\n+    \"\"\"Test FeatureUnion with custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    import numpy as np\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn import set_config\n+    from numpy.testing import assert_array_equal\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: np.ndarray = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: np.ndarray = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Use pandas output\n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    result = union.fit_transform(data)\n+\n+    # Check that the result is a DataFrame and has the correct shape\n+    assert isinstance(result, pd.DataFrame)\n+    expected_rows = len(data[\"date\"].unique())\n+    assert result.shape == (expected_rows, 1)\n+    assert_array_equal(result.index, range(expected_rows))\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..c3e7f60 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -131,6 +131,33 @@ def test_decorators(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_superclass_member(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only_superclass_member.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_only_superclass_member',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_only_superclass_member',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_only_superclass_member',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..76e9184 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n-    Symbol, coth, pi, log, count_ops, sqrt, E, expand, Piecewise)\n+    Symbol, coth, pi, log, count_ops, sqrt, E, expand, Piecewise, Rational, acos)\n \n from sympy.core.compatibility import long\n from sympy.utilities.pytest import XFAIL\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..33b2231 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,22 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n-\n-def test_units():\n+def test_issue_alignment_sum():\n+    from sympy import Sum, oo\n+    from sympy.abc import x\n+\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ucode_str = u(\n+        \"  \u221e\\n\"\n+        \" ___\\n\"\n+        \" \u2572\\n\"\n+        \"  \u2572   x\\n\"\n+        \"  \u2571  + 3\\n\"\n+        \" \u2571\\n\"\n+        \" \u203e\u203e\u203e\\n\"\n+        \"x = 1\"\n+    )\n+    assert upretty(expr) == ucode_str\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..9b84f58 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,19 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    # Confirm that modifying a list during iteration over uniq raises RuntimeError\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = [1, 2, 3, 4]\n+    raises(RuntimeError, lambda: [f.pop(0) for i in uniq(f)])\n+\n+    f = ['a', 'b', 'c']\n+    raises(RuntimeError, lambda: [f.append(i) for i in uniq(f)])\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..c49374d 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,6 +8,7 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..5ee5f39 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,7 +546,20 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_sql(self):\n+        # Set up the initial subquery\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        \n+        # Verify that the subquery attribute is correctly set\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        \n+        # Compile the SQL and check for correctness\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        self.assertTrue(sql.endswith(')'))\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..c66de4a 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,26 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +184,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..65edd97 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,4 +1,6 @@\n-import copy\n+\n+import pickle\n+import matplotlib.pyplot as plt\n from datetime import datetime\n import io\n from pathlib import Path\n@@ -12,7 +14,7 @@ import pytest\n from PIL import Image\n \n import matplotlib as mpl\n-from matplotlib import gridspec, rcParams\n+from matplotlib import gridspec, rcParams, Figure\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n from matplotlib.figure import Figure, FigureBase\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..082aff6 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1622,8 +1623,20 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         scatterplot(data=long_df, x=\"x\", y=\"y\", c=long_df[\"y\"], cmap=cmap)\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n-\n-    def test_linewidths(self, long_df):\n+    \n+    def test_pairgrid_scatterplot_with_categorical_hue(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+        try:\n+            g = sns.PairGrid(iris, y_vars=[\"sepal_length\",\"sepal_width\"], x_vars=[\"petal_length\",\"petal_width\"])\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            success = True\n+        except Exception as e:\n+            success = False\n+            print(f\"Test failed with exception: {e}\")\n+        \n+        assert success, \"PairGrid with categorical hue in map should not raise an error\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..da12fc3 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -347,6 +347,20 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n+def test_raises_context_variable_behavior():\n+    import pytest\n+\n+    # Testing the behavior of pytest.raises context variable\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+\n+    # str(excinfo) should produce a representation of ExceptionInfo\n+    assert str(excinfo) == \"<ExceptionInfo LookupError tblen=1>\"\n+    \n+    # str(excinfo.value) should produce the message of the exception itself\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n+\n def test_excinfo_for_later():\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..7529f34 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Test with the new single character shortcut '-c'\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Test with the new single character shortcut '-c'\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..1257c8b 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -91,7 +91,18 @@ def test_Identity_doit():\n     assert isinstance(Inn.doit().rows, Mul)\n \n \n-def test_addition():\n+from sympy import Symbol, symbols, MatrixSymbol, Identity, Sum\n+\n+def test_identity_sum_elements():\n+    n = Symbol('n', integer=True, positive=True)\n+    In = Identity(n)\n+    i, j = symbols('i j', integer=True)\n+    \n+    # Ensure diagonal elements sum to n\n+    assert Sum(In[i, i], (i, 0, n-1)).doit() == n\n+    \n+    # Ensure total sum of all elements is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     A = MatrixSymbol('A', n, m)\n     B = MatrixSymbol('B', n, m)\n \n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..9fe1b95 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -234,6 +234,7 @@ GOOD_PAIRS = [\n     (r\"a \\; b\", _Mul(a, b)),\n     (r\"a \\thickspace b\", _Mul(a, b)),\n     (r\"a \\quad b\", _Mul(a, b)),\n+    (r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\", _Mul(_Pow(c, 2), _Add(_Pow(a, 3), b), _Pow(c, -1), evaluate=False)),\n     (r\"a \\qquad b\", _Mul(a, b)),\n     (r\"a \\! b\", _Mul(a, b)),\n     (r\"a \\negthinspace b\", _Mul(a, b)),\n"
}