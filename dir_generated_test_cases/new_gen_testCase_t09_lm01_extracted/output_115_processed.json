{
  "astropy__astropy-12907": "",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..b1bf834 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,48 @@\n+\n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing a table to RST format with header rows.\"\"\"\n+    tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    expected_lines = [\n+        \"===== ======== ==== \",\n+        \"  wave response    \",\n+        \"    nm       ct    \",\n+        \"===== ======== ==== \",\n+        \"350.0      0.7     \",\n+        \"950.0      1.2     \",\n+        \"===== ======== ==== \",\n+    ]\n+    assert out.getvalue().splitlines() == expected_lines\n+\n+def test_read_rst_with_header_rows():\n+    \"\"\"Test reading a table from RST format with header rows.\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+from astropy.table import QTable\n+import astropy.units as u\n+import numpy as np\n+from io import StringIO\n \n from .common import assert_almost_equal, assert_equal\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..d32bf4d 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -43,7 +43,23 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n \n-def test_roundtrip(tmp_path):\n+import pytest\n+from astropy.table import Table\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip(tmp_path, lowercase):\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n@@ -109,7 +125,26 @@ def test_roundtrip(tmp_path):\n         assert meta_name in new_table.meta\n \n \n-def test_read_example():\n+def test_lowercase_command(tmp_path):\n+    # This is the test derived from the issue description to ensure lowercase commands work.\n+    example_qdp = \"\"\"\n+    read serr 1 2\n+    1 0.5 1 0.5\n+    \"\"\"\n+    path = str(tmp_path / \"test_lowercase.qdp\")\n+\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+\n+    # Try reading the test file with the lowercase command\n+    table = Table.read(path, format='ascii.qdp')\n+\n+    # Assert the table was read successfully and contains the expected data\n+    assert len(table) == 1\n+    assert table['col1'][0] == 1\n+    assert table['col2'][0] == 0.5\n+    assert table['col3'][0] == 1\n+    assert table['col4'][0] == 0.5\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..9081f1f 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -31,7 +31,28 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n # Test with Data covers:\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n+\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n+\n+def test_nddata_mask_propagation_with_or_without_mask():\n+    # Tests to ensure mask is properly propagated when one operand lacks a mask\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply masked by constant (mask * no mask)\n+    result_mask = nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask\n+    np.testing.assert_equal(result_mask, mask)\n+\n+    # multiply masked by no mask (mask * no mask)\n+    result_mask = nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\n+    np.testing.assert_equal(result_mask, mask)\n @pytest.mark.parametrize(\n     (\"data1\", \"data2\"),\n     [\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..a726402 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -252,6 +252,17 @@ class TestTableFunctions(FitsTestCase):\n \n         # When there are scaled columns, the raw data are in data._parent\n \n+    def test_d_exponent_replacement(self):\n+        \"\"\"Test that 'E' exponent for floating point numbers is replaced by 'D' where necessary.\"\"\"\n+        r1 = np.array([11.0, 12.0])\n+        c2 = fits.Column(name='def', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c2])\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+        with open(self.temp('test_d_exponent.fits'), 'r') as file:\n+            content = file.read()\n+            assert '1.1000000000000000D+01' in content\n+            assert '1.2000000000000000D+01' in content\n+\n         t.close()\n \n     def test_ascii_table(self):\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..66eea7d 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,33 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default file permissions mode should be 0o644.\n+        \"\"\"\n+        with self.settings():  # No override of FILE_UPLOAD_PERMISSIONS\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n+    def test_file_saved_with_correct_permissions(self):\n+        \"\"\"\n+        Test that a file saved using FileSystemStorage respects the\n+        FILE_UPLOAD_PERMISSIONS setting.\n+        \"\"\"\n+        storage = FileSystemStorage()\n+        file_content = ContentFile(\"dummy content\")\n+        file_name = 'testfile.txt'\n+\n+        # Save file and check permissions\n+        saved_name = storage.save(file_name, file_content)\n+        full_path = storage.path(saved_name)\n+\n+        # Check the actual file permissions\n+        actual_permissions = os.stat(full_path).st_mode & 0o777\n+        self.assertEqual(actual_permissions, 0o644)\n+\n+        # Clean up\n+        storage.delete(saved_name)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..3cd257a 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,9 +248,33 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_unicode_trailing_newline(self):\n+        # This test checks if the UnicodeUsernameValidator correctly rejects a username with a trailing newline.\n+        invalid_usernames = [\n+            \"username\\n\",  # Trailing newline\n+            \"anotheruser\\r\",  # Trailing carriage return\n+            \"userwithboth\\r\\n\"  # Trailing CRLF\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_trailing_newline(self):\n+        # This test checks if the ASCIIUsernameValidator correctly rejects a username with a trailing newline.\n+        invalid_usernames = [\n+            \"anotheruser\\n\",  # Trailing newline\n+            \"asciiname\\r\",  # Trailing carriage return\n+            \"asciiboth\\r\\n\"  # Trailing CRLF\n+        ]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", \"trailingnewline\\n\"]\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +282,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..76f41ab 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,12 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    from django.http import HttpResponse\n+\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..bf06a5c 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,5 +1,7 @@\n+\n from math import ceil\n \n+from django.db.models.deletion import Collector\n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -464,7 +466,19 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a user instance\n+        u = User.objects.create()\n+        \n+        # Collector can perform fast delete\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        \n+        # Delete the user instance\n+        u.delete()\n+        \n+        # Assert that the primary key is set to None after deletion\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..b1af5ae 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,3 +1,4 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n@@ -6,6 +7,8 @@ from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n+from django.db import IntegrityError\n+from django.test.utils import captured_stdout\n \n update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')\n \n@@ -140,7 +143,50 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_migrate_duplicate_permissions_handling(self):\n+        \"\"\"\n+        Test that migration handles duplicate permissions gracefully,\n+        without crashing due to IntegrityError.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        # Create potential duplicate permissions to simulate issue\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',  # Duplicate codename\n+            name='Duplicated entry for add proxy',\n+        )\n+        with self.assertRaises(IntegrityError):\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        # After the exception is raised and caught, assert anything necessary if the migration should recover from it.\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..f244c72 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -3,6 +3,29 @@ import os\n import py_compile\n import shutil\n import sys\n+class TestStatReloader(SimpleTestCase):\n+    def test_manage_py_change_detection(self):\n+        \"\"\"\n+        Ensure StatReloader detects changes in manage.py.\n+        \"\"\"\n+        # Simulate a manage.py file.\n+        manage_file = self.temporary_file('manage.py')\n+        manage_file.write_text(\"def main():\\n    pass\\n\")\n+\n+        with extend_sys_path(str(manage_file.parent)):\n+            self.import_and_cleanup('manage')\n+        \n+        # Confirm initial detection\n+        self.assertFileFound(manage_file)\n+\n+        # Modify manage.py and check it's detected\n+        manage_file.write_text(\"def main():\\n    print('sth')\\n\")\n+        self.assertFileFound(manage_file)\n+\n+        # Modify back to the original state to ensure change is detected\n+        manage_file.write_text(\"def main():\\n    pass\\n\")\n+        self.assertFileFound(manage_file)\n+\n import tempfile\n import threading\n import time\n@@ -17,7 +40,11 @@ from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n-from django.utils.autoreload import WatchmanUnavailable\n+from django.utils.autoreload import check_errors\n+from importlib import import_module\n+import shutil\n+import sys\n+import py_compile\n \n from .utils import on_macos_with_hfs\n \n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..0d12e7c 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -140,8 +140,20 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         fake_main = types.ModuleType('__main__')\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n-\n-class TestCommonRoots(SimpleTestCase):\n+    def test_path_with_embedded_null_bytes_varied_locations(self):\n+        # Test paths with embedded null bytes in different locations\n+        paths_with_null_bytes = [\n+            '\\x00leading_null.py',      # Null byte at the start\n+            'trailing_null.py\\x00',     # Null byte at the end\n+            'middle\\x00null.py',        # Null byte in the middle\n+            '/absolute/path/with\\x00null.py',  # Null byte in absolute path\n+        ]\n+        for path in paths_with_null_bytes:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..f12e699 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -8,6 +8,9 @@ import threading\n from io import StringIO\n from pathlib import Path\n from unittest import mock\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n+from django.test import Client\n \n from django.core import mail\n from django.core.files.uploadedfile import SimpleUploadedFile\n",
  "django__django-11742": "",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..13e8a5c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -251,8 +251,29 @@ class WriterTests(SimpleTestCase):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n-\n-    def test_serialize_enums(self):\n+    def test_serialize_enum_with_translation(self):\n+        from django.utils.translation import gettext_lazy as _\n+        \n+        class TranslatedEnum(enum.Enum):\n+            ALPHA = _('alpha-value')\n+            BETA = _('beta-value')\n+        \n+        field = models.CharField(\n+            default=TranslatedEnum.ALPHA,\n+            choices=[(e.value, e.name) for e in TranslatedEnum],\n+            max_length=100\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            (\n+                \"models.CharField(choices=[\"\n+                \"(\\'alpha-value\\', \\'ALPHA\\'), \"\n+                \"(\\'beta-value\\', \\'BETA\\')], \"\n+                \"default=migrations.test_writer.TranslatedEnum['ALPHA'], \"\n+                \"max_length=100)\"\n+            )\n+        )\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..e462730 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,9 +1,11 @@\n+\n import unittest\n from datetime import datetime\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n+from unittest import mock\n from django.utils.http import (\n     base36_to_int, escape_leading_slashes, http_date, int_to_base36,\n     is_safe_url, is_same_domain, parse_etags, parse_http_date, quote_etag,\n@@ -316,7 +318,22 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mocked_current_year(self, mocked_datetime):\n+        current_years = [1969, 1970, 2000, 2049, 2050]\n+        dates_to_test = [\n+            ('Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)),\n+            ('Friday, 01-Jan-70 08:49:37 GMT', datetime(1970, 1, 1, 8, 49, 37)),\n+            ('Saturday, 31-Dec-49 08:49:37 GMT', datetime(2049, 12, 31, 8, 49, 37)),\n+            ('Sunday, 01-Jan-50 08:49:37 GMT', datetime(1950, 1, 1, 8, 49, 37)),\n+        ]\n+        for current_year in current_years:\n+            mocked_datetime.side_effect = datetime\n+            mocked_datetime.utcnow = mock.Mock(return_value=datetime(current_year, 1, 1))\n+            for date_str, expected in dates_to_test:\n+                with self.subTest(date_str=date_str, current_year=current_year):\n+                    parsed = parse_http_date(date_str)\n+                    self.assertEqual(datetime.utcfromtimestamp(parsed), expected)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..cb4fc6c 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,10 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n@@ -80,7 +84,29 @@ class ChoicesTests(SimpleTestCase):\n         self.assertIn(1, Suit)\n         self.assertNotIn(0, Suit)\n \n-    def test_textchoices(self):\n+\n+    class MyChoice(models.TextChoices):\n+        FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+        SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+    class MyObject(models.Model):\n+        my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+    def test_created_object_type(self):\n+        # Create an instance of MyObject with a choice\n+        obj = self.MyObject(my_str_value=self.MyChoice.FIRST_CHOICE)\n+        # Check the type of my_str_value\n+        self.assertIsInstance(obj.my_str_value, str)\n+        self.assertEqual(obj.my_str_value, \"first\")\n+\n+    def test_retrieved_object_type(self):\n+        # Simulate saving and retrieving the object\n+        obj = self.MyObject(my_str_value=self.MyChoice.SECOND_CHOICE)\n+        obj.save()\n+        retrieved_obj = self.MyObject.objects.get(pk=obj.pk)\n+        # Check the type of my_str_value\n+        self.assertIsInstance(retrieved_obj.my_str_value, str)\n+        self.assertEqual(retrieved_obj.my_str_value, \"second\")\n         self.assertEqual(YearInSchool.choices, [\n             ('FR', 'Freshman'), ('SO', 'Sophomore'), ('JR', 'Junior'), ('SR', 'Senior'), ('GR', 'Graduate'),\n         ])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..50fb006 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,8 +148,21 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.db import models\n+from django.test import TestCase\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..5184bb0 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -148,7 +149,34 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+from django.test import TestCase\n+\n+class InheritedChoicesFieldDisplayTest(TestCase):\n+\n+    def test_overriding_inherited_FIELD_display(self):\n+        class BaseModel(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(BaseModel):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')])\n+\n+        # Test existing choices in the base model are overridden\n+        self.assertEqual(ChildModel(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(ChildModel(foo='B').get_foo_display(), 'Child B')\n+        \n+        # Test new choice added in the child model\n+        self.assertEqual(ChildModel(foo='C').get_foo_display(), 'Child C')\n+        \n+        # Test case where the value isn't in the choices\n+        child_instance_with_d = ChildModel(foo='D')\n+        self.assertEqual(child_instance_with_d.get_foo_display(), 'D')\n+\n+        # Test empty or None value handling\n+        self.assertIsNone(ChildModel(foo=None).get_foo_display())\n+        self.assertEqual(ChildModel(foo='').get_foo_display(), '')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..671fa08 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,6 +76,29 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_valid_variant_consistent_language_settings(self):\n+        tests = [\n+            # language + region.\n+            'fr-CA',\n+            'es-419',\n+            'de-at',\n+            # language + region + variant.\n+            'ca-ES-valencia',\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    @override_settings(USE_I18N=True, LANGUAGES=[('en', 'English')])\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..ec65667 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +6,8 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TransactionTestCase\n+from ..models import Object, ObjectReference, Author, RawData\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..1d56b6b 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -128,6 +128,41 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_recursive_relationship_no_symmetrical_argument(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('self', through='RecursiveRelationship')\n+\n+        class RecursiveRelationship(models.Model):\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        errors = field.check(from_model=Group)\n+\n+        # Expect no errors about symmetrical=False being required, as it isn't since Django 3.0\n+        self.assertNotIn('symmetrical=False', str(errors))\n+\n+    def test_correct_hint_for_recursive_relationship(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        errors = field.check(from_model=Group)\n+\n+        # Check that the hint uses ManyToManyField and not ForeignKey\n+        self.assertIn('ManyToManyField(\"self\", through=\"AmbiguousRelationship\")', str(errors))\n+\n     def test_ambiguous_relationship_model(self):\n \n         class Person(models.Model):\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..6852278 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,7 +1249,47 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n-    def test_request_meta_filtering(self):\n+    def test_cleanse_setting_recurses_in_list_tuples_sets(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+                'allowed_ips': {'192.168.1.1', '192.168.2.1'}\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+                'allowed_ips': reporter_filter.cleansed_substitute\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+        # Ensure sets within settings are also handled\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', {'allowed_ips': {'192.168.1.1', '192.168.2.1'}}),\n+            {'allowed_ips': reporter_filter.cleansed_substitute},\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..2321195 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,29 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_with_unique_together(self):\n+        app_label = 'test_alter_index_together_with_unique_together'\n+        table_name = '%s_pony' % app_label\n+        # Setup initial state with unique_together and index_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together, but keep unique together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12747": "",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..564bc51 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,50 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..170260b 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,13 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Edge cases for testing leading/trailing dashes and underscores removal\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('--leading-dashes--', 'leading-dashes', False),\n+            ('__leading-underscores__', 'leading-underscores', False),\n+            ('--mixed--__leading__', 'mixed--leading', False),\n+            ('__preserve-inner--dashes__', 'preserve-inner--dashes', False),\n+            ('_ combination - of __ dashes _', 'combination-of--dashes', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..948ca9a 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2829,8 +2829,77 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+@isolate_apps('model_forms')\n+class ForeignKeyLimitChoicesTests(TestCase):\n+    \n+    def setUp(self):\n+        self.marley = Character.objects.create(username='Marley', last_action=timezone.now())\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action=timezone.now())\n+\n+    def test_foreignkey_limit_choices_no_duplicates(self):\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n \n-class FormFieldCallbackTests(SimpleTestCase):\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..6d06b73 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -9,8 +9,41 @@ from django.test import SimpleTestCase\n from django.test.utils import isolate_apps\n \n \n+from django.db.models import IntegerField\n+\n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+\n+    def test_abstract_inherited_fields_equality(self):\n+        \"\"\"Field instances from abstract models should not be equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Hash comparison\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+        # Less than comparison\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +380,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..1397b81 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,6 +45,24 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n+    def test_app_list_contains_model_class(self):\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n+\n+        # Check if the Article model is present\n+        admin_views = apps[0]\n+        article = admin_views['models'][0]\n+        self.assertEqual(article['object_name'], 'Article')\n+        # New test to check that the model class is included\n+        self.assertEqual(article['model'], Article)\n+\n+        # Check if User model is present in auth app\n+        auth = apps[1]\n+        user = auth['models'][0]\n+        self.assertEqual(user['object_name'], 'User')\n+        # New test to check that the model class is included\n+        self.assertEqual(user['model'], User)\n+\n     def test_available_apps(self):\n         ctx = self.ctx\n         apps = ctx['available_apps']\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..1313ac9 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -36,8 +38,45 @@ class TokenGeneratorTest(TestCase):\n         tk1 = p0.make_token(user)\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n+    \n+    def test_token_with_different_email_custom_user(self):\n+        \"\"\"Updating a CustomUser's email address invalidates the token.\"\"\"\n+        user_model = CustomEmailField\n+        user = user_model.objects.create_user(\n+            'changeemailuser', \n+            'test4@example.com', \n+            'testpw'\n+        )\n+        token_generator = PasswordResetTokenGenerator()\n+        token = token_generator.make_token(user)\n+        # Ensure token is valid before changing email\n+        self.assertTrue(token_generator.check_token(user, token))\n+        \n+        # Change the email address\n+        user.email = 'newtest4@example.com'\n+        user.save()\n+        \n+        # Ensure token is invalid after changing email\n+        self.assertFalse(token_generator.check_token(user, token))\n \n-    def test_timeout(self):\n+    def test_token_with_different_email_standard_user(self):\n+        \"\"\"Updating a standard User's email address invalidates the token.\"\"\"\n+        user = User.objects.create_user(\n+            'standardemailuser', \n+            'test5@example.com', \n+            'testpw'\n+        )\n+        token_generator = PasswordResetTokenGenerator()\n+        token = token_generator.make_token(user)\n+        # Ensure token is valid before changing email\n+        self.assertTrue(token_generator.check_token(user, token))\n+        \n+        # Change the email address\n+        user.email = 'newtest5@example.com'\n+        user.save()\n+        \n+        # Ensure token is invalid after changing email\n+        self.assertFalse(token_generator.check_token(user, token))\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..b4b7da3 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -7,6 +8,7 @@ from decimal import Decimal\n from unittest import mock\n \n from django.core.exceptions import FieldError\n+from collections import namedtuple\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n@@ -875,6 +877,27 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'],\n             ordered=False\n         )\n+\n+    def test_range_lookup_namedtuple_different_fields(self):\n+        AgeRange = namedtuple('AgeRange', ['start_age', 'end_age'])\n+        qs = Company.objects.filter(\n+            num_employees__range=AgeRange(start_age=51, end_age=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_with_identical_values(self):\n+        SalaryRange = namedtuple('SalaryRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=SalaryRange(minimum=99, maximum=99),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_with_full_range(self):\n+        FullRange = namedtuple('FullRange', ['min', 'max'])\n+        qs = Company.objects.filter(\n+            num_employees__range=FullRange(min=0, max=300),\n+        )\n+        self.assertIn(self.c5, qs)\n         self.assertQuerysetEqual(\n             Company.objects.filter(num_employees__range=(1, 100)),\n             [\n@@ -884,6 +907,27 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple_different_fields(self):\n+        AgeRange = namedtuple('AgeRange', ['start_age', 'end_age'])\n+        qs = Company.objects.filter(\n+            num_employees__range=AgeRange(start_age=51, end_age=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_with_identical_values(self):\n+        SalaryRange = namedtuple('SalaryRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=SalaryRange(minimum=99, maximum=99),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_with_full_range(self):\n+        FullRange = namedtuple('FullRange', ['min', 'max'])\n+        qs = Company.objects.filter(\n+            num_employees__range=FullRange(min=0, max=300),\n+        )\n+        self.assertIn(self.c5, qs)\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..a6eff38 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,7 +19,8 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n-from django.core.management.commands.loaddata import Command as LoaddataCommand\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n@@ -1867,7 +1868,29 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_custom_argv(self):\n+        \"\"\"\n+        Program name should be computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv, even when it is None or non-standard.\n+        \"\"\"\n+        args_custom_prog_name = ['my_custom_program', 'migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None, 'fake'] + args_custom_prog_name):\n+                execute_from_command_line(args_custom_prog_name)\n+        self.assertIn('usage: my_custom_program migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main_as_prog_name(self):\n+        \"\"\"\n+        Test when the program name is '__main__.py'.\n+        \"\"\"\n+        args_main_prog_name = ['__main__.py', 'runserver']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None, 'fake'] + args_main_prog_name):\n+                execute_from_command_line(args_main_prog_name)\n+        self.assertIn('usage: python -m django runserver', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..65e882d 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -21,7 +22,47 @@ class ShellCommandTestCase(SimpleTestCase):\n             )\n         self.assertEqual(cm.records[0].getMessage(), __version__)\n \n-    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch('django.core.management.commands.shell.select')\n     def test_stdin_read(self, select):\n         with captured_stdin() as stdin, captured_stdout() as stdout:\n@@ -49,4 +90,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..2bef8cd 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -966,8 +966,23 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n+    def test_inline_defaults(self):\n+        class DefaultInline(TabularInline):\n+            model = Profile\n+            verbose_name = \"Profile Entry\"\n \n-    def test_verbose_name_plural_inline(self):\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [DefaultInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Check if verbose_name_plural defaults to \"Profile Entries\" inferred from verbose_name\n+        self.assertContains(response, '<h2>Profile Entrys</h2>')\n+        self.assertContains(response, 'Add another Profile Entry')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name_plural = 'Non-verbose childs'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..25494e7 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -582,20 +582,54 @@ class TestQuerying(TestCase):\n \n     def test_isnull_key(self):\n         # key__isnull=False works the same as has_key='key'.\n+        # Testing __isnull=True on SQLite and Oracle should not match JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # Ensure it does not match objects with 'j' key having JSON null\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n             self.objs[:3] + self.objs[5:],\n         )\n+        # Testing __isnull=True on SQLite and Oracle should not match JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # Ensure it does not match objects with 'j' key having JSON null\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=False),\n             [self.objs[3], self.objs[4]],\n         )\n+        # Testing __isnull=True on SQLite and Oracle should not match JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # Ensure it does not match objects with 'j' key having JSON null\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n         )\n \n-    def test_isnull_key_or_none(self):\n+    def test_isnull_on_sqlite_oracle(self):\n+        # This test ensures that using __isnull=True does not match JSON null values on SQLite and Oracle\n+        # Testing __isnull=True on SQLite and Oracle should not match JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # Ensure it does not match objects with 'j' key having JSON null\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # Should only match objects where 'j' key is missing, not JSON null\n+        )\n+        # Testing __isnull=True on SQLite and Oracle should not match JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # Ensure it does not match objects with 'j' key having JSON null\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=False),\n+            [self.objs[4]],  # Should match object where 'j' is present\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..cb76ec5 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -172,6 +172,37 @@ class DispatcherTests(SimpleTestCase):\n         self.assertTrue(hasattr(err, '__traceback__'))\n         self.assertIsInstance(err.__traceback__, TracebackType)\n         a_signal.disconnect(fails)\n+\n+    def test_send_robust_logs_exceptions(self):\n+        import logging\n+        from django.dispatch import Signal\n+        from traceback import TracebackType\n+        from unittest import TestCase\n+\n+        class DispatcherTests(TestCase):\n+            def setUp(self):\n+                self.signal = Signal()\n+\n+            def fails(self, **kwargs):\n+                raise ValueError('this')\n+\n+            def test_send_robust_logs(self):\n+                self.signal.connect(self.fails)\n+                with self.assertLogs('django.dispatch', 'ERROR') as cm:\n+                    result = self.signal.send_robust(sender=self)\n+                err = result[0][1]\n+                self.assertIsInstance(err, ValueError)\n+                self.assertEqual(str(err), 'this')\n+\n+                self.assertEqual(len(cm.records), 1)\n+                log_record = cm.records[0]\n+                self.assertEqual(\n+                    log_record.getMessage(),\n+                    \"Error calling fails in Signal.send_robust() (this)\"\n+                )\n+                self.assertIsNotNone(log_record.exc_info)\n+                self.assertIsInstance(log_record.exc_info[1], ValueError)\n+                self.signal.disconnect(self.fails)\n         self.assertTestIsClean(a_signal)\n \n     def test_disconnection(self):\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..11576a6 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,9 +281,17 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n+        # Test the fix for displaying the invalid value in the error message\n+        e_with_value = {\n+            'invalid_choice': 'Select a valid choice. \"%(value)s\" is not one of the available choices.',\n+        }\n+        f = ModelChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e_with_value)\n+        self.assertFormErrors(['Select a valid choice. \"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +315,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..d7d0cf9 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -794,6 +794,22 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n+    def test_q_and_exists_commutativity(self):\n+        # Test combinations of Q() and Exists() for commutative behavior\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        tests = [\n+            (Q(salary__gte=30) & Exists(is_ceo), [self.max]),\n+            (Exists(is_ceo) & Q(salary__gte=30), [self.max]),\n+            (Q(salary__lt=15) | Exists(is_poc), [self.example_inc.ceo, self.max]),\n+            (Exists(is_poc) | Q(salary__lt=15), [self.example_inc.ceo, self.max])\n+        ]\n+\n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n+\n     def test_boolean_expression_combined(self):\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..073eaff 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1127,8 +1127,22 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[0], func)\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n-\n-    def test_resolver_match_on_request(self):\n+    \n+    def test_repr_functools_partial(self):\n+        # Test cases for functools.partial to ensure meaningful reprs\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                wrapped_func = functools.partial(views.empty_view, template_name=template_name)\n+                self.assertEqual(\n+                    repr(resolve(f'/{name}/')),\n+                    f\"ResolverMatch(func=functools.partial({views.empty_view!r}, template_name='{template_name}'), args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], route='{name}/')\",\n+                )\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n@@ -1146,6 +1160,10 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import resolve\n+from . import views\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..be1c293 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test.utils import isolate_apps, override_settings\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -6,7 +8,25 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_options')\n class TestDefaultPK(SimpleTestCase):\n-    @override_settings(DEFAULT_AUTO_FIELD='django.db.models.NonexistentAutoField')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     def test_default_auto_field_setting_nonexistent(self):\n         msg = (\n             \"DEFAULT_AUTO_FIELD refers to the module \"\n",
  "django__django-14382": "",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..8f87e7a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -7,6 +7,7 @@ from django.contrib.auth.forms import (\n     PasswordResetForm, ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget,\n     SetPasswordForm, UserChangeForm, UserCreationForm,\n )\n+from django.forms import forms\n from django.contrib.auth.models import User\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n@@ -1020,6 +1021,20 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_label_for_readonly_password_hash_widget(self):\n+        \"\"\"\n+        Test that label for ReadOnlyPasswordHashWidget doesn't contain a 'for' attribute\n+        since there's no labelable element.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        # Asserts that id_for_label returns None because there is no input element\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        # Ensure the label tag does not have a 'for' attribute\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..0cd3cbd 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,14 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertEqual(\n+            formset.non_form_errors(),\n+            ['Please submit at most 1 form.'],\n+            \"The non_form_errors should include 'Please submit at most 1 form.'\"\n+        )\n+        # Check if the error list is rendered with 'nonform' CSS class\n+        expected_html = '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        self.assertEqual(str(formset.non_form_errors()), expected_html)\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +365,14 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(\n+            formset.non_form_errors(),\n+            ['Please submit at least 3 forms.'],\n+            \"The non_form_errors should include 'Please submit at least 3 forms.'\"\n+        )\n+        # Check if the error list is rendered with 'nonform' CSS class\n+        expected_html = '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        self.assertEqual(str(formset.non_form_errors()), expected_html)\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +996,14 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            formset.non_form_errors(),\n+            ['You may only specify a drink once.'],\n+            \"The non_form_errors should include 'You may only specify a drink once.'\"\n+        )\n+        # Check if the error list is rendered with 'nonform' CSS class\n+        expected_html = \"<ul class=\\\"errorlist nonform\\\"><li>You may only specify a drink once.</li></ul>\"\n+        self.assertEqual(str(formset.non_form_errors()), expected_html)\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..a776bb4 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -9,6 +9,8 @@ from .models import (\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n     Relationship, SymmetricalFriendship,\n )\n+from django.test import TestCase, skipIfDBFeature\n+from .models import Event, Invitation, Person, PersonChild\n \n \n class M2mThroughTests(TestCase):\n@@ -19,8 +21,11 @@ class M2mThroughTests(TestCase):\n         cls.jane = Person.objects.create(name='Jane')\n         cls.rock = Group.objects.create(name='Rock')\n         cls.roll = Group.objects.create(name='Roll')\n-\n-    def test_retrieve_intermediate_items(self):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        # Hash should be possible without error \n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n         Membership.objects.create(person=self.jim, group=self.rock)\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..baeab5d 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -287,6 +287,27 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         with model_admin(Question, PKOrderingQuestionAdmin):\n             response = AutocompleteJsonView.as_view(**self.as_view_args)(request)\n         self.assertEqual(response.status_code, 200)\n+\n+    def test_serialize_result_override(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {**super().serialize_result(obj, to_field_name), 'notes': obj.notes}\n+\n+        Question.objects.create(question='Question 1', notes='Note 1', posted=datetime.date(2023, 10, 21))\n+        Question.objects.create(question='Question 2', notes='Note 2', posted=datetime.date(2023, 10, 22))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'notes': q.notes}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n         data = json.loads(response.content.decode('utf-8'))\n         self.assertEqual(data, {\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[PAGINATOR_SIZE:]],\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..55cbd0c 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -425,8 +425,72 @@ class MethodDecoratorTests(SimpleTestCase):\n                 def __module__(cls):\n                     return \"tests\"\n \n+from functools import partial\n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+class MethodDecoratorTests(TestCase):\n+    def test_wrapper_assignments_preserve_attributes(self):\n+        \"\"\"\n+        Test that @method_decorator preserves function attributes like __name__, __doc__.\n+        \"\"\"\n+        func_name, func_module, func_doc = None, None, None\n+\n+        def test_decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module, func_doc\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                func_doc = getattr(func, '__doc__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(test_decorator)\n+            def sample_method(self):\n+                \"\"\"Sample method documentation.\"\"\"\n+                return \"Test output\"\n+\n+        test_instance = Test()\n+        result = test_instance.sample_method()\n+        \n+        self.assertEqual(result, \"Test output\")\n+        self.assertEqual(func_name, 'sample_method')\n+        self.assertIsNotNone(func_module)\n+        self.assertEqual(func_doc, \"Sample method documentation.\")\n+\n+    def test_decorator_with_partial(self):\n+        \"\"\"\n+        Test @method_decorator handles functools.partial with attribute preservation.\n+        \"\"\"\n+        func_name, func_module = None, None\n+\n+        def base_function(arg1, arg2):\n+            \"\"\"Base function docstring.\"\"\"\n+            return arg1 + arg2\n+\n+        partial_function = partial(base_function, arg2=10)\n+\n+        def test_decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(test_decorator)\n+            def compute(self, arg1):\n+                result = partial_function(arg1)\n+                return result\n+\n+        test_instance = Test()\n+        result = test_instance.compute(5)\n+\n+        self.assertEqual(result, 15)  # 5 + 10 from partial\n+        self.assertEqual(func_name, 'compute')\n+        self.assertIsNotNone(func_module)\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..063bdd4 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -135,25 +135,21 @@ class MultiValueFieldTest(SimpleTestCase):\n     def test_disabled_has_changed(self):\n         f = MultiValueField(fields=(CharField(), CharField()), disabled=True)\n         self.assertIs(f.has_changed(['x', 'x'], ['y', 'y']), False)\n+    def test_multivaluewidget_label_without_index(self):\n+        # New test to check that MultiWidget's labels do not contain index in \"for\" attribute\n+        class TestForm(Form):\n+            datetime = SplitDateTimeField()\n \n-    def test_form_as_table(self):\n-        form = ComplexFieldForm()\n+        form = TestForm()\n         self.assertHTMLEqual(\n             form.as_table(),\n             \"\"\"\n-            <tr><th><label for=\"id_field1_0\">Field1:</label></th>\n-            <td><input type=\"text\" name=\"field1_0\" id=\"id_field1_0\" required>\n-            <select multiple name=\"field1_1\" id=\"id_field1_1\" required>\n-            <option value=\"J\">John</option>\n-            <option value=\"P\">Paul</option>\n-            <option value=\"G\">George</option>\n-            <option value=\"R\">Ringo</option>\n-            </select>\n-            <input type=\"text\" name=\"field1_2_0\" id=\"id_field1_2_0\" required>\n-            <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n-            \"\"\",\n+            <tr><th><label for=\"id_datetime\">Datetime:</label></th><td>\n+            <input type=\"text\" name=\"datetime_0\" required id=\"id_datetime_0\">\n+            <input type=\"text\" name=\"datetime_1\" required id=\"id_datetime_1\">\n+            </td></tr>\n+            \"\"\"\n         )\n-\n     def test_form_as_table_data(self):\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n",
  "django__django-15202": "",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..d01d528 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -11,7 +11,7 @@ from django.db.models.expressions import RawSQL\n from django.db.models.functions import (\n     Coalesce, ExtractYear, Floor, Length, Lower, Trim,\n )\n-from django.test import TestCase, skipUnlessDBFeature\n+from django.test import TestCase, skipUnlessDBFeature, TransactionTestCase\n from django.test.utils import register_lookup\n \n from .models import (\n@@ -197,7 +197,25 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n-    def test_empty_expression_annotation(self):\n+    def test_expressionwrapper_negated_empty_q(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_expressionwrapper_negated_empty_q_with_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    def test_aggregate_over_expressionwrapper_negated_empty_q(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n         )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..213f024 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -143,7 +144,25 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_extra_tags_preserved(self):\n+        \"\"\"\n+        Test that extra_tags are preserved correctly for empty string, None, and other non-empty strings\n+        during encoding and decoding.\n+        \"\"\"\n+        storage = self.get_storage()\n+        \n+        test_cases = [\n+            {\"extra_tags\": \"\", \"expected_result\": \"\"},\n+            {\"extra_tags\": None, \"expected_result\": None},\n+            {\"extra_tags\": \"some tags\", \"expected_result\": \"some tags\"},\n+        ]\n+        \n+        for case in test_cases:\n+            with self.subTest(extra_tags=case[\"extra_tags\"]):\n+                message = Message(constants.INFO, \"Test message\", extra_tags=case[\"extra_tags\"])\n+                encoded_message = storage._encode(message)\n+                decoded_message = storage._decode(encoded_message)\n+                self.assertEqual(decoded_message.extra_tags, case[\"expected_result\"])\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "",
  "django__django-15400": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\nindex f0097c4..a9e6b42 100644\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -297,6 +297,41 @@ class LazyObjectTestCase(TestCase):\n         self.assertIs(obj._wrapped, empty)\n         self.assertIs(obj2._wrapped, empty)\n \n+    def test_add(self):\n+        obj1 = self.lazy_wrap(1)\n+        self.assertEqual(obj1 + 1, 2)\n+        obj2 = self.lazy_wrap(2)\n+        self.assertEqual(obj2 + obj1, 3)\n+        self.assertEqual(obj1 + obj2, 3)\n+\n+    def test_radd(self):\n+        obj1 = self.lazy_wrap(1)\n+        self.assertEqual(1 + obj1, 2)\n+\n+    def test_chained_addition(self):\n+        obj1 = self.lazy_wrap(1)\n+        obj2 = self.lazy_wrap(2)\n+        self.assertEqual(obj1 + obj2 + 3, 6)\n+        self.assertEqual(3 + obj1 + obj2, 6)\n+\n+    def test_addition_with_different_types(self):\n+        obj_string = self.lazy_wrap(\" world\")\n+        self.assertEqual(\"Hello\" + obj_string, \"Hello world\")\n+\n+    def test_addition_with_zero(self):\n+        obj1 = self.lazy_wrap(0)\n+        self.assertEqual(obj1 + 0, 0)\n+        self.assertEqual(0 + obj1, 0)\n+\n+    def test_addition_with_negative_numbers(self):\n+        obj_negative = self.lazy_wrap(-5)\n+        self.assertEqual(obj_negative + 5, 0)\n+        self.assertEqual(10 + obj_negative, 5)\n+\n+    def test_radd_with_complex_number(self):\n+        obj_complex = self.lazy_wrap(complex(2, 3))\n+        self.assertEqual(complex(1, 1) + obj_complex, complex(3, 4))\n+\n \n class SimpleLazyObjectTestCase(LazyObjectTestCase):\n     # By inheriting from LazyObjectTestCase and redefining the lazy_wrap()\n",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..c098494 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -8,6 +9,7 @@ from django.core.exceptions import ImproperlyConfigured\n from django.http import FileResponse, HttpResponseNotModified\n from django.test import SimpleTestCase, override_settings\n from django.utils.http import http_date\n+from django.utils.http import parse_http_date_safe\n from django.views.static import was_modified_since\n \n from .. import urls\n@@ -184,7 +186,37 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Ensure that an empty 'If-Modified-Since' header is handled gracefully without raising an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_none_header(self):\n+        \"\"\"\n+        Ensure that a None 'If-Modified-Since' header is handled correctly.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=None, mtime=1))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Ensure that an invalid date string in 'If-Modified-Since' header is handled correctly.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"Invalid-Date\", mtime=1))\n+\n+    def test_was_modified_since_future_date(self):\n+        \"\"\"\n+        Ensure that a future date in the 'If-Modified-Since' header indicates no modification.\n+        \"\"\"\n+        future_date = http_date(9999999999)\n+        self.assertFalse(was_modified_since(future_date, mtime=1))\n+\n+    def test_was_modified_since_past_date(self):\n+        \"\"\"\n+        Ensure that a past date in the 'If-Modified-Since' header indicates modification.\n+        \"\"\"\n+        past_date = http_date(parse_http_date_safe(\"Mon, 28 Jul 2014 19:43:31 GMT\"))\n+        self.assertTrue(was_modified_since(past_date, mtime=9999999999))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..1c196cf 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,7 +1,9 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n \n+from argparse import ArgumentDefaultsHelpFormatter\n from admin_scripts.tests import AdminScriptTestCase\n \n from django.apps import apps\n@@ -411,7 +413,42 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_formatter_command_help_output(self):\n+        \"\"\"\n+        Test that the command help outputs correctly with custom formatting.\n+        \"\"\"\n+        class CustomCommand(BaseCommand):\n+            help = '''\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+            '''\n+            def add_arguments(self, parser):\n+                parser.add_argument('blockchain', help='Name of the blockchain to import into')\n+                parser.add_argument('target', help='Id of the contract to import')\n+        \n+        out = StringIO()\n+        command = CustomCommand()\n+        parser = command.create_parser('manage.py', 'tzkt_import', formatter_class=ArgumentDefaultsHelpFormatter)\n+        command.print_help(out, parser=parser)\n+        output = out.getvalue()\n+\n+        expected_output = \"\"\"\n+usage: manage.py tzkt_import [-h] [--version] [-v {0,1,2,3}] [--settings SETTINGS]\n+                             [--pythonpath PYTHONPATH] [--traceback] [--no-color]\n+                             [--force-color] [--skip-checks]\n+                             blockchain target\n+\n+Import a contract from tzkt.\n+            \n+Example usage:\n+    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+        \n+positional arguments:\n+  blockchain           Name of the blockchain to import into\n+  target               Id of the contract to import\n+\"\"\"\n+        self.assertEqual(output.strip(), expected_output.strip())\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..311d312 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,5 +1,8 @@\n+\n import os\n from datetime import datetime\n+import json\n+from django.core.serializers.json import DjangoJSONEncoder\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n@@ -211,7 +214,31 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_with_custom_encoder_and_id(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"test_key\": \"test_value\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, element_id=\"custom_id\", encoder=CustomDjangoJSONEncoder),\n+            '<script id=\"custom_id\" type=\"application/json\">{\"test_key\": \"test_value\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..00446ed 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -108,6 +108,16 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n     @classmethod\n     def setUpClass(cls):\n         super().setUpClass()\n+        cls.error_different_libraries_same_name = Error(\n+            E003.msg.format(\n+                \"'new_tags'\",\n+                \"'check_framework.template_test_apps.different_tags_app.\"\n+                \"templatetags.new_tags', \"\n+                \"'check_framework.template_test_apps.same_tags_app_1.\"\n+                \"templatetags.new_tags'\",\n+            ),\n+            id=E003.id,\n+        )\n         cls.error_same_tags = Error(\n             E003.msg.format(\n                 \"'same_tags'\",\n@@ -129,7 +139,7 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 },\n             },\n         }\n-\n+    \n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -157,7 +167,7 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 check_for_template_tags_with_the_same_name(None),\n                 [self.error_same_tags],\n             )\n-\n+    \n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n     )\n@@ -198,7 +208,7 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             ]\n         ):\n             self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n-\n+    \n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -206,4 +216,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..dc65fdc 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,20 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_on_proxy_model(self):\n+        # Create instances of models\n+        custom = ProxyCustomModel.objects.create(name=\"John Doe\")\n+        another_model = AnotherModel.objects.create(custom=custom)\n+\n+        # Query using select_related() and only() on proxy field\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        \n+        # Retrieve the instance to test if no exception is raised\n+        retrieved_instance = qs.get(pk=another_model.pk)\n+        \n+        # Test if the related name is correctly retrieved through the proxy model\n+        self.assertEqual(retrieved_instance.custom.name, \"John Doe\")\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..d3a20cf 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,6 +152,11 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        # Test with parameters before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +188,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..260c9b4 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1902,11 +1902,41 @@ class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n \n-        with isolate_lru_cache(get_default_renderer), self.settings(\n-            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n-        ), self.assertRaisesMessage(\n-            RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n-        ):\n-            ChoiceFormSet = formset_factory(Choice)\n-            formset = ChoiceFormSet()\n-            str(formset)\n+        import unittest\n+        from django.forms import formset_factory, BaseFormSet\n+        from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.test import SimpleTestCase\n+        from django.core.exceptions import RemovedInDjango50Warning\n+        from django.forms.renderers import get_default_renderer\n+        from django.utils.lru_cache import lru_cache, isolate_lru_cache\n+\n+        class FormsetDeprecationWarningTests(SimpleTestCase):\n+            def test_no_management_form_warning(self):\n+                \"\"\"\n+                Ensure no deprecation warning is raised for management forms.\n+                \"\"\"\n+                with isolate_lru_cache(get_default_renderer), self.settings(\n+                    FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+                ):\n+                    ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                    formset = ChoiceFormSet()\n+                    # Confirm that rendering the management form does not raise a warning\n+                    str(formset.management_form)\n+\n+            def test_form_deprecation_warning(self):\n+                \"\"\"\n+                Ensure that using the old template raises a deprecation warning.\n+                \"\"\"\n+                with isolate_lru_cache(get_default_renderer), self.settings(\n+                    FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+                ), self.assertRaisesMessage(\n+                    RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n+                ):\n+                    ChoiceFormSet = formset_factory(Choice)\n+                    formset = ChoiceFormSet()\n+                    # Trigger rendering of the formset to check for warnings\n+                    str(formset)\n+\n+        # The original assertion case is also included in the new class.\n+        if __name__ == \"__main__\":\n+            unittest.main()\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..39c05d8 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,13 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        formset_true = formset_factory(CustomKwargForm)(form_kwargs={\"empty_permitted\": True})\n+        formset_false = formset_factory(CustomKwargForm)(form_kwargs={\"empty_permitted\": False})\n+        # Check that no exceptions are raised and empty_form is usable\n+        self.assertTrue(hasattr(formset_true.empty_form, \"empty_permitted\"))\n+        self.assertTrue(hasattr(formset_false.empty_form, \"empty_permitted\"))\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..81d5e6e 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,6 +161,12 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n+    def test_null_cases(self):\n+        # Testing behavior with an empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        # Testing behavior with None\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n     def test_decimal_subclass(self):\n         class EuroDecimal(Decimal):\n             \"\"\"\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..9336e2b 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,9 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+import urllib.parse\n+from django.urls import reverse\n+...\n \n from .models.custom_user import (\n     CustomUser,\n@@ -881,7 +884,45 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    # Additional test to check behavior without to_field\n+    def test_link_to_password_reset_without_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text.format(f\"../{user.pk}/password/\")\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via pk.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..82661d9 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,33 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTests(TestCase):\n+    def setUp(self):\n+        self.client = Client()\n+\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/callable-lastmod-no-items/sitemap.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_get_latest_lastmod_no_items(self):\n+        sitemap = CallableLastmodNoItemsSitemap()\n+        self.assertIsNone(sitemap.get_latest_lastmod())\n+\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..d63513a 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,9 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock, TestCase\n+from django.core.cache import caches\n import io\n import os\n import pickle\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..6e26de0 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,10 +1,13 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n+from django.contrib.auth import get_permission_codename\n from django.contrib.auth.models import User\n+from .tests import get_perm\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..acfdee8 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -22,6 +23,15 @@ class JoinTests(SimpleTestCase):\n         self.assertEqual(output, \"alpha &amp; beta &amp; me\")\n \n     @setup({\"join04\": '{% autoescape off %}{{ a|join:\" &amp; \" }}{% endautoescape %}'})\n+\n+    # Test case for verifying issue related to unescaped joiner with autoescape off\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off\", {\"some_list\": some_list, \"some_var\": some_var})\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n     def test_join04(self):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n@@ -78,4 +88,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..3deaa35 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -727,8 +727,36 @@ class BulkCreateTests(TestCase):\n     @skipIfDBFeature(\"supports_update_conflicts_with_target\")\n     def test_update_conflicts_unique_two_fields_unique_no_unique_fields(self):\n         self._test_update_conflicts_unique_two_fields([])\n+    @skipUnlessDBFeature(\"supports_update_conflicts\", \"can_return_rows_from_bulk_insert\")\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        TwoFields.objects.bulk_create(\n+            [\n+                TwoFields(f1=1, f2=1, name=\"a\"),\n+                TwoFields(f1=2, f2=2, name=\"b\"),\n+            ]\n+        )\n+        self.assertEqual(TwoFields.objects.count(), 2)\n \n-    def _test_update_conflicts(self, unique_fields):\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"c\"),\n+            TwoFields(f1=2, f2=2, name=\"d\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"f1\", \"f2\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(len(results), 2)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        self.assertCountEqual(\n+            TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n+            [\n+                {\"f1\": 1, \"f2\": 1, \"name\": \"c\"},\n+                {\"f1\": 2, \"f2\": 2, \"name\": \"d\"},\n+            ],\n+        )\n         UpsertConflict.objects.bulk_create(\n             [\n                 UpsertConflict(number=1, rank=1, name=\"John\"),\n@@ -816,4 +844,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..2e1b120 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,30 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import pytest\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n+def test_backend_does_not_clear_figures():\n+    # Test that calling get_backend() does not clear figures when they are created inside rc_context.\n+    \n+    # Create a figure within rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+\n+    # Capture the state of figure managers before calling get_backend()\n+    before_backend_call = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    # Call get_backend which was causing the problem\n+    get_backend()\n+    \n+    # Capture the state of figure managers after calling get_backend()\n+    after_backend_call = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    # Assert that the state of Gcf.figs has not been affected\n+    assert before_backend_call == after_backend_call, '\\nState before get_backend:\\n' + before_backend_call + '\\nState after get_backend:\\n' + after_backend_call\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..e685cb6 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -28,7 +28,26 @@ def test_aspect_equal_error():\n         ax.set_aspect('equal')\n \n \n-@mpl3d_image_comparison(['bar3d.png'])\n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_3d_axes(fig_test, fig_ref):\n+    # Test to verify set_visible(False) works on 3D projection\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.scatter(1, 1, 1)\n+    # The `ax_ref` remains visible for comparison.\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_visible_3d_axes(fig_test, fig_ref):\n+    # Test to ensure ax remains visible when visible is set to True\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(True)\n+\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.scatter(1, 1, 1)  # References default to visible state for comparison\n def test_bar3d():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..c790314 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,7 +774,16 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n-def test_get_set_draggable():\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable_initialization(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='sample')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable  # Check if initialized correctly\n+\n+    # Also test manually setting after initialization to ensure nothing breaks\n+    leg.set_draggable(not draggable)\n+    assert leg.get_draggable() is not draggable\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..5b7c7a9 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -252,7 +252,40 @@ def test_linedash():\n \n     buf = io.BytesIO()\n     fig.savefig(buf, format=\"ps\")\n+    assert buf.tell() > 0\n+\n+def test_multiline_text_with_empty_line():\n+    # Related to the original issue, test multiline text annotations with empty lines\n+    fig = Figure()\n+\n+    # Testing with an `annotate` object, which mirrors the issue example.\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='\\nLower label\\n', xy=(0, 0))\n+\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n+\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='ps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n+\n+def test_title_with_empty_line():\n+    # Test for an empty line in the figure title\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('\\nTitle with\\nan empty line\\n')\n \n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n+\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='ps')\n+    buf.seek(0)\n     assert buf.tell() > 0\n \n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..0ef02dc 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,18 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+@pytest.mark.filterwarnings(\"error\")\n+def test_no_warning_with_constrained_layout_false():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    plt.subplots_adjust(wspace=0)\n+    # Check if no warnings are thrown\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..ce82433 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -29,8 +29,19 @@ def test_create_lookup_table(N, result):\n     data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from numpy.testing import assert_array_equal\n+import matplotlib as mpl\n \n-def test_resampled():\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_without_deprecation(dtype):\n+    # Ensure no deprecation warnings related to out-of-bound integers in uint8\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        cm(dtype(0))\n+    assert not any(item.category == DeprecationWarning for item in record)\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..5af91d2 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,6 +90,25 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+def test_draggable_legend_pickle():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 4], label='line')\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    \n+    # Test pickling\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Assert \"FigureCanvasQTAgg\" is not in the pickle stream\n+    assert \"FigureCanvasQTAgg\" not in str(pickletools.genops(pkl))\n+    loaded_fig = pickle.loads(pkl)\n+    \n+    assert loaded_fig is not None\n+    assert isinstance(loaded_fig, mpl.figure.Figure)\n+\n+    # Ensure the figure can be drawn without errors\n+    loaded_fig.canvas.draw()\n+\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..7b01c32 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,32 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n \n @mpl.style.context(\"default\")\n+@pytest.mark.parametrize(\"align_func\", [\"align_labels\", \"align_ylabels\"])\n+def test_pickle_figure_with_aligned_labels(align_func):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels and test pickling\n+    getattr(fig, align_func)()  # fig.align_labels() or fig.align_ylabels()\n+    \n+    try:\n+        pkl_data = pickle.dumps(fig)\n+        assert pkl_data is not None\n+    except Exception as e:\n+        pytest.fail(f\"Pickling failed with error: {e}\")\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..d32a45a 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,9 +9,24 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n \n+    def test_polyfit_with_missing_data(self, df):\n+        # Create a dataset with missing data\n+        df_with_missing = df.copy()\n+        df_with_missing.loc[::10, 'x'] = np.nan\n+\n+        groupby = GroupBy([\"group\"])\n+\n+        # Ensure PolyFit can handle missing data without failing\n+        res_with_missing = PolyFit()(df_with_missing[[\"x\", \"y\"]], groupby, \"x\", {})\n+        res_without_missing = PolyFit()(df_with_missing.dropna()[[\"x\", \"y\"]], groupby, \"x\", {})\n+        \n+        # Confirm that both results are the same after dropping NaN values in the original\n+        assert_frame_equal(res_with_missing.dropna(), res_without_missing)\n+\n     @pytest.fixture\n     def df(self, rng):\n \n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..8f6d7fd 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -1271,6 +1271,13 @@ class TestPairGrid:\n             count = sum(p.get_height() for p in ax.patches)\n             assert count == df[var].notna().sum()\n \n+    def test_pairplot_column_multiindex(self):\n+    \n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df = self.df[[\"x\", \"y\"]].set_axis(cols, axis=1)\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+\n     def test_histplot_legend(self):\n \n         # Tests _extract_legend_handles\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..5fed9cc 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,9 +1,11 @@\n+\n import json\n import os\n import textwrap\n \n import pytest\n \n+import tomllib\n import flask\n \n \n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..ec89035 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1655,7 +1655,45 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n-def test_vendor_aliases():\n+import pytest\n+import requests\n+from requests.exceptions import RequestException, ConnectionError\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import ProxyError\n+from requests.packages.urllib3.exceptions import DecodeError, TimeoutError\n+from httpbin import httpbin\n+\n+def test_urllib3_exceptions_wrapped():\n+    s = requests.Session()\n+    # Simulate a decode error\n+    adapter = HTTPAdapter()\n+    \n+    def mock_send(*args, **kwargs):\n+        raise DecodeError(\"Mock DecodeError\")\n+    \n+    adapter.send = mock_send\n+    s.mount('http://', adapter)\n+    \n+    with pytest.raises(RequestException) as excinfo:\n+        s.get('http://mock.url')\n+    assert isinstance(excinfo.value, RequestException)\n+    assert 'Mock DecodeError' in str(excinfo.value)\n+\n+def test_urllib3_timeout_wrapped_in_proxy_error():\n+    s = requests.Session()\n+    # Mock an adapter to simulate a TimeoutError\n+    adapter = HTTPAdapter()\n+    \n+    def mock_send(*args, **kwargs):\n+        raise TimeoutError(\"Mock TimeoutError\")\n+    \n+    adapter.send = mock_send\n+    s.mount('http://', adapter)\n+    \n+    with pytest.raises(ProxyError) as excinfo:\n+        s.get('http://mock.url')\n+    assert isinstance(excinfo.value, ProxyError)\n+    assert 'Mock TimeoutError' in str(excinfo.value)\n     from requests.packages import urllib3\n     from requests.packages import chardet\n \n@@ -1663,4 +1701,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..d3c8fd2 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -973,7 +973,13 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-        # also for streaming\n+        # additional test for application/json\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'{\"key\": \"value\"}')\n+        r.encoding = 'utf-8'\n+        r.headers['Content-Type'] = 'application/json'\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n         r = requests.Response()\n         r.raw = io.BytesIO(b'the content')\n         r.encoding = 'ascii'\n",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..5f3fbf0 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -78,13 +78,21 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n+def test_unrecognized_short_option_exits_gracefully(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that passing an unrecognized short option exits gracefully without traceback.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err\n \n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n-    \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n+def test_unrecognized_option_message(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the error message for an unrecognized option does not include a traceback.\"\"\"\n     with pytest.raises(SystemExit):\n-        Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n+        Run([str(EMPTY_MODULE), \"--someinvalidoption\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"argument --confidence: UNKNOWN_CONFIG should be in\" in output.err\n+    assert \"E0015: Unrecognized option found: someinvalidoption\" in output.out\n+    assert \"Traceback\" not in output.err\n \n \n def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..df8fe17 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1325,6 +1325,21 @@ class TestRunTC:\n             ]\n             with _test_cwd():\n                 os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n+                self._runtest(\n+                    [\".\", \"--recursive=y\", \"--ignore-paths=^ignored_subdirectory/.*\"],\n+                    code=0,\n+                )\n+\n+    def test_ignore_paths_when_recursive(self):\n+        \"\"\"Tests that ignore-paths is respected when --recursive=y is used. GitHub issue context.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n                 self._runtest(\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..f8accce 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,94 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"\n+    Test if linting succeeds with modules having identically named nested module.\n+    \n+    Files structure:\n+    .\n+    `-- identical/\n+        |-- identical.py\n+        `-- b.py\n+    \"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"identical/identical.py\", \"identical/b.py\"])\n+        linter.check([\"identical\"])\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_identically_named_nested_module_with_r(initialized_linter: PyLinter) -> None:\n+    \"\"\"\n+    Test for correct linting with additional file importing from the nested module.\n+\n+    Files structure:\n+    .\n+    |-- identical/\n+    |   |-- identical.py\n+    |   `-- b.py\n+    `-- r.py\n+\n+    where r.py contains: \n+    ```\n+    from identical import b\n+    ```\n+    \"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"identical/identical.py\", \"identical/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from identical import b\")\n+        linter.check([\"r\", \"identical\"])\n+    assert not linter.stats.by_msg\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"\n+    Test if linting succeeds with modules having identically named nested module.\n+    \n+    Files structure:\n+    .\n+    `-- identical/\n+        |-- identical.py\n+        `-- b.py\n+    \"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"identical/identical.py\", \"identical/b.py\"])\n+        linter.check([\"identical\"])\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_identically_named_nested_module_with_r(initialized_linter: PyLinter) -> None:\n+    \"\"\"\n+    Test for correct linting with additional file importing from the nested module.\n+\n+    Files structure:\n+    .\n+    |-- identical/\n+    |   |-- identical.py\n+    |   `-- b.py\n+    `-- r.py\n+\n+    where r.py contains: \n+    ```\n+    from identical import b\n+    ```\n+    \"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"identical/identical.py\", \"identical/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from identical import b\")\n+        linter.check([\"r\", \"identical\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/acceptance_test.py b/testing/acceptance_test.py\nindex 0cc5057..f2da4fa 100644\n--- a/testing/acceptance_test.py\n+++ b/testing/acceptance_test.py\n@@ -1305,6 +1305,41 @@ def test_no_brokenpipeerror_message(pytester: Pytester) -> None:\n     # Cleanup.\n     popen.stderr.close()\n \n+from typing import Iterator\n+\n+def test_doctest_and_normal_imports_with_importlib(pytester: Pytester) -> None:\n+    \"\"\"\n+    Additional regression test for module import with importlib ensuring\n+    unique instance in sys.modules.\n+    \"\"\"\n+    pytester.makepyfile(\n+        **{\n+            \"pmxbot/commands.py\": \"from . import logging\",\n+            \"pmxbot/logging.py\": \"class Logger: pass\",\n+            \"tests/__init__.py\": \"\",\n+            \"tests/test_commands.py\": \"\"\"\n+                import importlib\n+                from pmxbot import logging\n+\n+                class TestCommands:\n+                    def test_import(self):\n+                        log1 = importlib.import_module('pmxbot.logging')\n+                        log2 = logging\n+                        assert log1 is log2, \"Modules should be identical\"\n+                        assert 'pmxbot.logging' in sys.modules, \"Module should be in sys.modules\"\n+            \"\"\",\n+        }\n+    )\n+    pytester.makeini(\n+        '''\n+        [pytest]\n+        addopts=\n+            --doctest-modules\n+            --import-mode importlib\n+        '''\n+    )\n+    result = pytester.runpytest_subprocess()\n+    result.stdout.fnmatch_lines(\"*1 passed*\")\n \n def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     pytester.makepyfile(\n@@ -1314,4 +1349,4 @@ def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     \"\"\"\n     )\n     res = pytester.runpytest()\n-    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n+    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n",
  "pytest-dev__pytest-5227": "",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..4c3846a 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -144,6 +144,28 @@ def test_repr_on_newstyle():\n     assert saferepr(Function())\n \n \n+def test_repr_raises():\n+    \"\"\"Test saferepr() with an object whose __repr__ raises an exception.\"\"\"\n+\n+    class ReprRaises:\n+        def __repr__(self):\n+            raise RuntimeError(\"test __repr__\")\n+\n+    obj_repr = saferepr(ReprRaises())\n+    assert obj_repr.startswith(\"<[RuntimeError('test __repr__') raised in repr()] ReprRaises object at 0x\")\n+\n+\n+def test_getattribute_raises():\n+    \"\"\"Test saferepr() with an object whose __getattribute__ raises an exception.\"\"\"\n+\n+    class GetAttributeRaises:\n+        def __getattribute__(self, item):\n+            raise RuntimeError(\"test __getattribute__\")\n+\n+    obj_repr = saferepr(GetAttributeRaises())\n+    assert obj_repr.startswith(\"<[RuntimeError('test __getattribute__') raised in repr()] GetAttributeRaises object at 0x\")\n+\n+\n def test_unicode():\n     val = \"\u00a3\u20ac\"\n     reprval = \"'\u00a3\u20ac'\"\n@@ -153,4 +175,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..715c479 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -295,6 +295,33 @@ def test_assert_outcomes_after_pytest_error(testdir) -> None:\n     with pytest.raises(ValueError, match=\"Pytest terminal summary report not found\"):\n         result.assert_outcomes(passed=0)\n \n+def test_failure_with_changed_cwd(testdir) -> None:\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    # We expect pytest to report the failure with an absolute path.\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n \n def test_cwd_snapshot(testdir: Testdir) -> None:\n     tmpdir = testdir.tmpdir\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..08a877f 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+import os\n from unittest import mock\n \n import pytest\n@@ -707,6 +708,79 @@ class TestFunctional:\n         reprec.assertoutcome(skipped=1)\n \n \n+class TestIssue7360:\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+    def test_caching_with_different_conditions(self, testdir):\n+        py_file1 = testdir.makepyfile(\n+            test_caching_with_different_conditions1=\"\"\"\n+            import pytest\n+\n+            @pytest.mark.skipif(\"2 + 2 == 4\")\n+            def test_should_skip_due_to_math():\n+                assert True\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_caching_with_different_conditions2=\"\"\"\n+            import pytest\n+\n+            @pytest.mark.skipif(\"3 + 3 != 6\")\n+            def test_should_not_skip_due_to_math():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+    def test_module_aware_caching(self, testdir):\n+        \"\"\"Test the caching of conditions is module-aware.\"\"\"\n+        module_aware_py_file1 = testdir.makepyfile(\n+            test_module_aware_caching1=\"\"\"\n+            import pytest\n+            import random\n+\n+            condition = random.choice([True, False])\n+\n+            @pytest.mark.skipif(\"condition\")\n+            def test_might_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        reprec = testdir.inline_run(module_aware_py_file1)\n+        reprec.assertoutcome(passed=1, skipped=0)\n+\n class TestKeywordSelection:\n     def test_select_simple(self, testdir):\n         file_test = testdir.makepyfile(\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..f06e393 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -153,6 +153,32 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n+@pytest.mark.parametrize(\n+    \"test_input,expected\",\n+    [\n+        (\n+            [\"-rs\"],\n+            [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+        ),\n+        (\n+            [\"-rs\", \"--runxfail\"],\n+            [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+        ),\n+    ],\n+)\n+def test_skip_location_reporting(testdir, test_input, expected):\n+    testdir.makepyfile(\n+        test_sample=\"\"\"\n+        import pytest\n+        @pytest.mark.skip\n+        def test_skip_location() -> None:\n+            assert 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest(*test_input)\n+    result.stdout.fnmatch_lines(expected)\n+\n+# Existing TestXFail class definition continues\n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..3c9b5b8 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -545,7 +546,30 @@ class TestXFail:\n         assert result.ret == (1 if strict else 0)\n \n \n-class TestXFailwithSetupTeardown:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason='xfail'))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason='xfail', strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_failing_setup_issue9(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..2b2c1d4 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,5 +1,8 @@\n+\n import os\n import stat\n+from _pytest.monkeypatch import MonkeyPatch\n+\n import sys\n from pathlib import Path\n from typing import Callable\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..d80139b 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,6 +597,37 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Import necessary modules\n+    from sklearn.linear_model import RidgeClassifierCV\n+    import numpy as np\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # Fit with 1 target\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Fit with multiple targets\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y_multi.shape[1]\n+    r.fit(x, y_multi)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # Test case when store_cv_values=False\n+    r_no_store = RidgeClassifierCV(alphas=alphas, store_cv_values=False)\n+    r_no_store.fit(x, y)\n+    assert not hasattr(r_no_store, 'cv_values_')\n \n def test_ridgecv_sample_weight():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..be33869 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,7 +5,9 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_raise_message, assert_array_equal, assert_greater_equal\n+from sklearn.metrics.cluster import adjusted_rand_score\n+from sklearn.mixture import BayesianGaussianMixture\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n@@ -21,8 +23,25 @@ from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n PRIOR_TYPE = ['dirichlet_process', 'dirichlet_distribution']\n \n+def test_bayesian_gaussian_mixture_fit_predict():\n+    \"\"\"Test if fit_predict is equivalent to fit followed by predict.\"\"\"\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng)\n+    n_components = 2 * rand_data.n_components\n \n-def test_log_dirichlet_norm():\n+    for covar_type in COVARIANCE_TYPE:\n+        bgmm1 = BayesianGaussianMixture(n_components=n_components,\n+                                        max_iter=100, random_state=rng,\n+                                        covariance_type=covar_type)\n+        bgmm2 = copy.deepcopy(bgmm1)\n+        X = rand_data.X[covar_type]\n+\n+        Y_pred1 = bgmm1.fit(X).predict(X)\n+        Y_pred2 = bgmm2.fit_predict(X)\n+        assert_array_equal(Y_pred1, Y_pred2)\n+\n+        Y = rand_data.Y\n+        assert_greater_equal(adjusted_rand_score(Y, Y_pred2), 0.95)\n     rng = np.random.RandomState(0)\n \n     weight_concentration = rng.rand(2)\n",
  "scikit-learn__scikit-learn-12471": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..d27effe 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,14 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=42)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..8faea4e 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -70,8 +71,17 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n-\n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_indeterminacy():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    \n+    # Perform multiple transformations\n+    transformed_X1 = kpca.fit_transform(X)\n+    transformed_X2 = kpca.fit_transform(X)\n+    \n+    # Assert that the outputs are the same except for sign\n+    assert_allclose(np.abs(transformed_X1), np.abs(transformed_X2))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..2410682 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n@@ -281,7 +284,39 @@ def test_iforest_average_path_length():\n     assert_array_equal(avg_path_length, np.sort(avg_path_length))\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start_multiple_steps():\n+    \"\"\"Test multiple iterative additions of iTrees to an iForest\"\"\"\n+    rng = check_random_state(0)\n+    X = rng.randn(20, 2)\n+\n+    # Initial fit with 10 trees\n+    clf = IsolationForest(n_estimators=10, max_samples=20,\n+                          random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    initial_tree_count = len(clf.estimators_)\n+\n+    # Add 10 more trees\n+    clf.set_params(n_estimators=20)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 20\n+\n+    # Add another 10 trees for a total of 30\n+    clf.set_params(n_estimators=30)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 30\n+\n+    # Check that the total is 30 and original trees are preserved\n+    assert len(clf.estimators_) == 30\n+    assert clf.estimators_[0] is clf.estimators_[0]\n+\n+    # Now set warm_start to False and check if only 15 trees are retained\n+    clf.set_params(n_estimators=15, warm_start=False)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 15\n+\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_score_samples():\n     X_train = [[1, 1], [1, 2], [2, 1]]\n@@ -296,6 +331,38 @@ def test_score_samples():\n \n \n @pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start_multiple_steps():\n+    \"\"\"Test multiple iterative additions of iTrees to an iForest\"\"\"\n+    rng = check_random_state(0)\n+    X = rng.randn(20, 2)\n+\n+    # Initial fit with 10 trees\n+    clf = IsolationForest(n_estimators=10, max_samples=20,\n+                          random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    initial_tree_count = len(clf.estimators_)\n+\n+    # Add 10 more trees\n+    clf.set_params(n_estimators=20)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 20\n+\n+    # Add another 10 trees for a total of 30\n+    clf.set_params(n_estimators=30)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 30\n+\n+    # Check that the total is 30 and original trees are preserved\n+    assert len(clf.estimators_) == 30\n+    assert clf.estimators_[0] is clf.estimators_[0]\n+\n+    # Now set warm_start to False and check if only 15 trees are retained\n+    clf.set_params(n_estimators=15, warm_start=False)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 15\n+\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n     X = [[0.0], [1.0]]\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..48f01f3 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..a16fbd8 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -9,6 +10,8 @@ from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n from sklearn.exceptions import NotFittedError\n from sklearn.linear_model import LogisticRegression\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..90a54ce 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -117,9 +117,36 @@ def test_finite_differences():\n     # compute relative error\n     rel_diff = check_grad(fun, grad, M.ravel()) / np.linalg.norm(grad(M))\n     np.testing.assert_almost_equal(rel_diff, 0., decimal=5)\n+import numpy as np\n+from sklearn.utils._testing import assert_raises\n+from sklearn.utils._testing import assert_raise_message\n+from sklearn.model_selection import GridSearchCV\n+from sklearn.pipeline import Pipeline\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis, KNeighborsClassifier\n \n \n def test_params_validation():\n+    # Test that GridSearchCV can handle numpy scalar types without error\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca),\n+                     ('knn', knn)])\n+\n+    # Testing with numpy types\n+    params = {'nca__tol': [0.1, 0.5, np.float32(1)],\n+              'nca__n_components': np.arange(1, 10, dtype=np.int64)}\n+\n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+\n+    try:\n+        gs.fit(X, y)\n+        print(\"Test with numpy scalar types passed!\")\n+    except TypeError as e:\n+        print(f\"Test failed with TypeError: {e}\")\n     # Test that invalid parameters raise value error\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..15eec15 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,31 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for zero division error with empty support_vectors_\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+\n+def test_sparse_fit_no_support_vectors():\n+    # Test case when no support vectors should be selected\n+    X_train = sparse.csr_matrix([[0, 1, 0],\n+                                 [0, 0, 0],\n+                                 [0, 0, 1]])\n+    y_train = np.array([0, 0, 0])\n+    model = svm.SVR(kernel='linear', C=1e-5, epsilon=1.0)\n+    model.fit(X_train, y_train)\n+    assert model.dual_coef_.shape[1] == 0\n+    assert model.support_.shape[0] == 0\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..f8f92d2 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,6 +972,8 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n+import pytest\n+\n @ignore_warnings\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n@@ -980,7 +982,15 @@ def test_repeated_cv_value_errors():\n         assert_raises(ValueError, cv, n_repeats=1.5)\n \n \n-def test_repeated_kfold_determinstic_split():\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=6, n_splits=2, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n     X = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n     random_state = 258173307\n     rkf = RepeatedKFold(\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..7aaf6eb 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -153,6 +153,28 @@ def test_permute_labels(metric_name):\n )\n # For all clustering metrics Input parameters can be both\n # in the form of arrays lists, positive, negative or string\n+def test_mutual_info_with_string_inputs():\n+    from sklearn.metrics.cluster import mutual_info_score\n+    import numpy as np\n+\n+    # Test with an array of strings\n+    x = np.random.choice(['a', 'b'], size=20).astype(object)\n+    y = np.random.choice(['a', 'b'], size=20).astype(object)\n+    try:\n+        mi_score = mutual_info_score(x, y)\n+        print(\"Mutual info score with object dtype strings: \", mi_score)\n+    except ValueError as e:\n+        print(\"Error: \", e)\n+    \n+    # Test with a list of strings\n+    x_list = np.random.choice(['a', 'b'], size=20).tolist()\n+    y_list = np.random.choice(['a', 'b'], size=20).tolist()\n+    try:\n+        mi_score_list = mutual_info_score(x_list, y_list)\n+        print(\"Mutual info score with list of strings: \", mi_score_list)\n+    except ValueError as e:\n+        print(\"Error: \", e)\n+\n def test_format_invariance(metric_name):\n     y_true = [0, 0, 0, 0, 1, 1, 1, 1]\n     y_pred = [0, 1, 2, 3, 4, 5, 6, 7]\n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..64bf822 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,9 +1,15 @@\n+\n import warnings\n import numpy as np\n import pickle\n import copy\n \n import pytest\n+import numpy as np\n+from sklearn import set_config\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn.datasets import make_classification\n \n from sklearn.datasets import make_regression\n from sklearn.isotonic import (\n@@ -668,7 +674,33 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_cv_with_pandas_output():\n+    \"\"\"Check CalibratedClassifierCV with isotonic regression and\n+    pandas output transform.\n+    \n+    This ensures the behavior is as expected and does not throw errors.\n+    \"\"\"\n+    # Import necessary modules\n+    pd = pytest.importorskip(\"pandas\")\n+    \n+    # Create dummy dataset\n+    X, y = make_classification(n_samples=30, n_features=3, random_state=42)\n+    \n+    # Set configuration to use Pandas output\n+    set_config(transform_output=\"pandas\")\n+    \n+    # Create model\n+    model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\n+    \n+    # Fit and predict\n+    model.fit(X, y)\n+    predictions = model.predict(X)\n+    \n+    # Check predictions' type\n+    assert isinstance(predictions, np.ndarray)\n+    \n+    # Reset the configuration\n+    set_config(transform_output=\"default\")\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..51b6e84 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2120,12 +2120,39 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     # not define the method.\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n-\n-    # The feature names are prefixed because verbose_feature_names_out=True is default\n+    \n+    @pytest.mark.parametrize(\n+        \"empty_selection\",\n+        [[], np.array([False, False, False, False]), [False, False, False, False]],\n+        ids=[\"list\", \"bool_array\", \"bool_list\"],\n+    )\n+    def test_empty_selection_with_pandas_output_and_multicolumn(empty_selection):\n+        \"\"\"Test ColumnTransformer with pandas output and multiple columns when there's an empty selection.\"\"\"\n+        \n+        pd = pytest.importorskip(\"pandas\")\n+        \n+        X_multi = pd.DataFrame(\n+            [[1.0, 2.2, 3.3, 4.4], [3.0, 1.0, 2.5, 3.5]], \n+            columns=[\"a\", \"b\", \"c\", \"d\"]\n+        )\n+        ct = ColumnTransformer(\n+            [\n+                (\"categorical\", \"passthrough\", empty_selection),\n+                (\"numerical\", StandardScaler(), [\"a\", \"b\", \"c\", \"d\"]),\n+            ],\n+            verbose_feature_names_out=True,\n+        )\n+        ct.set_output(transform=\"pandas\")\n+        X_out = ct.fit_transform(X_multi)\n+        assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\", \"numerical__c\", \"numerical__d\"])\n+        \n+        ct.set_params(verbose_feature_names_out=False)\n+        X_out = ct.fit_transform(X_multi)\n+        assert_array_equal(X_out.columns, [\"a\", \"b\", \"c\", \"d\"])\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n     assert_array_equal(X_trans_df0.columns, expected_verbose_names)\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..eec1e04 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -113,6 +113,68 @@ def test_automodule_special_members(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_classes(app):\n+    if sys.version_info < (3, 7):\n+        args = ''\n+    else:\n+        args = '(iterable=(), /)'\n+\n+    # Testing with multiple classes to ignore\n+    options = {'members': None,\n+               'undoc-members': None,\n+               'inherited-members': 'Base, list, set'}\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList%s' % args,\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n                                                             'missing_package1',\n@@ -125,4 +187,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "diff --git a/tests/test_environment_indexentries.py b/tests/test_environment_indexentries.py\nindex 9775484..bc575f8 100644\n--- a/tests/test_environment_indexentries.py\n+++ b/tests/test_environment_indexentries.py\n@@ -15,7 +15,24 @@ from sphinx.testing import restructuredtext\n \n \n @pytest.mark.sphinx('dummy', freshenv=True)\n-def test_create_single_index(app):\n+def test_symbols_index_entries(app):\n+    text = (\".. index:: @mention\\n\"\n+            \".. index:: \u00a3100\\n\"\n+            \".. index:: \u2190arrow\\n\"\n+            \".. index:: normalword\\n\"\n+            \".. index:: anotherword\\n\")\n+    restructuredtext.parse(app, text)\n+    index = IndexEntries(app.env).create_index(app.builder)\n+    \n+    # Checking for Symbols section\n+    assert len(index) == 3\n+    assert index[0] == ('Symbols', [('@mention', [[('', '#index-0')], [], None]),\n+                                    ('\u2190arrow', [[('', '#index-2')], [], None]),\n+                                    ('\u00a3100', [[('', '#index-1')], [], None])])\n+    # Checking for 'A' section\n+    assert index[1] == ('A', [('anotherword', [[('', '#index-4')], [], None])])\n+    # Checking for 'N' section\n+    assert index[2] == ('N', [('normalword', [[('', '#index-3')], [], None])])\n     text = (\".. index:: docutils\\n\"\n             \".. index:: Python\\n\"\n             \".. index:: pip; install\\n\"\n",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..ccbd315 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,7 +91,23 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n-def test_glossary(app):\n+def test_cmd_option_starting_with_bracket(app):\n+    # Test for option directive starting with a bracket\n+    text = \".. option:: [enable=]PATTERN\\n\\n   Test description\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [index],\n+        [desc, \n+            ([desc_signature, \n+                ([desc_name, '[enable'], \n+                 [desc_addname, '=]PATTERN']\n+                )],\n+             [desc_content, (\"Test description\",)]\n+            )\n+        ]\n+    ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n             \"   term1\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..d15bc19 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,8 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n+import pytest\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,6 +47,43 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_no_members_shown(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_all_with_specific_members(app):\n+    # This tests the behavior when __all__ is not empty and it contains specific members\n+    options = {'members': True}\n+    \n+    # Assuming you have a module `target.non_empty_all` with this content:\n+    # __all__ = ['foo']\n+    # def foo(): pass\n+    # def bar(): pass\n+    \n+    actual = do_autodoc(app, 'module', 'target.non_empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.non_empty_all',\n+        '',\n+        'docstring of non_empty_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.non_empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..01b2169 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..98c0029 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,39 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_section(self):\n+        # Test when napoleon_use_param is False\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other parameters\n+----------------\n+y : float\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:Other Parameters: **y** (*float*)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test when napoleon_use_param is True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:param y:\n+:type y: float\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..c86dd74 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -322,6 +322,26 @@ def test_mul():\n         assert h == h2\n \n \n+def test_non_disjoint_cycles():\n+    # Test non-disjoint cycles that should compose into valid permutations\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])  # 0->1, 1->2, 2->0\n+    assert Permutation([[2, 3], [0, 2]]) == Permutation([2, 1, 0, 3])  # 0->2->3, 1 stays, 2->3->0\n+    assert Permutation([[0, 1, 2], [2, 3]]) == Permutation([1, 2, 3, 0])  # 0->1->2->3, 3->0\n+\n+    # The same element moving to itself, should result in identity permutation\n+    assert Permutation([[0], [0]]) == Permutation([])  # Identity permutation\n+\n+    # More complex non-disjoint cycles\n+    assert Permutation([[0, 2], [2, 3], [3, 4, 5]]) == Permutation([2, 0, 3, 4, 5, 1])  # 0->2->3->4->5->1->0\n+\n+    # Single cycle repeated does nothing to the permutation\n+    assert Permutation([[0, 1], [0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # Test with size specified\n+    assert Permutation([[0, 1], [1, 2]], size=4) == Permutation([1, 2, 0, 3])  # 3 remains unmoved\n+\n+# Existing test for general argument cases\n def test_args():\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..5869a25 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,8 +1,21 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n-\n def test_sparse_matrix():\n+    # Test horizontal stacking with 0 x n sparse matrices\n+    sparse_matrices_h = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_h) == Matrix(0, 6, [])\n+    \n+    # Test vertical stacking with n x 0 sparse matrices\n+    sparse_matrices_v = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_v) == Matrix(6, 0, [])\n+\n+    # Additional test for vertical stacking behavior with non-zero dimensions\n+    non_zero_columns = [SparseMatrix.zeros(1, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*non_zero_columns).shape == (1, 6)\n+    non_zero_rows = [SparseMatrix.zeros(n, 1) for n in range(4)]\n+    assert SparseMatrix.vstack(*non_zero_rows).shape == (6, 1)\n     def sparse_eye(n):\n         return SparseMatrix.eye(n)\n \n",
  "sympy__sympy-13471": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..8834e8e 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -267,6 +267,21 @@ def test_coth():\n \n     assert coth(x*I) == -cot(x)*I\n \n+def test_coth_log_tan_subs():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    assert e.subs(x, 2) != S.ComplexInfinity  # Check that no error occurs\n+    assert e.subs(x, 3) != S.ComplexInfinity\n+    assert e.subs(x, 5) != S.ComplexInfinity\n+    assert e.subs(x, 6) != S.ComplexInfinity\n+    assert e.subs(x, 8) != S.ComplexInfinity\n+    assert e.subs(x, 9) != S.ComplexInfinity\n+    assert e.subs(x, 11) != S.ComplexInfinity\n+    assert e.subs(x, 12) != S.ComplexInfinity\n+    assert e.subs(x, 13) != S.ComplexInfinity\n+    assert e.subs(x, 15) != S.ComplexInfinity\n+    assert e.subs(x, 18) != S.ComplexInfinity\n+\n     assert coth(k*pi*I) == -cot(k*pi)*I\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..07c5830 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -187,6 +187,30 @@ def test_col_join():\n                    [0, 0, 1],\n                    [7, 7, 7]])\n \n+def test_issue_13643():\n+    # Verifying the fix for the reported issue with Matrix.col_insert\n+    from sympy import eye, Matrix, ones\n+\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([[1, 0, 0, 2, 2, 0, 0, 0],\n+                       [0, 1, 0, 2, 2, 0, 0, 0],\n+                       [0, 0, 1, 2, 2, 0, 0, 0],\n+                       [0, 0, 0, 2, 2, 1, 0, 0],\n+                       [0, 0, 0, 2, 2, 0, 1, 0],\n+                       [0, 0, 0, 2, 2, 0, 0, 1]])\n+    assert result == expected\n+\n+    # Additional test for col_insert to ensure robustness\n+    M = eye(3)\n+    V = Matrix([1, 1, 1]).T\n+    result = M.col_insert(2, V)\n+    expected = Matrix([[1, 0, 1, 0],\n+                       [0, 1, 1, 0],\n+                       [0, 0, 1, 1]])\n+    assert result == expected\n+\n def test_row_insert():\n     r4 = Matrix([[4, 4, 4]])\n     for i in range(-4, 5):\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..88e4f26 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -662,8 +662,25 @@ def test_latex_sequences():\n     latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n-\n-def test_latex_FourierSeries():\n+def test_SeqFormula_rendering():\n+    from sympy import symbols, oo, latex\n+    from sympy.series.sequences import SeqFormula\n+    \n+    n = symbols('n', integer=True)\n+    \n+    # Create a SeqFormula object\n+    seq = SeqFormula(n**2, (n, 0, oo))\n+    \n+    # Get its LaTeX representation\n+    latex_str = latex(seq)\n+    \n+    # Assert that the LaTeX string does not contain unnecessary backslashes\n+    assert latex_str == r'[0, 1, 4, 9, \\ldots]'\n+    \n+    # Another test case with a finite sequence\n+    seq_finite = SeqFormula(n**2, (n, 0, 3))\n+    latex_str_finite = latex(seq_finite)\n+    assert latex_str_finite == r'[0, 1, 4, 9]'\n     latex_str = r'2 \\sin{\\left (x \\right )} - \\sin{\\left (2 x \\right )} + \\frac{2}{3} \\sin{\\left (3 x \\right )} + \\ldots'\n     assert latex(fourier_series(x, (x, -pi, pi))) == latex_str\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..40e15fc 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -155,6 +156,16 @@ def test_Greedy_postprocess():\n \n \n def test_Domain_preprocess():\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+    \n+    raises(OptionError, lambda: Domain.preprocess('RR[y,z]'))  # New test case for the reported issue\n     assert Domain.preprocess(ZZ) == ZZ\n     assert Domain.preprocess(QQ) == QQ\n     assert Domain.preprocess(EX) == EX\n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..cc735ff 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,42 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import pretty, MatrixSymbol, S\n+\n+def test_issue_14814_MatAdd_pretty_printing():\n+    # issue #14814\n+    n = 2  # assuming some size for the matrix, typically this is an integer\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    \n+    # Test case for the reported issue\n+    assert pretty(x + y_star) == \"x + y*\"\n+\n+    # Additional cases to test different scenarios\n+    a = MatrixSymbol('a', n, n)\n+    y = MatrixSymbol('y', n, n)\n+    \n+    # Ensuring negative and multiplication are pretty printed correctly\n+    assert pretty(-a*x + -2*y*y_star) == \"-a*x - 2*y**y*\"\n+    \n+    # Test with different combinations of symbols and operations\n+    assert pretty(-x + y_star) == \"-x + y*\"\n+    assert pretty(x - y_star) == \"x - y*\"\n+    assert pretty(-x - y_star) == \"-x - y*\"\n+    assert pretty(x + y) == \"x + y\"\n+    assert pretty(2*x - y_star) == \"2*x - y*\"\n+\n+    # Testing for correct handling when MatrixSymbols have special characters\n+    z_underscore = MatrixSymbol('z_', n, n)\n+    assert pretty(x + z_underscore) == \"x + z_\"\n+    \n+    # Test pretty print with a combination of operations\n+    assert pretty(-2*x + 3*y_star - z_underscore) == \"-2*x + 3*y* - z_\"\n+\n+    # Verify that pretty printing does not result in errors with complex expressions\n+    complex_expr = 2*x + 3*y_star - 5*a - 7*z_underscore\n+    assert pretty(complex_expr) == \"2*x + 3*y* - 5*a - 7*z_\"\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..0bdd845 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,7 +728,16 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n-def test_python_keywords():\n+def test_curly_matrix_symbol():\n+    import sympy as sy\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # Verifying the issue #15009 is resolved\n+    lam = lambdify(curlyv, curlyv)\n+    assert (lam([[1], [2]]) == [[1], [2]]).all()\n+\n+    lam_dummified = lambdify(curlyv, curlyv, dummify=True)\n+    assert (lam_dummified([[3], [4]]) == [[3], [4]]).all()\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..85d170c 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n@@ -1726,7 +1728,11 @@ def test_latex_UnevaluatedExpr():\n     assert latex(x*he) == r\"x \\frac{1}{x}\"\n \n \n-def test_MatrixElement_printing():\n+def test_issue_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n     # test cases for issue #11821\n     A = MatrixSymbol(\"A\", 1, 3)\n     B = MatrixSymbol(\"B\", 1, 3)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..1a6aaf3 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,25 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Original test cases for the issue\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Additional test cases\n+    # Test with Eq involving y\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x).simplify() == (x + 1) * exp(x - y) / (y + 1)\n+    \n+    # Test with multiple derivatives\n+    eq = Eq(y**2 + exp(y), x**2)\n+    assert idiff(eq, y, x, 2).simplify() == -2 / (1 + y)**3\n+\n+    # Test with a more complex function\n+    assert idiff(exp(f(x) + g(x)) - x, [f(x), g(x)], x) == exp(-g(x) - f(x)) * (Derivative(f(x), x) + Derivative(g(x), x))\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..9eb1c66 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -580,6 +580,29 @@ def test_ccode_cse():\n         '   e[2] = x0*x1;\\n'\n         '}\\n'\n     )\n+    \n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.codegen import CCodeGen\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in the output expression\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n     assert source == expected\n \n def test_empty_f_code():\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..7239d55 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,30 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+def test_intersection_removes_duplicates():\n+    x = Symbol('x')\n+\n+    # Test case where all inputs are {1}\n+    assert Intersection({1}, {1}) == FiniteSet(1)\n+    \n+    # Test case where inputs are {1}, {1}, {x}\n+    assert Intersection({1}, {1}, {x}) == Piecewise((FiniteSet(1), Eq(x, 1)), (S.EmptySet, True))\n+    \n+    # Test case where inputs are {1}, {x}\n+    assert Intersection({1}, {x}) == Piecewise((FiniteSet(1), Eq(x, 1)), (S.EmptySet, True))\n+\n+    # Ensure the original behavior with unordered inputs\n+    assert Intersection({1, 2}, {2}, {2, 3}) == FiniteSet(2)\n+\n+    # Ensure the output is unevaluated when symbols do not match\n+    assert Intersection({x}, {x}) == FiniteSet(x)\n+\n+    # Test with different symbol, should remain unevaluated\n+    y = Symbol('y')\n+    assert Intersection({1}, {1}, {y}) == Intersection({1}, {y}, evaluate=False)\n \n-def test_issue_9623():\n+    # Ensure the symbolic intersection behaves correctly\n+    assert Intersection({x}, {y}) == Intersection({x}, {y}, evaluate=False)\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex bd254ca..26c0185 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -387,8 +387,22 @@ def test_numpy_matrix():\n     # The line below should probably fail upon construction (before calling with \"(inp)\"):\n     raises(Exception, lambda: lambdify(x, x_dot_mtx, printer=p3)(inp))\n \n-\n-def test_numpy_transpose():\n+def test_issue_identity_matrix_in_lambdify():\n+    if not numpy:\n+        skip(\"numpy not installed.\")\n+    from sympy import Identity, symbols\n+    n = symbols('n', integer=True)\n+    A = MatrixSymbol(\"A\", n, n)\n+    a = numpy.array([[1, 2], [3, 4]])\n+    f = lambdify(A, A + Identity(n), modules=\"numpy\")\n+    \n+    # Expected result of adding identity matrix\n+    expected = numpy.array([[2, 2], [3, 5]])\n+    numpy.testing.assert_array_equal(f(a), expected)\n+    \n+    # Test that an error is raised for symbolic dimension identity matrix\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n     if not numpy:\n         skip(\"numpy not installed.\")\n     A = Matrix([[1, x], [0, 1]])\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..c9021dc 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,6 +92,19 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+\n+    # Test commutative multiplication with sympify\n+    from sympy import sympify\n+    scalar = sympify(2.0)\n+    assert scalar * p4 == p4 * scalar\n+    assert Point(0, 0) + scalar * p4 == Point(0, 0) + p4 * scalar\n+    assert sympify(3) * p4 == Point(3, 3)\n+\n+    # Verify the issue example\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert point1 + point2 * sympify(2.0) == Point(2, 2)\n+    assert point1 + sympify(2.0) * point2 == Point(2, 2)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..7ec48a1 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,7 +1894,24 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, Symbol, sympify\n+\n def test_expr():\n+    # Test case for the AttributeError scenario\n+    x = symbols('x')\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    try:\n+        _ = (x == C())\n+    except AttributeError:\n+        assert True, \"Caught expected AttributeError\"\n+    \n+    # Test case for incorrect equality\n+    class C:\n+        def __repr__(self):\n+            return 'x'\n+    assert (x != C()), \"The Symbol 'x' should not be equal to an object whose repr is 'x'\"\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n \n@@ -1902,4 +1919,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..6f67bc4 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,6 +547,14 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n+    # Test for issue 18186: verifying complete results with permute=True\n+    from sympy.abc import m, n\n+\n+    eq = n**4 + m**4 - 2**4 - 3**4\n+    expected_set = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(eq, syms=(m, n), permute=True) == expected_set\n+    assert diophantine(eq, syms=(n, m), permute=True) == expected_set\n+\n     # issue 18122\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..a2e0d62 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..44cc5e6 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,13 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_with_one_element():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..d64fd10 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -66,7 +67,14 @@ def test_Identity_index():\n     raises(IndexError, lambda: I[3, 3])\n \n \n-def test_block_index():\n+def test_block_index_issue_symbolic():\n+    n, i = symbols('n, i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+    assert C[0, 0] == A[0, 0]\n+    assert C[n - 1, 0] == B[n - 1, 0]\n     I = Identity(3)\n     Z = ZeroMatrix(3, 3)\n     B = BlockMatrix([[I, I], [I, I]])\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..40cf59c 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -316,8 +316,37 @@ def test_sign():\n     d = p - q\n     assert sign(d).func is sign or sign(d) == 0\n \n-\n-def test_as_real_imag():\n+def test_sign_rewrite_abs():\n+    x, y = symbols('x y')\n+    # Test rewrite in terms of Abs for various forms of x\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    f = Function('f')\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x)/Abs(f(x)), True))\n+\n+    # Test specific cases for zero and nonzero\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(5).rewrite(Abs) == 1\n+    assert sign(-5).rewrite(Abs) == -1\n+    assert sign(I).rewrite(Abs) == I\n+    assert sign(-I).rewrite(Abs) == -I\n+\n+    # Test for a symbolic zero\n+    zero_expr = x - x\n+    assert sign(zero_expr).rewrite(Abs) == 0\n+\n+    # Test for known symbolic expressions and their simplifications\n+    complex_expr = 3 + 4*I\n+    assert sign(complex_expr).rewrite(Abs) == (3 + 4*I) / Abs(3 + 4*I)\n+\n+    # Make sure the rewrite doesn't affect sign of a complex number unexpectedly\n+    symb_expr = x + I*y\n+    assert sign(symb_expr).rewrite(Abs).simplify() == sign(symb_expr)\n+\n+    # Ensure rewrite respects assumptions\n+    pos = Symbol('pos', positive=True)\n+    neg = Symbol('neg', negative=True)\n+    assert sign(pos).rewrite(Abs) == 1\n+    assert sign(neg).rewrite(Abs) == -1\n     n = pi**1000\n     # the special code for working out the real\n     # and complex parts of a power with Integer exponent\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..687d368 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,25 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n+from sympy import S\n \n def test_partitions():\n+    # Test the issue of reused dictionary instances\n+    partitions_list = list(partitions(6, k=2))\n+    partitions_copy_list = [p.copy() for p in partitions_list]\n+    assert partitions_list == partitions_copy_list, \"Partitions should be deep-copied\"\n+\n+    for part1, part2 in zip(partitions_list, partitions_copy_list):\n+        assert part1 is not part2, \"Each partition should be a unique dictionary object\"\n+\n+    # Test size=True argument\n+    partitions_size_list = list(partitions(6, k=2, size=True))\n+    assert all(isinstance(p, tuple) and isinstance(p[1], dict) for p in partitions_size_list), \\\n+        \"Partitions with size=True should yield tuples with a dictionary\"\n+    for m, p in partitions_size_list:\n+        assert sum(k*v for k, v in p.items()) == 6, \"Partition sum should match original number\"\n+        assert isinstance(m, int), \"Multiplicity sum should be an integer\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..7876f16 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n-                                 volume, kilometer)\n+                                 volume, kilometer, joule)\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n@@ -46,7 +47,26 @@ def test_convert_to():\n     assert speed_of_light.convert_to(m) == speed_of_light\n \n \n-def test_Quantity_definition():\n+def test_convert_to_orthogonal_units():\n+    expr = joule * second\n+    # Test conversion to the same unit should return the expression unchanged\n+    assert convert_to(expr, joule * second) == expr\n+\n+    # Test conversion to joule\n+    # As per the issue, this should ideally return the expression unchanged\n+    # but through this test case, we are verifying it returns expected output.\n+    assert convert_to(expr, joule) == expr\n+\n+    # Test conversion to base SI units, should return\n+    # kg*m**2/s which is equivalent to joule*second but in base units\n+    assert convert_to(expr, kg*m**2/s) == kg*m**2/s\n+\n+    # Test conversion to minutes\n+    assert convert_to(expr, minute) == expr / 60\n+\n+    # Additional test: converting to a completely incompatible unit should raise an error\n+    with raises(ValueError):\n+        convert_to(expr, meter)\n     q = Quantity(\"s10\", abbrev=\"sabbr\")\n     q.set_global_relative_scale_factor(10, second)\n     u = Quantity(\"u\", abbrev=\"dam\")\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..c2af19a 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,13 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+def test_symbol_no_dict():\n+    from sympy import Symbol\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol should not have __dict__\"\n+    assert hasattr(s, '__slots__'), \"Symbol should have __slots__\"\n+    assert s.__slots__ == ('name',), \"Slots should be ('name',)\"\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..4d4fd0f 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n                    atan, atan2, nan, Symbol, re, im, sign)\n from sympy.abc import w, x, y, z\n@@ -161,7 +162,17 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_arg():\n+    x = Symbol('x', complex=True)\n+    assert refine(arg(x), Q.positive(x)) == 0\n+    assert refine(arg(x), Q.negative(x)) == pi\n+\n+    a = Symbol('a', positive=True)\n+    expr = Integral(sin(x)*exp(-a*x), (x, 0, oo))\n+    result = expr.doit()\n+    assert result.is_Piecewise\n+    refined_result = refine(result, Q.positive(a))\n+    assert refined_result == 1 / (a**2 + 1)\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..d893f11 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -33,6 +34,40 @@ def test_subs_Matrix():\n     assert Mul(Matrix([[3]]), x).subs(x, 2.0) == Matrix([[6.0]])\n     # Does not raise a TypeError, see comment on the MatAdd postprocessor\n     assert Add(Matrix([[3]]), x).subs(x, 2.0) == Add(Matrix([[3]]), 2.0)\n+def test_hyperbolic_piecewise_subs():\n+    from sympy import sinh, exp, Piecewise, symbols, clear_cache, Symbol\n+\n+    # Prepare symbols\n+    x, y, z = symbols('x y z')\n+\n+    # Test cases based on the provided MWE and analysis\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) is not None\n+\n+    clear_cache()\n+    x_real, y_real, z = symbols('x_real y_real z', real=True)\n+    expr_real = exp(sinh(Piecewise((x_real, y_real > x_real), (y_real, True)) / z))\n+    try:\n+        expr_real.subs({1: 1.0})\n+    except Exception as e:\n+        assert False, f\"Unexpected exception occurred: {e}\"\n+\n+    # Additional variations to ensure robustness\n+    clear_cache()\n+    expr_no_div = exp(sinh(Piecewise((x, y > x), (y, True))))\n+    assert expr_no_div.subs({1: 1.0}) is not None\n+\n+    clear_cache()\n+    expr_no_exp = sinh(Piecewise((x, y > x), (y, True)) / z)\n+    assert expr_no_exp.subs({1: 1.0}) is not None\n+\n+    clear_cache()\n+    expr_real_no_exp = sinh(Piecewise((x_real, y_real > x_real), (y_real, True)) / z)\n+    try:\n+        expr_real_no_exp.subs({1: 1.0})\n+    except Exception as e:\n+        assert False, f\"Unexpected exception occurred: {e}\"\n \n def test_subs_AccumBounds():\n     e = x\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..621e483 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,8 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n+from sympy.core.kind import MatrixKind, NumberKind\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -39,7 +42,10 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n-def test_Matrix_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n         m = cls.zeros(3, 2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..721a61e 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -114,6 +114,21 @@ def test_monomials():\n     assert set(itermonomials([x], [3], [1])) == {x, x**3, x**2}\n     assert set(itermonomials([x], [3], [2])) == {x**3, x**2}\n \n+    # Test for the specific case mentioned in the issue\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2, x1*x2*x3,\n+        x2**3, x2**2*x3, x2*x3**2, x3**3\n+    }\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) == {\n+        x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2, x1*x2*x3,\n+        x2**3, x2**2*x3, x2*x3**2, x3**3,\n+        x1**4, x1**3*x2, x1**3*x3, x1**2*x2**2, x1**2*x2*x3, x1**2*x3**2,\n+        x1*x2**3, x1*x2**2*x3, x1*x2*x3**2, x1*x3**3,\n+        x2**4, x2**3*x3, x2**2*x3**2, x2*x3**3,\n+        x3**4\n+    }\n+\n     assert set(itermonomials([x, y], [0, 0])) == {S.One}\n     assert set(itermonomials([x, y], [0, 1])) == {S.One, y}\n     assert set(itermonomials([x, y], [0, 2])) == {S.One, y, y**2}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..b8bef99 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -47,6 +48,18 @@ def test_solve_poly_system():\n     raises(NotImplementedError, lambda: solve_poly_system([x**3 - y**3], x, y))\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n+\n+    # Test cases for verifying the issue with detection of infinite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], (x, y)))\n+\n+    # Additional test cases for non-zero-dimensional systems\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x**2 + y**2 - 1], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x**2 + y**2 - 1, x - 1], x, y))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n \n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..282dee8 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -440,6 +442,19 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n+def test_issue_22684():\n+    # Test to ensure issue is resolved: Point2D should not raise an error\n+    # when evaluate=False is used in sympify\n+\n+    # Using evaluate context manager\n+    with evaluate(False):\n+        p = Point(1, 2)\n+    assert p == Point2D(1, 2)\n+\n+    # Without using evaluate context manager\n+    p = Point(1, 2)\n+    assert p == Point2D(1, 2)\n+\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..3ee33c9 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -337,6 +337,15 @@ def test_cse_Indexed():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+    # Test for specific matrix indexing to ensure correct cse output\n+    # This corresponds to exposing the issue with MatrixSymbol indexing\n+    expr3 = A[0, 0] * A[0, 1] + A[0, 0] * A[0, 1] * A[0, 2]\n+    expr4 = A[1, 1] * A[1, 2] + A[1, 1] * A[1, 2] * A[1, 0]\n+    \n+    replacements2, reduced_exprs2 = cse([expr3, expr4])\n+    assert replacements2 == [(symbols('x0'), A[0, 0] * A[0, 1]), (symbols('x1'), A[1, 1] * A[1, 2])]\n+    assert reduced_exprs2 == [symbols('x0') * A[0, 2] + symbols('x0'), symbols('x1') * A[1, 0] + symbols('x1')]\n+\n \n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n@@ -356,6 +365,15 @@ def test_cse_MatrixExpr():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+    # Test for specific matrix indexing to ensure correct cse output\n+    # This corresponds to exposing the issue with MatrixSymbol indexing\n+    expr3 = A[0, 0] * A[0, 1] + A[0, 0] * A[0, 1] * A[0, 2]\n+    expr4 = A[1, 1] * A[1, 2] + A[1, 1] * A[1, 2] * A[1, 0]\n+    \n+    replacements2, reduced_exprs2 = cse([expr3, expr4])\n+    assert replacements2 == [(symbols('x0'), A[0, 0] * A[0, 1]), (symbols('x1'), A[1, 1] * A[1, 2])]\n+    assert reduced_exprs2 == [symbols('x0') * A[0, 2] + symbols('x0'), symbols('x1') * A[1, 0] + symbols('x1')]\n+\n     replacements, reduced_exprs = cse([expr1 + expr2, expr1])\n     assert replacements\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..e37adc2 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,8 +38,14 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n-\n-def test_issue_18361():\n+def test_issue_empty_array():\n+    from sympy.tensor.array import Array\n+    for ArrayType in [ImmutableDenseNDimArray, MutableDenseNDimArray, \n+                      ImmutableSparseNDimArray, MutableSparseNDimArray]:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n     C = Array([(x + x**2)/(x*sin(y)**2 + x*cos(y)**2), 2*sin(x)*cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..b2f6fa2 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,22 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_lambdify_single_element_tuple():\n+    f2b = lambdify([], (1,))  # Test single-element tuple\n+    assert f2b() == (1,)  # Should return a tuple with one element\n+\n+    # Verify the source code string includes the single-element tuple correctly\n+    source = inspect.getsource(f2b)\n+    assert \"return (1,)\" in source\n+\n+    # Test with an actual symbol to ensure no regression\n+    x = symbols('x')\n+    f2b_sym = lambdify([x], (x,))\n+    assert f2b_sym(42) == (42,)\n+\n+    # Inspect the generated source code when using symbols\n+    source_sym = inspect.getsource(f2b_sym)\n+    assert \"return (x,)\" in source_sym\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..d5d57b9 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,30 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy import exp\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity\n+from sympy.physics.units.systems.si import SI\n+from sympy.core.numbers import E\n+from sympy.physics.units.dimensions import Dimension\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..61f795c 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,25 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_expand_issue_fix():\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+\n+    # Original test cases from the issue\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2 * A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test cases\n+    assert TP(3 * A, 4 * B).expand(tensorproduct=True) == 12 * TP(A, B)\n+    assert TP(A + B, C + D).expand(tensorproduct=True) == \\\n+        TP(A, C) + TP(A, D) + TP(B, C) + TP(B, D)\n+    assert TP((A + B)*(C + D), A).expand(tensorproduct=True) == \\\n+        TP(A*C, A) + TP(A*D, A) + TP(B*C, A) + TP(B*D, A)\n+    assert TP(A, B, 3*C + D).expand(tensorproduct=True) == \\\n+        3 * TP(A, B, C) + TP(A, B, D)\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..a468034 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,12 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+def test_milli_prefix_with_units():\n+    assert milli * W == W / 1000  # Should evaluate to mW\n+    assert milli * W == W / milli.scale_factor  # Ensuring scale factor usage for watt\n+    assert milli * volt == volt / 1000  # Should evaluate to mV\n+    assert milli * meter == meter / 1000  # Should evaluate to mm\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..c9581cb 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -6,7 +6,7 @@ from django.test import SimpleTestCase, TestCase\n from django.test.utils import CaptureQueriesContext, isolate_apps\n \n from .models import (\n-    Base, Chef, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n+    Base, Chef, Child, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n     MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase,\n     Supplier, Title, Worker,\n )\n@@ -205,7 +205,29 @@ class ModelInheritanceTests(TestCase):\n         self.assertEqual(A.attr.called, (A, 'attr'))\n \n \n-class ModelInheritanceDataTests(TestCase):\n+class ModelInheritanceOrderingTests(TestCase):\n+    def test_inherited_ordering_pk_desc(self):\n+        p1 = Parent.objects.create(first_name='Joe', last_name='Doe', email='joe@email.com')\n+        p2 = Parent.objects.create(first_name='Jane', last_name='Doe', email='jane@email.com')\n+\n+        # Test the order of Parent instances\n+        qs_parent = Parent.objects.all()\n+        self.assertSequenceEqual(qs_parent, [p2, p1])\n+\n+        # Check the SQL ordering clause for Parent\n+        expected_order_by_sql_parent = 'ORDER BY \"tests_model_inheritance_parent\".\"id\" DESC'\n+        self.assertIn(expected_order_by_sql_parent, str(qs_parent.query))\n+\n+        # Test the order of Child instances\n+        c1 = Child.objects.create(first_name='Tom', last_name='Smith', email='tom@email.com')\n+        c2 = Child.objects.create(first_name='Ann', last_name='Smith', email='ann@email.com')\n+\n+        qs_child = Child.objects.all()\n+        self.assertSequenceEqual(qs_child, [c2, c1])\n+\n+        # Check the SQL ordering clause for Child\n+        expected_order_by_sql_child = 'ORDER BY \"tests_model_inheritance_parent\".\"id\" DESC'\n+        self.assertIn(expected_order_by_sql_child, str(qs_child.query))\n     @classmethod\n     def setUpTestData(cls):\n         cls.restaurant = Restaurant.objects.create(\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..59cd991 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -333,6 +333,36 @@ class OrderingTests(TestCase):\n             article.author = author\n             article.save(update_fields={'author'})\n \n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2')\n+        author_3 = Author.objects.create(name='Author 3')\n+\n+        # Create self-referential links\n+        author_1.editor = author_3\n+        author_1.save()\n+        author_2.editor = author_1\n+        author_2.save()\n+        author_3.editor = author_2\n+        author_3.save()\n+\n+        # Add Article instances\n+        article_1 = Article.objects.create(headline='Article 1', author=author_1)\n+        article_2 = Article.objects.create(headline='Article 2', author=author_2)\n+        article_3 = Article.objects.create(headline='Article 3', author=author_3)\n+\n+        # Test ordering by self-referential fk\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'), \n+            [\"Article 2\", \"Article 1\", \"Article 3\"],\n+            attrgetter('headline'),\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'), \n+            [\"Article 3\", \"Article 2\", \"Article 1\"],\n+            attrgetter('headline'),\n+        )\n+\n         self.assertQuerysetEqual(\n             Article.objects.order_by('author_id'), [\n                 \"Article 4\",\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..3777ca5 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_uses_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the custom ID provided\n+        in ChoiceWidget.options, specifically for CheckboxSelectMultiple.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = list(form['field'].subwidgets)\n+        # Check that subwidget id_for_label uses the custom 'id' provided in attrs\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..95275a0 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,48 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+# New imports required for the additional test cases\n+from django.test import TestCase\n+from django.test.utils import override_settings\n+from django.contrib.auth.models import Permission\n+from django.apps import apps\n+from django.core.management import call_command\n+from io import StringIO\n+from django.core.management.base import CommandError\n+\n+class MigrateDatabaseParameterTests(TestCase):\n+    databases = {'default', 'other'}\n+\n+    def test_migrate_respects_database_parameter(self):\n+        \"\"\"\n+        Test that migrate command respects the --database parameter\n+        by checking that permissions are created only on the specified\n+        database.\n+        \"\"\"\n+        # Clear permissions in both databases first\n+        Permission.objects.using('default').delete()\n+        Permission.objects.using('other').delete()\n+\n+        # Run migrations on the 'other' database\n+        out = StringIO()\n+        try:\n+            call_command('migrate', database='other', stdout=out)\n+        except CommandError:\n+            # Ignore errors as we are only interested in the db usage part\n+            pass\n+\n+        # Check that no permissions were created in the 'default' database\n+        self.assertEqual(Permission.objects.using('default').count(), 0)\n+\n+        # Check that permissions were created in the 'other' database\n+        self.assertGreater(Permission.objects.using('other').count(), 0)\n+\n+    def test_migrate_with_invalid_database_parameter(self):\n+        \"\"\"\n+        Test that migrate raises a CommandError when using an invalid database name.\n+        \"\"\"\n+        out = StringIO()\n+        with self.assertRaises(CommandError):\n+            call_command('migrate', database='invalid_db', stdout=out)\n",
  "matplotlib__matplotlib-25498": "",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..4482670 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,37 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import make_union\n+    from sklearn.utils._set_output import set_config\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from numpy.testing import assert_array_equal\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Verify with default output\n+    set_config(transform_output=\"default\")\n+    default_output = make_union(MyTransformer()).fit_transform(data)\n+\n+    # Verify with pandas output\n+    set_config(transform_output=\"pandas\")\n+    try:\n+        pandas_output = make_union(MyTransformer()).fit_transform(data)\n+    except ValueError as e:\n+        assert False, f\"Test failed with error: {e}\"\n+\n+    # Check that outputs are the same\n+    assert_array_equal(default_output, pandas_output)\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..d053762 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,35 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    # Construct a test case similar to the issue description\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n@@ -115,6 +144,35 @@ def test_decorators(app):\n         '',\n     ]\n \n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    # Construct a test case similar to the issue description\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n     actual = do_autodoc(app, 'class', 'target.decorator.Qux')\n     assert list(actual) == [\n         '',\n@@ -132,6 +190,35 @@ def test_decorators(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    # Construct a test case similar to the issue description\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n     options = {\"members\": None}\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..47e78e6 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,8 +358,24 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n+def test_issue_trigsimp_rational_simplification():\n+    # Test case to verify trigsimp simplification with rational angles\n+\n+    # Creating matrices using rational angles\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+\n+    # Simplifying the dot product of the two vectors\n+    r = t1.dot(t2)\n+    assert trigsimp(r) == cos(S(1)/50)\n \n-def test_exptrigsimp():\n+    r = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert trigsimp(r) == cos(S(1)/50)\n+    \n+    # Test acos simplification behavior\n+    expression = acos(r)\n+    simplified_expression = trigsimp(expression)\n+    assert simplified_expression == acos(cos(S(1)/50))\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..382805c 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,28 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_issue_alignment():\n+    from sympy.abc import x\n+    from sympy import Sum, pprint, oo\n \n-def test_units():\n+    # This is the specific issue mentioned where x and +3 should be aligned\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    # Generate the pretty printed result\n+    pretty_output = upretty(expr)\n+\n+    # Define the expected output based on the correct alignment\n+    expected_output = u(\"\"\"\\\n+  \u221e      \\n\\\n+ ___     \\n\\\n+ \u2572       \\n\\\n+  \u2572   x  \\n\\\n+  \u2571   \u2500 + 3\\n\\\n+ \u2571       \\n\\\n+ \u203e\u203e\u203e     \\n\\\n+x = 1    \\\n+\"\"\")\n+    assert pretty_output == expected_output, f\"Expected:\\n{expected_output}\\n\\nGot:\\n{pretty_output}\"\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..ac61388 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,24 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    # Test case to trigger RuntimeError by modifying the list during iteration\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    # Additional test case to ensure equality of set/list inside uniq\n+    f = ['a', 'b', 'c', 'a']\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Test when using with nested structures\n+    f = [[1, 2], [1, 2], [1]]\n+    list(uniq(f)) == [[1, 2], [1]]\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..b50247b 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -8,6 +9,7 @@ from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n+from django.db.models import Max\n \n from .models import (\n     Article, Author, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..48feb90 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -545,8 +545,21 @@ class BasicExpressionsTests(TestCase):\n         self.assertCountEqual(subquery_test, [self.foobar_ltd, self.gmbh])\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n-\n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_initialization_sets_subquery_true(self):\n+        # Test that a Subquery is initialized with subquery=True\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertTrue(employees_subquery.query.subquery, \"Subquery should be initialized with subquery=True.\")\n+    \n+    def test_subquery_as_sql_generates_correct_sql(self):\n+        # Test that the SQL generated by Subquery.as_sql() is correct\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertTrue(sql.startswith('(SELECT'), \"The SQL should start with '(SELECT'.\")\n+        self.assertTrue(sql.endswith(')'), \"The SQL should end with ')'.\")\n+        self.assertIn('\"employees_employee\"', sql, \"SQL should contain the table name.\")\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..c66de4a 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,26 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +184,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..84f97b8 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -6,6 +7,8 @@ import platform\n from threading import Timer\n from types import SimpleNamespace\n import warnings\n+import pickle\n+import matplotlib.pyplot as plt\n \n import numpy as np\n import pytest\n@@ -15,6 +18,17 @@ import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n+\n+def test_dpi_not_doubled_after_unpickling():\n+    fig = plt.figure(dpi=200)\n+    # Save the figure using pickle\n+    fig_pickled = pickle.dumps(fig)\n+\n+    # Load the figure back\n+    fig_unpickled = pickle.loads(fig_pickled)\n+\n+    # Assert that the DPI remains the same after unpickling\n+    assert fig_unpickled.dpi == 200, f\"Expected DPI 200, got {fig_unpickled.dpi}\"\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..f2929ef 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn import PairGrid\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,18 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_scatterplot_with_hue(self):\n+        \"\"\"Test PairGrid with scatterplot and hue argument in map.\"\"\"\n+\n+        import seaborn as sns\n+        import pytest\n+\n+        iris = sns.load_dataset(\"iris\")\n+        g = PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+\n+        # This is where the issue arises in seaborn 0.11.1 when using hue in map.\n+        with pytest.raises(TypeError):\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..dd110d7 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Test using the proposed shorthand '-C'\n+        result = testdir.runpytest(\"-C\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Test using the proposed shorthand '-C'\n+        result = testdir.runpytest(\"-C\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..0b9743c 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,16 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, symbols, MatrixSymbol, Identity, Sum\n \n def test_Identity_doit():\n+    # Added test case for verifying the sum of all elements in identity matrix\n+    i, j = symbols('i j')\n+    n = Symbol('n', integer=True, positive=True)\n+    In = Identity(n)\n+\n+    # Check if the sum of all elements in the identity matrix is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).subs(n, 3).doit() == 3\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex b711aa3..24b6b67 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -486,8 +486,35 @@ class Point(object):\n         5*N.x + 10*q'*B.y\n \n         \"\"\"\n+        from sympy import dynamicsymbols\n+        from sympy.physics.vector import ReferenceFrame, Point, validate\n+        from sympy.testing.pytest import raises\n \n-        _check_frame(outframe)\n+        def test_enhanced_point_vel():\n+            t = dynamicsymbols._t\n+            q = dynamicsymbols('q')\n+\n+            # Setting up reference frames\n+            A = ReferenceFrame('A')\n+            B = A.orientnew('B', 'Axis', (q, A.x))\n+\n+            # Setting initial points\n+            P = Point('P')\n+            Q = Point('Q')\n+\n+            # Relative position vector\n+            r = q * A.x + 2 * q * A.y\n+            Q.set_pos(P, r)\n+\n+            # Check automatic velocity calculation\n+            # This should auto-calculate the velocity as derivative of the position vector\n+            assert Q.vel(A) == q.diff(t) * A.x + 2 * q.diff(t) * A.y\n+\n+            # Ensure the velocity isn't defined directly in the frame\n+            R = ReferenceFrame('R')\n+            raises(ValueError, lambda: Q.vel(R))  # Velocity in unrelated frame\n+\n+        test_enhanced_point_vel()\n         _check_frame(fixedframe)\n         self._check_point(otherpoint)\n         dist = self.pos_from(otherpoint)\n",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..6fd96b4 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -246,6 +246,14 @@ GOOD_PAIRS = [\n ]\n \n \n+from sympy.parsing.latex import parse_latex\n+\n+def test_issue_with_fraction_parsing():\n+    # This test case checks if the issue with fraction parsing is resolved\n+    input_latex = \"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\"\n+    expected_output = \"((a**3 + b)/c)/(1/(c**2))\"\n+    assert str(parse_latex(input_latex)) == expected_output, f\"Failed to parse: {input_latex}\"\n+\n def test_parseable():\n     from sympy.parsing.latex import parse_latex\n     for latex_str, sympy_expr in GOOD_PAIRS:\n"
}