{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..47d14d7 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -52,7 +52,14 @@ compound_models = {\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n-            )\n+            ),\n+    # Test case for the issue with nested CompoundModels\n+    'nested_cm': (m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5)),\n+                  (np.array([False, False, True, True]),\n+                   np.array([[True,  True, False, False],\n+                             [True,  True, False, False],\n+                             [False, False, True, False],\n+                             [False, False, False, True]])))\n }\n \n \n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..49c73c0 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,73 @@\n+\n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing a table to RST format with header rows specified\"\"\"\n+    tbl = QTable({\n+        'wave': [350, 950] * u.nm,\n+        'response': [0.7, 1.2] * u.ct\n+    })\n+    expected_lines = [\n+        \"===== ========\",\n+        \" wave response\",\n+        \"===== ========\",\n+        \"350.0      0.7\",\n+        \"950.0      1.2\",\n+        \"===== ========\",\n+    ]\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\")\n+    assert out.getvalue().splitlines() == expected_lines\n+\n+def test_write_rst_with_custom_header_rows():\n+    \"\"\"Test writing a table to RST format with custom header rows (name, unit)\"\"\"\n+    tbl = QTable({\n+        'wave': [350, 950] * u.nm,\n+        'response': [0.7, 1.2] * u.ct\n+    })\n+    expected_lines = [\n+        \"===== ========\",\n+        \" wave response\",\n+        \"  nm      ct \",\n+        \"===== ========\",\n+        \"350.0      0.7\",\n+        \"950.0      1.2\",\n+        \"===== ========\",\n+    ]\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    assert out.getvalue().splitlines() == expected_lines\n+\n+def test_read_write_round_trip_with_custom_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+from io import StringIO\n+import astropy.units as u\n+from astropy.table import QTable\n+import numpy as np\n \n from .common import assert_almost_equal, assert_equal\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..9e45727 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -42,8 +42,54 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert table2.meta[\"comments\"][0].startswith(\"WT -- hardness\")\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n+import pytest\n+import numpy as np\n+from astropy.table import Table\n+from astropy.utils.exceptions import AstropyUserWarning\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n \n-def test_roundtrip(tmp_path):\n+@pytest.mark.parametrize(\"example_qdp, lower_case_expected\", [\n+    (\"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    \"\"\", False),\n+    (\"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    read terr 1\n+    read serr 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    \"\"\", True)\n+])\n+def test_lowercase_commands(tmp_path, example_qdp, lower_case_expected):\n+    path = str(tmp_path / \"test.qdp\")\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+    with pytest.warns(AstropyUserWarning) as record:\n+        table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n+    assert \"This file contains multiple command blocks\" not in str(record)\n+\n+    expected_vals = [\n+        (53000.123456, 2.37847222222222e-05, -2.37847222222222e-05, np.ma.masked, 0.212439),\n+        (55045.099887, 1.14467592592593e-05, -1.14467592592593e-05, 0.0, 0.0),\n+    ]\n+    for i, (mjd, mjd_perr, mjd_nerr, rate, rate_err) in enumerate(expected_vals):\n+        assert np.isclose(table[\"MJD\"][i], mjd)\n+        assert np.isclose(table[\"MJD_perr\"][i], mjd_perr)\n+        assert np.isclose(table[\"MJD_nerr\"][i], mjd_nerr)\n+        assert (table[\"Rate\"][i] is np.ma.masked) if rate is np.ma.masked else np.isclose(table[\"Rate\"][i], rate)\n+        assert (table[\"Rate_err\"][i] is np.ma.masked) if rate_err is np.ma.masked else np.isclose(table[\"Rate_err\"][i], rate_err)\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..8ffe220 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,64 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+import pytest\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n+\n+    # Additional test: add masked by constant (mask + no mask)\n+    np.testing.assert_equal(\n+        nref_masked.add(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # Additional test: subtract mask by no mask (mask - no mask)\n+    np.testing.assert_equal(\n+        nref_masked.subtract(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # Additional test: divide mask by constant (mask / no mask)\n+    np.testing.assert_equal(\n+        nref_masked.divide(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+# Original tests\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..600a96f 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,24 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_d_exponent_conversion(self):\n+        \"\"\"Test D exponents in ASCII table column formatting.\"\"\"\n+\n+        # Create a table with a single column that includes 'D' in the format\n+        r1 = np.array([11.11, 12.22, 13.33])\n+        c1 = fits.Column(name='def', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+        with open(self.temp('test_d_exponent.fits')) as f:\n+            content = f.read()\n+            assert '1.11100000000000000D+01' in content\n+            assert '1.22200000000000000D+01' in content\n+            assert '1.33300000000000000D+01' in content\n+\n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..fe5c054 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1102,6 +1102,14 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertIsNone(default_storage.file_permissions_mode)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n+    \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The FILE_UPLOAD_PERMISSIONS setting should default to 0o644 if not explicitly set.\n+        This is to test the default behavior for when the setting isn't configured.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n \n     def test_override_file_upload_directory_permissions(self):\n         \"\"\"\n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..379cf55 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -376,7 +376,65 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 2)\n \n-    def test_order_by_exists(self):\n+    def test_order_by_multiline_sql(self):\n+        \"\"\"\n+        Test the order by clause when using multiline RawSQL expressions\n+        to ensure similar clauses aren't mistakenly removed as duplicates.\n+        \"\"\"\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN num_employees > 1000\n+                     THEN num_chairs\n+                     ELSE 0 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN num_chairs > 1\n+                     THEN 1\n+                     ELSE 0 END\n+            ''', []).asc(),\n+        )\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [self.example_inc, self.gmbh, self.foobar_ltd],\n+                )\n+\n+    def test_order_by_similar_multiline_sql(self):\n+        \"\"\"\n+        Additional test case to check handling of similar multiline RawSQL\n+        in order by clauses.\n+        \"\"\"\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN status = 'active'\n+                     THEN 1\n+                     ELSE 2 END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN status = 'inactive'\n+                     THEN 2\n+                     ELSE 1 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN status = 'pending'\n+                     THEN 3\n+                     ELSE 0 END\n+            ''', []).asc(),\n+        )\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                # Adjust the expected order based on the logic of your queries\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [self.gmbh, self.foobar_ltd, self.example_inc],  # This needs correct expected order\n+                )\n         mary = Employee.objects.create(firstname='Mary', lastname='Mustermann', salary=20)\n         mustermanns_by_seniority = Employee.objects.filter(lastname='Mustermann').order_by(\n             # Order by whether the employee is the CEO of a company\n",
  "django__django-11039": "",
  "django__django-11049": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..979b018 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -232,7 +232,23 @@ class NumericPasswordValidatorTest(SimpleTestCase):\n \n \n class UsernameValidatorsTests(SimpleTestCase):\n-    def test_unicode_validator(self):\n+    def test_trailing_newline_unicode_validator(self):\n+        # Test that a trailing newline is invalid for Unicode usernames\n+        v = validators.UnicodeUsernameValidator()\n+        invalid_usernames = ['username\\n', 'user\\nname\\n']\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_trailing_newline_ascii_validator(self):\n+        # Test that a trailing newline is invalid for ASCII usernames\n+        v = validators.ASCIIUsernameValidator()\n+        invalid_usernames = ['username\\n', 'user\\nname\\n']\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['joe', 'Ren\u00e9', '\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30', '\u0623\u062d\u0645\u062f']\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n@@ -248,7 +264,23 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_trailing_newline_unicode_validator(self):\n+        # Test that a trailing newline is invalid for Unicode usernames\n+        v = validators.UnicodeUsernameValidator()\n+        invalid_usernames = ['username\\n', 'user\\nname\\n']\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_trailing_newline_ascii_validator(self):\n+        # Test that a trailing newline is invalid for ASCII usernames\n+        v = validators.ASCIIUsernameValidator()\n+        invalid_usernames = ['username\\n', 'user\\nname\\n']\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +290,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..33a732c 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -366,7 +366,10 @@ class HttpResponseTests(unittest.TestCase):\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n-    def test_iter_content(self):\n+    def test_memoryview_content(self):\n+        # Test memoryview object handling in HttpResponse\n+        r = HttpResponse(memoryview(b'memoryview content'))\n+        self.assertEqual(r.content, b'memoryview content')\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n \n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..0d64dd2 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,12 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n+\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -464,7 +467,27 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Test case to check that the primary key is set to None after deletion\n+        user = User.objects.create()\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(user))\n+        user.delete()\n+        self.assertIsNone(user.pk)\n+\n+    def test_fast_delete_multiple_instances_individual_delete(self):\n+        # Test individual deletion of multiple instances; their PKs should be None\n+        users = [User.objects.create() for _ in range(3)]\n+        for user in users:\n+            user.delete()\n+            self.assertIsNone(user.pk)\n+\n+    def test_fast_delete_multiple_instances_bulk_delete(self):\n+        # Bulk delete should still result in PKs being None for deleted instances\n+        users = [User.objects.create() for _ in range(3)]\n+        User.objects.filter(pk__in=[user.pk for user in users]).delete()\n+        for user in users:\n+            self.assertIsNone(user.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..b7f5b78 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.db import IntegrityError\n \n from .models import Proxy, UserProxy\n \n@@ -140,6 +142,35 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n+    def test_migrate_without_duplicate_permissions(self):\n+        \"\"\"\n+        Test that migration does not duplicate permission entries.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        \n+        # Attempt to create a duplicate entry before migration to simulate the condition\n+        with self.assertRaises(IntegrityError):\n+            Permission.objects.create(\n+                content_type=proxy_model_content_type,\n+                codename='add_proxy',\n+                name='Can add proxy',\n+            )\n+\n+        # Perform the migration\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+\n+        # Ensure that no duplicate is created post-migration\n+        permissions = Permission.objects.filter(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy'\n+        )\n+        self.assertEqual(permissions.count(), 1)\n+\n     def test_user_keeps_same_permissions_after_migrating_backward(self):\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..c84f2ed 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -9,6 +9,8 @@ import time\n import types\n import weakref\n import zipfile\n+import os\n+import sys\n from importlib import import_module\n from pathlib import Path\n from unittest import mock, skip, skipIf\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..9a5573f 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -6,6 +6,8 @@ import sys\n import tempfile\n import threading\n from io import StringIO\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from pathlib import Path\n from unittest import mock\n \n@@ -238,7 +240,36 @@ class DebugViewTests(SimpleTestCase):\n             m.assert_called_once_with(encoding='utf-8')\n \n \n-class DebugViewQueriesAllowedTests(SimpleTestCase):\n+class Debug404ConverterTests(SimpleTestCase):\n+    def test_technical_404_converter_with_http404(self):\n+        \"\"\"\n+        Ensure that raising Http404 in a path converter's to_python method \n+        results in a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_technical_404_converter_with_debug_false(self):\n+        \"\"\"\n+        Ensure that raising Http404 does not result in technical 404 response\n+        if DEBUG is False, and shows default error message.\n+        \"\"\"\n+        with override_settings(DEBUG=False):\n+            with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+                response = self.client.get('/path-post/1/')\n+                self.assertNotContains(response, 'Page not found')\n+                self.assertContains(response, 'A server error occurred', status_code=500)\n+\n+    def test_technical_404_converter_with_valueerror(self):\n+        \"\"\"\n+        Ensure that raising ValueError in a path converter's to_python method \n+        results in skipping to the next resolver without a 404 response.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=ValueError):\n+            response = self.client.get('/path-post/1/')\n+            self.assertNotContains(response, 'Page not found')\n+            self.assertEqual(response.status_code, 404)\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..054fc4c 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -80,6 +80,32 @@ class BinaryFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n \n @isolate_apps('invalid_models_tests')\n class CharFieldTests(SimpleTestCase):\n@@ -111,6 +137,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_negative_max_length(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=-1)\n@@ -124,6 +176,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_bad_max_length_value(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=\"bad\")\n@@ -137,6 +215,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_str_max_length_value(self):\n         class Model(models.Model):\n             field = models.CharField(max_length='20')\n@@ -150,6 +254,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_str_max_length_type(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=True)\n@@ -163,6 +293,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_non_iterable_choices(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=10, choices='bad')\n@@ -176,6 +332,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_non_iterable_choices_two_letters(self):\n         \"\"\"Two letters isn't a valid choice pair.\"\"\"\n         class Model(models.Model):\n@@ -191,6 +373,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_iterable_of_iterable_choices(self):\n         class ThingItem:\n             def __init__(self, value, display):\n@@ -272,6 +480,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_choices_named_group_bad_structure(self):\n         class Model(models.Model):\n             field = models.CharField(\n@@ -293,6 +527,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_choices_named_group_lazy(self):\n         class Model(models.Model):\n             field = models.CharField(\n@@ -317,6 +577,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_bad_validators(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=10, validators=[True])\n@@ -334,6 +620,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     @unittest.skipUnless(connection.vendor == 'mysql',\n                          \"Test valid only for MySQL\")\n     def test_too_long_char_field_under_mysql(self):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..2779db8 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -261,6 +261,17 @@ class WriterTests(SimpleTestCase):\n             A = b'a-value'\n             B = b'value-b'\n \n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            max_length=128,\n+        )\n+        serialized_field = MigrationWriter.serialize(field)[0]\n+        self.assertIn(\"default=migrations.test_writer.TranslatedEnum['GOOD']\", serialized_field)\n+\n         class IntEnum(enum.IntEnum):\n             A = 1\n             B = 2\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..cd98812 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -324,7 +326,40 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_year_less_than_70(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_year_handling(self, mocked_datetime):\n+        # Mock current date to control the '50 years in the future' logic.\n+        mocked_datetime.side_effect = lambda *args, **kw: datetime(*args, **kw)\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Simulating current year as 2023\n+        mocked_datetime.utcnow.return_value = datetime(2023, 10, 5)\n+\n+        # Test if year 69 is interpreted as 2069 (50 years ahead)\n+        parsed = parse_http_date('Tuesday, 31-Dec-69 08:49:37 GMT')\n+        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2069, 12, 31, 8, 49, 37))\n+\n+        # Test if year 70 is interpreted as 1970\n+        parsed = parse_http_date('Tuesday, 10-Nov-70 08:49:37 GMT')\n+        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1970, 11, 10, 8, 49, 37))\n+\n+        # Simulating current year as 2051 to test edge cases\n+        mocked_datetime.utcnow.return_value = datetime(2051, 7, 14)\n+\n+        # Test if year 01 is interpreted as 2001\n+        parsed = parse_http_date('Monday, 01-Jan-01 08:49:37 GMT')\n+        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2001, 1, 1, 8, 49, 37))\n+\n+        # Test if year 50 is interpreted as 1950\n+        parsed = parse_http_date('Monday, 01-Jan-50 08:49:37 GMT')\n+        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1950, 1, 1, 8, 49, 37))\n+\n+        # Simulating a current year in the past to test future year wrap-around\n+        mocked_datetime.utcnow.return_value = datetime(1969, 7, 14)\n+\n+        # Test if year 68 is interpreted as 2068 when current year is 1969\n+        parsed = parse_http_date('Thursday, 31-Dec-68 08:49:37 GMT')\n+        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2068, 12, 31, 8, 49, 37))\n         parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..ee4ce80 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,34 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.db import models\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class ChoicesTests(SimpleTestCase):\n+\n+    def test_textchoices_enum_value_type(self):\n+        obj = MyObject(my_str_value=MyChoice.FIRST_CHOICE)\n+        # Assert that the field value is of type str\n+        self.assertIsInstance(obj.my_str_value, str)\n+        # Assert that the enum value is returned correctly\n+        self.assertEqual(obj.my_str_value, \"first\")\n+        \n+    def test_textchoices_enum_retrieval_type(self):\n+        obj = MyObject.objects.create(my_str_value=MyChoice.SECOND_CHOICE)\n+        retrieved_obj = MyObject.objects.last()\n+        # Assert that the stored value and retrieved value are the same type\n+        self.assertIsInstance(retrieved_obj.my_str_value, str)\n+        # Assert that the retrieved value is equal to the assigned value\n+        self.assertEqual(retrieved_obj.my_str_value, \"second\")\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..4a630a0 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -187,7 +187,34 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n \n-class GetChoicesTests(SimpleTestCase):\n+class OverrideGetFieldDisplayTests(TestCase):\n+    \n+    def test_overriding_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(\n+                \"foo\", choices=[(1, 'foo'), (2, 'bar')]\n+            )\n+            \n+            def get_foo_bar_display(self):\n+                return \"something\"\n+        \n+        # Create an instance of FooBar with foo_bar set to 1\n+        f = FooBar(foo_bar=1)\n+        \n+        # Test that the overridden method returns 'something'\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_get_FIELD_display_default(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(\n+                \"foo\", choices=[(1, 'foo'), (2, 'bar')]\n+            )\n+            \n+        # Create an instance of FooBar with foo_bar set to 1\n+        f = FooBar(foo_bar=1)\n+        \n+        # Test that the default method returns the label 'foo'\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 7b8648d..c7cbc8e 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -68,7 +68,30 @@ class SimplifiedURLTests(SimpleTestCase):\n                     r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n                 )\n \n-    def test_path_lookup_with_inclusion(self):\n+    def test_re_path_with_optional_format(self):\n+        match_html = resolve('/module/')\n+        self.assertEqual(match_html.url_name, 'modules')\n+        self.assertEqual(match_html.kwargs, {'format': 'html'})\n+        self.assertEqual(\n+            match_html.route,\n+            r'^module/(?P<format>(html|json|xml))?/?$',\n+        )\n+\n+        match_json = resolve('/module/json/')\n+        self.assertEqual(match_json.url_name, 'modules')\n+        self.assertEqual(match_json.kwargs, {'format': 'json'})\n+        self.assertEqual(\n+            match_json.route,\n+            r'^module/(?P<format>(html|json|xml))?/?$',\n+        )\n+\n+        match_missing = resolve('/module/')\n+        self.assertEqual(match_missing.url_name, 'modules')\n+        self.assertEqual(match_missing.kwargs, {'format': 'html'})\n+        self.assertEqual(\n+            match_missing.route,\n+            r'^module/(?P<format>(html|json|xml))?/?$',\n+        )\n         match = resolve('/included_urls/extra/something/')\n         self.assertEqual(match.url_name, 'inner-extra')\n         self.assertEqual(match.route, 'included_urls/extra/<extra>/')\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..67bf250 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -147,8 +148,9 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.test import TestCase\n \n-class GetFieldDisplayTests(SimpleTestCase):\n+class GetFieldDisplayTests(SimpleTestCase, TestCase):\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..d9dad03 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,3 +1,4 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n@@ -75,6 +76,29 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_sublanguage_uses_base_language(self):\n+        tests = [\n+            ('de-at', 'de'),  # de-at should fall back to de\n+            ('es-mx', 'es'),  # es-mx (not explicitly provided) should fall back to es\n+            ('fr-ca', 'fr'),  # fr-ca should not raise any error as fr is available\n+            ('ca-es-valencia', 'ca'),  # complex variant should fall back to ca\n+        ]\n+        for tag, expected_base in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(\n+                    check_language_settings_consistent(None), [],\n+                    msg=f\"{tag} should fallback to the base {expected_base} without raising translation.E004\"\n+                )\n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..0398809 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -175,8 +175,23 @@ class UtilsTests(SimpleTestCase):\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n-\n-    def test_number_formats_display_for_field(self):\n+    from django.contrib.admin.utils import display_for_field\n+    from django.db import models\n+\n+    def test_json_field_display_for_field_readonly(self):\n+        tests = [\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),\n+            ({\"a\": {\"b\": \"c\"}}, '{\"a\": {\"b\": \"c\"}}'),\n+            ([\"x\", \"y\"], '[\"x\", \"y\"]'),\n+            ('string', '\"string\"'),\n+            ({\"tuple_key\": ('a', 'b')}, '{\"tuple_key\": [\"a\", \"b\"]}'),  # Expecting conversion of non-JSON key to JSON compliant format\n+        ]\n+        for value, expected in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    expected,\n+                )\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..b845c90 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -17,6 +19,54 @@ def get_connection_copy():\n     )\n     return test_connection\n \n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        # Clear existing data\n+        Object.objects.all().delete()\n+        ObjectReference.objects.all().delete()\n+\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        \n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_non_circular_reference(self):\n+        # Test non-circular references deserialization\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": null}\n+            }\n+        ]\n+        \"\"\"\n+        # Clear existing data\n+        ObjectReference.objects.all().delete()\n+\n+        connection.creation.deserialize_db_from_string(data)\n+        obj_ref = ObjectReference.objects.get(pk=2)\n+        \n+        self.assertIsNone(obj_ref.obj)\n \n class TestDbSignatureTests(SimpleTestCase):\n     def test_default_name(self):\n",
  "django__django-12497": "",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..36b38f5 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1241,6 +1241,97 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            \"foo\": \"value\",\n+            \"secret\": \"value\",\n+            \"token\": \"value\",\n+            \"something\": [\n+                {\"foo\": \"value\", \"secret\": \"value\", \"token\": \"value\"},\n+                {\"foo\": \"value\", \"secret\": \"value\", \"token\": \"value\"},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\", \"secret\": \"value\", \"token\": \"value\"},\n+                    {\"foo\": \"value\", \"secret\": \"value\", \"token\": \"value\"},\n+                ],\n+                [\n+                    {\"foo\": \"value\", \"secret\": \"value\", \"token\": \"value\"},\n+                    {\"foo\": \"value\", \"secret\": \"value\", \"token\": \"value\"},\n+                ],\n+            ]\n+        }\n+        expected_cleansed = {\n+            \"foo\": \"value\",\n+            \"secret\": reporter_filter.cleansed_substitute,\n+            \"token\": reporter_filter.cleansed_substitute,\n+            \"something\": [\n+                {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute, \"token\": reporter_filter.cleansed_substitute},\n+                {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute, \"token\": reporter_filter.cleansed_substitute},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute, \"token\": reporter_filter.cleansed_substitute},\n+                    {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute, \"token\": reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute, \"token\": reporter_filter.cleansed_substitute},\n+                    {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute, \"token\": reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            expected_cleansed,\n+        )\n+\n+    def test_get_safe_settings_with_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        settings.MY_SETTING = {\n+            \"foo\": \"value\",\n+            \"secret\": \"value\",\n+            \"token\": \"value\",\n+            \"something\": [\n+                {\"foo\": \"value\", \"secret\": \"value\", \"token\": \"value\"},\n+                {\"foo\": \"value\", \"secret\": \"value\", \"token\": \"value\"},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\", \"secret\": \"value\", \"token\": \"value\"},\n+                    {\"foo\": \"value\", \"secret\": \"value\", \"token\": \"value\"},\n+                ],\n+                [\n+                    {\"foo\": \"value\", \"secret\": \"value\", \"token\": \"value\"},\n+                    {\"foo\": \"value\", \"secret\": \"value\", \"token\": \"value\"},\n+                ],\n+            ]\n+        }\n+\n+        expected_cleansed = {\n+            \"foo\": \"value\",\n+            \"secret\": reporter_filter.cleansed_substitute,\n+            \"token\": reporter_filter.cleansed_substitute,\n+            \"something\": [\n+                {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute, \"token\": reporter_filter.cleansed_substitute},\n+                {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute, \"token\": reporter_filter.cleansed_substitute},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute, \"token\": reporter_filter.cleansed_substitute},\n+                    {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute, \"token\": reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute, \"token\": reporter_filter.cleansed_substitute},\n+                    {\"foo\": \"value\", \"secret\": reporter_filter.cleansed_substitute, \"token\": reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+\n+        safe_settings = reporter_filter.get_safe_settings()\n+        self.assertEqual(safe_settings[\"MY_SETTING\"], expected_cleansed)\n+\n     def test_cleanse_setting_recurses_in_dictionary(self):\n         reporter_filter = SafeExceptionReporterFilter()\n         initial = {'login': 'cooper', 'password': 'secret'}\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..5e816ea 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,31 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_with_unique_together(self):\n+        # Setting up initial state with unique_together\n+        app_label = 'test_alter_ix_uniq'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        \n+        # Adding index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Removing index_together should not affect unique_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..3a42026 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -696,8 +696,25 @@ class FastDeleteTests(TestCase):\n                 User.objects.filter(avatar__desc='missing').delete(),\n                 (0, {'delete.User': 0})\n             )\n+    def test_queryset_delete_no_objects_with_fk(self):\n+        \"\"\"\n+        QuerySet.delete() should return consistent results when no objects are deleted,\n+        specifically for models with foreign keys.\n+        \"\"\"\n+        # Assume \"H\" is a model with a foreign key to another model.\n+        deleted, deleted_objs = HiddenUser.objects.filter(id__in=[]).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {})\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_queryset_delete_no_objects_without_fk(self):\n+        \"\"\"\n+        QuerySet.delete() should return consistent results when no objects are deleted,\n+        specifically for models without foreign keys.\n+        \"\"\"\n+        # This uses \"R\" as a simple model without foreign keys.\n+        deleted, deleted_objs = R.objects.filter(id__in=[]).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {})\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..e9cbaac 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -94,6 +94,61 @@ class ASGITest(SimpleTestCase):\n             ),\n         )\n         await communicator.send_input({'type': 'http.request'})\n+\n+class TestASGIStaticFilesHandler(StaticFilesTestCase):\n+    async_request_factory = AsyncRequestFactory()\n+\n+    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.staticfiles'})\n+    @override_settings(\n+        STATIC_URL='/static/',\n+        STATIC_ROOT=Path(__file__).parent / 'project' / 'static',\n+        STATICFILES_DIRS=[Path(__file__).parent / 'project' / 'static'],\n+        STATICFILES_FINDERS=[\n+            'django.contrib.staticfiles.finders.FileSystemFinder',\n+        ],\n+    )\n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = Path(__file__).parent / 'project' / 'static' / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n         response_start = await communicator.receive_output()\n         self.assertEqual(response_start['type'], 'http.response.start')\n         self.assertEqual(response_start['status'], 200)\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..44b61da 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,23 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Test cases from original patch that should conform to issue description\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\t whitespace-in-value \\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore-in-value', False),\n+            ('__strip__underscore-value___', 'strip-underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+\n+            # Additional test cases to further verify fix\n+            ('___This is a test ---', 'this-is-a-test', False),  # Issue's example\n+            ('___Leading-underscores---', 'leading-underscores', False),\n+            ('---Trailing-dashes___', 'trailing-dashes', False),\n+            ('---Leading-and-Trailing---', 'leading-and-trailing', False),\n+            ('only____underscores____', 'only-underscores', False),\n+            ('---only---dashes---', 'only-dashes', False),\n+            ('mixed---___characters___---', 'mixed-characters', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..da0b5d6 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2830,7 +2830,61 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n-class FormFieldCallbackTests(SimpleTestCase):\n+from django.forms import ModelForm\n+from .models import Character, StumpJoke\n+from django.db.models import Q\n+\n+class CharacterDetailsTests(TestCase):\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Create characters\n+        marley = Character.objects.create(username='Marley', last_action='2023-10-01 10:00:00')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-01 12:00:00')\n+\n+        # Create jokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        # Add jokes to has_fooled_today\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        # Assert that the queryset does not have duplicate characters\n+        self.assertCountEqual(form.fields['character1'].queryset, [marley, threepwood])\n+        self.assertCountEqual(form.fields['character2'].queryset, [marley, threepwood])\n+        self.assertCountEqual(form.fields['character3'].queryset, [marley, threepwood])\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..7cf9f28 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -80,6 +80,36 @@ class BasicFieldTests(SimpleTestCase):\n         f = Foo._meta.get_field('a')\n         self.assertEqual(str(f), 'model_fields.Foo.a')\n \n+    def test_abstract_inherited_fields_distinct(self):\n+        \"\"\"Field instances from distinct models derived from the same abstract model should not be equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n     def test_field_ordering(self):\n         \"\"\"Fields are ordered based on their creation.\"\"\"\n         f1 = models.Field()\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..fee2577 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -46,6 +46,8 @@ class SiteEachContextTest(TestCase):\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n     def test_available_apps(self):\n+        from django.contrib.auth.models import User\n+        from admin_views.models import Article\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "diff --git a/tests/auth_tests/models/__init__.py b/tests/auth_tests/models/__init__.py\nindex c6505e4..9c233bf 100644\n--- a/tests/auth_tests/models/__init__.py\n+++ b/tests/auth_tests/models/__init__.py\n@@ -1,8 +1,10 @@\n+\n from .custom_permissions import CustomPermissionsUser\n from .custom_user import (\n     CustomUser, CustomUserWithoutIsActiveField, ExtensionUser,\n )\n from .invalid_models import CustomUserNonUniqueUsername\n+from .with_custom_email_field import CustomEmailField\n from .is_active import IsActiveTestUser1\n from .minimal import MinimalUser\n from .no_password import NoPasswordUser\n@@ -22,4 +24,4 @@ __all__ = (\n     'IntegerUsernameUser', 'IsActiveTestUser1', 'MinimalUser',\n     'NoPasswordUser', 'Organization', 'Proxy', 'UUIDUser', 'UserProxy',\n     'UserWithDisabledLastLoginField',\n-)\n+)\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..ad23a36 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -23,6 +23,8 @@ from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n@@ -1865,6 +1867,31 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('settings', 'alternate_settings'), ('traceback', False), \"\n             \"('verbosity', 1)]\" % option_b\n         )\n+# Test case to ensure the prog argument is used from the provided argv,\n+# not from sys.argv, when invoking the command parser.\n+class ExecuteFromCommandLineTestCase(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_main(self):\n+        \"\"\"\n+        Program name should be 'python -m django' when invoked as __main__.py\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['__main__.py'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n \n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..f90a02c 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -44,9 +45,49 @@ class ShellCommandTestCase(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, \"Couldn't import bpython interface.\"):\n             call_command('shell', interface='bpython')\n \n-    # [1] Patch select to prevent tests failing when when the test suite is run\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     # in parallel mode. The tests are run in a subprocess and the subprocess's\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..03a8845 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,7 +1013,23 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_verbose_name_only_should_infer_plural(self):\n+        class InlineWithOnlyVerboseName(TabularInline):\n+            model = Profile\n+            verbose_name = 'Custom Child'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [InlineWithOnlyVerboseName]\n+\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Verify that the inferred verbose_name_plural is used.\n+        self.assertContains(response, '<h2>Custom Children</h2>')\n+        self.assertContains(response, 'Add another Custom Child')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..12454eb 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -595,7 +595,30 @@ class TestQuerying(TestCase):\n             [self.objs[4]],\n         )\n \n-    def test_isnull_key_or_none(self):\n+    def test_isnull_key_none(self):\n+        # Resolve the issue that __isnull=True should not match JSON null values on SQLite and Oracle.\n+        # Check more cases where keys might be JSON null or absent.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+\n+        # Additional test cases for coverage\n+        # When the key is present and explicitly set to null it should not appear in isnull=True results\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__k__isnull=True),\n+            self.objs[:3],  # assuming objs[3] has {\"k\": null}\n+        )\n+\n+        # Ensure that __isnull=False identifies keys which are present, including those with JSON null values\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=False),\n+            [self.objs[4]],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__k__isnull=False),\n+            [self.objs[3], self.objs[4], self.objs[5]],\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "",
  "django__django-13925": "",
  "django__django-13933": "",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..19369c0 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,9 +1,18 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n \n class QTests(SimpleTestCase):\n-    def test_combine_and_empty(self):\n+    def test_combine_dict_keys_and_empty(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+    def test_combine_dict_keys_or_empty(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         q = Q(x=1)\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..f368dfa 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,12 +28,14 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n+from django.db.models import Q, OuterRef, Exists\n from django.utils.functional import SimpleLazyObject\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n     RemoteEmployee, Result, SimulationRun, Time,\n )\n+from django.db.models import Q, OuterRef, Exists\n \n \n class BasicExpressionsTests(TestCase):\n@@ -794,7 +796,22 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n-    def test_boolean_expression_combined(self):\n+    def test_q_and_exists_commutativity(self):\n+        \"\"\"The & and | operators should be commutative for Q and Exists pairs.\"\"\"\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        # Testing various commutative combinations\n+        conditions = [\n+            (Q() & Exists(is_ceo), Exists(is_ceo) & Q()),\n+            (Q() & Exists(is_poc), Exists(is_poc) & Q()),\n+            (Q() | Exists(is_ceo), Exists(is_ceo) | Q()),\n+            (Q() | Exists(is_poc), Exists(is_poc) | Q())\n+        ]\n+        \n+        for q_exp, exists_exp in conditions:\n+            with self.subTest(q_exp=q_exp, exists_exp=exists_exp):\n+                self.assertCountEqual(Employee.objects.filter(q_exp), Employee.objects.filter(exists_exp))\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14155": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..58fa095 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,18 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +94,18 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..e50f512 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2206,6 +2206,19 @@ class StartApp(AdminScriptTestCase):\n             \"another directory.\"\n         )\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Ensure that startapp does not fail when the directory name ends with a trailing slash.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2')\n+        os.makedirs(app_dir, exist_ok=True)\n+        _, err = self.run_django_admin(['startapp', 'app2', os.path.join('apps', 'app2', '')])\n+        self.assertNoOutput(err)\n+        self.assertTrue(\n+            os.path.exists(os.path.join(app_dir, 'apps.py')),\n+            msg=\"App directory was not created successfully with a trailing slash.\"\n+        )\n+\n     def test_overlaying_app(self):\n         # Use a subdirectory so it is outside the PYTHONPATH.\n         os.makedirs(os.path.join(self.test_dir, 'apps/app1'))\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..ae8b8b3 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -8,6 +8,7 @@ from django.contrib.auth.forms import (\n     SetPasswordForm, UserChangeForm, UserCreationForm,\n )\n from django.contrib.auth.models import User\n+from django.forms import forms\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n from django.core import mail\n@@ -1020,6 +1021,22 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    class ReadOnlyPasswordHashWidgetTest(TestCase):\n+\n+        def test_label_does_not_have_for_attribute(self):\n+            \"\"\"\n+            ReadOnlyPasswordHashWidget doesn't contain a for attribute in the\n+            <label> because it doesn't have any labelable elements.\n+            \"\"\"\n+            class TestForm(forms.Form):\n+                hash_field = ReadOnlyPasswordHashField()\n+\n+            bound_field = TestForm()['hash_field']\n+            # Check that the widget does not return an id for label since it's a read-only text\n+            self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+            # The label should not have the 'for' attribute.\n+            self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..5a0f5f7 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,43 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Test migration serialization to ensure necessary imports are present.\n+        \"\"\"\n+        class MockModel(models.Model):\n+            field = models.CharField(max_length=10)\n+        \n+        migration_writer = MigrationWriter(\"app_label\", \"MigrationName\", None, [], apps=None)\n+\n+        # The output should include 'from django.db import models'\n+        import_dict, _ = migration_writer.serialize(MockModel)\n+\n+        self.assertIn(\"from django.db import models\", import_dict)\n+\n+    def test_mixin_migration(self):\n+        \"\"\"\n+        Ensure migrations correctly serialize models with mixins and abstract base classes.\n+        \"\"\"\n+        class MyMixin:\n+            mixin_field = models.CharField(max_length=20)\n+        \n+        class MyBaseModel(models.Model):\n+            base_field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+        \n+        class MyModel(MyMixin, MyBaseModel):\n+            name = models.TextField(primary_key=True)\n+\n+        migration_writer = MigrationWriter(\"app_label\", \"MigrationName\", None, [], apps=None)\n+\n+        # The output should include the correct bases import\n+        import_dict, _ = migration_writer.serialize(MyModel)\n+        \n+        self.assertIn('from django.db import models', import_dict)\n+        self.assertIn('from myapp.models import MyMixin', import_dict)\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 0b8d2fa..105c7eb 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -3342,7 +3342,6 @@ class AdminViewListEditable(TestCase):\n             \"form-0-id\": str(self.per2.pk),\n             \"form-0-alive\": \"1\",\n             \"form-0-gender\": \"2\",\n-\n             \"_save\": \"Save\",\n         }\n         response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n@@ -3350,6 +3349,28 @@ class AdminViewListEditable(TestCase):\n         self.assertIsInstance(non_form_errors, ErrorList)\n         self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n \n+    def test_formset_nonform_class_applied(self):\n+        # Test to ensure 'nonform' CSS class is applied to non-form errors properly\n+        data = {\n+            'form-TOTAL_FORMS': '2',\n+            'form-INITIAL_FORMS': '0',\n+            'form-0-id': str(self.per2.pk),\n+            'form-0-alive': \"1\",\n+            'form-0-gender': \"1\",\n+            'form-1-id': str(self.per2.pk),\n+            'form-1-alive': \"0\",\n+            'form-1-gender': \"2\",\n+            \"_save\": \"Save\",\n+        }\n+        response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n+        formset = response.context['cl'].formset\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIn('nonform', str(non_form_errors))\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>Grace is not a Zombie</li></ul>'\n+        )\n+\n     def test_list_editable_ordering(self):\n         collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\n \n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..ebe067e 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -24,6 +24,17 @@ class M2mThroughTests(TestCase):\n         Membership.objects.create(person=self.jim, group=self.rock)\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n+    def test_many_to_many_rel_through_fields_hashable(self):\n+        # Test to ensure that through_fields attribute in ManyToManyRel is hashable\n+        event_invitation_field = Event._meta.get_field('invitees')\n+        # Attempt to compute the hash of through_fields, it should not raise TypeError\n+        try:\n+            hash(event_invitation_field.through_fields)\n+            is_hashable = True\n+        except TypeError:\n+            is_hashable = False\n+        self.assertTrue(is_hashable, \"through_fields should be hashable\")\n+\n         expected = ['Jane', 'Jim']\n         self.assertQuerysetEqual(\n             self.rock.members.all(),\n@@ -34,6 +45,17 @@ class M2mThroughTests(TestCase):\n     def test_get_on_intermediate_model(self):\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n+    def test_many_to_many_rel_through_fields_hashable(self):\n+        # Test to ensure that through_fields attribute in ManyToManyRel is hashable\n+        event_invitation_field = Event._meta.get_field('invitees')\n+        # Attempt to compute the hash of through_fields, it should not raise TypeError\n+        try:\n+            hash(event_invitation_field.through_fields)\n+            is_hashable = True\n+        except TypeError:\n+            is_hashable = False\n+        self.assertTrue(is_hashable, \"through_fields should be hashable\")\n+\n         queryset = Membership.objects.get(person=self.jane, group=self.rock)\n \n         self.assertEqual(\n",
  "django__django-14752": "",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..0d7a581 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -430,7 +430,34 @@ class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n-    def test_deny_decorator(self):\n+    def test_partial_decorator_preserves_attributes(self):\n+        \"\"\"@method_decorator preserves function attributes when used with functools.partial.\"\"\"\n+        # Define a basic function decorator\n+        def sample_decorator(func):\n+            @functools.wraps(func)\n+            def wrapper(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return wrapper\n+        \n+        # Creating a partial object of the decorator\n+        partial_decorator = functools.partial(sample_decorator)\n+        \n+        # Decorating method with method_decorator using partial\n+        class TestPartial:\n+            @method_decorator(partial_decorator)\n+            def method(self):\n+                \"\"\"Sample method.\"\"\"\n+                return \"Partial Test\"\n+        \n+        # Create an instance and call the method\n+        instance = TestPartial()\n+        result = instance.method()\n+\n+        # Assertions\n+        self.assertEqual(result, \"Partial Test\")\n+        self.assertEqual(instance.method.__name__, \"method\")\n+        self.assertIsNotNone(instance.method.__module__)\n+        self.assertEqual(instance.method.__doc__, \"Sample method.\")\n         \"\"\"\n         Ensures @xframe_options_deny properly sets the X-Frame-Options header.\n         \"\"\"\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..02d3a34 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,6 +343,32 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n+    def test_model_choice_iterator_value_in_dict(self):\n+        # Creating ModelChoiceIteratorValue instances\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Using values as dictionary keys to verify hashability\n+        some_dict = {\n+            value_1: \"choice 1\",\n+            value_2: \"choice 2\"\n+        }\n+        self.assertEqual(some_dict[value_1], \"choice 1\")\n+        self.assertEqual(some_dict[value_2], \"choice 2\")\n+\n+    def test_model_choice_iterator_value_in_set(self):\n+        # Creating ModelChoiceIteratorValue instances\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_same_as_value_1 = ModelChoiceIteratorValue(self.c1.pk, None)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Using values in a set\n+        value_set = {value_1, value_2}\n+        \n+        self.assertIn(value_1, value_set)\n+        self.assertIn(value_same_as_value_1, value_set)\n+        self.assertIn(value_2, value_set)\n+\n     def test_choices_not_fetched_when_not_rendering(self):\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..744e5dd 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -127,6 +127,22 @@ class MultiValueFieldTest(SimpleTestCase):\n         Test when the last widget's data has changed. This ensures that it is\n         not short circuiting while testing the widgets.\n         \"\"\"\n+\n+\n+    def test_multivaluefield_label_rendering(self):\n+        class MultiWidgetForm(Form):\n+            multivalue = SplitDateTimeField()\n+\n+        form = MultiWidgetForm()\n+        # Check the rendering of the label. It should not include an indexed 'for' attribute.\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_multivalue\">Multivalue:</label></th>\n+            <td><input type=\"text\" name=\"multivalue_0\" id=\"id_multivalue_0\" required>\n+            <input type=\"text\" name=\"multivalue_1\" id=\"id_multivalue_1\" required></td></tr>\n+            \"\"\"\n+        )\n         self.assertTrue(self.field.has_changed(\n             'some text,JP,2007-04-25 06:24:00',\n             ['some text', ['J', 'P'], ['2009-04-25', '11:44:00']],\n",
  "django__django-15202": "",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..0bae273 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -6,16 +6,19 @@ from django.db.models import (\n     BooleanField, Case, CharField, Count, DateTimeField, DecimalField, Exists,\n     ExpressionWrapper, F, FloatField, Func, IntegerField, Max, OuterRef, Q,\n     Subquery, Sum, Value, When,\n+    ExpressionWrapper, fields,\n )\n from django.db.models.expressions import RawSQL\n from django.db.models.functions import (\n     Coalesce, ExtractYear, Floor, Length, Lower, Trim,\n+    ExpressionWrapper, fields,\n )\n from django.test import TestCase, skipUnlessDBFeature\n from django.test.utils import register_lookup\n \n from .models import (\n     Author, Book, Company, DepartmentStore, Employee, Publisher, Store, Ticket,\n+    ExpressionWrapper, fields,\n )\n \n \n@@ -103,7 +106,25 @@ class NonAggregateAnnotationTestCase(TestCase):\n         cls.s2.books.add(cls.b1, cls.b3, cls.b5, cls.b6)\n         cls.s3.books.add(cls.b3, cls.b4, cls.b6)\n \n-    def test_basic_annotation(self):\n+    def test_negated_empty_expression_annotation(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_negated_empty_expression_annotation_with_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    def test_aggregate_over_negated_empty_expression_annotation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n         books = Book.objects.annotate(is_book=Value(1))\n         for book in books:\n             self.assertEqual(book.is_book, 1)\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..fde9e13 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -163,7 +164,16 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_extra_tags_preservation(self):\n+        \"\"\"\n+        Test that a message's extra_tags attribute is correctly preserved\n+        when it is an empty string after encoding and decoding.\n+        \"\"\"\n+        storage = self.get_storage()\n+        original_message = Message(constants.INFO, 'Test message', extra_tags=\"\")\n+        encoded_message = storage._encode(original_message)\n+        decoded_message = storage._decode(encoded_message)\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "",
  "django__django-15400": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\nindex f0097c4..4a76ef6 100644\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -297,6 +297,23 @@ class LazyObjectTestCase(TestCase):\n         self.assertIs(obj._wrapped, empty)\n         self.assertIs(obj2._wrapped, empty)\n \n+    def test_radd_string(self):\n+        obj = self.lazy_wrap(\"world\")\n+        self.assertEqual(\"hello \" + obj, \"hello world\")\n+\n+    def test_radd_list(self):\n+        obj = self.lazy_wrap([2, 3])\n+        self.assertEqual([1] + obj, [1, 2, 3])\n+\n+    def test_radd_nonexistent_method(self):\n+        # Test with an object that doesn't support addition.\n+        class NonAddable:\n+            pass\n+\n+        obj = self.lazy_wrap(NonAddable())\n+        with self.assertRaises(TypeError):\n+            result = 1 + obj\n+\n \n class SimpleLazyObjectTestCase(LazyObjectTestCase):\n     # By inheriting from LazyObjectTestCase and redefining the lazy_wrap()\n",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..4ae5184 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,27 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        An empty string for If-Modified-Since header should be handled properly,\n+        returning True to indicate the content may have changed (as it cannot be determined).\n+        \"\"\"\n+        self.assertTrue(was_modified_since(\"\", mtime=1))\n+        \n+    def test_was_modified_since_null_header(self):\n+        \"\"\"\n+        None value for If-Modified-Since header should be treated as no header,\n+        returning True to indicate the content may have changed.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(None, mtime=1))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        An invalid date string for If-Modified-Since header should return True,\n+        indicating the content may have been modified.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(\"invalid-date\", mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..ab648f0 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,7 +1,9 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n \n+from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter\n from admin_scripts.tests import AdminScriptTestCase\n \n from django.apps import apps\n@@ -411,7 +413,30 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_formatter_in_command_help(self):\n+        \"\"\"\n+        Test that the custom formatter is applied and outputs are correctly formatted.\n+        \"\"\"\n+        class CustomCommand(BaseCommand):\n+            help = (\n+                \"Import a contract from tzkt\\n\"\n+                \"Example usage:\\n\"\n+                \"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+            )\n+        \n+        command = CustomCommand()\n+        parser = command.create_parser('manage.py', 'tzkt_import')\n+        self.assertIs(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+\n+        # Simulate parser's help output capturing.\n+        with mock.patch('sys.stdout', new_callable=StringIO) as mocked_stdout:\n+            parser.print_help()\n+            help_output = mocked_stdout.getvalue()\n+\n+        # Ensure the help section includes properly formatted help and epilog.\n+        self.assertIn(\"Import a contract from tzkt\", help_output)\n+        self.assertIn(\"Example usage:\", help_output)\n+        self.assertIn(\"./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\", help_output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..a15471d 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -211,7 +214,40 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_with_content(self):\n+        class CustomJSONEncoder(DjangoJSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.strftime('%Y-%m-%d')\n+                return super().default(obj)\n+\n+        test_date = datetime(2023, 10, 1)\n+        data = {'date': test_date}\n+        expected_script = '<script type=\"application/json\">{\"date\": \"2023-10-01\"}</script>'\n+\n+        self.assertHTMLEqual(\n+            json_script(data, encoder=CustomJSONEncoder),\n+            expected_script\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        data = {'key': 'value'}\n+        expected_script = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+\n+        self.assertHTMLEqual(\n+            json_script(data),\n+            expected_script\n+        )\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n",
  "django__django-15790": "",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..4922cfe 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,9 +398,18 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n-\n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n+from django.test import TestCase\n+from .models import ProxyCustomModel, AnotherModel\n+\n+class ProxyModelQuerysetTests(TestCase):\n+    def setUp(self):\n+        self.custom_model = ProxyCustomModel.objects.create(name=\"Proxy\")\n+\n+    def test_select_related_only_on_proxy(self):\n+        related_instance = AnotherModel.objects.create(custom=self.custom_model)\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result_instance = queryset.get()\n+        self.assertEqual(result_instance.custom.name, \"Proxy\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..2b9c090 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,6 +152,11 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        # Correct the order of the parameters, passing parameters before dbname.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +188,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..ba88717 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,12 +1901,38 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n-\n-        with isolate_lru_cache(get_default_renderer), self.settings(\n-            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n-        ), self.assertRaisesMessage(\n-            RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n-        ):\n-            ChoiceFormSet = formset_factory(Choice)\n-            formset = ChoiceFormSet()\n-            str(formset)\n+        import warnings\n+        from django.test import SimpleTestCase\n+        from django.forms import formset_factory, BaseFormSet\n+        from django.forms.renderers import get_default_renderer\n+        from .forms import Choice\n+\n+        class TestFormsetDeprecation(SimpleTestCase):\n+\n+            def test_no_management_form_warning(self):\n+                \"\"\"\n+                Management forms should not raise the deprecation warning\n+                as they use only hidden inputs.\n+                \"\"\"\n+                with isolate_lru_cache(get_default_renderer), self.settings(\n+                    FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+                ):\n+                    ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                    formset = ChoiceFormSet()\n+                    with warnings.catch_warnings(record=True) as w:\n+                        warnings.simplefilter(\"always\")  # To catch all warnings\n+                        str(formset.management_form)\n+                        self.assertEqual(len(w), 0, \"Deprecation warning raised for management form when it should not.\")\n+\n+            def test_default_template_deprecation_warning(self):\n+                \"\"\"\n+                Normal form rendering using deprecated template should raise the deprecation warning.\n+                \"\"\"\n+                with isolate_lru_cache(get_default_renderer), self.settings(\n+                    FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+                ), self.assertRaisesMessage(\n+                    RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n+                ):\n+                    ChoiceFormSet = formset_factory(Choice)\n+                    formset = ChoiceFormSet()\n+                    str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..b2f9f5a 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -179,6 +179,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        # Test that empty_permitted is always True for empty_form, regardless of the form_kwargs setting.\n+        FormSet = formset_factory(CustomKwargForm)\n+        \n+        # Test with empty_permitted set to False\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+        \n+        # Test with empty_permitted set to True (should behave the same way)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n     def test_formset_validation(self):\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..6994fd8 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,19 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_null_value(self):\n+        # Test with empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        # Test with None value\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+        # Test with a string that looks like a number\n+        self.assertEqual(nformat(\"0\", \".\"), \"0\")\n+        # Test with zero\n+        self.assertEqual(nformat(0, \".\"), \"0\")\n+        # Test with a negative zero\n+        self.assertEqual(nformat(-0, \".\"), \"0\")\n+        # Test with None and custom formatting symbols\n+        self.assertEqual(nformat(None, \",\", decimal_pos=2), \"None\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..4435259 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,6 +25,7 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n \n from .models.custom_user import (\n@@ -892,6 +894,28 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        # Ensure the password reset help text link is correct when accessed with to_field\n+\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..818d884 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -505,6 +505,23 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"</urlset>\"\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_sitemap_no_items_value_error(self):\n+        \"\"\"\n+        Test that a sitemap with a callable `lastmod` and no items does not raise a ValueError.\n+        \"\"\"\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        # Verify that response is 200 OK\n+        self.assertEqual(index_response.status_code, 200)\n+        # Check that the Last-Modified header is not present\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        # Check that the content is as expected even with no items\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/callable-lastmod/sitemap.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..17dd06a 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -5,6 +6,8 @@ from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n@@ -33,7 +36,76 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n+    def test_save_as_new_permission_logic(self):\n+        # Test without add and change permissions\n+        no_perm_user = User.objects.create_user(\n+            username=\"no_perm_user\", password=\"secret\", is_staff=True\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = no_perm_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Test with only add permission\n+        add_only_user = User.objects.create_user(\n+            username=\"add_only_user\", password=\"secret\", is_staff=True\n+        )\n+        add_only_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+        )\n+        request.user = add_only_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Test with only change permission\n+        change_only_user = User.objects.create_user(\n+            username=\"change_only_user\", password=\"secret\", is_staff=True\n+        )\n+        change_only_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = change_only_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..3d9cc22 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -66,11 +67,16 @@ class FunctionTests(SimpleTestCase):\n             \"&lt;a&gt;&lt;br&gt;&lt;img&gt;&lt;br&gt;&lt;/a&gt;\",\n         )\n \n-    def test_autoescape_off(self):\n-        self.assertEqual(\n-            join([\"<a>\", \"<img>\", \"</a>\"], \"<br>\", autoescape=False),\n-            \"<a>&lt;br&gt;<img>&lt;br&gt;</a>\",\n-        )\n+    def test_join_autoescape_off(self):\n+        # Test with autoescape turned off in a template context\n+        @setup({\"join_autoescape_off\": '{% autoescape off %}{{ a|join:b }}{% endautoescape %}'})\n+        def run_test(self):\n+            output = self.engine.render_to_string(\n+                \"join_autoescape_off\", \n+                {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"b\": \"<br/>\"}\n+            )\n+            self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n+        run_test(self)\n \n     def test_noniterable_arg(self):\n         obj = object()\n@@ -78,4 +84,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..618e509 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -570,6 +570,24 @@ class BulkCreateTests(TestCase):\n             )\n \n     def _test_update_conflicts_two_fields(self, unique_fields):\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"pk\"],\n+            update_fields=[\"name\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=unique_fields,\n+            update_fields=[\"name\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         TwoFields.objects.bulk_create(\n             [\n                 TwoFields(f1=1, f2=1, name=\"a\"),\n@@ -582,6 +600,24 @@ class BulkCreateTests(TestCase):\n             TwoFields(f1=1, f2=1, name=\"c\"),\n             TwoFields(f1=2, f2=2, name=\"d\"),\n         ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"pk\"],\n+            update_fields=[\"name\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=unique_fields,\n+            update_fields=[\"name\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         TwoFields.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n@@ -613,6 +649,24 @@ class BulkCreateTests(TestCase):\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n     def test_update_conflicts_unique_fields_pk(self):\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"pk\"],\n+            update_fields=[\"name\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=unique_fields,\n+            update_fields=[\"name\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         TwoFields.objects.bulk_create(\n             [\n                 TwoFields(f1=1, f2=1, name=\"a\"),\n@@ -627,6 +681,24 @@ class BulkCreateTests(TestCase):\n             TwoFields(pk=obj1.pk, f1=3, f2=3, name=\"c\"),\n             TwoFields(pk=obj2.pk, f1=4, f2=4, name=\"d\"),\n         ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"pk\"],\n+            update_fields=[\"name\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=unique_fields,\n+            update_fields=[\"name\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         TwoFields.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n@@ -680,6 +752,15 @@ class BulkCreateTests(TestCase):\n                 description=(\"Japan is an island country in East Asia.\"),\n             ),\n         ]\n+        results = Country.objects.bulk_create(\n+            new_data,\n+            update_conflicts=True,\n+            update_fields=[\"description\"],\n+            unique_fields=unique_fields,\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         Country.objects.bulk_create(\n             new_data,\n             update_conflicts=True,\n@@ -729,6 +810,24 @@ class BulkCreateTests(TestCase):\n         self._test_update_conflicts_unique_two_fields([])\n \n     def _test_update_conflicts(self, unique_fields):\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects + [UpsertConflict(number=4, rank=4, name=\"Mark\")],\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=unique_fields,\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=unique_fields,\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         UpsertConflict.objects.bulk_create(\n             [\n                 UpsertConflict(number=1, rank=1, name=\"John\"),\n@@ -743,6 +842,24 @@ class BulkCreateTests(TestCase):\n             UpsertConflict(number=2, rank=2, name=\"Olivia\"),\n             UpsertConflict(number=3, rank=1, name=\"Hannah\"),\n         ]\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects + [UpsertConflict(number=4, rank=4, name=\"Mark\")],\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=unique_fields,\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=unique_fields,\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         UpsertConflict.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n@@ -759,6 +876,24 @@ class BulkCreateTests(TestCase):\n             ],\n         )\n \n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects + [UpsertConflict(number=4, rank=4, name=\"Mark\")],\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=unique_fields,\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=unique_fields,\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         UpsertConflict.objects.bulk_create(\n             conflicting_objects + [UpsertConflict(number=4, rank=4, name=\"Mark\")],\n             update_conflicts=True,\n@@ -791,6 +926,15 @@ class BulkCreateTests(TestCase):\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n     def test_update_conflicts_unique_fields_update_fields_db_column(self):\n+        results = FieldsWithDbColumns.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"rank\"],\n+            update_fields=[\"name\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         FieldsWithDbColumns.objects.bulk_create(\n             [\n                 FieldsWithDbColumns(rank=1, name=\"a\"),\n@@ -803,6 +947,15 @@ class BulkCreateTests(TestCase):\n             FieldsWithDbColumns(rank=1, name=\"c\"),\n             FieldsWithDbColumns(rank=2, name=\"d\"),\n         ]\n+        results = FieldsWithDbColumns.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"rank\"],\n+            update_fields=[\"name\"],\n+        )\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         FieldsWithDbColumns.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n@@ -816,4 +969,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..b18654d 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -457,6 +457,29 @@ class WriterTests(SimpleTestCase):\n         )\n \n     def test_serialize_nested_class(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        # Assert that the method can be serialized correctly\n+        self.assertSerializedResultEqual(\n+            Profile.Capability.default,\n+            (\n+                \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         for nested_cls in [self.NestedEnum, self.NestedChoices]:\n             cls_name = nested_cls.__name__\n             with self.subTest(cls_name):\n@@ -1032,4 +1055,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..1a3081f 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -12,9 +12,29 @@ from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n-\n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_false_3d(fig_test, fig_ref):\n+    # Test case for checking set_visible(False) on 3D subplot\n+    ax = fig_test.add_subplot(1, 1, 1, projection='3d')\n+    ax.scatter([0], [0], [0])\n+    ax.set_visible(False)\n+\n+    # Reference: the same plot but without setting visibility to False\n+    ax_ref = fig_ref.add_subplot(1, 1, 1, projection='3d')\n+    ax_ref.scatter([0], [0], [0])\n+\n+    # The test will pass if fig_test is blank, while fig_ref is not.\n+\n+def test_invisible_axes_3d():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111, projection='3d')\n+    assert fig.canvas.inaxes((200, 200)) is not None\n+    ax.set_visible(False)\n+    assert fig.canvas.inaxes((200, 200)) is None\n \n \n mpl3d_image_comparison = functools.partial(\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..1a90c19 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1786,8 +1786,45 @@ def test_text_3d(fig_test, fig_ref):\n     assert t3d.get_position_3d() == (0.5, 0.5, 1)\n \n \n-@check_figures_equal(extensions=[\"png\"])\n-def test_pathpatch_3d(fig_test, fig_ref):\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+def test_line3d_attribute_error():\n+    # Test if plotting works with integer values\n+    x_s_0 = np.array([0, 1])\n+    x_e_0 = np.array([1, 2])\n+    y_s_0 = np.array([0, 1])\n+    y_e_0 = np.array([1, 2])\n+    z_s_0 = np.array([0, 1])\n+    z_e_0 = np.array([1, 2])\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    clr_list = 'r-'\n+\n+    for n in range(np.size(z_s_0, axis=0)):\n+        ax.plot([int(x_s_0[n]), int(x_e_0[n])],\n+                [int(y_s_0[n]), int(y_e_0[n])],\n+                [int(z_s_0[n]), int(z_e_0[n])], clr_list)\n+    plt.close(fig)\n+\n+def test_line3d_with_arrays_and_swapping():\n+    # Test if swapping between arrays and integers works without error\n+    x_s_0 = np.array([0, 1])\n+    x_e_0 = np.array([1, 2])\n+    y_s_0 = np.array([0, 1])\n+    y_e_0 = np.array([1, 2])\n+    z_s_0 = np.array([0, 1])\n+    z_e_0 = np.array([1, 2])\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.plot(x_s_0, y_s_0, z_s_0, 'g-')\n+    ax.plot([int(x_s_0[0]), int(x_e_0[0])],\n+            [int(y_s_0[0]), int(y_e_0[0])],\n+            [int(z_s_0[0]), int(z_e_0[0])], 'b-')\n+    plt.close(fig)\n     ax = fig_ref.add_subplot(projection=\"3d\")\n     path = Path.unit_rectangle()\n     patch = PathPatch(path)\n",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..1776f6c 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,7 +774,19 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n-def test_get_set_draggable():\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable_creation(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='Example line')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable_creation(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='Example line')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..ef4b5ea 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,25 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+\n+@pytest.mark.parametrize(\"constrained, expect_warning\", [\n+    (True, True),\n+    (False, False),\n+    ({}, True),\n+    ({'rect': None}, True)\n+])\n+def test_warning_with_constrained_layout(constrained, expect_warning):\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import pytest\n+    \n+    with pytest.warns(UserWarning) if expect_warning else pytest.warns(None):\n+        a = np.linspace(0, 2*np.pi, 100)\n+        b = np.sin(a)\n+        c = np.cos(a)\n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained)\n+        ax[0].plot(a, b)\n+        ax[1].plot(a, c)\n+        plt.subplots_adjust(wspace=0)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..d41d624 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -5,6 +6,7 @@ import pickle\n import numpy as np\n import pytest\n \n+import pickletools\n import matplotlib as mpl\n from matplotlib import cm\n from matplotlib.testing import subprocess_run_helper\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..f0f7ac9 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,6 +89,7 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickle\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..7375a81 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -7,6 +8,7 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n \n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n+from pandas.testing import assert_frame_equal\n \n \n class TestPolyFit:\n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..32f77dd 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,7 +1,8 @@\n+\n import json\n import os\n import textwrap\n-\n+import tomllib\n import pytest\n \n import flask\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..009dfff 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,39 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_with_none_encoding(self):\n+        \"\"\"Test iter_content with None encoding and `decode_unicode=True`.\"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = None\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Chunks should be str when decode_unicode=True even if encoding is None\"\n+\n+    def test_response_utf8_encoding(self):\n+        \"\"\"Test iter_content with UTF-8 encoding.\"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO('t\u00east c\u00f2ntent'.encode('utf-8'))\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Chunks should be str when decode_unicode=True and encoding is UTF-8\"\n+\n+    def test_response_no_decode(self):\n+        \"\"\"Test iter_content with decode_unicode=False to return bytes.\"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'test content')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"Chunks should be bytes when decode_unicode=False\"\n+\n+    def test_response_partial_read(self):\n+        \"\"\"Test iter_content processing partial data using chunk size.\"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = 'ascii'\n+        chunk_size = 4\n+        chunks = r.iter_content(chunk_size=chunk_size, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"All chunks should be decoded to str\"\n+        assert all(len(chunk) <= chunk_size for chunk in chunks), \"Each chunk should be at most chunk_size\"\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..62c71c6 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,6 +743,33 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    def test_allow_list_of_hooks_on_request_init(self):\n+        \"\"\"The hooks parameter of Request initialization should handle list of hooks.\"\"\"\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'X-Foo': 'foo'})\n+            return args\n+\n+        def add_bar_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'X-Bar': 'bar'})\n+            return args\n+        \n+        def dummy_hook(args):\n+            return args\n+\n+        def assert_hooks_type_and_callability(hooks):\n+            # Ensure hooks are stored as a list of callables\n+            for h in hooks['args']:\n+                assert isinstance(h, list) is False\n+                assert callable(h)\n+\n+        hooks = {'args': [add_foo_header, add_bar_header, dummy_hook]}\n+\n+        r = requests.models.Request(hooks=hooks)\n+        assert_hooks_type_and_callability(r.hooks)\n \n     def test_session_persistent_cookies(self):\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..4183570 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -400,6 +400,14 @@ def test_groupby_repr(obj, dim):\n         expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n \n+    # New test to check for trailing whitespace\n+    actual_str = str(obj.groupby(dim))\n+    assert not actual_str.endswith(\" \\n\"), \"Trailing whitespace found in string representation\"\n+\n+    # New test to check for trailing whitespace\n+    actual_str = str(obj.groupby(\"t.month\"))\n+    assert not actual_str.endswith(\" \\n\"), \"Trailing whitespace found in string representation\"\n+\n \n @pytest.mark.parametrize(\"obj\", [repr_da, repr_da.to_dataset(name=\"a\")])\n def test_groupby_repr_datetime(obj):\n@@ -410,6 +418,14 @@ def test_groupby_repr_datetime(obj):\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n \n+    # New test to check for trailing whitespace\n+    actual_str = str(obj.groupby(dim))\n+    assert not actual_str.endswith(\" \\n\"), \"Trailing whitespace found in string representation\"\n+\n+    # New test to check for trailing whitespace\n+    actual_str = str(obj.groupby(\"t.month\"))\n+    assert not actual_str.endswith(\" \\n\"), \"Trailing whitespace found in string representation\"\n+\n \n def test_groupby_drops_nans():\n     # GH2383\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..bd1b7bc 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -88,6 +88,17 @@ class TestFixme(CheckerTestCase):\n             MessageTest(msg_id=\"fixme\", line=2, args=\"CODETAG\", col_offset=17)\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n+    @set_config(notes=[\"???\", \"...\"])\n+    def test_punctuation_only_codetags(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                #...\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17),\n+            MessageTest(msg_id=\"fixme\", line=3, args=\"...\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n \n     def test_issue_2321_should_not_trigger(self) -> None:\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n@@ -119,4 +130,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..5b4f6e6 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -72,7 +72,8 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n \n \n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n-    \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n+    \"\"\"Check that we correctly raise a message on an unknown short option\n+    and ensure no traceback is included, only a friendly error message.\"\"\"\n     with pytest.raises(_UnrecognizedOptionError):\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..9a750c5 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,46 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_flag(self) -> None:\n+        \"\"\"Tests that ignore-paths are respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\",\n+                        \"--ignore-paths=^another_ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+                \n+    def test_ignore_paths_from_pyproject_toml(self) -> None:\n+        \"\"\"Tests that ignore-paths from pyproject.toml are respected during recursive scan.\"\"\"\n+        # This test assumes pyproject.toml is set with ignore-paths=^subdirectory/.*$\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        # not adding --ignore-paths explicitly to test pyproject.toml settings\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "",
  "pylint-dev__pylint-7993": "",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\nindex 82f0458..052b89c 100644\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -257,6 +257,36 @@ def test_log_cli_enabled_disabled(testdir, enabled):\n \n \n def test_log_cli_default_level(testdir):\n+    # Ensure that the updated DEFAULT_LOG_FORMAT is used in logging\n+    testdir.makepyfile(\n+        test_logging_format=\"\"\"\n+        import logging\n+\n+        logger = logging.getLogger('test_logger')\n+        logger.setLevel(logging.DEBUG)\n+\n+        ch = logging.StreamHandler()\n+        formatter = logging.Formatter('%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s')\n+        ch.setFormatter(formatter)\n+        logger.addHandler(ch)\n+\n+        def test_logging_format():\n+            logger.debug('Debug message')\n+            logger.info('Info message')\n+            logger.warning('Warning message')\n+    \"\"\"\n+    )\n+\n+    result = testdir.runpytest()\n+\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"*DEBUG    test_logger:test_logging_format.py:9 Debug message*\",\n+            \"*INFO     test_logger:test_logging_format.py:10 Info message*\",\n+            \"*WARNING  test_logger:test_logging_format.py:11 Warning message*\",\n+        ]\n+    )\n+    assert result.ret == 0\n     # Default log file level\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..3563e92 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,3 +1,4 @@\n+\n import os\n from xml.dom import minidom\n \n@@ -6,6 +7,8 @@ import py\n import pytest\n from _pytest.junitxml import LogXML\n from _pytest.reports import BaseReport\n+import platform\n+from datetime import datetime\n \n \n def runandparse(testdir, *args):\n@@ -157,7 +160,31 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_example():\n+                assert True\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        assert node is not None\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_example():\n+                assert True\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        assert node is not None\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..cb6ae5a 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -144,6 +144,46 @@ def test_repr_on_newstyle():\n     assert saferepr(Function())\n \n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n+def test_broken_repr():\n+    \"\"\"saferepr() should handle exceptions in __repr__ gracefully\"\"\"\n+\n+    class SomeClass:\n+        def __repr__(self):\n+            raise ValueError(\"Error in repr\")\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[ValueError('Error in repr') raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n+def test_nested_broken_repr():\n+    \"\"\"saferepr() should handle nested exceptions in __repr__ gracefully\"\"\"\n+\n+    class SomeClass:\n+        def __repr__(self):\n+            return repr(SomeClass())\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RecursionError('maximum recursion depth exceeded') raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n def test_unicode():\n     val = \"\u00a3\u20ac\"\n     reprval = \"'\u00a3\u20ac'\"\n@@ -153,4 +193,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..909aaf6 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -76,8 +76,28 @@ def test_parseconfig(testdir) -> None:\n     config2 = testdir.parseconfig()\n     assert config2 is not config1\n \n+def test_failure_with_changed_cwd_absolute_path(testdir):\n+    \"\"\"Test that failure paths use absolute paths if cwd has changed since invocation.\"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_testdir_runs_with_plugin(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'test_temp_dir'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     testdir.makepyfile(\n         \"\"\"\n         pytest_plugins = \"pytester\"\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..b3ae4b9 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+import os\n from unittest import mock\n \n import pytest\n",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..c6965e0 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -152,8 +153,39 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+from _pytest.pytester import Testdir\n \n class TestXFail:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        \"\"\"\n+        Test that dynamically adding an xfail marker during test execution works as expected.\n+        The test should be reported as xfailed.\n+        \"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        \"\"\"\n+        Test that dynamically adding a strict xfail marker during test execution works as expected.\n+        The test should fail because it passed despite being marked as xfail(strict=True).\n+        \"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..69b92c2 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,5 +1,8 @@\n+\n import os\n import stat\n+from _pytest.monkeypatch import MonkeyPatch\n+\n import sys\n from pathlib import Path\n from typing import Callable\n@@ -433,7 +436,32 @@ def test_basetemp_with_read_only_files(pytester: Pytester) -> None:\n         import os\n         import stat\n \n-        def test(tmp_path):\n+def test_tmp_path_factory_handles_invalid_dir_characters(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    # Simulating a username with illegal directory characters\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    # Reset cached variables\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+\n+def test_tmpdir_factory_handles_invalid_dir_characters(\n+    tmpdir_factory: TempdirFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    # Use another illegal character scenario to test tmpdir_factory\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"invalid|name\")\n+    # Reset cached variables\n+    monkeypatch.setattr(tmpdir_factory, \"_tmppath_factory._basetemp\", None)\n+    monkeypatch.setattr(tmpdir_factory, \"_tmppath_factory._given_basetemp\", None)\n+    p = tmpdir_factory.getbasetemp()\n+    # Check for fallback mechanism\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+\n+def test(tmp_path):\n             fn = tmp_path / 'foo.txt'\n             fn.write_text('hello')\n             mode = os.stat(str(fn)).st_mode\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..ec69785 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,29 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n \n-def test_ridgecv_store_cv_values():\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    \n+    # Test with len(y.shape) == 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+    assert r.alpha_ in alphas\n+\n+    # Test with len(y.shape) == 2\n+    y2d = np.array([[1, 1, 1, -1, -1],\n+                    [1, -1, 1, -1, 1],\n+                    [-1, -1, 1, -1, -1]]).transpose()\n+    r.fit(x, y2d)\n+    assert r.cv_values_.shape == (n_samples, 2, n_alphas)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..87ab35c 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -11,7 +11,7 @@ from sklearn.utils.testing import assert_almost_equal\n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n from sklearn.mixture.bayesian_mixture import _log_wishart_norm\n \n-from sklearn.mixture import BayesianGaussianMixture\n+from sklearn.mixture import BayesianGaussianMixture, GaussianMixture\n \n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n from sklearn.exceptions import ConvergenceWarning\n@@ -22,7 +22,35 @@ COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n PRIOR_TYPE = ['dirichlet_process', 'dirichlet_distribution']\n \n \n-def test_log_dirichlet_norm():\n+def test_bayesian_mixture_n_components():\n+    # Test whether n_components is acting as n_clusters\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng, scale=8)\n+    n_components = rand_data.n_components\n+\n+    for covar_type in COVARIANCE_TYPE:\n+        bgmm = BayesianGaussianMixture(n_components=n_components,\n+                                       random_state=rng,\n+                                       covariance_type=covar_type)\n+        X = rand_data.X[covar_type]\n+        bgmm.fit(X)\n+        labels = bgmm.predict(X)\n+        assert len(np.unique(labels)) == n_components\n+\n+def test_gaussian_mixture_n_components():\n+    # Test whether n_components is acting as n_clusters\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng)\n+    n_components = rand_data.n_components\n+\n+    for covar_type in COVARIANCE_TYPE:\n+        gm = GaussianMixture(n_components=n_components,\n+                             random_state=rng,\n+                             covariance_type=covar_type)\n+        X = rand_data.X[covar_type]\n+        gm.fit(X)\n+        labels = gm.predict(X)\n+        assert len(np.unique(labels)) == n_components\n     rng = np.random.RandomState(0)\n \n     weight_concentration = rng.rand(2)\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..dc76ee3 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,43 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+import numpy as np\n+import pytest\n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+# Additional tests to ensure the fix works in various scenarios\n+def test_one_hot_encoder_different_string_lengths():\n+    train = np.array(['short', 'longer', 'longest']).reshape((-1, 1))\n+    test = np.array(['tiny', 'short', 'lengthy']).reshape((-1, 1))\n+    ohe = OneHotEncoder(dtype=bool, handle_unknown='ignore')\n+    ohe.fit(train)\n+    expected = np.array([[0, 0, 0], [1, 0, 0], [0, 0, 0]], dtype=bool)\n+    assert_array_equal(ohe.transform(test).toarray(), expected)\n+\n+def test_one_hot_encoder_with_no_unknowns():\n+    train = np.array(['a', 'b', 'c']).reshape((-1, 1))\n+    test = np.array(['a', 'b', 'c']).reshape((-1, 1))\n+    ohe = OneHotEncoder(dtype=bool, handle_unknown='ignore')\n+    ohe.fit(train)\n+    expected = np.identity(3, dtype=bool)\n+    assert_array_equal(ohe.transform(test).toarray(), expected)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..4bd0cc5 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=10, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..f077acb 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,8 +1,9 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n-from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n+from sklearn.utils.testing import (assert_array_almost_equal, assert_less, assert_allclose,\n                                    assert_equal, assert_not_equal,\n                                    assert_raises)\n \n@@ -13,8 +14,19 @@ from sklearn.pipeline import Pipeline\n from sklearn.model_selection import GridSearchCV\n from sklearn.metrics.pairwise import rbf_kernel\n \n-\n-def test_kernel_pca():\n+def test_kernel_pca_sign_invariance():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    \n+    # Running KernelPCA multiple times to check for sign invariance\n+    transformed_X = np.empty((10, 7, 20))\n+    \n+    for i in range(20):\n+        kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+        transformed_X[..., i] = kpca.fit_transform(X)\n+        \n+    for i in range(1, 20):\n+        assert_allclose(np.abs(transformed_X[..., 0]), np.abs(transformed_X[..., i]))\n     rng = np.random.RandomState(0)\n     X_fit = rng.random_sample((5, 4))\n     X_pred = rng.random_sample((2, 4))\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..feea831 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,7 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n@@ -296,6 +298,34 @@ def test_score_samples():\n \n \n @pytest.mark.filterwarnings('ignore:default contamination')\n+\n+def test_iforest_warm_start_exposure():\n+    \"\"\"Test that warm_start is exposed and can be set through __init__\"\"\"\n+    clf = IsolationForest(n_estimators=10, warm_start=True)\n+    assert clf.warm_start is True\n+\n+def test_iforest_warm_start_incremental_fit():\n+    \"\"\"Test iterative addition of trees with warm_start in combination with other parameters\"\"\"\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(30, 2)\n+\n+    # Initial fit with 5 trees\n+    clf = IsolationForest(n_estimators=5, max_samples=20, random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    initial_trees = clf.estimators_[:]\n+\n+    # Add more trees\n+    clf.set_params(n_estimators=10)\n+    clf.fit(X)\n+\n+    # Assert more trees are added and no trees are overwritten\n+    assert len(clf.estimators_) == 10\n+    assert clf.estimators_[:5] == initial_trees\n+\n+    # Check with contamination parameter\n+    clf.set_params(n_estimators=15, contamination=0.2)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 15\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n     X = [[0.0], [1.0]]\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..0e00788 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +217,31 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_repr_with_array():\n+    \"\"\"Test array parameter representation with print_changed_only=True\"\"\"\n+    set_config(print_changed_only=True)\n+    # This should not raise an error after the fix\n+    try:\n+        repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        print(\"Test passed: No error raised for array parameter.\")\n+    except ValueError as e:\n+        print(\"Test failed: Raised an unexpected error\", str(e))\n+    finally:\n+        # Reset config after the test to avoid side effects\n+        set_config(print_changed_only=False)\n+\n+def test_logistic_regression_cv_repr_with_list():\n+    \"\"\"Test list parameter representation with print_changed_only=True\"\"\"\n+    set_config(print_changed_only=True)\n+    try:\n+        # Testing similar with list instead of array\n+        repr(LogisticRegressionCV(Cs=[0.1, 1]))\n+        print(\"Test passed: No error raised for list parameter.\")\n+    except ValueError as e:\n+        print(\"Test failed: Raised an unexpected error\", str(e))\n+    finally:\n+        set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..4d02535 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -14,6 +15,8 @@ from sklearn.ensemble import RandomForestClassifier\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n from sklearn.model_selection import GridSearchCV\n from sklearn import datasets\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.model_selection import cross_val_score, train_test_split\n from sklearn.datasets import make_multilabel_classification\n from sklearn.svm import SVC\n@@ -503,6 +506,32 @@ def test_transform():\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(\n+        datasets.load_iris(return_X_y=True), \n+        VotingClassifier([\n+            ('lr', LogisticRegression()), \n+            ('rf', RandomForestClassifier(n_estimators=5))\n+        ])\n+    ),\n+    (\n+        datasets.load_diabetes(return_X_y=True), \n+        VotingRegressor([\n+            ('lr', LinearRegression()), \n+            ('rf', RandomForestRegressor(n_estimators=5))\n+        ])\n+    )]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # Check that an estimator can be set to None and passing some weights\n+    # Regression test for the described issue\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..ec235cd 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,36 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+def test_gridsearch_with_nca():\n+    # Test that GridSearchCV works with NCA without TypeErrors related to parameter types\n \n-def test_transformation_dimensions():\n+    import numpy as np\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.model_selection import GridSearchCV\n+    from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+    from sklearn.neighbors import KNeighborsClassifier\n+\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca),\n+                     ('knn', knn)])\n+                    \n+    params = {'nca__tol': [0.1, 0.5, 1.0],  # Use 1.0 instead of 1 to avoid TypeError\n+              'nca__n_components': np.arange(1, 10, dtype=int)}  # Ensure integer type is standard int\n+              \n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+\n+    try:\n+        gs.fit(X, y)\n+        success = True\n+    except TypeError:\n+        success = False\n+\n+    assert success, \"GridSearchCV with NCA failed due to parameter type issues.\"\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..74d2709 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,23 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the ZeroDivisionError when support_vectors_ is empty\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+    \n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..90e81f6 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,8 +972,16 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n-def test_repeated_cv_value_errors():\n+import pytest\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 5, 10\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    expected_repr = (\n+        '{}(n_repeats=10, n_splits=5, random_state=None)'\n+        .format(repeated_cv.__class__.__name__)\n+    )\n+    assert repr(repeated_cv) == expected_repr\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n         assert_raises(ValueError, cv, n_repeats=0)\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..e47272c 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -151,6 +151,19 @@ def test_affinity_propagation_predict_non_convergence():\n     y = assert_warns(ConvergenceWarning, af.predict, to_predict)\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n+def test_affinity_propagation_non_convergence_cluster_centers():\n+    # Test non-convergence case for cluster centers and labels\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    \n+    # Check if cluster_centers_indices_ is empty when non-convergence occurs\n+    assert_array_equal(np.array([]), af.cluster_centers_indices_)\n+\n+    # Check if labels_ are all -1 when non-convergence occurs\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+\n \n def test_equal_similarities_and_preferences():\n     # Unequal distances\n",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..5a80e1a 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -156,7 +156,22 @@ def test_permute_labels(metric_name):\n def test_format_invariance(metric_name):\n     y_true = [0, 0, 0, 0, 1, 1, 1, 1]\n     y_pred = [0, 1, 2, 3, 4, 5, 6, 7]\n+import numpy as np\n+from sklearn.metrics.cluster import mutual_info_score\n \n+def test_mutual_info_score_object_dtype():\n+    # Create data with dtype=object\n+    labels = np.random.choice(['a', 'b', 'c'], size=20).astype(object)\n+    \n+    # This should work without raising exceptions\n+    score = mutual_info_score(labels, labels)\n+    assert isinstance(score, float), \"The score should be a float.\"\n+    assert score >= 0, \"Mutual information score should be non-negative.\"\n+    \n+    # Check consistency with the same labels transformed to string type\n+    labels_str = labels.astype(str)\n+    score_str = mutual_info_score(labels_str, labels_str)\n+    assert score == score_str, \"Scores should match for object and string dtypes.\"\n     def generate_formats(y):\n         y = np.array(y)\n         yield y, 'array of ints'\n@@ -164,7 +179,22 @@ def test_format_invariance(metric_name):\n         yield [str(x) for x in y.tolist()], 'list of strs'\n         yield y - 1, 'including negative ints'\n         yield y + 1, 'strictly positive ints'\n+import numpy as np\n+from sklearn.metrics.cluster import mutual_info_score\n \n+def test_mutual_info_score_object_dtype():\n+    # Create data with dtype=object\n+    labels = np.random.choice(['a', 'b', 'c'], size=20).astype(object)\n+    \n+    # This should work without raising exceptions\n+    score = mutual_info_score(labels, labels)\n+    assert isinstance(score, float), \"The score should be a float.\"\n+    assert score >= 0, \"Mutual information score should be non-negative.\"\n+    \n+    # Check consistency with the same labels transformed to string type\n+    labels_str = labels.astype(str)\n+    score_str = mutual_info_score(labels_str, labels_str)\n+    assert score == score_str, \"Scores should match for object and string dtypes.\"\n     if metric_name in SUPERVISED_METRICS:\n         metric = SUPERVISED_METRICS[metric_name]\n         score_1 = metric(y_true, y_pred)\n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..b69ca18 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,5 +1,11 @@\n+\n import warnings\n import numpy as np\n+import pytest\n+from sklearn import set_config, config_context\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn.datasets import make_classification\n import pickle\n import copy\n \n@@ -668,6 +674,16 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n+def test_calibrated_classifier_with_isotonic_and_pandas():\n+    \"\"\"Test CalibratedClassifierCV works with transform_output=\"pandas\".\"\"\"\n+    X, y = make_classification(n_samples=30, n_features=3, random_state=0)\n+    with config_context(transform_output=\"pandas\"):\n+        model = CalibratedClassifierCV(SGDClassifier(), method='isotonic', cv=2)\n+        model.fit(X, y)\n+        predictions = model.predict(X)\n+        # Check that predictions do not raise exceptions and have a valid shape\n+        assert predictions.shape == (30,)\n+\n def test_get_feature_names_out(shape):\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..42e2c60 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -112,6 +112,70 @@ def test_automodule_special_members(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_classes(app):\n+    # This test will check if specifying multiple classes in :inherited-members:\n+    # filters out the correct base classes from the documentation.\n+\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base, list'  # Test with multiple base classes\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    \n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList(iterable=(), /)',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+import pytest\n+import sys\n+from .test_ext_autodoc import do_autodoc\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n@@ -125,4 +189,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "diff --git a/tests/test_environment_indexentries.py b/tests/test_environment_indexentries.py\nindex 9775484..96afd3b 100644\n--- a/tests/test_environment_indexentries.py\n+++ b/tests/test_environment_indexentries.py\n@@ -15,7 +15,26 @@ from sphinx.testing import restructuredtext\n \n \n @pytest.mark.sphinx('dummy', freshenv=True)\n-def test_create_single_index(app):\n+def test_special_character_index(app):\n+    text = (\".. index:: _underscore\\n\"\n+            \".. index:: @at-symbol\\n\"\n+            \".. index:: \u00a3pound-symbol\\n\"\n+            \".. index:: \u2190arrow-symbol\\n\"\n+            \".. index:: +plus-symbol\\n\"\n+            \".. index:: A\\n\"\n+            \".. index:: B\\n\")\n+    restructuredtext.parse(app, text)\n+    index = IndexEntries(app.env).create_index(app.builder)\n+    assert len(index) == 4\n+    assert index[0] == ('Symbols', [('@at-symbol', [[('', '#index-1')], [], None]),\n+                                    ('+plus-symbol', [[('', '#index-4')], [], None]),\n+                                    ('\u2190arrow-symbol', [[('', '#index-3')], [], None]),\n+                                    ('\u00a3pound-symbol', [[('', '#index-2')], [], None]),\n+                                    ('_underscore', [[('', '#index-0')], [], None])])\n+    assert index[1] == ('A', [('A', [[('', '#index-5')], [], None])])\n+    assert index[2] == ('B', [('B', [[('', '#index-6')], [], None])])\n+    # Ensure that there is only one \"Symbols\" section and that it contains all\n+    # the special characters.\n     text = (\".. index:: docutils\\n\"\n             \".. index:: Python\\n\"\n             \".. index:: pip; install\\n\"\n",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 21b6a7e..d42ee33 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -737,7 +737,38 @@ def test_autodoc_type_aliases(app):\n     ]\n \n \n-@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases_for_variables_and_attributes(app):\n+    # Define alias for the test\n+    app.config.autodoc_type_aliases = {'myint': 'myint'}\n+\n+    # Test for variables and attributes with alias\n+    options = {\"members\": None, \"undoc-members\": True}\n+    actual = do_autodoc(app, 'module', 'target.annotations_with_vars', options)  # assuming target.annotations_with_vars is the module containing the test classes\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.annotations_with_vars',\n+        '',\n+        '',\n+        '.. py:data:: variable',\n+        '   :module: target.annotations_with_vars',\n+        '   :type: myint',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:class:: Foo',\n+        '   :module: target.annotations_with_vars',\n+        '',\n+        '   docstring',\n+        '',\n+        '   .. py:attribute:: Foo.attr',\n+        '      :module: target.annotations_with_vars',\n+        '      :type: myint',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n def test_autodoc_default_options(app):\n     # no settings\n     actual = do_autodoc(app, 'class', 'target.enums.EnumCls')\n",
  "sphinx-doc__sphinx-8506": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..e4d6545 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,8 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,6 +47,44 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_respects_empty_all(app):\n+    # This test ensures that if __all__ is empty, no members are documented.\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.example', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.example',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_ignores_undocumented_members(app):\n+    # This additional test checks if autodoc respects __all__ when __all__ is not empty\n+    options = {'members': True}\n+    # Assuming __all__ = ['foo', 'bar'] in the hypothetical target.example_with_all\n+    actual = do_autodoc(app, 'module', 'target.example_with_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.example_with_all',\n+        '',\n+        'docstring of example_with_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.example_with_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: bar()',\n+        '   :module: target.example_with_all',\n+        '',\n+        '   docstring',\n+        ''\n+    ]\n+\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..5fcf7c0 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -16,6 +17,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n import pytest\n \n from sphinx.util.typing import restify, stringify\n+from struct import Struct\n \n \n class MyClass1:\n@@ -115,7 +117,8 @@ def test_restify_type_ForwardRef():\n     assert restify(ForwardRef(\"myint\")) == \":class:`myint`\"\n \n \n-def test_restify_broken_type_hints():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..d0fb735 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1457,8 +1457,27 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n+        \n+    def test_other_parameters_with_use_param(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+Other Parameters\n+----------------\n+y : float\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n \n-    def test_multiple_parameters(self):\n+:param y:\n+:type y: float\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..22c6057 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,22 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from pathlib import Path\n+\n+# Additional test cases for verifying viewcode behavior with EPUB\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app: SphinxTestApp, status, warning):\n+    app.builder.build_all()\n+\n+    # Check that the module pages are not created for EPUB output when disabled\n+    module_path = app.outdir / '_modules/spam/mod1.xhtml'\n+    assert not module_path.exists(), f\"Module page {module_path} should not exist when viewcode is disabled for EPUB.\"\n+\n+# Ensure the original tests remain intact\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..19d3e66 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,6 +354,25 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+def test_permutation_with_non_disjoint_cycles():\n+    # Existing test case from original test patch\n+    assert Permutation([[0, 1], [0, 2]]) == Permutation(0, 1, 2)\n+    \n+    # Test non-disjoint cycles that should result in the identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    \n+    # Test non-disjoint cycles with overlapping elements but different order\n+    assert Permutation([[0, 1, 2], [2, 3, 0], [2]]) == Permutation([2, 0, 1, 3])\n+    \n+    # Test another set of non-disjoint cycles\n+    assert Permutation([[1, 2], [2, 3], [3, 1]]) == Permutation([0, 3, 1, 2])\n+    \n+    # Test with disjoint cycles to ensure original functionality is not broken\n+    assert Permutation([[0, 1], [2, 3]]) == Permutation([1, 0, 3, 2])\n+    \n+    # Test with single element cycles and ensure it is resolved correctly\n+    assert Permutation([[0], [0, 1]]) == Permutation([0, 1])\n+\n \n def test_Cycle():\n     assert str(Cycle()) == '()'\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..e219c06 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,4 +1,5 @@\n-from sympy import Abs, S, Symbol, I, Rational, PurePoly\n+\n+from sympy import Abs, S, Symbol, I, Rational, PurePoly, Matrix\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..4b9eeec 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -104,6 +104,23 @@ def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n \n+    # Check Float from tuple with 'L' long integer suffix in the context of pickling\n+    from sympy import Float\n+    import pickle\n+\n+    # Simulate the pickling in Python 2 and unpickling in Python 3 scenario\n+    # The tuple ('0', '1L', 0, 1) corresponds to the internal representation\n+    # of a Float object in the example issue.\n+    float_tuple_representation = (0, '1L', 0, 1)\n+\n+    # Attempt to create a Float from this tuple and pickle it\n+    a = Float(float_tuple_representation)\n+    pickled_a = pickle.dumps(a, protocol=2)\n+\n+    # Unpickle it and verify the result\n+    unpickled_a = pickle.loads(pickled_a)\n+    assert a == unpickled_a, \"Unpickled Float does not match the original.\"\n+\n \n def test_core_relational():\n     x = Symbol(\"x\")\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..97259dc 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,23 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n+def test_issue_coth_log_tan():\n+    from sympy import Symbol, coth, log, tan, I, pi, S\n \n-def test_coth_series():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test specific integral values that previously caused errors\n+    integral_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+\n+    for value in integral_values:\n+        # Assert that no exception is raised and result is a valid SymPy expression\n+        result = e.subs(x, value)\n+        assert isinstance(result, S)\n+\n+    # Original test cases for verification\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..491ed93 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,29 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import eye, Matrix, ones\n+\n+    # Create a 6x6 identity matrix\n+    M = eye(6)\n+\n+    # Create a 6x2 matrix filled with 2s\n+    V = 2 * ones(6, 2)\n+\n+    # Perform the column insertion at index 3\n+    result = M.col_insert(3, V)\n+\n+    # Define the expected result after insertion\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..ddb61f2 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,6 +615,14 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+from sympy import latex, Symbol, SeqFormula, SeqPer, SeqAdd, SeqMul\n+from sympy.abc import a\n+from sympy.series.sequences import SeqFormula\n+from sympy.sets import Range\n+from sympy import oo, pi\n+from sympy.series.fourier import fourier_series\n+from sympy.series.formal import fps\n+from sympy import log\n \n def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..0693a21 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -186,7 +187,14 @@ def test_Domain_preprocess():\n     assert Domain.preprocess('ZZ[x,y]') == ZZ[x, y]\n     assert Domain.preprocess('QQ[x,y]') == QQ[x, y]\n \n-    raises(OptionError, lambda: Domain.preprocess('Z()'))\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n \n     assert Domain.preprocess('Z(x)') == ZZ.frac_field(x)\n     assert Domain.preprocess('Q(x)') == QQ.frac_field(x)\n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..4904203 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -307,6 +308,18 @@ def test_latex_functions():\n         r\"\\sin^{-1} {x^{2}}\"\n \n     assert latex(factorial(k)) == r\"k!\"\n+\n+    # Test cases for acsc and asec with 'inv_trig_style=\"full\"'\n+    assert latex(acsc(x), inv_trig_style=\"full\") == r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"full\") == r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n+\n+    # Test cases for acsc and asec with 'inv_trig_style=\"abbreviated\"' should return the default behavior\n+    assert latex(acsc(x), inv_trig_style=\"abbreviated\") == r\"\\operatorname{acsc}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"abbreviated\") == r\"\\operatorname{asec}{\\left (x \\right )}\"\n+\n+    # Test cases for acsc and asec with 'inv_trig_style=\"power\"' should return the power notation\n+    assert latex(acsc(x), inv_trig_style=\"power\") == r\"\\csc^{-1}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"power\") == r\"\\sec^{-1}{\\left (x \\right )}\"\n     assert latex(factorial(-k)) == r\"\\left(- k\\right)!\"\n \n     assert latex(subfactorial(k)) == r\"!k\"\n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..39392a1 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6110,16 +6110,35 @@ u(\"\"\"\\\n \"\"\")\n     assert upretty((1/y)*e.j) == ucode_str\n \n+from sympy import MatrixSymbol\n+from sympy.printing.pretty import pretty\n \n def test_MatrixSymbol_printing():\n-    # test cases for issue #14237\n-    A = MatrixSymbol(\"A\", 3, 3)\n-    B = MatrixSymbol(\"B\", 3, 3)\n-    C = MatrixSymbol(\"C\", 3, 3)\n-\n-    assert pretty(-A*B*C) == \"-A*B*C\"\n-    assert pretty(A - B) == \"-B + A\"\n-    assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n+    # Test cases for issue #14814\n+    n = 3\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    a = MatrixSymbol('a', n, n)\n+    \n+    # Original test patch\n+    assert pretty(x + y) == \"x + y*\"\n+    assert pretty(-a*x + -2*y*y) == \"-a*x -2*y**y*\"\n+\n+    # Additional test cases\n+    assert pretty(x - y) == \"x - y*\"\n+    assert pretty(-x + y) == \"-x + y*\"\n+    assert pretty(-x - y) == \"-x - y*\"\n+    assert pretty(y - x) == \"-x + y*\"\n+\n+    # Test with more complex expressions\n+    z = MatrixSymbol('z', n, n)\n+    assert pretty(x + y + z) == \"x + y* + z\"\n+    assert pretty(-x - 2*y - 3*z) == \"-x -2*y* -3*z\"\n+\n+    # Ensure no SympifyError when using '*' in names\n+    w = MatrixSymbol('w*', n, n)\n+    assert pretty(x + w) == \"x + w*\"\n+    assert pretty(-x + w) == \"-x + w*\"\n \n \n def test_degree_printing():\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..61106af 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -719,6 +719,9 @@ def test_dummification():\n     some_expr = 2 * F(t)**2 / G(t)\n     lam = lambdify((F(t), G(t)), some_expr)\n     assert lam(3, 9) == 2\n+    import sympy as sy\n+    from sympy import symbols, lambdify, MatrixSymbol\n+    from sympy.testing.pytest import raises\n     lam = lambdify(sin(t), 2 * sin(t)**2)\n     assert lam(F(t)) == 2 * F(t)**2\n     #Test that \\alpha was properly dummified\n@@ -727,8 +730,17 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n+def test_curly_matrix_symbol():\n+    # Issue related to lambdify with curly braces in MatrixSymbol names\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n \n-def test_python_keywords():\n+    # Test should pass without errors\n+    lam = lambdify(curlyv, curlyv)\n+    assert lam([[1], [2]]).tolist() == [[1], [2]]\n+\n+    # Test with dummify=True should also pass without errors\n+    lam_dummified = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam_dummified([[1], [2]]).tolist() == [[1], [2]]\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..21a8407 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,24 @@\n+\n+def test_Max_Min():\n+    # Test case for the reported issue\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    \n+    # Additional test case from original patch to ensure compatibility\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+    \n+    # More test cases to ensure comprehensive coverage\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(2, y, x, 3)) == \"Max[2, y, x, 3]\"\n+    assert mcode(Max(-5, x)) == \"Max[-5, x]\"\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..d8626a5 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,16 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    # Test to verify the fix for the issue with indexed matrix expressions in LaTeX\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Check the LaTeX output for indexed product M*N with indices i, j\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..19689fa 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -21,7 +22,25 @@ def test_idiff():\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n \n-def test_intersection():\n+def test_idiff_issue_resolution():\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+    \n+    # Test case for idiff with f(x), ensuring it doesn't raise a ValueError\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+\n+    # Test for idiff handling multiple dependent variables\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+\n+    # Test for two functions being differentiated\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Testing support for Eq\n+    eq = Eq(y * exp(y), x * exp(x))\n+    assert idiff(eq, y, x) == (x + 1) * exp(x - y) / (y + 1)\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..14d7efe 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -581,6 +581,18 @@ def test_ccode_cse():\n         '}\\n'\n     )\n     assert source == expected\n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    expr = 1.0\n+    # autowrap using cython backend\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    # the function should return 1.0 when called\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n \n def test_empty_f_code():\n     code_gen = FCodeGen()\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..09d34f3 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,9 +342,16 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, Eq, S, Symbol\n+from sympy.sets import FiniteSet\n \n-def test_issue_9623():\n-    n = Symbol('n')\n+def test_issue_intersection_duplicates():\n+    x = Symbol('x')\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    assert Intersection({1}, {1}, {x}).simplify() == \\\n+        S.EmptySet if not Eq(x, 1) else FiniteSet(1)\n+    assert Intersection({1}, {x}).simplify() == \\\n+        S.EmptySet if not Eq(x, 1) else FiniteSet(1)\n \n     a = S.Reals\n     b = Interval(0, oo)\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..057e864 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -10,13 +11,35 @@ from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayPermuteDims, CodegenArrayElementwiseAdd)\n from sympy.printing.lambdarepr import NumPyPrinter\n \n-from sympy.utilities.pytest import warns_deprecated_sympy\n+from sympy.utilities.pytest import warns_deprecated_sympy, skip, raises\n+from sympy.matrices import MatrixSymbol, Identity\n+from sympy import symbols\n+import numpy as np\n from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n np = import_module('numpy')\n \n-def test_numpy_piecewise_regression():\n+def test_issue_17006_numpy():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    # Test for fixed behavior of Identity matrix handling in lambdify\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr_expected = np.array([[2, 2], [3, 5]])\n+    assert (f(ma) == mr_expected).all()\n+\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"M\", n, n)\n+    # Ensure that an error is raised for symbolic size identity\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n+\n+    # Test that the printer supports identity matrices\n+    from sympy.printing.lambdarepr import NumPyPrinter\n+    p = NumPyPrinter()\n+    assert p.doprint(Identity(3)) == \"numpy.eye(3)\"\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..822e4c4 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -810,8 +810,17 @@ def test_issue_15965():\n     assert simplify(A) == anew\n     assert simplify(B) == bnew\n \n+def test_issue_17137():\n+    from sympy import I, Symbol, simplify, cos\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    assert simplify(cos(x)**(-I)) == cos(x)**(-I)\n+    assert simplify(cos(x)**(1 + I)) == cos(x)**(1 + I)\n+    assert simplify(cos(x)**(1 - I)) == cos(x)**(1 - I)\n+\n \n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..0eeb9c3 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -98,6 +99,10 @@ def test_point():\n     # Point differences should be simplified\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n+    # Test for sympy sympify multiplication handling\n+    assert sympify(2.0) * p4 == Point(2, 2)\n+    assert p4 * sympify(2.0) == Point(2, 2)\n+\n     a, b = S.Half, Rational(1, 3)\n     assert Point(a, b).evalf(2) == \\\n         Point(a.n(2), b.n(2), evaluate=False)\n@@ -176,6 +181,10 @@ def test_point3D():\n     assert Point3D(x*(x - 1), y, 2) - Point3D(x**2 - x, y + 1, 1) == \\\n         Point3D(0, -1, 1)\n \n+    # Test for sympy sympify multiplication handling in 3D\n+    assert sympify(2.0) * p4 == Point3D(2, 2, 2)\n+    assert p4 * sympify(2.0) == Point3D(2, 2, 2)\n+\n     a, b, c = S.Half, Rational(1, 3), Rational(1, 4)\n     assert Point3D(a, b, c).evalf(2) == \\\n         Point(a.n(2), b.n(2), c.n(2), evaluate=False)\n",
  "sympy__sympy-18057": "",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..92d6e62 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,6 +553,13 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_issue_18186():\n+    x, y = symbols('x y', integer=True)\n+    # Test for the issue where the result depends on order of symbols\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n \n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n",
  "sympy__sympy-18532": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex f97b2ee..34f2643 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -136,7 +136,42 @@ def test_subs_with_unicode_symbols():\n     assert replaced.name == 'x'\n \n \n+from sympy import Basic, Symbol, Integer, Float\n+\n def test_atoms():\n+    # Test atom of a basic example\n+    expr = Basic()\n+    assert expr.atoms() == set()\n+    \n+    # Test atom on a simple symbol\n+    s = Symbol('x')\n+    assert s.atoms() == {s}\n+\n+    # Test atom on a simple integer\n+    i = Integer(1)\n+    assert i.atoms() == {i}\n+\n+    # Test atom on a simple float\n+    f = Float(1.0)\n+    assert f.atoms() == {f}\n+\n+    # Composite expression, should only return integer and symbol as they have no args\n+    expr = i + s\n+    assert expr.atoms() == {i, s}\n+\n+    # Expression with atoms inside an expression\n+    expr = i + Basic(s, f)\n+    assert expr.atoms() == {i, s, f}\n+\n+    # Subclasses of Atom should not be returned unless they have no args\n+    class MyAtom(Basic):\n+        def __new__(cls):\n+            obj = Basic.__new__(cls)\n+            obj._args = ()\n+            return obj\n+\n+    my_atom = MyAtom()\n+    assert my_atom.atoms() == {my_atom}\n     assert b21.atoms() == set()\n \n \n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..f6e0f58 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,30 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_BlockDiagMatrix_single_element():\n+    # Test converting BlockDiagMatrix with a single element to a regular Matrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    try:\n+        B = Matrix(D)\n+        # If no exception is raised, assert that the conversion is correct\n+        assert B == M\n+    except TypeError as e:\n+        # The test should fail if the old error 'TypeError: 'One' object is not subscriptable' occurs\n+        assert False, f\"Unexpected TypeError: {e}\"\n+\n+def test_issue_BlockDiagMatrix_multiple_elements():\n+    # Test with two elements to ensure behavior is correct as expected previously\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]])\n+    assert B == expected\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex e067d64..11cc3f1 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -189,7 +189,44 @@ def test_BlockDiagMatrix():\n     assert (X._blockmul(M)).is_MatMul\n     assert (X._blockadd(M)).is_MatAdd\n \n-def test_blockcut():\n+\n+from sympy import symbols, MatrixSymbol, BlockMatrix, MatrixElement\n+\n+def test_block_indexing_issue():\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    \n+    # Assert that the element is left as a MatrixElement without incorrect simplification\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+\n+def test_block_indexing_non_simplifiable():\n+    n, m, k, l = symbols('n m k l', integer=True)\n+    A1 = MatrixSymbol('A1', n, k)\n+    A2 = MatrixSymbol('A2', n, l)\n+    A3 = MatrixSymbol('A3', m, k)\n+    A4 = MatrixSymbol('A4', m, l)\n+    A = BlockMatrix([[A1, A2], [A3, A4]])\n+\n+    # Test various indices that should not simplify\n+    assert A[0, k + l - 1] == MatrixElement(A, 0, k + l - 1)\n+    assert A[n + m - 1, 0] == MatrixElement(A, n + m - 1, 0)\n+    assert A[n + i, k + j] == MatrixElement(A, n + i, k + j)\n+\n+def test_block_index_symbolic_positive():\n+    n, m, k, l = symbols('n m k l', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True, nonnegative=True)\n+    A1 = MatrixSymbol('A1', n, k)\n+    A2 = MatrixSymbol('A2', n, l)\n+    A3 = MatrixSymbol('A3', m, k)\n+    A4 = MatrixSymbol('A4', m, l)\n+    A = BlockMatrix([[A1, A2], [A3, A4]])\n+\n+    # Check that valid simplifications work correctly\n+    assert A[0, 0] == A1[0, 0]\n+    assert A[n + m - 1, k + l - 1] == A4[m - 1, l - 1]\n+    assert A[i, j] == MatrixElement(A, i, j)\n     A = MatrixSymbol('A', n, m)\n     B = blockcut(A, (n/2, n/2), (m/2, m/2))\n     assert A[i, j] == B[i, j]\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..e1d5f39 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -201,6 +201,17 @@ def test_im():\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n \n def test_sign():\n+    x = Symbol('x', real=True, zero=False)\n+    assert sign(x).rewrite(Abs) == x / Abs(x)\n+    assert sign(x + 1).rewrite(Abs) == (x + 1) / Abs(x + 1)\n+    y = Symbol('y')\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(0).rewrite(Abs) == 0\n+    \n+    # Additional test for functions\n+    f = Function('f')\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+    \n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..bb0ab24 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,34 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n-\n-def test_binary_partitions():\n+    \n+def test_partitions_no_reuse():\n+    # Test that the dictionaries produced by partitions() are not reused\n+    partition_gen = partitions(6, k=2)\n+    first_partition = next(partition_gen)\n+    second_partition = next(partition_gen)\n+    # Modify second_partition\n+    second_partition[2] = 99\n+    # Get third partition\n+    third_partition = next(partition_gen)\n+\n+    # Ensure that third_partition is not affected by change in second_partition\n+    assert third_partition != second_partition\n+    assert third_partition == {1: 4, 2: 1}\n+\n+    # Ensure that first_partition stays unchanged\n+    assert first_partition == {2: 3}\n+\n+    # Test with size=True parameter\n+    partition_gen = partitions(7, k=3, size=True)\n+    _, first_partition = next(partition_gen)\n+    _, second_partition = next(partition_gen)\n+    second_partition[1] = 99\n+    _, third_partition = next(partition_gen)\n+\n+    assert third_partition != second_partition\n+    assert third_partition == {2: 2, 3: 1}\n+    assert first_partition == {3: 2}\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..27f9402 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -266,8 +266,12 @@ def test_zero():\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n+from sympy import S, oo, powdenest, Pow\n \n-def test_pow_as_base_exp():\n+def test_issue_19572():\n+    # Test for 0**-oo\n+    assert 0 ** -oo == S.ComplexInfinity\n+    assert Pow(0, -oo) == S.ComplexInfinity\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..2649bd4 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -41,6 +42,29 @@ def test_convert_to():\n     # assert (2*speed_of_light).convert_to(m / s) == 2 * 299792458 * m / s\n     assert day.convert_to(s) == 86400*s\n \n+    # Test cases for the reported issue with convert_to function\n+    from sympy.physics.units import joule\n+\n+    expr = joule * s\n+    # Case where we convert `joule * s` to `joule`, which was problematic\n+    conv = convert_to(expr, joule)\n+    assert conv == expr, f\"Expected {expr}, but got {conv}\"\n+\n+    # Additional test cases to confirm correct behavior\n+    # Convert `joule * s` to `joule * s` should return the same expression\n+    conv_same = convert_to(expr, expr)\n+    assert conv_same == expr, f\"Expected {expr}, but got {conv_same}\"\n+\n+    # Convert `joule * s` to `kg * m**2 / s` should return a valid conversion\n+    conv_to_base = convert_to(expr, kg * m**2 / s)\n+    assert conv_to_base == kg * m**2 / s, f\"Expected {kg * m**2 / s}, but got {conv_to_base}\"\n+\n+    # Convert `joule * s` to `minutes`\n+    from sympy.physics.units import minute\n+    conv_to_min = convert_to(expr, minute)\n+    expected_conv_to_min = expr / 60\n+    assert conv_to_min == expected_conv_to_min, f\"Expected {expected_conv_to_min}, but got {conv_to_min}\"\n+\n     # Wrong dimension to convert:\n     assert q.convert_to(s) == q\n     assert speed_of_light.convert_to(m) == speed_of_light\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..ca66922 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,21 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_dict_and_slots():\n+    \"\"\"Test that Symbol in a specific SymPy version does not have __dict__\"\"\"\n+\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"__dict__ should not exist for a Symbol\"\n+    assert hasattr(s, '__slots__'), \"__slots__ should exist for a Symbol\"\n+    assert s.__slots__ == ('name',), \"Slots configuration for Symbol has changed\"\n+\n+    # Test setting an attribute which should raise an AttributeError\n+    with raises(AttributeError):\n+        s.new_attr = 5\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..e3c7584 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n                    atan, atan2, nan, Symbol, re, im, sign)\n from sympy.abc import w, x, y, z\n@@ -161,7 +162,22 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_simplify_complex_arguments():\n+    a = Symbol('a', complex=True)\n+    expr = arg(a)\n+    # Check if refine simplifies arg correctly when a is positive\n+    assert refine(expr, Q.positive(a)) == 0\n+    \n+    # Check if refine simplifies arg correctly when a is negative\n+    assert refine(expr, Q.negative(a)) == pi\n+\n+    # Additional case for the integral mentioned in the issue\n+    x = Symbol('x')\n+    J = Integral(sin(x) * exp(-a*x), (x, 0, oo))\n+    simplified_J = J.doit()\n+    refined_J = refine(simplified_J, Q.positive(a))\n+    # Piecewise should simplify further under the assumption positive(a)\n+    assert refined_J == 1/(a**2 + 1)\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..d919f07 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -34,6 +35,10 @@ def test_Symbol_kind():\n     assert comm_x.kind is NumberKind\n     assert noncomm_x.kind is UndefinedKind\n \n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n+    \n def test_Integral_kind():\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..39ad59d 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -101,6 +101,26 @@ def test_monomials():\n \n     raises(ValueError, lambda: set(itermonomials([], [], 1)))\n     raises(ValueError, lambda: set(itermonomials([], [], 2)))\n+\n+    # Test cases for issue with min_degrees and max_degrees\n+    x, y, z = symbols('x y z')\n+    \n+    # Case where min_degrees == max_degrees\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    \n+    # Case where max_degrees > min_degrees\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+    \n+    # Additional case with three variables\n+    assert set(itermonomials([x, y, z], 3, 3)) == {x**3, y**3, z**3, x**2*y, x**2*z, y**2*x, y**2*z, z**2*x, z**2*y, x*y*z}\n+\n+    # Confirm behavior when increasing max_degrees\n+    assert set(itermonomials([x, y, z], 4, 3)) == {\n+        x**3, y**3, z**3, x**2*y, x**2*z, y**2*x, y**2*z, z**2*x, z**2*y,\n+        x*y*z, x**4, y**4, z**4, x**3*y, x**3*z, y**3*x, y**3*z, z**3*x, z**3*y,\n+        x**2*y**2, x**2*z**2, y**2*z**2, y**2*x*z, z**2*x*y, x*y**2*z, x*z**2*y,\n+        y*z**2*x\n+    }\n     raises(ValueError, lambda: set(itermonomials([], [], 3)))\n \n     raises(ValueError, lambda: set(itermonomials([x, y], [0, 1], [1, 2])))\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..a98d6df 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,6 +50,12 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n+    # New test cases for verifying the fix for infinite solution detection\n+    raises(NotImplementedError, lambda: solve_poly_system([x - 1], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system([y - 1], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system([x - 1, y - 1], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system([x**2 + y**2 - 1, x - y], x, y))\n+\n \n def test_solve_biquadratic():\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..0117d3e 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -5,6 +6,7 @@ from sympy.core.symbol import Symbol\n from sympy.core.sympify import sympify\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n+from sympy.core.parameters import evaluate\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n@@ -440,7 +442,34 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Test that creating a Point2D with evaluate(False) does not raise an error\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+    assert isinstance(p, Point2D)\n+    assert p.x == 1\n+    assert p.y == 2\n+\n+    # Ensure creating with imaginary values raises an error\n+    raises(ValueError, lambda: Point2D(1 + I, 2))\n+\n+    # Test with sympifying integers with evaluate(False)\n+    with evaluate(False):\n+        p = Point2D(S('Integer(1)'), S('Integer(2)'))\n+    assert p.x == 1\n+    assert p.y == 2\n+\n+    # Test normal behavior without evaluate(False)\n+    p = Point2D(1, 2)\n+    assert p.x == 1\n+    assert p.y == 2\n+\n+    # Check point creation with evaluate(True)\n+    with evaluate(True):\n+        p = Point2D(1, 2)\n+    assert isinstance(p, Point2D)\n+    assert p.x == 1\n+    assert p.y == 2\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..95f864c 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -337,8 +337,28 @@ def test_cse_Indexed():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n-\n def test_cse_MatrixSymbol():\n+    A_4x4 = MatrixSymbol(\"A\", 4, 4)\n+    B_4x4 = MatrixSymbol(\"B\", 4, 4)\n+\n+    # Simple element-wise multiplication\n+    assert cse(A_4x4[0, 0] * B_4x4[0, 0]) == ([], [A_4x4[0, 0] * B_4x4[0, 0]])\n+\n+    # Expression with repeated subexpressions involving matrix elements\n+    assert cse(A_4x4[0, 0] * A_4x4[0, 1] + A_4x4[0, 0] * A_4x4[0, 1] * A_4x4[0, 2]) == (\n+        [(x0, A_4x4[0, 0] * A_4x4[0, 1])],\n+        [x0 * A_4x4[0, 2] + x0]\n+    )\n+\n+    # Larger multiplication scenario\n+    expr = (A_4x4[0, 0] * B_4x4[0, 0] + A_4x4[1, 0] * B_4x4[0, 0] +\n+            A_4x4[0, 1] * B_4x4[1, 0] + A_4x4[1, 1] * B_4x4[1, 0])\n+    expected = (\n+        [(x0, A_4x4[0, 0] * B_4x4[0, 0]), (x1, A_4x4[1, 0] * B_4x4[0, 0]),\n+         (x2, A_4x4[0, 1] * B_4x4[1, 0]), (x3, A_4x4[1, 1] * B_4x4[1, 0])],\n+        [x0 + x1 + x2 + x3]\n+    )\n+    assert cse(expr) == expected\n     # MatrixSymbols have non-Basic args, so make sure that works\n     A = MatrixSymbol(\"A\", 3, 3)\n     assert cse(A) == ([], [A])\n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..087afca 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -17,8 +18,12 @@ array_types = [\n     MutableSparseNDimArray\n ]\n \n-\n-def test_array_negative_indices():\n+def test_empty_array_creation():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n     for ArrayType in array_types:\n         test_array = ArrayType([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n         assert test_array[:, -1] == Array([5, 10])\n",
  "sympy__sympy-23262": "",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..a54d4f1 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,29 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp, Quantity\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..f38d190 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,32 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_issue_expansion_of_tensorproduct():\n+    assert TP(2*U - V, U + V).expand(tensorproduct=True) == \\\n+        2*TP(U, U) + 2*TP(U, V) - TP(V, U) - TP(V, V)\n+\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Test more complex nested cases\n+    assert TP((A + B) * 3, (C + D) * 2).expand(tensorproduct=True) == \\\n+        6 * TP(A, C) + 6 * TP(A, D) + 6 * TP(B, C) + 6 * TP(B, D)\n+\n+    assert TP(0, A + B).expand(tensorproduct=True) == 0\n+\n+    assert TP(A + B, 0).expand(tensorproduct=True) == 0\n+\n+    # Scalar results\n+    assert TP(1, A + B).expand(tensorproduct=True) == A + B\n+\n+    assert TP(A + B, 1).expand(tensorproduct=True) == A + B\n+\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..cfdb50f 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,7 +563,56 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter, kilogram, newton, minute\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr = A1*T1 + V1\n+\n+    # should not throw ValueError here as the dimensions are equivalent\n+    SI._collect_factor_and_dimension(expr)\n+\n+    # Additional test cases with various units\n+    D1 = Quantity('D1')\n+    SI.set_quantity_dimension(D1, velocity * time)\n+    SI.set_quantity_scale_factor(D1, 10 * meter)\n+\n+    expr2 = D1 + V1*T1\n+    SI._collect_factor_and_dimension(expr2)  # should not raise an error\n+\n+    # More complex test with mixed dimensions\n+    M1 = Quantity('M1')\n+    SI.set_quantity_dimension(M1, kilogram)\n+    SI.set_quantity_scale_factor(M1, 10 * kilogram)\n+\n+    F1 = M1 * A1\n+    SI.set_quantity_dimension(F1, newton)\n+    SI.set_quantity_scale_factor(F1, 98 * newton)\n+\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 1 * minute)\n+\n+    # Force * time should be the same dimension as energy\n+    E1 = F1 * T2\n+\n+    SI._collect_factor_and_dimension(E1)  # should not raise an error\n+\n+    # Checking with different time scales\n+    expr3 = A1 * (T1 + T2)\n+    SI._collect_factor_and_dimension(expr3)  # should not raise an error\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..713a3f8 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, V, milli\n+from sympy.core.singleton import S\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..c8f4cd3 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -174,6 +174,15 @@ class SubBase(Base):\n     sub_id = models.IntegerField(primary_key=True)\n \n \n+class Parent(models.Model):\n+    class Meta:\n+        ordering = ['-pk']\n+\n+\n+class Child(Parent):\n+    pass\n+\n+\n class GrandParent(models.Model):\n     first_name = models.CharField(max_length=80)\n     last_name = models.CharField(max_length=80)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..d8b2a3e 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -342,6 +342,33 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+    def test_order_by_self_referential_fk(self):\n+        # Setup test data\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1)\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2)\n+        \n+        author_1.editor = author_2  # Self-referential relationship\n+        author_1.save()\n+        \n+        author_2.editor = author_1  # Self-referential relationship\n+        author_2.save()\n+\n+        # Order by the self-referential ForeignKey 'editor' field\n+        self.assertQuerysetEqual(\n+            Article.objects.order_by('author__editor'), \n+            ['Article 2', 'Article 1'], \n+            attrgetter('headline')\n+        )\n+\n+        # Test with order_by on the '_id' field\n+        self.assertQuerysetEqual(\n+            Article.objects.order_by('author__editor_id'), \n+            ['Article 1', 'Article 2'], \n+            attrgetter('headline')\n+        )\n \n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n",
  "django__django-13265": "",
  "django__django-14534": "",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..fcad074 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,37 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+from django.test import TestCase, override_settings\n+from django.contrib.auth.models import Permission\n+from django.apps import apps\n+from django.core.management import call_command\n+from django.test.utils import captured_stdout\n+\n+@override_settings(DATABASE_ROUTERS=[DefaultDBRouter()])\n+class MigrateCommandDatabaseParameterTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def test_migrate_respects_database_parameter(self):\n+        \"\"\"\n+        Test that the migrate command respects the --database parameter\n+        when creating permissions.\n+        \"\"\"\n+        with captured_stdout() as stdout:\n+            call_command('migrate', database='other', verbosity=1)\n+        \n+        # Ensure that the output contains operations performed on the 'other' database\n+        output = stdout.getvalue()\n+        self.assertIn('Running migrations for database: other', output)\n+\n+    def test_permissions_created_in_specified_database(self):\n+        \"\"\"\n+        Test that permissions are created in the specified database.\n+        \"\"\"\n+        Permission.objects.using(\"other\").delete()\n+        with self.assertNumQueries(6, using=\"other\"):\n+            call_command('migrate', database='other')\n+        \n+        # Verify that permissions are present in the 'other' database\n+        self.assertGreater(Permission.objects.using(\"other\").count(), 0)\n",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..3d14a29 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -658,7 +658,39 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n-def test_colorbar_get_ticks_2():\n+def test_colorbar_update_after_norm_change():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    from matplotlib.colors import LogNorm, Normalize\n+\n+    # Create sample data\n+    x, y = np.ogrid[-4:4:31j, -4:4:31j]\n+    z = np.exp(-x**2 - y**2)\n+\n+    fig, ax = plt.subplots()\n+    pcm = ax.pcolormesh(z, cmap='viridis')\n+\n+    # Create a colorbar\n+    cbar = fig.colorbar(pcm, ax=ax)\n+\n+    # Change the norm to LogNorm and update the colorbar\n+    pcm.set_norm(LogNorm(vmin=0.01, vmax=1))\n+    cbar.update_normal(pcm)\n+    fig.canvas.draw()\n+\n+    # Verify the colorbar scale is updated appropriately and no errors occur\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+\n+    # Change back to Normalize and update the colorbar\n+    pcm.set_norm(Normalize(vmin=0, vmax=1))\n+    cbar.update_normal(pcm)\n+    fig.canvas.draw()\n+\n+    # Verify the colorbar scale is updated appropriately and no errors occur\n+    assert cbar.ax.yaxis.get_scale() == 'linear'\n+\n+    # Final assertion to ensure no ZeroDivisionError or other exceptions\n+    cbar.update_normal(pcm)\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..e659aad 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_stacked_array_to_unstacked_dataset_single_dimension(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..f32a437 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,32 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+    \n+    def test_feature_union_pandas_aggregating():\n+        \"\"\"Test FeatureUnion aggregating with pandas output.\"\"\"\n+        pd = pytest.importorskip(\"pandas\")\n+        from sklearn.pipeline import make_union\n+        from sklearn.base import BaseEstimator, TransformerMixin\n+        from sklearn import set_config\n+        \n+        class MyTransformer(BaseEstimator, TransformerMixin):\n+            def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+                return self\n+        \n+            def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+                return X[\"value\"].groupby(X[\"date\"]).sum().reset_index()\n+        \n+        # Prepare the data\n+        index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+        data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+        data[\"date\"] = index.date\n+        \n+        # Test with pandas output\n+        set_config(transform_output=\"pandas\")\n+        result = make_union(MyTransformer()).fit_transform(data)\n+        \n+        # Check if the result is a DataFrame and has the correct format\n+        assert isinstance(result, pd.DataFrame)\n+        assert list(result.columns) == ['date', 'value']\n+        assert len(result) == 4  # Should aggregate to 4 unique dates\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..e00ecc7 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,67 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.ext.autodoc import do_autodoc\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_annotation_only_attributes(app: SphinxTestApp):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_annotation_only_undocumented_attributes(app: SphinxTestApp):\n+    options = {\"members\": None, \"inherited-members\": True, \"undoc-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..4a5bb87 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,8 +358,24 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n-\n-def test_exptrigsimp():\n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+def test_trigsimp_with_rational():\n+    # Check if trigsimp can correctly simplify the expression with Rational numbers.\n+    r1 = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    simplified_r1 = trigsimp(r1)\n+    assert simplified_r1 == cos(Rational(1, 25) - Rational(1, 50))\n+\n+    # Verify acos of the expression also simplifies as expected\n+    acos_expr = acos(r1)\n+    assert acos_expr.simplify() == acos(cos(Rational(1, 25) - Rational(1, 50)))\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..9978b9d 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4344,8 +4344,30 @@ def test_pretty_no_wrap_line():\n def test_settings():\n     raises(TypeError, lambda: pretty(S(4), method=\"garbage\"))\n \n+def test_bad_centering_in_sum_pretty_print():\n+    from sympy import Sum, pprint\n+    from sympy.abc import x\n+    from sympy import oo\n \n-def test_pretty_sum():\n+    # This is the problematic expression from the issue description:\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    # Generate the pretty print output with pprint\n+    result = pprint(expr, use_unicode=True, wrap_line=False, num_columns=30)\n+\n+    # Verify that `x` and `+ 3` are aligned correctly\n+    expected_output = u(\"\"\"\\\n+  \u221e       \\n\\\n+ ___      \\n\\\n+ \u2572        \\n\\\n+  \u2572   x + 3\\n\\\n+  \u2571       \\n\\\n+ \u2571        \\n\\\n+ \u203e\u203e\u203e      \\n\\\n+x = 1     \\\n+\"\"\")\n+\n+    assert result == expected_output, f\"Expected:\\n{expected_output}\\nGot:\\n{result}\"\n     from sympy.abc import x, a, b, k, m, n\n \n     expr = Sum(k**k, (k, 0, n))\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..fe33c94 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,21 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy import raises\n+\n def test_uniq():\n+    # Test to ensure RuntimeError is raised when modifying the list during iteration\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    # Additional test cases\n+    f = [1, 2, 3, 4, 5]\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+    f = ['a', 'b', 'c', 'c']\n+    raises(RuntimeError, lambda: [f.clear() for i in uniq(f)])\n+    # Ensure existing functionality remains correct\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..0dedeae 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -545,6 +545,25 @@ class BasicExpressionsTests(TestCase):\n         self.assertCountEqual(subquery_test, [self.foobar_ltd, self.gmbh])\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n+    def test_subquery_sql(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+\n+    def test_subquery_empty(self):\n+        Subquery([]).query.subquery = True  # Test an empty subquery explicitly set with subquery=True\n+\n+    def test_subquery_invalid(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        employees_subquery.query.subquery = False  # Directly test the invalid case\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertNotIn('(SELECT ', sql)  # Ensure the SQL is invalid without subquery=True\n \n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..52eb525 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,4 +1,6 @@\n+\n from django.db.models import FilteredRelation\n+from .models import Tournament, PoolStyle\n from django.test import TestCase\n \n from .models import Organiser, Pool, PoolStyle, Tournament\n@@ -152,7 +154,15 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_wrong_select_related(self):\n+        # This tests the fix for the issue where `select_related` with `FilteredRelation` picks the wrong related instance.\n+        with self.assertNumQueries(3):\n+            pool_styles = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                ).select_related('tournament_pool', 'tournament_pool__tournament')\n+            )\n+            self.assertEqual(pool_styles[0].tournament_pool.tournament, pool_styles[0].pool.tournament)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +173,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..7024fbe 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1623,7 +1624,23 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_hue_in_map(self):\n+        import seaborn as sns\n+        import pandas as pd\n+\n+        # Load the iris dataset\n+        iris = sns.load_dataset(\"iris\")\n+\n+        # Attempt to create a PairGrid and map a scatterplot with hue directly\n+        try:\n+            g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            # If no exception is raised, the test passes\n+            assert True\n+        except Exception as e:\n+            # If an exception is caught, the test fails\n+            assert False, f\"PairGrid mapping with hue raised an exception: {e}\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..1248848 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -403,6 +403,9 @@ class TestCustomConftests:\n         testdir.mkdir(\"sub\")\n         testdir.makepyfile(\"def test_x(): pass\")\n         result = testdir.runpytest(\"--collect-only\")\n+        # Test single-character shortcut if implemented (e.g., '-c' for '--collect-only')\n+        single_char_result = testdir.runpytest(\"-c\")\n+        single_char_result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n@@ -434,6 +437,9 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        # Test single-character shortcut if implemented (e.g., '-c' for '--collect-only')\n+        single_char_result = testdir.runpytest(\"-c\")\n+        single_char_result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 1db4096..bfea4ab 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1024,6 +1024,39 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '      None\\n' == context)\n \n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_documented_star_args(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithDocumentedInitAndStarArgs\\n'\n+        '   :special-members: __init__\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._ClassWithDocumentedInitAndStarArgs(x, *args, **kwargs)\\n'\n+            '\\n'\n+            '   Class docstring.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **x** (*int*) --\\n'\n+            '      ***args** (*int*) --\\n'\n+            '      ****kwargs** (*int*) --\\n'\n+            '\\n'\n+            '   __init__(x, *args, **kwargs)\\n'\n+            '\\n'\n+            '      Init docstring.\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **x** (*int*) -- Some integer\\n'\n+            '         ***args** (*int*) --\\n'\n+            '           Some integer\\n'\n+            '         ****kwargs** (*int*) --\\n'\n+            '           Some integer\\n'\n+            '\\n'\n+            '      Return type:\\n'\n+            '         None\\n' == context)\n+\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n def test_autodoc_typehints_description_with_documented_init(app):\n@@ -1052,6 +1085,39 @@ def test_autodoc_typehints_description_with_documented_init(app):\n             '         None\\n' == context)\n \n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_documented_star_args(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithDocumentedInitAndStarArgs\\n'\n+        '   :special-members: __init__\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._ClassWithDocumentedInitAndStarArgs(x, *args, **kwargs)\\n'\n+            '\\n'\n+            '   Class docstring.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **x** (*int*) --\\n'\n+            '      ***args** (*int*) --\\n'\n+            '      ****kwargs** (*int*) --\\n'\n+            '\\n'\n+            '   __init__(x, *args, **kwargs)\\n'\n+            '\\n'\n+            '      Init docstring.\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **x** (*int*) -- Some integer\\n'\n+            '         ***args** (*int*) --\\n'\n+            '           Some integer\\n'\n+            '         ****kwargs** (*int*) --\\n'\n+            '           Some integer\\n'\n+            '\\n'\n+            '      Return type:\\n'\n+            '         None\\n' == context)\n+\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n                                    'autodoc_typehints_description_target': 'documented'})\n@@ -1075,6 +1141,39 @@ def test_autodoc_typehints_description_with_documented_init_no_undoc(app):\n             '         **x** (*int*) -- Some integer\\n' == context)\n \n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_documented_star_args(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithDocumentedInitAndStarArgs\\n'\n+        '   :special-members: __init__\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._ClassWithDocumentedInitAndStarArgs(x, *args, **kwargs)\\n'\n+            '\\n'\n+            '   Class docstring.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **x** (*int*) --\\n'\n+            '      ***args** (*int*) --\\n'\n+            '      ****kwargs** (*int*) --\\n'\n+            '\\n'\n+            '   __init__(x, *args, **kwargs)\\n'\n+            '\\n'\n+            '      Init docstring.\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **x** (*int*) -- Some integer\\n'\n+            '         ***args** (*int*) --\\n'\n+            '           Some integer\\n'\n+            '         ****kwargs** (*int*) --\\n'\n+            '           Some integer\\n'\n+            '\\n'\n+            '      Return type:\\n'\n+            '         None\\n' == context)\n+\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n                                    'autodoc_typehints_description_target': 'documented_params'})\n@@ -1101,6 +1200,39 @@ def test_autodoc_typehints_description_with_documented_init_no_undoc_doc_rtype(a\n             '         **x** (*int*) -- Some integer\\n' == context)\n \n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_documented_star_args(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithDocumentedInitAndStarArgs\\n'\n+        '   :special-members: __init__\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._ClassWithDocumentedInitAndStarArgs(x, *args, **kwargs)\\n'\n+            '\\n'\n+            '   Class docstring.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **x** (*int*) --\\n'\n+            '      ***args** (*int*) --\\n'\n+            '      ****kwargs** (*int*) --\\n'\n+            '\\n'\n+            '   __init__(x, *args, **kwargs)\\n'\n+            '\\n'\n+            '      Init docstring.\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **x** (*int*) -- Some integer\\n'\n+            '         ***args** (*int*) --\\n'\n+            '           Some integer\\n'\n+            '         ****kwargs** (*int*) --\\n'\n+            '           Some integer\\n'\n+            '\\n'\n+            '      Return type:\\n'\n+            '         None\\n' == context)\n+\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n def test_autodoc_typehints_description_for_invalid_node(app):\n@@ -1108,6 +1240,39 @@ def test_autodoc_typehints_description_for_invalid_node(app):\n     restructuredtext.parse(app, text)  # raises no error\n \n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_documented_star_args(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithDocumentedInitAndStarArgs\\n'\n+        '   :special-members: __init__\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._ClassWithDocumentedInitAndStarArgs(x, *args, **kwargs)\\n'\n+            '\\n'\n+            '   Class docstring.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **x** (*int*) --\\n'\n+            '      ***args** (*int*) --\\n'\n+            '      ****kwargs** (*int*) --\\n'\n+            '\\n'\n+            '   __init__(x, *args, **kwargs)\\n'\n+            '\\n'\n+            '      Init docstring.\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **x** (*int*) -- Some integer\\n'\n+            '         ***args** (*int*) --\\n'\n+            '           Some integer\\n'\n+            '         ****kwargs** (*int*) --\\n'\n+            '           Some integer\\n'\n+            '\\n'\n+            '      Return type:\\n'\n+            '         None\\n' == context)\n+\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"both\"})\n def test_autodoc_typehints_both(app):\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..f57a5db 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,22 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n-\n-def test_Identity_doit():\n+from sympy import Sum, Symbol, assuming, ask, refine, symbols\n+from sympy.matrices.expressions.matexpr import MatrixSymbol\n+from sympy.assumptions import Q as Query\n+\n+def test_issue_sum_identity_matrix_elements():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+\n+    e = None\n+    with assuming(Query.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+    # Test if the sum of all elements equals 'n'\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 3) == 3\n+    assert Sum(Sum(e[i, j], (i, 0, 2)), (j, 0, 2)).doit().subs(n, 3) == 3\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..2914b9a 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -246,6 +246,13 @@ GOOD_PAIRS = [\n ]\n \n \n+def test_issue_fraction_parsing():\n+    problematic_latex = \"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\"\n+    expected_expression = ((a**3 + b)/c)/(1/(c**2))\n+    assert parse_latex(problematic_latex) == expected_expression\n+\n+from sympy.parsing.latex import parse_latex\n+\n def test_parseable():\n     from sympy.parsing.latex import parse_latex\n     for latex_str, sympy_expr in GOOD_PAIRS:\n"
}